
import LIB/default-instruction-set.lm;
import LIB/default-primitives.lm;
import LIB/default-stdlib.lm;
import LIB/default-rules.lm;
import SRC/ast.lm;
import SRC/type-index.lm;

main := Î». (: (tail(
   (let c (close TAny))
   (let te (close TypeEOF))
   (print(hash TAny))(print '\n_s)
   (print(hash TAny))(print '\n_s)
   (let x1 TAny)
   (print (hash x1))(print '\n_s)
   (set x1 TAny)
   (print (hash x1))(print '\n_s)
   (match x1 (
      ()
      ( TAny () )
   ))
   (print(hash (TGround( 'A_s te ))))(print '\n_s)
   (let x2 (TGround( 'A_s te )))
   (print(hash x2))(print '\n_s)
   (set x2 (TGround( 'A_s te )))
   (print(hash x2))(print '\n_s)
   (match x2 (
      ()
      ( (TGround( 'A_s TypeEOF )) () )
   ))
   (print(hash (TGround( 'B_s te ))))(print '\n_s)
   (let x3 (TGround( 'B_s te )))
   (print(hash x3))(print '\n_s)
   (set x3 (TGround( 'B_s te )))
   (match x3 (
      ()
      ( (TGround( 'B_s TypeEOF )) () )
   ))
   (print(hash x3))(print '\n_s)
   (print (hash(TAnd( c c ))))(print '\n_s)
   (print (hash(TAnd( c c ))))(print '\n_s)
)) Nil);
