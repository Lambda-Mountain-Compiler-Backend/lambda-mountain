
import LIB/default.lsts;

type2 alias A = B;
type2 opaque alias B = C;

interface self implements C {
   let f(p1: self, p2: C): C;
};
type2 D implies C;

let f(p1: B<c,d>, p2: C): C = p2;
type2 B<c,d> implements C;

type2 alias A = B;
type2 opaque alias A = B;
type2 A implies B;
type2 B<c:C,d> implements C<c>;
type2 A = { a: A, b: B };
type2 A = { a: A, b: B } A1 { c: C, d: D} | A2 { e: E, f: f };
type2 phi A = B | C;
type2 A :C = B | C;
type2 A<x,y>;
type2 A<x: Number,y>;
type2 A size 8_B;
type2 A size 8_b;
