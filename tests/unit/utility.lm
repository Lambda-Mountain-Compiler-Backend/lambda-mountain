
import PRODUCTION/utility.lm;

(assert-eq( True True ));

(assert-typeof( () Nil ));
(assert-not-typeof( 1 Nil ));
(assert-not-typeof( (1 2) Nil ));

(assert-typeof( 1 Atom ));
(assert-not-typeof( () Atom ));
(assert-not-typeof( (1 2) Atom ));

(assert-typeof( (1 2) Cons ));
(assert-not-typeof( 1 Cons ));
(assert-not-typeof( () Cons ));

(assert-typeof( (StrictExpr ()) StrictExpr ));
(assert-not-typeof( (StrictExpr ()) Expr ));
(assert-not-typeof( (StrictExpr ()) Nil ));
(assert-not-typeof( (StrictExpr ()) Atom ));

(assert-typeof( () (List Atom) ));
(assert-typeof( () List<Atom> ));
(assert-typeof( ((() 1) 2) List<Atom> ));
(assert-not-typeof( ((() 1) 2) List<Cons> ));
(assert-not-typeof( ((() 1) 2) List<Nil> ));

(assert-typeof( () List<[Atom,Nil]> ));
(assert-typeof( ((() (1 ()) ) (2 ()) ) List<[Atom,Nil]> ));
(assert-not-typeof( ((() (1 ()) ) (2 ()) ) List<[Nil,Nil]> ));
(assert-not-typeof( ((() (1 ()) ) (2 ()) ) List<[Atom,Atom]> ));

(assert-typeof( () List<List<Atom>> ));
(assert-typeof( ( () (() '1) ) List<List<Atom>> ));
(assert-not-typeof( ( () (() '1) ) List<List<Nil>> ));
(assert-not-typeof( ( () (() '1) ) List<Atom> ));
