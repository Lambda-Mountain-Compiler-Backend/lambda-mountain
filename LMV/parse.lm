
flush-buff := 位(: tks List<String>)(: buff S). (: (
   (match buff (
      ()
      ( SNil () )
      ( _ (set tks (LCons(
         (clone-rope buff)
         (close tks)
      ))))
   ))
   tks
) List<String>);

tokenize := 位(: file-contents String). (: (
   (let tks (: LEOF List<String>))
   (let buff SNil)
   (while (head-string file-contents) (
      (let c (head-string file-contents))
      (if (||( (==( c 10_u8 ))
       (||( (==( c 33_u8 ))
        (||( (==( c 35_u8 ))
         (||( (==( c 36_u8 ))
          (||( (==( c 37_u8 ))
           (||( (==( c 38_u8 ))
            (||( (==( c 39_u8 ))
             (||( (==( c 40_u8 ))
              (||( (==( c 41_u8 ))
               (||( (==( c 42_u8 ))
                (||( (==( c 43_u8 ))
                 (||( (==( c 44_u8 ))
                  (||( (==( c 45_u8 ))
                   (||( (==( c 46_u8 ))
                    (||( (==( c 47_u8 ))
                     (||( (==( c 58_u8 ))
                      (||( (==( c 59_u8 ))
                       (||( (==( c 60_u8 ))
                        (||( (==( c 61_u8 ))
                         (||( (==( c 62_u8 ))
                          (||( (==( c 63_u8 ))
                           (||( (==( c 64_u8 ))
                            (||( (==( c 91_u8 ))
                             (||( (==( c 92_u8 ))
                              (||( (==( c 93_u8 ))
                               (||( (==( c 94_u8 ))
                                (||( (==( c 96_u8 ))
                                 (||( (==( c 123_u8 ))
                                  (||( (==( c 124_u8 ))
                                   (||( (==( c 125_u8 ))
                                    (||( (==( c 126_u8 ))
                                         (==( 1_u8 0_u8 ))
                                    ))
                                   ))
                                  ))
                                 ))
                                ))
                               ))
                              ))
                             ))
                            ))
                           ))
                          ))
                         ))
                        ))
                       ))
                      ))
                     ))
                    ))
                   ))
                  ))
                 ))
                ))
               ))
              ))
             ))
            ))
           ))
          ))
         ))
        ))
       ))
      )) (
         (set tks (flush-buff( tks buff )))
         (set tks (flush-buff( tks (SAtom(clone-rope c)) )))
         (set buff SNil)
      ) (
         (match c (
            ()
            ( 9_u8 ( (set tks (flush-buff( tks buff ))) (set buff SNil) ))
            ( 32_u8 ( (set tks (flush-buff( tks buff ))) (set buff SNil) ))
            ( 34_u8 (
               (set tks (flush-buff( tks buff )))
               (set file-contents (tail-string file-contents))
               (let sbuff (SAtom '"_s))
               (while (!=( (head-string file-contents) 34_u8 )) (
                  (match (head-string file-contents) (
                     ()
                     ( 0_u8 (set file-contents '"_s) )
                     ( 92_u8 (
                        (set sbuff (SCons(
                           (close sbuff)
                           (close(SAtom(clone-rope(head-string file-contents))))
                        )))
                        (set file-contents (tail-string file-contents))
                        (set sbuff (SCons(
                           (close sbuff)
                           (close(SAtom(clone-rope(head-string file-contents))))
                        )))
                        (set file-contents (tail-string file-contents))
                     ))
                     ( sc (
                        (set sbuff (SCons(
                           (close sbuff)
                           (close(SAtom(clone-rope sc)))
                        )))
                        (set file-contents (tail-string file-contents))
                     ))
                  ))
               ))
               (set sbuff (SCons(
                  (close sbuff)
                  (close(SAtom '"_s))
               )))
               (set tks (flush-buff( tks sbuff )))
               (set buff SNil)
            ))
            ( _ (set buff (SCons(
               (close buff)
               (close(SAtom(clone-rope c)))
            ))))
         ))
      ))
      (set file-contents (tail-string file-contents))
   ))
   (reverse tks)
) List<String>);

parse-gnu := 位(: fp String). (: (
   (print 'Parse\s_s)(print fp)(print '\n_s)
   (let tk (tokenize(read-file fp)))
   (let linebuff (: LEOF List<String>))
   (while (non-zero tk) (match tk (
      ()
      ( (LCons( '\n_s tl )) (
         (parse-gnu-line (reverse linebuff))
         (set linebuff (: LEOF List<String>))
         (set tk tl)
      ))
      ( (LCons( hd tl )) (
         (set linebuff (LCons( hd (close linebuff) )))
         (set tk tl)
      ))
   )))
   (parse-gnu-line (reverse linebuff))
   (print tk)(print '\n_s)
) Nil);

parse-gnu-line := 位(: line List<String>). (: (
   (if (non-zero line) (match line (
      ()
      ( u (
         (print 'Unexpected\sLine\s_s)
         (while (non-zero u) (match u (
            ()
            ( (LCons( hd tl )) (
               (print hd)(print '\s_s)
               (set u tl)
            ))
         )))
         (print '\n_s)
         (exit 1_u64)
      ) )
   )) ())
) Nil);
