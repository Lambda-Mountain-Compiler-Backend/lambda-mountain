#infer_constant
::infer := λtctx (~ x Int). (: x Int)
::infer := λtctx (~ x Float). (: x Float)

#infer_ascription
::infer := λtctx (: x typeofx). (: x typeofx)

#infer_abstraction
::infer := λtctx (λ(: x typeofx). y). (
   let tctx (cons (x typeofx) tctx)
   let typeofy (match y (cases tctx))
   (:
      (lambda (: x typeofx) . (::infer tctx y))
      (Arrow typeofx typeofy)
   )
)

#infer_application
::infer := λtctx (f x). match ((::infer tctx f) (::infer tctx x)) (
   λ (
      (: g (Arrow typeofga typeofr))
      (: a typeofa)
   ). if typeofga typeofa (:
      (
         (: g (Arrow typeofa typeofr))
         (: a typeofa)
      )
      typeofr
   )
)

#infer_variable
::infer := λtctx x. match (ctx tctx x) (
   (λ(x typeofx). (: x typeofx))
)
