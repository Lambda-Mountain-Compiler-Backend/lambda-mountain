#infer_constant
::infer := λtctx (~ x Int). (: x Int)
::infer := λtctx (~ x Float). (: x Float)

#infer_ascription
::infer := λtctx (: x typeofx). (: x typeofx)

#infer_abstraction
::infer := λtctx (λ(: x typeofx). y). (
   infer_abstraction
)
#   let (tctx (cons (x typeofx)))
#   let (typeofy (eval tctx y))
#   (:
#      (lambda (: x typeofx). (eval tctx y))
#      (Arrow typeofx typeofy)
#   )

#infer_application
#::infer := λtctx (f x). (match ((infer tctx f) (infer tctx x))
#   λ ((: f (Arrow typeofx typeofy)) (: x typeofx)).
#   : ((: f typeoff) (: x typeofx)) typeofy
#)

#infer_variable
::infer := λtctx x. match (ctx tctx x) (
   (λ(x typeofx). (: x typeofx))
)
