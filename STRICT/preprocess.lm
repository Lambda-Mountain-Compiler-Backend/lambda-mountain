
type Macro (Macro( AST , AST ));
type MacroList MEOF | (MSeq( MacroList[] , Macro ));

preprocess-macros := (: MEOF MacroList);

close := λ(: x MacroList). (: (tail(
   (mov( (malloc(sizeof MacroList)) R8 ))
   (mov( x 0_u64 (as R8 MacroList[]) ))
   (as R8 MacroList[])
)) MacroList[]);

non-zero := λ(: x MacroList). (: (tail(
   (let r 1_u64)
   (match x (
      ()
      ( MEOF (set r 0_u64))
      ( _ () )
   ))
   r
)) U64);

preprocess := λ. (: (tail(
   (preprocess-index-typedefs ast-parsed-program)
   (let program (maybe-deref(preprocess-apply ast-parsed-program)))
   (set ast-parsed-program program)
)) Nil);

preprocess-index-typedefs := λ(: program AST). (: (
   (while (non-zero program) (match program (
      ()
      ( (Seq( rst term )) (tail(
         (preprocess-index-typedef term)
         (set program rst)
      )))
   )))
) Nil);

preprocess-index-typedef := λ(: term AST). (: (match term (
   ()
   ( (ASTType( lhs rhs )) (tail(
      (print 'Index\sType:\s_s)
      (print lhs)
      (print '\n_s)
#      (preprocess-index-indices( ds 0 ))
   )))
   ( _ () )
)) Nil);

preprocess-apply := λ(: program AST). (: (tail(
   ()
   (close program)
)) AST[]);
