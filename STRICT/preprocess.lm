
type Macro (Macro( AST , AST ));
type MacroList MEOF | (MSeq( MacroList[] , Macro ));

preprocess-macros := (: MEOF MacroList);

close := λ(: x MacroList). (: (tail(
   (mov( (malloc(sizeof MacroList)) R8 ))
   (mov( x 0_u64 (as R8 MacroList[]) ))
   (as R8 MacroList[])
)) MacroList[]);

non-zero := λ(: x MacroList). (: (tail(
   (let r 1_u64)
   (match x (
      ()
      ( MEOF (set r 0_u64))
      ( _ () )
   ))
   r
)) U64);

preprocess := λ. (: (tail(
   (preprocess-index-typedefs ast-parsed-program)
   (let program (maybe-deref(preprocess-apply ast-parsed-program)))
   (set ast-parsed-program program)
   ()
)) Nil);

preprocess-index-typedefs := λ(: program AST). (: (
   (while (non-zero program) (match program (
      ()
      ( (Seq( rst term )) (tail(
         (preprocess-index-typedef term)
         (set program rst)
      )))
   )))
) Nil);

preprocess-index-typedef := λ(: term AST). (: (match term (
   ()
   ( (ASTType( lhs rhs )) (tail(
      (print 'Index\sType:\s_s)
      (print lhs)
      (print '\n_s)
#      (preprocess-index-indices( ds 0 ))
   )))
   ( _ () )
)) Nil);

preprocess-destructure-type := λ(: tt String). (: (tail(
   ()
   (close TNil)
)) Type[]);

preprocess-apply := λ(: program AST). (: (tail(
   (let r program)
   (match program (
      ()
      ( (App( (App( (Lit ':_s) mvar )) (Lit mtype) )) (
         (set r (Asc( (preprocess-apply mvar) (preprocess-destructure-type mtype) )))
      ))
      ( (App( (App( (Lit ':_s) mvar )) (Var mtype) )) (
         (set r (Asc( (preprocess-apply mvar) (preprocess-destructure-type mtype) )))
      ))
      ( (Lit l) (tail(
         (let suffixes parse-suffixes)
         (while (non-zero suffixes) (match suffixes (
            ()
            ( (SfxSeq( rst (Sfx( sfxs sfxtt )) )) (
               (if (is-suffix( l sfxs )) (
                  (set r (Asc( (close (Lit (remove-suffix( l sfxs )))) (close sfxtt) )))
               ) ())
            ))
         )))
      )))
      ( (Var l) (tail(
         (let suffixes parse-suffixes)
         (while (non-zero suffixes) (match suffixes (
            ()
            ( (SfxSeq( rst (Sfx( sfxs sfxtt )) )) (
               (if (is-suffix( l sfxs )) (
                  (set r (Asc( (close (Lit (remove-suffix( l sfxs )))) (close sfxtt) )))
               ) ())
            ))
         )))
      )))
      ( (App( (Var vn) vt )) (
         if (is-macro-head vn) (set r (preprocess-apply-maybe program))
                               (set r (App( (close(Var vn)) (preprocess-apply vt) )))
      ))
      ( (App( (App( (Var vn) vt1 )) vt2 )) (
         if (is-macro-head vn) (set r (preprocess-apply-maybe program))
                               (set r (App( (close(App( (close(Var vn)) (preprocess-apply vt1) ))) (preprocess-apply vt2) )))
      ))
      ( (App( l r )) (set r (App(
         (preprocess-apply l)
         (preprocess-apply r)
      ))))
      ( u (set r u))
   ))
   (close r)
)) AST[]);

is-macro-head := λ(: s String). (: (tail(
   (let r 0_u64)
   (match s (
      ()
      ( 'let_s (set r 1_u64) )
      ( 'match_s (set r 1_u64) )
      ( 'match-pats_s (set r 1_u64) )
      ( 'match-pats-arm_s (set r 1_u64) )
      ( _ () )
   ))
   r
)) U64);

preprocess-apply-maybe := λ(: program AST). (: (tail(
   ()
   (close program)
)) AST[]);
