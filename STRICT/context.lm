
type CCContext (CCCEOF) | (CCCtxBind( CCContext[] , String , Type , CCFragment ));

non-zero := λ(: t CCContext). (: (tail(
   (let r 1_u64)
   (match t (
      ()
      ( CCCEOF (set r 0_u64))
      ( _ () )
   ))
   r
)) U64);

close := λ(: x CCContext). (: (tail(
   (mov( (malloc(sizeof CCContext)) R8 ))
   (mov( x 0_u64 (as R8 CCContext[]) ))
   (as R8 CCContext[])
)) CCContext[]);

cccontext::new := λ. (: (tail(
   (let r CCCEOF)
   (close r)
)) CCContext[]);

cccontext::wrapped-lookup := λ(: ctx CCContext)(: k String)(: kt Type). (: (tail(
   (let rst (maybe-deref(ccfragment::new())))
   (let u (WrappedLocal( 0_i64 rst )))
   (close u)
)) WrappedFragment[]);

cccontext::lookup := λ(: ctx CCContext)(: k String)(: kt Type)(: sloc AST). (: (tail(
   (let r (maybe-deref(ccfragment::new())))
   (let found False_u8)
   (while (non-zero ctx) (match ctx (
      ()
      ( (CCCtxBind( rst (*( rk (*( rt rf )) )) )) (
         (if (==( k rk )) (
            (match (maybe-deref(typecheck-slot( rt '->_s ))) (
               ()
               ( (TGround( '->_s _ )) (tail(
                  (let u (maybe-deref(typecheck-apply( sloc rt kt ))))
                  (if (non-zero u) (tail(
                     (set r rf)
                     (set found True_u8)
                     (set ctx CCCEOF)
                  )) ())
               )))
               ( _ (tail(
                  (set r rf)
                  (set found True_u8)
                  (set ctx CCCEOF)
               )))
            ))
         ) (
            (set ctx rst)
         ))
      ))
   )))
   (if found () (
      (exit-error( 'Context::lookup\sCould\sNot\sFind\sSymbol_s sloc ))
   ))
   (close r)
)) CCFragment[]);

cccontext::bind := λ(: ctx CCContext)(: k String)(: kt Type)(: f CCFragment). (: (tail(
   (let new-ctx (CCCtxBind(
      (close ctx)
      k kt f
   )))
   (close new-ctx)
)) CCContext[]);

cccontext::bind := λ(: ctx CCContext)(: k String)(: v String). (: (tail(
   ()
   (close ctx)
)) CCContext[]);

cccontext::get := λ(: ctx CCContext)(: k String). (: (tail(
   ()
   'TODO\scccontext::get_s
)) String);

cccontext::get-offset := λ(: ctx CCContext). (: (tail(
   ()
   0_i64
)) I64);
