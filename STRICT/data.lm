
compile-text-header := 位 . (: (tail(
   (let output SNil)
   (set output (SCons( (close output) (close(SAtom '.global\s_start\n_s )) )))
   (set output (SCons( (close output) (close(SAtom '.text\n_s )) )))
   (set output (SCons( (close output) (close(SAtom '_start:\n_s )) )))
   (set output (SCons( (close output) (close assemble-init-section) )))
   (set output (SCons( (close output) (close(SAtom '\tpush\s%rbp\n_s )) )))
   (set output (SCons( (close output) (close(SAtom '\tmov\s%rsp,\s%rbp\n_s )) )))
   #if argv used then push argc / argv
   (set output (SCons( (close output) (close(SAtom '\tcall\smain\n_s )) )))
   (set output (SCons( (close output) (close(SAtom '\tmov\s%rbp,\s%rsp\n_s )) )))
   (set output (SCons( (close output) (close(SAtom '\tpop\s%rbp\n_s )) )))
   (close output)
)) S[]);

compile-data-header := 位 . (: (tail(
   (let output SNil)
   (set output (SCons( (close output) (close(SAtom '.data\n_s )) )))
   (close output)
)) S[]);

compile-argv-text-header := 位 . (: (tail(
   (let r SNil)
   (close r)
)) S[]);

compile-exit-cleanup := 位 . (: (tail(
   (let r SNil)
   (set r (SCons( (close r) (close(SAtom '\tmov\s$60,\s%rax\n_s)) )))
   (set r (SCons( (close r) (close(SAtom '\tmov\s$0,\s%rdi\n_s)) )))
   (set r (SCons( (close r) (close(SAtom '\tsyscall\n_s)) )))
   (close r)
)) S[]);
