
#global binding
compile-global := λ(: ctx CCContext)(: k String)(: term AST). (: (tail(
   (let kt (maybe-deref(typecheck-lookup term)))
   (match term (
      ()
      ( (Abs( lhs rhs )) (tail(
         (print 'Compile\sGlobal\s_s)(print k)(print kt)(print lhs)(print '\n_s)
         (let ctx-2 (maybe-deref(compile-destructure-args( ctx lhs 0_i64 ))))
         (set ctx ctx-2)
         (let stack-offset (cccontext::get-offset( ctx )))
         (let e (maybe-deref(compile-expr( ctx rhs stack-offset Return ))))
         (let text SNil)
         (if (==( k 'main_s )) (
            (set text (SCons( (close text) (close(SAtom( 'main_s ))) )))
         ) (
            (set text (SCons( (close text) (close(SAtom( (mangle-identifier( k kt )) ))) )))
         ))
         (set text (SCons( (close text) (close(SAtom( ':\n_s ))) )))
         (let frame (maybe-deref(ccfragment::get( e 'frame_s ))))
         (set text (SCons( (close text) (close frame) )))
         (let program (maybe-deref(ccfragment::get( e 'program_s ))))
         (set text (SCons( (close text) (close program) )))
         (let unframe (maybe-deref(ccfragment::get( e 'unframe_s ))))
         (set text (SCons( (close text) (close unframe) )))
         (set text (SCons( (close text) (close(SAtom '\tret\n_s)) )))
         (let text-etc (maybe-deref(ccfragment::get( e 'text_s ))))
         (set text (SCons( (close text) (close text-etc) )))
         (let data (maybe-deref(ccfragment::get( e 'data_s ))))
         (set assemble-text-section (SCons( (close assemble-text-section) (close text) )))
         (set assemble-data-section (SCons( (close assemble-data-section) (close data) )))
      )))
      ( (Asc( t tt )) (tail(
         (print 'TODO:\sDeclare\sGlobal\sVariable\n_s)
         ()
      )))
      ( _ (
         (exit-error( 'Unrecognized\sCompile\sGlobal\n_s term ))
      ))
   ))
)) Nil);

#top expression
compile-global := λ(: ctx CCContext)(: term AST). (: (tail(
   (let e (maybe-deref(ccfragment::new())))
   (close e)
)) CCFragment[]);

compile-expr := λ(: ctx CCContext)(: term AST)(: stack-offset I64)(: used Used). (: (tail(
   (let e (maybe-deref(ccfragment::new())))
   (let e-2 (maybe-deref(ccfragment::set-context( e ctx ))))
   (set e e-2)
   (match term (
      ()
      ( ASTNil () )
      ( ASTEOF () )
      ( (Var( id )) (tail(
         (print 'Lookup\s_s)(print id)(print '\n_s)
         (let e-1 (maybe-deref(cccontext::lookup( ctx id (maybe-deref(typecheck-lookup term)) term ))))(set e e-1)
         (print 'Looked\sUp\s_s)(print id)(print '\n_s)
         (let e-2 (maybe-deref(ccfragment::set-context( e ctx ))))(set e e-2)
         (let e-3 (maybe-deref(ccfragment::set-offset( e stack-offset ))))(set e e-3)
      )))
      ( (Lit( val )) (tail(
         (let ltype (maybe-deref(typecheck-lookup term)))
         (match (maybe-deref(typecheck-slot( ltype 'String_s ))) (
            ()
            ( (TGround( 'String_s _ )) (tail(
               (let e1 (maybe-deref(compile-declare-cstring( val ))))
               (set e e1)
            )))
            ( _ (tail(
               (let e1 (maybe-deref(ccfragment::expression( val ))))
               (set e e1)
            )))
         ))
         (let e-2 (maybe-deref(ccfragment::set-context( e ctx ))))(set e e-2)
      )))
      ( (Asc( t tt )) (tail(
         (let e1 (maybe-deref(compile-expr( ctx t stack-offset used ))))
         (set e e1)
      )))
      ( (App( (Var 'tail_s) (App( lt rt )) )) (tail(
         (let e1 (maybe-deref(compile-expr( ctx lt stack-offset Unused ))))
         (let e2 (maybe-deref(compile-expr( (maybe-deref(ccfragment::get-context e1)) rt (ccfragment::get-offset e1) used ))))
         (let e12 (maybe-deref(ccfragment::chain( e1 e2 ))))
         (set e e12)
      )))
      ( (App( (Var 'maybe-deref_s) t )) (tail(
         (let e1 (maybe-deref(compile-expr( ctx t stack-offset Used ))))
         (let tt (maybe-deref(typecheck-lookup t)))
         (match (maybe-deref(typecheck-slot( tt 'Array_s ))) (
            ()
            ( (TGround( 'Array_s (TypeSeq( (TypeSeq( TypeEOF TAny )) _ )) )) () )
            ( (TGround( 'Array_s (TypeSeq( (TypeSeq( TypeEOF inner-tt )) TAny )) )) (tail(
               (print 'TODO\sImplement\sDeref\n_s)
               (let new-tt (TAnd( (tstackvariable()) (close inner-tt) )))
               (let e1-2 (maybe-deref(ccfragment::set-type( e1 new-tt ))))
               (set e1 e1-2)
            )))
            ( _ () )
         ))
         (set e e1)
         (print e)
      )))
      ( (App( (Var 'sizeof_s) t )) (tail(
         (print 'TODO\sSizeof\n_s)
         (let sz (typecheck-sizeof(maybe-deref(typecheck-lookup t))))
         (let e1 (maybe-deref(ccfragment::expression(to-string sz))))
         (let et (TAnd( 
            (tliteral())
            (close(TAnd(
               (tconstant())
               (close(TAnd(
                  (tu64())
                  (tsized '8_s)
               )))
            )))
         )))
         (let e1-2 (maybe-deref(ccfragment::set-type( e1 et ))))(set e1 e1-2)
         (let e1-3 (maybe-deref(ccfragment::set-context( e1 ctx ))))(set e1 e1-3)
         (let e1-4 (maybe-deref(ccfragment::set-offset( e1 stack-offset ))))(set e1 e1-4)
         (set e e1)
      )))
      ( (App( (App( (Var 'as_s) t )) (Lit tt) )) (tail(
         (let e1 (maybe-deref(compile-expr( ctx t stack-offset used ))))
         (let outer-tt (maybe-deref(typecheck-lookup term)))
         (let inner-tt (maybe-deref(typecheck-lookup t)))
         (if (non-zero inner-tt) (tail(
            (let nn (maybe-deref(nonnormal inner-tt)))
            (if (non-zero nn) (
               (set outer-tt (TAnd(
                  (close outer-tt)
                  (close nn)
               )))
            ) ())
         )) ())
         (let e1-2 (maybe-deref(ccfragment::set-type( e1 outer-tt ))))(set e1 e1-2)
         (set e e1)
      )))
      ( (App( (App( (Var 'set_s) (Var k) )) rhs )) (tail(
         (let kt (maybe-deref(typecheck-lookup rhs)))
         (let binding (maybe-deref(cccontext::wrapped-lookup( ctx k kt ))))
         (match binding (
            ()
            ( (WrappedLocal( sv-offset rst )) (tail(
               (let e1 (maybe-deref(compile-expr( ctx rhs stack-offset Used ))))
               (let e1-2 (maybe-deref(ccfragment::set-type( e1 kt ))))
               (let e2 (maybe-deref(ccfragment::new())))
               (let e2-2 (maybe-deref(ccfragment::set-offset( e2 sv-offset ))))
               (let e2-3 (maybe-deref(ccfragment::set-context( e2-2 ctx ))))
               (let e2-4 (maybe-deref(ccfragment::set-offset( e2-3 stack-offset ))))
               (let e2-5 (maybe-deref(ccfragment::set-type( e1 (maybe-deref(tlocalvariable())) ))))
               (let e3 (maybe-deref(fragment-apply( ctx stack-offset 'mov_s
                  (FLSeq( (close(FLSeq( (close FLEOF) e1-2 ))) e2-5 ))
                  term
               ))))
               (let e3-2 (maybe-deref(ccfragment::set-context( e3 ctx ))))
               (set e e3-2)
            )))
            ( (WrappedGlobal( id rst )) (tail(
               (let e1 (maybe-deref(compile-expr( ctx rhs stack-offset Used ))))
               (let e1-2 (maybe-deref(ccfragment::set-type( e1 kt ))))
               (let e2 (maybe-deref(ccfragment::new())))
               (let e2-2 (maybe-deref(ccfragment::set( e2 'expression_s (SAtom id) ))))
               (let e2-3 (maybe-deref(ccfragment::set-context( e2-2 ctx ))))
               (let e2-4 (maybe-deref(ccfragment::set-offset( e2-3 stack-offset ))))
               (let e2-5 (maybe-deref(ccfragment::set-type( e1 (maybe-deref(tglobalvariable())) ))))
               (let e3 (maybe-deref(fragment-apply( ctx stack-offset 'mov_s
                  (FLSeq( (close(FLSeq( (close FLEOF) e1-2 ))) e2-5 ))
                  term
               ))))
               (let e3-2 (maybe-deref(ccfragment::set-context( e3 ctx ))))
               (set e e3-2)
            )))
            ( _ (
               (exit-error( 'Unknown\sVariable_s term ))
            ))
         ))
      )))
      ( (App( (App( (Var 'while_s) cond )) body )) (tail(
         (let e1 (maybe-deref(compile-expr( ctx cond stack-offset Used ))))
         (let e2 (maybe-deref(compile-expr( (maybe-deref(ccfragment::get-context e1)) body (ccfragment::get-offset e1) Unused ))))
         (let e3 (maybe-deref(as-branch-conditional e1)))
         (let label-begin-loop (uuid()))
         (let label-do-loop (uuid()))
         (let label-end-loop (uuid()))

         (let text SNil)
         (set text (SCons( (close text) (close(SAtom label-begin-loop)) )))
         (set text (SCons( (close text) (close(SAtom ':\n_s)) )))
         (set text (SCons( (close text) (ccfragment::get( e3 'frame_s )) )))
         (set text (SCons( (close text) (ccfragment::get( e3 'program_s )) )))
         (set text (SCons( (close text) (close(SAtom '\t_s)) )))
#         (set text (SCons( (close text) (ccfragment::get( e3 'expression_s )) )))
#         (set text (SCons( (close text) (close(SAtom '\s_s)) )))
#         (set text (SCons( (close text) (close(SAtom label-do-loop)) )))
         (set text (SCons( (close text) (close(SAtom '\n\tjmp\s_s)) )))
         (set text (SCons( (close text) (close(SAtom label-end-loop)) )))
         (set text (SCons( (close text) (close(SAtom '\n_s)) )))
         (set text (SCons( (close text) (close(SAtom label-do-loop)) )))
         (set text (SCons( (close text) (close(SAtom ':\n_s)) )))
         (set text (SCons( (close text) (ccfragment::get( e2 'frame_s )) )))
         (set text (SCons( (close text) (ccfragment::get( e2 'program_s )) )))
         (set text (SCons( (close text) (ccfragment::get( e2 'unframe_s )) )))
         (set text (SCons( (close text) (ccfragment::get( e3 'unframe_s )) )))
         (set text (SCons( (close text) (close(SAtom '\tjmp\s_s)) )))
         (set text (SCons( (close text) (close(SAtom label-begin-loop)) )))
         (set text (SCons( (close text) (close(SAtom '\n_s)) )))
         (set text (SCons( (close text) (close(SAtom label-end-loop)) )))
         (set text (SCons( (close text) (close(SAtom ':\n_s)) )))
         (set text (SCons( (close text) (ccfragment::get( e3 'unframe_s )) )))

         (let e4 (maybe-deref(ccfragment::set( e3 'program_s text ))))
         (let e5 (maybe-deref(ccfragment::set( e4 'frame_s SNil ))))
         (let e6 (maybe-deref(ccfragment::set( e5 'unframe_s SNil ))))
         (let e7 (maybe-deref(ccfragment::set-context( e6 ctx ))))
         (let e8 (maybe-deref(ccfragment::set-offset( e7 stack-offset ))))
         (set e e8)
      )))
      ( (App( (App( (App( (Var 'if_s) cond )) t )) f )) (tail(
         (let rsp-offset (+( stack-offset -8_i64 )))
         (let e1 (maybe-deref(compile-expr( ctx cond rsp-offset Used ))))
         (let e2 (maybe-deref(compile-expr( (maybe-deref(ccfragment::get-context e1)) t (ccfragment::get-offset e1) used ))))
         (let e3 (maybe-deref(compile-expr( (maybe-deref(ccfragment::get-context e1)) f (ccfragment::get-offset e1) used ))))
         (let e4 (maybe-deref(as-branch-conditional e1)))
         (let end-offset (ccfragment::get-offset e2))
         (let label-true-branch (uuid()))
         (let label-false-branch (uuid()))
         (let label-end (uuid()))

         (let text SNil)
         (set text (SCons( (close text) (close(SAtom '\tpush\s%rbp\n_s)) )))
         (set text (SCons( (close text) (ccfragment::get( e4 'frame_s )) )))
         (set text (SCons( (close text) (ccfragment::get( e4 'program_s )) )))
         (set text (SCons( (close text) (close(SAtom '\t_s)) )))
#         (set text (SCons( (close text) (ccfragment::get( e4 'expression_s )) )))
#         (set text (SCons( (close text) (close(SAtom '\s_s)) )))
#         (set text (SCons( (close text) (close(SAtom label-false-branch)) )))
#         (set text (SCons( (close text) (close(SAtom '\n_s)) )))
         (set text (SCons( (close text) (ccfragment::get( e3 'frame_s )) )))
         (set text (SCons( (close text) (ccfragment::get( e3 'program_s )) )))
         (set text (SCons( (close text) (ccfragment::get( e3 'unframe_s )) )))
         (set text (SCons( (close text) (close(SAtom '\tjmp\s_s)) )))
         (set text (SCons( (close text) (close(SAtom label-end)) )))
         (set text (SCons( (close text) (close(SAtom '\n_s)) )))
         (set text (SCons( (close text) (close(SAtom label-true-branch)) )))
         (set text (SCons( (close text) (close(SAtom ':\n_s)) )))
         (set text (SCons( (close text) (ccfragment::get( e2 'frame_s )) )))
         (set text (SCons( (close text) (ccfragment::get( e2 'program_s )) )))
         (set text (SCons( (close text) (close(SAtom label-end)) )))
         (set text (SCons( (close text) (close(SAtom ':\n_s)) )))
         (set text (SCons( (close text) (close(SAtom '\tmov\s_s)) )))
         (set text (SCons( (close text) (close(SAtom (to-string rsp-offset))) )))
         (set text (SCons( (close text) (close(SAtom '\[%rbp\],\s%rsp\n_s)) )))
         (set text (SCons( (close text) (close(SAtom '\tadd\s$_s)) )))
         (set text (SCons( (close text) (close(SAtom (to-string end-offset))) )))
         (set text (SCons( (close text) (close(SAtom ',\s%rsp\n_s)) )))
         (let e5 (maybe-deref(ccfragment::set( e4 'program_s text ))))
         (let e6 (maybe-deref(ccfragment::set-context( e5 (maybe-deref(ccfragment::get-context e2)) ))))
         (let e7 (maybe-deref(ccfragment::set-offset( e6 end-offset ))))
         (let e8 (maybe-deref(ccfragment::set( e7 'frame_s SNil ))))
         (let e9 (maybe-deref(ccfragment::set( e8 'unframe_s
            (SCons(
               (ccfragment::get( e1 'unframe_s ))
               (close(SCons(
                  (ccfragment::get( e2 'unframe_s ))
                  (close(SAtom '\tadd\s$8,\s%rsp\n_s ))
               )))
            ))
         ))))
         (set e e9)
      )))
      ( (App( (Abs( (Var lhs) ASTNil )) rhs )) (tail(
         (let rtype (maybe-deref(typecheck-lookup rhs)))
         (let rtype-2 (TAnd( (close rtype) (tlocalvariable()) )))(set rtype rtype-2)
         (let rtype-3 (maybe-deref(typecheck-annotate-size( rtype ))))(set rtype rtype-3)
         (let size (typecheck-sizeof rtype))
         (let e1 (maybe-deref(compile-push-rvalue( ctx rhs stack-offset ))))
         (let bind-offset (+( stack-offset (as size I64) )))
         (let e1-2 (maybe-deref(ccfragment::set( e1 'unframe_s
            (SCons(
               (ccfragment::get( e1 'unframe_s ))
               (close(SCons(
                  (close(SAtom '\tadd\s$_s))
                  (close(SCons(
                     (close(SAtom(to-string size)))
                     (close(SAtom ',\s%rsp\n_s))
                  )))
               )))
            ))
         ))))
         (let new-ctx (maybe-deref(cccontext::bind(
            ctx lhs rtype (maybe-deref(ccfragment::local-variable( bind-offset rtype )))
         ))))
         (let e1-3 (maybe-deref(ccfragment::set-context( e1-2 new-ctx ))))
         (let e1-4 (maybe-deref(ccfragment::set-offset( e1-3 bind-offset ))))
         (set e e1-4)
      )))
      ( (App( f a )) (
         (match (maybe-deref(typecheck-slot( (maybe-deref(typecheck-lookup f)) '->_s ))) (
            ()
            ( (TGround( '->_s _ )) (
               (match f (
                  ()
                  ( (Var fname) (tail(
                     (let e1 (maybe-deref(compile-stack-call( ctx fname (maybe-deref(typecheck-lookup term)) a stack-offset ))))
                     (set e e1)
                  )))
                  ( (Lit fname) (tail(
                     (let e1 (maybe-deref(compile-constructor( ctx fname (maybe-deref(typecheck-lookup term)) a stack-offset ))))
                     (set e e1)
                  )))
               ))
            ))
            ( _ (
               (if (==( used Used )) (
                  (exit-error( 'Raw\sCons\sCells\sNot\sPermitted\sIn\sStrict\sMode_s term ))
               ) (tail(
                  (let e1 (maybe-deref(compile-expr( ctx f stack-offset Unused ))))
                  (let e2 (maybe-deref(compile-expr( (maybe-deref(ccfragment::get-context e1)) a (ccfragment::get-offset e1) used ))))
                  (let e12 (maybe-deref(ccfragment::chain( e1 e2 ))))
                  (set e e12)
               ))) 
            ))
         ))
      ))
      ( u (exit-error( 'compile-expr\sUnsupported\sExpression_s term )))
   ))
   (if (non-zero(maybe-deref(ccfragment::get-context( e )))) () (
      (exit-error( 'Context\sBecame\sNull_s term ))
   ))
   (close e)
)) CCFragment[]);

compile-destructure-args := λ(: ctx CCContext)(: lhs AST)(: offset I64). (: (tail(
   (match lhs (
      ()
      ( (App( rst (Asc( (Var k) kt )) )) (tail(
         (let kt-2 (TAnd( (close kt) (tlocalvariable()) )))(set kt kt-2)
         (let sz (max( (typecheck-sizeof kt) 8_u64 )))
         (let new-offset (-( offset (as sz I64) )))
         (let new-ctx (maybe-deref(cccontext::bind(
            ctx k kt (maybe-deref(ccfragment::local-variable( new-offset kt )))
         ))))
         (set ctx new-ctx)
         (let new-ctx-2 (maybe-deref(compile-destructure-args( ctx rst new-offset ))))
         (set ctx new-ctx-2)
      )))
      ( (Asc( (Var k) kt )) (tail(
         (let kt-2 (TAnd( (close kt) (tlocalvariable()) )))(set kt kt-2)
         (let sz (max( (typecheck-sizeof kt) 8_u64 )))
         (let new-offset (-( offset (as sz I64) )))
         (let new-ctx (maybe-deref(cccontext::bind(
            ctx k kt (maybe-deref(ccfragment::local-variable( new-offset kt )))
         ))))
         (set ctx new-ctx)
         (let new-ctx-2 (maybe-deref(cccontext::bind( ctx 'offset_s (to-string new-offset) ))))
         (set ctx new-ctx-2)
      )))
      ( _ () )
   ))
   (close ctx)
)) CCContext[]);

compile-stack-call := λ(: ctx CCContext)(: function-name String)(: return-type Type)(: args AST)(: offset I64). (: (tail(
   (let f (maybe-deref(cccontext::lookup( ctx function-name (maybe-deref(typecheck-lookup args)) args ))))
   (let function-type (maybe-deref(ccfragment::get-type f)))
   (let r (maybe-deref(ccfragment::new())))
   (let r-1 (maybe-deref(ccfragment::set-context( r ctx ))))(set r r-1)
   (let r-2 (maybe-deref(ccfragment::set-offset( r offset ))))(set r r-2)

   (match (maybe-deref(ccfragment::get( f 'fragment-type_s ))) (
      ()
      ( (SAtom 'Fragment_s) (tail(
         (let f-args (maybe-deref(compile-fragment-args( ctx args offset ))))
         (let r-2 (maybe-deref(fragment-apply( ctx offset function-name f-args args ))))
         (set r r-2)
      )))
      ( _ (tail(
         (let push-args (maybe-deref(compile-stack-call-push-args( ctx args offset 0_i64 ))))
         (let call SNil)
         (let function-id (mangle-identifier( function-name function-type )))

         (set call (SCons( (close call) (close(SAtom '\tpush\s%rbp\n_s)) )))
         (set call (SCons( (close call) (close(SAtom '\tmov\s%rsp,\s%rbp\n_s)) )))
         (set call (SCons( (close call) (ccfragment::get( push-args 'program_s )) )))
         (set call (SCons( (close call) (close(SAtom '\tcall\s_s)) )))
         (set call (SCons( (close call) (close(SAtom function-id)) )))
         (set call (SCons( (close call) (close(SAtom '\n_s)) )))
         (set call (SCons( (close call) (ccfragment::get( push-args 'unframe_s )) )))
         (set call (SCons( (close call) (close(SAtom '\tmov\s%rbp,\s%rsp\n_s)) )))
         (set call (SCons( (close call) (close(SAtom '\tpop\s%rbp\n_s)) )))
         (let r-3 (maybe-deref(ccfragment::set( r 'program_s call ))))(set r r-3)

         (let expr 'Invalid\sExpression_s)
         (match (typecheck-sizeof return-type) (
            ()
            ( 0_u64 ())
            ( 1_u64 (set expr 'al_s))
            ( 2_u64 (set expr 'ax_s))
            ( 4_u64 (set expr 'eax_s))
            ( 8_u64 (set expr 'rax_s))
            ( _ (tail(
               (print 'Function\sName:\s_s)(print function-name)(print '\n_s)
               (print 'Return\sValue:\s_s)(print return-type)(print '\n_s)
               (exit-error( 'TODO\slarge\srvalues_s args ))
            )))
         ))
         (let r-4 (maybe-deref(ccfragment::set( r 'expression_s (SAtom expr) ))))(set r r-4)
      )))
   ))
   (close r)
)) CCFragment[]);

compile-translate-local-variables := λ(: ctx CCContext)(: delta I64). (: (tail(
   (print 'TODO\stranslate\slocal\svariables\n_s)
   (close ctx)
)) CCContext[]);

compile-stack-call-push-args := λ(: ctx CCContext)(: args AST)(: inner-offset I64)(: outer-offset I64). (: (tail(
   (let ctx-2 (maybe-deref(compile-translate-local-variables( ctx 0_i64 ))))(set ctx ctx-2)
   (let r (maybe-deref(ccfragment::new())))
   (let e1 (maybe-deref(compile-push-rvalue( ctx args inner-offset ))))
   (set r e1)
   (close r)
)) CCFragment[]);

as-branch-conditional := λ(: f CCFragment). (: (tail(
   ()
   (close f)
)) CCFragment[]);

compile-declare-cstring := λ(: val String). (: (tail(
   (let r (maybe-deref(ccfragment::new())))
   (close r)
)) CCFragment[]);

compile-maybe-push-stack := λ(: ctx CCContext)(: offset I64)(: fragment CCFragment)(: expression-type Type)(: sloc AST). (: (tail(
   (let ft (maybe-deref(ccfragment::get-type( fragment ))))
   (if (non-zero ft) () (set ft expression-type))
   (let ft-sized (maybe-deref(typecheck-annotate-size( ft ))))(set ft ft-sized)
   (match (maybe-deref(typecheck-slot( ft 'StackVariable_s ))) (
      ()
      ( (TGround( 'StackVariable_s _ )) () )
      ( _ (tail(
         (let f-arg (maybe-deref(ccfragment::set-type( fragment ft ))))(set fragment f-arg)
         (let f1 (maybe-deref(fragment-apply(
            ctx offset 'push_s
            (FLSeq( (close FLEOF) fragment )) sloc
         ))))
         (set fragment f1)
      )))
   ))
   (close fragment)
)) CCFragment[]);

compile-push-rvalue := λ(: ctx CCContext)(: rval AST)(: offset I64). (: (tail(
   (let r (maybe-deref(ccfragment::new())))
   (match (typecheck-slot( (maybe-deref(typecheck-lookup rval)) 'Cons_s )) (
      ()
      ( (TGround( 'Cons_s (TypeSeq( (TypeSeq( TypeEOF p1 )) p2 )) )) (
         (match rval (
            ()
            ( (App( le re )) (tail(
               (let e1 (maybe-deref(compile-push-rvalue( ctx le offset ))))
               (let e2 (maybe-deref(compile-expr( ctx re (ccfragment::get-offset e1) Used ))))
               (let e2-2 (maybe-deref(compile-maybe-push-stack( ctx offset e2 p2 rval ))))(set e2 e2-2)
               (set r (maybe-deref(ccfragment::chain( e1 e2 ))))
            )))
            ( u (exit-error( 'Invalid\sRvalue_s rval )))
         ))
      ))
      ( et (tail(
         (let e1 (maybe-deref(compile-expr( ctx rval offset Used ))))
         (let e1-2 (maybe-deref(compile-maybe-push-stack( ctx offset e1 et rval ))))(set e1 e1-2)
         (set r e1)
      )))
   ))
   (close r)
)) CCFragment[]);

compile-fragment-args := λ(: ctx CCContext)(: rval AST)(: offset I64). (: (tail(
   (let r FLEOF)
   (match (typecheck-slot( (maybe-deref(typecheck-lookup rval)) 'Cons_s )) (
      ()
      ( (TGround( 'Cons_s (TypeSeq( (TypeSeq( TypeEOF p1 )) p2 )) )) (
         (match rval (
            ()
            ( (App( le re )) (tail(
               (let e1 (maybe-deref(compile-fragment-args( ctx le offset ))))
               (let e2 (maybe-deref(compile-expr( ctx re offset Used ))))
               (if (non-zero(maybe-deref(ccfragment::get-type e2))) () (tail(
                  (let e2-2 (maybe-deref(ccfragment::set-type( e2 p2 ))))(set e2 e2-2)
               )))
               (set r (FLSeq( (close e1) e2 )))
            )))
            ( u (exit-error( 'Invalid\sRvalue_s rval )))
         ))
      ))
      ( et (tail(
         (let e1 (maybe-deref(compile-expr( ctx rval offset Used ))))
         (if (non-zero(maybe-deref(ccfragment::get-type e1))) () (tail(
            (let e1-2 (maybe-deref(ccfragment::set-type( e1 et ))))(set e1 e1-2)
         )))
         (set r (FLSeq( (close FLEOF) e1 )))
      )))
   ))
   (close r)
)) FragList[]);

compile-push-var := λ(: ctx CCContext)(: k String)(: kt Type)(: offset I64). (: (tail(
   (let r (maybe-deref(ccfragment::new())))
   (close r)
)) CCFragment[]);

compile-constructor := λ(: ctx CCContext)(: function-name String)(: return-type Type)(: args AST)(: offset I64). (: (tail(
   (let r (maybe-deref(ccfragment::new())))
   (let r-1 (maybe-deref(ccfragment::set-context( r ctx ))))(set r r-1)
   (let r-2 (maybe-deref(ccfragment::set-type( r return-type ))))(set r r-2)
   (print 'TODO:\sApply\sConstructor\n_s)
   (print function-name)(print '\n_s)
   (print args)
   (close r)
#                        (set e1 (compile-push-rvalue( ctx r offset )))
#                        (set e2 (fragment-apply( ctx 'push (And( (typecheck-lookup e) DontChain)) (() e1) e1 )))
#                        (local sz)
#                        (set sz (typecheck-sizeof(typecheck-lookup e)))
#                        (set offset (expr::get-offset e2))
#                        (set offset (i2s(add( (inv(s2i( sz ))) (s2i offset) ))))
#                        (set e2 (expr::set-type( e2 StackVariable )))
#                        (set e2 (expr::set-offset( e2 offset )))
#                        e2
)) CCFragment[]);
