
#global binding
compile-global := 位(: ctx CCContext)(: k String)(: term AST). (: (tail(
   ()
   (match term (
      ()
      ( (Abs( lhs rhs )) (tail(
         (let ctx-2 (compile-destructure-args( ctx lhs 0_i64 )))
         (set ctx ctx-2)
         (let stack-offset (to-i64(cccontext::get( ctx 'offset_s ))))
         (let e (compile-expr( ctx rhs stack-offset Return )))
         #(set text ( text (mangle-identifier( fname (typecheck-lookup lmb) )) ': \n ))
         #(set text ( text (expr::get-frame e2) ))
         #(set text ( text (expr::get-prog e2) ))
         #(set text ( text (expr::get-unframe e2) ))
         #(set text ( text (\t 'ret \n) ))
         #(set text ( text (expr::get-text e2) ))
         #(local return)
         #(set return (expr::new()))
         #(set return (expr::set-text( return text )))
         #(set return (expr::set-data( return (expr::get-data e2) )))
      )))
      ( _ (tail(
         (print rhs)
         (exit-error( 'Unrecognized\sCompile\sGlobal\n_s term ))
      )))
   ))
)) Nil);

#top expression
compile-global := 位(: ctx CCContext)(: term AST). (: (tail(
   (let e (maybe-deref(ccfragment::new())))
   (close e)
)) CCFragment[]);

compile-expr := 位(: ctx CCContext)(: term AST)(: stack-offset I64)(: used Used). (: (tail(
   (let e (maybe-deref(ccfragment::new())))
   (close e)
)) CCFragment[]);

compile-destructure-args := 位(: ctx CCContext)(: lhs AST)(: offset I64). (: (tail(
   (match lhs (
      ()
      ( (App( rst (Asc( (Var k) kt )) )) (tail(
         (let sz (max( (typecheck-sizeof kt) 8_u64 )))
         (let new-offset (-( offset (as sz I64) )))
         (let new-ctx (maybe-deref(cccontext::bind(
            ctx k kt (maybe-deref(ccfragment::local-variable new-offset))
         ))))
         (set ctx new-ctx)
         (let new-ctx-2 (maybe-deref(compile-destructure-args( ctx rst new-offset ))))
         (set ctx new-ctx-2)
      )))
      ( (Asc( (Var k) kt )) (tail(
         (let sz (max( (typecheck-sizeof kt) 8_u64 )))
         (let new-offset (-( offset (as sz I64) )))
         (let new-ctx (maybe-deref(cccontext::bind(
            ctx k kt (maybe-deref(ccfragment::local-variable new-offset))
         ))))
         (set ctx new-ctx)
         (let new-ctx-2 (maybe-deref(cccontext::bind( ctx 'offset_s (to-string new-offset) ))))
         (set ctx new-ctx-2)
      )))
      ( _ () )
   ))
   (close ctx)
)) CCContext[]);
