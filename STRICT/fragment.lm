
type CCFragment (CCFEOF) | (CCFSeq( CCFragment[] , String , S ));

non-zero := λ(: t CCFragment). (: (tail(
   (let r 1_u64)
   (match t (
      ()
      ( CCFEOF (set r 0_u64))
      ( _ () )
   ))
   r
)) U64);

close := λ(: x CCFragment). (: (tail(
   (mov( (malloc(sizeof CCFragment)) R8 ))
   (mov( x 0_u64 (as R8 CCFragment[]) ))
   (as R8 CCFragment[])
)) CCFragment[]);

ccfragment::new := λ . (: (tail(
   (let r CCFEOF)
   (close r)
)) CCFragment[]);

ccfragment::local-variable := λ(: offset I64) . (: (tail(
   (let r (CCFSeq(
      (close CCFEOF)
      'offset_s
      (SAtom(to-string offset))
   )))
   (close r)
)) CCFragment[]);

ccfragment::expression := λ(: val String) . (: (tail(
   (let r (CCFSeq(
      (close CCFEOF)
      'expression_s
      (SAtom val)
   )))
   (close r)
)) CCFragment[]);

ccfragment::get := λ(: e CCFragment)(: k String). (: (tail(
   (let r SNil)
   (close r)
)) S[]);

ccfragment::set := λ(: e CCFragment)(: k String)(: v S). (: (tail(
   ()
   (close e)
)) CCFragment[]);

ccfragment::get-context := λ(: e CCFragment) . (: (tail(
   (let r (maybe-deref(cccontext::new())))
   (close r)
)) CCContext[]);

ccfragment::set-context := λ(: e CCFragment)(: ctx CCContext). (: (tail(
   ()
   (close e)
)) CCFragment[]);

ccfragment::get-offset := λ(: ctx CCFragment). (: (tail(
   ()
   0_i64
)) I64);

ccfragment::chain := λ(: l CCFragment)(: r CCFragment). (: (tail(
   ()
   (close l)
)) CCFragment[]);
