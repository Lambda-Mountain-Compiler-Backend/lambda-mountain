
type CCFragment (CCFEOF) | (CCFSeq( CCFragment[] , String , S ));
type WrappedFragment (WrappedLocal( I64 , CCFragment )) | (WrappedGlobal( String , CCFragment )) | (WrappedUnknown( CCFragment ));

type FragList (FLEOF) | (FLSeq( FragList[] , CCFragment ));

non-zero := λ(: t CCFragment). (: (tail(
   (let r 1_u64)
   (match t (
      ()
      ( CCFEOF (set r 0_u64))
      ( _ () )
   ))
   r
)) U64);

non-zero := λ(: t FragList). (: (tail(
   (let r 1_u64)
   (match t (
      ()
      ( FLEOF (set r 0_u64))
      ( _ () )
   ))
   r
)) U64);

close := λ(: x CCFragment). (: (tail(
   (mov( (malloc(sizeof CCFragment)) R8 ))
   (mov( x 0_u64 (as R8 CCFragment[]) ))
   (as R8 CCFragment[])
)) CCFragment[]);

close := λ(: x FragList). (: (tail(
   (mov( (malloc(sizeof FragList)) R8 ))
   (mov( x 0_u64 (as R8 FragList[]) ))
   (as R8 FragList[])
)) FragList[]);

close := λ(: x WrappedFragment). (: (tail(
   (mov( (malloc(sizeof WrappedFragment)) R8 ))
   (mov( x 0_u64 (as R8 WrappedFragment[]) ))
   (as R8 WrappedFragment[])
)) WrappedFragment[]);

ccfragment::new := λ . (: (tail(
   (let r CCFEOF)
   (close r)
)) CCFragment[]);

ccfragment::local-variable := λ(: offset I64) . (: (tail(
   (let r (CCFSeq(
      (close CCFEOF)
      'offset_s
      (SAtom(to-string offset))
   )))
   (close r)
)) CCFragment[]);

ccfragment::expression := λ(: val String) . (: (tail(
   (let r (CCFSeq(
      (close CCFEOF)
      'expression_s
      (SAtom val)
   )))
   (close r)
)) CCFragment[]);

ccfragment::get := λ(: e CCFragment)(: k String). (: (tail(
   (let r SNil)
   (close r)
)) S[]);

ccfragment::set := λ(: e CCFragment)(: k String)(: v S). (: (tail(
   ()
   (close e)
)) CCFragment[]);

ccfragment::get-context := λ(: e CCFragment) . (: (tail(
   (let r (maybe-deref(cccontext::new())))
   (close r)
)) CCContext[]);

ccfragment::set-context := λ(: e CCFragment)(: ctx CCContext). (: (tail(
   ()
   (close e)
)) CCFragment[]);

ccfragment::get-offset := λ(: e CCFragment). (: (tail(
   ()
   0_i64
)) I64);

ccfragment::set-offset := λ(: e CCFragment)(: offset I64). (: (tail(
   ()
   (close e)
)) CCFragment[]);

ccfragment::chain := λ(: l CCFragment)(: r CCFragment). (: (tail(
   ()
   (close l)
)) CCFragment[]);

fragment-apply := λ(: ctx CCContext)(: k String)(: kt Type)(: args FragList). (: (tail(
   (let r (maybe-deref(ccfragment::new())))
   (let found False_u8)
   (while (non-zero ctx) (match ctx (
      ()
      ( (CCCtxBind( rst (*( rk (*( rt rf )) )) )) (tail(
         (if (==( k rk )) (tail(
            (print 'Candidate\sFragment\s_s)(print k)
            (print '\s:\s_s)(print kt)(print '\n_s)
         )) ())
         (set ctx rst)
      )))
   )))
   (print 'Fragment\sApply\s_s)(print k)(print kt)(print '\n_s)
   (close r)
)) CCFragment[]);
