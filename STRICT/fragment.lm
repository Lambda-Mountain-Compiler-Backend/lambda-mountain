
type CCFragKV (CCKVEOF) | (CCKVSeq( CCFragKV[] , String , S ));

type CCFragment (CCFragment( CCFragKV[] , I64 , CCContext[] ));
type WrappedFragment (WrappedLocal( I64 , CCFragment )) | (WrappedGlobal( String , CCFragment )) | (WrappedUnknown( CCFragment ));

type FragList (FLEOF) | (FLSeq( FragList[] , CCFragment ));

non-zero := λ(: t CCFragKV). (: (tail(
   (let r 1_u64)
   (match t (
      ()
      ( CCKVEOF (set r 0_u64))
      ( _ () )
   ))
   r
)) U64);

non-zero := λ(: t FragList). (: (tail(
   (let r 1_u64)
   (match t (
      ()
      ( FLEOF (set r 0_u64))
      ( _ () )
   ))
   r
)) U64);

close := λ(: x CCFragment). (: (tail(
   (mov( (malloc(sizeof CCFragment)) R8 ))
   (mov( x 0_u64 (as R8 CCFragment[]) ))
   (as R8 CCFragment[])
)) CCFragment[]);

close := λ(: x CCFragKV). (: (tail(
   (mov( (malloc(sizeof CCFragKV)) R8 ))
   (mov( x 0_u64 (as R8 CCFragKV[]) ))
   (as R8 CCFragKV[])
)) CCFragKV[]);

close := λ(: x FragList). (: (tail(
   (mov( (malloc(sizeof FragList)) R8 ))
   (mov( x 0_u64 (as R8 FragList[]) ))
   (as R8 FragList[])
)) FragList[]);

close := λ(: x WrappedFragment). (: (tail(
   (mov( (malloc(sizeof WrappedFragment)) R8 ))
   (mov( x 0_u64 (as R8 WrappedFragment[]) ))
   (as R8 WrappedFragment[])
)) WrappedFragment[]);

print := λ(: x CCFragment). (: (
   (match x ( 
      ()
      ( (CCFragment( kvs (*( offset ctx )) )) (tail(
         (print 'Fragment\n_s)
         (print '\tOffset\s=\s_s)(print offset)(print '\n_s)
         (while (non-zero kvs) (match kvs (
            ()
            ( (CCKVSeq( rst (*( k v )) )) (tail(
               (print '\t_s)(print k)(print '\s=\s_s)(print v)(print '\n_s)
               (set kvs rst)
            )))
         )))
      )))
   ))
) Nil);

ccfragment::new := λ . (: (tail(
   (let r (CCFragment(
      (close CCKVEOF)
      0_i64
      (cccontext::new())
   )))
   (close r)
)) CCFragment[]);

ccfragment::local-variable := λ(: offset I64) . (: (tail(
   (let r (CCFragment(
      (close(CCKVSeq(
         (close CCKVEOF)
         'offset_s
         (SAtom(to-string offset))
      )))
      0_i64
      (cccontext::new())
   )))
   (close r)
)) CCFragment[]);

ccfragment::expression := λ(: val String) . (: (tail(
   (let r (CCFragment(
      (close(CCKVSeq(
         (close CCKVEOF)
         'expression_s
         (SAtom( val ))
      )))
      0_i64
      (cccontext::new())
   )))
   (close r)
)) CCFragment[]);

ccfragment::get := λ(: e CCFragment)(: k String). (: (tail(
   (let r SNil)
   (match e (
      ()
      ( (CCFragment( kvs (*( offset ctx )) )) (
         (while (non-zero kvs) (match kvs (
            ()
            ( (CCKVSeq( rst (*( kvs-k kvs-v )) )) (
               (if (==( k kvs-k )) (tail(
                  (set r kvs-v)
                  (set kvs CCKVEOF)
               )) (set kvs rst))
            ))
         )))
      ))
   ))
   (close r)
)) S[]);

ccfragment::set := λ(: e CCFragment)(: k String)(: v S). (: (tail(
   (match e (
      ()
      ( (CCFragment( kvs (*( offset ctx )) )) (
         (set e (CCFragment(
            (close(CCKVSeq( (close kvs) k v )))
            offset (close ctx)
         )))
      ))
   ))
   (close e)
)) CCFragment[]);

ccfragment::get-context := λ(: e CCFragment) . (: (tail(
   (let ctx (.1( e )))
   ctx
)) CCContext[]);

ccfragment::set-context := λ(: e CCFragment)(: ctx CCContext). (: (tail(
   (match e (
      ()
      ( (CCFragment( e-kvs (*( e-offset e-ctx )) )) (
         (set e (CCFragment( (close e-kvs) e-offset (close ctx) ))) 
      ))
   ))
   (close e)
)) CCFragment[]);

ccfragment::get-offset := λ(: e CCFragment). (: (tail(
   ()
   0_i64
)) I64);

ccfragment::set-offset := λ(: e CCFragment)(: offset I64). (: (tail(
   ()
   (close e)
)) CCFragment[]);

fragment-apply := λ(: ctx CCContext)(: k String)(: kt Type)(: args FragList)(: sloc AST). (: (tail(
   (let e-proto (maybe-deref(ccfragment::new())))
   (print 'Fragment\sApply\s_s)(print k)(print kt)(print '\n_s)
   (let arrow (maybe-deref(cccontext::lookup( ctx k kt sloc ))))
   (let chain True_u8)
   (match (maybe-deref(typecheck-slot( kt 'DontChain_s ))) (
      ()
      ( (TGround( 'DontChain_s _ )) (set chain False_u8) )
      ( _ () )
   ))
   (let return (maybe-deref(fragment-apply-direct( arrow args e-proto chain ))))
   (close return)
)) CCFragment[]);

fragment-destructure-lhs := λ(: ctx CCContext)(: lhs S)(: args FragList). (: (tail(
   (match lhs (
      ()
      ( (SCons( (SAtom 'Var_s) (SAtom k) )) (
         (match args (
            ()
            ( (FLSeq( _ f )) (tail(
               (let new-ctx (CCCtxBind( (close ctx) k TAny f )))
               (set ctx new-ctx)
            )))
         ))
      ))
      ( (SCons( (SAtom 'App_s) (SCons( lhs-rst (SCons( (SAtom 'Var_s) (SAtom k) )) )) )) (tail(
         (match args (
            ()
            ( (FLSeq( fl-rst f )) (tail(
               (let new-ctx (CCCtxBind( (close ctx) k TAny f )))
               (set ctx new-ctx)
               (set args fl-rst)
            )))
         ))
         (let ctx-2 (maybe-deref(fragment-destructure-lhs( ctx lhs-rst args ))))
         (set ctx ctx-2)
      )))
   ))
   (close ctx)
)) CCContext[]);

fragment-render := λ(: ctx CCContext)(: s S). (: (tail(
   (let r SNil)
   (match s (
      ()
      ( (SCons( (SAtom 'Lit_s) (SAtom 'DontChain_s) )) () )
      ( (SCons( (SAtom 'Var_s) (SAtom v) )) (tail( (print 'TODO\sRender\sVariable\s_s) (print v) (print '\n_s) )) )
      ( (SCons( (SAtom 'Lit_s) (SAtom v) )) (set r (SAtom v)) )
      ( (SCons( (SAtom 'App_s) (SCons( (SCons( (SAtom 'Var_s) (SAtom 'label_s) )) (SCons( (SAtom 'Var_s) (SAtom v) )) )) )) (print 'TODO\sRender\sLabel\n_s) )
      ( (SCons( (SAtom 'App_s) (SCons( (SCons( (SAtom 'Var_s) (SAtom 'inv_s) )) (SCons( (SAtom 'Var_s) (SAtom v) )) )) )) (print 'TODO\sRender\sInvert\n_s) )
      ( (SCons( (SAtom 'App_s) (SCons( (SCons( (SAtom 'Var_s) (SAtom '+_s) )) (SCons( (SAtom 'App_s) (SCons( l r )) )) )) )) (print 'TODO\sRender\s+\n_s) )
      ( (SCons( (SAtom 'App_s) (SCons( (SCons( (SAtom 'Var_s) (SAtom '-_s) )) (SCons( (SAtom 'App_s) (SCons( l r )) )) )) )) (print 'TODO\sRender\s-\n_s) )
      ( (SCons( (SAtom 'App_s) (SCons( (SCons( (SAtom 'Var_s) (SAtom '*_s) )) (SCons( (SAtom 'App_s) (SCons( l r )) )) )) )) (print 'TODO\sRender\s*\n_s) )
      ( (SCons( (SAtom 'App_s) (SCons( (SCons( (SAtom 'Var_s) (SAtom '/_s) )) (SCons( (SAtom 'App_s) (SCons( l r )) )) )) )) (print 'TODO\sRender\s/\n_s) )
      ( (SCons( (SAtom 'App_s) (SCons( (SCons( (SAtom 'Var_s) (SAtom '%_s) )) (SCons( (SAtom 'App_s) (SCons( l r )) )) )) )) (print 'TODO\sRender\s%\n_s) )
      ( (SCons( (SAtom 'App_s) (SCons( l r )) )) (tail(
         (let lf (maybe-deref(fragment-render( ctx l ))))
         (let rf (maybe-deref(fragment-render( ctx r ))))
         (set r (SCons( (close lf) (close rf) )))
      )))
      ( u (tail(
         (print 'Render\sUnknown\s_s)(print u)(print '\n_s)
      )))
   ))
#   ( (App( (Variable 'range) (App( low high )) )) (tail(
#      (set low (fragment-substitute-context( ctx low )))
#      (set high (fragment-substitute-context( ctx high )))
#      (local return)
#      (while (not(eq( low high ))) (tail(
#         (set return (return low))
#         (set low (i2s(inc(s2i( low )))) )
#      )))
#      (reverse-list return)
#   )))
#   ( (App(
#        (App(
#           (App(
#              (App(
#                 (Variable 'for)
#                 (Variable v)
#              ))
#              (Variable 'in)
#           ))
#           iterator
#        ))
#        body
#     )) (tail(
#      (local result)
#      (set iterator (fragment-substitute-context( ctx iterator )))
#      (while iterator (tail(
#         (local inner-e)
#         (set inner-e (expr::new()))
#         (set inner-e (expr::set-expr( inner-e (head iterator) )))
#         (local inner-ctx)
#         (set inner-ctx (ctx (
#            (v inner-e)
#         )))
#         (set result (result (
#            (fragment-substitute-context( inner-ctx body ))
#         )))
#         (set iterator (tail iterator))
#      )))
#      result
#   )))
#   ( (App(
#        (App(
#           (App(
#              (Variable 'if-eq)
#              l
#           ))
#           r
#        ))
#        body
#     )) (tail(
#      (set l (fragment-substitute-context( ctx l )))
#      (set r (fragment-substitute-context( ctx r )))
#      (local result)
#      (if (eq( l r )) (
#         (set result (
#            (fragment-substitute-context( ctx body ))
#         ))
#      ) ())
#      result
#   )))
   (close r)
)) S[]);

fragment-apply-context := λ(: ctx CCContext)(: rhs S)(: e CCFragment). (: (tail(
   (match rhs (
      ()
      ( (SCons( (SAtom 'App_s) (SCons( (SCons( (SAtom 'Var_s) (SAtom '.program_s) )) prg )) )) (tail(
         (let s (maybe-deref(fragment-render( ctx prg ))))
         (let f (maybe-deref(ccfragment::set( e 'program_s s ))))
         (set e f)
      )))
      ( (SCons( (SAtom 'App_s) (SCons( (SCons( (SAtom 'Var_s) (SAtom '.expression_s) )) prg )) )) (tail(
         (let s (maybe-deref(fragment-render( ctx prg ))))
         (let f (maybe-deref(ccfragment::set( e 'expression_s s ))))
         (set e f)
      )))
      ( (SCons( (SAtom 'App_s) (SCons( lt rt )) )) (tail(
         (let e-2 (maybe-deref(fragment-apply-context( ctx lt e ))))
         (let e-3 (maybe-deref(fragment-apply-context( ctx lt e-2 ))))
         (set e e-3)
      )))
      ( u (tail(
         (print 'Invalid\sApplied\sFragment\n_s)
         (print rhs)(print '\n_s)
         (exit 1_u64)
      )))
   ))
   (close e)
)) CCFragment[]);

fragment-apply-direct := λ(: arrow CCFragment)(: args FragList)(: e-proto CCFragment)(: chain U8). (: (tail(
   (match (maybe-deref(ccfragment::get( arrow 'fragment_s ))) (
      ()
      ( (SCons( (SAtom 'Abs_s) (SCons( lhs rhs )) )) (tail(
         (let f-ctx (maybe-deref(cccontext::new())))
         (let f-ctx-2 (maybe-deref(fragment-destructure-lhs( f-ctx lhs args ))))
         (print f-ctx-2)
         (let f-app (maybe-deref(fragment-apply-context( f-ctx-2 rhs e-proto ))))
         (set e-proto f-app)
      )))
      ( _ (tail(
         (print 'Invalid\sFragment\sApplied:\n_s)
         (print arrow)(print '\n_s)
         (exit 1_u64)
      )))
   ))
   #set context to e-proto
   #set offset to e-proto
   #only if chain, chain
   (if (==( chain True_u8 )) (tail(
      (let r (maybe-deref(fragment-chain( args e-proto ))))
      (set e-proto r)
   )) ())
   (close e-proto)
)) CCFragment[]);

ccfragment::chain := λ(: l CCFragment)(: r CCFragment). (: (tail(
   (let e1 (maybe-deref(ccfragment::set-context(
      l
      (maybe-deref(ccfragment::get-context( r )))
   ))))
   (let e1-2 (maybe-deref(ccfragment::set(
      e1 'frame_s
      (SCons(
         (ccfragment::get( l 'frame_s ))
         (ccfragment::get( r 'frame_s ))
      ))
   ))))
   (let e1-3 (maybe-deref(ccfragment::set(
      e1-2 'unframe_s
      (SCons(
         (ccfragment::get( l 'unframe_s ))
         (ccfragment::get( r 'unframe_s ))
      ))
   ))))
   (let e1-4 (maybe-deref(ccfragment::set(
      e1-3 'text_s
      (SCons(
         (ccfragment::get( l 'text_s ))
         (ccfragment::get( r 'text_s ))
      ))
   ))))
   (let e1-5 (maybe-deref(ccfragment::set(
      e1-4 'data_s
      (SCons(
         (ccfragment::get( l 'data_s ))
         (ccfragment::get( r 'data_s ))
      ))
   ))))
   (let e1-6 (maybe-deref(ccfragment::set(
      e1-5 'program_s
      (SCons(
         (ccfragment::get( l 'program_s ))
         (ccfragment::get( r 'program_s ))
      ))
   ))))
   (close e1-6)
)) CCFragment[]);

fragment-chain := λ(: fragment-ctx FragList)(: e CCFragment). (: (tail(
   (let fragment-chain FLEOF)
   (while (non-zero fragment-ctx) (match fragment-ctx (
      ()
      ( (FLSeq( rst cf )) (tail(
         (set fragment-chain (FLSeq(
            (close fragment-chain)
            cf
         )))
         (set fragment-ctx rst)
      )))
   )))
   (while (non-zero fragment-chain) (match fragment-chain (
      ()
      ( (FLSeq( rst cf )) (tail(
         (let e1 (maybe-deref(ccfragment::chain( e cf ))))
         (set e e1)
         (set fragment-chain rst)
      )))
   )))
   (close e)
)) CCFragment[]);
