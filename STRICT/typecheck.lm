
print := λ(: tt Type). (: (match tt (
   ()
   ( TAny (print '?_s) )
   ( (TGround( tag TypeEOF )) (print tag) )
   ( (TGround( tag (TypeSeq( TypeEOF p1 )) )) (tail(
      (print tag)
      (print '<_s)
      (print p1)
      (print '>_s)
   )))
   ( (TGround( tag (TypeSeq( (TypeSeq( TypeEOF p1 )) p2 )) )) (tail(
      (print tag)
      (print '<_s)
      (print p1)
      (print ',_s)
      (print p2)
      (print '>_s)
   )))
   ( (TGround( tag (TypeSeq( (TypeSeq( (TypeSeq( TypeEOF p1 )) p2 )) p3 )) )) (tail(
      (print tag)
      (print '<_s)
      (print p1)
      (print ',_s)
      (print p2)
      (print ',_s)
      (print p3)
      (print '>_s)
   )))
   ( (TAnd( lt rt )) (tail(
      (print lt)
      (print '+_s)
      (print rt)
   )))
   ( (TArray( lt rt )) (tail(
      (print lt)
      (print '[_s)
      (print rt)
      (print ']_s)
   )))
)) Nil);

serialize-ast := λ(: tt Type). (: (match tt (
   ()
   ( TAny (print '\[Variable\s?\]_s) )
   ( (TGround( tag TypeEOF )) (
      (if (is-variable tag) (tail(
         (print '\[Variable\s_s)
         (print tag)
         (print '\]_s)
      )) (tail(
         (print '\[Literal\s_s)
         (print tag)
         (print '\]_s)
      )))
   ))
   ( (TGround( tag (TypeSeq( TypeEOF p1 )) )) (tail(
      (print '\[App\s\[_s) 
      (print '\[Literal\s_s)
      (print tag)
      (print '\]\s_s)
      (serialize-ast p1)
      (print '\]\]_s)
   )))
   ( (TGround( tag (TypeSeq( (TypeSeq( TypeEOF p1 )) p2 )) )) (tail(
      (print '\[App\s\[_s) 
      (print '\[Literal\s_s)
      (print tag)
      (print '\]\s_s)
      (print '\[App\s\[_s) 
      (serialize-ast p1)
      (print '\s_s)
      (serialize-ast p2)
      (print '\]\]_s)
      (print '\]\]_s)
   )))
   ( (TGround( tag (TypeSeq( (TypeSeq( (TypeSeq( TypeEOF p1 )) p2 )) p3 )) )) (tail(
      (print '\[App\s\[_s) 
      (print '\[Literal\s_s)
      (print tag)
      (print '\]\s_s)
      (print '\[App\s\[_s) 
      (print '\[App\s\[_s) 
      (serialize-ast p1)
      (print '\s_s)
      (serialize-ast p2)
      (print '\]\]\s_s)
      (serialize-ast p3)
      (print '\]\]_s)
      (print '\]\]_s)
   )))
   ( (TAnd( lt rt )) (tail(
      (print '\[App\s\[_s)
      (print '\[Literal\sAnd\]\s_s)
      (print '\[App\s\[_s)
      (serialize-ast lt)
      (print '\s_s)
      (serialize-ast rt)
      (print '\]\]_s)
      (print '\]\]_s)
   )))
   ( (TArray( lt rt )) (tail(
      (print '\[App\s\[_s)
      (print '\[Literal\sArray\]\s_s)
      (print '\[App\s\[_s)
      (serialize-ast lt)
      (print '\s_s)
      (serialize-ast rt)
      (print '\]\]_s)
      (print '\]\]_s)
   )))
)) Nil);

close := λ(: x Type). (: (tail(
   (mov( (malloc(sizeof Type)) R8 ))
   (mov( x 0_u64 (as R8 Type[]) ))
   (as R8 Type[])
)) Type[]);

tnil := λ. (: (tail(
   ()
   (close (TGround(
      'Nil_s
      (close TypeEOF)
   )))
)) Type[]);

type TermTypeList TTEOF | (TTSeq( TermTypeList[] , AST , Type ));

non-zero := λ(: t TermTypeList). (: (tail(
   (let r 1_u64)
   (match t (
      ()
      ( TTEOF (set r 0_u64))
      ( _ () )
   ))
   r
)) U64);

close := λ(: x TermTypeList). (: (tail(
   (mov( (malloc(sizeof TermTypeList)) R8 ))
   (mov( x 0_u64 (as R8 TermTypeList[]) ))
   (as R8 TermTypeList[])
)) TermTypeList[]);

typecheck-term-type-list := (: TTEOF TermTypeList);
typecheck-types-have-changed := True_u8;
typecheck := λ. (: (tail(
   (let p ast-parsed-program)
   (let ordered-type-exprs ASTEOF)
   (while (non-zero p) (match p (
      ()
      ( (Seq( rst r )) (tail(
         (set ordered-type-exprs (Seq( (close ordered-type-exprs) (close r) )))
         (set p rst)
      )))
   )))
   (while (non-zero ordered-type-exprs) (match ordered-type-exprs (
      ()
      ( (Seq( rst r )) (tail(
         (typecheck-infer-type-expr( r ))
         (set ordered-type-exprs rst)
      )))
   )))
   (while (==( typecheck-types-have-changed True_u8 )) (
      (set typecheck-types-have-changed False_u8)
      (typecheck-infer-prog ast-parsed-program)
   ))
   (typecheck-assert-complete ast-parsed-program)
)) Nil);

typecheck-infer-type-expr := λ(: td AST). (: (tail(
   (match td (
      ()
      ( (ASTType( _ _ )) (tail(
         (print td)
         (print '\n_s)
      )))
      ( _ () )
   ))
   ()
)) Nil);

typecheck-assert-complete := λ(: term AST). (: (
   (match term (
      ()
      ( ASTEOF (typecheck-assert-one term) )
      ( ASTNil (typecheck-assert-one term) )
      ( (Glb( k v )) (
         (typecheck-assert-complete v)
      ))
      ( (ASTType( _ _ )) () )
      ( (Fragment( _ _ )) () )
      ( (App( (Abs( (Var lname) ASTNil )) rhs )) (tail(
         (typecheck-assert-complete rhs)
         (typecheck-assert-one term)
      )))
      ( (App( (Var 'gensym-label_s) _ )) () )
      ( (App( (Var 'label_s) (Var _) )) () )
      ( (App( (App( (Var 'while_s) cond )) body )) (tail(
         (typecheck-assert-complete cond)
         (typecheck-assert-complete body)
         (typecheck-assert-one term)
      )))
      ( (App( (App( (App( (Var 'if_s) cond )) t )) f )) (tail(
         (typecheck-assert-complete cond)
         (typecheck-assert-complete t)
         (typecheck-assert-complete f)
         (typecheck-assert-one term)
      )))
      ( (App( (App( (Var 'set_s) lhs )) rhs )) (tail(
         (typecheck-assert-complete rhs)
         (typecheck-assert-one term)
      )))
      ( (Asc( t tt )) (tail(
         (typecheck-assert-complete t)
         (typecheck-assert-one term)
      )))
      ( (Lit l) (typecheck-assert-one term) )
      ( (Var l) (typecheck-assert-one term) )
      ( (Abs( lhs rhs )) (tail(
         (typecheck-assert-complete rhs)
         (typecheck-assert-one term)
      )))
      ( (App( l r )) (tail(
         (typecheck-assert-complete l)
         (typecheck-assert-complete r)
         (typecheck-assert-one term)
      )))
      ( (Seq( l r )) (tail(
         (typecheck-assert-complete l)
         (typecheck-assert-complete r)
      )))
   ))
) Nil);

typecheck-assert-one := λ(: term AST). (: (tail(
   (let found False_u8)
   (let tts typecheck-term-type-list)
   (while (non-zero tts) (match tts (
      ()
      ( (TTSeq( rst (*( t tt )) )) (tail(
         (if (==( t term )) (
            (set found True_u8)
         ) ())
         (set tts rst)
      )))
   )))
   (if (==( found False_u8 )) (tail(
      (print 'Unable\sto\sinfer\stype\sof\sexpression:\n_s)
      (print term)
      (print '\n_s)
      (exit 1_u64)
   )) ())
)) Nil);

typecheck-infer-prog := λ(: term AST). (: (tail(
   ()
   ()
)) Nil);
	

#typecheck-lookup := λterm . (tail(
#   (local tctx)
#   (set tctx typecheck-context)
#   (local found)
#   (local ttt)
#   (while tctx (tail(
#      (set ttt (head tctx))
#      (if (is( (head ttt) term )) (tail(
#         (set found (tail ttt))
#         (set tctx ())
#      )) (
#         (set tctx (tail tctx))
#      ))
#   )))
#   found
#));

#typecheck-ascript := λt tt . (tail(
#   (if tt (tail(
#      (typecheck-assert-not-nil( t tt tt ))
#      (local lt)
#      (set lt (typecheck-lookup t))
#      (if lt (
#         (if (typecheck-deep-eq( lt tt )) () (
#            fail (TypeAscriptionInequality lt tt t)
#         ))
#      ) (
#         (set tt (typecheck-sizeall tt))
#         (set typecheck-context ((t tt) typecheck-context))
#         (set typecheck-types-have-changed True)
#      ))
#   )) ())
#   t
#));

typecheck-infer-expr := λ(: tctx TContext)(: term AST)(: used U8). (: (tail(
    ()
    ()
#   (match e (
#      ()
#      ( (GExpr ge) (
#         if () ()
#            (typecheck-infer-expr( ctx ge Unused ))
#      ))
#      ( (Type( l ds )) ())
#      ( (Global( 'main (Lambda( lhs rhs )) )) (
#         if () ()
#            (typecheck-infer-expr( ctx rhs Used ))
#      ))
#      ( (Global( gln gle )) (
#         (typecheck-ascript( gle (typecheck-lookup e) ))
#         (typecheck-infer-expr( ctx gle Used ))
#      ))
#      ( (Fragment( fln fle )) (
#         if () ()
#            (match fle (
#               ()
#               ( (Lambda( lhs (App( (App( (Literal ':) rhs )) rhst )) )) (
#                  (set rhst (typecheck-infer-type-compound rhst))
#                  (local flt)
#                  (set flt ('->( (typecheck-typeof-lhs lhs) rhst )) )
#                  (typecheck-ascript( fle flt ))
#               ))
#            ))
#      ))
#      ( Nil (
#         (typecheck-ascript( e Nil ))
#      ))
#      ( (App( (Variable 'gensym-label) (Variable lname) )) (
#         (set ctx ( ctx (lname (And( Constant Label ))) ))
#         (typecheck-ascript( e Nil ))
#      ))
#      ( (App( (Variable 'label) (Variable lname) )) (
#         (typecheck-ascript( e Nil ))
#      ))
#      ( (App( (App( (Literal ':) (Literal maybe-tag) )) tt )) (
#         (local ctype)
#         (local mtype)
#         (set mtype (typecheck-infer-type-compound tt))
#         (set ctype (typecheck-infer-constructor-type maybe-tag))
#         (if ctype (
#            (set mtype (And( mtype maybe-tag )))
#         ) ())
#         (typecheck-ascript( (tail (tail (head (tail e)))) (And( Constant mtype )) ))
#         (typecheck-ascript( e (And( Constant mtype )) ))
#      ))
#      ( (App( (App( (Literal ':) asc )) tt )) (
#         if () () (
#            (typecheck-infer-expr( ctx asc used ))
#            (typecheck-ascript( asc (typecheck-infer-type-compound tt) ))
#            (typecheck-ascript( e (typecheck-infer-type-compound tt) ))
#         )
#      ))
#      ( (App( (App( (Variable 'as) asc )) tt )) (
#         if () () (
#            (typecheck-infer-expr( ctx asc used ))
#            (local asc_t)
#            (set asc_t (typecheck-lookup asc))
#            (if asc_t (
#               (typecheck-ascript( e
#                  (typecheck-as( asc_t (typecheck-infer-type-compound tt) ))
#               ))
#            ) ())
#         )
#      ))
#      ( (Literal lit) (
#         (local ctype)
#         (set ctype (typecheck-infer-constructor-type lit))
#         (if ctype (
#            (typecheck-ascript( e (And( (And( lit ctype )) Constant )) ))
#         ) (
#            (typecheck-ascript( e Atom ))
#         ))
#      ))
#      ( (App( (App( (Variable 'set) (Variable lhs) )) rhs )) (tail(
#         (typecheck-infer-expr( ctx rhs Used ))
#         (typecheck-ascript( e Nil ))
#      )))
#      ( (App( (Variable 'sizeof) (Literal tt) )) (tail(
#         (typecheck-ascript( e (parse-type( U64+Literal+Constant )) ))
#      )))
#      ( (App( (Variable 'block-scope) t )) (
#         (typecheck-infer-expr( ctx t used ))
#      ))
#      ( (App( (App( (App( (Variable 'if) cond )) t )) f )) (tail(
#         (set ctx (typecheck-infer-expr( ctx cond Used )))
#         (set ctx (typecheck-infer-expr( ctx t Used )))
#         (typecheck-infer-expr( ctx f Used ))
#         (typecheck-ascript( e (typecheck-lookup t) ))
#      )))
#      ( (App( (App( (Variable 'while) cond )) body )) (
#         (typecheck-infer-expr( ctx cond Used ))
#         (typecheck-infer-expr( ctx body Unused ))
#         (typecheck-ascript( e Nil ))
#      ))
#      ( (App( (Variable 'tail) (App( l r )) )) (tail(
#         (set ctx (typecheck-infer-expr( ctx l Unused )))
#         (set ctx (typecheck-infer-expr( ctx r used )))
#         (if (typecheck-lookup r) (
#            (typecheck-ascript( e (typecheck-lookup r) ))
#         ) ())
#      )))
#      ( (App( (Variable 'maybe-deref) r )) (tail(
#         (set ctx (typecheck-infer-expr( ctx r used )))
#         (local rtype)
#         (set rtype (typecheck-lookup r))
#         (if rtype (
#            (match (typecheck-slot( (typecheck-lookup r) Array )) (
#               ()
#               ( (Array( x '? )) (
#                  (if (typecheck-unify-implies( x '? )) () (
#                     (set rtype x)
#                  ))
#               ))
#            ))
#            (typecheck-ascript( e rtype ))
#         ) ())
#      )))
#      ( (App( (Lambda( (Variable lname) Nil )) rhs )) (tail(
#         (set ctx (typecheck-infer-expr( ctx rhs Used )))
#         (if (typecheck-lookup rhs) (
#            (set ctx ( ctx (lname (And( LocalVariable (typecheck-not-representation (typecheck-lookup rhs)) )) ) ))
#         ) (
#            (set ctx ( ctx (lname ()) ))
#         ))
#         (typecheck-ascript( e Nil ))
#      )))
#      ( (App( l r )) (tail(
#         (set ctx (typecheck-infer-expr( ctx l used )))
#         (set ctx (typecheck-infer-expr( ctx r used )))
#         (match ( (typecheck-slot( (typecheck-lookup l) '-> )) (typecheck-lookup r) ) (
#            ()
#            ( (() _) () )
#            ( (_ ()) () )
#            ( ( ('->(lt rt)) pt ) (
#               (typecheck-ascript( e (typecheck-safe-apply-plural( e (typecheck-lookup l) pt )) ))
#            ))
#            ( (lt rt) (
#               (typecheck-ascript( e (Cons(lt rt)) ))
#            ))
#         ))
#      )))
#      ( (Lambda( lhs rhs )) (tail(
#         (set ctx (typecheck-infer-ctx( ctx lhs )))
#         (typecheck-infer-expr( ctx rhs Used ))
#         (match (typecheck-lookup rhs) (
#            ()
#            ( () () )
#            ( rt (
#               (typecheck-ascript( e ('->( (typecheck-typeof-lhs lhs) (typecheck-as-return rt) )) ))
#            ))
#         ))
#      )))
#      ( (Variable v) (
#         (match (typecheck-typeof-var( ctx v )) (
#            ()
#            ( () () )
#            ( tt (typecheck-ascript( e tt )) )
#         ))
#      ))
#      ( u (fail (UnknownTerm u)) )
#   ))
#   ctx
)) Nil);

