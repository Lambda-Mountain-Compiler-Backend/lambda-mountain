
assemble-text-section                    := (: SNil S);
assemble-data-section                    := (: SNil S);
assemble-argv-referenced                 := False_u8;

compile := 位(). (: (tail(
   (let global-ctx (maybe-deref(cccontext::new())))
   (let preview-program ast-parsed-program)
   (while (non-zero preview-program) (match preview-program (
      ()
      ( (Seq( rst (Glb( k rhs )) )) (tail(
         (let global-ctx-2 (maybe-deref(cccontext::bind(
            global-ctx
            k
            (maybe-deref(typecheck-lookup rhs))
            (maybe-deref(ccfragment::new()))
         ))))
         (set global-ctx global-ctx-2)
         (set preview-program rst)
      )))
      ( (Seq( rst (Fragment( k rhs )) )) (tail(
         (let global-ctx-2 (maybe-deref(cccontext::bind(
            global-ctx
            k
            (maybe-deref(typecheck-lookup rhs))
            (maybe-deref(ccfragment::new()))
         ))))
         (set global-ctx global-ctx-2)
         (set preview-program rst)
      )))
      ( (Seq( rst (ASTType( lhs rhs )) )) (tail(
         (let global-ctx-2 (maybe-deref(compile-type( global-ctx lhs rhs ))))
         (set global-ctx global-ctx-2)
         (set preview-program rst)
      )))
      ( (Seq( rst _ )) (
         (set preview-program rst)
      ))
   )))
   (let program ast-parsed-program)
   (while (non-zero preview-program) (match preview-program (
      ()
      ( (Seq( rst (Glb( k rhs )) )) (tail(
         (compile-global( global-ctx k rhs ))
         (set program rst)
      )))
      ( (Seq( rst e )) (tail(
         (compile-expr( global-ctx e ))
         (set program rst)
      )))
   )))
)) Nil);

compile-type := 位(: ctx CCContext)(: lhs AST)(: rhs AST). (: (tail(
   ()
   (close ctx)
)) CCContext[]);

compile-global := 位(: ctx CCContext)(: k String)(: rhs AST). (: (tail(
   ()
   ()
)) Nil);

compile-expr := 位(: ctx CCContext)(: rhs AST). (: (tail(
   ()
   ()
)) Nil);


