
assemble-text-section                    := (: SNil S);
assemble-init-section                    := (: SNil S);
assemble-data-section                    := (: SNil S);
assemble-final                           := '_s;
assemble-argv-referenced                 := False_u8;

compile := λ(). (: (tail(
   (let global-ctx (maybe-deref(cccontext::new())))
   (let preview-program ast-parsed-program)
   (while (non-zero preview-program) (match preview-program (
      ()
      ( (Seq( rst (Glb( k rhs )) )) (tail(
         (if (==( k 'main_s )) (set assemble-argv-referenced True_u8) ())
         (let fragment (maybe-deref(ccfragment::new())))
         (let fragment-2 (maybe-deref(ccfragment::set( fragment 'fragment-type_s (SAtom 'Global_s) ))))
         (let rhs-tt (maybe-deref(typecheck-lookup rhs)))
         (match (typecheck-slot( rhs-tt '->_s )) (
            ()
            ( (TGround( '->_s _ )) (tail(
               (let fragment-3 (maybe-deref(ccfragment::set-type( fragment-2 rhs-tt ))))
               (let global-ctx-2 (maybe-deref(cccontext::bind(
                  global-ctx k rhs-tt fragment-3
               ))))
               (set global-ctx global-ctx-2)
            )))
            ( _ (tail(
               (let clean-tt (maybe-deref(without-representation rhs-tt)))
               (let repr-tt (TAnd( (close clean-tt) (t1 'GlobalVariable_s) )))
               (let fragment-3 (maybe-deref(ccfragment::set-type( fragment-2 repr-tt ))))
               (let mid (mangle-identifier( k clean-tt )))
               (let fragment-4 (maybe-deref(ccfragment::set( fragment-3 'expression_s (SAtom mid) ))))
               (let global-ctx-2 (maybe-deref(cccontext::bind(
                  global-ctx k repr-tt fragment-4
               ))))
               (set global-ctx global-ctx-2)
            )))
         ))
         (set preview-program rst)
      )))
      ( (Seq( rst (Fragment( k rhs )) )) (tail(
         (let fragment (maybe-deref(ccfragment::new())))
         (let fragment-2 (maybe-deref(ccfragment::set( fragment 'fragment-type_s (SAtom 'Fragment_s) ))))
         (let fragment-3 (maybe-deref(ccfragment::set( fragment-2 'fragment_s (maybe-deref(to-s rhs)) ))))
         (let fragment-4 (maybe-deref(ccfragment::set-type( fragment-3 (maybe-deref(typecheck-lookup rhs)) ))))
         (let global-ctx-2 (maybe-deref(cccontext::bind(
            global-ctx
            k
            (maybe-deref(typecheck-lookup rhs))
            fragment-4
         ))))
         (set global-ctx global-ctx-2)
         (set preview-program rst)
      )))
      ( (Seq( rst (ASTType( lhs rhs )) )) (tail(
         (let global-ctx-2 (maybe-deref(compile-type( global-ctx lhs rhs ))))
         (set global-ctx global-ctx-2)
         (set preview-program rst)
      )))
      ( (Seq( rst _ )) (
         (set preview-program rst)
      ))
   )))
   (compile-program-ordered( global-ctx ast-parsed-program ))
   (print 'Start\sFinish\n_s)
   (compile-finish())
   (compile-write())
)) Nil);

compile-program-ordered := λ(: global-ctx CCContext)(: program AST). (: (
   (match program (
      ()
      ( (Seq( rst (Glb( k rhs )) )) (tail(
         (compile-program-ordered( global-ctx rst ))
         (compile-global( global-ctx k rhs ))
      )))
      ( (Seq( rst e )) (tail(
         (compile-program-ordered( global-ctx rst ))
         (compile-global( global-ctx e ))
      ))) 
      ( ASTEOF () )
   ))
) Nil);

compile-type := λ(: ctx CCContext)(: lhs AST)(: rhs AST). (: (tail(
   (let def rhs)
   (let base-type (maybe-deref(typecheck-infer-type-compound( lhs ))))
   (let case-number 0_u64)
   (while (non-zero def) (match def (
      ()
      ( (App( (App( tds (Var '|_s) )) body )) (tail(
         (let ctx-2 (maybe-deref(compile-type-case( ctx base-type body case-number ))))(set ctx ctx-2)
         (set case-number (+( case-number 1_u64 )))
         (set def tds)
      )))
      ( body (tail(
         (let ctx-2 (maybe-deref(compile-type-case( ctx base-type body case-number ))))(set ctx ctx-2)
         (set case-number (+( case-number 1_u64 )))
         (set def ASTEOF)
      )))
   )))
   (close ctx)
)) CCContext[]);

compile-type-case := λ(: ctx CCContext)(: base-type Type)(: rhs AST)(: case-number U64). (: (tail(
   (match rhs (
      ()
      ( (Lit tag) (tail(
         (let ctx-2 (maybe-deref(compile-define-head-accessor( ctx base-type case-number ))))(set ctx ctx-2)
         (let rtype (TAnd( (close base-type) (parse-type tag) )) )
         (let ctx-3 (maybe-deref(compile-define-tag-constructor( ctx tag TAny rtype case-number ))))(set ctx ctx-3)
      )))
      ( (App( (Lit tag) args )) (tail(
         (let atype (maybe-deref(typecheck-infer-type-compound args)))
         (let rtype (TAnd( (close base-type) (parse-type tag) )))
         (let ctx-2 (maybe-deref(compile-define-head-accessor( ctx base-type case-number ))))(set ctx ctx-2)
         (let ctx-3 (maybe-deref(compile-define-tag-constructor( ctx tag atype rtype case-number ))))(set ctx ctx-3)
         (let ctx-4 (maybe-deref(compile-define-field-accessors( ctx (maybe-deref(parse-type tag)) atype case-number ))))(set ctx ctx-4)
      )))
      ( _ () )
   ))
   (close ctx)
)) CCContext[]);

compile-define-head-accessor := λ(: ctx CCContext)(: base-type Type)(: case-number U64). (: (tail(
   (let rt (TAnd( (t1 'U64_s) (t1 'Reg64_s) )))
   (let at (maybe-deref( (tarrow( base-type rt )) )))
   (let fragment (maybe-deref(ccfragment::new())))
   (let fragment-2 (maybe-deref(ccfragment::set-type( fragment at ))))(set fragment fragment-2)
   (let fragment-3 (maybe-deref(ccfragment::set( fragment 'fragment-type_s (SAtom 'Fragment_s) ))))(set fragment fragment-3)
   (let f-lhs (SCons( (close(SAtom 'Var_s)) (close(SAtom 'src_s)) )))
   (let f-rhs-o (SCons( (close(SAtom 'Lit_s)) (close(SAtom 'r15_s)) )))
   (let f-rhs-e (SCons( (close(SAtom 'Var_s)) (close(SAtom '.expression_s)) )))
   (let f-rhs-a (SCons( (close(SAtom 'App_s)) (close(SCons( (close f-rhs-e) (close f-rhs-o) ))) )))
   (let f-abs (SCons( (close(SAtom 'Abs_s)) (close(SCons( (close f-lhs) (close f-rhs-a) ))) )))
   (let fragment-4 (maybe-deref(ccfragment::set( fragment 'fragment_s f-abs ))))(set fragment fragment-4)
   (let ctx-2 (maybe-deref(cccontext::bind(
      ctx '.0_s at fragment
   ))))
   (close ctx-2)
)) CCContext[]);

compile-define-field-accessors := λ(: ctx CCContext)(: base-type Type)(: field-types Type)(: case-number U64). (: (tail(
   (let field-number 1_u64)
   (while (non-zero field-types) (match (maybe-deref(typecheck-slot( field-types 'Cons_s ))) (
      ()
      ( (TGround( 'Cons_s (TypeSeq( (TypeSeq( TypeEOF p1 )) p2 )) )) (tail(
         (let accessor-name (clone-rope (SCons(
            (close(SAtom '._s))
            (close(SAtom(to-string field-number)))
         ))))
         (let rtype (maybe-deref(with-representation p2)))
         (let ftype (maybe-deref(tarrow( base-type rtype ))))
         (let fragment (maybe-deref(ccfragment::new())))
         (let af-2 (maybe-deref(ccfragment::set( fragment 'fragment-type_s (SAtom 'Fragment_s) ))))(set fragment af-2)
         (let af-3 (maybe-deref(ccfragment::set-type( fragment ftype ))))(set fragment af-3)
         (let ctx-2 (maybe-deref(cccontext::bind(
            ctx accessor-name ftype fragment
         ))))
         (set ctx ctx-2)
         (set field-types p1)
         (set field-number (+( field-number 1_u64 )))
      )))
      ( p2 (tail(
         (let accessor-name (clone-rope (SCons(
            (close(SAtom '._s))
            (close(SAtom(to-string field-number)))
         ))))
         (let rtype (maybe-deref(with-representation p2)))
         (let ftype (maybe-deref(tarrow( base-type rtype ))))
         (let fragment (maybe-deref(ccfragment::new())))
         (let af-2 (maybe-deref(ccfragment::set( fragment 'fragment-type_s (SAtom 'Fragment_s) ))))(set fragment af-2)
         (let af-3 (maybe-deref(ccfragment::set-type( fragment ftype ))))(set fragment af-3)
         (let ctx-2 (maybe-deref(cccontext::bind(
            ctx accessor-name ftype fragment
         ))))
         (set ctx ctx-2)
         (set field-types TAny)
      )))
   )))
   (close ctx)
)) CCContext[]);

compile-define-tag-constructor := λ(: ctx CCContext)(: tag String)(: arg-types Type)(: rtype Type)(: case-number U64). (: (tail(
   (if (non-zero arg-types) (tail(
      (print 'TODO\sComplex\sConstrutor:\s_s)(print tag)(print '\n_s)
      (let arrow-tt (maybe-deref(tarrow( arg-types rtype ))))
      (let arrow-dc (TAnd( (close arrow-tt) (t1 'DontChain_s) )))(set arrow-tt arrow-dc)
      (let fragment (maybe-deref(ccfragment::new())))
      (let fragment-1 (maybe-deref(ccfragment::set-type( fragment arrow-tt ))))(set fragment fragment-1)
      (let fragment-2 (maybe-deref(ccfragment::set( fragment 'fragment-type_s (SAtom 'Fragment_s) ))))(set fragment fragment-2)
      (let ctx-2 (maybe-deref(cccontext::bind(
         ctx tag arrow-tt fragment
      ))))
   )) (tail(
      (let arrow-tt (maybe-deref(tarrow( (maybe-deref(t1 tag)) rtype ))))
      (let arrow-dc (TAnd( (close arrow-tt) (t1 'DontChain_s) )))(set arrow-tt arrow-dc)
      (let fragment (maybe-deref(ccfragment::new())))
      (let fragment-1 (maybe-deref(ccfragment::set-type( fragment arrow-tt ))))(set fragment fragment-1)
      (let fragment-2 (maybe-deref(ccfragment::set( fragment 'fragment-type_s (SAtom 'Fragment_s) ))))(set fragment fragment-2)
      (let fragment-3 (maybe-deref(ccfragment::set( fragment 'fragment_s
         (SCons(
            (close(SAtom 'Abs_s))
            (close(SCons(
               (close(SCons(
                  (close(SAtom 'Var_s))
                  (close(SAtom 'tag_s))                   
               )))
               (close(SCons(
                  (close(SAtom( 'App_s )))
                  (close(SCons(
                     (close(SCons(
                        (close(SAtom 'Var_s))
                        (close(SAtom '.program_s))                   
                     )))
                     (close(SCons(
                        (close(SAtom( 'App_s )))
                        (close(SCons(
                           (close(SCons(
                              (close(SAtom 'Lit_s))
                              (close(SAtom '\tpush\s$_s))
                           )))
                           (close(SCons(
                              (close(SAtom( 'App_s )))
                              (close(SCons(
                                 (close(SCons(
                                    (close(SAtom 'Lit_s))
                                    (close(SAtom(to-string case-number)))
                                 )))
                                 (close(SCons(
                                    (close(SAtom 'Lit_s))
                                    (close(SAtom '\n_s))
                                 )))
                              )))
                           )))
                        )))
                     )))
                  )))
               )))
            )))
         ))
      ))))(set fragment fragment-3)
      (let ctx-2 (maybe-deref(cccontext::bind(
         ctx 'push_s arrow-tt fragment
      ))))(set ctx ctx-2)
   )))
   (close ctx)
)) CCContext[]);

compile-finish := λ. (: (tail(
   (let output SNil)
   (set output (SCons( (close output) (compile-text-header()) )))
   (set output (SCons( (close output) (compile-exit-cleanup()) )))
   (set output (SCons( (close output) (close assemble-text-section) )))
   (set output (SCons( (close output) (compile-data-header()) )))
   (set output (SCons( (close output) (close assemble-data-section) )))
   (set assemble-final (clone-rope(maybe-deref(escape-string output))))
)) Nil);

compile-write := λ. (: (tail(
   ()
   (write-file( config-target assemble-final ))
)) Nil);

