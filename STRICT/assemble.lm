
assemble-text-section                    := (: SNil S);
assemble-data-section                    := (: SNil S);
assemble-final                           := '_s;
assemble-argv-referenced                 := False_u8;

compile := λ(). (: (tail(
   (let global-ctx (maybe-deref(cccontext::new())))
   (let preview-program ast-parsed-program)
   (while (non-zero preview-program) (match preview-program (
      ()
      ( (Seq( rst (Glb( k rhs )) )) (tail(
         (if (==( k 'main_s )) (set assemble-argv-referenced True_u8) ())
         (let global-ctx-2 (maybe-deref(cccontext::bind(
            global-ctx
            k
            (maybe-deref(typecheck-lookup rhs))
            (maybe-deref(ccfragment::new()))
         ))))
         (set global-ctx global-ctx-2)
         (set preview-program rst)
      )))
      ( (Seq( rst (Fragment( k rhs )) )) (tail(
         (let global-ctx-2 (maybe-deref(cccontext::bind(
            global-ctx
            k
            (maybe-deref(typecheck-lookup rhs))
            (maybe-deref(ccfragment::new()))
         ))))
         (set global-ctx global-ctx-2)
         (set preview-program rst)
      )))
      ( (Seq( rst (ASTType( lhs rhs )) )) (tail(
         (let global-ctx-2 (maybe-deref(compile-type( global-ctx lhs rhs ))))
         (set global-ctx global-ctx-2)
         (set preview-program rst)
      )))
      ( (Seq( rst _ )) (
         (set preview-program rst)
      ))
   )))
   (let program ast-parsed-program)
   (while (non-zero program) (match program (
      ()
      ( (Seq( rst (Glb( k rhs )) )) (tail(
         ()
         (compile-global( global-ctx k rhs ))
         (set program rst)
      )))
      ( (Seq( rst e )) (tail(
         ()
         (compile-global( global-ctx e ))
         (set program rst)
      )))
   )))
   (compile-finish())
   (compile-write())
)) Nil);

compile-type := λ(: ctx CCContext)(: lhs AST)(: rhs AST). (: (tail(
   (let def rhs)
   (let base-type (maybe-deref(typecheck-infer-type-compound( lhs ))))
   (let case-number 0_u64)
   (while (non-zero def) (match def (
      ()
      ( (App( (App( tds (Var '|_s) )) body )) (tail(
         (let ctx-2 (maybe-deref(compile-type-case( ctx base-type body case-number ))))(set ctx ctx-2)
         (set case-number (+( case-number 1_u64 )))
         (set def tds)
      )))
      ( body (tail(
         (let ctx-2 (maybe-deref(compile-type-case( ctx base-type body case-number ))))(set ctx ctx-2)
         (set case-number (+( case-number 1_u64 )))
         (set def ASTEOF)
      )))
   )))
   (close ctx)
)) CCContext[]);

compile-type-case := λ(: ctx CCContext)(: base-type Type)(: rhs AST)(: case-number U64). (: (tail(
   (print 'DefineTypeCase\s_s)(print base-type)(print '\o_s)(print case-number)(print '\n_s)
   (match rhs (
      ()
      ( (Lit tag) (tail(
         (let ctx-2 (maybe-deref(compile-define-head-accessor( ctx base-type case-number ))))(set ctx ctx-2)
         (let rtype (TAnd( (close base-type) (parse-type tag) )) )
         (let ctx-3 (maybe-deref(compile-define-tag-constructor( ctx tag TAny rtype case-number ))))(set ctx ctx-3)
      )))
      ( (App( (Lit tag) args )) (tail(
         (let atype (maybe-deref(typecheck-infer-type-compound args)))
         (let rtype (TAnd( (close base-type) (parse-type tag) )))
         (let ctx-2 (maybe-deref(compile-define-head-accessor( ctx base-type case-number ))))(set ctx ctx-2)
         (let ctx-3 (maybe-deref(compile-define-tag-constructor( ctx tag atype rtype case-number ))))(set ctx ctx-3)
         (let ctx-4 (maybe-deref(compile-define-field-accessors( ctx (maybe-deref(parse-type tag)) atype case-number ))))(set ctx ctx-4)
      )))
      ( _ () )
   ))
   (close ctx)
)) CCContext[]);

compile-define-head-accessor := λ(: ctx CCContext)(: base-type Type)(: case-number U64). (: (tail(
   (let ctx-2 (maybe-deref(cccontext::bind(
      ctx '.0_s (maybe-deref(tarrow( base-type (maybe-deref(tu64())) )))
      (maybe-deref(ccfragment::new()))
   ))))
   (close ctx-2)
)) CCContext[]);

compile-define-field-accessors := λ(: ctx CCContext)(: base-type Type)(: field-types Type)(: case-number U64). (: (tail(
   ()
   (close ctx)
)) CCContext[]);

compile-define-tag-constructor := λ(: ctx CCContext)(: tag String)(: arg-types Type)(: rtype Type)(: case-number U64). (: (tail(
   (let ctx-2 (maybe-deref(cccontext::bind(
      ctx tag (maybe-deref(tarrow( arg-types rtype )))
      (maybe-deref(ccfragment::new()))
   ))))
   (close ctx-2)
)) CCContext[]);

compile-finish := λ. (: (tail(
   (let output SNil)
   (set output (SCons( (close output) (compile-text-header()) )))
   (set output (SCons( (close output) (compile-exit-cleanup()) )))
   (set output (SCons( (close output) (close assemble-text-section) )))
   (set output (SCons( (close output) (compile-data-header()) )))
   (set output (SCons( (close output) (close assemble-data-section) )))
   (set assemble-final (clone-rope output))
)) Nil);

compile-write := λ. (: (tail(
   ()
   (write-file( config-target assemble-final ))
)) Nil);

