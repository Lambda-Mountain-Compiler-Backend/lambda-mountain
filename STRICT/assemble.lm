
assemble-text-section                    := (: SNil S);
assemble-init-section                    := (: SNil S);
assemble-data-section                    := (: SNil S);
assemble-final                           := '_s;
assemble-argv-referenced                 := False_u8;

compile := λ(). (: (tail(
   (let global-ctx (maybe-deref(cccontext::new())))
   (let preview-program ast-parsed-program)
   (while (non-zero preview-program) (match preview-program (
      ()
      ( (Seq( rst (Glb( k rhs )) )) (tail(
         (if (==( k 'main_s )) (set assemble-argv-referenced True_u8) ())
         (let fragment (maybe-deref(ccfragment::new())))
         (let fragment-2 (maybe-deref(ccfragment::set( fragment 'fragment-type_s (SAtom 'Global_s) ))))
         (let rhs-tt (maybe-deref(typecheck-lookup rhs)))
         (match (typecheck-slot( rhs-tt '->_s )) (
            ()
            ( (TGround( '->_s _ )) (tail(
               (let fragment-3 (maybe-deref(ccfragment::set-type( fragment-2 rhs-tt ))))
               (let global-ctx-2 (maybe-deref(cccontext::bind(
                  global-ctx k rhs-tt fragment-3
               ))))
               (set global-ctx global-ctx-2)
            )))
            ( _ (tail(
               (let clean-tt (maybe-deref(without-representation rhs-tt)))
               (let repr-tt (TAnd( (close clean-tt) (t1 'GlobalVariable_s) )))
               (let fragment-3 (maybe-deref(ccfragment::set-type( fragment-2 repr-tt ))))
               (let mid (mangle-identifier( k clean-tt )))
               (let fragment-4 (maybe-deref(ccfragment::set( fragment-3 'expression_s (SAtom mid) ))))
               (let global-ctx-2 (maybe-deref(cccontext::bind(
                  global-ctx k repr-tt fragment-4
               ))))
               (set global-ctx global-ctx-2)
            )))
         ))
         (set preview-program rst)
      )))
      ( (Seq( rst (Fragment( k rhs )) )) (tail(
         (let fragment (maybe-deref(ccfragment::new())))
         (let fragment-2 (maybe-deref(ccfragment::set( fragment 'fragment-type_s (SAtom 'Fragment_s) ))))
         (let fragment-3 (maybe-deref(ccfragment::set( fragment-2 'fragment_s (maybe-deref(to-s rhs)) ))))
         (let fragment-4 (maybe-deref(ccfragment::set-type( fragment-3 (maybe-deref(typecheck-lookup rhs)) ))))
         (let global-ctx-2 (maybe-deref(cccontext::bind(
            global-ctx
            k
            (maybe-deref(typecheck-lookup rhs))
            fragment-4
         ))))
         (set global-ctx global-ctx-2)
         (set preview-program rst)
      )))
      ( (Seq( rst (ASTType( lhs rhs )) )) (tail(
         (let global-ctx-2 (maybe-deref(compile-type( global-ctx lhs rhs ))))
         (set global-ctx global-ctx-2)
         (set preview-program rst)
      )))
      ( (Seq( rst _ )) (
         (set preview-program rst)
      ))
   )))
   (compile-program-ordered( global-ctx ast-parsed-program ))
   (compile-finish())
   (compile-write())
)) Nil);

compile-program-ordered := λ(: global-ctx CCContext)(: program AST). (: (
   (match program (
      ()
      ( (Seq( rst (Glb( k rhs )) )) (tail(
         (compile-program-ordered( global-ctx rst ))
         (compile-global( global-ctx k rhs ))
      )))
      ( (Seq( rst e )) (tail(
         (compile-program-ordered( global-ctx rst ))
         (compile-global( global-ctx e ))
      ))) 
      ( ASTEOF () )
   ))
) Nil);

compile-type := λ(: ctx CCContext)(: lhs AST)(: rhs AST). (: (tail(
   (let def rhs)
   (let base-type (maybe-deref(typecheck-infer-type-compound( lhs ))))
   (let case-number 0_u64)
   (if (is-fragment-type base-type) () (tail(
      (while (non-zero def) (match def (
         ()
         ( (App( (App( tds (Var '|_s) )) body )) (tail(
            (let ctx-2 (maybe-deref(compile-type-case( ctx base-type body case-number ))))(set ctx ctx-2)
            (set case-number (+( case-number 1_u64 )))
            (set def tds)
         )))
         ( body (tail(
            (let ctx-2 (maybe-deref(compile-type-case( ctx base-type body case-number ))))(set ctx ctx-2)
            (set case-number (+( case-number 1_u64 )))
            (set def ASTEOF)
         ))) 
      )))
      (let ctx-3 (maybe-deref(compile-define-head-accessor( ctx base-type ))))(set ctx ctx-3)
   )))
   (close ctx)
)) CCContext[]);

compile-type-case := λ(: ctx CCContext)(: base-type Type)(: rhs AST)(: case-number U64). (: (tail(
   (match rhs (
      ()
      ( (Lit tag) (tail(
         (let rtype (TAnd( (close base-type) (parse-type tag) )) )
         (let ctx-3 (maybe-deref(compile-define-tag-constructor( ctx tag TAny base-type rtype case-number ))))(set ctx ctx-3)
      )))
      ( (App( (Lit tag) args )) (tail(
         (let atype (maybe-deref(typecheck-infer-type-compound args)))
         (let rtype (TAnd( (close base-type) (parse-type tag) )))
         (let ctx-3 (maybe-deref(compile-define-tag-constructor( ctx tag atype base-type rtype case-number ))))(set ctx ctx-3)
         (let ctx-4 (maybe-deref(compile-define-field-accessors( ctx (maybe-deref(parse-type tag)) atype case-number ))))(set ctx ctx-4)
      )))
      ( _ () )
   ))
   (close ctx)
)) CCContext[]);

compile-define-head-accessor := λ(: ctx CCContext)(: base-type Type). (: (tail(

   (let arrow-tt (maybe-deref(tarrow( (TAnd( (close base-type) (t1 'LocalVariable_s) )) (maybe-deref(t1 'Reg64_s)) ))))
   (let arrow-dc (TAnd( (close arrow-tt) (t1 'DontChain_s) )))(set arrow-tt arrow-dc)
   (let fragment (maybe-deref(ccfragment::new())))
   (let fragment-1 (maybe-deref(ccfragment::set-type( fragment arrow-tt ))))(set fragment fragment-1)
   (let fragment-2 (maybe-deref(ccfragment::set( fragment 'fragment-type_s (SAtom 'Fragment_s) ))))(set fragment fragment-2)
   (let fragment-3 (maybe-deref(ccfragment::set( fragment 'fragment_s
      (maybe-deref(s-abs(
         (s-var 'src_s)
         (s-app(
            (s-app(
               (s-var '.program_s)
               (s-app(
                  (s-lit '\tmovq\s_s)
                  (s-app(
                     (s-app( (s-var '.expression_s) (s-var 'src_s) ))
                     (s-lit '\[%rbp\],\s%r15\n_s)
                  ))
               ))
            ))
            (s-app(
               (s-var '.expression_s)
               (s-lit 'r15_s)
            ))
         ))
      )))
   ))))(set fragment fragment-3)
   (let ctx-2 (maybe-deref(cccontext::bind(
      ctx '.0_s arrow-tt fragment
   ))))(set ctx ctx-2)

   (let arrow-tt (maybe-deref(tarrow( (TAnd( (close base-type) (t1 'GlobalVariable_s) )) (maybe-deref(t1 'Reg64_s)) ))))
   (let arrow-dc (TAnd( (close arrow-tt) (t1 'DontChain_s) )))(set arrow-tt arrow-dc)
   (let fragment (maybe-deref(ccfragment::new())))
   (let fragment-1 (maybe-deref(ccfragment::set-type( fragment arrow-tt ))))(set fragment fragment-1)
   (let fragment-2 (maybe-deref(ccfragment::set( fragment 'fragment-type_s (SAtom 'Fragment_s) ))))(set fragment fragment-2)
   (let fragment-3 (maybe-deref(ccfragment::set( fragment 'fragment_s
      (maybe-deref(s-abs(
         (s-var 'src_s)
         (s-app(
            (s-app(
               (s-var '.program_s)
               (s-app(
                  (s-lit '\tmovq\s$_s)
                  (s-app(
                     (s-app( (s-var '.expression_s) (s-var 'src_s) ))
                     (s-lit ',\s%r15\n\tmovq\s0\[%r15\],\s%r15\n_s)
                  ))
               ))
            ))
            (s-app(
               (s-var '.expression_s)
               (s-lit 'r15_s)
            ))
         ))
      )))
   ))))(set fragment fragment-3)
   (let ctx-2 (maybe-deref(cccontext::bind(
      ctx '.0_s arrow-tt fragment
   ))))(set ctx ctx-2)

   (close ctx)
)) CCContext[]);

compile-define-field-accessors := λ(: ctx CCContext)(: base-type Type)(: field-types Type)(: case-number U64). (: (tail(
   (let field-offset 8_u64)
   (let field-number 1_u64)
   (while (non-zero field-types) (match (maybe-deref(typecheck-slot( field-types 'Cons_s ))) (
      ()
      ( (TGround( 'Cons_s (TypeSeq( (TypeSeq( TypeEOF p1 )) p2 )) )) (tail(
         (let accessor-name (clone-rope (SCons(
            (close(SAtom '._s))
            (close(SAtom(to-string field-number)))
         ))))
         (let rtype (maybe-deref(with-representation p2)))
         (let reg-name '_s)
         (match rtype (
            ()
            ( (TGround( 'Reg8_s _ )) (set reg-name 'r15b_s) )
            ( (TGround( 'Reg16_s _ )) (set reg-name 'r15w_s) )
            ( (TGround( 'Reg32_s _ )) (set reg-name 'r15d_s) )
            ( (TGround( 'Reg64_s _ )) (set reg-name 'r15_s) )
            ( (TGround( 'StackVariable_s _ )) (tail(
               (print 'TODO:\sLarge\sField\sAccessors\sTo\sStackVariable\n_s)
               (exit 1_u64)
            )))
         ))
         (let ftype (maybe-deref(tarrow( (maybe-deref(tand( base-type (maybe-deref(t1 'LocalVariable_s)) ))) rtype ))))
         (let fragment (maybe-deref(ccfragment::new())))
         (let af-2 (maybe-deref(ccfragment::set( fragment 'fragment-type_s (SAtom 'Fragment_s) ))))(set fragment af-2)
         (let af-3 (maybe-deref(ccfragment::set-type( fragment ftype ))))(set fragment af-3)
         (let af-4 (maybe-deref(ccfragment::set( fragment 'fragment_s (s-abs(
            (s-var 'src_s)
            (s-app(
               (s-app(
                  (s-lit '\tmov\s_s)
                  (s-app(
                     (s-var '+_s)
                     (s-app(
                        (s-app(
                           (s-var '.program_s)
                           (s-var 'src_s)
                        ))
                        (s-lit(to-string field-offset))
                     ))
                  ))
               ))
               (s-app(
                  (s-lit '\[%rbp\],\s%_s)
                  (s-app(
                     (s-lit reg-name)
                     (s-lit '\n_s)
                  ))
               ))
            ))
         )) ))))(set fragment af-4)
         (set field-offset (+( field-offset (typecheck-sizeof p2) )))
         (let ctx-2 (maybe-deref(cccontext::bind(
            ctx accessor-name ftype fragment
         ))))
         (set ctx ctx-2)
         (set field-types p1)
         (set field-number (+( field-number 1_u64 )))
      )))
      ( p2 (tail(
         (let accessor-name (clone-rope (SCons(
            (close(SAtom '._s))
            (close(SAtom(to-string field-number)))
         ))))
         (let rtype (maybe-deref(with-representation p2)))
         (let reg-name '_s)
         (match rtype (
            ()
            ( (TGround( 'Reg8_s _ )) (set reg-name 'r15b_s) )
            ( (TGround( 'Reg16_s _ )) (set reg-name 'r15w_s) )
            ( (TGround( 'Reg32_s _ )) (set reg-name 'r15d_s) )
            ( (TGround( 'Reg64_s _ )) (set reg-name 'r15_s) )
            ( (TGround( 'StackVariable_s _ )) (tail(
               (print 'TODO:\sLarge\sField\sAccessors\sTo\sStackVariable\n_s)
               (exit 1_u64)
            )))
         ))
         (let ftype (maybe-deref(tarrow( base-type rtype ))))
         (let fragment (maybe-deref(ccfragment::new())))
         (let af-2 (maybe-deref(ccfragment::set( fragment 'fragment-type_s (SAtom 'Fragment_s) ))))(set fragment af-2)
         (let af-3 (maybe-deref(ccfragment::set-type( fragment ftype ))))(set fragment af-3)
         (let af-4 (maybe-deref(ccfragment::set( fragment 'fragment_s (s-abs(
            (s-var 'src_s)
            (s-app(
               (s-app(
                  (s-lit '\tmov\s_s)
                  (s-app(
                     (s-var '+_s)
                     (s-app(
                        (s-app(
                           (s-var '.program_s)
                           (s-var 'src_s)
                        ))
                        (s-lit(to-string field-offset))
                     ))
                  ))
               ))
               (s-app(
                  (s-lit '\[%rbp\],\s%_s)
                  (s-app(
                     (s-lit reg-name)
                     (s-lit '\n_s)
                  ))
               ))
            ))
         )) ))))(set fragment af-4)
         (let ctx-2 (maybe-deref(cccontext::bind(
            ctx accessor-name ftype fragment
         ))))
         (set ctx ctx-2)
         (set field-types TAny)
      )))
   )))
   (close ctx)
)) CCContext[]);

compile-define-tag-constructor := λ(: ctx CCContext)(: tag String)(: arg-types Type)(: base-type Type)(: rtype Type)(: case-number U64). (: (tail(
   (if (non-zero arg-types) (tail(
      (let base-type-sz (typecheck-sizeof base-type))
      (let args-sz (typecheck-sizeof arg-types))
      (let whitespace-sz (-( (-( base-type-sz 8_u64 )) args-sz )))
      (let arrow-tt (maybe-deref(tarrow( (maybe-deref(t1 tag)) (maybe-deref(tand( rtype (maybe-deref(t1 'StackVariable_s)) ))) ))))
      (let arrow-dc (TAnd( (close arrow-tt) (t1 'DontChain_s) )))(set arrow-tt arrow-dc)
      (let fragment (maybe-deref(ccfragment::new())))
      (let fragment-1 (maybe-deref(ccfragment::set-type( fragment arrow-tt ))))(set fragment fragment-1)
      (let fragment-2 (maybe-deref(ccfragment::set( fragment 'fragment-type_s (SAtom 'Fragment_s) ))))(set fragment fragment-2)
      (let fragment-3 (maybe-deref(ccfragment::set( fragment 'fragment_s
         (maybe-deref(s-abs(
            (s-var 'src_s)
            (s-app(
               (s-var '.program_s)
               (s-app(
                  (s-app(
                     (s-app(
                        (s-lit '\tsubq\s$_s)
                        (s-lit(to-string whitespace-sz))
                     ))
                     (s-lit ',\s%rsp\n_s)
                  ))
                  (s-app(
                     (s-app(
                        (s-var '.program_s)
                        (s-var 'src_s)
                     ))
                     (s-app(
                        (s-lit '\tpushq\s$_s)
                        (s-app(
                           (s-lit(to-string case-number))
                           (s-lit '\n_s)
                        ))
                     ))
                  ))
               ))
            ))
         )))
      ))))(set fragment fragment-3)
      (let ctx-2 (maybe-deref(cccontext::bind(
         ctx 'push_s arrow-tt fragment
      ))))(set ctx ctx-2)

#      TODO mov GlobalVariable and mov LocalVariable constructors
#      (let arrow-tt (maybe-deref(tarrow(
#         (maybe-deref(tcons( (maybe-deref(t1 tag)) (maybe-deref(t1 'LocalVariable_s)) )))
#         (maybe-deref(t1 'Nil_s))
#      ))))
#      (let arrow-dc (TAnd( (close arrow-tt) (t1 'DontChain_s) )))(set arrow-tt arrow-dc)
#      (let fragment (maybe-deref(ccfragment::new())))
#      (let fragment-1 (maybe-deref(ccfragment::set-type( fragment arrow-tt ))))(set fragment fragment-1)
#      (let fragment-2 (maybe-deref(ccfragment::set( fragment 'fragment-type_s (SAtom 'Fragment_s) ))))(set fragment fragment-2)
#      (let ctx-2 (maybe-deref(cccontext::bind(
#         ctx 'mov_s arrow-tt fragment
#      ))))

#      (let arrow-tt (maybe-deref(tarrow(
#         (maybe-deref(tcons( (maybe-deref(t1 tag)) (maybe-deref(t1 'GlobalVariable_s)) )))
#         (maybe-deref(t1 'Nil_s))
#      ))))
#      (let arrow-dc (TAnd( (close arrow-tt) (t1 'DontChain_s) )))(set arrow-tt arrow-dc)
#      (let fragment (maybe-deref(ccfragment::new())))
#      (let fragment-1 (maybe-deref(ccfragment::set-type( fragment arrow-tt ))))(set fragment fragment-1)
#      (let fragment-2 (maybe-deref(ccfragment::set( fragment 'fragment-type_s (SAtom 'Fragment_s) ))))(set fragment fragment-2)
#      (let ctx-2 (maybe-deref(cccontext::bind(
#         ctx 'mov_s arrow-tt fragment
#      ))))

   )) (tail(

      #push constructor
      (let arrow-tt (maybe-deref(tarrow( (maybe-deref(t1 tag)) rtype ))))
      (let arrow-dc (TAnd( (close arrow-tt) (t1 'DontChain_s) )))(set arrow-tt arrow-dc)
      (let fragment (maybe-deref(ccfragment::new())))
      (let fragment-1 (maybe-deref(ccfragment::set-type( fragment arrow-tt ))))(set fragment fragment-1)
      (let fragment-2 (maybe-deref(ccfragment::set( fragment 'fragment-type_s (SAtom 'Fragment_s) ))))(set fragment fragment-2)
      (let fragment-3 (maybe-deref(ccfragment::set( fragment 'fragment_s
         (maybe-deref(s-abs(
            (s-var 'tag_s)
            (s-app(
               (s-var '.program_s)
               (s-app(
                  (s-lit '\tpushq\s$_s)
                  (s-app(
                     (s-lit(to-string case-number))
                     (s-lit '\n_s)
                  ))
               ))
            ))
         )))
      ))))(set fragment fragment-3)
      (let ctx-2 (maybe-deref(cccontext::bind(
         ctx 'push_s arrow-tt fragment
      ))))(set ctx ctx-2)

      #mov local constructor
      (let arrow-tt (maybe-deref(tarrow(
         (maybe-deref(tcons( (maybe-deref(t1 tag)) (TAnd( (close base-type) (t1 'LocalVariable_s) )) )))
         (maybe-deref(t1 'Nil_s))
      ))))
      (let arrow-dc (TAnd( (close arrow-tt) (t1 'DontChain_s) )))(set arrow-tt arrow-dc)
      (let fragment (maybe-deref(ccfragment::new())))
      (let fragment-1 (maybe-deref(ccfragment::set-type( fragment arrow-tt ))))(set fragment fragment-1)
      (let fragment-2 (maybe-deref(ccfragment::set( fragment 'fragment-type_s (SAtom 'Fragment_s) ))))(set fragment fragment-2)
      (let fragment-3 (maybe-deref(ccfragment::set( fragment 'fragment_s
         (maybe-deref(s-abs(
            (s-app(
               (s-var 'src_s)
               (s-var 'dst_s)
            ))
            (s-app(
               (s-var '.program_s)
               (s-app(
                  (s-lit '\tmovq\s$_s)
                  (s-app(
                     (s-lit(to-string case-number))
                     (s-app(
                        (s-lit ',\s_s)
                        (s-app(
                           (s-app(
                              (s-var '.expression_s)
                              (s-var 'dst_s)
                           ))
                           (s-lit '\[%rbp\]\n_s)
                        ))
                     ))
                  ))
               ))
            ))
         )))
      ))))(set fragment fragment-3)
      (let ctx-2 (maybe-deref(cccontext::bind(
         ctx 'mov_s arrow-tt fragment
      ))))(set ctx ctx-2)

      #mov global constructor
      (let arrow-tt (maybe-deref(tarrow(
         (maybe-deref(tcons( (maybe-deref(t1 tag)) (TAnd( (close base-type) (t1 'GlobalVariable_s) )) )))
         (maybe-deref(t1 'Nil_s))
      ))))
      (let arrow-dc (TAnd( (close arrow-tt) (t1 'DontChain_s) )))(set arrow-tt arrow-dc)
      (let fragment (maybe-deref(ccfragment::new())))
      (let fragment-1 (maybe-deref(ccfragment::set-type( fragment arrow-tt ))))(set fragment fragment-1)
      (let fragment-2 (maybe-deref(ccfragment::set( fragment 'fragment-type_s (SAtom 'Fragment_s) ))))(set fragment fragment-2)
      (let fragment-3 (maybe-deref(ccfragment::set( fragment 'fragment_s
         (maybe-deref(s-abs(
            (s-app(
               (s-var 'src_s)
               (s-var 'dst_s)
            ))
            (s-app(
               (s-var '.program_s)
               (s-app(
                  (s-lit '\tmovq\s$_s)
                  (s-app(
                     (s-app(
                        (s-var '.expression_s)
                        (s-var 'dst_s)
                     ))
                     (s-app(
                        (s-lit ',\s%r15\n\tmovq\s$_s)
                        (s-app(
                           (s-lit(to-string case-number))
                           (s-lit ',\s0\[%r15\]\n_s)
                        ))
                     ))
                  ))
               ))
            ))
         )))
      ))))(set fragment fragment-3)
      (let ctx-2 (maybe-deref(cccontext::bind(
         ctx 'mov_s arrow-tt fragment
      ))))(set ctx ctx-2)
   )))
   (close ctx)
)) CCContext[]);

compile-finish := λ. (: (tail(
   (let output SNil)
   (set output (SCons( (close output) (compile-text-header()) )))
   (set output (SCons( (close output) (compile-exit-cleanup()) )))
   (set output (SCons( (close output) (close assemble-text-section) )))
   (set output (SCons( (close output) (compile-data-header()) )))
   (set output (SCons( (close output) (close assemble-data-section) )))
   (set assemble-final (clone-rope(maybe-deref(escape-string output))))
)) Nil);

compile-write := λ. (: (tail(
   ()
   (write-file( config-target assemble-final ))
)) Nil);

