
assemble-text-section                    := (: SNil S);
assemble-data-section                    := (: SNil S);
assemble-argv-referenced                 := False_u8;

compile := λ(). (: (tail(
   (let global-ctx (maybe-deref(cccontext::new())))
   (let preview-program ast-parsed-program)
   (while (non-zero preview-program) (match preview-program (
      ()
      ( (Seq( rst (Glb( k rhs )) )) (tail(
         (set global-ctx (maybe-deref(cccontext::bind(
            global-ctx
            k
            (maybe-deref(typecheck-lookup rhs))
            (maybe-deref(ccfragment::new()))
         ))))
         (set preview-program rst)
      )))
      ( (Seq( rst (Fragment( k rhs )) )) (tail(
         (set global-ctx (maybe-deref(cccontext::bind(
            global-ctx
            k
            (maybe-deref(typecheck-lookup rhs))
            (maybe-deref(ccfragment::new()))
         ))))
         (set preview-program rst)
      )))
      ( (Seq( rst (ASTType( lhs rhs )) )) (tail(
         (set global-ctx (maybe-deref(compile-type( global-ctx lhs rhs ))))
         (set preview-program rst)
      )))
      ( (Seq( rst _ )) (
         (set preview-program rst)
      ))
   )))
   ()
)) Nil);

compile-type := λ(: ctx CCContext)(: lhs AST)(: rhs AST). (: (tail(
   ()
   (close ctx)
)) CCContext[])


#   (while program (match program (
#      ()
#      ( (pc (GExpr e)) (
#         (set main_pd (compile-append( main_pd global_ctx e )))
#         (set program pc)
#      ))
#      ( (pc (Global (fname body))) (
#         (match body (
#            ()
#            ( Nil (
#            ))
#            ( (Lambda(lhs rhs)) (
#               (if config-strict (
#                  (set e1 (stack-define( global_ctx fname body )))
#               ) (
#                  (set e1 (define-calling-convention-s( global_ctx fname body )))
#               ))
#               (set output_pd (
#                  ( (head output_pd) (expr::get-text e1) )
#                  ( (tail output_pd) (expr::get-data e1) )
#               ))
#            ))
#            ( (App( (App( (Literal ':) body-initial )) body-type )) (tail(
#               (local mtype)
#               (set mtype (typecheck-lookup body-initial))
#               (local lhs)
#               (set lhs (Variable fname))
#               (typecheck-ascript( lhs mtype ))
#               (set main_pd (compile-append(
#                  main_pd global_ctx
#                  (App( (App( (Variable 'set) lhs )) body-initial ))
#               )))
#            )))
#         ))
#         (set program pc)
#      ))

