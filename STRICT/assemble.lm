
assemble-text-section                    := (: SNil S);
assemble-data-section                    := (: SNil S);
assemble-final                           := '_s;
assemble-argv-referenced                 := False_u8;

compile := λ(). (: (tail(
   (let global-ctx (maybe-deref(cccontext::new())))
   (let preview-program ast-parsed-program)
   (while (non-zero preview-program) (match preview-program (
      ()
      ( (Seq( rst (Glb( k rhs )) )) (tail(
         (let global-ctx-2 (maybe-deref(cccontext::bind(
            global-ctx
            k
            (maybe-deref(typecheck-lookup rhs))
            (maybe-deref(ccfragment::new()))
         ))))
         (set global-ctx global-ctx-2)
         (set preview-program rst)
      )))
      ( (Seq( rst (Fragment( k rhs )) )) (tail(
         (let global-ctx-2 (maybe-deref(cccontext::bind(
            global-ctx
            k
            (maybe-deref(typecheck-lookup rhs))
            (maybe-deref(ccfragment::new()))
         ))))
         (set global-ctx global-ctx-2)
         (set preview-program rst)
      )))
      ( (Seq( rst (ASTType( lhs rhs )) )) (tail(
         (let global-ctx-2 (maybe-deref(compile-type( global-ctx lhs rhs ))))
         (set global-ctx global-ctx-2)
         (set preview-program rst)
      )))
      ( (Seq( rst _ )) (
         (set preview-program rst)
      ))
   )))
   (let program ast-parsed-program)
   (while (non-zero preview-program) (match preview-program (
      ()
      ( (Seq( rst (Glb( k rhs )) )) (tail(
         (compile-global( global-ctx k rhs ))
         (set program rst)
      )))
      ( (Seq( rst e )) (tail(
         (compile-expr( global-ctx e ))
         (set program rst)
      )))
   )))
   (compile-finish())
   (compile-write())
)) Nil);

compile-type := λ(: ctx CCContext)(: lhs AST)(: rhs AST). (: (tail(
   ()
   (close ctx)
)) CCContext[]);

compile-global := λ(: ctx CCContext)(: k String)(: term AST). (: (tail(
   ()
   (match term (
      ()
      ( (Abs( lhs (Asc( rhs rhst )) )) (tail(
         (let ctx-2 (compile-destructure-args( ctx lhs )))
         (set ctx ctx-2)
         #(let stack-offset (-( (to-i64(cccontext::get-offset ctx)) -8_i64 )) )
         #(let e2 (compile-expr( ctx rhs stack-offset Return )))
         #(set text ( text (mangle-identifier( fname (typecheck-lookup lmb) )) ': \n ))
         #(set text ( text (expr::get-frame e2) ))
         #(set text ( text (expr::get-prog e2) ))
         #(set text ( text (expr::get-unframe e2) ))
         #(set text ( text (\t 'ret \n) ))
         #(set text ( text (expr::get-text e2) ))
         #(local return)
         #(set return (expr::new()))
         #(set return (expr::set-text( return text )))
         #(set return (expr::set-data( return (expr::get-data e2) )))
      )))
      ( _ (tail(
         (print rhs)
         (exit-error( 'Unrecognized\sCompile\sGlobal\n_s term ))
      )))
   ))
)) Nil);

compile-expr := λ(: ctx CCContext)(: rhs AST). (: (tail(
   ()
   ()
)) Nil);

compile-finish := λ. (: (tail(
   (let output SNil)
   (set output (SCons( (close output) (compile-program-header()) )))
   (set output (SCons( (close output) (compile-before-main()) )))
#         (if assemble-argv-referenced (assemble-argv-prog-header()) ())
#         (enter-function())
#         (expr::get-frame main_pd)
#         (expr::get-prog main_pd)
#         (expr::get-unframe main_pd)
#         (exit-cleanup())
#         (head output_pd)
#         (expr::get-text main_pd)
#         (if config-nostd () (stdlib-functions()))
#      )
#      ( (if config-nostd () (stdlib-data()))
#        (tail output_pd) (expr::get-data main_pd)
#        (if assemble-argv-referenced (assemble-argv-data-header()) ())
#      )
#   ))
#   (set output_pd (
#      ((head output_pd) assemble-text-section)
#      ((assemble-data-header()) (tail output_pd) assemble-data-section)
#   ))
   (set assemble-final (clone-rope output))
)) Nil);

compile-write := λ. (: (tail(
   ()
   (write-file( config-target assemble-final ))
)) Nil);

compile-destructure-args := λ(: ctx CCContext)(: lhs AST). (: (tail(
   ()
   (close ctx)
)) CCContext[]);
