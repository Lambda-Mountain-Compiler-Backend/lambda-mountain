
import STDLIB/default-instruction-set.lm;
import STDLIB/default-primitives.lm;
import STDLIB/default-rules.lm;
import STDLIB/default-stdlib.lm;

import STRICT/utility.lm;
import STRICT/tokenize.lm;
import STRICT/parse.lm;
import STRICT/preprocess.lm;
import STRICT/typecheck.lm;
import STRICT/expression.lm;
import STRICT/codegen.lm;
import STRICT/fragment.lm;
import STRICT/assemble.lm;

config-strict                := Trueu8;
config-preprocess            := Trueu8;
config-target                := 'tmp.s_s;

type CompileMode ModeTokenize | ModeParse | ModeTypecheck | ModeCompile;
config-mode                  := (: ModeCompile CompileMode);

main := λ(: argc U64)(: argv U8[][]).(tail(
   (let argi 1u64)
   (let input SNil)
   (while (<( argi argc )) (
      (match ([]( argv argi )) (
         ()
         ('--tokenize_s (set config-mode ModeTokenize))
         ('--parse_s (set config-mode ModeParse))
         ('--typecheck_s (set config-mode ModeTypecheck))
         ('--compile_s (set config-mode ModeCompile))
         ('--strict_s (set config-strict Trueu8))
         ('--gradual_s (set config-strict Falseu8))
         ('--macro_s (set config-preprocess Trueu8))
         ('--nomacro_s (set config-preprocess Falseu8))
         ('-o_s (tail(
            (print 'O_s)
            (set argi (+( argi 1u64 )))
            (set config-target ([]( argv argi )))
         )))
         (fp (
            (set input (SCons(
               (close input)
               (close (SAtom( fp )))
            )))
         ))
      ))
      (set argi (+( argi 1u64 )))
   ))
   (print Input:\s_s)(print input)(print \n_s)
   (print Output:\s_s)(print config-target)(print \n_s)
   (print Preprocess:\s_s)(print config-preprocess)(print \n_s)
   (print Strict:\s_s)(print config-strict)(print \n_s)

   (let continue Trueu8)
   (while (==( continue Trueu8 )) (match input (
      ()
      ( SNil (set continue Falseu8) )
      ( (SCons( SNil rst )) (set input rst) )
      ( (SCons( (SAtom( fp )) rst )) (set input rst) )
#      ( (SCons( (SAtom( fp )) rst )) (tail( (cli-intake fp) (set input rst) )))
#      ( (SAtom( fp )) (tail( (cli-intake fp) (set continue False) )))
   )))


#      (Compile (
#         (parse-program (tokenize-file (head inputs)))
#         (set inputs (tail inputs))
#      ))
#      (Parse (
#         (parse-program (tokenize-file (head inputs)))
#         (set inputs (tail inputs))
#      ))
#      (Typecheck (
#         (parse-program (tokenize-file (head inputs)))
#         (set inputs (tail inputs))
#      ))
#      (ParseExpression (
#         (print-s (parse-expression (tokenize-file (head inputs))))
#         (set inputs (tail inputs))
#      ))
#      (Tokenize (
#         (print-s (tokenize-file (head inputs)))
#         (set inputs (tail inputs))
#      ))
));

cli-intake := λ(: fp U8[]) . (: (tail(
   (print 'Intake:\s_s)
   (print fp)
   (print '\n_s)
)) Nil);
