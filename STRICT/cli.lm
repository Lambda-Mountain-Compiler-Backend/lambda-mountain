
import STDLIB/default-instruction-set.lm;
import STDLIB/default-primitives.lm;
import STDLIB/default-rules.lm;
import STDLIB/default-stdlib.lm;

import STRICT/ast.lm;
import STRICT/utility.lm;
import STRICT/tokenize.lm;
import STRICT/parse.lm;
import STRICT/preprocess.lm;
import STRICT/typecheck.lm;
import STRICT/expression.lm;
import STRICT/codegen.lm;
import STRICT/fragment.lm;
import STRICT/assemble.lm;

config-strict                := Trueu8;
config-preprocess            := Trueu8;
config-target                := 'tmp.s_s;

type CompileMode ModeTokenize | ModeParse | ModePreprocess | ModeTypecheck | ModeCompile;
config-mode                  := (: ModeCompile CompileMode);

main := Î»(: argc U64)(: argv String[]).(tail(
   (let argi 1u64)
   (let input SNil)
   (while (<( argi argc )) (
      (match ([]( argv argi )) (
         ()
         ('--tokenize_s (set config-mode ModeTokenize))
         ('--parse_s (set config-mode ModeParse))
         ('--preprocess_s (set config-mode ModePreprocess))
         ('--typecheck_s (set config-mode ModeTypecheck))
         ('--compile_s (set config-mode ModeCompile))
         ('--strict_s (set config-strict Trueu8))
         ('--gradual_s (set config-strict Falseu8))
         ('--macro_s (set config-preprocess Trueu8))
         ('--nomacro_s (set config-preprocess Falseu8))
         ('-o_s (tail(
            (print 'O_s)
            (set argi (+( argi 1u64 )))
            (set config-target ([]( argv argi )))
         )))
         (fp (
            (set input (SCons(
               (close input)
               (close (SAtom( fp )))
            )))
         ))
      ))
      (set argi (+( argi 1u64 )))
   ))

   (let continue Trueu8)
   (while (==( continue Trueu8 )) (match input (
      ()
      ( SNil (set continue Falseu8) )
      ( (SCons( rst SNil )) (set input rst) )
      ( (SCons( rst (SAtom( fp )) )) (tail( (tokenize fp) (set input rst) )))
      ( (SAtom( fp )) (tail( (tokenize fp) (set continue Falseu8) )))
   )))

   (match config-mode (
      ()
      ( ModeTokenize () )
      ( ModeParse (parse()) )
      ( ModePreprocess (tail(
         (parse())
         (preprocess())
      )))
      ( ModeTypecheck (tail(
         (parse())
         (preprocess())
         (typecheck())
      )))
      ( ModeCompile (tail(
         (parse())
         (preprocess())
         (typecheck())
         (compile())
      )))
   ))

));

