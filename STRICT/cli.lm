
import STDLIB/default-instruction-set.lm;
import STDLIB/default-primitives.lm;
import STDLIB/default-rules.lm;
import STDLIB/default-stdlib.lm;

import STRICT/utility.lm;

config-strict            := 0u8;

type CompileMode Tokenize | Parse | Compile;
config-mode              := Compile;

main := Î»(: argc U64)(: argv U8[][]).(tail(
   (let argi 0u64)
   (let input Nil)
   (while (<( argi argc )) (
      (print (: '--tokenize U8[]))
      (print input)
#      (print (==( ([]( argv argi )) (: '--tokenize U8[]) )) )
#             if set_target { config_target().lock().unwrap().set(arg); }
#      else if arg=="--tokenize" {unsafe{ CONFIG_MODE = CompileMode::Tokenize; }}
#      else if arg=="--parse" {unsafe{ CONFIG_MODE = CompileMode::Parse; }}
#      else if arg=="--typecheck" {unsafe{ CONFIG_MODE = CompileMode::Typecheck; }}
#      else if arg=="--compile" {unsafe{ CONFIG_MODE = CompileMode::Compile; }}
#      else if arg=="--strict" {unsafe{ CONFIG_STRICT = true; }}
#      else if arg=="--gradual" {unsafe{ CONFIG_STRICT = false; }}
#      else if arg=="--noprep" {unsafe{ CONFIG_PREPROCESS = false; }}
#      else if arg=="-o" { set_target = true; }
      (set argi (+( argi 1u64 )))
   ))
));
