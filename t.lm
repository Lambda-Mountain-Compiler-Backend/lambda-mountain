
f := \n;

parse-one-expression := Î»toks. (tail(
   (local remainder)
   (local expr)
   (match toks (
      ()
      ( () (
         (set expr Nil)
         (set remainder ())
      ))
      ( ( \l r ) (
         (set expr (Lambda (parse-lambda r)))
         (set remainder ())
      ))
#      ( ( \] r ) (
#         (print-s (DANGLING_PARENTHESES toks))
#         (set remainder ())
#      ))
#     ( ( \[ r ) (
#         (local depth)
#         (set depth 1)
#         (local nested)
#         (while depth (
#            (if r (
#               (local next)
#               (set next (head r))
#               (set r (tail r))
#               (match next (
#                  ()
#                  ( \[ (
#                     (set nested (nested next))
#                     (set depth (1 depth))
#                  ))
#                  ( \] (
#                     (set depth (tail depth))
#                     (if depth (
#                        (set nested (nested next))
#                     ) ())
#                  ))
#                  ( _ (
#                     (set nested (nested next))
#                  ))
#               ))
#            ) (
#               (print-s UNCLOSED_PARENTHESES)
#               (set depth ())
#            ))
#         ))
#         (set expr (parse-many-expressions (reverse-list nested)))
#         (set remainder r)
#      ))
      ( ( \' (i r) ) (
         (set expr (Literal i))
         (set remainder r)
      ))
      ( (a r) (
         (if (is_variable a) (
            (set expr (Variable a))
         ) (
            (set expr (Literal a))
         ))
         (set remainder r)
      ))
   ))
   (expr remainder)
));

