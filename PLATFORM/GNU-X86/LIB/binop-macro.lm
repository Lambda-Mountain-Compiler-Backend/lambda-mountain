
macro ('rax-of-size s) (
   (if (==( s 1_l )) 'AL_l ())
   (if (==( s 2_l )) 'AX_l ())
   (if (==( s 4_l )) 'EAX_l ())
   (if (==( s 8_l )) 'RAX_l ())
);
macro ('r14-of-size s) (
   (if (==( s 1_l )) 'R14B_l ())
   (if (==( s 2_l )) 'R14W_l ())
   (if (==( s 4_l )) 'R14D_l ())
   (if (==( s 8_l )) 'R14_l ())
);

macro ('declare-binop (op-alias op-code op-type op-rtype op-size return-size reg-type)) (
   op-alias := λ: Blob(: l op-type+Constant)(: r op-type+Constant). (: (
      (:program(
         '\tmov\s$_s (:expression l) ',\s%_l (rax-of-size op-size) '\n_s
         '\tmov\s$_s (:expression r) ',\s%_l (r14-of-size op-size) '\n_s
         op-code
      ))
      (:frame( (:frame l) (:frame r) ))
      (:unframe( (:unframe l) (:unframe r) ))
      (:expression(rax-of-size return-size))
   ) op-rtype);
   op-alias := λ: Blob(: l op-type+Constant)(: r op-type+LocalVariable). (: (
      (:program(
         '\tmov\s$_s (:expression l) ',\s%_l (rax-of-size op-size) '\n_s
         '\tmov\s_s (:expression r) '\[%RBP\],\s%_l (r14-of-size op-size) '\n_s
         op-code
      ))
      (:frame( (:frame l) (:frame r) ))
      (:unframe( (:unframe l) (:unframe r) ))
      (:expression(rax-of-size return-size))
   ) op-rtype);
   op-alias := λ: Blob(: l op-type+Constant)(: r op-type+GlobalVariable). (: (
      (:program(
         '\tmov\s$_s (:expression l) ',\s%_l (rax-of-size op-size) '\n_s
         '\tmov\s$_s (:expression r) ',\s%R14\n_s
         '\tmov\s0\[%R14\],\s%_l (r14-of-size op-size) '\n_s
         op-code
      ))
      (:frame( (:frame l) (:frame r) ))
      (:unframe( (:unframe l) (:unframe r) ))
      (:expression(rax-of-size return-size))
   ) op-rtype);
   op-alias := λ: Blob(: l op-type+Constant)(: r op-type+reg-type). (: (
      (:program(
         (:program r)
         '\tmov\s%_s (:expression r) ',\s%_l (r14-of-size op-size) '\n_s
         '\tmov\s$_s (:expression l) ',\s%_l (rax-of-size op-size) '\n_s
         op-code
      ))
      (:frame( (:frame l) (:frame r) ))
      (:unframe( (:unframe l) (:unframe r) ))
      (:expression(rax-of-size return-size))
   ) op-rtype);

   op-alias := λ: Blob(: l op-type+LocalVariable)(: r op-type+Constant). (: (
      (:program(
         '\tmov\s_s (:expression l) '\[%RBP\],\s%_l (rax-of-size op-size) '\n_s
         '\tmov\s$_s (:expression r) ',\s%_l (r14-of-size op-size) '\n_s
         op-code
      ))
      (:frame( (:frame l) (:frame r) ))
      (:unframe( (:unframe l) (:unframe r) ))
      (:expression(rax-of-size return-size))
   ) op-rtype);
   op-alias := λ: Blob(: l op-type+LocalVariable)(: r op-type+LocalVariable). (: (
      (:program(
         '\tmov\s_s (:expression l) '\[%RBP\],\s%_l (rax-of-size op-size) '\n_s
         '\tmov\s_s (:expression r) '\[%RBP\],\s%_l (r14-of-size op-size) '\n_s
         op-code
      ))
      (:frame( (:frame l) (:frame r) ))
      (:unframe( (:unframe l) (:unframe r) ))
      (:expression(rax-of-size return-size))
   ) op-rtype);
   op-alias := λ: Blob(: l op-type+LocalVariable)(: r op-type+GlobalVariable). (: (
      (:program(
         '\tmov\s_s (:expression l) '\[%RBP\],\s%_l (rax-of-size op-size) '\n_s
         '\tmov\s$_s (:expression r) ',\s%R14\n_s
         '\tmov\s0\[%R14\],\s%_l (r14-of-size op-size) '\n_s
         op-code
      ))
      (:frame( (:frame l) (:frame r) ))
      (:unframe( (:unframe l) (:unframe r) ))
      (:expression(rax-of-size return-size))
   ) op-rtype);
   op-alias := λ: Blob(: l op-type+LocalVariable)(: r op-type+reg-type). (: (
      (:program(
         (:program r)
         '\tmov\s%_s (:expression r) ',\s%_l (r14-of-size op-size) '\n_s
         '\tmov\s_s (:expression l) '\[%RBP\],\s%_l (rax-of-size op-size) '\n_s
         op-code
      ))
      (:frame( (:frame l) (:frame r) ))
      (:unframe( (:unframe l) (:unframe r) ))
      (:expression(rax-of-size return-size))
   ) op-rtype);

   op-alias := λ: Blob(: l op-type+GlobalVariable)(: r op-type+Constant). (: (
      (:program(
         '\tmov\s$_s (:expression l) ',\s%RAX\n_s
         '\tmov\s0\[%RAX\],\s%_l (rax-of-size op-size) '\n_s
         '\tmov\s$_s (:expression r) ',\s%_l (r14-of-size op-size) '\n_s
         op-code
      ))
      (:frame( (:frame l) (:frame r) ))
      (:unframe( (:unframe l) (:unframe r) ))
      (:expression(rax-of-size return-size))
   ) op-rtype);
   op-alias := λ: Blob(: l op-type+GlobalVariable)(: r op-type+LocalVariable). (: (
      (:program(
         '\tmov\s$_s (:expression l) ',\s%RAX\n_l
         '\tmov\s0\[%RAX\],\s%_l (rax-of-size op-size) '\n_s
         '\tmov\s_s (:expression r) '\[%RBP\],\s%_l (r14-of-size op-size) '\n_s
         op-code
      ))
      (:frame( (:frame l) (:frame r) ))
      (:unframe( (:unframe l) (:unframe r) ))
      (:expression(rax-of-size return-size))
   ) op-rtype);
   op-alias := λ: Blob(: l op-type+GlobalVariable)(: r op-type+GlobalVariable). (: (
      (:program(
         '\tmov\s$_s (:expression l) ',\s%RAX\n_s
         '\tmov\s0\[%RAX\],\s%_l (rax-of-size op-size) '\n_s
         '\tmov\s$_s (:expression r) ',\s%R14\n_s
         '\tmov\s0\[%R14\],\s%_l (r14-of-size op-size) '\n_s
         op-code
      ))
      (:frame( (:frame l) (:frame r) ))
      (:unframe( (:unframe l) (:unframe r) ))
      (:expression(rax-of-size return-size))
   ) op-rtype);
   op-alias := λ: Blob(: l op-type+GlobalVariable)(: r op-type+reg-type). (: (
      (:program(
         (:program r)
         '\tmov\s%_s (:expression r) ',\s%_l (r14-of-size op-size) '\n_s
         '\tmov\s$_s (:expression l) ',\s%RAX\n_s
         '\tmov\s0\[%RAX\],\s%_l (rax-of-size op-size) '\n_s
         op-code
      ))
      (:frame( (:frame l) (:frame r) ))
      (:unframe( (:unframe l) (:unframe r) ))
      (:expression(rax-of-size return-size))
   ) op-rtype);

   op-alias := λ: Blob(: l op-type+reg-type)(: r op-type+Constant). (: (
      (:program(
         (:program l)
         '\tmov\s%_s (:expression l) ',\s%_l (rax-of-size op-size) '\n_s
         '\tmov\s$_s (:expression r) ',\s%_l (r14-of-size op-size) '\n_s
         op-code
      ))
      (:frame( (:frame l) (:frame r) ))
      (:unframe( (:unframe l) (:unframe r) ))
      (:expression(rax-of-size return-size))
   ) op-rtype);
   op-alias := λ: Blob(: l op-type+reg-type)(: r op-type+LocalVariable). (: (
      (:program(
         (:program l)
         '\tmov\s%_s (:expression l) ',\s%_l (rax-of-size op-size) '\n_s
         '\tmov\s_s (:expression r) '\[%RBP\],\s%_l (r14-of-size op-size) '\n_s
         op-code
      ))
      (:frame( (:frame l) (:frame r) ))
      (:unframe( (:unframe l) (:unframe r) ))
      (:expression(rax-of-size return-size))
   ) op-rtype);
   op-alias := λ: Blob(: l op-type+reg-type)(: r op-type+GlobalVariable). (: (
      (:program(
         (:program l)
         '\tmov\s%_s (:expression l) ',\s%_l (rax-of-size op-size) '\n_s
         '\tmov\s$_s (:expression r) ',\s%R14\n_s
         '\tmov\s0\[%R14\],\s%_l (r14-of-size op-size) '\n_s
         op-code
      ))
      (:frame( (:frame l) (:frame r) ))
      (:unframe( (:unframe l) (:unframe r) ))
      (:expression(rax-of-size return-size))
   ) op-rtype);
   op-alias := λ: Blob(: l op-type+reg-type)(: r op-type+reg-type+Meta<OntoStack>). (: (
      (:program(
         (:program r)
         '\tpush\s%_s (:expression r) '\n_s
         (:program l)
         '\tmov\s%_s (:expression l) ',\s%_l (rax-of-size op-size) '\n_s
         '\tpopq\s%R14\n_s
         op-code
      ))
      (:frame( (:frame l) (:frame r) ))
      (:unframe( (:unframe l) (:unframe r) ))
      (:expression(rax-of-size return-size))
   ) op-rtype);
);

