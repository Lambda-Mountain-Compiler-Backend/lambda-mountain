
fragment type U64; size U64 8; atom suffix U64 _u64;

(declare-binop( != U64 U64 U64 ( '\[_l x '!=_l y '\]_l ) ));
(declare-binop( == U64 U64 U64 ( '\[_l x '==_l y '\]_l ) ));
(declare-binop( < U64 U64 U64 ( '\[_l x '<_l y '\]_l ) ));
(declare-binop( <= U64 U64 U64 ( '\[_l x '<=_l y '\]_l ) ));
(declare-binop( > U64 U64 U64 ( '\[_l x '>_l y '\]_l ) ));
(declare-binop( >= U64 U64 U64 ( '\[_l x '>=_l y '\]_l ) ));

(declare-binop( && U64 U64 U64 ( '\[_l x '&&_l y '\]_l ) ));
(declare-binop( || U64 U64 U64 ( '\[_l x '||_l y '\]_l ) ));

(declare-binop( + U64 U64 U64 ( '\[_l x '+_l y '\]_l ) ));
(declare-binop( - U64 U64 U64 ( '\[_l x '-_l y '\]_l ) ));
(declare-binop( ^ U64 U64 U64 ( '\[_l x '^_l y '\]_l ) ));
(declare-binop( / U64 U64 U64 ( '\[_l x '/_l y '\]_l ) ));
(declare-binop( % U64 U64 U64 ( '\[_l x '%_l y '\]_l ) ));
(declare-binop( * U64 U64 U64 ( '\[_l x '*_l y '\]_l ) ));

(declare-binop( << U64 U64+Constant U64 ( '\[_l x '<<_l y '\]_l ) ));
(declare-binop( >> U64 U64+Constant U64 ( '\[_l x '>>_l y '\]_l ) ));

(declare-unop( not U64 U64 ( '\[!_l x '\]_l ) ));

(declare-unop( into-branch-conditional U64 BranchConditional ( x ) ));

print := λ(: x U64). (: (
   (printf( '%ld_s x )) ()
) Nil);

max := λ(: x U64)(: y U64). (: (
   (if (>=( x y )) x y)
) U64);

min := λ(: x U64)(: y U64). (: (
   (if (<=( x y )) x y)
) U64);

to-string := λ(: i U64). (: (
   (let r SNil)
   (let c 0_u8)
   (while (not(==( i 0_u64 ))) (
      (let ci (as (+( (%( i 10_u64 )) 48_u64 )) U8))
      (set i (/( i 10_u64 )))
      (set r (SCons(
         (close(SAtom(clone-rope ci)))
         (close r)
      )))
   ))
   (if (non-zero r) () (
      (set r (SAtom '0_s))
   ))
   (clone-rope r)
) String);

deep-hash := λ(: x U64). (: (hash x) U64);

to-u64 := λ(: s String). (: (
   (let i 0_u64)
   (while (head-string s) (
      (set i (*( i 10_u64 )))
      (match (head-string s) (
         ()
         ( 48_u8 () )
         ( 49_u8 (set i (+( i 1_u64 ))) )
         ( 50_u8 (set i (+( i 2_u64 ))) )
         ( 51_u8 (set i (+( i 3_u64 ))) )
         ( 52_u8 (set i (+( i 4_u64 ))) )
         ( 53_u8 (set i (+( i 5_u64 ))) )
         ( 54_u8 (set i (+( i 6_u64 ))) )
         ( 55_u8 (set i (+( i 7_u64 ))) )
         ( 56_u8 (set i (+( i 8_u64 ))) )
         ( 57_u8 (set i (+( i 9_u64 ))) )
         ( _ () )
      ))
      (set s (tail-string s))
   ))
   i
) U64);
