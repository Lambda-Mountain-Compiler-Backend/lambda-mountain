
type S = SNil | SAtom { atom: CString } | SCons { left: S[], right: S[] } | SPointer { pointer: U8[] };

let print(x: S): Nil = (
   match x {
      SNil {} => print("()");
      SAtom { atom=atom } => print(atom);
      SCons { left=left, right=right } => (
         print("("); print(left); print(" "); print(right); print(")");
      );
      SPointer { pointer=pointer } => (
         print("&["); print(pointer as U64); print("]");
      );
   }
);

let $"+"(l: S, r: S): S = (
   if non-zero(r) then (
      if non-zero(l)
      then (l = SCons{close(l), close(r)})
      else (l = r);
   ); l
);

let $"=="(ls: S, rs: S): U64 = (
   match (Tuple( ls, rs )) {
      Tuple { first:SNil{}, second:SNil{} } => true;
      Tuple { first:SAtom{ lc=atom }, second:SAtom{ rc=atom } } => lc == rc;
      Tuple { first:SCons{ l1=left, l2=right },
              second:SCons{ r1=left, r2=right } } => l1==r1 && l2==r2;
      Tuple { first:SPointer{ lc=pointer },
              second:SPointer{ rc=pointer } } => (lc as U8) == (rc as U8);
      _ => false;
   }
);

let $"!="(ls: S, rs: S): U64 = not(ls == rs);
