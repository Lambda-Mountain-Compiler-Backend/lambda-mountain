
type CString => Iterable<U8>;
type CString => Collection<U8>;

# TODO: instead do U8 iterator for S

# TODO: deprecate this in favor of Vector
let clone-rope(s: S): CString = (
   let out = mk-vector(type(U8), 64);
   out = clone-rope-impl(s, out);
   out.move-to(type(CString))
);

let clone-rope-impl(s: S, out: Vector<U8>): Vector<U8> = (
   match s {
      SNil {} => ();

      SCons { l=left, r=right } => (
         out = clone-rope-impl(l, out);
         out = clone-rope-impl(r, out);
      );

      SAtom { a=atom } => (
         out = out.push-all(a);
      );

      r => ();
   };
   out
);

type CStringIter = CStringIter { ptr: CString };
type CStringIter => Iterator<U8>;

let .next(self: CStringIter[]): U8 = (
   let val = open(self).ptr[0];
   self[0] = CStringIter { open(self).ptr.substring(1) };
   val
);

let .skip(self: CStringIter, num: U64): CStringIter = (
   CStringIter { self.ptr.substring(num) }
);

let .iter(self: CString): CStringIter = (
   let ln = self.length();
   let v = mk-vector(type(U8), ln+1);
   let i = 0;
   while i < ln {
      v.push(self[i]);
      i = i + 1;
   };
   self = v.move-to(type(CString));
   CStringIter { self }
);

let .unsafe-iter(self: CString): CStringIter = (
   CStringIter { self }
);

let .substring(self: CString, begin: U64): CString = (
    ((((self as U8[]) as U64) + begin) as U8[]) as CString
);

let $"[]"(self: CString, idx: U64): U8 = (
    (self as U8[])[idx]
);

let cmp(l: CString, r: CString): Ord = (
   let c = strcmp( (l as U8[]), (r as U8[]) );
   if c < 0_i32 { LessThan }
   else if c > 0_i32 { GreaterThan }
   else { Equal }
);

let print(io: IO::File, x: CString): Nil = (
   while head-string(x) != 0_u8 {
      fwrite(x as U8[], 1_u64, 1_u64, stdout());
      x = tail-string(x);
   };
);

let .is-digit(base: CString): U64 = (
   if non-zero(base) {
      let r = true;
      while head-string(base) != 0_u8 && r {
         r = 48_u8 <= head-string(base) && head-string(base) <= 57_u8;
         base = tail-string(base);
      };
      r
   } else false
);
