
type String => Collection<U8>;

# TODO: instead do U8 iterator for S

# TODO: deprecate this in favor of Vector
let clone-rope(s: S): CString = (
   let out = mk-vector(type(U8), 64);
   out = clone-rope-impl(s, out);
   out.into(type(CString))
);

let clone-rope-impl(s: S, out: Vector<U8>): Vector<U8> = (
   match s {
      SNil {} => ();

      SCons { l=left, r=right } => (
         out = clone-rope-impl(l, out);
         out = clone-rope-impl(r, out);
      );

      SAtom { a=atom } => (
         while non-zero(a) {
            out = out.push(head-string(a));
            a = tail-string(a);
         };
      );

      r => ();
   };
   out
);

let cmp(l: CString, r: CString): Ord = (
   let c = strcmp( (l as U8[]), (r as U8[]) );
   if c < 0_i32 { LessThan }
   else if c > 0_i32 { GreaterThan }
   else { Equal }
);

let print(io: IO::File, x: CString): Nil = (
   while head-string(x) != 0_u8 {
      fwrite(x as U8[], 1_u64, 1_u64, stdout());
      x = tail-string(x);
   };
);

let .is-digit(base: CString): U64 = (
   if non-zero(base) {
      let r = true;
      while head-string(base) != 0_u8 && r {
         r = 48_u8 <= head-string(base) && head-string(base) <= 57_u8;
         base = tail-string(base);
      };
      r
   } else false
);
