
#import stdio.h;
import stdlib.h;
import string.h;
import unistd.h;
import sys/wait.h;

strcmp := λ: FFI(: l U8[])(: r U8[]). (: () U32);
printf := λ: FFI(: format String)(: arg Meta<Any>). (: () U32);
putchar := λ: FFI(: x U32). (: () U32);
exit := λ: FFI(: x U32). (: () Nil);
malloc := λ: FFI(: sz U64). (: () ?[]);
realloc := λ: FFI(: ptr ?[])(: sz U64). (: () ?[]);
memset :=  λ: FFI(: ptr ?[])(: x U32)(: sz U64). (: () ?[]);
fopen := λ: FFI(: fp U8[])(: mode U8[]). (: () File[]);
fread := λ: FFI(: buff ?[])(: size U64)(: count U64)(: f File[]). (: () U64);
fwrite := λ: FFI(: buff ?[])(: size U64)(: count U64)(: f File[]). (: () U64);
fclose := λ: FFI(: f File[]). (: () U32);
execvp := λ: FFI(: file U8[])(: argv U8[][]). (: () U32);
mktemp := λ: FFI(: template U8[]). (: () U8[]);
wait := λ: FFI(: wstatus U32[]). (: () PID);
fork := λ: FFI().(: () PID);

exit := λ(: x U64).(: (exit(as x U32)) Nil);

print := λ(: x String). (: (
   (while (!=( (head-string x) 0_u8 )) (
      (putchar( (as (head-string x) U32) ))
      (set x (tail-string x))
   ))
) Nil);

fail := λ(: msg String)(: loc String). (: (
   (print msg)(print '\sat\s_s)(print loc)
   (exit 1_u32)
) Never);

fail := λ(: msg String). (: (
   (print msg)
   (exit 1_u32)
) Never);

read-file := λ(: fp String). (: (
   (let buff-sz 0_u64)
   (let buff (as (malloc 1024_u64) U8[]))
   (let f (fopen( (as fp U8[]) (as 'r_s U8[]) )))
   (if (==( (as f U64) 0_u64 )) (
      (print 'Unable\sTo\sRead\sFrom\sFile:\s_s)(print fp)(print '\n_s)(exit 1_u64)
   ) ())
   (let bytes-read 1_u64)
   (while bytes-read (
      (set bytes-read (fread( (+( buff buff-sz )) 1_u64 1023_u64 f )))
      (set buff-sz (+( buff-sz bytes-read )))
      (set buff (as (realloc( buff (+( buff-sz 1023_u64 )) )) U8[]))
   ))
   (fclose f)
   (set[]( buff buff-sz 0_u8 ))
   (as buff String)
) String);

write-file := λ(: fp String)(: contents String). (: (
   (let f (fopen( (as fp U8[]) (as 'w_s U8[]) )))
   (fwrite( (as contents U8[]) 1_u64 (.length contents) f ))
   (fclose f) ()
) Nil);
