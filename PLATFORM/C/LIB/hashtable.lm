
type HashtableIs<k,v> (HashtableIs( occupied:U64 , capacity:U64 , contents:Tuple<k,v>[] ));

.bind := λ(: table HashtableIs<k,v>)(: key k)(: value v). (: (
   (let occupied (.3 table))
   (let capacity (.2 table))
   (let contents (.1 table))
   (if (>=( (*( occupied 3_u64 )) capacity )) (
      (let new-capacity (max( 1000_u64 (*( occupied 30_u64 )) )))
      (let new-sizeof (*( (sizeof Tuple<k,v>) new-capacity )))
      (let new-contents (as (malloc new-sizeof) Tuple<k,v>[]))
      (memset( new-contents 0_u32 new-sizeof ))
      (let old-i 0_u64)
      (while (<( old-i capacity )) (
         (let old-kv ([]( contents old-i )))
         (if (mem-is-nonzero old-kv) (
            (match old-kv (
               ()
               ( (Tuple( old-k old-v )) (
                  (.bind-is( new-contents new-capacity old-k old-v ))
               ))
            ))
         ) ())
         (set old-i (+( old-i 1_u64 )))
      ))
      (set contents new-contents)
      (set capacity new-capacity)
   ) ())
   (let replacing (.bind-is( contents capacity key value )))
   (if replacing () (set occupied (+( occupied 1_u64 ))))
   (HashtableIs( occupied capacity contents ))
) HashtableIs<k,v>);

.bind-is := λ(: table Tuple<k,v>[])(: table-capacity U64)(: key k)(: value v). (: (
   (let replacing 0_u64)
   (let ki (%( (hash key) table-capacity )))
   (let old-kv ([]( table ki )))
   (let old-k (.2 old-kv))
   (if (is( old-k key )) (set replacing 1_u64) ())
   (while (&&( (mem-is-nonzero old-kv) (not replacing) )) (
      (set ki (%( (+( ki 1_u64 )) table-capacity )))
      (set old-kv ([]( table ki )))
      (set old-k (.2 old-kv))
      (if (is( old-k key )) (set replacing 1_u64) ())
   ))
   (let kv (Tuple( key value )))
   (set[]( table ki kv ))
   replacing
) U64);

.lookup := λ(: table HashtableIs<k,v>)(: key k)(: default v). (: (
   (let capacity (.2 table))
   (if (==( capacity 0_u64 )) () (
      (let contents (.1 table))
      (let replacing 0_u64)
      (let ki (%( (hash key) capacity )))
      (let old-kv ([]( contents ki )))
      (let old-k (.2 old-kv))
      (if (is( old-k key )) (set replacing 1_u64) ())
      (while (&&( (mem-is-nonzero old-kv) (not replacing) )) (
         (set ki (%( (+( ki 1_u64 )) capacity )))
         (set old-kv ([]( contents ki )))
         (set old-k (.2 old-kv))
         (if (is( old-k key )) (set replacing 1_u64) ())
      ))
      (if replacing (
         (let old-v (.1 old-kv))
         (set default old-v)
      ) ())
   ))
   default
) v);

type HashtableEq<k,v> (HashtableEq( occupied:U64 , capacity:U64 , contents:Tuple<k,v>[] ));

.bind := λ(: table HashtableEq<k,v>)(: key k)(: value v). (: (
   (let occupied (.3 table))
   (let capacity (.2 table))
   (let contents (.1 table))
   (if (>=( (*( occupied 3_u64 )) capacity )) (
      (let new-capacity (max( 1000_u64 (*( occupied 30_u64 )) )))
      (let new-sizeof (*( (sizeof Tuple<k,v>) new-capacity )))
      (let new-contents (as (malloc new-sizeof) Tuple<k,v>[]))
      (memset( new-contents 0_u32 new-sizeof ))
      (let old-i 0_u64)
      (while (<( old-i capacity )) (
         (let old-kv ([]( contents old-i )))
         (if (mem-is-nonzero old-kv) (
            (match old-kv (
               ()
               ( (Tuple( old-k old-v )) (
                  (.bind-eq( new-contents new-capacity old-k old-v ))
               ))
            ))
         ) ())
         (set old-i (+( old-i 1_u64 )))
      ))
      (set contents new-contents)
      (set capacity new-capacity)
   ) ())
   (let replacing (.bind-eq( contents capacity key value )))
   (if replacing () (set occupied (+( occupied 1_u64 ))))
   (HashtableEq( occupied capacity contents ))
) HashtableEq<k,v>);

.bind-eq := λ(: table Tuple<k,v>[])(: table-capacity U64)(: key k)(: value v). (: (
   (let replacing 0_u64)
   (let ki (%( (deep-hash key) table-capacity )))
   (let old-kv ([]( table ki )))
   (let old-k (.2 old-kv))
   (if (&&( (mem-is-nonzero old-kv) (==( old-k key )) )) (set replacing 1_u64) ())
   (while (&&( (mem-is-nonzero old-kv) (not replacing) )) (
      (set ki (%( (+( ki 1_u64 )) table-capacity )))
      (set old-kv ([]( table ki )))
      (set old-k (.2 old-kv))
      (if (&&( (mem-is-nonzero old-kv) (==( old-k key )) )) (set replacing 1_u64) ())
   ))
   (let kv (Tuple( key value )))
   (set[]( table ki kv ))
   replacing
) U64);

.lookup := λ(: table HashtableEq<k,v>)(: key k)(: default v). (: (
   (let capacity (.2 table))
   (if (==( capacity 0_u64 )) () (
      (let contents (.1 table))
      (let replacing 0_u64)
      (let ki (%( (deep-hash key) capacity )))
      (let old-kv ([]( contents ki )))
      (let old-k (.2 old-kv))
      (if (&&( (mem-is-nonzero old-kv) (==( old-k key )) )) (set replacing 1_u64) ())
      (while (&&( (mem-is-nonzero old-kv) (not replacing) )) (
         (set ki (%( (+( ki 1_u64 )) capacity )))
         (set old-kv ([]( contents ki )))
         (set old-k (.2 old-kv))
         (if (&&( (mem-is-nonzero old-kv) (==( old-k key )) )) (set replacing 1_u64) ())
      ))
      (if replacing (
         (let old-v (.1 old-kv))
         (set default old-v)
      ) ())
   ))
   default
) v);
