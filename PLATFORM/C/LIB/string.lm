
fragment type String; size String 8; atom suffix String _s;

head-string := λ(: x String). (: (
   ([]( (as x U8[]) 0_u64 ))
) U8);

tail-string := λ(: x String). (: (
   (+( (as x U8[]) 1_u64 ))
) String);

== := λ(: l String)(: r String). (: (
   (==( (strcmp( (as l U8[]) (as r U8[]) )) 0_u32 ))
) U64);

clone-rope := λ(: s S). (: (
   (let r (malloc( 0_u64 )))
   (let len (clone-rope-impl( r s 0_u64 )))
   (set r (realloc( r (+( len 1_u64 )) )))
   (set[]( (as r U8[]) len 0_u8 ))
   (as r String)
) String);

clone-rope-impl := λ(: ptr ?[])(: s S)(: i U64). (: (
   (match s (
      ()
      ( SNil () )
      ( (SCons( l r )) (
         (set i (clone-rope-impl( ptr (open l) i )))
         (set i (clone-rope-impl( ptr (open r) i )))
      ))
      ( (SAtom a) (
         (let ci 0_u64)
         (let c ([]( (as a U8[]) ci )))
         (while (!=( c 0_u8 )) (
            (set ptr (realloc( ptr (+( i 1_u64 )) )))
            (set[]( (as ptr U8[]) i c ))
            (set ci (+( ci 1_u64 )))
            (set i (+( i 1_u64 )))
            (set c ([]( (as a U8[]) ci )))
         ))
      ))
   ))
   i
) U64);

clone-rope := λ(: s U8). (: (
   (let x (as (malloc 2_u64) U8[]))
   (mov( s 0_u64 x ))
   (mov( 0_u8 1_u64 x ))
   (as x String)
) String);
