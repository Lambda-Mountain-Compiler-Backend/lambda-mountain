
fragment type String; size String 8; atom suffix String _s;

type VariableData (CRAlloc( ptr:?[] , length:U64 , capacity:U64 ));

head-string := λ(: x String). (: (
   ([]( (as x U8[]) 0_u64 ))
) U8);

tail-string := λ(: x String). (: (
   (+( (as x U8[]) 1_u64 ))
) String);

== := λ(: l String)(: r String). (: (
   (let rt 0_u64)
   (==( (strcmp( (as l U8[]) (as r U8[]) )) 0_u32 ))
) U64);

clone-rope := λ(: s S). (: (
   (let buff (new-buffer 64_u64))
   (set buff (clone-rope-impl( buff s )))
   (set buff (.write( buff 0_u8 )))
   (as (.ptr buff) String)
) String);

clone-rope-impl := λ(: buff Buffer)(: s S). (: (
   (match s (
      ()
      ( SNil () )
      ( (SCons( l r )) (
         (set buff (clone-rope-impl( buff l )))
         (set buff (clone-rope-impl( buff r )))
      ))
      ( (SAtom a) (
         (let ci 0_u64)
         (let c ([]( (as a U8[]) ci )))
         (while (!=( c 0_u8 )) (
            (set buff (.write( buff c )))
            (set ci (+( ci 1_u64 )))
            (set c ([]( (as a U8[]) ci )))
         ))
      ))
   ))
   buff
) Buffer);

deep-hash := λ(: key String). (: (
   (let i 0_u64)
   (let hash 0_u64)
   (while (head-string key) (
      (set hash (+( hash (as (head-string key) U64) )))
      (set key (tail-string key))
      (set hash (+( hash (<<( hash 10_u64 )) )))
      (set hash (^( hash (>>( hash 6_u64 )) )))
   ))
   (set hash (+( hash (<<( hash 3_u64 )) )))
   (set hash (^( hash (>>( hash 11_u64 )) )))
   (set hash (+( hash (<<( hash 15_u64 )) )))
   hash
) U64);

.length := λ(: s String). (: (
   (let si 0_u64)
   (while (!=( ([]( (as s U8[]) si )) 0_u8 )) (
      (set si (+( si 1_u64 )))
   ))
   si
) U64);

has-prefix := λ(: base String)(: pfx String). (: (
   (let r 1_u64)
   (while (head-string pfx) (
      (if (head-string base) (
         (let bc (head-string base))
         (let pc (head-string pfx))
         (if (==( bc pc )) (
            (set base (tail-string base))
            (set pfx (tail-string pfx))
         ) (
            (set r 0_u64)
            (set pfx '_s)
         ))
      ) (
         (set r 0_u64)
         (set pfx '_s)
      ))
   ))
   r
) U64);

remove-prefix := λ(: base String)(: pfx String). (: (
   (if (has-prefix( base pfx )) (
      (while (head-string pfx) (
         (set base (tail-string base))
         (set pfx (tail-string pfx))
      ))
   ) ())
   base
) String);

has-suffix := λ(: base String)(: sfx String). (: (
   (let r 0_u64)
   (while (head-string base) (
      (if (==( base sfx )) (
         (set r 1_u64)
      ) ())
      (set base (tail-string base))
   ))
   r
) U64);

remove-suffix := λ(: base String)(: sfx String). (: (
   (let r SNil)
   (while (head-string base) (
      (if (==( base sfx )) (
         (set base '0_s)
      ) (
         (set r (SCons(
            (close r)
            (close(SAtom(clone-rope(head-string base))))
         )))
      ))
      (set base (tail-string base))
   ))
   (clone-rope r)
) String);

.join :=  λ(: l List<String>)(: sep String). (: (
   (let r SNil)
   (while (non-zero l) (
      (set r (+( r (SAtom(head l)) )))
      (set l (tail l))
      (if (non-zero l) (set r (+( r (SAtom sep) ))) ())
   ))
   (clone-rope r)
) String);
