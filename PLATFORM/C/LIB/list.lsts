
let cmp(ls: List<x>, rs: List<x>): Ord = (
   let diff = Equal;
   while is(diff, Equal) && non-zero(ls) && non-zero(rs) {
      diff = cmp(head(ls), head(rs));
      ls = tail(ls);
      rs = tail(rs);
   };
   if not(is(diff,Equal)) then diff else
   if not(non-zero(ls)) && non-zero(rs) then LessThan else
   if non-zero(ls) && not(non-zero(rs)) then GreaterThan else
   Equal
);

let to-smart-string(ls: List<x>): String = (
   let s = "[";
   let si = 0;
   for l in ls {
      if si > 0 {
         s = s + ",";
      };
      s = s + to-smart-string(l);
      si = si + 1;
   };
   s = s + "]";
   s
);

let .unique(ls: List<x>): List<x> = (
   let rs = [] :: List<x>;
   for l in ls {
      if not(rs.contains(l)) {
         rs = cons(l, rs);
      }
   };
   rs
);
