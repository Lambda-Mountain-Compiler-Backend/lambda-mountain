
type2 List<x> zero LEOF
             = LEOF
             | LCons{ head:x , tail:List<x>[] };

let cmp(ls: List<x>, rs: List<x>): Ord = (
   let diff = Equal();
   while is(diff, Equal()) && non-zero(ls) && non-zero(rs) {
      diff = cmp(head(ls), head(rs));
      ls = tail(ls);
      rs = tail(rs);
   };
   if not(is(diff,Equal())) then diff else
   if not(non-zero(ls)) && non-zero(rs) then LessThan() else
   if non-zero(ls) && not(non-zero(rs)) then GreaterThan() else
   Equal()
);

let to-smart-string(ls: List<x>): String = (
   let s = "[";
   let si = 0_u64;
   for l in ls {
      if si > 0_u64 {
         s = s + ",";
      };
      s = s + to-smart-string(l);
      si = si + 1_u64;
   };
   s = s + "]";
   s
);

let .unique(ls: List<x>): List<x> = (
   let rs = [] :: List<x>;
   for l in ls {
      if not(rs.contains(l)) {
         rs = cons(l, rs);
      }
   };
   rs
);

let .next(ls: Array<List<x>,?>): Maybe<x> = (
   match open(ls) {
      [i.. rst] => (
         ls[0_u64] = rst;
         Some(i)
      );
      [] => (None :: Maybe<x>)();
   };
);

let .lookup(ls: List<Tuple<k,v>>, key: k, default: v): v = (
   let found = false;
   for Tuple{lkey=first, rval=second} in ls {
      if not(found) && key==lkey { default=rval; found=true; }
   };
   default;
);
let .lookup(ls: List<Tuple<k,v1,v2>>, key: k, default: Tuple<v1,v2>): Tuple<v1,v2> = (
   let found = false;
   for Tuple{lkey=first, val1=second, val2=third} in ls {
      if not(found) && key==lkey { default=Tuple{val1,val2}; found=true; }
   };
   default;
);

