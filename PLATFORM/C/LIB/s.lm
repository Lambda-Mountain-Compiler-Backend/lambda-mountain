
type S (SNil)
     | (SAtom( String ))
     | (SCons( S[] , S[] ))
     | (SPointer( U8[] ));
zero S SNil;

print := 位(: x S). (: (
   (match x (
      ()
      ( SNil (print '\[\]_s) )
      ( (SAtom a) (print a))
      ( (SCons( l r )) (
         (print '\[_s)
         (print l)
         (print '\s_s)
         (print r)
         (print '\]_s)
      ))
      ( (SPointer p) (
         (print '&[_s)
         (print (as p U64))
         (print ']_s)
      ))
   ))
   ()
) Nil);

+ := 位(: l S)(: r S). (: (
   (if (non-zero r) (
      (if (non-zero l) (
         (set l (SCons( (close l) (close r) )))
      ) (set l r))
   ) ())
   l
) S);

== := 位(: ls S)(: rs S). (: (
   (let r 0_u64)
   (match (Tuple( ls rs )) (
      ()
      ( (Tuple( SNil SNil )) (set r 1_u64) )
      ( (Tuple( (SAtom lc) (SAtom rc) )) (set r (==( lc rc ))) )
      ( (Tuple( (SCons( l1 l2 )) (SCons( r1 r2 )) )) (
         (if (==( l1 r1 )) (
            (if (==( l2 r2 )) (set r 1_u64) ())
         ) ())
      ))
      ( (Tuple( (SPointer lc) (SPointer rc) )) (
         (if (==( (as lc U64) (as rc U64) )) (set r 1_u64) ())
      ))
      ( _ () )
   ))
   r
) U64);

!= := 位(: ls S)(: rs S). (: (
   (not(==( ls rs )))
) U64);
