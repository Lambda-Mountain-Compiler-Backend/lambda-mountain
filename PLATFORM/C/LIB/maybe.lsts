
type Maybe<x> = Some { content:x } | None;
zero Maybe<x> = None;

let .get-or(m: Maybe<x>, default: x): x = (
   match m {
      Some{content=content} => content;
      None{} => default;
   }
);

let .get-or-panic(m: Maybe<x>): x = (
   match m {
      Some{content=content} => content;
   }
);

let .is-none(m: Maybe<x>): U64 = (
   match m {
      Some{} => false;
      None{} => true;
   }
);

let .is-some(m: Maybe<x>): U64 = (
   match m {
      Some{} => true;
      None{} => false;
   }
);

let cmp(l: Maybe<x>, r: Maybe<x>): Ord = (
   if $".0"(l) != $".0"(r) then cmp($".0"(l), $".0"(r))
   else if l.is-some then cmp(l.get-or-panic, r.get-or-panic)
   else Equal
);
