
(declare-binop( [] Array<base-type,?> U64 base-type ('\[_l x '[_l y ']\]_l) ));
(declare-ternop( set[] Array<base-type,?> U64 base-type base-type ('\[_l x '[_l y ']=_l z \]_l) ));
(declare-binop( + Array<base-type,?> U64 Array<base-type,?> ('\[_l x '+_l y '\]_l) ));

close := Î»(: x p). (: (
   (let r (as (malloc(sizeof p)) p[]))
   (set[]( r 0_u64 x ))
   r
) p[]);

(declare-unop( raw Array<base-type,base-length> Array<base-type,base-length>+DontOpen (x) ));
(declare-unop( open t t (x) ));
(declare-unop( open Array<base-type,?> base-type ('\[*_l x '\]_l) ));
