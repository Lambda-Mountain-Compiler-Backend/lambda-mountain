
null := 位: Blob(). (: (
   (:expression NULL_l)
) Array<?,?>);

const-cons := 位: Blob(: es x...). (: (
   (:expression(
      '{_l (for-arg (e in es) (
         (:expression e) ',_l
       )) 'NULL}_l
   ))
) Array<x,CONST>);

const-cons := 位: Blob(: v x)(: i L). (: (
   (:expression(
      '{_l (for-atom (e in (range( 0_l i ))) (
          (:expression v) ',_l
       )) '}_l
   ))
) Array<x,CONST>);

(declare-binop( [] Array<base-type,?> U64 base-type ('\[_l x '[_l y ']\]_l) ));
(declare-ternop( set[] Array<base-type,?> U64 base-type base-type ('\[_l x '[_l y ']=_l z \]_l) ));
(declare-binop( + Array<base-type,?> U64 Array<base-type,?> ('\[_l x '+_l y '\]_l) ));

close := 位(: x p). (: (
   (let r (as (malloc(sizeof p)) p[]))
   (set[]( r 0_u64 x ))
   r
) p[]);

(declare-unop( open t t (x) ));
(declare-unop( open Array<base-type,?> base-type ('\[*_l x '\]_l) ));

(declare-unop( & t t[] ('\[&_l x '\]_l) ));
