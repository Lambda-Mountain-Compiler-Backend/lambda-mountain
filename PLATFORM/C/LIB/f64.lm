
fragment type F64; size F64 8; atom suffix F64 _f64;

(declare-binop( != F64 F64 U64 ( '\[_l x '!=_l y '\]_l ) ));
(declare-binop( == F64 F64 U64 ( '\[_l x '==_l y '\]_l ) ));
(declare-binop( < F64 F64 U64 ( '\[_l x '<_l y '\]_l ) ));
(declare-binop( <= F64 F64 U64 ( '\[_l x '<=_l y '\]_l ) ));
(declare-binop( > F64 F64 U64 ( '\[_l x '>_l y '\]_l ) ));
(declare-binop( >= F64 F64 U64 ( '\[_l x '>=_l y '\]_l ) ));

(declare-binop( && F64 F64 U64 ( '\[_l x '&&_l y '\]_l ) ));
(declare-binop( || F64 F64 U64 ( '\[_l x '||_l y '\]_l ) ));

(declare-binop( + F64 F64 F64 ( '\[_l x '+_l y '\]_l ) ));
(declare-binop( - F64 F64 F64 ( '\[_l x '-_l y '\]_l ) ));
(declare-binop( ^ F64 F64 F64 ( '\[_l x '^_l y '\]_l ) ));
(declare-binop( / F64 F64 F64 ( '\[_l x '/_l y '\]_l ) ));
(declare-binop( % F64 F64 F64 ( '\[_l x '%_l y '\]_l ) ));
(declare-binop( * F64 F64 F64 ( '\[_l x '*_l y '\]_l ) ));

(declare-binop( << F64 U64+Constant F64 ( '\[_l x '<<_l y '\]_l ) ));
(declare-binop( >> F64 U64+Constant F64 ( '\[_l x '>>_l y '\]_l ) ));

(declare-unop( not F64 U64 ( '\[!_l x '\]_l ) ));

(declare-unop( into-branch-conditional F64 BranchConditional ( x ) ));

print := λ(: x F64). (: (
   (printf( '%lf_s x )) ()
) Nil);

max := λ(: x F64)(: y F64). (: (
   (if (>=( x y )) x y)
) F64);

min := λ(: x F64)(: y F64). (: (
   (if (<=( x y )) x y)
) F64);

