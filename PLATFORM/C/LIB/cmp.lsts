

# order is important here because
# LessThan.0 = 0
# Equal.0 = 1
# GreaterThan.0 = 2
type Ord = GreaterThan | Equal | LessThan;

let $"=="(l: Ord, r: Ord): U64 = $".0"(l) == $".0"(r);
let $"!="(l: Ord, r: Ord): U64 = $".0"(l) != $".0"(r);
let $"<"(l: Ord, r: Ord): U64  = $".0"(l) <  $".0"(r);
let $"<="(l: Ord, r: Ord): U64 = $".0"(l) <= $".0"(r);
let $">"(l: Ord, r: Ord): U64  = $".0"(l) >  $".0"(r);
let $">="(l: Ord, r: Ord): U64 = $".0"(l) >= $".0"(r);

let $"=="(l: x, r: x): U64 = cmp(l, r) == Equal;
let $"!="(l: x, r: x): U64 = cmp(l, r) != Equal;
let $"<"(l: x, r: x): U64  = cmp(l, r) <  Equal;
let $"<="(l: x, r: x): U64 = cmp(l, r) <= Equal;
let $">"(l: x, r: x): U64  = cmp(l, r) >  Equal;
let $">="(l: x, r: x): U64 = cmp(l, r) >= Equal;

let $"&&"(l: Ord, r: Ord): Ord = if l == Equal then r else l;

#let print(io: IO::File, o: Ord): Nil = (
#   if is(o,GreaterThan) then print(io, "GreaterThan") else
#   if is(o,Equal) then print(io, "Equal") else
#   print(io, "LessThan");
#);
