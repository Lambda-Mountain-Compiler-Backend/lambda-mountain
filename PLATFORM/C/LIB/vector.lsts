
## faster than [type(List<t>)]. should be used when you append or remove data a lot
type Vector<t> = Vector { data: t[], _length: U32, capacity: U32 };
type Vector<t> implements Collection<t>;

let .length(v: Vector<t>): U64 = (
   v._length
);

let mk-vector(type: Type<t>, capacity: U64): Vector<t> = (
   let ptr = if (capacity == 0_u64) then (0_u64 as t[]) else (safe-alloc(capacity, type(t)));
   Vector { ptr, 0_u32, capacity as U32 }
);

let mk-vector(ty: Type<t>): Vector<t> = (
   mk-vector(ty, 0_u64)
);

## generate a [type(Vector<t>)], in which each element is [value]
let fill-vector(value: t, len: U64): Vector<t> = (
   let v = mk-vector(type(t), len);
   while len > 0 {
      v[len-1] = value;
      len = len - 1;
   };
   v
);

## does not change the length length, or destroy old elements!
let .realloc(v: Vector<t>, target-capacity: U64): Vector<t> = (
   let newp = if (target-capacity == 0_u64) then (0_u64 as t[]) else (safe-realloc(v.data, target-capacity, type(t)));
   Vector { newp, v.length as U32, target-capacity as U32 }
);

## reserve additional num elements to the current length
let .reserve-additional(v: Vector<t>, additional: U64): Vector<t> = (
   if (v.capacity - v.length) < additional as U32 {
      v.realloc((v.length as U64) + additional)
   } else {
      v
   }
);

## INPUT VECTOR GETS POISONED
let .push(v: Vector<t>, i: t): Vector<t> = (
   if v.length >= v.capacity {
      let new-cap = if v.capacity == 0 {
         4_u64
      } else {
         (v.length >> 1_u32) + v.length # this is mul 1.5, not 3
      };
      v = v.realloc(new-cap as U64);
   };
   v.data[v.length as U64] = i;
   v._length = v._length + 1_u32;
   v
);

let .into(l: List<t>, out: Type<Vector<t>>): Vector<t> = (
   let v = mk-vector(type(t), l.length);
   for i in l {
      v = v.push(i);
   };
   v
);

## shrinks the vector if it has way too many elements. shouldn't be called manually
let .shrink(v: Vector<t>): Vector<t> = (
    let too-much = v.capacity - v.length;
    let minimum = (v.length >> 1) + v.length; # mul 1.5
    if too-much > minimum {
       v = v.realloc(minimum);
    };
    v
);

## INPUT VECTOR GETS POISONED
let .remove-front(v: Vector<t>, num: U64): Vector<t> = (
    if num > v.length() {
        fail("tried to remove \{num} elements from vector, but only have \{v.length()}");
    };

    let i = num;
    while i < v.length() {
        v[i-num] = v[i];
        i = i + 1;
    };
    v._length = v._length - (num as U32);

    v.shrink();
);

## INPUT VECTOR GETS POISONED
let .remove-back(v: Vector<t>, num: U64): Vector<t> = (
    if num > v.length() {
        fail("tried to remove \{num} elements from vector, but only have \{v.length()}");
    };

    v._length = v._length - (num as U32);

    v.shrink();
);

## INPUT VECTOR GETS POISONED
let .pop-front(v: Vector<t>): Tuple<t, Vector<t>> = (
    if v.length() == 0 {
        fail("Tried to pop from empty Vector.");
    };

    let x = v[0];
    v = v.remove-front(1);

    Tuple { x, v }
);

## INPUT VECTOR GETS POISONED
let .pop(v: Vector<t>): Tuple<t, Vector<t>> = (
    if v.length() == 0 {
        fail("Tried to pop from empty Vector.");
    };

    let lasti = v.length - 1;
    let last = v[lasti as U64];
    v = v.remove-back(1);

    Tuple { last, v }
);

let $"[]"( v: Vector<t>, i: U64 ): t = (
   if i >= (v.length as U64) {
      fail("Vector Index Out of Bounds");
   };
   v.data[i]
);

let $"+"( vl: Vector<t>, vr: Vector<t> ): t = (
   let v = mk-vector(type(t), vl.length + vr.length);
   let vi = 0_u64;
   while vi < (vl.length as U64) { v = v.push(vl[vi]); vi = vi + 1; };
   vi = 0_u64;
   while vi < (vr.length as U64) { v = v.push(vr[vi]); vi = vi + 1; };
   v
);

let $"set[]"( v: Vector<t>, i: U64, val: t ): Nil = (
   if i >= v.length {
      fail("Vector Index Out of Bounds");
   };
   v.data[i] = val; 
   ()
);

let .reverse-self(v: Vector<t>): Nil = (
   let i = 0_u64;
   while i < (v.length >> 1) {
      let ri = v.length - i - 1;
      let temp = v[i];
      v[i] = v[ri];
      v[ri] = temp;
      i = i + 1;
   };
);

let .sort(v: Vector<t>): Vector<t> = (
   let n = v.length;
   let i = 0_u64;
   while i < n - 1_u64 {
      let swapped = 0;
      let j = 0;
      while j < n - i - 1_u64 {
         if v[j + 1_u64] < v[j] {
            let tmp = v[j];
            v[j] = v[j + 1_u64];
            v[j + 1_u64] = tmp;
            swapped = 1;
         };
         j = j + 1_u64;
      };
      i = i + 1_u64;
      if not(swapped) {
         i = n;
      };
   };
   v
);

let print(v: Vector<x>): Nil = (
   let vi = 0_u64;
   print(c"[");
   while vi < v.length {
      if vi > 0_u64 then print(c",");
      print(v.data[vi]);
      vi = vi + 1_u64;
   };
   print(c"]");
);

## does not destory input vec
let .into(in: Vector<U8>, res: Type<CString>): CString = (
   let out = mk-vector(type(U8), in.length+1);
   let i = 0_u64;
   while i < in.length { out = out.push(in[i]); i = i + 1; };
   out = out.push(0_u8);
   ((out.data as U8[]) as CString)
);

## does not destory input vec
let .into(self: Vector<U8>, res: Type<SmartString>): SmartString = (
   intern(self.into(type(CString)))
);

let to-smart-string(self: Vector<x>): String = (
   let rval = "[";
   let has-item = false;
   for vector v in self {
      if has-item then rval = rval + ",";
      has-item = true;
      rval = rval + v.into(type(String));
   };
   rval + "]"
);

let .ptr(v: Vector<t>, toelem: U64): t[] = (
   if toelem >= v.capacity {
      fail("Vector.ptr() index out of capacity bounds");
   };
   ((v.data as U64) + sizeof(t) * toelem) as t[]
);
