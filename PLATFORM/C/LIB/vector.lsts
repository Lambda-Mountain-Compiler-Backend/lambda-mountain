
type Vector<t> = Vector { data: t[], length: U64, capacity: U64 };

let mk-vector(type: Type<t>, capacity: U64): Vector<t> = (
   let data-sz = sizeof(t) * capacity;
   Vector { (malloc(data-sz) as t[]), 0_u64, capacity }
);

let .push(v: Vector<t>, i: t): Vector<t> = (
   if v.length >= v.capacity {
      fail("Vector Overflow during .push")
   };
   v.data[v.length] = i;
   v.length = v.length + 1_u64;
   v
);

let .to-vector(l: List<t>): Vector<t> = (
   let v = mk-vector(type(t), l.length);
   for i in l {
      v = v.push(i);
   };
   v
);

let $"[]"( v: Vector<t>, i: U64 ): t = (
   if i >= v.length {
      fail("Vector Index Out of Bounds");
   };
   v.data[i]
);

let $"+"( vl: Vector<t>, vr: Vector<t> ): t = (
   let v = mk-vector(type(t), vl.length + vr.length);
   let vi = 0_u64;
   while vi < vl.length { v = v.push(vl[vi]); };
   vi = 0_u64;
   while vi < vr.length { v = v.push(vr[vi]); };
   v
);

let $"set[]"( v: Vector<t>, i: U64, val: t ): Nil = (
   if i >= v.length {
      fail("Vector Index Out of Bounds");
   };
   v.data[i] = val; 
   ()
);

let .sort(v: Vector<t>): Vector<t> = (
   let n = v.length;
   let i = 0_u64;
   while i < n - 1_u64 {
      let swapped = 0;
      let j = 0;
      while j < n - i - 1_u64 {
         if v[j + 1_u64] < v[j] {
            let tmp = v[j];
            v[j] = v[j + 1_u64];
            v[j + 1_u64] = tmp;
            swapped = 1;
         };
         j = j + 1_u64;
      };
      i = i + 1_u64;
      if not(swapped) {
         i = n;
      };
   };
   v
);

let print(v: Vector<x>): Nil = (
   let vi = 0_u64;
   print(c"[");
   while vi < v.length {
      if vi > 0_u64 then print(c",");
      print(v.data[vi]);
      vi = vi + 1_u64;
   };
   print(c"]");
);

let $"=="(a: Vector<t>, b: Vector<t>): U64 = (
    let al = a.length();
    let bl = b.length();
    if al == bl {
        let i = 0_u64;
        let ok = 1_u64;
        while i < al {
            if a[i] != b[i] {
                ok = 0_u64;
                i = al; # break
            } else {
                i = i + 1;
            }
        };
        ok
    } else {
        0_u64
    }
);
