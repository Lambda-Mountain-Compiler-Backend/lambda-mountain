
fragment type I64; size I64 8; atom suffix I64 _i64;

(declare-binop( != I64 I64 U64 ( '\[_l x '!=_l y '\]_l ) ));
(declare-binop( == I64 I64 U64 ( '\[_l x '==_l y '\]_l ) ));
(declare-binop( < I64 I64 U64 ( '\[_l x '<_l y '\]_l ) ));
(declare-binop( <= I64 I64 U64 ( '\[_l x '<=_l y '\]_l ) ));
(declare-binop( > I64 I64 U64 ( '\[_l x '>_l y '\]_l ) ));
(declare-binop( >= I64 I64 U64 ( '\[_l x '>=_l y '\]_l ) ));

(declare-binop( + I64 I64 I64 ( '\[_l x '+_l y '\]_l ) ));
(declare-binop( - I64 I64 I64 ( '\[_l x '-_l y '\]_l ) ));
(declare-binop( ^ I64 I64 I64 ( '\[_l x '^_l y '\]_l ) ));
(declare-binop( / I64 I64 I64 ( '\[_l x '/_l y '\]_l ) ));
(declare-binop( % I64 I64 I64 ( '\[_l x '%_l y '\]_l ) ));
(declare-binop( * I64 I64 I64 ( '\[_l x '*_l y '\]_l ) ));

(declare-unop( not I64 U64 ( '\[!_l x '\]_l ) ));

(declare-unop( into-branch-conditional I64 BranchConditional ( x ) ));

print := λ(: x I64). (: (
   (if (<( x 0_i64 )) (
      (print '-_s)
      (set x (-( 0_i64 x )))
   ) ())
   (print (as x U64))
) Nil);

to-string := λ(: i I64). (: (
   (let sign SNil)
   (let r SNil)
   (if (<( i 0_i64 )) (
      (set sign (SAtom '-_s))
      (set i (-( 0_i64 i )))
   ) ())
   (let c 0_u8)
   (while (not(==( i 0_i64 ))) (
      (let ci (as (+( (%( (as i U64) 10_u64 )) 48_u64 )) U8))
      (set i (/( i 10_i64 )))
      (set r (SCons(
         (close(SAtom(clone-rope ci)))
         (close r)
      )))
   ))
   (if (non-zero r) () (
      (set r (SAtom '0_s))
   ))
   (clone-rope(SCons( (close sign) (close r) )))
) String);
