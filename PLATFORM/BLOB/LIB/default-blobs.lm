
:expression := λ: Blob(: x Any). (: () L);
:program := λ: Blob(: x Any). (: () L);
:frame := λ: Blob(: x Any). (: () L);
:unframe := λ: Blob(: x Any). (: () L);
:text := λ: Blob(: x Any). (: () L);
:data := λ: Blob(: x Any). (: () L);
:del := λ: Blob(: x Any). (: () L);

cdecl::args-size := λ: Blob . (: () L);

== := λ: Blob(: l L)(: r L). (: () L);
!= := λ: Blob(: l L)(: r L). (: () L);
< := λ: Blob(: l L)(: r L). (: () L);
<= := λ: Blob(: l L)(: r L). (: () L);
> := λ: Blob(: l L)(: r L). (: () L);
>= := λ: Blob(: l L)(: r L). (: () L);

* := λ: Blob(: l L)(: r L). (: () L);
/ := λ: Blob(: l L)(: r L). (: () L);
% := λ: Blob(: l L)(: r L). (: () L);
+ := λ: Blob(: l L)(: r L). (: () L);
- := λ: Blob(: l L)(: r L). (: () L);

range := λ: Blob(: hi L). (: () L);
range := λ: Blob(: lo L)(: hi L). (: () L);

align := λ: Blob(: hi L). (: () L);
