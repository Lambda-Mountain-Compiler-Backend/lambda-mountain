
parse-type := Î»(: tt String). (: (
   (let is-vararg False_u8)
   (if (.has-suffix( tt '..._s )) (
      (set tt (.remove-suffix( tt '..._s )))
      (set is-vararg True_u8)
   ) ())
   (let depth 0_u64)
   (let buff (SNil()))
   (let base-type (t1 'Nil_s))
   (while (head-string tt) (
      (match (head-string tt) (
         ()
         ( 60_u8 (set depth (+( depth 1_u64 )) ))
         ( 62_u8 (set depth (-( depth 1_u64 )) ))
         ( 91_u8 (set depth (+( depth 1_u64 )) ))
         ( 93_u8 (set depth (-( depth 1_u64 )) ))
         ( _ () )
      ))
      (if (==( depth 0_u64 )) (
         (if (==( (head-string tt) 43_u8 )) (
            (match base-type (
               ()
               ( (TGround( 'Nil_s LEOF )) (
                  (let bt (parse-type-single (clone-rope buff)))
                  (set base-type bt)
               ))
               ( _ (
                  (set base-type (&&(
                     base-type
                     (parse-type-single (clone-rope buff))
                  )))
               ))
            ))
            (set buff (SNil()))
         ) (
            (set buff (SCons(
               (close buff)
               (close (SAtom (clone-rope (head-string tt))))
            )))
         ))
      ) (
         (set buff (SCons(
            (close buff)
            (close (SAtom (clone-rope (head-string tt))))
         )))
      ))
      (set tt (tail-string tt))
   ))
   (if (non-zero buff) (
      (match base-type (
         ()
         ( (TGround( 'Nil_s LEOF )) (
            (let bt (parse-type-single (clone-rope buff)))
            (set base-type bt)
         ))
         ( _ (
            (set base-type (&&(
               base-type
               (parse-type-single (clone-rope buff))
            )))
         ))
      ))
   ) ())
   (if (==( is-vararg True_u8 )) (
      (set base-type (TGround( '..._s (close(cons(
         base-type (: LEOF List<Type>)
      ))))))
   ) ())
   base-type
) Type);

