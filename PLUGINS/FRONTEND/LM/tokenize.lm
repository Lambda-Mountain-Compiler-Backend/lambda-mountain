
already-tokenized := (: LEOF List<String>);
is-already-tokenized := λ(: fp String). (: (
   (let r 0_u64)
   (for-each (fpt in (.unsafe-iter already-tokenized)) (
      (if (==( fp fpt )) (set r 1_u64) ())
   ))
   r
) U64);

tokenize := λ(: fp String)(: text String). (: (
   (let ast-tokenized-program (: LEOF List<Token>))
   (let in_comment False_u8)
   (let buffer SNil)
   (let current-line 1_u64)
   (let current-column 1_u64)
   (let token-line 1_u64)
   (let token-column 1_u64)
   (let parens-counter 0_i64)
   (while (head-string text) (
      (match (head-string text) (
         ()
         ( '\n_u8 (
            (set current-line (+( current-line 1_u64 )))
            (set current-column 1_u64)
         ))
         ( _ (
            (set current-column (+( current-column 1_u64 )))
         ))
      ))
      (match (head-string text) (
         ()
         ( \o_u8 (
            (if (non-zero buffer) (
               (let tk (Token( (intern(clone-rope buffer)) (clone-rope buffer) (iuid()) (SourceLocation( fp token-line token-column )) )))
               (set ast-tokenized-program (LCons(
                  tk
                  (close ast-tokenized-program)
               )))
               (set buffer SNil)
            ) ())
            (set token-line current-line)
            (set token-column current-column)
            (set in_comment True_u8)
         ))
         ( \n_u8 (
            (if (non-zero buffer) (
               (let tk (Token( (intern(clone-rope buffer)) (clone-rope buffer) (iuid()) (SourceLocation( fp token-line token-column )) )))
               (set ast-tokenized-program (LCons(
                  tk
                  (close ast-tokenized-program)
               )))
               (set buffer SNil)
            ) ())
            (set token-line current-line)
            (set token-column current-column)
            (set in_comment False_u8)
         ))
         ( \t_u8 (
            (if (non-zero buffer) (
               (let tk (Token( (intern(clone-rope buffer)) (clone-rope buffer) (iuid()) (SourceLocation( fp token-line token-column )) )))
               (set ast-tokenized-program (LCons(
                  tk
                  (close ast-tokenized-program)
               )))
               (set buffer SNil)
            ) ())
            (set token-line current-line)
            (set token-column current-column)
         ))
         ( \s_u8 (
            (if (non-zero buffer) (
               (let tk (Token( (intern(clone-rope buffer)) (clone-rope buffer) (iuid()) (SourceLocation( fp token-line token-column )) )))
               (set ast-tokenized-program (LCons(
                  tk
                  (close ast-tokenized-program)
               )))
               (set buffer SNil)
            ) ())
            (set token-line current-line)
            (set token-column current-column)
         ))

         ( \[_u8 (if in_comment () (
            (if (non-zero buffer) (
               (let tk (Token( (intern(clone-rope buffer)) (clone-rope buffer) (iuid()) (SourceLocation( fp token-line token-column )) )))
               (set ast-tokenized-program (LCons(
                  tk
                  (close ast-tokenized-program)
               )))
               (set buffer SNil)
            ) ())
            (set parens-counter (+( parens-counter 1_i64 )))
            (let tk-2 (Token( (intern '\[_s) '\[_s (iuid()) (SourceLocation( fp token-line token-column )) )))
            (set ast-tokenized-program (LCons(
               tk-2
               (close ast-tokenized-program)
            )))
            (set token-line current-line)
            (set token-column current-column)
         )))
         ( \]_u8 (if in_comment () (
            (if (non-zero buffer) (
               (let tk (Token( (intern(clone-rope buffer)) (clone-rope buffer) (iuid()) (SourceLocation( fp token-line token-column )) )))
               (set ast-tokenized-program (LCons(
                  tk
                  (close ast-tokenized-program)
               )))
               (set buffer SNil)
            ) ())
            (set parens-counter (-( parens-counter 1_i64 )))
            (let tk-2 (Token( (intern '\]_s) '\]_s (iuid()) (SourceLocation( fp token-line token-column )) )))
            (set ast-tokenized-program (LCons(
               tk-2
               (close ast-tokenized-program)
            )))
         )))
         ( \`_u8 (if in_comment () (
            (if (non-zero buffer) (
               (let tk (Token( (intern(clone-rope buffer)) (clone-rope buffer) (iuid()) (SourceLocation( fp token-line token-column )) )))
               (set ast-tokenized-program (LCons(
                  tk
                  (close ast-tokenized-program)
               )))
               (set buffer SNil)
            ) ())
            (let tk-2 (Token( (intern '\`_s) '\`_s (iuid()) (SourceLocation( fp token-line token-column )) )))
            (set ast-tokenized-program (LCons(
               tk-2
               (close ast-tokenized-program)
            )))
         )))
         ( \:_u8 (if in_comment () (
            (if (non-zero buffer) (
               (let tk (Token( (intern(clone-rope buffer)) (clone-rope buffer) (iuid()) (SourceLocation( fp token-line token-column )) )))
               (set ast-tokenized-program (LCons(
                  tk
                  (close ast-tokenized-program)
               )))
               (set buffer SNil)
            ) ())
            (let tk-2 (Token( (intern '\:_s) '\:_s (iuid()) (SourceLocation( fp token-line token-column )) )))
            (set ast-tokenized-program (LCons(
               tk-2
               (close ast-tokenized-program)
            )))
         )))

         ( c (if in_comment () (
            (set buffer (SCons(
               (close buffer)
               (close (SAtom (clone-rope c)))
            )))
            (if (==( '\l_s (clone-rope buffer) )) (
               (let tk (Token( (intern '\l_s) '\l_s (iuid()) (SourceLocation( fp token-line token-column )) )))
               (set ast-tokenized-program (LCons(
                  tk
                  (close ast-tokenized-program)
               )))
               (set buffer SNil)
           ) ())
         )))
      ))
      (set text (tail-string text))
   ))

   (if (non-zero buffer) (
      (let tk (Token( (intern(clone-rope buffer)) (clone-rope buffer) (iuid()) (SourceLocation( fp token-line token-column )) )))
      (set ast-tokenized-program (LCons(
         tk
         (close ast-tokenized-program)
      )))
   ) ())

   (if (==( parens-counter 0_i64 )) () (
      (print 'Hanging\sParentheses\sIn\sFile:\s_s)
      (print fp)
      (print '\sCount:\s_s)
      (print parens-counter)
      (print '\n_s)
      (exit 1_u64)
   ))

   (.reverse ast-tokenized-program)
) List<Token>);

