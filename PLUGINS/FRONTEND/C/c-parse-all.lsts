
let c-parse-all(fps: List<CString>): Nil = (
   index-c-type(untern( "__attribute__" ));
   index-c-type(untern( "__asm__" ));
   index-c-type(untern( "__extension__" ));
   index-c-type(untern( "__restrict" ));
   index-c-type(untern( "__inline" ));
   index-c-type(untern( "volatile" ));
   index-c-type(untern( "static" ));
   index-c-type(untern( "extern" ));
   index-c-type(untern( "struct" ));
   index-c-type(untern( "union" ));
   index-c-type(untern( "enum" ));
   index-c-type(untern( "const" ));
   index-c-type(untern( "signed" ));
   index-c-type(untern( "unsigned" ));
   index-c-type(untern( "void" ));
   index-c-type(untern( "char" ));
   index-c-type(untern( "short" ));
   index-c-type(untern( "int" ));
   index-c-type(untern( "long" ));
   index-c-type(untern( "float" ));
   index-c-type(untern( "double" ));
   index-c-type(untern( "_Float128" ));
   index-c-type(untern( "__builtin_va_list" ));
   index-c-type(untern( "*" ));
   index-c-type(untern( "..." ));
   index-c-type(untern( "[" ));
   index-c-type(untern( "]" ));

   let tmp = intern(mktemp(untern("/tmp/lm.tmp.XXXXXX") as U8[]) as CString);

   let cmd = "cpp /dev/null -o " + tmp;
   cmd = cmd + " -U__USE_MISC";
   cmd = cmd + " -D__STRICT_ANSI__";
   cmd = cmd + " -D__LM__";
   for fp in fps.unsafe-iter() {
      cmd = cmd + " -include \"" + intern(fp) + "\"";
   };

   if system(untern(cmd) as U8[]) != 0 {
      fail("cpp failed. command: \"" + cmd + "\"");
   };

   c-parse(c-tokenize(read-file(untern(tmp))));
);
