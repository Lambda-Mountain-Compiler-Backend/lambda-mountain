
c-type-index := (: (HashtableEq( 0_u64 0_u64 (as 0_u64 Tuple<String,U64>[]) )) HashtableEq<String,U64>);

index-c-type := λ(: s String). (: (
   (set c-type-index (.bind( c-type-index s 1_u64 )))
) Nil);

c-parse := λ(: tokens List<String>). (: (
   (while (non-zero tokens) (
      (let ht (head tokens))
      (if (==( (head tokens) '\:_s )) (set tokens (tail tokens)) ())
      (if (==( (head tokens) 'typedef_s )) (set tokens (c-parse-typedef tokens)) ())
      (if (c-is-typename(head tokens)) (set tokens (c-parse-declaration tokens)) ())
      (if (==( (as (head tokens) U64) (as ht U64) )) (
         (print 'Unrecognized\sTop\sLevel\sStatement\s_s)(print ht)(print '\n_s)(exit 1_u64)
      ) ())
   ))
) Nil);

c-parse-typedef := λ(: tokens List<String>). (: (
   (print 'TODO\sParse\sTypedef\n_s)(exit 1_u64)
   tokens
) List<String>);

c-parse-declaration := λ(: tokens List<String>). (: (
   (print 'TODO\sParse\sDeclaration\n_s)(exit 1_u64)
   tokens
) List<String>);

c-is-typename := λ(: s String). (: (
   (.lookup( c-type-index s 0_u64 ))
) U64);
