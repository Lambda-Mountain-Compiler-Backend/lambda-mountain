
c-type-index := (: (HashtableEq( 0_u64 0_u64 (as 0_u64 Tuple<String,U64>[]) )) HashtableEq<String,U64>);

index-c-type := λ(: s String). (: (
   (set c-type-index (.bind( c-type-index s 1_u64 )))
) Nil);

c-parse := λ(: tokens List<String>). (: (
   (while (non-zero tokens) (
      (let ht (head tokens))
      (if (==( (head tokens) '\:_s )) (set tokens (tail tokens)) ())
      (if (==( (head tokens) 'typedef_s )) (set tokens (c-parse-typedef tokens)) ())
      (if (c-is-typename(head tokens)) (set tokens (c-parse-declaration tokens)) ())
      (if (is( (head tokens) ht )) (
         (print 'Unrecognized\sTop\sLevel\sStatement\s_s)(print ht)(print '\n_s)(exit 1_u64)
      ) ())
   ))
) Nil);

c-dump-braces := λ(: tokens List<String>). (: (
   (let original-tokens tokens)
   (set tokens (tail tokens))
   (let depth 1_u64)
   (while (&&( (non-zero tokens) (>( depth 0_u64 )) )) (
      (if (==( (head tokens) '{_s )) (set depth (+( depth 1_u64 ))) ())
      (if (==( (head tokens) '}_s )) (set depth (-( depth 1_u64 ))) ())
      (set tokens (tail tokens))
   ))
   (if (>( depth 0_u64 )) (
      (print 'Inequal\sBraces\s_s)(print original-tokens)(print '\n_s)(exit 1_u64)
   ) ())
   tokens
) List<String>);

c-take-type := λ(: tokens List<String>). (: (
   (let r (: LEOF List<String>))
   (while (&&( (non-zero tokens) (c-is-typename(head tokens)) )) (
      (if (==( (head tokens) 'struct_s )) (
         (set r (cons( 'struct_s r )))
         (set tokens (tail tokens))
      ) ())
      (if (==( (head tokens) 'extern_s )) () (
         (set r (cons( (head tokens) r )))
      ))
      (set tokens (tail tokens))
   ))
   (Tuple( (reverse r) tokens ))
) Tuple<List<String>,List<String>>);

c-parse-typedef := λ(: tokens List<String>). (: (
   (let original-tokens tokens)
   (set tokens (tail tokens)) # remove typedef token
   (if (==( (head tokens) 'struct_s )) (
      (set tokens (tail tokens))
      (if (==( (head tokens) '{_s )) (
         (set tokens (c-dump-braces tokens))
      ) (
         (set tokens (tail tokens))
         (if (==( (head tokens) '{_s )) (
            (set tokens (c-dump-braces tokens))
         ) ())
      ))
   ) (
      (while (&&( (non-zero tokens) (c-is-typename(head tokens)) )) (
         (set tokens (tail tokens))
      ))
   ))
   (if (non-zero tokens) (
      (print 'Typedef\s_s)(print (head tokens))(print '\n_s)
      (index-c-type(head tokens))
      (set tokens (tail tokens))
   ) ())
   (if (non-zero tokens) (
      (if (==( (head tokens) '\:_s )) (set tokens (tail tokens)) (
         (print 'Expected\sSemicolon\sIn\sTypedef_s)
         (c-print-token-sequence( original-tokens tokens ))
         (print '\n_s)(exit 1_u64)
      ))
   ) (
      (print 'Malformed\sTypedef\s_s)(print original-tokens)(print '\n_s)(exit 1_u64)
   ))
   tokens
) List<String>);

c-print-token-sequence := λ(: from List<String>)(: to List<String>). (: (
   (while (not(is( (head from) (head to) ))) (
      (print '\s_s)(print (head from))
      (set from (tail from))
   ))
) Nil);

c-mangle-typename := λ(: tokens List<String>). (: (
   (.join( (cons( 'C_s tokens )) '__s ))
) String);

c-parse-declaration := λ(: tokens List<String>). (: (
   (let original-tokens tokens)
   (let rt (c-take-type tokens))
   (let return-type (c-mangle-typename(.first rt)))
   (set tokens (.second rt))
   (let name '_s)
   (if (&&( (non-zero tokens) (c-is-identifier(head tokens)) )) (
      (set name (head tokens))
      (set tokens (tail tokens))
   ) (
      (print 'Expected\sDeclaration\sIdentifier\sAfter\sType_s)
      (c-print-token-sequence( original-tokens (tail tokens) ))
      (exit 1_u64)
   ))
   (print 'TODO\sParse\sDeclaration\n_s)(print return-type)(print '\s_s)(print name)(exit 1_u64)
   tokens
) List<String>);

c-is-typename := λ(: s String). (: (
   (let r (.lookup( c-type-index s 0_u64 )))
   (if (==( (head-string s) 48_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 49_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 50_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 51_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 52_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 53_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 54_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 55_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 56_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 57_u8 )) (set r 1_u64) ())
   r
) U64);

c-is-identifier := λ(: s String). (: (
   (let r (.lookup( c-type-index s 0_u64 )))
   (if (==( (head-string s) 65_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 66_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 67_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 68_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 69_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 70_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 71_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 72_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 73_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 74_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 75_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 76_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 77_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 78_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 79_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 80_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 81_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 82_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 83_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 84_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 85_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 86_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 87_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 88_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 89_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 90_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 95_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 97_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 98_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 99_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 100_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 101_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 102_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 103_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 104_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 105_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 106_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 107_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 108_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 109_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 110_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 111_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 112_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 113_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 114_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 115_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 116_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 117_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 118_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 119_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 120_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 121_u8 )) (set r 1_u64) ())
   (if (==( (head-string s) 122_u8 )) (set r 1_u64) ())
   r
) U64);
