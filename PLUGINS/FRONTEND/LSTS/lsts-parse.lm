
lsts-parse-head :=  λ(: tokens List<Token>). (: (
   (let r '_s)
   (match tokens (
      ()
      ( (LCons( (Token( tk _ _ )) _ )) (set r tk) )
      ( _ () )
   ))
   r
) String);

lsts-parse := λ(: tokens List<Token>). (: (
   (while (non-zero tokens) (
      (let prev-tokens tokens)
      (if (==( (lsts-parse-head tokens) 'let_s )) (
         (set tokens (lsts-parse-let tokens))
      ) (
         (if (==( (lsts-parse-head tokens) 'import_s )) (
            (set tokens (tail tokens))
            (let path SNil)
            (while (&&( (non-zero tokens) (!=( (lsts-parse-head tokens) '\:_s )) )) (
               (set path (+( path (SAtom(lsts-unwrap-identifier(lsts-parse-head tokens))) )))
               (set tokens (tail tokens))
            ))
            (lsts-parse-expect( '\:_s tokens ))(set tokens (tail tokens))
            (frontend(clone-rope path))
         ) (
            (let term-rest (lsts-parse-small-expression tokens)) # small expression does not consume semicolons
            (let term (.first term-rest))
            (set tokens (.second term-rest))
            (set ast-parsed-program (Seq(
               (close ast-parsed-program)
               (close term)
            )))
            (lsts-parse-expect( '\:_s tokens ))(set tokens (tail tokens))
         ))
      ))
      (if (is( prev-tokens tokens )) (
         (print 'Unrecognized\sToken\sDuring\sParsing\s_s)(print(lsts-parse-head tokens))(print '\n_s)(exit 1_u64)
      ) ())
   ))
) Nil);

lsts-unwrap-identifier := λ(: ident String). (: (
   (if (.has-prefix( ident '$"_s )) (
      (set ident (.remove-prefix( ident '$"_s )))
      (set ident (.remove-suffix( ident '"_s )))
   ) ())
   ident
) String);

lsts-parse-expect := λ(: expect String)(: tokens List<Token>). (: (
   (if (!=( (lsts-parse-head tokens) expect )) (
      (print 'Parse\sError:\sExpected\s_s)(print expect)(print '\sat\s_s)
      (match tokens (
         ()
         ( (LCons( t _ )) ((print (.location t))(print '\n_s)))
         ( _ (print 'End\sOf\sFile\n_s) )
      ))
      (if (!=( (lsts-parse-head tokens) '_s )) (
         (print 'Found\s"_s)(print (lsts-parse-head tokens))(print '"\n_s)
         (print 'Tokens\sHead:\s_s)
         (let c 0_u64)
         (while (&&( (non-zero tokens) (<( c 10_u64 )) )) (
            (print (.key(head tokens)))(print ',_s)
            (set tokens (tail tokens))
            (set c (+( c 1_u64 )))
         ))
         (print '\n_s)
      ) ())
      (exit 1_u64)
   ) ())
) Nil);

lsts-parse-expect := λ(: expect String)(: b U64)(: tokens List<Token>). (: (
   (if (not b) (
      (print 'Parse\sError:\sExpected\s_s)(print expect)(print '\sat\s_s)
      (match tokens (
         ()
         ( (LCons( t _ )) ((print (.location t))(print '\n_s)))
         ( _ (print 'End\sOf\sFile\n_s) )
      ))
      (if (!=( (lsts-parse-head tokens) '_s )) (
         (print 'Found\s"_s)(print (lsts-parse-head tokens))(print '"\n_s)
      ) ())
      (exit 1_u64)
   ) ())
) Nil);

lsts-has-assign := λ(: tokens List<Token>). (: (
   (let depth 0_i64)
   (let has-assign 0_u64)
   (while (non-zero tokens) (
      (if (==( (lsts-parse-head tokens) '[_s )) (set depth (+( depth 1_i64 ))) ())
      (if (==( (lsts-parse-head tokens) '{_s )) (set depth (+( depth 1_i64 ))) ())
      (if (==( (lsts-parse-head tokens) '\[_s )) (set depth (+( depth 1_i64 ))) ())
      (if (==( (lsts-parse-head tokens) ']_s )) (set depth (-( depth 1_i64 ))) ())
      (if (==( (lsts-parse-head tokens) '}_s )) (set depth (-( depth 1_i64 ))) ())
      (if (==( (lsts-parse-head tokens) '\]_s )) (set depth (-( depth 1_i64 ))) ())
      (if (&&( (==( (lsts-parse-head tokens) '\:_s )) (<=( depth 0_i64 )) )) (
         (set tokens (: LEOF List<Token>))
      ) ())
      (if (&&( (==( (lsts-parse-head tokens) ',_s )) (<=( depth 0_i64 )) )) (
         (set tokens (: LEOF List<Token>))
      ) ())
      (if (&&( (==( (lsts-parse-head tokens) '=_s )) (==( depth 0_i64 )) )) (
         (set has-assign 1_u64)
         (set tokens (: LEOF List<Token>))
      ) ())
      (if (non-zero tokens) (set tokens (tail tokens)) ())
      (if (<( depth 0_i64 )) (
         (set tokens (: LEOF List<Token>))
      ) ())
   ))
   has-assign
) U64);

lsts-substitute-type-aliases := λ(: s String). (: (
   (if (==( s 'String_s )) (set s 'SmartString_s) ())
   (if (==( s 'CString_s )) (set s 'String_s) ())
   s
) String);

lsts-parse-type := λ(: tokens List<Token>). (: (
   (let base SNil)
   (let depth 0_u64)
   (if (==( (lsts-parse-head tokens) '\[_s )) (
      (set base (SAtom 'Tuple<_s))(set tokens (tail tokens))
      (set depth 1_u64)
   ) (
      (set base (SAtom(lsts-substitute-type-aliases(lsts-parse-head tokens))))(set tokens (tail tokens))
   ))
   (if (||( (==( (lsts-parse-head tokens) '<_s )) (==( (lsts-parse-head tokens) '[_s )) )) (
      (set base (+( base (SAtom(lsts-substitute-type-aliases(lsts-parse-head tokens))) )))
      (set tokens (tail tokens))
      (set depth 1_u64)
   ) ())
   (while (>( depth 0_u64 )) (
      (while (&&( (non-zero tokens) (>( depth 0_u64 )) )) (
         (if (||( (||( (==( (lsts-parse-head tokens) '\[_s )) (==( (lsts-parse-head tokens) '[_s )) )) (==( (lsts-parse-head tokens) '<_s )) )) (
            (if (==( (lsts-parse-head tokens) '\[_s )) (
               (set base (+( base (SAtom 'Tuple<_s) )))
            ) (
               (set base (+( base (SAtom(lsts-parse-head tokens)) )))
            ))
            (set depth (+( depth 1_u64 )))
         ) (
            (if (||( (||( (==( (lsts-parse-head tokens) '\]_s )) (==( (lsts-parse-head tokens) ']_s )) )) (==( (lsts-parse-head tokens) '>_s )) )) (
               (if (==( (lsts-parse-head tokens) '\]_s )) (
                  (set base (+( base (SAtom '>_s) )))
               ) (
                  (set base (+( base (SAtom(lsts-parse-head tokens)) )))
               ))
               (set depth (-( depth 1_u64 )))
            ) (
               (set base (+( base (SAtom(lsts-substitute-type-aliases(lsts-parse-head tokens))) )))
            ))
         ))
         (set tokens (tail tokens))
      ))
   ) ())
   (Tuple( (parse-type(clone-rope base)) tokens ))
) Tuple<Type,List<Token>>);

lsts-parse-let := λ(: tokens List<Token>). (: (
   (lsts-parse-expect( 'let_s tokens )) (set tokens (tail tokens))
   (lsts-parse-expect( 'Identifier_s (||( (lsts-is-ident-head(lsts-parse-head tokens)) (==( (lsts-parse-head tokens) '._s )) )) tokens ))
   (let name (lsts-parse-head tokens)) (set tokens (tail tokens))
   (if (==( name '._s )) (
      (lsts-parse-expect( 'Identifier_s (lsts-is-ident-head(lsts-parse-head tokens)) tokens ))
      (set name (+( name (lsts-parse-head tokens) ))) (set tokens (tail tokens))
   ) ())
   (set name (lsts-unwrap-identifier name))
   (let args-list ASTEOF)
   (let return-type TAny)
   (if (==( (lsts-parse-head tokens) '\[_s )) (
      (set args-list ASTNil)
      (lsts-parse-expect( '\[_s tokens )) (set tokens (tail tokens))
      (while (!=( (lsts-parse-head tokens) '\]_s )) (
         (lsts-parse-expect( 'Identifier_s (lsts-is-ident-head(lsts-parse-head tokens)) tokens ))
         (let arg-name (head tokens)) (set tokens (tail tokens))
         (lsts-parse-expect( ':_s tokens )) (set tokens (tail tokens))
         (let type-rest (lsts-parse-type( tokens )))
         (let arg-type (.first type-rest))
         (set tokens (.second type-rest))
         (if (==( (lsts-parse-head tokens) ',_s )) (set tokens (tail tokens)) (
            (lsts-parse-expect( '\]_s tokens ))
         ))
         (if (is( args-list ASTNil )) (
            (set args-list (App(
               (close(Lit( ':_s (token::new ':_s) )))
               (close(App(
                  (close(Var( (.key arg-name) arg-name )))
                  (close(AType arg-type))
               )))
            )))
         ) (
            (set args-list (App(
               (close args-list)
               (close(App(
                  (close(Lit( ':_s (token::new ':_s) )))
                  (close(App(
                     (close(Var( (.key arg-name) arg-name )))
                     (close(AType arg-type))
                  )))
               )))
            )))
         ))
      ))
      (lsts-parse-expect( '\]_s tokens )) (set tokens (tail tokens))
      (lsts-parse-expect( ':_s tokens )) (set tokens (tail tokens))
      (let rtype-rest (lsts-parse-type( tokens )))
      (set return-type (.first rtype-rest))
      (set tokens (.second rtype-rest))
   ) ())
   (lsts-parse-expect( '=_s tokens )) (set tokens (tail tokens))
   (let rhs-rest (lsts-parse-small-expression tokens))
   (let return-term (.first rhs-rest))
   (if (non-zero args-list) (
      (set return-term (App(
         (close(Lit( ':_s (token::new ':_s) )))
         (close(App(
            (close return-term)
            (close(AType return-type))
         )))
      )))
   ) ())
   (set tokens (.second rhs-rest))
   (lsts-parse-expect( '\:_s tokens )) (set tokens (tail tokens))
   (if (non-zero args-list) (
      (set ast-parsed-program (Seq(
         (close ast-parsed-program)
         (close(Glb( (token::new name) (close(Abs(
            (close args-list)
            (close return-term)
            TAny
         ))) )))
      )))
   ) (
      (set ast-parsed-program (Seq(
         (close ast-parsed-program)
         (close(Glb( (token::new name) (close return-term) )))
      )))
   ))
   tokens
) List<Token>);

lsts-parse-small-expression := λ(: tokens List<Token>). (: (
   (let base ASTEOF)
   (if (==( (lsts-parse-head tokens) 'if_s )) (scope(
      (let loc (.location(head tokens)))
      (set tokens (tail tokens))
      (let c-rest (lsts-parse-andor tokens))
      (let c (.first c-rest))
      (set tokens (.second c-rest))
      (lsts-parse-expect( 'then_s tokens ))(set tokens (tail tokens))
      (let t ASTNil)
      (if (==( (lsts-parse-head tokens) '{_s )) (scope(
         (lsts-parse-expect( '{_s tokens ))(set tokens (tail tokens))
         (let t-rest (lsts-parse-expression tokens))
         (set t (.first t-rest))
         (set tokens (.second t-rest))
         (lsts-parse-expect( '}_s tokens ))(set tokens (tail tokens))
      )) (
         (let t-rest (lsts-parse-andor tokens))
         (set t (.first t-rest))
         (set tokens (.second t-rest))
      ))
      (let f ASTNil)
      (if (==( (lsts-parse-head tokens) 'else_s )) (
         (lsts-parse-expect( 'else_s tokens ))(set tokens (tail tokens))
         (if (==( (lsts-parse-head tokens) '{_s )) (scope(
            (lsts-parse-expect( '{_s tokens ))(set tokens (tail tokens))
            (let f-rest (lsts-parse-expression tokens))
            (set f (.first f-rest))
            (set tokens (.second f-rest))
            (lsts-parse-expect( '}_s tokens ))(set tokens (tail tokens))
         )) (
            (let f-rest (lsts-parse-andor tokens))
            (set f (.first f-rest))
            (set tokens (.second f-rest))
         ))
      ) ())
      (set base (App(
         (close(App(
            (close(App(
               (close(Var( 'if_s (with-location( (token::new 'if_s) loc )) )))
               (close c)
            )))
            (close t)
         )))
         (close f)
      )))
   )) (
      (if (==( (lsts-parse-head tokens) 'let_s )) (scope(
         (let loc (.location(head tokens)))
         (set tokens (tail tokens))
         (let lhs-rest (lsts-parse-lhs tokens))
         (let lhs (.first lhs-rest))
         (set tokens (.second lhs-rest))
         (lsts-parse-expect( '=_s tokens ))(set tokens (tail tokens))
         (let rhs-rest (lsts-parse-small-expression tokens))
         (let rhs (.first rhs-rest))
         (set tokens (.second rhs-rest))
         (set base (App(
            (close(App(
               (close(Var( 'let_s (with-location( (token::new 'let_s) loc )) )))
               (close lhs)
            )))
            (close rhs)
         )))
      )) (
         (if (==( (lsts-parse-head tokens) 'while_s )) (scope(
            (let loc (.location(head tokens)))
            (set tokens (tail tokens))
            (let c-rest (lsts-parse-small-expression tokens))
            (let c (.first c-rest))
            (set tokens (.second c-rest))
            (lsts-parse-expect( '{_s tokens ))(set tokens (tail tokens))
            (let rhs-rest (lsts-parse-expression tokens))
            (let rhs (.first rhs-rest))
            (set tokens (.second rhs-rest))
            (lsts-parse-expect( '}_s tokens ))(set tokens (tail tokens))
            (set base (App(
               (close(App(
                  (close(Var( 'while_s (with-location( (token::new 'while_s) loc )) )))
                  (close c)
               )))
               (close rhs)
            )))
         )) (
            (if (==( (lsts-parse-head tokens) 'for_s )) (scope(
               (let loc (.location(head tokens)))
               (set tokens (tail tokens))
               (let lhs-rest (lsts-parse-lhs tokens))
               (let lhs (.first lhs-rest))
               (set tokens (.second lhs-rest))
               (lsts-parse-expect( 'in_s tokens ))(set tokens (tail tokens))
               (let iter-rest (lsts-parse-small-expression tokens))
               (let iter (.first iter-rest))
               (set tokens (.second iter-rest))
               (lsts-parse-expect( '{_s tokens ))(set tokens (tail tokens))
               (let rhs ASTNil)
               (if (!=( (lsts-parse-head tokens) '}_s )) (
                  (let rhs-rest (lsts-parse-expression tokens))
                  (set rhs (.first rhs-rest))
                  (set tokens (.second rhs-rest))
               ) ())
               (lsts-parse-expect( '}_s tokens ))(set tokens (tail tokens))
               (set base (App(
                  (close(App(
                     (close(Var( 'for-each_s (with-location( (token::new 'for-each_s) loc )) )))
                     (close(App(
                        (close(App(
                           (close lhs)
                           (close(Var( 'in_s (with-location( (token::new 'in_s) loc )) )))
                        )))
                        (close iter)
                     )))
                  )))
                  (close rhs)
               )))
            )) (
               (if (==( (lsts-parse-head tokens) 'match_s )) (scope(
                  (let loc (.location(head tokens)))
                  (set tokens (tail tokens))
                  (let e-rest (lsts-parse-small-expression tokens))
                  (let e (.first e-rest))
                  (set tokens (.second e-rest))
                  (let pats ASTNil)
                  (lsts-parse-expect( '{_s tokens ))(set tokens (tail tokens))
                  (while (&&( (non-zero tokens) (!=( (lsts-parse-head tokens) '}_s )) )) (
                     (let lhs-rest (lsts-parse-lhs tokens))
                     (let lhs (.first lhs-rest))
                     (set tokens (.second lhs-rest))
                     (lsts-parse-expect( '=_s tokens ))(set tokens (tail tokens))
                     (lsts-parse-expect( '>_s tokens ))(set tokens (tail tokens))
                     (let rhs-rest (lsts-parse-small-expression tokens))
                     (let rhs (.first rhs-rest))
                     (set tokens (.second rhs-rest))
                     (lsts-parse-expect( '\:_s tokens ))(set tokens (tail tokens))
                     (set pats (App(
                        (close pats)
                        (close(App(
                           (close lhs)
                           (close rhs)
                        )))
                     )))
                  ))
                  (lsts-parse-expect( '}_s tokens ))(set tokens (tail tokens))
                  (set base (App(
                     (close(App(
                        (close(Var( 'match_s (with-location( (token::new 'match_s) loc )) )))
                        (close e)
                     )))
                     (close pats)
                  )))
               )) (
                  (if (lsts-has-assign tokens) (scope(
                     (let loc (.location(head tokens)))
                     (let lhs-rest (lsts-parse-lhs tokens))
                     (let lhs (.first lhs-rest))
                     (set tokens (.second lhs-rest))
                     (lsts-parse-expect( '=_s tokens ))(set tokens (tail tokens))
                     (let rhs-rest (lsts-parse-small-expression tokens))
                     (let rhs (.first rhs-rest))
                     (set tokens (.second rhs-rest))
                     (set base (App(
                        (close(App(
                           (close(Var( 'set_s (with-location( (token::new 'set_s) loc )) )))
                           (close lhs)
                        )))
                        (close rhs)
                     )))
                  )) (
                     (let base-rest (lsts-parse-andor tokens))
                     (set base (.first base-rest))
                     (set tokens (.second base-rest))
                  ))
               ))
            ))
         ))
      ))
   ))
   (Tuple( base tokens ))
) Tuple<AST,List<Token>>);

lsts-parse-expression-possibly-tuple := λ(: tokens List<Token>). (: (
   (let loc (.location(head tokens)))
   (let base-rest (lsts-parse-expression tokens))
   (let base (.first base-rest))
   (set tokens (.second base-rest))
   (let is-tuple 0_u64)
   (while (==( (lsts-parse-head tokens) ',_s )) (
      (set is-tuple 1_u64)
      (set tokens (tail tokens))
      (set base-rest (lsts-parse-expression tokens))
      (set base (App(
         (close base)
         (close(.first base-rest))
      )))
      (set tokens (.second base-rest))
   ))
   (if is-tuple (
      (set base (App(
         (close(Lit( 'Tuple_s (with-location( (token::new 'Tuple_s) loc )) )))
         (close base)
      )))
   ) ())
   (Tuple( base tokens ))
) Tuple<AST,List<Token>>);

lsts-parse-expression := λ(: tokens List<Token>). (: (
   (let base-rest (lsts-parse-small-expression tokens))
   (let base (.first base-rest))
   (set tokens (.second base-rest))
   (while (==( (lsts-parse-head tokens) '\:_s )) (
      (set tokens (tail tokens))
      (if (||( (==( (lsts-parse-head tokens) '\]_s )) (==( (lsts-parse-head tokens) '}_s )) )) () (
         (set base-rest (lsts-parse-small-expression tokens))
         (set base (App(
            (close base)
            (close(.first base-rest))
         )))
         (set tokens (.second base-rest))
      ))
   ))
   (Tuple( base tokens ))
) Tuple<AST,List<Token>>);

lsts-parse-lhs-big := λ(: tokens List<Token>). (: (
   (let base-rest (lsts-parse-lhs-one tokens))
   (let base (.first base-rest))
   (set tokens (.second base-rest))
   (if (==( (lsts-parse-head tokens) '=_s )) (scope(
      (let loc (.location(head tokens)))
      (lsts-parse-expect( '=_s tokens ))(set tokens (tail tokens))
      (let val-rest (lsts-parse-lhs( tokens )))
      (let val (.first val-rest))
      (set tokens (.second val-rest))
      (set base (App(
         (close(Var( 'macro::lhs-bind_s (with-location( (token::new 'macro::lhs-bind_s) loc )) )))
         (close(App(
            (close base)
            (close val)
         )))
      )))
   )) ())
   (Tuple( base tokens ))
) Tuple<AST,List<Token>>);

lsts-parse-lhs := λ(: tokens List<Token>). (: (
   (let base ASTEOF)
   (if (==( (lsts-parse-head tokens) '\[_s )) (scope(
      (lsts-parse-expect( '\[_s tokens ))(set tokens (tail tokens))
      (let base-rest (lsts-parse-lhs-big( tokens )))
      (set base (.first base-rest))
      (set tokens (.second base-rest))
      (lsts-parse-expect( '\]_s tokens ))(set tokens (tail tokens))
   )) (
      (let base-rest (lsts-parse-lhs-one tokens))
      (set base (.first base-rest))
      (set tokens (.second base-rest))
   ))
   (while (&&( (non-zero tokens) (==( (lsts-parse-head tokens) '._s )) )) (
      (let loc (.location(head tokens)))
      (lsts-parse-expect( '._s tokens ))(set tokens (tail tokens))
      (lsts-parse-expect( '._s tokens ))(set tokens (tail tokens))
      (let next-rest (lsts-parse-lhs-one tokens))
      (let next (.first next-rest))
      (set tokens (.second next-rest))
      (set base (App(
         (close(Var( 'macro::lhs-prefix-or-suffix_s (with-location( (token::new 'macro::lhs-prefix-or-suffix_s) loc )) )))
         (close(App(
            (close base)
            (close next)
         )))
      )))
   ))
   (Tuple( base tokens ))
) Tuple<AST,List<Token>>);

lsts-make-lit := λ(: t Token). (: (
   (let loc (.location t))
   (let base (Lit( (.key t) t )))
   (if (&&( (.has-suffix( (.key t) '_ss_s )) (.contains( (.key t) '\\{_s )) )) (
      (let s (.key t))
      (set base ASTEOF)
      (let buffer SNil)
      (while (&&( (non-zero s) (!=( s '_ss_s )) )) (
         (if (.has-prefix( s '\\{_s )) (
            (if (non-zero buffer) (scope(
               (set buffer (+( buffer (SAtom '_ss_s) )))
               (let bs (clone-rope buffer))
               (let be (Lit( bs (with-location( (token::new bs) loc )) )))
               (if (non-zero base) (
                  (set base (App(
                     (close(Var( '+_s (with-location( (token::new '+_s) loc )) )))
                     (close(App(
                        (close base)
                        (close be)
                     )))
                  )))
               ) (set base be))
               (set buffer SNil)
            )) ())
            (set s (.remove-prefix( s '\\{_s )))
            (let t-buffer SNil)
            (while (&&( (non-zero s) (not(.has-prefix( s '}_s ))) )) (
               (set t-buffer (+( t-buffer (SAtom(clone-rope(head-string s))) )))
               (set s (tail-string s))
            ))
            (if (&&( (non-zero s) (.has-prefix( s '}_s )) )) (
               (set s (tail-string s))
            ) ())
            (let sub-tokens (lsts-tokenize-string( '[Format\sString]_s (clone-rope t-buffer) )))
            (let se-rest (lsts-parse-expression sub-tokens))
            (let se (App(
               (close(Var( 'to-smart-string_s (with-location( (token::new 'to-smart-string_s) (.location(head sub-tokens)) )) )))
               (close(.first se-rest))
            )))
            (if (non-zero base) (
               (set base (App(
                  (close(Var( '+_s (with-location( (token::new '+_s) loc )) )))
                  (close(App(
                     (close base)
                     (close se)
                  )))
               )))
            ) (set base (.first se-rest)))
            (if (non-zero(.second se-rest)) (
               (lsts-parse-expect( '[EOF]_s (.second se-rest) ))
            ) ())
         ) (
            (set buffer (+( buffer (SAtom(clone-rope(head-string s))) )))
            (set s (tail-string s))
         ))
      ))
      (if (non-zero buffer) (
         (set buffer (+( buffer (SAtom '_ss_s) )))
         (let bs (clone-rope buffer))
         (let be (Lit( bs (with-location( (token::new bs) loc )) )))
         (if (non-zero base) (
            (set base (App(
               (close(Var( '+_s (with-location( (token::new '+_s) loc )) )))
               (close(App(
                  (close base)
                  (close be)
               )))
            )))
         ) (set base be))
      ) ())
   ) ())
   base
) AST);

lsts-make-maybe-var := λ(: tokens List<Token>). (: (
   (if (.has-suffix( (lsts-parse-head tokens) '_ss_s )) (
      (lsts-parse-lit tokens)
   ) (
      (let t (head tokens))
      (let base (Var( (lsts-unwrap-identifier(.key t)) t )))
      (if (lsts-is-lit(.key t)) (
         (set base (lsts-make-lit t))
      ) ())
      (set tokens (tail tokens))
      (Tuple( base tokens ))
   ))
) Tuple<AST,List<Token>>);

lsts-is-lit := λ(: s String). (: (
   (let r 0_u64)
   (for-each ((Tuple( sfxs sfxtt )) in parse-suffixes) (
      (if (.has-suffix( s sfxs )) (set r 1_u64) ())
   ))
   r
) U64);

lsts-parse-lhs-one := λ(: tokens List<Token>). (: (
   (let base ASTEOF)
   (if (==( (lsts-parse-head tokens) '/_s )) (scope(
      (let loc (.location(head tokens)))
      (lsts-parse-expect( '/_s tokens ))(set tokens (tail tokens))
      (let pat SNil)
      (while (&&( (non-zero tokens) (!=( (lsts-parse-head tokens) '/_s )) )) (
         (set pat (+( pat (SAtom(lsts-parse-head tokens)) )))
         (set tokens (tail tokens))
      ))
      (lsts-parse-expect( '/_s tokens ))(set tokens (tail tokens))
      (set pat (+( pat (SAtom '_rgx_s) )))
      (let pats (clone-rope pat))
      (set base (Lit( pats (with-location( (token::new pats) loc )) )))
   )) (
      (if (lsts-is-ident-head(lsts-parse-head tokens)) (scope(
         (let base-rest (lsts-make-maybe-var tokens))
         (set base (.first base-rest))
         (set tokens (.second base-rest))
      )) (
         (if (lsts-is-lit(lsts-parse-head tokens)) (
            (let base-rest (lsts-parse-lit tokens))
            (set base (.first base-rest))
            (set tokens (.second base-rest))
         ) (
            (if (&&( (non-zero tokens) (==( (lsts-parse-head(tail tokens)) '{_s )) )) (
               (let loc (.location(head tokens)))
               (let tag (lsts-parse-head tokens))(set tokens (tail tokens))
               (lsts-parse-expect( '{_s tokens ))(set tokens (tail tokens))
               (let des-args ASTEOF)
               (while (&&( (non-zero tokens) (!=( (lsts-parse-head tokens) '}_s )) )) (
                  (let attr-loc (.location(head tokens)))
                  (let binding '_s)
                  (let attr-key '_s)
                  (if (lsts-is-ident-head(lsts-parse-head tokens)) (
                     (set attr-key (lsts-parse-head tokens))
                     (set tokens (tail tokens))
                  ) ())
                  (if (==( (lsts-parse-head tokens) '=_s )) (
                     (set binding attr-key)(set tokens (tail tokens))
                     (lsts-parse-expect( 'Identifier_s (lsts-is-ident-head(lsts-parse-head tokens)) tokens ))
                     (if (lsts-is-ident-head(lsts-parse-head tokens)) (
                        (set attr-key (lsts-parse-head tokens))
                        (set tokens (tail tokens))
                     ) ())
                  ) ())
                  (let val ASTEOF)
                  (if (==( (lsts-parse-head tokens) ':_s )) (
                     (set tokens (tail tokens))
                     (let val-rest (lsts-parse-lhs-one tokens))
                     (set val (.first val-rest))
                     (set tokens (.second val-rest))
                  ) ())
                  (if (&&( (&&( (not(non-zero val)) (not(non-zero binding)) )) (not(non-zero attr-key)) )) (
                     (lsts-parse-expect( 'Struct\sLHS_s 0_u64 tokens ))
                  ) ())
                  (if (non-zero val) () (
                     (set val (Var( '__s (with-location( (token::new '__s) attr-loc )) )))
                  ))
                  (if (non-zero binding) (
                     (set val (App(
                        (close(Var( '@_s (with-location( (token::new '@_s) attr-loc )) )))
                        (close(App(
                           (close(Var( binding (with-location( (token::new binding) attr-loc )) )))
                           (close val)
                        )))
                     )))
                  ) ())
                  (if (non-zero attr-key) (
                     (set attr-key (+( '._s attr-key )))
                     (set val (App(
                        (close(Var( 'macro::bind-field-by-key_s (with-location( (token::new 'macro::bind-field-by-key_s) attr-loc )) )))
                        (close(App(
                           (close(Var( attr-key (with-location( (token::new attr-key) attr-loc )) )))
                           (close val)
                        )))
                     )))
                  ) ())
                  (if (non-zero des-args) (
                     (set des-args (App(
                        (close des-args)
                        (close val)
                     )))
                  ) (set des-args val))
                  (if (==( (lsts-parse-head tokens) ',_s )) (set tokens (tail tokens)) ())
               ))
               (if (non-zero des-args) (
                  (set base (App(
                     (close(Lit( tag (with-location( (token::new tag) loc )) )))
                     (close des-args)
                  )))
               ) (
                  (set base (App(
                     (close(Lit( tag (with-location( (token::new tag) loc )) )))
                     (close ASTNil)
                  )))
               ))
               (lsts-parse-expect( '}_s tokens ))(set tokens (tail tokens))
            ) (
               (lsts-parse-expect( 'LHS_s 0_u64 tokens ))
            ))
         ))
      ))
   ))
   (Tuple( base tokens ))
) Tuple<AST,List<Token>>);

lsts-parse-add := λ(: tokens List<Token>). (: (
   (let term-rest (lsts-parse-mul tokens))
   (let term (.first term-rest))
   (set tokens (.second term-rest))
   (while (||(
      (==( (lsts-parse-head tokens) '+_s ))
      (==( (lsts-parse-head tokens) '-_s ))
   )) (
      (let op-t (head tokens))(let op (lsts-parse-head tokens))(set tokens (tail tokens))
      (let term2-rest (lsts-parse-mul tokens))
      (let term2 (.first term2-rest))
      (set term (App(
         (close(Var( op op-t )))
         (close(App(
            (close term)
            (close term2)
         )))
      )))
      (set tokens (.second term2-rest))
   ))
   (Tuple( term tokens ))
) Tuple<AST,List<Token>>);

lsts-parse-cmp := λ(: tokens List<Token>). (: (
   (let term-rest (lsts-parse-add tokens))
   (let term (.first term-rest))
   (set tokens (.second term-rest))
   (while (||(
      (||( 
         (==( (lsts-parse-head tokens) '==_s ))
         (==( (lsts-parse-head tokens) '!=_s ))
      ))
      (||( 
         (||( 
            (==( (lsts-parse-head tokens) '<_s ))
            (==( (lsts-parse-head tokens) '<=_s ))
         ))
         (||( 
            (==( (lsts-parse-head tokens) '>_s ))
            (==( (lsts-parse-head tokens) '>=_s ))
         ))
      ))
   )) (
      (let op-t (head tokens))(let op (lsts-parse-head tokens))(set tokens (tail tokens))
      (let term2-rest (lsts-parse-add tokens))
      (let term2 (.first term2-rest))
      (set term (App(
         (close(Var( op op-t )))
         (close(App(
            (close term)
            (close term2)
         )))
      )))
      (set tokens (.second term2-rest))
   ))
   (Tuple( term tokens ))
) Tuple<AST,List<Token>>);

lsts-parse-andor := λ(: tokens List<Token>). (: (
   (let term-rest (lsts-parse-cmp tokens))
   (let term (.first term-rest))
   (set tokens (.second term-rest))
   (while (||(
      (==( (lsts-parse-head tokens) '&&_s ))
      (==( (lsts-parse-head tokens) '||_s ))
   )) (
      (let op-t (head tokens))(let op (lsts-parse-head tokens))(set tokens (tail tokens))
      (let term2-rest (lsts-parse-cmp tokens))
      (let term2 (.first term2-rest))
      (set term (App(
         (close(Var( op op-t )))
         (close(App(
            (close term)
            (close term2)
         )))
      )))
      (set tokens (.second term2-rest))
   ))
   (Tuple( term tokens ))
) Tuple<AST,List<Token>>);

lsts-parse-mul := λ(: tokens List<Token>). (: (
   (let term-rest (lsts-parse-atom tokens))
   (let term (.first term-rest))
   (set tokens (.second term-rest))
   (while (||(
      (||( (==( (lsts-parse-head tokens) '*_s ))
           (==( (lsts-parse-head tokens) '/_s )) ))
      (==( (lsts-parse-head tokens) '%_s ))
   )) (
      (let op-t (head tokens))(let op (lsts-parse-head tokens))(set tokens (tail tokens))
      (let term2-rest (lsts-parse-atom tokens))
      (let term2 (.first term2-rest))
      (set term (App(
         (close(Var( op op-t )))
         (close(App(
            (close term)
            (close term2)
         )))
      )))
      (set tokens (.second term2-rest))
   ))
   (lsts-parse-atom-tail( term tokens ))
) Tuple<AST,List<Token>>);

lsts-parse-atom := λ(: tokens List<Token>). (: (
   (let term ASTEOF)
   (if (lsts-is-ident-head(lsts-parse-head tokens)) (scope(
      (let term-rest (lsts-make-maybe-var tokens))
      (set term (.first term-rest))
      (set tokens (.second term-rest))
   )) (
      (if (==( (lsts-parse-head tokens) '\[_s )) (
         (set tokens (tail tokens))
         (if (==( (lsts-parse-head tokens) '\]_s )) (
            (set term ASTNil)
            (set tokens (tail tokens))
         ) (
            (let term-rest (lsts-parse-expression-possibly-tuple tokens))
            (set term (.first term-rest))
            (set tokens (.second term-rest))
            (lsts-parse-expect( '\]_s tokens ))(set tokens (tail tokens))
         ))
      ) (
         (if (==( (lsts-parse-head tokens) '[_s )) (
            (let l-term-rest (lsts-parse-list tokens))
            (set term (.first l-term-rest))
            (set tokens (.second l-term-rest))
         ) (
            (if (==( (lsts-parse-head tokens) '{_s )) (
               (let m-term-rest (lsts-parse-map tokens))
               (set term (.first m-term-rest))
               (set tokens (.second m-term-rest))
            ) (
               (if (lsts-is-lit(lsts-parse-head tokens)) (
                  (let term-rest (lsts-parse-lit tokens))
                  (set term (.first term-rest))
                  (set tokens (.second term-rest))
               ) (
                  (if (&&( (non-zero tokens) (==( (lsts-parse-head(tail tokens)) '{_s )) )) (
                     (let tag (head tokens))(set tokens (tail tokens))
                     (set term (Lit( (.key tag) tag )))
                     (lsts-parse-expect( '{_s tokens ))(set tokens (tail tokens))
                     (let fields ASTEOF)
                     (while (&&( (non-zero tokens) (!=( (lsts-parse-head tokens) '}_s )) )) (
                        (let field-rest (lsts-parse-small-expression tokens))
                        (let field (.first field-rest))
                        (set tokens (.second field-rest))
                        (if (non-zero fields) (
                           (set fields (App( (close fields) (close field) )))
                        ) (set fields field))
                        (if (==( (lsts-parse-head tokens) ',_s )) (
                           (set tokens (tail tokens))
                        ) (
                           (lsts-parse-expect( '}_s tokens ))
                        ))
                     ))
                     (lsts-parse-expect( '}_s tokens ))(set tokens (tail tokens))
                     (if (non-zero fields) (
                        (set term (App( (close term) (close fields) )))
                     ) ())
                  ) (
                     (lsts-parse-expect( 'Atom_s 0_u64 tokens ))
                  ))
               ))
            ))
         ))
      ))
   ))
   (lsts-parse-atom-tail( term tokens ))
) Tuple<AST,List<Token>>);

lsts-parse-lit :=  λ(: tokens List<Token>). (: (
   (let loc (.location(head tokens)))
   (let term ASTEOF)
   (if (.has-suffix( (lsts-parse-head tokens) '_ss_s )) (
      (while (.has-suffix( (lsts-parse-head tokens) '_ss_s )) (
         (let cat (lsts-make-lit(head tokens)))
         (set tokens (tail tokens))
         (if (non-zero term) (
            (set term (App(
               (close(Var( '+_s (with-location( (token::new '+_s) loc )) )))
               (close(App(
                  (close term)
                  (close cat)
               )))
            )))
         ) (set term cat))
      ))
   ) (
      (set term (lsts-make-lit(head tokens)))
      (set tokens (tail tokens))
   ))
   (Tuple( term tokens ))
) Tuple<AST,List<Token>>);

lsts-parse-list := λ(: tokens List<Token>). (: (
   (lsts-parse-expect( '[_s tokens ))(let loc (.location(head tokens)))(set tokens (tail tokens))
   (let term (Lit( 'LEOF_s (with-location( (token::new( 'LEOF_s )) loc )) )))
   (if (==( (lsts-parse-head tokens) 'for_s )) (
      (print 'TODO\sList\sComprehension\n_s)(exit 1_u64)
   ) (
      (if (==( (lsts-parse-head tokens) ']_s )) () (
         (let add-items (: LEOF List<AST>))
         (while (&&( (non-zero tokens) (!=( (lsts-parse-head tokens) ']_s )) )) (
            (let item-rest (lsts-parse-expression tokens))
            (let item (.first item-rest))
            (set tokens (.second item-rest))
            (set add-items (cons( item add-items )))
            (if (&&( (non-zero tokens) (!=( (lsts-parse-head tokens) ']_s )) )) (
               (lsts-parse-expect( ',_s tokens ))(set tokens (tail tokens))
            ) ())
         ))
         (for-each (add-item in add-items) (
            (set term (App(
               (close(Var( 'list::cons_s (with-location( (token::new 'list::cons_s) loc )) )))
               (close(App(
                  (close add-item) (close term)
               )))
            )))
         ))
      ))
   ))
   (lsts-parse-expect( ']_s tokens ))(set tokens (tail tokens))
   (Tuple( term tokens ))
) Tuple<AST,List<Token>>);

lsts-parse-map := λ(: tokens List<Token>). (: (
   (lsts-parse-expect( '{_s tokens ))(let loc (.location(head tokens)))(set tokens (tail tokens))
   (let term (Lit( 'HashtableEqEOF_s (with-location( (token::new( 'HashtableEqEOF_s )) loc )) )))
   (if (==( (lsts-parse-head tokens) 'for_s )) (
      (print 'TODO\sMap\sComprehension\n_s)(exit 1_u64)
   ) (
      (if (==( (lsts-parse-head tokens) '}_s )) () (
         (while (&&( (non-zero tokens) (!=( (lsts-parse-head tokens) '}_s )) )) (
            (let item-rest (lsts-parse-expression tokens))
            (let item (.first item-rest))
            (set tokens (.second item-rest))
            (let mapped ASTNil)
            (if (&&( (non-zero tokens) (==( (lsts-parse-head tokens) ':_s )) )) (
               (lsts-parse-expect( ':_s tokens ))(set tokens (tail tokens))
               (let mapped-rest (lsts-parse-expression tokens))
               (set mapped (.first mapped-rest))
               (set tokens (.second mapped-rest))
            ) (
               (set mapped (Lit( '1_u64_s (with-location( (token::new( '1_u64_s )) loc )) )))
            ))
            (set term (App(
               (close(Var( 'map::cons_s (with-location( (token::new 'map::cons_s) loc )) )))
               (close(App(
                  (close(App( (close item) (close mapped) )))
                  (close term)
               )))
            )))
            (if (&&( (non-zero tokens) (!=( (lsts-parse-head tokens) '}_s )) )) (
               (lsts-parse-expect( ',_s tokens ))(set tokens (tail tokens))
            ) ())
         ))
      ))
   ))
   (lsts-parse-expect( '}_s tokens ))(set tokens (tail tokens))
   (Tuple( term tokens ))
) Tuple<AST,List<Token>>);

lsts-parse-atom-tail := λ(: base AST)(: tokens List<Token>). (: (
   (while (||( (||( (==( (lsts-parse-head tokens) '\[_s )) (==( (lsts-parse-head tokens) '._s )) ))
      (&&( (&&( (==( (lsts-parse-head tokens) ':_s )) (non-zero(tail tokens)) )) (==( (lsts-parse-head(tail tokens)) ':_s )) ))
   )) (
      (if (&&( (&&( (==( (lsts-parse-head tokens) ':_s )) (non-zero(tail tokens)) )) (==( (lsts-parse-head(tail tokens)) ':_s )) )) (scope(
         (set tokens (tail tokens))
         (set tokens (tail tokens))
         (let type-rest (lsts-parse-type tokens))
         (let a-type (.first type-rest))
         (set tokens (.second type-rest))
         (set base (App(
            (close(Lit( ':_s (token::new ':_s) )))
            (close(App(
               (close base)
               (close(AType a-type))
            )))
         )))
      )) (
         (if (==( (lsts-parse-head tokens) '._s )) (scope(
            (let loc (.location(head tokens)))
            (set tokens (tail tokens))
            (lsts-parse-expect( 'Identifier_s (lsts-is-ident-head(lsts-parse-head tokens)) tokens ))
            (let method (+( '._s (.key(head tokens)) )))(set tokens (tail tokens))
            (if (==( (lsts-parse-head tokens) '\[_s )) (
               (lsts-parse-expect( '\[_s tokens ))(set tokens (tail tokens))
               (while (&&( (non-zero tokens) (!=( (lsts-parse-head tokens) '\]_s )) )) (
                  (let next-rest (lsts-parse-expression tokens))
                  (let next (.first next-rest))
                  (set tokens (.second next-rest))
                  (if (&&( (non-zero tokens) (==( (lsts-parse-head tokens) ',_s )) )) (
                     (set tokens (tail tokens))
                  ) (
                     (lsts-parse-expect( '\]_s tokens ))
                  ))
                  (set base (App(
                     (close base)
                     (close next)
                  )))
               ))
               (lsts-parse-expect( '\]_s tokens ))(set tokens (tail tokens))
            ) ())
            (set base (App(
               (close(Var( method (with-location( (token::new method) loc )) )))
               (close base)
            )))
         )) (
            (set tokens (tail tokens))
            (if (==( (lsts-parse-head tokens) '\]_s )) (
               (set base (App(
                  (close base)
                  (close ASTNil)
               )))
               (set tokens (tail tokens))
            ) (
               (let term2-rest (lsts-parse-expression tokens))
               (let term2 (.first term2-rest))
               (set tokens (.second term2-rest))
               (while (==( (lsts-parse-head tokens) ',_s )) (
                  (set tokens (tail tokens))
                  (let term3-rest (lsts-parse-expression tokens))
                  (let term3 (.first term3-rest))
                  (set tokens (.second term3-rest))
                  (set term2 (App(
                     (close term2)
                     (close term3)
                  )))
               ))
               (set base (App(
                  (close base)
                  (close term2)
               )))
               (lsts-parse-expect( '\]_s tokens ))(set tokens (tail tokens))
            ))
         ))
      ))
   ))
   (Tuple( base tokens ))
) Tuple<AST,List<Token>>);


