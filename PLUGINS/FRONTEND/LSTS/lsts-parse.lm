
lsts-parse-head :=  位(: tokens List<Token>). (: (
   (let r '_s)
   (match tokens (
      ()
      ( (LCons( (Token( tk _ _ )) _ )) (set r tk) )
      ( _ () )
   ))
   r
) String);

lsts-parse := 位(: tokens List<Token>). (: (
   (while (non-zero tokens) (
      (let prev-tokens tokens)
      (if (is( prev-tokens tokens )) (
         (if (==( (lsts-parse-head tokens) 'let_s )) (
            (set tokens (lsts-parse-let tokens))
         ) ())
         (print 'Unrecognized\sToken\sDuring\sParsing\s_s)(print(lsts-parse-head tokens))(print '\n_s)(exit 1_u64)
      ) ())
   ))
) Nil);

lsts-unwrap-identifier := 位(: ident String). (: (
   (if (has-prefix( ident '$"_s )) (
      (set ident (remove-prefix( ident '$"_s )))
      (set ident (remove-suffix( ident '"_s )))
   ) ())
   ident
) String);

lsts-parse-let := 位(: tokens List<Token>). (: (
   (assert(==( (lsts-parse-head tokens) 'let_s ))) (set tokens (tail tokens))
   (assert(is-ident-head(lsts-parse-head tokens)))
   (let name (lsts-parse-head tokens)) (set tokens (tail tokens))
   (if (==( name '._s )) (
      (assert(is-ident-head(lsts-parse-head tokens)))
      (set name (+( name (lsts-parse-head tokens) ))) (set tokens (tail tokens))
   ) ())
   (set name (lsts-unwrap-identifier name))
   (print 'let\s_s)(print name)(print '\n_s)
   tokens
) List<Token>);
