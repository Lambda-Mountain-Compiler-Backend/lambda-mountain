
lsts-parse-head :=  λ(: tokens List<Token>). (: (
   (let r '_s)
   (match tokens (
      ()
      ( (LCons( (Token( tk _ _ )) _ )) (set r tk) )
      ( _ () )
   ))
   r
) String);

lsts-parse := λ(: tokens List<Token>). (: (
   (while (non-zero tokens) (
      (let prev-tokens tokens)
      (if (is( prev-tokens tokens )) (
         (if (==( (lsts-parse-head tokens) 'let_s )) (
            (set tokens (lsts-parse-let tokens))
         ) ())
         (print 'Unrecognized\sToken\sDuring\sParsing\s_s)(print(lsts-parse-head tokens))(print '\n_s)(exit 1_u64)
      ) ())
   ))
) Nil);

lsts-unwrap-identifier := λ(: ident String). (: (
   (if (has-prefix( ident '$"_s )) (
      (set ident (remove-prefix( ident '$"_s )))
      (set ident (remove-suffix( ident '"_s )))
   ) ())
   ident
) String);

lsts-assert := λ(: b U64)(: tokens List<Token>). (: (
   (if (not b) (
      (print 'Parse\sError\sat\s_s)
      (match tokens (
         ()
         ( (LCons( t _ )) ((print (.location t))(print '\n_s)))
         ( _ (print 'End\sOf\sFile\n_s) )
      ))
      (exit 1_u64)
   ) ())
) Nil);

lsts-parse-let := λ(: tokens List<Token>). (: (
   (lsts-assert( (==( (lsts-parse-head tokens) 'let_s )) tokens )) (set tokens (tail tokens))
   (lsts-assert( (is-ident-head(lsts-parse-head tokens)) tokens ))
   (let name (lsts-parse-head tokens)) (set tokens (tail tokens))
   (if (==( name '._s )) (
      (lsts-assert( (is-ident-head(lsts-parse-head tokens)) tokens ))
      (set name (+( name (lsts-parse-head tokens) ))) (set tokens (tail tokens))
   ) ())
   (set name (lsts-unwrap-identifier name))
   (let args-list (: LEOF List<Tuple<String,String>>))
   (let return-type '_s)
   (if (==( (lsts-parse-head tokens) '\[_s )) (
      (lsts-assert( (==( (lsts-parse-head tokens) '\[_s )) tokens )) (set tokens (tail tokens))
      (while (!=( (lsts-parse-head tokens) '\]_s )) (
         (lsts-assert( (is-ident-head(lsts-parse-head tokens)) tokens ))
         (let arg-name (lsts-parse-head tokens)) (set tokens (tail tokens))
         (lsts-assert( (==( (lsts-parse-head tokens) ':_s )) tokens )) (set tokens (tail tokens))
         (lsts-assert( (is-ident-head(lsts-parse-head tokens)) tokens ))
         (let arg-type (lsts-parse-head tokens)) (set tokens (tail tokens))
         (if (==( (lsts-parse-head tokens) ',_s )) (set tokens (tail tokens)) (
            (lsts-assert( (==( (lsts-parse-head tokens) '\]_s )) tokens ))
         ))
         (set args-list (cons( (Tuple( arg-name arg-type )) args-list )))
      ))
      (lsts-assert( (==( (lsts-parse-head tokens) '\]_s )) tokens )) (set tokens (tail tokens))
      (lsts-assert( (==( (lsts-parse-head tokens) ':_s )) tokens )) (set tokens (tail tokens))
      (lsts-assert( (is-ident-head(lsts-parse-head tokens)) tokens ))
      (set return-type (lsts-parse-head tokens)) (set tokens (tail tokens))
   ) ())
   (lsts-assert( (==( (lsts-parse-head tokens) '=_s )) tokens )) (set tokens (tail tokens))
   (let rhs-rest (lsts-parse-expression tokens))
   (let rhs (.first rhs-rest))
   (set tokens (.second rhs-rest))
   (lsts-assert( (==( (lsts-parse-head tokens) '\:_s )) tokens )) (set tokens (tail tokens))
   (print 'let\s_s)(print name)(print args-list)(print return-type)(print rhs)(print '\n_s)
   tokens
) List<Token>);

lsts-parse-expression := λ(: tokens List<Token>). (: (
   (let base-rest (lsts-parse-atom tokens))
   (let base (.first base-rest))
   (set tokens (.second base-rest))
   (Tuple( base tokens ))
) Tuple<AST,List<Token>>);

lsts-parse-atom := λ(: tokens List<Token>). (: (
   (Tuple( ASTEOF tokens ))
) Tuple<AST,List<Token>>);
