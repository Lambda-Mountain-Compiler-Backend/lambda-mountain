
macro ('lsts-try-tokenize-keep pat) (
   (if (&&( (!=( (head-string text) 0_u8 )) (.has-prefix( text pat )) )) (
      (set tokens (cons(
         (with-location( pat (SourceLocation( fp current-line current-column )) )) tokens
      )))
      (set text (.remove-prefix( text pat )))
      (set current-column (+( current-column (.length pat) )))
   ) ())
);
macro ('lsts-try-tokenize-discard pat) (
   (if (&&( (!=( (head-string text) 0_u8 )) (.has-prefix( text pat )) )) (
      (set text (.remove-prefix( text pat )))
      (if (==( pat '\n_s )) (
         (set current-line (+( current-line 1_u64 )))
         (set current-column 1_u64)
      ) (
         (set current-column (+( current-column (.length pat) )))
      ))
   ) ())
);

lsts-tokenize := λ(: fp String). (: (
   (let text (read-file fp))
   (let tokens (: LEOF List<Token>))
   (let current-line 1_u64)
   (let current-column 1_u64)
   (while (head-string text) (
      (let prev-text text)
      (lsts-try-tokenize-keep '~=_s)
      (lsts-try-tokenize-keep '+=_s)
      (lsts-try-tokenize-keep '-=_s)
      (lsts-try-tokenize-keep '*=_s)
      (lsts-try-tokenize-keep '/=_s)
      (lsts-try-tokenize-keep '%=_s)
      (lsts-try-tokenize-keep '&=_s)
      (lsts-try-tokenize-keep '|=_s)
      (lsts-try-tokenize-keep '<=_s)
      (lsts-try-tokenize-keep '>=_s)
      (lsts-try-tokenize-keep '!=_s)
      (lsts-try-tokenize-keep '==_s)
      (lsts-try-tokenize-keep '<_s)
      (lsts-try-tokenize-keep '>_s)
      (lsts-try-tokenize-keep '{_s)
      (lsts-try-tokenize-keep '}_s)
      (lsts-try-tokenize-keep '[_s)
      (lsts-try-tokenize-keep ']_s)
      (lsts-try-tokenize-keep '\[_s)
      (lsts-try-tokenize-keep '\]_s)
      (lsts-try-tokenize-keep ':_s)
      (lsts-try-tokenize-keep '\:_s)
      (lsts-try-tokenize-keep ',_s)
      (lsts-try-tokenize-keep '?_s)
      (lsts-try-tokenize-keep '~_s)
      (lsts-try-tokenize-keep '@_s)
      (lsts-try-tokenize-keep '+_s)
      (lsts-try-tokenize-keep '-_s)
      (lsts-try-tokenize-keep '*_s)
      (lsts-try-tokenize-keep '/_s)
      (lsts-try-tokenize-keep '%_s)
      (lsts-try-tokenize-keep '&_s)
      (lsts-try-tokenize-keep '|_s)
      (lsts-try-tokenize-keep '<_s)
      (lsts-try-tokenize-keep '>_s)
      (lsts-try-tokenize-keep '!_s)
      (lsts-try-tokenize-keep '=_s)
      (lsts-try-tokenize-keep '^_s)
      (lsts-try-tokenize-discard '\s_s)
      (lsts-try-tokenize-discard '\t_s)
      (lsts-try-tokenize-discard '\n_s)
      (lsts-try-tokenize-keep '._s) # can be part of an ident literal, so check this last
      (if (lsts-is-ident-head text) (
         (let ident-buffer SNil)
         (let ident-line current-line)
         (let ident-column current-column)
         (while (lsts-is-ident-head text) (
            (if (.has-prefix( text '$"_s )) (
               (set text (tail-string text))
               (set text (tail-string text))
               (set ident-buffer (+( ident-buffer (SAtom '$"_s) )))
               (while (&&( (!=( (head-string text) 0_u8 )) (!=( (head-string text) 34_u8 )) )) (
                  (set ident-buffer (+( ident-buffer (SAtom(clone-rope(head-string text))) )))
                  (set text (tail-string text))            
               ))
               (if (==( (head-string text) 34_u8 )) (
                  (set ident-buffer (+( ident-buffer (SAtom '"_s) )))
                  (set text (tail-string text))            
               ) ())
            ) (
               (set ident-buffer (+( ident-buffer (SAtom(clone-rope(head-string text))) )))
               (set text (tail-string text))
            ))
         ))
         (let ident-text (clone-rope ident-buffer))
         (if (||( (&&( (>=( (head-string ident-text) 48_u8 )) (<=( (head-string ident-text) 57_u8 )) )) (==( (head-string ident-text) 45_u8 )) )) (
            (let tsfx '_u64_s)
            (if (.has-prefix( ident-text '-_s )) (set tsfx '_i64_s) ())
            (if (.contains( ident-text '._s )) (set tsfx '_f64_s) ())
            (if (.contains( ident-text 'e_s )) (set tsfx '_f64_s) ())
            (if (==( ident-text '-_s )) () (
               (set ident-text (+( ident-text tsfx )))
            ))
         ) ())
         (set current-column (+( current-column (.length ident-text) )))
         (set tokens (cons(
            (with-location( ident-text (SourceLocation( fp ident-line ident-column )) )) tokens
         )))
      ) ())
      (if (.has-prefix( text '"_s )) (
         (set text (tail-string text))
         (let s-line current-line)
         (let s-column current-column)
         (let s-buffer SNil)
         (while (&&( (!=( (head-string text) 0_u8 )) (not(.has-prefix( text '"_s ))) )) (
            (let s-prev-text text)
            (if (.has-prefix( text '\\\\_s )) (
               (set s-buffer (+( s-buffer (SAtom '\\\\_s) )))
               (set text (tail-string text)) (set text (tail-string text))
               (set current-column (+( current-column 2_u64 )))
            ) ())
            (if (.has-prefix( text '\\"_s )) (
               (set s-buffer (+( s-buffer (SAtom '\\"_s) )))
               (set text (tail-string text)) (set text (tail-string text))
               (set current-column (+( current-column 2_u64 )))
            ) ())
            (if (is( s-prev-text text )) (
               (set s-buffer (+( s-buffer (SAtom(clone-rope(head-string text))) )))
               (set text (tail-string text))
               (set current-column (+( current-column 1_u64 )))
            ) ())
         ))
         (if (.has-prefix( text '"_s )) (
            (set text (tail-string text))
            (set current-column (+( current-column 1_u64 )))
         ) ())
         (set s-buffer (+( s-buffer (SAtom '_ss_s) )))
         (set tokens (cons(
            (with-location( (clone-rope s-buffer) (SourceLocation( fp s-line s-column )) )) tokens
         )))
      ) ())
      (if (.has-prefix( text '\o_s )) (
         (set text (tail-string text))
         (while (&&( (!=( (head-string text) 0_u8 )) (not(.has-prefix( text '\n_s ))) )) (
            (set text (tail-string text))
         ))
         (if (.has-prefix( text '\n_s )) (set text (tail-string text)) ())
      ) ())
      (if (is( text prev-text )) (
         (print 'Unrecognized\sToken\sStart\sIn\sFile\s_s)(print fp)
         (print current-line)(print ',_s)(print current-column)(print ':\s\`_s)(print(clone-rope(head-string text)))(print '\`_s)(print '\n_s)(exit 1_u64)
      ) ())
   ))
   (reverse tokens)
) List<Token>);

lsts-is-ident-head := λ(: text String). (: (
   (let r 0_u64)
   (if (&&( (>=( (head-string text) 48_u8 )) (<=( (head-string text) 57_u8 )) )) (set r 1_u64) ())  # 0-9
   (if (&&( (>=( (head-string text) 65_u8 )) (<=( (head-string text) 90_u8 )) )) (set r 1_u64) ())  # A-Z
   (if (&&( (>=( (head-string text) 97_u8 )) (<=( (head-string text) 122_u8 )) )) (set r 1_u64) ()) # a-z
   (if (==( (head-string text) 95_u8 )) (set r 1_u64) ()) # _
   (if (==( (head-string text) 45_u8 )) (set r 1_u64) ()) # -
   (if (==( (head-string text) 36_u8 )) (set r 1_u64) ()) # $
   r
) U64);

lsts-is-lit-head := λ(: text String). (: (
   (let r 0_u64)
   (if (&&( (>=( (head-string text) 48_u8 )) (<=( (head-string text) 57_u8 )) )) (set r 1_u64) ())  # 0-9
   (if (&&( (>=( (head-string text) 65_u8 )) (<=( (head-string text) 90_u8 )) )) (set r 1_u64) ())  # A-Z
   r
) U64);
