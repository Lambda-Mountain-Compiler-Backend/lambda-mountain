
compile-blob := Î». (: (
   (let preview-program ast-parsed-program)
   (while (non-zero preview-program) (match preview-program (
      ()
      ( (Seq( rst (Typedef( lhs rhs )) )) (
         (set preview-program rst)
      ))
      ( (Seq( rst (Glb( k_t rhs )) )) (
         (match rhs (
            ()
            ( (Abs( _ _ _ )) (
               (let fragment (fragment::new()))
               (set fragment (fragment::set( fragment 'fragment-type_s (SAtom 'Function_s) )))
               (set fragment (fragment::set-term( fragment rhs )))
               (set fragment (fragment::set-type( fragment (typeof rhs) )))
               (set global-ctx (fragment-context::bind(
                  global-ctx k (typeof rhs) fragment
               )))
            ))
            ( _ () )
         ))
         (set preview-program rst)
      ))
      ( (Seq( rst rhs )) (
         (set preview-program rst)
      ))
   )))
   (let blob SNil)
   (set preview-program ast-parsed-program)
   (while (non-zero preview-program) (match preview-program (
      ()
      ( (Seq( rst (Glb( k_t rhs )) )) (
         (set preview-program rst)
      ))
      ( (Seq( rst (Typedef( lhs rhs )) )) (
         (set preview-program rst)
      ))
      ( (Seq( rst (Meta( _ )) )) (
         (set preview-program rst)
      ))
      ( (Seq( rst expr )) (
         (let cs (blob-render-simple( global-ctx 'expression_s expr 0_i64 )))
         (let s (.1 cs))
         (set blob (SCons(
             (close blob)
             (close s)
         )))
         (set preview-program rst)
      ))
   )))
   (set assemble-final (clone-rope(escape-string blob)))
   (compile-write())
) Nil);


