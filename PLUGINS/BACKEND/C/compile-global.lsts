
let compile-global-c-has-main = false;
let compile-global-c-main-term = mk-eof();

let compile-global(ctx: FContext, k: CString, term: AST): Nil = (
   let kt = typeof(term);
   match term {
      Abs{lhs=lhs, rhs=rhs, tt=
   }
);

compile-global := λ(: ctx FContext)(: k String)(: term AST). (: (
   (let kt (typeof term))
   (match term (
      ()
      ( (Abs( lhs rhs tlt )) (
         (std-c-compile-global( ctx k term ))
      )
      ( t (
         (if (.is-t( (typeof t) 'C-FFI_s )) (
            (std-c-compile-global( ctx k term ))
         ) (
            (let clean-tt (.without-tag kt))
            (let mid (mangle-identifier( k clean-tt )))

            (let e (compile-expr( ctx t 0_i64 (Used()) )))

            (let text (SNil()))
            (match (.slot( kt 'Array_s )) (
               ()
               ( (TGround( 'Array_s (LCons( _ (LCons(
                    (TGround( 'Arrow_s (LCons( ranget (LCons( domaint _ )) )) )) _
                 )) )) )) (
                  (set text (SCons( (close text) (close(std-c-mangle-type( ranget term ))) )))
                  (set text (SCons( (close text) (close(SAtom '\s\[*_s)) )))
                  (set text (SCons( (close text) (close(SAtom mid)) )))
                  (set text (SCons( (close text) (close(SAtom '\]\[_s)) )))
                  (set text (SCons( (close text) (close(std-c-mangle-type( domaint term ))) )))
                  (set text (SCons( (close text) (close(SAtom '\]\:\n_s)) )))
                  (set assemble-gdecl-section (SCons( (close assemble-gdecl-section) (close text) )))
               ))
               ( _ (
                  (set text (SCons( (close text) (close(std-c-mangle-type( clean-tt term ))) )))
                  (set text (SCons( (close text) (close(SAtom '\s_s)) )))
                  (set text (SCons( (close text) (close(SAtom mid)) )))
                  (set text (SCons( (close text) (close(SAtom '\:\n_s)) )))
                  (set assemble-gdecl-section (SCons( (close assemble-gdecl-section) (close text) )))
               ))
            ))

            (set text (SAtom mid))
            (set text (SCons( (close text) (close(SAtom '=_s)) )))
            (set text (SCons( (close text) (close(.get( e 'expression_s ))) )))
            (set text (SCons( (close text) (close(SAtom '\:\n_s)) )))
            (set assemble-global-initializer-section (SCons( (close assemble-global-initializer-section) (close text) )))
         ))
      ))
   ))
) Nil);

compile-global-main := λ(: ctx FContext)(: k String)(: term AST). (: (
   (match term (
      ()
      ( (Abs( lhs rhs tlt )) (
         (let kt (typeof term))

         (let args-type (.domain kt))

         (set ctx (std-c-compile-destructure-args( ctx lhs (.is-t( tlt 'Blob_s )) )))
         (let e (mk-fragment()))
         (let function-name 'main_s)
         (set e (compile-expr( ctx rhs 0_i64 (Unused()) )))
         (let program (.get( e 'expression_s )))
         (let frame (.get( e 'frame_s )))
         (let text (SNil()))

         (let loc (.location(term)))
         (set text (SCons( (close text) (close(SAtom '\n\oline\s_s)) )))
         (set text (SCons( (close text) (close(SAtom (to-string (.line loc)) )) )))
         (set text (SCons( (close text) (close(SAtom '\s"_s)) )))
         (set text (SCons( (close text) (close(SAtom (.filename loc))) )))
         (set text (SCons( (close text) (close(SAtom '"\n_s)) )))

         (set text (SCons( (close text) (close(SAtom 'int_s)) )))
         (set text (SCons( (close text) (close(SAtom '\s_s)) )))
         (set text (SCons( (close text) (close(SAtom function-name)) )))
         (set text (SCons( (close text) (close(SAtom '\[_s)) )))
         (set text (SCons( (close text) (close(std-c-compile-function-args(ctx lhs))) )))
         (set text (SCons( (close text) (close(SAtom '\]\:\n_s)) )))
         (set assemble-gdecl-section (SCons( (close assemble-gdecl-section) (close text) )))

         (set text (SNil()))

         (set text (SCons( (close text) (close(SAtom '\n\oline\s_s)) )))
         (set text (SCons( (close text) (close(SAtom (to-string (.line loc)) )) )))
         (set text (SCons( (close text) (close(SAtom '\s"_s)) )))
         (set text (SCons( (close text) (close(SAtom (.filename loc))) )))
         (set text (SCons( (close text) (close(SAtom '"\n_s)) )))

         (set text (SCons( (close text) (close(SAtom 'int_s)) )))
         (set text (SCons( (close text) (close(SAtom '\s_s)) )))
         (set text (SCons( (close text) (close(SAtom function-name)) )))
         (set text (SCons( (close text) (close(SAtom '\[_s)) )))
         (set text (SCons( (close text) (close(std-c-compile-function-args(ctx lhs))) )))
         (set text (SCons( (close text) (close(SAtom '\]{_s)) )))
         (set text (SCons( (close text) (close assemble-string-initializer-section) )))
         (set text (SCons( (close text) (close assemble-global-initializer-section) )))
         (set text (SCons( (close text) (close frame) )))
         (set text (SCons( (close text) (close program) )))
         (set text (SCons( (close text) (close(SAtom '\:return\s0\:\n_s)) )))
         (set text (SCons( (close text) (close(SAtom '}\n_s)) )))
         (set assemble-text-section (SCons( (close assemble-text-section) (close text) )))
      ))
   ))
) Nil);
