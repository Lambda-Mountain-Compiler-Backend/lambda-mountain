
let std-c-compile-type-typedef(td: AST): Nil = (
   match td { Typedef2{} => (); };
   let location = (td as Tag::Typedef2).location;
   let lhs-type = (td as Tag::Typedef2).lhs-type;
   let implements = (td as Tag::Typedef2).implements;
   let implies = (td as Tag::Typedef2).implies;
   let size = (td as Tag::Typedef2).size;
   let alias = (td as Tag::Typedef2).alias;
   let opaque-alias = (td as Tag::Typedef2).opaque-alias;
   let cases = (td as Tag::Typedef2).cases;

   if cases.length > 0 {
   for concrete-type in concrete-type-instances-index.lookup(lhs-type.ground-tag-and-arity, [] : List<Type>) {
      assemble-header-section = assemble-header-section + SAtom(c"typedef struct ") + std-c-mangle-type(concrete-type, td)
                              + SAtom(c" ") + std-c-mangle-type(concrete-type, td) + SAtom(c";\n");
      let tctx = unify(lhs-type, concrete-type);
      continue-compile-c-typedefs-concrete = cons( (tctx, concrete-type, td), continue-compile-c-typedefs-concrete );
   }};
);

let std-c-compile-type-typedef-concrete(tctx: Maybe<TypeContext>, concrete-type: Type, td: AST): Nil = (
   match td { Typedef2{} => (); _ => (fail("Invalid compile type \{concrete-type} \{td}\n"); ()); };
   let location = (td as Tag::Typedef2).location;
   let implements = (td as Tag::Typedef2).implements;
   let implies = (td as Tag::Typedef2).implies;
   let size = (td as Tag::Typedef2).size;
   let alias = (td as Tag::Typedef2).alias;
   let opaque-alias = (td as Tag::Typedef2).opaque-alias;
   let cases = (td as Tag::Typedef2).cases;

   let is-incomplete = false;
   for vector Tuple{case-tag=first, case-fields=second} in cases {
      for vector Tuple{field-name=first, field-type=second} in case-fields {
         field-type = substitute(tctx, field-type).rewrite-type-alias;
         if is-incomplete-typedef(field-type) {
            is-incomplete = true;
         }
      }
   };
   if is-incomplete {
      continue-compile-c-typedefs-concrete = cons( (tctx, concrete-type, td), continue-compile-c-typedefs-concrete );
   } else {
      is-cstruct-hard-compiled-index = is-cstruct-hard-compiled-index.bind(concrete-type, 1_u64);

      assemble-types-section = assemble-types-section + SAtom(c"struct ") + std-c-mangle-type(concrete-type, td) + SAtom(c"{\n");
      
      let has-cases = false;
      for vector Tuple{case-tag=first, case-fields=second} in cases {
         if case-tag==c"" {
            for vector Tuple{field-name=first, field-type=second} in case-fields {
               let mangled-field-name = c"0_" + field-name;
               field-type = substitute(tctx, field-type);
               (let pre-tt, let post-tt) = std-c-mangle-declaration(field-type, td);
               assemble-types-section = assemble-types-section + SAtom(c"  ") + pre-tt + SAtom(c" ") + mangle-identifier(mangled-field-name) + post-tt + SAtom(c";\n");
            }
         } else has-cases = true;
      };

      if has-cases {
         assemble-types-section = assemble-types-section + SAtom(c"unsigned int discriminator_case_tag") + SAtom(c";\n");

         assemble-types-section = assemble-types-section + SAtom(c"  union {\n");
         let case-number = 0_u64;
         for vector Tuple{case-tag=first, case-fields=second} in cases {
            if case-tag!=c"" && case-fields.length > 0 {
               assemble-types-section = assemble-types-section + SAtom(c"    struct {\n");
               for vector Tuple{field-name=first, field-type=second} in case-fields {
                  let mangled-field-name = to-string(case-number) + c"_" + field-name;
                  field-type = substitute(tctx, field-type);
                  (let pre-tt, let post-tt) = std-c-mangle-declaration(field-type, td);
                  assemble-types-section = assemble-types-section + SAtom(c"      ") + pre-tt + SAtom(c" ") + mangle-identifier(mangled-field-name) + post-tt + SAtom(c";\n");
               };
               assemble-types-section = assemble-types-section + SAtom(c"    };\n");
            };
            case-number = case-number + 1;
         };
         assemble-types-section = assemble-types-section + SAtom(c"  };\n");
      };
      assemble-types-section = assemble-types-section + SAtom(c"};\n");
   };
);

let is-incomplete-typedef(tt: Type): U64 = (
   match tt {
      TAnd{conjugate=conjugate} => (
         let r = 0_u64;
         for vector c in conjugate { r = r || is-incomplete-typedef(c) };
         r
      );
      TAny{} => false;
      TVar{} => false;
      TGround{tag:"Array"} => false;
      TGround{} => complex-type-index.lookup(tt.ground-tag-and-arity,false)
                && not(is-cstruct-hard-compiled-index.lookup(tt, false));
   }
);
