
compile-stack-call := Î»(: ctx FContext)(: f Fragment)(: function-name String)(: return-type Type)(: args AST)(: offset I64)(: used IsUsed). (: (
   (let original-ctx ctx)
   (let function-type (.type f))
   (let r (mk-fragment()))

   (if (.is-t( function-type 'Blob_s )) (
      (set r (cc-blob( ctx function-name args offset )))
      (set.context( r (close ctx) ))
   ) (
      (if (.is-t( function-type 'Prop_s )) (
         (set r (compile-expr( ctx args offset Used )))
      ) (
         (if (is( used Tail )) (set used Used) ())
         (if (is( used Call )) (set used Used) ())
         (let push-args (compile-stack-call-push-args( ctx args offset )))
         (set.type( push-args (t1( 'FunctionArguments_s )) ))
         (let call SNil)

         (let ictx (mk-fragment()))

         (let function-id function-name)
         (if (||( (.is-t( function-type 'FFI_s )) (.is-t( function-type 'C-FFI_s )) )) () (
            (set function-id (mangle-identifier( function-name function-type )))
         ))

         (set ictx (.set( ictx 'function-id_s (SAtom function-id) )))  
         (set ictx (.set( ictx 'function-name_s (SAtom function-name) )))
         (set ctx (.bind( ctx 'ictx_s (t1 'ImplicitContext_s) ictx )))

         (let args-tt (.type push-args))
         (set ctx (.bind( ctx 'args_s args-tt push-args )))

         (set r (cc-blob( ctx 'primitive::call_s (t3( 'Cons_s (t1 'ImplicitContext_s) args-tt )) offset args )))

         (set.context( r (close original-ctx) ))
         (set.type( r (denormalize return-type) ))
      ))
   ))
   r
) Fragment);

