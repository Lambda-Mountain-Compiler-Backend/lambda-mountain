
cstring-cache := (: SSEOF StringStringList);
compile-declare-cstring := λ(: val String). (: (
   (let r (compile-declare-cstring-c( val )))
   r
) Fragment);

compile-declare-cstring-c := λ(: val String). (: (
   (let r (fragment::new()))
   (set r (.set( r 'expression_s (
      (+(
         (SAtom '"_s)
         (+(
            (escape-c-string val)
            (SAtom '"_s)
         ))
      ))
   ))))
   r 
) Fragment);

escape-c-string := λ(: s String). (: (
   (let e SNil)
   (while (head-string s) (
      (if (==( (head-string s) 92_u8 )) (
         (set s (tail-string s))
         (match (head-string s) (
            ()
            ( 58_u8 (set e (+( e (SAtom '\:_s) ))) )
            ( 91_u8 (set e (+( e (SAtom '\[_s) ))) )
            ( 92_u8 (set e (+( e (SAtom '\\\\\\\\_s) ))) )
            ( 93_u8 (set e (+( e (SAtom '\]_s) ))) )
            ( 96_u8 (set e (+( e (SAtom '\`_s) ))) )
            ( 108_u8 (set e (+( e (SAtom '\l_s) ))) )
            ( 110_u8 (set e (+( e (SAtom '\\\\n_s) ))) )
            ( 111_u8 (set e (+( e (SAtom '\o_s) ))) )
            ( 115_u8 (set e (+( e (SAtom '\s_s) ))) )
            ( 116_u8 (set e (+( e (SAtom '\\\\t_s) ))) )
            ( c (
               (print 'Illegal\sCharacter:\s_s)(print c)(print '\sin\s_s)(print s)(print '\n_s)
               (fail 'Illegal\sEscape\sSequence\sIn\sString\s_s)
            ))
         ))
         (set s (tail-string s))
      ) (
         (if (==( (head-string s) 34_u8 )) (
            (set e (+( e (SAtom '\\\\"_s) )))
         ) (
            (set e (+( e (SAtom(clone-rope(head-string s))) )))
         ))
         (set s (tail-string s))
      ))
   ))
   e
) S);

