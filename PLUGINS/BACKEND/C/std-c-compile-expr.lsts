
let std-c-compile-expr(ctx: FContext, t: AST, is-stmt: Bool): Fragment = (
   let f = match t {
      Var{ key=key } => (
         let def = var-to-def-index.lookup(t, ASTEOF);
         let e = std-c-fragment-context.lookup(def, mk-fragment());
         if not(non-zero(e)) {
            exit-error( untern("Unable to Find Variable Fragment in Context \{key}\n"), t );
         }; e
      );
      AType{ tt=tt } => (
         mk-fragment().set(c"expression",std-c-mangle-type(tt));
      );
      App{ left:Abs{lhs=lhs:Var{name=key}, rhs:ASTNil{}}, rhs=right } => (
         let lt = typeof(lhs);
         let v = mk-fragment().set(c"expression",if std-c-is-ctype(lt) then SAtom{name} else SAtom{uuid()});
         let f = mk-fragment();
         std-c-fragment-context = std-c-fragment-context.bind( lhs, v );
         ctx = ctx.bind( name, lt, v );
         (let pre, let post) = std-c-mangle-declaration(lt);
         f = f.set(c"frame", f.get(c"frame") + pre + SAtom{c" "}
                 + v.get(c"expression")
                 + SAtom{c" "} + post + SAtom{c";"});
         match rhs {
            App{ left:Lit{key:c":"}, right:App{ left:Var{key:c"__uninitialized"}, right:AType{tt=tt} } } => ();
            _ => (
               let rf = std-c-compile-expr(ctx, rhs, false);
               f = f.set(c"frame", f.get(c"frame") + rf.get(c"frame"));
               f = f.set(c"expression", SAtom(c"(")
                 + v.get(c"expression")
                 + SAtom{c"="} + rf.get(c"expression") + SAtom{c")"});
            );
         };
         f
      );
      App{ left:Var{key:c"as"}, right:App{ inner=left, right:AType{tt=tt} } } => (
         let f = std-c-compile-expr(ctx, inner, false);
         f.set(c"expression", SAtom{c"(("} + std-c-mangle-type(tt) + SAtom{c")"} +
            f.get(c"expression") + SAtom{c")"}
         );
      );
      App{ left:Lit{key:c":"}, right:App{ left:Lit{val=key}, right:AType{tt=tt} } } => (
         if tt.is-t(c"C") && tt.r1.is-t(c"uint8_t") then mk-expression(val)
         else if tt.is-t(c"C") && tt.r1.is-t(c"uint16_t") then mk-expression(val)
         else if tt.is-t(c"C") && tt.r1.is-t(c"uint32_t") then mk-expression(val)
         else if tt.is-t(c"C") && tt.r1.is-t(c"uint64_t") then mk-expression(val)
         else if tt.is-t(c"C") && tt.r1.is-t(c"int8_t") then mk-expression(val)
         else if tt.is-t(c"C") && tt.r1.is-t(c"int16_t") then mk-expression(val)
         else if tt.is-t(c"C") && tt.r1.is-t(c"int32_t") then mk-expression(val)
         else if tt.is-t(c"C") && tt.r1.is-t(c"int64_t") then mk-expression(val)
         else (fail("Unknown C Literal Type: \{tt}"); mk-fragment());
      );
      App{ left:Lit{key:c":"}, right:App{ inner-term=left, right:AType{tt=tt} } } => (
         let f = std-c-compile-expr(ctx, inner-term, is-stmt);
         is-stmt = false; f;
      );
      App{ left:Var{key:c"c::compound"}, terms=right } => (
         let original-ctx = ctx;
         let e = mk-fragment();
         let terms-list = [] :: List<AST>;
         while non-zero(terms) {match terms {
            App{left=left, right=right} => (
               terms-list = cons( right, terms-list );
               terms = left;
            );
            _ => terms = ASTEOF;
         }};
         for ct in terms-list {
            let f = std-c-compile-expr(ctx, ct, true);
            ctx = open(f.context);
            e = std-c-chain( e, f, true );
         };
         e = e.set(c"expression", SAtom{c"{"} + e.get(c"frame") + e.get(c"expression") + SAtom{c"}"} );
         e = e.set(c"frame", SNil );
         ctx = original-ctx;
         e
      );
      App{ is-cons=is-cons, left=left, right=right } => (
          if not(is-cons) && typeof(left).is-arrow {
             match left {
                Var{fname=key} => std-c-compile-call(ctx, fname, left, right);
                App{ left:Var{fname=key}, right:App{ inner-term=left, right:AType{tt=tt} } } => std-c-compile-call(ctx, fname, left, inner-term);
                Lit{fname=key} => std-c-compile-constructor(ctx, fname, left, right);
                App{ left:Lit{fname=key}, right:App{ inner-term=left, right:AType{tt=tt} } } => std-c-compile-constructor(ctx, fname, left, inner-term);
                _ => (
                   print("TODO: std-c-misc-call "); std-c-print(right); print("\n"); exit(1); mk-fragment();
                );
             }
          } else {
             let f1 = std-c-compile-expr(ctx, left, true);
             ctx = open(f1.context);
             let f2 = std-c-compile-expr(ctx, right, true);
             let f3 = std-c-chain(f1, f2, is-stmt);
             is-stmt = false;
             f3
          }
      );
      _ => (
         print("TODO: std-c-compile-expr\n");
         std-c-print(t); exit(1); mk-fragment();
      );
   };
   if is-stmt && non-zero(f.get(c"expression")) then f = f.set(c"expression", f.get(c"expression") + SAtom{c";"});
   f.context = close(ctx);
   f.type = typeof(t); f
);

