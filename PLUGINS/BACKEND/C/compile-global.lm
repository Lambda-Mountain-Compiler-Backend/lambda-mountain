
compile-global := λ(: ctx FContext)(: k String)(: term AST). (: (
   (compile-global-c( ctx k term ))
) Nil);

compile-global-c-has-main := 0_u64;

compile-global-c := λ(: ctx FContext)(: k String)(: term AST). (: (
   (let kt (typeof term))
   (match term (
      ()
      ( (Abs( lhs rhs tlt )) (if (||( (.is-open kt) (||( (.is-t( tlt 'Blob_s )) (||( (.is-t( tlt 'FFI_s )) (.is-t( tlt 'Prop_s )) )) )) )) () (
         (let args-type (.domain kt))
         (set ctx (compile-destructure-args( args-type ctx lhs 0_i64 (.is-t( tlt 'Blob_s )) )))
         (let e (fragment::new()))
         (let function-name 'main_s)
         (if (==( k 'main_s )) (
            (set e (compile-expr( ctx rhs 0_i64 Unused )))
         ) (
            (set e (compile-expr( ctx rhs 0_i64 Return )))
            (set function-name (mangle-identifier( k kt )))
         ))
         (let program (.get( e 'expression_s )))
         (let frame (.get( e 'frame_s )))
         (let text SNil)

         (let loc (location-of(term)))

         (set text (SCons( (close text) (close(SAtom '\oline\s_s)) )))
         (set text (SCons( (close text) (close(SAtom (to-string (.line loc)) )) )))
         (set text (SCons( (close text) (close(SAtom '\s"_s)) )))
         (set text (SCons( (close text) (close(SAtom (.filename loc))) )))
         (set text (SCons( (close text) (close(SAtom '"\n_s)) )))

         (if (==( k 'main_s )) (
            (set compile-global-c-has-main 1_u64)
            (set text (SCons( (close text) (close(SAtom 'int_s)) )))
         ) (
            (set text (SCons( (close text) (close(mangle-c-type(typeof rhs))) )))
         ))
         (set text (SCons( (close text) (close(SAtom '\s_s)) )))
         (set text (SCons( (close text) (close(SAtom function-name)) )))
         (set text (SCons( (close text) (close(SAtom '\[_s)) )))
         (set text (SCons( (close text) (close(compile-c-function-args(ctx lhs))) )))
         (set text (SCons( (close text) (close(SAtom '\]\:\n_s)) )))
         (set assemble-header-section (SCons( (close assemble-header-section) (close text) )))

         (set text SNil)

         (set text (SCons( (close text) (close(SAtom '\oline\s_s)) )))
         (set text (SCons( (close text) (close(SAtom (to-string (.line loc)) )) )))
         (set text (SCons( (close text) (close(SAtom '\s"_s)) )))
         (set text (SCons( (close text) (close(SAtom (.filename loc))) )))
         (set text (SCons( (close text) (close(SAtom '"\n_s)) )))

         (if (==( k 'main_s )) (
            (set text (SCons( (close text) (close(SAtom 'int_s)) )))
         ) (
            (set text (SCons( (close text) (close(mangle-c-type(typeof rhs))) )))
         ))
         (set text (SCons( (close text) (close(SAtom '\s_s)) )))
         (set text (SCons( (close text) (close(SAtom function-name)) )))
         (set text (SCons( (close text) (close(SAtom '\[_s)) )))
         (set text (SCons( (close text) (close(compile-c-function-args(ctx lhs))) )))
         (set text (SCons( (close text) (close(SAtom '\]{_s)) )))
         (if (==( k 'main_s )) (
            (set text (SCons( (close text) (close assemble-string-initializer-section) )))
            (set text (SCons( (close text) (close assemble-global-initializer-section) )))
         ) ())
         (set text (SCons( (close text) (close frame) )))
         (set text (SCons( (close text) (close program) )))
         (if (==( k 'main_s )) (
            (set text (SCons( (close text) (close(SAtom '\:return\s0\:\n_s)) )))
         ) ())
         (set text (SCons( (close text) (close(SAtom '}\n_s)) )))
         (set assemble-text-section (SCons( (close assemble-text-section) (close text) )))
      )))
      ( t (
         (let clean-tt (without-representation kt))
         (let mid (mangle-identifier( k clean-tt )))

         (let e (compile-expr( ctx t 0_i64 Used )))

         (let text SNil)
         (match (slot( kt 'Array_s )) (
            ()
            ( (TGround( 'Array_s (LCons( _ (LCons(
                 (TGround( 'Arrow_s (LCons( ranget (LCons( domaint _ )) )) )) _
              )) )) )) (
               (set text (SCons( (close text) (close(mangle-c-type ranget)) )))
               (set text (SCons( (close text) (close(SAtom '\s\[*_s)) )))
               (set text (SCons( (close text) (close(SAtom mid)) )))
               (set text (SCons( (close text) (close(SAtom '\]\[_s)) )))
               (set text (SCons( (close text) (close(mangle-c-type domaint)) )))
               (set text (SCons( (close text) (close(SAtom '\]\:\n_s)) )))
               (set assemble-header-section (SCons( (close assemble-header-section) (close text) )))
            ))
            ( _ (
               (set text (SCons( (close text) (close(mangle-c-type clean-tt)) )))
               (set text (SCons( (close text) (close(SAtom '\s_s)) )))
               (set text (SCons( (close text) (close(SAtom mid)) )))
               (set text (SCons( (close text) (close(SAtom '\:\n_s)) )))
               (set assemble-header-section (SCons( (close assemble-header-section) (close text) )))
            ))
         ))

         (set text (SAtom mid))
         (set text (SCons( (close text) (close(SAtom '=_s)) )))
         (set text (SCons( (close text) (close(.get( e 'expression_s ))) )))
         (set text (SCons( (close text) (close(SAtom '\:\n_s)) )))
         (set assemble-global-initializer-section (SCons( (close assemble-global-initializer-section) (close text) )))
      ))
   ))
) Nil);

