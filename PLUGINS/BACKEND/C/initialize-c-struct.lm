
initialize-c-struct := Î»(: ctx FContext)(: rval AST)(: case-number U64)(: field-index U64). (: (
   (let r (fragment::new()))
   (match (slot( (typeof rval) 'Cons_s )) (
      ()
      ( (TGround( 'Cons_s (LCons( par2 (LCons( par1 LEOF )) )) )) (
         (match rval (
            ()
            ( (App( le re )) (
               (let e2 (initialize-c-struct( ctx le case-number (+( field-index 1_u64 )) )))
               (let e1 (compile-expr( ctx re 0_i64 Used )))
               (if (is-sized-array par1) (
                  (set e1 (.set( e1 'expression_s (
                     (+(
                        (+(
                           (SAtom 'memcpy\[&rvalue.field__s)
                           (SAtom(to-string( (+( (*( case-number 1000_u64 )) field-index )) )))
                        ))
                        (+(
                           (+(
                              (SAtom ',_s)
                              (.get( e1 'expression_s ))
                           ))
                           (+(
                              (+(
                                 (SAtom ',sizeof\[_s)
                                 (mangle-c-type(.p2(slot( par1 'Array_s ))))
                              ))
                              (+(
                                 (SAtom '\]*_s)
                                 (+(
                                    (SAtom(tag-of(.p1(slot( par1 'Array_s )))))
                                    (SAtom '\]\:_s)
                                 ))
                              ))
                           ))
                        ))
                     ))
                  ))))
               ) (
                  (set e1 (.set( e1 'expression_s (
                     (+( (+( (SAtom 'rvalue.field__s)
                             (SAtom(to-string( (+( (*( case-number 1000_u64 )) field-index )) ))) ))
                         (+( (+( (SAtom '=_s) (.get( e1 'expression_s )) )) (SAtom '\:_s) ))
                     ))
                  ))))
               ))
               (set r (fragment::chain( e1 e2 )))
               (set r (.set( r 'expression_s (
                  (+( (.get( e1 'expression_s )) (.get( e2 'expression_s )) ))
               ))))
            ))
         ))
      ))
      ( _ (
         (let par1 (typeof rval))
         (if (is-sized-array par1) (
            (set r (compile-expr( ctx rval 0_i64 Used )))
            (set r (.set( r 'expression_s (
               (+(
                  (+(
                     (SAtom 'memcpy\[&rvalue.field__s)
                     (SAtom(to-string( (+( (*( case-number 1000_u64 )) field-index )) )))
                  ))
                  (+(
                     (+(
                        (SAtom ',_s)
                        (.get( r 'expression_s ))
                     ))
                     (+(
                        (+(
                           (SAtom ',sizeof\[_s)
                           (mangle-c-type(.p2(slot( par1 'Array_s ))))
                        ))
                        (+(
                           (SAtom '\]*_s)
                           (+(
                              (SAtom(tag-of(.p1(slot( par1 'Array_s )))))
                              (SAtom '\]\:_s)
                           ))
                        ))
                     ))
                  ))
               ))
            ))))
         ) (
            (set r (compile-expr( ctx rval 0_i64 Used )))
            (set r (.set( r 'expression_s (
               (+( (+( (SAtom 'rvalue.field__s)
                       (SAtom(to-string( (+( (*( case-number 1000_u64 )) field-index )) ))) ))
                   (+( (+( (SAtom '=_s) (.get( r 'expression_s )) )) (SAtom '\:_s) ))
               ))
            ))))
         ))
      ))
   ))
   r
) Fragment);
