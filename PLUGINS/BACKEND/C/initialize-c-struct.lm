
initialize-c-struct := Î»(: ctx FContext)(: rval AST)(: case-number U64)(: field-index U64). (: (
   (let r (fragment::new()))
   (match (slot( (typeof rval) 'Cons_s )) (
      ()
      ( (TGround( 'Cons_s (LCons( p2 (LCons( p1 LEOF )) )) )) (
         (match rval (
            ()
            ( (App( le re )) (
               (let e2 (initialize-c-struct( ctx le case-number (+( field-index 1_u64 )) )))
               (if (is-sized-array p1) (
                  (print 'Const\sArray\s_s)(print p1)(print '\n_s)
               ) (
                  (let e1 (compile-expr( ctx re 0_i64 Used )))
                  (set e1 (fragment::set( e1 'expression_s (
                     (+( (+( (SAtom 'rvalue.field__s)
                             (SAtom(to-string( (+( (*( case-number 1000_u64 )) field-index )) ))) ))
                         (+( (+( (SAtom '=_s) (fragment::get( e1 'expression_s )) )) (SAtom '\:_s) ))
                     ))
                  ))))
                  (set r (fragment::chain( e1 e2 )))
                  (set r (fragment::set( r 'expression_s (
                     (+( (fragment::get( e1 'expression_s )) (fragment::get( e2 'expression_s )) ))
                  ))))
               ))
            ))
         ))
      ))
      ( _ (
         (let p1 (typeof rval))
         (if (is-sized-array p1) (
            (print 'Const\sArray\s_s)(print p1)(print '\n_s)
         ) (
            (set r (compile-expr( ctx rval 0_i64 Used )))
            (set r (fragment::set( r 'expression_s (
               (+( (+( (SAtom 'rvalue.field__s)
                       (SAtom(to-string( (+( (*( case-number 1000_u64 )) field-index )) ))) ))
                   (+( (+( (SAtom '=_s) (fragment::get( r 'expression_s )) )) (SAtom '\:_s) ))
               ))
            ))))
         ))
      ))
   ))
   r
) Fragment);
