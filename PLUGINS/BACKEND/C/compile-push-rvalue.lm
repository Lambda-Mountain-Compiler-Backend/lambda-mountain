
compile-push-rvalue := λ(: ctx FContext)(: rval AST)(: offset I64). (: (
   (compile-push-rvalue( ctx rval offset 0_u64 1_u64 ))
) Fragment);

compile-push-rvalue := λ(: ctx FContext)(: rval AST)(: offset I64)(: count U64)(: left-assoc U64). (: (
   (let r (fragment::new()))
   (match (slot( (typeof rval) 'Cons_s )) (
      ()
      ( (TGround( 'Cons_s (LCons( p2 (LCons( p1 LEOF )) )) )) (
         (match rval (
            ()
            ( (App( le re )) (
               (if (&&( (is-t( p2 'Type_s )) (==( (arity p2) 1_u64 )) )) (
                  (set r (compile-push-rvalue( ctx le offset count left-assoc )))
               ) (
                  (let e1 (compile-push-rvalue( ctx le offset count left-assoc )))
                  (let e2 (compile-expr( ctx re (.offset e1) Used )))
                  (set r (fragment::chain( e1 e2 )))
                  (if left-assoc (
                     (set r (fragment::set( r 'expression_s (
                        (+( (+( (fragment::get( e1 'expression_s )) (SAtom ',_s) )) (fragment::get( e2 'expression_s )) ))
                     ))))
                  ) (
                     (set r (fragment::set( r 'expression_s (
                        (+( (+( (fragment::get( e2 'expression_s )) (SAtom ',_s) )) (fragment::get( e1 'expression_s )) ))
                     ))))
                  ))
               ))
            ))
         ))
      ))
      ( p2 (
         (if (&&( (is-t( p2 'Type_s )) (==( (arity p2) 1_u64 )) )) (
            (set r (fragment::new()))
         ) (
            (set r (compile-expr( ctx rval offset Used )))
         ))
      ))
   ))
   r
) Fragment);
