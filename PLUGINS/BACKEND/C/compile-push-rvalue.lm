
compile-push-rvalue := λ(: ctx FContext)(: rval AST)(: offset I64). (: (
   (compile-push-rvalue( ctx rval offset 0_u64 1_u64 ))
) Fragment);

compile-push-rvalue := λ(: ctx FContext)(: rval AST)(: offset I64)(: count U64)(: left-assoc U64). (: (
   (let r (mk-fragment()))
   (match (.slot( (typeof rval) 'Cons_s )) (
      ()
      ( (TGround( 'Cons_s (LCons( p2 (LCons( p1 LEOF )) )) )) (
         (match rval (
            ()
            ( (App( le re )) (
               (let e1 (compile-push-rvalue( ctx le offset count left-assoc )))
               (let e2 (compile-expr( ctx re 0_i64 (Used()) )))
               (set r (fragment::chain( e1 e2 )))
               (if left-assoc (
                  (set r (.set( r 'expression_s (
                     (+( (+( (.get( e1 'expression_s )) (SAtom ',_s) )) (.get( e2 'expression_s )) ))
                  ))))
               ) (
                  (set r (.set( r 'expression_s (
                     (+( (+( (.get( e2 'expression_s )) (SAtom ',_s) )) (.get( e1 'expression_s )) ))
                  ))))
               ))
            ))
         ))
      ))
      ( _ (
         (let p2 (typeof rval))
         (set r (compile-expr( ctx rval offset (Used()) )))
      ))
   ))
   r
) Fragment);
