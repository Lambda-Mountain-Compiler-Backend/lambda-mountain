
compile-expr-direct := Î»(: ctx FContext)(: term AST)(: stack-offset I64)(: used IsUsed). (: (
   (let e (fragment::new()))
   (set.context( e (close ctx) ))
   (match term (
      ()
      ( ASTNil (
         (set.type( e (denormalize(t1 'Nil_s)) ))
         (set e (fragment::set( e 'expression_s (SAtom '\[{}\]_s) )))
      ))
      ( ASTEOF () )
      ( (Var( id _ )) (
         # TODO, this is being called instead of function
         (set e (fragment-context::lookup( ctx id (typeof term) term )))
         (set.context( e (close ctx) ))
      ))
      ( (Lit( val _ )) (
         (let ltype (typeof term))
         (if (is-t( ltype 'String_s )) (
            (set e (compile-declare-cstring( val )))
         ) (
            (let isa-fragment False_u8)
            (if (==( isa-fragment True_u8 )) (
               (set e (fragment::expression val))
            ) (
               (if (non-zero(class-of-tag val)) (
                  (let tag-index (index-of-tag val))
                  (set e (fragment::set( e 'expression_s (
                     (+(
                        (+(
                           (SAtom '\[{_s)
                           (mangle-c-type ltype)
                        ))
                        (+(
                           (SAtom '\srvalue={_s)
                           (+(
                              (SAtom(to-string tag-index))
                              (SAtom '}\:rvalue\:}\]_s)
                           ))
                        ))
                     ))
                  ))))
               ) (
                  (match val (
                     ()
                     ( 'True_s (set e (fragment::expression '\[1\]_s)) )
                     ( 'False_s (set e (fragment::expression '\[0\]_s)) )
                     ( '\\t_s (set e (fragment::expression '\[9\]_s)) )
                     ( '\\n_s (set e (fragment::expression '\[10\]_s)) )
                     ( '\\s_s (set e (fragment::expression '\[32\]_s)) )
                     ( '\\o_s (set e (fragment::expression '\[35\]_s)) )
                     ( '\\`_s (set e (fragment::expression '\[39\]_s)) )
                     ( '\\[_s (set e (fragment::expression '\[40\]_s)) )
                     ( '\\]_s (set e (fragment::expression '\[41\]_s)) )
                     ( '\\:_s (set e (fragment::expression '\[59\]_s)) )
                     ( _ (
                        (if (is-t( ltype 'L_s )) (
                           (set e (fragment::set( e 'expression_s (SAtom val) )))
                        ) (
                           (set e (fragment::set( e 'expression_s (
                              (+( (+( (SAtom '\[_s) (SAtom val) )) (SAtom '\]_s) ))
                           ))))
                        ))
                     ))
                  ))
               ))
            ))
         ))
         (set.context( e (close ctx) ))
         (set.type( e (denormalize ltype) ))
      ))
      ( (App( (Lit( ':_s _ )) (App( t (AType tt) )) )) (
         (set e (compile-expr( ctx t stack-offset used )))
      ))
      ( (App( (Var( 'scope_s _ )) t )) (
         (set e (compile-expr( ctx t stack-offset Tail )))
         (set.context( e (close ctx) ))
      ))
      ( (App( (Var( 'open_s _ )) t )) (
         (let tt (typeof t))
         (if (is-t( tt 'Array_s )) (
            (match (slot( tt 'Array_s )) (
               ()
               ( (TGround( 'Array_s (LCons( _ (LCons( TAny LEOF )) )) )) (
                  (set e (compile-expr( ctx t stack-offset Used )))
               ) )
               ( (TGround( 'Array_s (LCons( TAny (LCons( inner-tt LEOF )) )) )) (
                  (set e (compile-stack-calls( ctx 'open_s TAny (t1 'Nil_s) t stack-offset Used )))
               ))
            ))
         ) (
            (set e (compile-stack-calls( ctx 'open_s TAny (t1 'Nil_s) t stack-offset Used )))
         ))
      ))
      ( (App( (Var( 'sizeof_s _ )) (AType tt) )) (
         (let sz (sizeof-type( tt )))
         (set e (fragment::expression(
            (+( (SAtom '\[sizeof\[_s)
                (+( (mangle-c-type tt) (SAtom '\]\]_s) ))
            ))
         )))
         (let et (TAnd( 
            (close(t1 'Literal_s))
            (close(TAnd(
               (close(t1 'Constant_s))
               (close(TAnd(
                  (close(t1 'U64_s))
                  (close(t2( 'Sized_s (t1 '8_s) )))
               )))
            )))
         )))
         (set.type( e et ))
         (set.context( e (close ctx) ))
      ))
      ( (App( (Var( 'as_s _ )) (App( t (AType tt) )) )) (
         (set e (compile-expr( ctx t stack-offset used )))
         (set.type( e (typeof term) ))
         (set e (fragment::set( e 'expression_s (
            (+(
               (+(
                  (SAtom '\[\[_s)
                  (mangle-c-type (typeof term))
               ))
               (+(
                  (SAtom '\]\[_s)
                  (+(
                     (fragment::get( e 'expression_s ))
                     (SAtom '\]\]_s)
                  ))
               ))
            ))
         ))))
      ))
      ( (App( (App( (App( (Var( 'if_s _ )) cond )) t )) f )) (
         (let rsp-offset (+( stack-offset -8_i64 )))
         (let ec (cc-blob( ctx 'into-branch-conditional_s cond rsp-offset )))
         (let et (compile-expr( (open(.context ec)) t (.offset ec) Tail )))
         (let end-offset (.offset et))
         (set.type( et (typeof t) ))
         (let ef (compile-expr( (open(.context ec)) f (.offset ec) Tail )))
         (set.type( ef (typeof f) ))
         (if (is-t( (typeof f) 'Never_s )) (
            (set ef (never-as-expr-type( ef (typeof t) )))
         ) ())

         (let ictx (fragment::new()))
         (set ictx (fragment::set( ictx 'rsp-offset_s (SAtom(to-string rsp-offset)) ))) 
         (set ictx (fragment::set( ictx 'end-offset_s (SAtom(to-string end-offset)) ))) 
         (set ictx (fragment::set( ictx 'return-size_s (SAtom(to-string(sizeof-type(typeof term)))) ))) 
         (set.type( ictx (t1( 'ImplicitContext_s )) ))
        
         (set ctx (fragment-context::bind( ctx 'ictx_s (t1 'ImplicitContext_s) ictx )))
         (set ctx (fragment-context::bind( ctx 'c_s (t1 'BranchConditional_s) ec )))
         (set ctx (fragment-context::bind( ctx 't_s (typeof t) et )))
         (set ctx (fragment-context::bind( ctx 'f_s (typeof f) ef )))
         (let a-tt (t3( 'Cons_s 
            (t3( 'Cons_s 
               (t3( 'Cons_s (t1 'ImplicitContext_s) (typeof f) ))
               (typeof t)
            ))
            (t1 'BranchConditional_s)
         )))

         (set e (cc-blob( ctx 'primitive::if_s a-tt stack-offset term )))

         (set.context( e (.context et) ))
         (if (>( (sizeof-type(typeof term)) 8_u64 )) (
            (set.type( e (and( (typeof term) (t1 'StackVariable_s) )) ))
         ) (
            (set.type( e (typeof term) ))
         ))
      ))
      ( (App( (Abs( (@( lhs-t (Var( lhs _ )) )) ASTNil tlt )) rhs )) (
         (let rtype (typeof lhs-t))
         (let size (sizeof-aligned rtype))
         (let bind-offset (-( stack-offset (as size I64) )))
         (let fr (fragment::local-variable( bind-offset rtype )))
         (set ctx (fragment-context::bind( ctx lhs rtype fr )))
         (let prepost (mangle-c-declaration rtype))
         (if (is-const-array rtype) (
            (set e (compile-expr( ctx rhs stack-offset Used )))
            (set e (fragment::set( e 'frame_s (
               (+(
                  (+(
                     (.first prepost)
                     (SAtom '\s_s)
                  ))
                  (+(
                     (fragment::get( fr 'expression_s ))
                     (+(
                        (+(
                           (.second prepost)
                           (SAtom '=_s)
                        ))
                        (+(
                           (fragment::get( e 'expression_s ))
                           (SAtom '\:\n_s)
                        ))
                     ))
                  ))
               ))
            ))))
            (set e (fragment::set( e 'expression_s SNil )))
         ) (
            (match rhs (
               ()
               ( (App( (Lit( ':_s _ )) (App( (Var( '__uninitialized_s _ )) (AType tt) )) )) () )
               ( _ (
                  (set e (compile-expr( ctx rhs stack-offset Used )))
                  (set e (fragment::set( e 'expression_s (
                     (+(
                        (+(
                           (SAtom '\[{_s)
                           (fragment::get( fr 'expression_s ))
                        ))
                        (+(
                           (SAtom '=_s)
                           (+(
                              (fragment::get( e 'expression_s ))
                              (SAtom '\:\[{}\]\:}\]\n_s)
                           ))
                        ))
                     ))
                  ))))
               ))
            ))
            (set e (fragment::set( e 'frame_s (
               (+(
                  (fragment::get( e 'frame_s ))
                  (+(
                     (+(
                        (.first prepost)
                        (SAtom '\s_s)
                     ))
                     (+(
                        (fragment::get( fr 'expression_s ))
                        (+(
                           (.second prepost)
                           (SAtom '\:\n_s)
                        ))
                     ))
                  ))
               ))
            ))))
         ))
         (set.context( e (close ctx) ))
         (set.type( e (typeof term) ))
      ))
      ( (App( f a )) (
         (if (is-arrow(typeof f)) (
            (match f (
               ()
               ( (Var( fname _ )) (
                  (set e (compile-stack-calls( ctx fname (typeof f) (typeof term) a stack-offset used )))
               ))
               ( (App( (Lit( ':_s _ )) (App( (Var( fname _ )) (AType ft) )) )) (
                  (set e (compile-stack-calls( ctx fname (typeof f) (typeof term) a stack-offset used )))
               ))
               ( (Lit( fname _ )) (
                  (set e (compile-constructor( ctx fname (typeof term) (typeof a) a stack-offset )))
               ))
               ( (App( (Lit( ':_s _ )) (App( (Lit( fname _ )) (AType ft) )) )) (
                  (set e (compile-constructor( ctx fname (typeof term) (typeof a) a stack-offset )))
               ))
            ))
         ) (
            (if (is( used Unused )) (scope(
               (let e1 (compile-expr( ctx f stack-offset Unused )))
               (let e2 (compile-expr( (open(.context e1)) a (.offset e1) Unused )))
               (set e (fragment::chain( e1 e2 )))
               (set.type( e (typeof term) ))
            )) (scope(
               (let e1 (compile-expr( ctx f stack-offset Unused )))
               (let e2 (compile-expr( (open(.context e1)) a (.offset e1) Used )))
               (set e (fragment::chain( e1 e2 )))
               (set.type( e (typeof term) ))
            )))
         ))
      ))
      ( t (
         (print 'Unknown\sTerm\sIn\scompile-expr-direct:\s_s)(print t)(print '\n_s)
      ))
   ))
   e
) Fragment);

