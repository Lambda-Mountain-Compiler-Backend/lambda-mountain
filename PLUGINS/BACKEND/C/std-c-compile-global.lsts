
let std-c-force-imports = {} :: HashtableEq<CString,Bool>;

let std-c-force-import-clib(lib: CString): Nil = (
   std-c-force-imports = std-c-force-imports.bind(lib, true);
);

let std-c-finish-forced-imports(): S = (
   (if std-c-force-imports.has(c"stdlib.h") then SAtom{c"#include <stdlib.h>\n"} else SNil{}) +
   (if std-c-force-imports.has(c"stdio.h") then SAtom{c"#include <stdio.h>\n"} else SNil{}) +
   (if std-c-force-imports.has(c"regex.h") then SAtom{c"#include <regex.h>\n"} else SNil{})
);

let std-c-compile-global(ctx: FContext, k: CString, term: AST): Nil = (
   if k == c"main" {
      compile-global-c-has-main = true;
   };
   if k==c"abort" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"scanf" then std-c-force-import-clib(c"stdio.h")
   else if k==c"fscanf" then std-c-force-import-clib(c"stdio.h")
   else if k==c"sscanf" then std-c-force-import-clib(c"stdio.h")
   else if k==c"printf" then std-c-force-import-clib(c"stdio.h")
   else if k==c"fprintf" then std-c-force-import-clib(c"stdio.h")
   else if k==c"sprintf" then std-c-force-import-clib(c"stdio.h")
   else if k==c"snprintf" then std-c-force-import-clib(c"stdio.h")
   else if k==c"vfprintf" then std-c-force-import-clib(c"stdio.h")
   else if k==c"vprintf" then std-c-force-import-clib(c"stdio.h")
   else if k==c"vsprintf" then std-c-force-import-clib(c"stdio.h")
   else if k==c"vsnprintf" then std-c-force-import-clib(c"stdio.h")
   else if k==c"vfscanf" then std-c-force-import-clib(c"stdio.h")
   else if k==c"vfscanf" then std-c-force-import-clib(c"stdio.h")
   else if k==c"vscanf" then std-c-force-import-clib(c"stdio.h")
   else if k==c"vsscanf" then std-c-force-import-clib(c"stdio.h")
   else if k==c"fgetc" then std-c-force-import-clib(c"stdio.h")
   else if k==c"getc" then std-c-force-import-clib(c"stdio.h")
   else if k==c"getchar" then std-c-force-import-clib(c"stdio.h")
   else if k==c"fputc" then std-c-force-import-clib(c"stdio.h")
   else if k==c"putc" then std-c-force-import-clib(c"stdio.h")
   else if k==c"putchar" then std-c-force-import-clib(c"stdio.h")
   else if k==c"fgets" then std-c-force-import-clib(c"stdio.h")
   else if k==c"puts" then std-c-force-import-clib(c"stdio.h")
   else if k==c"fputs" then std-c-force-import-clib(c"stdio.h")
   else if k==c"ungetc" then std-c-force-import-clib(c"stdio.h")
   else if k==c"fread" then std-c-force-import-clib(c"stdio.h")
   else if k==c"fwrite" then std-c-force-import-clib(c"stdio.h")
   else if k==c"fseek" then std-c-force-import-clib(c"stdio.h")
   else if k==c"ftell" then std-c-force-import-clib(c"stdio.h")
   else if k==c"rewind" then std-c-force-import-clib(c"stdio.h")
   else if k==c"fgetpos" then std-c-force-import-clib(c"stdio.h")
   else if k==c"fsetpos" then std-c-force-import-clib(c"stdio.h")
   else if k==c"clearerr" then std-c-force-import-clib(c"stdio.h")
   else if k==c"feof" then std-c-force-import-clib(c"stdio.h")
   else if k==c"ferror" then std-c-force-import-clib(c"stdio.h")
   else if k==c"perror" then std-c-force-import-clib(c"stdio.h")
   else if k==c"div" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"ldiv" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"lldiv" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"mblen" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"mbtowc" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"mbtowcs" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"mbstowcs" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"wcstombs" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"register_t" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"bsearch" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"qsort" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"rand" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"system" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"getenv" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"strtold" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"strtol" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"strtoul" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"strtoll" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"strtoull" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"atof" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"atoi" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"atol" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"atoll" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"strtod" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"strtof" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"strtold" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"strtol" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"strtoul" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"rename" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"tmpfile" then std-c-force-import-clib(c"stdio.h")
   else if k==c"fopen" then std-c-force-import-clib(c"stdio.h")
   else if k==c"freopen" then std-c-force-import-clib(c"stdio.h")
   else if k==c"div_t" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"ldiv_t" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"lldiv_t" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"__fpos_t" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"__fpos64_t" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"fpos_t" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"fpos64_t" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"remove" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"__ctype_get_mb_cur_max" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"__compar_fn_t" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"__fsid_t" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"__mbstate_t" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"regexec" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"regcomp" then std-c-force-import-clib(c"regex.h")
   else if k==c"regexec" then std-c-force-import-clib(c"regex.h")
   else if k==c"regfree" then std-c-force-import-clib(c"regex.h")
   else if k==c"regerror" then std-c-force-import-clib(c"regex.h")
   else if k==c"regmatch_t" then std-c-force-import-clib(c"regex.h")
   else if k==c"regex_t" then std-c-force-import-clib(c"regex.h")
   else if k==c"reg_errcode_t" then std-c-force-import-clib(c"regex.h")
   else match term {
      App{left:Lit{key:c":"}, right:App{left:Var{key:c"__uninitialized"}, right:AType{tt=tt}}} => (
         (let pre-decl, let post-decl) = std-c-mangle-declaration(tt);
         let text = SNil;
         text = text + pre-decl;
         text = text + SAtom{c" "};
         text = text + SAtom{k};
         text = text + post-decl;
         text = text + SAtom{c";\n"};
         assemble-header-section = assemble-header-section + text;
      );
      App{left:Lit{key:c":"}, right:App{t=left, right:AType{tt=tt}}} => (
         let gend = false;
         if tt.is-t(c"C-Fragment") {
            match t {
               Lit{key=key} => (
                  assemble-header-section = assemble-header-section + SAtom{key};
                  gend = true;
               );
               _ => ();
            }
         };
         if not(gend) {
            (let pre-decl, let post-decl) = std-c-mangle-declaration(tt);
            let text = SNil;
            text = text + pre-decl;
            text = text + SAtom{c" "};
            text = text + SAtom{k};
            text = text + post-decl;
            text = text + SAtom{c" = "};
            let inner-expr = std-c-compile-expr( ctx, t, false );
            text = text + inner-expr.get(c"expression");
            text = text + SAtom{c";\n"};
            assemble-header-section = assemble-header-section + text;
         }
      );
      Abs{lhs=lhs,rhs=rhs,tt=tt} => (
         ctx = std-c-compile-destructure-args( ctx, lhs, tt.is-t(c"Blob") );
         let loc = term.location;
         let initialized = match rhs {
            App{ left:Lit{key:c":"}, right:App{ left:Var{key:c"__uninitialized"}, right:AType{} } } => false;
            _ => true;
         };
         if not(config-strip-debug) || not(initialized) {
            let text = SNil;
            if not(config-strip-debug) && loc.filename != c"Unknown" {
               text = text + SAtom{c"\n#line "};
               text = text + SAtom{to-string(loc.line)};
               text = text + SAtom{c" "};
               text = text + SAtom{loc.filename};
               text = text + SAtom{c"\n"};
            };
            text = text + std-c-mangle-type(typeof(rhs));
            text = text + SAtom{c" "};
            text = text + SAtom{k};
            text = text + SAtom{c"("};
            text = text + std-c-compile-function-args(ctx, lhs);
            text = text + SAtom{c");\n"};
            assemble-header-section = assemble-header-section + text;
         };

         if initialized {
            let text = SNil;
            if not(config-strip-debug) && loc.filename != c"Unknown" {
               text = text + SAtom{c"\n#line "};
               text = text + SAtom{to-string(loc.line)};
               text = text + SAtom{c" "};
               text = text + SAtom{loc.filename};
               text = text + SAtom{c"\n"};
            };
            text = text + std-c-mangle-type(typeof(rhs));
            text = text + SAtom{c" "};
            text = text + SAtom{k};
            text = text + SAtom{c"("};
            text = text + std-c-compile-function-args(ctx, lhs);
            text = text + SAtom{c")"};

            let inner-expr = std-c-compile-expr( ctx, rhs, false );
            text = text + inner-expr.get(c"expression");
            assemble-text-section = assemble-text-section + text + SAtom{c"\n"};
         };
      );
      t => (
         print("Unknown std-c-compile-global "); std-c-print(t); print("\n");
      );
   }
);
