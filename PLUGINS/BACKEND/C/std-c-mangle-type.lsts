
let std-c-mangle-type(tt: Type): S = (
   tt = normalize(tt).rewrite-opaque-type-alias;
   let r = std-c-mangle-type-internal(tt);
   r
);

let std-c-mangle-type-internal(tt: Type): S = (
   match tt {
      TAnd{ left=left, right=right } => (
         let lt = std-c-mangle-type-internal(left);
         let rt = std-c-mangle-type-internal(right);
         if non-zero(lt) && non-zero(rt) then lt + SAtom{c" "} + rt
         else if non-zero(lt) then lt
         else rt
      );
      TAny{} => SNil;
      TGround{tag:c"Type", parameters:[inner-tt..]} => std-c-mangle-type-internal(inner-tt);
      TGround{tag:c"Array", parameters:[_.. array-base..]} => (
         if array-base.is-arrow
         then std-c-mangle-type-internal(array-base)
         else ( std-c-mangle-type-internal(array-base) + SAtom{c"*"} );
      );
      TGround{tag:c"Arrow"} => (
         (let pre, let post) = std-c-mangle-declaration-internal(tt);
         let td-id = uuid();
         assemble-header-section = assemble-header-section
                                 + SAtom{c"typedef "}
                                 + pre
                                 + SAtom{c" "}
                                 + SAtom{td-id}
                                 + SAtom{c" "}
                                 + post
                                 + SAtom{c";\n"};
         SAtom{td-id}
      );
      TGround{tag:c"C", parameters:[TGround{tag1=tag}..]} => (
         SAtom{tag1}
      );
      _ => SNil;
   }
);
