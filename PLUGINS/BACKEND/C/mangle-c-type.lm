
mangle-c-type := 位(: tt Type)(: blame AST). (: (
   (set tt (normalize tt))
   (set tt (.rewrite-opaque-type-alias tt))
   (let r (mangle-c-type-internal( tt blame )))
   (if (not(non-zero r)) (
      (print 'Failed\sTo\sMangle\s_s)(print tt)(print '\n_s)
      (print 'At\s_s)(print (.location blame))(print '\n_s)
      (exit 1_u64)
   ) ())
   r
) S);

mangle-c-type-internal := 位(: tt Type)(: blame AST). (: (
   (let r SNil)
   (match tt (
      ()
      ( (TAnd( conjugate )) (
         (for-each-v (c in conjugate) (
            (if (non-zero r) () (set r (mangle-c-type( c blame ))))
         ))
      ))
      ( TAny (set r (SAtom 'void_s)) )
      ( (TVar _) () )
      ( (TGround( 'C_s (LCons( (TGround( rs _ )) LEOF )) )) (set r (SAtom rs)) )
      ( (TGround( 'Type_s (LCons( _ LEOF )) )) (set r (SAtom 'int_s)) )
      ( (TGround( 'Nil_s _ )) (set r (SAtom 'void_s)) )
      ( (TGround( 'Never_s _ )) (set r (SAtom 'void_s)) )
      ( (TGround( 'U8_s _ )) (set r (SAtom 'char_s)) )
      ( (TGround( 'U16_s _ )) (set r (SAtom 'unsigned\sshort_s)) )
      ( (TGround( 'U32_s _ )) (set r (SAtom 'unsigned\sint_s)) )
      ( (TGround( 'U64_s _ )) (set r (SAtom 'unsigned\slong_s)) )
      ( (TGround( 'I8_s _ )) (set r (SAtom 'signed\schar_s)) )
      ( (TGround( 'I16_s _ )) (set r (SAtom 'signed\sshort_s)) )
      ( (TGround( 'I32_s _ )) (set r (SAtom 'signed\sint_s)) )
      ( (TGround( 'I64_s _ )) (set r (SAtom 'signed\slong_s)) )
      ( (TGround( 'F64_s _ )) (set r (SAtom 'double_s)) )
      ( (TGround( 'String_s _ )) (set r (SAtom 'char*_s)) )
      ( (TGround( 'File_s _ )) (set r (SAtom 'FILE_s)) )
      ( (TGround( 'IO::File_s _ )) (set r (SAtom 'FILE*_s)) )
      ( (TGround( 'PID_s _ )) (set r (SAtom 'pid_t_s)) )
      ( (TGround( 'Regex_s _ )) (set r (SAtom 'regex_t_s)) )
      ( (TGround( 'Array_s (LCons( _ (LCons( array-base _ )) )) )) (
         (if (.is-arrow array-base) (
            (set r (mangle-c-type( array-base blame )))
         ) (
            (set r (+( (mangle-c-type( array-base blame )) (SAtom '*_s) )))
         ))
      ))
      ( (TGround( 'Arrow_s _ )) (
         (let pre-post (mangle-c-declaration-internal( tt blame )))
         (let td-id (uuid()))
         (set assemble-header-section (+(
            assemble-header-section
            (+(
               (+( (SAtom 'typedef\s_s) (+( (.first pre-post) (SAtom '\s_s) )) ))
               (+( (+( (SAtom td-id) (+( (SAtom '\s_s) (.second pre-post) )) )) (SAtom '\:\n_s) ))
            ))
         )))
         (set r (SAtom td-id))
      ))
      ( (TGround( tag _ )) (
         (if (.has-prefix( tag 'C__s )) (
            (set tag (.remove-prefix( tag 'C__s )))
            (set tag (.replace( tag '__s '\s_s )))
            (set tag (.replace( tag '\s\s_s '__s )))
            (set r (SAtom tag))
         ) (
            (let c-type-name (.lookup( index-c-type-ordinal tt 'UnknownCTypename_s )))
            (if (==( c-type-name 'UnknownCTypename_s )) () (
               (set r (+(
                  (SAtom 'LM__s)
                  (mangle-identifier tt)
               )))
            ))
         ))
      ))
   ))
   r
) S);

mangle-c-declaration := 位(: tt Type)(: blame AST). (: (
   (set tt (normalize tt))
   (let r (mangle-c-declaration-internal( tt blame )))
   r
) Tuple<S,S>);

mangle-c-declaration-internal := 位(: tt Type)(: blame AST). (: (
   (let pre SNil)
   (let post SNil)
   (match tt (
      ()
      ( (TGround( 'Array_s (LCons( (TGround( 'CONST_s _ )) (LCons( array-base _ )) )) )) (
         (let rst (mangle-c-declaration-internal( array-base blame )))
         (set pre (.first rst))
         (set post (+(
            (.second rst)
            (SAtom '[]_s)
         )))
      ))
      ( (TGround( 'Array_s (LCons( (TGround( index _ )) (LCons( array-base _ )) )) )) (
         (let rst (mangle-c-declaration-internal( array-base blame )))
         (set pre (.first rst))
         (set post (+(
            (.second rst)
            (+( (+( (SAtom '[_s) (SAtom index) )) (SAtom ']_s) ))
         )))
      ))
      ( (TGround( 'Arrow_s (LCons( rng (LCons( dom _ )) )) )) (
         (let returns (mangle-c-type-internal( rng blame )))
         (let accepts (mangle-c-type-internal( dom blame )))
         (set pre (+( returns (SAtom '\[*_s) )))
         (set post (+( (SAtom '\]\[_s) (+( accepts (SAtom '\]_s) )) )))
      ))
      ( _ (
         (set pre (mangle-c-type( tt blame )))
      ))
   ))
   (Tuple( pre post ))
) Tuple<S,S>);





