
compile-program-ordered := Î»(: global-ctx FContext)(: program AST). (: (
   (let ordered (: LEOF List<AST>))
   (while (non-zero program) (match program (
      ()
      ( (Seq( rst t )) (
         (set ordered (cons( t ordered )))
         (set program rst)
      ))
   )))
   (for-each (g in ordered) (match g (
      ()
      ( (Glb( k_t rhs )) (
         (if (.is-open(typeof g)) () (
            (compile-global( global-ctx k rhs ))
         ))
      ))
      ( ASTEOF () )
      ( ASTNil () )
      ( (AType _) () )
      ( (Typedef _) () )
      ( (Meta _) () )
      ( t (
         (let e (compile-expr( global-ctx t 0_i64 Used )))
         (let text (+( (+( (.get( e 'frame_s )) (.get( e 'expression_s )) )) (SAtom '\:\n_s) )))
         (set assemble-global-initializer-section (SCons( (close assemble-global-initializer-section) (close text) )))
      ))
   )))
   (if (non-zero compile-global-c-main-term) (
      (compile-global-main( global-ctx 'main_s compile-global-c-main-term ))
   ) ())
) Nil);

