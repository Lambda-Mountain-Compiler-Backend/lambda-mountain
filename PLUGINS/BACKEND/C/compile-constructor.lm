
compile-constructor := Î»(: ctx FContext)(: tag-name String)(: return-type Type)(: args-type Type)(: args AST)(: offset I64). (: (
   (let r (fragment::new()))
   (if (is( config-assemble-mode AssembleC )) (
      (let bare-ordinal (with-only-class return-type))
      (let c-type-name (.lookup( index-c-type-ordinal (normalize bare-ordinal) 'UnknownCTypename_s )))
      (let case-number (index-of-tag tag-name))
      (set r (initialize-c-struct( ctx args case-number 1_u64 )))
      (set r (fragment::set( r 'expression_s (
         (+(
            (+( (+( (SAtom '\[{_s) (SAtom c-type-name) )) (SAtom '\srvalue={.field_0=_s) ))
            (+( (+( (SAtom(to-string case-number)) (fragment::get( r 'expression_s )) )) (SAtom '}\:rvalue\:}\]_s) ))
         ))
      ))))
   ) (
      (let whitespace-sz (-( (-( (sizeof-aligned return-type) (sizeof-aligned args-type) )) 8_u64 )))
      (let e (compile-push-rvalue( ctx args (-( offset (as whitespace-sz I64) )) 1_u64 1_u64 )))
      (let constructor-parms (and(
         (t2( 'Constructor_s (t1 tag-name) ))
         (and(
            (t2( 'Sized_s (t1(to-string(sizeof-aligned return-type))) ))
            (and(
               (t2( 'FieldsSized_s (t1(to-string(sizeof-aligned args-type))) ))
               (t2( 'CaseNumber_s (t1(to-string(index-of-tag tag-name))) ))
            ))
         ))
      )))

      (let callee-ctx ctx)
      (set callee-ctx (fragment-context::bind( callee-ctx 'src_s constructor-parms e )))
      (set r (cc-blob( callee-ctx 'push_s constructor-parms offset args )))
   ))
   (let new-offset (-( offset (as (sizeof-type return-type) I64) )))
   (set r (fragment::set-context( r ctx )))
   (set.type( r (denormalize return-type) ))
   r
) Fragment);
