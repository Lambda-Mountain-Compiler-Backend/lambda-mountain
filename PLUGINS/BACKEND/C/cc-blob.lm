
cc-blob := λ(: caller-ctx FContext)(: function-name String)(: args AST)(: offset I64). (: (
   # callee context starts as global-ctx
   # caller context is provided but not propagated
   (let f (fragment-context::lookup( caller-ctx function-name (typeof args) args )))
   (let r (fragment::new()))
   (match (.term f) (
      ()
      ( (Abs( lhs rhs tlt )) (
         (let e1 (cc-args( global-ctx caller-ctx lhs args offset )))
         (set offset (.2 e1))
         (let tmp-cc-e1 (.1 e1)) (let callee-ctx (.2 tmp-cc-e1)) (set caller-ctx (.1 tmp-cc-e1))
         (if (==( function-name 'cdecl::return_s )) (
            (let args-size (fragment-context::lookup( caller-ctx 'cdecl::args-size_s TAny args )))
            (set callee-ctx (fragment-context::bind( callee-ctx 'cdecl::args-size_s (t1 'L_s) args-size )))
         ) ())
         (set r (blob-render( callee-ctx rhs r offset )))
         (let t (.term f))
         (set.type( r (.range(typeof t)) ))
         (set.context( r (close caller-ctx) ))
      ))
   ))
   r
) Fragment);

cc-blob := λ(: callee-ctx FContext)(: function-name String)(: args-tt Type)(: offset I64)(: blame AST). (: (
   (let f (fragment-context::lookup( callee-ctx function-name args-tt blame )))
   (let r (fragment::new()))
   (match (.term f) (
      ()
      ( (Abs( lhs rhs tlt )) (
         (set r (blob-render( callee-ctx rhs r offset )))
         (let t (.term f))
         (set.type( r (.range(typeof t)) ))
         (set.context( r (close callee-ctx) ))
      ))
   ))
   r
) Fragment);

