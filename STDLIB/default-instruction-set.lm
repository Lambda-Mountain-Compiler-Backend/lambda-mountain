
fragment type Reg8  AL  | BL  | CL  | DL  | SIL | DIL | BPL | SPL | R8B | R9B | R10B | R11B | R12B | R13B | R14B | R15B; size Reg8 1;
fragment type Reg16 AX  | BX  | CX  | DX  | SI  | DI  | BP  | SP  | R8W | R9W | R10W | R11W | R12W | R13W | R14W | R15W; size Reg16 2;
fragment type Reg32 EAX | EBX | ECX | EDX | ESI | EDI | EBP | ESP | R8D | R9D | R10D | R11D | R12D | R13D | R14D | R15D; size Reg32 4;
fragment type Reg64 RAX | RBX | RCX | RDX | RSI | RDI | RBP | RSP | R8  | R9  | R10  | R11  | R12  | R13  | R14  | R15;  size Reg64 8;

fragment syscall := λ. (: (.program( \t 'syscall \n )) Nil);

fragment push := λ(: l Constant+U64). (: ( (.program( \t 'pushq \t '$ (.expression l) \n)) ) Nil);
fragment push := λ(: l Constant+I64). (: ( (.program( \t 'pushq \t '$ (.expression l) \n)) ) Nil);

fragment cdecl::return := λ(: l Nil). (: () Nil);
fragment cdecl::return := λ(: l Reg8). (: (  (.program( \t 'mov \t '% (.expression l) , '%al \n))  (.expression 'al)  ) Nil);
fragment cdecl::return := λ(: l Reg16). (: (  (.program( \t 'mov \t '% (.expression l) , '%ax \n))  (.expression 'ax)  ) Nil);
fragment cdecl::return := λ(: l Reg32). (: (  (.program( \t 'mov \t '% (.expression l) , '%eax \n))  (.expression 'eax)  ) Nil);
fragment cdecl::return := λ(: l Reg64). (: (  (.program( \t 'mov \t '% (.expression l) , '%rax \n))  (.expression 'rax)  ) Nil);
fragment cdecl::return := λ(: l Constant+U8). (: (  (.program( \t 'mov \t '$ (.expression l) , '%al \n))  (.expression 'al)  ) Nil);
fragment cdecl::return := λ(: l Constant+U16). (: (  (.program( \t 'mov \t '$ (.expression l) , '%ax \n))  (.expression 'ax)  ) Nil);
fragment cdecl::return := λ(: l Constant+U32). (: (  (.program( \t 'mov \t '$ (.expression l) , '%eax \n))  (.expression 'eax)  ) Nil);
fragment cdecl::return := λ(: l Constant+U64). (: (  (.program( \t 'mov \t '$ (.expression l) , '%rax \n))  (.expression 'rax)  ) Nil);
fragment cdecl::return := λ(: l LocalVariable+U8). (: (  (.program( \t 'mov \t (.expression l) \[ '%rbp \] , '%al \n))  (.expression 'al)  ) Nil);
fragment cdecl::return := λ(: l LocalVariable+U16). (: (  (.program( \t 'mov \t (.expression l) \[ '%rbp \] , '%ax \n))  (.expression 'ax)  ) Nil);
fragment cdecl::return := λ(: l LocalVariable+U32). (: (  (.program( \t 'mov \t (.expression l) \[ '%rbp \] , '%eax \n))  (.expression 'eax)  ) Nil);
fragment cdecl::return := λ(: l LocalVariable+U64). (: (  (.program( \t 'mov \t (.expression l) \[ '%rbp \] , '%rax \n))  (.expression 'rax)  ) Nil);

fragment & := λ(: src LocalVariable). (: ( (.program( \t 'mov \t '%rbp , \s '%r12 \n \t 'add \s '$ (.expression src) , \s '%r12 \n) (.expression( 'r12 ))) ) Reg64);

mov := λ(: src LocalVariable+Sized<size>)(: dst LocalVariable+Sized<size>). (
   (.program ( for word-offset in (range( 0 (div( size 8 )) )) (
      \t 'movq \s (+ (mul( word-offset 8 )) (.expression src)) \[ '%rbp \] , \s '%rax \n
      \t 'movq \s '%rax , \s (+ (mul( word-offset 8 )) (.expression dst)) \[ '%rbp \] \n      
   )))
);

fragment mov := λ(: src LocalVariable)(: dst Constant+Reg64). (: ( (.program( \t 'mov \t (.expression src) \[ '%rbp \] , \s '% (.expression dst) \n)) ) Nil);
fragment mov := λ(: src LocalVariable)(: dst Constant+Reg64). (: ( (.program( \t 'mov \t (.expression src) \[ '%rbp \] , \s '% (.expression dst) \n)) ) Nil);
fragment mov := λ(: src Constant+U64)(: dst Constant+Reg64). (: ( (.program( \t 'mov \t '$ (.expression src) , \s '% (.expression dst) \n)) ) Nil);
fragment mov := λ(: src Reg64)(: dst Constant+Reg64). (: ( (.program( \t 'mov \t '% (.expression src) , \s '% (.expression dst) \n)) ) Nil);

fragment mov := λ(: src Constant+U8)(: dst LocalVariable). (: (.program( \t 'movb \s '$ (.expression src) , \s (.expression dst) \[ '%rbp \] \n )) Nil);
fragment mov := λ(: src Constant+U16)(: dst LocalVariable). (: (.program( \t 'movw \s '$ (.expression src) , \s (.expression dst) \[ '%rbp \] \n )) Nil);
fragment mov := λ(: src Constant+U32)(: dst LocalVariable). (: (.program( \t 'movs \s '$ (.expression src) , \s (.expression dst) \[ '%rbp \] \n )) Nil);
fragment mov := λ(: src Constant+U64)(: dst LocalVariable). (: (.program( \t 'movq \s '$ (.expression src) , \s (.expression dst) \[ '%rbp \] \n )) Nil);
fragment mov := λ(: src Constant+I8)(: dst LocalVariable). (: (.program( \t 'movb \s '$ (.expression src) , \s (.expression dst) \[ '%rbp \] \n )) Nil);
fragment mov := λ(: src Constant+I16)(: dst LocalVariable). (: (.program( \t 'movw \s '$ (.expression src) , \s (.expression dst) \[ '%rbp \] \n )) Nil);
fragment mov := λ(: src Constant+I32)(: dst LocalVariable). (: (.program( \t 'movs \s '$ (.expression src) , \s (.expression dst) \[ '%rbp \] \n )) Nil);
fragment mov := λ(: src Constant+I64)(: dst LocalVariable). (: (.program( \t 'movq \s '$ (.expression src) , \s (.expression dst) \[ '%rbp \] \n )) Nil);

fragment mov := λ(: src Reg8)(: dst LocalVariable). (: (.program( \t 'movb \s '% (.expression src) , \s (.expression dst) \[ '%rbp \] \n )) Nil);
fragment mov := λ(: src Reg16)(: dst LocalVariable). (: (.program( \t 'movw \s '% (.expression src) , \s (.expression dst) \[ '%rbp \] \n )) Nil);
fragment mov := λ(: src Reg32)(: dst LocalVariable). (: (.program( \t 'movs \s '% (.expression src) , \s (.expression dst) \[ '%rbp \] \n )) Nil);
fragment mov := λ(: src Reg64)(: dst LocalVariable). (: (.program( \t 'movq \s '% (.expression src) , \s (.expression dst) \[ '%rbp \] \n )) Nil);

fragment cmp := λ(: imm Constant+U64)(: r Constant+Reg64). (: (.program( \t 'cmp \s '$ (.expression imm) , '% (.expression r) \n )) Nil);
fragment cmp := λ(: imm Constant+I64)(: r Constant+Reg64). (: (.program( \t 'cmp \s '$ (.expression imm) , '% (.expression r) \n )) Nil);

fragment jge := λ(: dst Label). (: (.program( \t 'jge \s (.expression dst) \n )) Nil);
fragment jne := λ(: dst Label). (: (.program( \t 'jne \s (.expression dst) \n )) Nil);

fragment neg := λ(: l Reg64). (: (.program( \t 'neg \s '% (.expression l) \n )) Nil);

fragment inc := λ(: l Reg64). (: (.program( \t 'inc \s '% (.expression l) \n )) Nil);

fragment dec := λ(: l Reg64). (: (.program( \t 'dec \s '% (.expression l) \n )) Nil);

fragment div := λ(: l Reg64). (: (.program( \t 'div \s '% (.expression l) \n )) Nil);

fragment add := λ(: src Constant+U8)(: dst LocalVariable). (: (.program( \t 'addb \s '$ (.expression src) , \s (.expression dst) \[ '%rbp \] \n )) Nil);

fragment push := λ(: l Reg64). (: (.program( \t 'push \s '% (.expression l) \n )) Nil);
fragment pop := λ(: l Reg64). (: (.program( \t 'pop \s '% (.expression l) \n )) Nil);
