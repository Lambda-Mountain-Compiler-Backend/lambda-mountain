
type Reg8  AL  | BL  | CL  | DL  | SIL | DIL | BPL | SPL | R8B | R9B | R10B | R11B | R12B | R13B | R14B | R15B;
type Reg16 AX  | BX  | CX  | DX  | SI  | DI  | BP  | SP  | R8W | R9W | R10W | R11W | R12W | R13W | R14W | R15W;
type Reg32 EAX | EBX | ECX | EDX | ESI | EDI | EBP | ESP | R8D | R9D | R10D | R11D | R12D | R13D | R14D | R15D;
type Reg64 RAX | RBX | RCX | RDX | RSI | RDI | RBP | RSP | R8  | R9  | R10  | R11  | R12  | R13  | R14  | R15;

fragment syscall := λ. (: (.program( \t 'syscall \n )) Nil);

fragment push := λ(: l Constant+U8). (: (.program( \t 'pushb \t '$ l \n)) Nil);
fragment push := λ(: l Constant+U16). (: (.program( \t 'pushw \t '$ l \n)) Nil);
fragment push := λ(: l Constant+U32). (: (.program( \t 'pushs \t '$ l \n)) Nil);
fragment push := λ(: l Constant+U64). (: (.program( \t 'pushq \t '$ l \n)) Nil);
fragment push := λ(: l Constant+I8). (: (.program( \t 'pushb \t '$ l \n)) Nil);
fragment push := λ(: l Constant+I16). (: (.program( \t 'pushw \t '$ l \n)) Nil);
fragment push := λ(: l Constant+I32). (: (.program( \t 'pushs \t '$ l \n)) Nil);
fragment push := λ(: l Constant+I64). (: (.program( \t 'pushq \t '$ l \n)) Nil);

