
type Reg8  AL  | BL  | CL  | DL  | SIL | DIL | BPL | SPL | R8B | R9B | R10B | R11B | R12B | R13B | R14B | R15B;
type Reg16 AX  | BX  | CX  | DX  | SI  | DI  | BP  | SP  | R8W | R9W | R10W | R11W | R12W | R13W | R14W | R15W;
type Reg32 EAX | EBX | ECX | EDX | ESI | EDI | EBP | ESP | R8D | R9D | R10D | R11D | R12D | R13D | R14D | R15D;
type Reg64 RAX | RBX | RCX | RDX | RSI | RDI | RBP | RSP | R8  | R9  | R10  | R11  | R12  | R13  | R14  | R15;

fragment syscall := λ. ( \t 'syscall \n );

fragment deref := λ(: r (Fragment Reg64))(: dst (Fragment Reg8)). ( \t 'mov \s '0 \[ '% r \] , \s '% dst \n );
fragment deref := λ(: r (Fragment Reg64))(: dst (Fragment Reg16)). ( \t 'mov \s '0 \[ '% r \] , \s '% dst \n );
fragment deref := λ(: r (Fragment Reg64))(: dst (Fragment Reg32)). ( \t 'mov \s '0 \[ '% r \] , \s '% dst \n );
fragment deref := λ(: r (Fragment Reg64))(: dst (Fragment Reg64)). ( \t 'mov \s '0 \[ '% r \] , \s '% dst \n );

fragment mov := λ(: imm (Fragment U8))(: dst (Fragment Reg8)). ( \t 'mov \s '$ imm , \s '% dst \n );
fragment mov := λ(: imm (Fragment U16))(: dst (Fragment Reg16)). ( \t 'mov \s '$ imm , \s '% dst \n );
fragment mov := λ(: imm (Fragment U32))(: dst (Fragment Reg32)). ( \t 'mov \s '$ imm , \s '% dst \n );
fragment mov := λ(: imm (Fragment U64))(: dst (Fragment Reg64)). ( \t 'mov \s '$ imm , \s '% dst \n );
fragment mov := λ(: imm (Fragment I8))(: dst (Fragment Reg8)). ( \t 'mov \s '$ imm , \s '% dst \n );
fragment mov := λ(: imm (Fragment I16))(: dst (Fragment Reg16)). ( \t 'mov \s '$ imm , \s '% dst \n );
fragment mov := λ(: imm (Fragment I32))(: dst (Fragment Reg32)). ( \t 'mov \s '$ imm , \s '% dst \n );
fragment mov := λ(: imm (Fragment I64))(: dst (Fragment Reg64)). ( \t 'mov \s '$ imm , \s '% dst \n );
fragment mov := λ(: src (Fragment Reg8))(: dst (Fragment Reg8)). ( \t 'mov \s '% src , \s '% dst \n );
fragment mov := λ(: src (Fragment Reg16))(: dst (Fragment Reg16)). ( \t 'mov \s '% src , \s '% dst \n );
fragment mov := λ(: src (Fragment Reg32))(: dst (Fragment Reg32)). ( \t 'mov \s '% src , \s '% dst \n );
fragment mov := λ(: src (Fragment Reg64))(: dst (Fragment Reg64)). ( \t 'mov \s '% src , \s '% dst \n );

fragment push := λ(: imm (Fragment U8)). ( \t 'pushb \s '$ imm \n );
fragment push := λ(: imm (Fragment U16)). ( \t 'pushw \s '$ imm \n );
fragment push := λ(: imm (Fragment U32)). ( \t 'pushs \s '$ imm \n );
fragment push := λ(: imm (Fragment U64)). ( \t 'pushq \s '$ imm \n );
fragment push := λ(: imm (Fragment I8)). ( \t 'pushb \s '$ imm \n );
fragment push := λ(: imm (Fragment I16)). ( \t 'pushw \s '$ imm \n );
fragment push := λ(: imm (Fragment I32)). ( \t 'pushs \s '$ imm \n );
fragment push := λ(: imm (Fragment I64)). ( \t 'pushq \s '$ imm \n );
fragment push := λ(: r (Fragment Reg8)). ( \t 'pushb \s '% r \n );
fragment push := λ(: r (Fragment Reg16)). ( \t 'pushw \s '% r \n );
fragment push := λ(: r (Fragment Reg32)). ( \t 'pushs \s '% r \n );
fragment push := λ(: r (Fragment Reg64)). ( \t 'pushq \s '% r \n );

fragment pop := λ(: r (Fragment Reg8)). ( \t 'popb \s '% r \n );
fragment pop := λ(: r (Fragment Reg16)). ( \t 'popw \s '% r \n );
fragment pop := λ(: r (Fragment Reg32)). ( \t 'pops \s '% r \n );
fragment pop := λ(: r (Fragment Reg64)). ( \t 'popq \s '% r \n );

fragment dec := λ(: r (Fragment Reg8)). ( \t 'dec \s '% r \n );
fragment dec := λ(: r (Fragment Reg16)). ( \t 'dec \s '% r \n );
fragment dec := λ(: r (Fragment Reg32)). ( \t 'dec \s '% r \n );
fragment dec := λ(: r (Fragment Reg64)). ( \t 'dec \s '% r \n );

fragment inc := λ(: r (Fragment Reg8)). ( \t 'inc \s '% r \n );
fragment inc := λ(: r (Fragment Reg16)). ( \t 'inc \s '% r \n );
fragment inc := λ(: r (Fragment Reg32)). ( \t 'inc \s '% r \n );
fragment inc := λ(: r (Fragment Reg64)). ( \t 'inc \s '% r \n );

fragment get := λ(: src Offset)(: dst (Fragment Reg8)). ( \t 'mov \s src \[ '%rbp \] , \s '% dst \n );
fragment get := λ(: src Offset)(: dst (Fragment Reg16)). ( \t 'mov \s src \[ '%rbp \] , \s '% dst \n );
fragment get := λ(: src Offset)(: dst (Fragment Reg32)). ( \t 'mov \s src \[ '%rbp \] , \s '% dst \n );
fragment get := λ(: src Offset)(: dst (Fragment Reg64)). ( \t 'mov \s src \[ '%rbp \] , \s '% dst \n );

fragment sub := λ(: imm (Fragment U8))(: dst (Fragment Reg8)). ( \t 'sub \s $ imm \s , \s '% dst \n );
fragment sub := λ(: imm (Fragment U16))(: dst (Fragment Reg16)). ( \t 'sub \s $ imm \s , \s '% dst \n );
fragment sub := λ(: imm (Fragment U32))(: dst (Fragment Reg32)). ( \t 'sub \s $ imm \s , \s '% dst \n );
fragment sub := λ(: imm (Fragment U64))(: dst (Fragment Reg64)). ( \t 'sub \s $ imm \s , \s '% dst \n );
fragment sub := λ(: imm (Fragment I8))(: dst (Fragment Reg8)). ( \t 'sub \s $ imm \s , \s '% dst \n );
fragment sub := λ(: imm (Fragment I16))(: dst (Fragment Reg16)). ( \t 'sub \s $ imm \s , \s '% dst \n );
fragment sub := λ(: imm (Fragment I32))(: dst (Fragment Reg32)). ( \t 'sub \s $ imm \s , \s '% dst \n );
fragment sub := λ(: imm (Fragment I64))(: dst (Fragment Reg64)). ( \t 'sub \s $ imm \s , \s '% dst \n );
fragment sub := λ(: l (Fragment Reg8))(: dst (Fragment Reg8)). ( \t 'sub \s '% l \s , \s '% dst \n );
fragment sub := λ(: l (Fragment Reg16))(: dst (Fragment Reg16)). ( \t 'sub \s '% l \s , \s '% dst \n );
fragment sub := λ(: l (Fragment Reg32))(: dst (Fragment Reg32)). ( \t 'sub \s '% l \s , \s '% dst \n );
fragment sub := λ(: l (Fragment Reg64))(: dst (Fragment Reg64)). ( \t 'sub \s '% l \s , \s '% dst \n );

fragment add := λ(: imm (Fragment U8))(: dst (Fragment Reg8)). ( \t 'add \s $ imm \s , \s '% dst \n );
fragment add := λ(: imm (Fragment U16))(: dst (Fragment Reg16)). ( \t 'add \s $ imm \s , \s '% dst \n );
fragment add := λ(: imm (Fragment U32))(: dst (Fragment Reg32)). ( \t 'add \s $ imm \s , \s '% dst \n );
fragment add := λ(: imm (Fragment U64))(: dst (Fragment Reg64)). ( \t 'add \s $ imm \s , \s '% dst \n );
fragment add := λ(: imm (Fragment I8))(: dst (Fragment Reg8)). ( \t 'add \s $ imm \s , \s '% dst \n );
fragment add := λ(: imm (Fragment I16))(: dst (Fragment Reg16)). ( \t 'add \s $ imm \s , \s '% dst \n );
fragment add := λ(: imm (Fragment I32))(: dst (Fragment Reg32)). ( \t 'add \s $ imm \s , \s '% dst \n );
fragment add := λ(: imm (Fragment I64))(: dst (Fragment Reg64)). ( \t 'add \s $ imm \s , \s '% dst \n );
fragment add := λ(: l (Fragment Reg8))(: dst (Fragment Reg8)). ( \t 'add \s '% l \s , \s '% dst \n );
fragment add := λ(: l (Fragment Reg16))(: dst (Fragment Reg16)). ( \t 'add \s '% l \s , \s '% dst \n );
fragment add := λ(: l (Fragment Reg32))(: dst (Fragment Reg32)). ( \t 'add \s '% l \s , \s '% dst \n );
fragment add := λ(: l (Fragment Reg64))(: dst (Fragment Reg64)). ( \t 'add \s '% l \s , \s '% dst \n );

fragment mul := λ(: l (Fragment Reg8)). ( \t 'mul \s '% l \n );
fragment mul := λ(: l (Fragment Reg16)). ( \t 'mul \s '% l \n );
fragment mul := λ(: l (Fragment Reg32)). ( \t 'mul \s '% l \n );
fragment mul := λ(: l (Fragment Reg64)). ( \t 'mul \s '% l \n );

fragment cmp := λ(: imm (Fragment U8))(: dst (Fragment Reg8)). ( \t 'cmp \s '$ imm \s , \s '% dst \n );
fragment cmp := λ(: imm (Fragment U16))(: dst (Fragment Reg16)). ( \t 'cmp \s '$ imm \s , \s '% dst \n );
fragment cmp := λ(: imm (Fragment U32))(: dst (Fragment Reg32)). ( \t 'cmp \s '$ imm \s , \s '% dst \n );
fragment cmp := λ(: imm (Fragment U64))(: dst (Fragment Reg64)). ( \t 'cmp \s '$ imm \s , \s '% dst \n );
fragment cmp := λ(: imm (Fragment I8))(: dst (Fragment Reg8)). ( \t 'cmp \s '$ imm \s , \s '% dst \n );
fragment cmp := λ(: imm (Fragment I16))(: dst (Fragment Reg16)). ( \t 'cmp \s '$ imm \s , \s '% dst \n );
fragment cmp := λ(: imm (Fragment I32))(: dst (Fragment Reg32)). ( \t 'cmp \s '$ imm \s , \s '% dst \n );
fragment cmp := λ(: imm (Fragment I64))(: dst (Fragment Reg64)). ( \t 'cmp \s '$ imm \s , \s '% dst \n );
fragment cmp := λ(: l (Fragment Reg8))(: dst (Fragment Reg8)). ( \t 'cmp \s '% l \s , \s '% dst \n );
fragment cmp := λ(: l (Fragment Reg16))(: dst (Fragment Reg16)). ( \t 'cmp \s '% l \s , \s '% dst \n );
fragment cmp := λ(: l (Fragment Reg32))(: dst (Fragment Reg32)). ( \t 'cmp \s '% l \s , \s '% dst \n );
fragment cmp := λ(: l (Fragment Reg64))(: dst (Fragment Reg64)). ( \t 'cmp \s '% l \s , \s '% dst \n );

fragment jmp := λ(: lbl Label). ( \t 'jmp \s lbl \n );
fragment je := λ(: lbl Label). ( \t 'je \s lbl \n );
fragment jne := λ(: lbl Label). ( \t 'jne \s lbl \n );
fragment jz := λ(: lbl Label). ( \t 'jz \s lbl \n );
fragment jnz := λ(: lbl Label). ( \t 'jne \s lbl \n );
fragment jlt := λ(: lbl Label). ( \t 'jlt \s lbl \n );
fragment jle := λ(: lbl Label). ( \t 'jle \s lbl \n );
fragment jgt := λ(: lbl Label). ( \t 'jgt \s lbl \n );
fragment jge := λ(: lbl Label). ( \t 'jge \s lbl \n );
