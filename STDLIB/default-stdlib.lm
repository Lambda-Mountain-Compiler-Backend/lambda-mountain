
type S (SNil)
     | (SAtom( String ))
     | (SCons( S[] , S[] ))
     | (SPointer( ?[] ));

close := λ(: x S). (: (tail(
   (mov( (malloc(sizeof S)) R8 ))
   (mov( x 0u64 (as R8 S[]) ))
   (as R8 S[])
)) S[]);

print := λ(: x S). (: (tail(
   (match x (
      ()
      (SNil (print '\[\]_s))
      ( (SAtom a) (print a))
      ( (SCons( l r )) (tail(
         (print '\[_s)
         (print l)
         (print '\s_s)
         (print r)
         (print '\]_s)
      )))
      ( (SPointer p) (tail(
         (print '[_s)
         (print (as p U64))
         (print ']_s)
      )))
   ))
   ()
)) Nil);

fail := λ(: msg String). (: (tail(
   (print msg)
   (exit 1u64)
)) Nil);

exit := λ(: code U64). (: (tail(
   (mov( 60u64 RAX ))
   (mov( code RDI ))
   (syscall())
)) Nil);

print := λ(: x String). (: (tail(
   (mov( x R15 ))
   (mov( 0u64 RDX )) # data length
   (gensym-label begin-count)
   (gensym-label end-count)
   (label begin-count)
   (mov( 0u64 R15 R14B ))
   (cmp( 0u8 R14B ))
   (je( end-count ))
   (inc( RDX ))
   (inc( R15 ))
   (jmp( begin-count ))
   (label end-count)
   (system-call( 1u64 1u64 (as x U64) (as RDX U64) ))
   ()
)) Nil);

eprint := λ(: x String). (: (tail(
   (mov( x R15 ))
   (mov( 0u64 RDX )) # data length
   (gensym-label begin-count)
   (gensym-label end-count)
   (label begin-count)
   (mov( 0u64 R15 R14B ))
   (cmp( 0u8 R14B ))
   (je( end-count ))
   (inc( RDX ))
   (inc( R15 ))
   (jmp( begin-count ))
   (label end-count)
   (system-call( 1u64 2u64 (as x U64) (as RDX U64) ))
   ()
)) Nil);

print := λ(: x U64). (: (tail(
   (let cs 0u8)
   (gensym-label unsigned)
   (gensym-label pdigits)
   (mov( x R15 ))
   (mov( 0u64 R14 ))

   (label unsigned)
   (mov( R15 RAX ))
   (mov( 0u64 RDX ))
   (mov( 10u64 RCX ))
   (div( RCX ))
   (push( RDX ))
   (inc( R14 ))
   (mov( RAX R15 ))
   (cmp( 0u64 R15 ))
   (jne( unsigned ))

   (label pdigits)
   (pop( RDX ))
   (mov( DL cs ))
   (add( 48u8 cs ))
   (dec( R14 ))
   (system-call( 1u64 1u64 (as (& cs) U64) 1u64 ))
   (cmp( 0u64 R14 ))
   (jne( pdigits ))
)) Nil);

print := λ(: x I64). (: (tail(
   (let cs 0u8)
   (gensym-label unsigned)
   (gensym-label pdigits)
   (mov( x R15 ))
   (mov( 0u64 R14 ))
   (cmp( 0i64 R15 ))
   (jge( unsigned ))
   (neg( R15 ))
   (mov( 45u8 cs ))
   (system-call( 1u64 1u64 (as (& cs) U64) 1u64 ))

   (label unsigned)
   (mov( R15 RAX ))
   (mov( 0u64 RDX ))
   (mov( 10u64 RCX ))
   (div( RCX ))
   (push( RDX ))
   (inc( R14 ))
   (mov( RAX R15 ))
   (cmp( 0u64 R15 ))
   (jne( unsigned ))

   (label pdigits)
   (pop( RDX ))
   (mov( DL cs ))
   (add( 48u8 cs ))
   (dec( R14 ))
   (system-call( 1u64 1u64 (as (& cs) U64) 1u64 ))
   (cmp( 0u64 R14 ))
   (jne( pdigits ))
)) Nil);

print := λ(: x U32). (: (tail(
   (mov( 0u64 R15 ))
   (mov( x R15D ))
   (print( (: R15 Reg64+U64) ))
)) Nil);

print := λ(: x U16). (: (tail(
   (mov( 0u64 R15 ))
   (mov( x R15W ))
   (print( (: R15 Reg64+U64) ))
)) Nil);

print := λ(: x U8). (: (tail(
   (mov( 0u64 R15 ))
   (mov( x R15B ))
   (print( (: R15 Reg64+U64) ))
)) Nil);

print := λ(: x I32). (: (tail(
   (gensym-label unsigned)
   (mov( 0u64 R15 ))
   (mov( x R15D ))
   (movsx( R15D R15 ))
   (print( (: R15 Reg64+I64) ))
)) Nil);

print := λ(: x I16). (: (tail(
   (gensym-label unsigned)
   (mov( 0u64 R15 ))
   (mov( x R15W ))
   (movsx( R15W R15 ))
   (print( (: R15 Reg64+I64) ))
)) Nil);

print := λ(: x I8). (: (tail(
   (gensym-label unsigned)
   (mov( 0u64 R15 ))
   (mov( x R15B ))
   (movsx( R15B R15 ))
   (print( (: R15 Reg64+I64) ))
)) Nil);

== := λ(: l String)(: r String). (: (tail(
   (let c1 0u8)
   (let c2 0u8)
   (gensym-label start)
   (gensym-label end-true)
   (gensym-label end-false)
   (gensym-label end)
   (mov( l R8 ))
   (mov( r R9 ))
   (label start )
   (mov( R8 0u64 c1 ))
   (mov( R9 0u64 c2 ))
   (if (==( c1 c2 )) (mov( 1u64 RAX )) (mov( 0u64 RAX )) )
   (cmp( 0u64 RAX ))
   (je end)
   (if (==( c1 0u8 )) (mov( 1u64 RAX )) (mov( 0u64 RAX )) )
   (cmp( 1u64 RAX ))
   (je end)
   (inc R8)
   (inc R9)
   (jmp start)
   (label end)
   (as RAX U64)
)) U64);

cons-page-tail := 0u64;
malloc := λ (: sz U64) . (: (tail(
   (if (==( cons-page-tail 0u64 )) (tail(
      (mov( 12u64 RAX ))
      (mov( 0u64 RDI ))
      (syscall())
      (mov( RAX R8 )) #current page break in R8
      (set cons-page-tail (as R8 U64))
      # 4 GB
      (add( 1073741824u64 R8 ))
      (add( 1073741824u64 R8 ))
      (add( 1073741824u64 R8 ))
      (add( 1073741824u64 R8 ))
      (mov( 12u64 RAX ))
      (mov( R8 RDI ))
      (syscall())
   )) ())
   (let curr cons-page-tail)
   (mov( cons-page-tail R8 ))
   (add( sz R8 ))
   (set cons-page-tail (as R8 U64))
   (as curr ?[])
)) ?[]);

system-call := λ(: rax U64)(: rdi U64)(: rsi U64)(: rdx U64). (: (tail(
   (mov( rax RAX ))
   (mov( rdi RDI ))
   (mov( rsi RSI ))
   (mov( rdx RDX ))
   (syscall())
   (as RAX U64)
)) U64);

read-file := λ(: fp String). (: (tail(
   (let fd (system-call( 2u64 (as fp U64) 0u64 0u64 )))
   (mov( fd RAX ))
   (if (==( (as AL U8) 254u8 )) (tail(
      (eprint 'Unable\sto\sopen\sfile:\s_s)
      (eprint fp)
      (eprint '\n_s)
      (exit 1u64)
   )) ())
   (let shead (as (malloc( 0u64 )) U8[]))
   (let stail shead)
   (let more Trueu8)
   (while (==( more Trueu8 )) (tail(
      (let rdsz (system-call( 0u64 fd (as stail U64) 1024u64 )))
      (malloc( rdsz ))
      (print rdsz)
      (if (==( rdsz 0u64 )) (
         (set more Falseu8)
      ) (
         (set stail (as (
           (+( (as stail U64) rdsz ))
         ) U8[]))
      ))
   )))
   (system-call( 3u64 fd 0u64 0u64 ))
   (let eos (as (malloc( 1u64 )) U8[]))
   (mov( 0u8 0u64 eos ))
   (as shead String)
)) String);


#   # move data from buffer into string
#   'load_file_loop:                       \n
#   \t 'cmp \s '$0, \s '%r10               \n
#   \t 'je \s 'load_file_bufempty          \n
#   (allocate-atom-grow '$1)
#   \t 'movb \s '0 \[ '%r11 \] , \s '%bl    \n
#   \t 'mov \s '%bl, \s '0 \[ '%r9 \]      \n
#   \t 'inc \s '%r9                        \n
#   \t 'inc \s '%r11                       \n
#   \t 'dec \s '%r10                       \n
#   \t 'jmp \s 'load_file_loop             \n

#   # close file
#   (system-call( '$3 '%rax '$0 '$0 ))
#   (allocate-atom-grow '$1)
#   \t 'movb \s '$0, \s '0 \[ '%r9 \]       \n
#   \t 'inc \s '%r9                        \n
#   \t 'mov \s '%r8, \s '%r12              \n
#   \t 'mov \s '$0, \s '%r13               \n
#   \t 'ret                                \n
