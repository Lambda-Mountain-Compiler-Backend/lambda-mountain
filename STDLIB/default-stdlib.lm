
type S (SNil)
     | (SAtom( U8[] ))
     | (SCons( S[] , S[] ))
     | (SPointer( ?[] ));

close := λ(: x S). (: (tail(
   (mov( (malloc(sizeof S)) R8 ))
   (mov( x 0u64 (as R8 S[]) ))
   (as R8 S[])
)) S[]);

print := λ(: x S). (: (tail(
   (if (==( (.0 x) 3u64 )) (
      (print '\[\]_s)
   ) (
      (if (==( (.0 x) 2u64 )) (
         (print (.1 (as x SAtom)))
      ) (
         (if (==( (.0 x) 1u64 )) (tail(
            (let c SNil)
            (print '\[_s)
            (mov( (.2 (as x SCons)) 0u64 c ))
            (print c)
            (print '\s_s)
            (mov( (.1 (as x SCons)) 0u64 c ))
            (print c)
            (print '\]_s)
            ()
         )) (tail(
            (print '[_s)
            (print (as (.1 (as x SPointer)) U64))
            (print ']_s)
         )))
      ))
   ))
   ()
)) Nil);

fail := λ(: msg Array<U8,?>). (: (tail(
   (print msg)
   (exit 1u64)
)) Nil);

exit := λ(: code U64). (: (tail(
   (mov( 60u64 RAX ))
   (mov( code RDI ))
   (syscall())
)) Nil);

print := λ(: x Array<U8,?>). (: (tail(
   (mov( x R15 ))
   (mov( 0u64 RDX )) # data length
   (gensym-label begin-count)
   (gensym-label end-count)
   (label begin-count)
   (mov( 0u64 R15 R14B ))
   (cmp( 0u8 R14B ))
   (je( end-count ))
   (inc( RDX ))
   (inc( R15 ))
   (jmp( begin-count ))
   (label end-count)
   (mov( 1u64 RAX )) # write
   (mov( 1u64 RDI )) # stdout
   (mov( x RSI )) # data
   (syscall())
)) Nil);

print := λ(: x U64). (: (tail(
   (let cs 0u8)
   (gensym-label unsigned)
   (gensym-label pdigits)
   (mov( x R15 ))
   (mov( 0u64 R14 ))

   (label unsigned)
   (mov( R15 RAX ))
   (mov( 0u64 RDX ))
   (mov( 10u64 RCX ))
   (div( RCX ))
   (push( RDX ))
   (inc( R14 ))
   (mov( RAX R15 ))
   (cmp( 0u64 R15 ))
   (jne( unsigned ))

   (label pdigits)
   (pop( RDX ))
   (mov( DL cs ))
   (add( 48u8 cs ))
   (dec( R14 ))
   (mov( 1u64 RAX )) # write
   (mov( 1u64 RDI )) # stdout
   (mov( (& cs) RSI )) # data
   (mov( 1u64 RDX )) # length
   (syscall())
   (cmp( 0u64 R14 ))
   (jne( pdigits ))
)) Nil);

print := λ(: x I64). (: (tail(
   (let cs 0u8)
   (gensym-label unsigned)
   (gensym-label pdigits)
   (mov( x R15 ))
   (mov( 0u64 R14 ))
   (cmp( 0i64 R15 ))
   (jge( unsigned ))
   (neg( R15 ))
   (mov( 45u8 cs ))
   (mov( 1u64 RAX )) # write
   (mov( 1u64 RDI )) # stdout
   (mov( (& cs) RSI )) # data
   (mov( 1u64 RDX )) # length
   (syscall())

   (label unsigned)
   (mov( R15 RAX ))
   (mov( 0u64 RDX ))
   (mov( 10u64 RCX ))
   (div( RCX ))
   (push( RDX ))
   (inc( R14 ))
   (mov( RAX R15 ))
   (cmp( 0u64 R15 ))
   (jne( unsigned ))

   (label pdigits)
   (pop( RDX ))
   (mov( DL cs ))
   (add( 48u8 cs ))
   (dec( R14 ))
   (mov( 1u64 RAX )) # write
   (mov( 1u64 RDI )) # stdout
   (mov( (& cs) RSI )) # data
   (mov( 1u64 RDX )) # length
   (syscall())
   (cmp( 0u64 R14 ))
   (jne( pdigits ))
)) Nil);

print := λ(: x U32). (: (tail(
   (mov( 0u64 R15 ))
   (mov( x R15D ))
   (print( (: R15 Reg64+U64) ))
)) Nil);

print := λ(: x U16). (: (tail(
   (mov( 0u64 R15 ))
   (mov( x R15W ))
   (print( (: R15 Reg64+U64) ))
)) Nil);

print := λ(: x U8). (: (tail(
   (mov( 0u64 R15 ))
   (mov( x R15B ))
   (print( (: R15 Reg64+U64) ))
)) Nil);

print := λ(: x I32). (: (tail(
   (gensym-label unsigned)
   (mov( 0u64 R15 ))
   (mov( x R15D ))
   (movsx( R15D R15 ))
   (print( (: R15 Reg64+I64) ))
)) Nil);

print := λ(: x I16). (: (tail(
   (gensym-label unsigned)
   (mov( 0u64 R15 ))
   (mov( x R15W ))
   (movsx( R15W R15 ))
   (print( (: R15 Reg64+I64) ))
)) Nil);

print := λ(: x I8). (: (tail(
   (gensym-label unsigned)
   (mov( 0u64 R15 ))
   (mov( x R15B ))
   (movsx( R15B R15 ))
   (print( (: R15 Reg64+I64) ))
)) Nil);

== := λ(: l U8[])(: r U8[]). (: (tail(
   123u8
   123u8
)) U8);

cons-page-tail := 0u64;
malloc := λ (: sz U64) . (: (tail(
   (if (==( cons-page-tail 0u64 )) (tail(
      (mov( 12u64 RAX ))
      (mov( 0u64 RDI ))
      (syscall())
      (mov( RAX R8 )) #current page break in R8
      (set cons-page-tail (as R8 U64))
      # 4 GB
      (add( 1073741824u64 R8 ))
      (add( 1073741824u64 R8 ))
      (add( 1073741824u64 R8 ))
      (add( 1073741824u64 R8 ))
      (mov( 12u64 RAX ))
      (mov( R8 RDI ))
      (syscall())
   )) ())
   (let curr cons-page-tail)
   (mov( cons-page-tail R8 ))
   (add( sz R8 ))
   (set cons-page-tail (as R8 U64))
   (as curr ?[])
)) ?[]);
