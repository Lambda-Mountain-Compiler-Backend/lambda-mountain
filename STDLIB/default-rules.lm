
macro ( ('let x y) )
      ( (Î» x . ()) y );

macro ('match t ps) (tail(
   (let (uuid term) t)
   (match-pats( (uuid term) ps (fail PatternMatchFailure_s) ))
));

macro ('match-pats( term () remainder )) (
   remainder
);

macro ('match-pats( term (ps (lhs rhs)) remainder )) (
   (match-pats(
      term
      ps
      (if (match-pats-condition( term lhs )) rhs remainder)
   ))
);

macro ('match-pats-condition( term (:Variable: v) )) (
   (tail( (let v term) (branchtrue()) ))
);

macro ('match-pats-condition( term (:Literal: l) )) (
   (==( term l ))
);

macro ('match-pats-condition( term (:Tag: l lt) )) (
   (==( (.0( term )) l ))
);

macro ('match-pats-condition( term ((:Tag: l lt) ( x1 )) )) (
   if (==( (.0( term )) l ))
      (match-pats-condition( (.1( (as term lt) )) x1 ))
      (branchfalse())
);

macro ('match-pats-condition( term ((:Tag: l lt) ( x1 x2 ) ))) (
   if (==( (.0( term )) l ))
      (if (match-pats-condition( (.1( (as term lt) )) x1 ))
          (match-pats-condition( (.2( (as term lt) )) x2 ))
          (branchfalse())
      )
      (branchfalse())
);

