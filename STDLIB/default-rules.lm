
macro ( ('let x y) )
      ( (Î» x . ()) y );

macro ('match t ps) (tail(
   (let (uuid term) t)
   (match-pats( (uuid term) ps (fail PatternMatchFailure_s) ))
));

macro ('match-pats( term () remainder )) (
   remainder
);

macro ('match-pats( term (ps (lhs rhs)) remainder )) (
   (match-pats(
      term
      ps
      (match-pats-arm( term lhs rhs remainder ))
   ))
);

macro ('match-pats-arm( term (:Variable: v) rhs remainder )) (
   if (tail( (let v (maybe-deref term)) (branchtrue()) ))
      rhs
      remainder
);

macro ('match-pats-arm( term (:Literal: l) rhs remainder )) (
   if (tail( (let (uuid v) (maybe-deref term)) (==( (uuid v) l )) ))
      rhs
      remainder
);

macro ('match-pats-arm( term (:Tag: l lt) rhs remainder )) (
   if (tail( (let (uuid v) (maybe-deref term)) (==( (.0( (uuid v) )) l )) ))
      rhs
      remainder
);

#macro ('match-pats-condition( term ((:Tag: l lt) ( x1 )) )) (tail(
#   (let (uuid v) (maybe-deref term) )
#   (let (uuid ok) Trueu8)
#   (if (==( (.0( (uuid v) )) l )) (
#      (if (match-pats-condition( (.1( (as (uuid v) lt) )) x1 )) () (set (uuid ok) Falseu8))
#   ) (set (uuid ok) Falseu8))
#   (==( (uuid ok) Trueu8 ))
#));

#macro ('match-pats-condition( term ((:Tag: l lt) ( x2 x1 ) ))) (tail(
#   (let (uuid v) (maybe-deref term) )
#   (let (uuid ok) Trueu8)
#   (if (==( (.0( (uuid v) )) l )) (tail(
#      (if (match-pats-condition( (.1( (as (uuid v) lt) )) x1 )) () (set (uuid ok) Falseu8))
#      (if (match-pats-condition( (.2( (as (uuid v) lt) )) x2 )) () (set (uuid ok) Falseu8))
#   )) (set (uuid ok) Falseu8))
#   (==( (uuid ok) Trueu8 ))
#));

#macro ('match-pats-condition( term ((:Tag: l lt) ( x3 x2 x1 ) ))) (tail(
#   (let (uuid v) (maybe-deref term) )
#   (let (uuid ok) Trueu8)
#   (if (==( (.0( (uuid v) )) l )) (tail(
#      (if (match-pats-condition( (.1( (as (uuid v) lt) )) x1 )) () (set (uuid ok) Falseu8))
#      (if (match-pats-condition( (.2( (as (uuid v) lt) )) x2 )) () (set (uuid ok) Falseu8))
#      (if (match-pats-condition( (.3( (as (uuid v) lt) )) x3 )) () (set (uuid ok) Falseu8))
#   )) (set (uuid ok) Falseu8))
#   (==( (uuid ok) Trueu8 ))
#));

#macro ('match-pats-condition( term ((:Tag: l lt) ( x4 x3 x2 x1 ) ))) (tail(
#   (let (uuid v) (maybe-deref term) )
#   (let (uuid ok) Trueu8)
#   (if (==( (.0( (uuid v) )) l )) (tail(
#      (if (match-pats-condition( (.1( (as (uuid v) lt) )) x1 )) () (set (uuid ok) Falseu8))
#      (if (match-pats-condition( (.2( (as (uuid v) lt) )) x2 )) () (set (uuid ok) Falseu8))
#      (if (match-pats-condition( (.3( (as (uuid v) lt) )) x3 )) () (set (uuid ok) Falseu8))
#      (if (match-pats-condition( (.4( (as (uuid v) lt) )) x4 )) () (set (uuid ok) Falseu8))
#   )) (set (uuid ok) Falseu8))
#   (==( (uuid ok) Trueu8 ))
#));

#macro ('match-pats-condition( term ((:Tag: l lt) ( x5 x4 x3 x2 x1 ) ))) (tail(
#   (let (uuid v) (maybe-deref term) )
#   (let (uuid ok) Trueu8)
#   (if (==( (.0( (uuid v) )) l )) (tail(
#      (if (match-pats-condition( (.1( (as (uuid v) lt) )) x1 )) () (set (uuid ok) Falseu8))
#      (if (match-pats-condition( (.2( (as (uuid v) lt) )) x2 )) () (set (uuid ok) Falseu8))
#      (if (match-pats-condition( (.3( (as (uuid v) lt) )) x3 )) () (set (uuid ok) Falseu8))
#      (if (match-pats-condition( (.4( (as (uuid v) lt) )) x4 )) () (set (uuid ok) Falseu8))
#      (if (match-pats-condition( (.5( (as (uuid v) lt) )) x5 )) () (set (uuid ok) Falseu8))
#   )) (set (uuid ok) Falseu8))
#   (==( (uuid ok) Trueu8 ))
#));

