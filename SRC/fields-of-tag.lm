
tag-to-fields-index := (: (HashtableEq( 0_u64 0_u64 (as 0_u64 Tuple<String,Tuple<Type,Type>>[]) )) HashtableEq<String,Tuple<Type,Type>>);

index-fields-of-tag := 位(: tag String)(: base-type Type)(: fields-params Type)(: fields-rhs Type). (: (
   (set tag-to-fields-index (.bind( tag-to-fields-index tag (Tuple( fields-params fields-rhs )) )))
   (index-fields-quick-prop( (t2( (+( 'Tag::_s tag )) base-type )) (t3( 'Cons_s fields-rhs (t1 'U64_s) )) 0_u64 ))
) Nil);

index-fields-quick-prop := 位(: tag-tt Type)(: fields-tt Type)(: field-index U64). (: (
   (match fields-tt (
      ()
      ( (TGround( 'Cons_s (LCons( pt (LCons( rst LEOF )) )) )) (
         (add-quick-prop( tag-tt 
            (t2( (+( 'Field::_s (to-string field-index) )) pt ))
         ))
         (index-fields-quick-prop( tag-tt rst (+( field-index 1_u64 )) ))
      ))
      ( (TGround( 'Nil_s _ )) () )
      ( pt (
         (add-quick-prop( tag-tt 
            (t2( (+( 'Field::_s (to-string field-index) )) pt ))
         ))
      ))
   ))
) Nil);

fields-of-tag := 位(: tag String). (: (
   (let r (.lookup( tag-to-fields-index tag (Tuple( TAny TAny )) )))
   r
) Tuple<Type,Type>);

fields-of-tag := 位(: tag Type)(: class Type). (: (
   (let rhst TAny)
   (match tag (
      ()
      ( (TGround( 'Tag_s (LCons( (TGround( ts _ )) LEOF )) )) (match (fields-of-tag ts) (
         ()
         ( (Tuple( TAny TAny )) () )
         ( (Tuple( fields-lhs fields-rhs )) (
            (set rhst (substitute( (unify( fields-lhs class )) fields-rhs )))
         ))
      )))
      ( _ (
         (print 'Invalid\sTag\sIn\sfields-of-tag\s_s)
         (print tag)(print '\n_s)
         (exit 1_u64)
      ))
   ))
   (set rhst (with-size rhst))
   (let rt (TGround( 'Fields_s (close(cons(
      (fields-of-type( (t3( 'Cons_s rhst (TAnd( (close(t1 'U64_s)) (close(t2( 'Sized_s (t1 '8_s) ))) )) )) ))
      (: LEOF List<Type>)
   ))))))
   rt
) Type);
