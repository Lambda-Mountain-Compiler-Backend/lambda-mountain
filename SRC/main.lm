
main := Î»(: argc C_int)(: argv String[]). (: (
   (let argi 1_u64)
   (let input SNil)
   (while (<( argi (as argc U64) )) (
      (match ([]( argv (as argi U64) )) (
         ()
         ('--dev_s (set config-devmode 1_u64))
         ('--typecheck_s (set config-mode ModeTypecheck))
         ('--compile_s (set config-mode ModeCompile))
         ('--strict_s (set config-strict True_u8))
         ('--gradual_s (set config-strict False_u8))
         ('--macro_s (set config-preprocess True_u8))
         ('--nomacro_s (set config-preprocess False_u8))
         ('--profile-invocations_s (set config-profile-invocations True_u8))
         ('-o_s (
            (set argi (+( argi 1_u64 )))
            (set config-target ([]( argv argi )))
         ))
         (fp (
            (if (.has( plugins-backends fp )) (
               plugin-current-backend = (.lookup( plugins-backends fp plugin-null-backend ))
            ) (
               (set input (SCons(
                  (close input)
                  (close (SAtom( fp )))
               )))
            ))
         ))
      ))
      (set argi (+( argi 1_u64 )))
   ))

   (let continue True_u8)
   (while (==( continue True_u8 )) (match input (
      ()
      ( SNil (set continue False_u8) )
      ( (SCons( rst SNil )) (set input rst) )
      ( (SCons( rst (SAtom( fp )) )) ( (frontend fp) (set input rst) ))
      ( (SAtom( fp )) ( (frontend fp) (set continue False_u8) ))
   )))
   (frontend-flush())

   (match config-mode (
      ()
      ( ModeTypecheck (
         (preprocess())
         (typecheck())
      ))
      ( ModeCompile (
         (preprocess())
         (typecheck())
         (plugin-current-backend())
      ))
   ))
) Nil);

