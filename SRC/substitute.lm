
substitute-lhs := λ(: tctx Maybe<TContext>)(: t AST). (: (
   (match t (
      ()
      ( (App( ps (App( (Lit( ':_s ctk )) (App( (Var( v vtk )) (AType vt) )) )) )) (
         (set t (App(
            (close(substitute-lhs( tctx ps )))
            (close(App( (close(Lit( ':_s (unique ctk) ))) (close(App(
               (close(Var( v (unique vtk) )))
               (close(AType( (substitute( tctx vt )) )))
            ))) )))
         )))
      ))
      ( (App( (Lit( ':_s ctk )) (App( (Var( v vtk )) (AType vt) )) )) (
         (set t (App( (close(Lit( ':_s (unique ctk) ))) (close(App(
            (close(Var( v (unique vtk) )))
            (close(AType( (substitute( tctx vt )) )))
         ))) )))
      ))
      ( (App( ps (Var( v vtk )) )) (
         (set t (App(
            (close(substitute-lhs( tctx ps )))
            (close(Var( v (unique vtk) )))
         )))
      ))
      ( (Var( v vtk )) (set t (Var( v (unique vtk) ))) )
      ( ASTNil () )
      ( _ (exit-error( 'Unexpected\sSubstitute\sLHS_s t )) )
   ))
   t
) AST);

substitute := λ(: tctx Maybe<TContext>)(: t AST). (: (
   (match t (
      ()
      ( ASTEOF () )
      ( ASTNil () )
      ( (App( (Lit( ':_s ctk )) (App( (Lit( v vtk )) (AType vt) )) )) (
         (set t (App( (close(Lit( ':_s (unique ctk) ))) (close(App(
            (close(Lit( v (unique vtk) )))
            (close(AType( (substitute( tctx vt )) )))
         ))) )))
         (let found 0_u64)
         (for-each ( (Tuple( tk tv ta )) in
             (.get-or( tctx (: LEOF List<Tuple<String,Type,AST>>) ))
         ) (
            (if (&&( (not found) (==( tk v )) )) (
               (set t (App( (close(Lit( ':_s (unique ctk) ))) (close(App(
                  (close(substitute( tctx ta )))
                  (close(AType( (substitute( tctx vt )) )))
               ))) )))
               (set found 1_u64)
            ) ())
         ))
      ))
      ( (App( (Lit( ':_s ctk )) (App( (Var( v vtk )) (AType vt) )) )) (
         (set t (App( (close(Lit( ':_s (unique ctk) ))) (close(App(
            (close(Var( v (unique vtk) )))
            (close(AType( (substitute( tctx vt )) )))
         ))) )))
         (let found 0_u64)
         (for-each ( (Tuple( tk tv ta )) in
             (.get-or( tctx (: LEOF List<Tuple<String,Type,AST>>) ))
         ) (
            (if (&&( (not found) (==( tk v )) )) (
               (set t (App( (close(Lit( ':_s (unique ctk) ))) (close(App(
                  (close(substitute( tctx ta )))
                  (close(AType( (substitute( tctx vt )) )))
               ))) )))
               (set found 1_u64)
            ) ())
         ))
      ))
      ( (Lit( v vtk )) (set t (Lit( v (unique vtk) ))) )
      ( (Var( v vtk )) (set t (Var( v (unique vtk) ))) )
      ( (Abs( lhs rhs tt )) (
         (set t (Abs(
            (close(substitute-lhs( tctx lhs )))
            (close(substitute( tctx rhs )))
            (substitute( tctx tt ))
         )))
      ))
      ( (AType( tt )) (
         (set t (AType( (substitute( tctx tt )) )))
      ))
      ( (App( lt rt )) (
         (set t (App(
            (close(substitute( tctx lt )))
            (close(substitute( tctx rt )))
         )))
      ))
      ( (Seq( lt rt )) (
         (set t (Seq(
            (close(substitute( tctx lt )))
            (close(substitute( tctx rt )))
         )))
      ))
      ( (Glb( k rt )) (
         (set t (Glb(
            (unique k)
            (close(substitute( tctx rt )))
         )))
      ))
      ( (Typedef( lt rt )) (
         (set t (Typedef(
            (close(substitute( tctx lt )))
            (close(substitute( tctx rt )))
         )))
      ))
      ( _ (exit-error( 'Unexpected\sSubstitution\sTerm:_s t )) )
   ))
   t
) AST);

substitute := λ(: tctx StringSList)(: t S). (: (
   (match t (
      ()
      ( SNil (set t SNil) )
      ( (SAtom a) (
         (while (non-zero tctx) (match tctx (
            ()
            ( (SSLSeq( rst k v )) (
               (if (==( a k )) (
                  (set t v)
               ) ())
               (set tctx rst)
            )))
         ))
      ))
      ( (SCons( lt rt )) (
         (set t (SCons(
            (close(substitute( tctx lt )))
            (close(substitute( tctx rt )))
         )))
      ))
   ))
   (let rt t)
   rt
) S);

