
infer-tctx := λ(: tctx Maybe<TypeContext>)(: tt List<Type>). (: (
   (match tt (
      ()
      ( LEOF () )
      ( (LCons( p1 rst )) (
         (set tctx (infer-tctx( tctx rst )))
         (set tctx (infer-tctx( tctx p1 )))
      ))
   ))
   tctx
) Maybe<TypeContext>);

infer-tctx := λ(: tctx Maybe<TypeContext>)(: tt Type). (: (
   (match tt (
      ()
      ( (TAnd( conjugate )) (
         (for-each-v (c in conjugate) (set tctx (infer-tctx( tctx c ))))
      ))
      ( (TVar( tv )) (
         (set tctx (.bind(
            tctx
            tv
            (t1 'Constant_s)
            (mk-eof())
         )))
      ))
      ( (TGround( _ ts )) (
         (set tctx (infer-tctx( tctx ts )))
      ))
      ( TAny () )
   ))
   tctx
) Maybe<TypeContext>);
