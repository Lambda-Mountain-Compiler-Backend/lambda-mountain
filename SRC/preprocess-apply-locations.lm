
preprocess-apply-locations := Î»(: program AST). (: (
   (let r program)
   (match program (
      ()
      ( (App( (Var( 'p_s _ )) (Lit( ':Location:_s ltk )) )) (
         (let l 'Location\sUnknown_s)
         (match (.location ltk) (
            ()
            ( (SourceLocation( fp ln cl )) (
               (set l (clone-rope(SCons(
                  (close(SCons(
                     (close(SAtom 'File:\s_s))
                     (close(SAtom fp))
                  )))
                  (close(SCons(
                     (close(SCons(
                        (close(SAtom '\sLine:\s_s))
                        (close(SAtom(to-string ln)))
                     )))
                     (close(SCons(
                        (close(SAtom '\sColumn:\s_s))
                        (close(SAtom(to-string cl)))
                     )))
                  )))
               ))))
            ))
         ))
         (set r (Lit( l (unique ltk) )))
      ))
      ( (Lit( l ltk )) (
         (set r (Lit( l (unique ltk) )))
      ))
      ( (Var( l ltk )) (
         (set r (Var( l (unique ltk) )))
      ) )
      ( (App( is-cons t1 t2 )) (
         (set r (App(
            is-cons
            (close(preprocess-apply-locations t1))
            (close(preprocess-apply-locations t2))
         )))
      ))
      ( (Seq( seq )) (
         (let ret ASTEOF)
         (for-each-v (p in seq) (
            (set ret (+( ret (preprocess-apply-locations p) )))
         ))
         ret
      ))
      ( (Abs( al ar tlt )) (set r (Abs(
         (close(preprocess-apply-locations al))
         (close(preprocess-apply-locations ar))
         tlt
      ))))
      ( (Glb( k ar )) (set r (Glb(
         (unique k)
         (close(preprocess-apply-locations ar))
      ))))
      ( u (set r u))
   ))
   r
) AST);

