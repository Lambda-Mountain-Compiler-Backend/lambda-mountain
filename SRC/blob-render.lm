
# render an expression as an S-Expression blob
blob-render-simple := Î»(: ctx FContext)(: context-key String)(: term AST). (: (
   (let r SNil)
   (match term (
      ()
      ( ASTNil () )
      ( ASTEOF () )
      ( (Var( id _ )) (
         (let e (fragment-context::lookup( ctx id (typeof term) term )))
         (set r (fragment::get( e context-key )))
      ))
      ( (Lit( val _ )) (
         (set r (SAtom val))
      ))
      ( (App( (Lit( ':_s _ )) (App( t (AType tt) )) )) (
         (set r (.1( (blob-render-simple( ctx context-key t )) )))
      ))
      ( (App( (Var( 'as_s _ )) (App( t (AType tt) )) )) (
         (set r (.1( (blob-render-simple( ctx context-key t )) )))
      ))
      ( (App( (Abs( (Var( lhs _ )) ASTNil tlt )) rhs )) (
         (let f (fragment::new()))
         (set f (fragment::set( f context-key (.1( (blob-render-simple( ctx context-key rhs )) )) )))
         (set ctx (fragment-context::bind(
            ctx lhs (typeof rhs) f
         ))) # TODO, render the binding as non-simple blob?
      ))
      ( (App( f a )) (
         (if (non-zero(slot( (typeof f) 'Arrow_s ))) (
            (match f (
               ()
               ( (Var( fname _ )) (
                  (let e (cc-blob( ctx fname a )))
                  (set r (fragment::get( e context-key )))
               ))
            ))
         ) (
            (let e1 (blob-render-simple( ctx context-key f )))
            (let e2 (blob-render-simple( ctx context-key a )))
            (set ctx (.2 e2))
            (set r (+( (.1 e1) (.1 e2) )))
         ))
      ))
   ))
   (Tuple( ctx r ))
) Tuple<FContext,S>);

