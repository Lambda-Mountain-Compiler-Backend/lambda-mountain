
# render an expression as an S-Expression blob
blob-render-simple := λ(: ctx FContext)(: context-key String)(: term AST). (: (
   (let r SNil)
   (match term (
      ()
      ( ASTNil () )
      ( ASTEOF () )
      ( (Var( id _ )) (
         (let e (fragment-context::lookup( ctx id (typeof term) term )))
         (set r (fragment::get( e context-key )))
      ))
      ( (Lit( val _ )) (
         (set r (SAtom val))
      ))
      ( (App( (Lit( ':_s _ )) (App( t (AType tt) )) )) (
         (set r (.1( (blob-render-simple( ctx context-key t )) )))
      ))
      ( (App( (Var( 'as_s _ )) (App( t (AType tt) )) )) (
         (set r (.1( (blob-render-simple( ctx context-key t )) )))
      ))
      ( (App( (Abs( (Var( lhs _ )) ASTNil tlt )) rhs )) (
         (let f (fragment::new()))
         (let cs (blob-render-simple( ctx context-key rhs )))
         (let s (.1 cs))
         (set f (fragment::set( f context-key s )))
         (set ctx (fragment-context::bind(
            ctx lhs (typeof rhs) f
         ))) # TODO, render the binding as non-simple blob?
      ))
      ( (App( f a )) (
         (if (non-zero(slot( (typeof f) 'Arrow_s ))) (
            (match f (
               ()
               ( (Var( fname _ )) (
                  (let e (cc-blob( ctx fname a 0_i64 )))
                  (set r (fragment::get( e context-key )))
               ))
            ))
         ) (
            (let e1 (blob-render-simple( ctx context-key f )))
            (let e2 (blob-render-simple( ctx context-key a )))
            (let s1 (.1 e1))
            (let s2 (.1 e2))
            (set ctx (.2 e2))
            (set r (+( s1 s2 )))
         ))
      ))
   ))
   (Tuple( ctx r ))
) Tuple<FContext,S>);

blob-render := λ(: ctx FContext)(: term AST)(: f Fragment). (: (
   (match term (
      ()
      ( (App( (Lit( ':_s _ )) (App( t (AType _) )) )) (
         (set f (blob-render( ctx t f )))
      ))
      ( (App( (Var( k _ )) a )) (
         (if (has-prefix( k ':_s )) (            
            (let cs1 (blob-render-simple( ctx (tail-string k) a )))
            (let s1 (.1 cs1))
            (set f (fragment::set( f (tail-string k) s1 )))
         ) (
            (let cs2 (blob-render-simple( ctx 'program_s term )))
            (let s2 (.1 cs2))
            (set f (fragment::set( f 'program_s s2 )))
         ))
      ))
      ( (App( rst (App( (Var( k _ )) a )) )) (
         (set f (blob-render( ctx rst f )))
         (if (has-prefix( k ':_s )) (            
            (let cs1 (blob-render-simple( ctx (tail-string k) a )))
            (let s1 (.1 cs1))
            (set f (fragment::set( f (tail-string k) s1 )))
         ) (
            (let cs2 (blob-render-simple( ctx 'program_s term )))
            (let s2 (.1 cs2))
            (set f (fragment::set( f 'program_s s2 )))
         ))
      ))
      ( _ (
         (let cs2 (blob-render-simple( ctx 'program_s term )))
         (let s2 (.1 cs2))
         (set f (fragment::set( f 'program_s s2 )))
      ))
   ))
   f
) Fragment);
