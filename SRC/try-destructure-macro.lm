
try-destructure-macro := Î»(: loc SourceLocation)(: lhs AST)(: term AST). (: (
   (let r CtxEOF)
   (match (Tuple( lhs term )) (
      ()
      ( (Tuple( ASTNil ASTNil )) (set r CtxNil) )
      ( (Tuple( (App( (App( (Var( _ _ )) (Var( _ _ )) )) (Var( _ _ )) )) (App( (App( (Lit( possibly-tag _ )) _ )) _ )) )) () )
      ( (Tuple( (App( (Lit( ':Literal:_s _ )) (Var( pv _ )) )) (App( (Lit( ':_s ctk )) (App( (Lit( _ _ )) (AType _) )) )) )) (
         (set r (CtxBind( (close CtxNil) pv (with-location( term (location-of ctk) )) )))
      ))
      ( (Tuple( (App( (Var( _ _ )) (Var( _ _ )) )) (App( (Lit( tag _ )) _ )) )) (
         (if (||( (is-lone-tag tag) (preprocess-is-suffixed tag) )) (
            (match (Tuple( lhs term )) (
               ()
               ( (Tuple( (App(pl pr)) (App(el er)) )) (
                  (let ll (try-destructure-macro( loc pl el )))
                  (if (non-zero ll) (
                     (let rl (try-destructure-macro( loc pr er )))
                     (if (non-zero rl) (
                        (set r (union( ll rl )))
                     ) ())
                  ) ())
               ))
            ))
         ) ())
      ))
      ( (Tuple( (App(pl pr)) (App(el er)) )) (
         (let ll (try-destructure-macro( loc pl el )))
         (if (non-zero ll) (
            (let rl (try-destructure-macro( loc pr er )))
            (if (non-zero rl) (
               (set r (union( ll rl )))
            ) ())
         ) ())
      ))
      ( (Tuple( (Abs(pl pr ptlt)) (Abs(el er etlt)) )) (
         (let ll (try-destructure-macro( loc pl el )))
         (if (non-zero ll) (
            (let rl (try-destructure-macro( loc pr er )))
            (if (non-zero rl) (
               (set r (union( ll rl )))
            ) ())
         ) ())
      ))
      ( (Tuple( (Lit( ':Any:_s _ )) (Var( '__s _ )) )) (
         (set r CtxNil)
      ))
      ( (Tuple( (Lit( pl _ )) (Var( el _ )) )) (
         (if (==( pl el )) (set r CtxNil) ())
      ))
      ( (Tuple( (Lit( pl _ )) (Lit( el _ )) )) (
         (if (==( pl el )) (set r CtxNil) ())
      ))
      ( (Tuple( (App( (Lit( ':Literal:_s _ )) (Var( pv _ )) )) (Lit( el eltk )) )) (
         (if (==( (index-of-tag el) unknown-index-of-tag ))
             (set r (CtxBind( (close CtxNil) pv (with-location( term (location-of eltk) )) )))
             ()
         )
      ))
      ( (Tuple( (App( (Lit( ':Variable:_s _ )) (Var( _ _ )) )) (Var( '__s _ )) )) (
         ()
      ))
      ( (Tuple( (App( (Lit( ':Variable:_s _ )) (Var( pv _ )) )) (Var( el eltk )) )) (
         (set r (CtxBind( (close CtxNil) pv (with-location( term (location-of eltk) )) )))
      ))
      ( (Tuple( (App( (App( (Lit( ':Tag:_s _ )) (Var( pv _ )) )) (Var( pt _ )) )) (Lit( el eltk )) )) (
         (if (==( (index-of-tag el) unknown-index-of-tag )) () (
            (set r CtxNil)
            (let tag-i (to-string(index-of-tag el)))
            (set r (CtxBind( (close r) pv (
               (App(
                  (close(Lit( ':_s (with-key( eltk ':_s )) )))
                  (close(App(
                     (close(Lit( tag-i (with-key( eltk tag-i )) )))
                     (close(AType(parse-type 'Constant+Literal+U64_s)))
                  )))
               ))
            ) )))
            (let tag-tt (clone-rope(SCons(
               (close(SAtom 'Tag<_s))
               (close(SCons(
                  (close(SAtom el))
                  (close(SAtom '>_s))
               )))
            ))))
            (set r (CtxBind( (close r) pt (Lit( tag-tt (with-key( eltk tag-tt )) )) )))
         ))
      ))
      ( (Tuple( (Var( pv _ )) t )) (
         (set r (CtxBind( (close CtxNil) pv (with-location( term (location-of t) )) )))
      ))
      ( _ () )
   ))
   r
) Context);

