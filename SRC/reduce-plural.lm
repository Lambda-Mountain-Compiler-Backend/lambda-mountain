
reduce-plural := Î»(: pts List<Type>). (: (
   (let dpts (: LEOF List<Type>))
   (for-each (pt in pts) (
      (print 'Normal\s_s)(print pt)(print '\n_s)
      (print 'DeNormal\s_s)(print pt)(print '\n_s)
      (set dpts (cons( (Tuple( (denormalize-arrow pt) pt )) dpts )))
   ))
   (set pts (.reverse dpts))
   (let r (: LEOF List<Type>))
   (let maybe-constructor pts)
   (while (non-zero maybe-constructor) (match maybe-constructor (
      ()
      ( (LCons( (Tuple( try-denormal try )) tlt )) (
         (if (is-constructor try) (
            (set r (cons( (Tuple( try-denormal try )) r )))
         ) ())
         (set maybe-constructor tlt)
      ))
   )))
   (if (non-zero r) (set pts (: LEOF List<Type>)) ())
   (while (non-zero pts) (match pts (
      ()
      ( (LCons( (Tuple( try-denormal try )) tlt )) (
         (set pts tlt)
         (for-each ((Tuple( tst-denormal tst )) in tlt) (
            (if (non-zero try) (
               (if (can-unify( (.domain try-denormal) (.domain tst-denormal) )) (
                  (set try TAny)
               ) ())
            ) ())
         ))
         (if (non-zero try) (
            (set r (cons( (Tuple( try-denormal try )) r )))
         ) ())
      ))
   )))
   (set pts r)
   (set r (: LEOF List<Type>))
   (while (non-zero pts) (match pts (
      ()
      ( (LCons( (Tuple( try-denormal try )) tlt )) (
         (set pts tlt)
         (for-each ((Tuple( tst-denormal tst )) in tlt) (
            (if (non-zero try) (
               (if (can-unify( (.domain try-denormal) (.domain tst-denormal) )) (
                  (set try TAny)
               ) ())
            ) ())
         ))
         (if (non-zero try) (
            (set r (cons( try r )))
         ) ())
      ))
   )))
   r
) List<Type>);
