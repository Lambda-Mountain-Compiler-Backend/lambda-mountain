
type StructLayout = LM1Style | CStyle | FragmentStyle | UnknownStyle;

type ClassInfo = ClassInfo { layout: StructLayout, lhs: Type, cases: List<Tuple<CString,Type>> };
let class-info-index = {} :: HashtableEq<Tuple<CString,U64>,ClassInfo>;

let class-info-default = ClassInfo{ UnknownStyle, TAny, [] :: List<Tuple<CString,Type>> };
let .with-layout(ci: ClassInfo, layout: StructLayout): ClassInfo = (
   ClassInfo{ layout, ci.lhs, [] :: List<Tuple<CString,Type>> }
);
let .with-lhs(ci: ClassInfo, lhs: Type): ClassInfo = (
   ClassInfo{ ci.layout, lhs, ci.cases }
);
let .with-case(ci: ClassInfo, case-tag: CString, case-struct: Type): ClassInfo = (
   ClassInfo{ ci.layout, ci.lhs, cons(Tuple{case-tag,case-struct}, ci.cases) }
);

let add-class-info-case(cls: Type, case-tag: CString, case-struct: Type): Nil = (
   class-info-index = class-info-index.bind(
      cls.ground-tag-and-arity,
      class-info-index.lookup(cls.ground-tag-and-arity,class-info-default)
                      .with-lhs(cls).with-case(case-tag, case-struct)
   );
);

let add-class-info-layout(cls: Type, layout: StructLayout): Nil = (
   class-info-index = class-info-index.bind(
      cls.ground-tag-and-arity,
      class-info-index.lookup(cls.ground-tag-and-arity,class-info-default).with-layout(layout)
   );
);

let .is-class(cls: Type): U64 = class-info-index.has(cls.ground-tag-and-arity);
let .is-lm-struct(cls: Type): U64 = (
   let ta = cls.ground-tag-and-arity;
   is(class-info-index.lookup(ta, class-info-default).layout, LM1Style)
);
let .is-fragment(cls: Type): U64 = (
   let ta = cls.ground-tag-and-arity;
   is(class-info-index.lookup(ta, class-info-default).layout, FragmentStyle)
);
let .exists(cls: Type): U64 = class-info-index.has(cls.ground-tag-and-arity);
let .only-child(cls: Type): CString = (
   match class-info-index.lookup(cls.ground-tag-and-arity, class-info-default) {
      ClassInfo { cases:[Tuple{ tag=first }..] } => tag;
      _ => c"";
   }
);

let index-fields-of-tag(tag: CString, base-type: Type, fields-params: Type, fields-rhs: Type): Nil = (
   add-class-info-case(base-type, tag, fields-rhs);
   index-fields-quick-prop( t1(c"Tag::" + tag), base-type, fields-rhs, 1 );
   index-fields-quick-prop( t1(c"Tag::" + tag), t3( c"Array", base-type, TAny), fields-rhs, 1 );
);

let index-fields-quick-prop(tag-tt: Type, base-type: Type, fields-tt: Type, field-index: U64): Nil = (
   match fields-tt {
      TGround{ tag:c"Cons", parameters:[pt.. rst..] } => (
         add-quick-prop( tag-tt, base-type,
            t2( c"Field::" + to-string(field-index), pt )
         );
         add-quick-prop( t3( c"Array", base-type, TAny ), t3( c"Array", base-type, TAny ),
            t2( c"Field::" + to-string(field-index), pt )
         );
         index-fields-quick-prop( tag-tt, base-type, rst, field-index + 1)
      );
      TGround{ tag:c"Nil" } => ();
      pt => (
         add-quick-prop( tag-tt, base-type,
            t2( c"Field::" + to-string(field-index), pt )
         );
         add-quick-prop( t3( c"Array", base-type, TAny ), t3( c"Array", base-type, TAny ),
            t2( c"Field::" + to-string(field-index), pt )
         )
      );
   }
);
