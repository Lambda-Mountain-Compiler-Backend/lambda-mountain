
let cmp(left: Type, right: Type): Ord = (
   match left {
      TGround { ltag=tag, lparameters=parameters } => (match right {
         TGround { rtag=tag, rparameters=parameters } => (
            cmp(ltag,rtag) && cmp(lparameters, rparameters)
         );
         _ => cmp($".0"(left), $".0"(right));
      });
      TAnd{ lconjugate=conjugate } => (match right {
         TAnd{ rconjugate=conjugate } => (
            let result = Equal;
            if lconjugate.length < rconjugate.length then result = LessThan
            else if lconjugate.length > rconjugate.length then result = GreaterThan
            else {
               let ci = 0_u64;
               while ci < lconjugate.length {
                  result = result && cmp(lconjugate[ci], rconjugate[ci]);
                  ci = ci + 1;
               };
            };
            result;
         );
         _ => cmp($".0"(left), $".0"(right));
      });
      TVar{ left-name=name } => (match right {
         TVar{ right-name=name } => (
            cmp(left-name,right-name)
         );
         _ => cmp($".0"(left), $".0"(right));
      });
      TAny{} => (match right {
         TAny{} => Equal;
         _ => cmp($".0"(left), $".0"(right));
      });
   }
);
