
type ASTList ASTLEOF | (ASTSeq( ASTList[] , AST )); zero ASTList ASTLEOF;

type StringStringList SSEOF | (SSSeq( StringStringList[] , String , String )); zero StringStringList SSEOF;
type StringSList SSLEOF | (SSLSeq( StringSList[] , String , S )); zero StringSList SSLEOF;

type IsUsed Used | Unused | Tail | Return;

type Context CtxEOF | CtxNil | (CtxBind( Context[] , String , AST[] )); zero Context CtxEOF;
type Pair (Pair( AST , AST ));
type CPair (CPair( Context , Context ));
type TCPair (TCPair( TContext , TContext ));
type UPair (UPair( IsUsed , IsUsed ));

print := λ(: t Context). (: (tail(
   (match t (
      ()
      ( CtxEOF () )
      ( CtxNil () )
      ( (CtxBind( rst k v )) (tail(
         (print rst)
         (print k)
         (print '\s=\s_s)
         (print v)
         (print '\:\n_s)
      )))
   ))
   ()
)) Nil);

print := λ(: t TContext). (: (tail(
   (match t (
      ()
      ( TCtxEOF () )
      ( (TCtxBind( rst k v )) (tail(
         (print rst)
         (print k)
         (print '\s=\s_s)
         (print v)
         (print '\:\n_s)
      )))
   ))
   ()
)) Nil);

print := λ(: t AST). (: (tail(
   (match t (
      ()
      ( ASTEOF (print 'EOF_s) )
      ( ASTNil (print '\[\]_s) )
      ( (Var a) (print a) )
      ( (Lit a) (tail( (print '\`_s) (print a) )))
      ( (ASTType( lhs rhs )) (tail(
         (print 'type\s_s)
         (print lhs)
         (print '\s=\s_s)
         (print rhs)
      )))
      ( (Glb( k v )) (tail(
         (print k)
         (print '\s:=\s_s)
         (print v)
      )))
      ( (Fragment( k v )) (tail(
         (print 'fragment\s_s)
         (print k)
         (print '\s:=\s_s)
         (print v)
      )))
      ( (App( l r )) (tail(
         (print '\[_s)
         (print l)
         (print '\s_s)
         (print r)
         (print '\]_s)
      )))
      ( (Abs( lhs rhs )) (tail(
         (print '\[_s)
         (print '\l_s)
         (print lhs)
         (print '._s)
         (print rhs)
         (print '\]_s)
      )))
      ( (Asc( t tt )) (tail(
         (print '\[:\s_s)
         (print t)
         (print '\s_s)
         (print tt)
         (print '\]_s)
      )))
      ( (As( t tt )) (tail(
         (print '\[as\s_s)
         (print t)
         (print '\s_s)
         (print tt)
         (print '\]_s)
      )))
      ( (Sizeof( tt )) (tail(
         (print '\[sizeof\s_s)
         (print tt)
         (print '\]_s)
      )))
      ( (Seq( l r )) (tail(
         (print l)
         (print '\:\n_s)
         (print r)
      )))
   ))
   ()
)) Nil);

serialize-ast := λ(: t AST). (: (tail(
   (match t (
      ()
      ( ASTEOF (print '\[\]_s) )
      ( ASTNil (print 'Nil_s) )
      ( (Var a) (tail(
         (print '\[Variable\s_s)
         (print a)
         (print '\]_s)
      )))
      ( (Lit a) (tail(
         (print '\[Literal\s_s)
         (print a)
         (print '\]_s)
      )))
      ( (ASTType( lhs rhs )) (tail(
         (print '\[Type\s\[_s)
         (serialize-ast lhs)
         (print '\s_s)
         (serialize-ast rhs)
         (print '\]\]_s)
      )))
      ( (Glb( lhs rhs )) (tail(
         (print '\[Global\s\[_s)
         (print lhs)
         (print '\s_s)
         (serialize-ast rhs)
         (print '\]\]_s)
      )))
      ( (Fragment( lhs rhs )) (tail(
         (print '\[Fragment\s\[_s)
         (print lhs)
         (print '\s_s)
         (serialize-ast rhs)
         (print '\]\]_s)
      )))
      ( (App( lhs rhs )) (tail(
         (print '\[App\s\[_s)
         (serialize-ast lhs)
         (print '\s_s)
         (serialize-ast rhs)
         (print '\]\]_s)
      )))
      ( (Abs( lhs rhs )) (tail(
         (print '\[Lambda\s\[_s)
         (serialize-ast lhs)
         (print '\s_s)
         (serialize-ast rhs)
         (print '\]\]_s)
      )))
      ( (Seq( ASTEOF r )) (tail(
         (serialize-ast r)
         (print '\n_s)
      )))
      ( (Seq( l r )) (tail(
         (serialize-ast l)
         (serialize-ast r)
         (print '\n_s)
      )))
      ( (Asc( t tt )) (tail(
         (print '\[App\s\[_s)
         (print '\[App\s\[_s)
         (print '\[Literal\s:\]\s_s)
         (serialize-ast t)
         (print '\]\]\s_s)
         (serialize-ast tt)
         (print '\]\]_s)
      )))
      ( (As( t tt )) (tail(
         (print '\[App\s\[_s)
         (print '\[App\s\[_s)
         (print '\[Var\sas\]\s_s)
         (serialize-ast t)
         (print '\]\]\s_s)
         (serialize-ast tt)
         (print '\]\]_s)
      )))
      ( (Sizeof( tt )) (tail(
         (print '\[App\s\[_s)
         (print '\[Var\ssizeof\]\s_s)
         (serialize-ast tt)
         (print '\]\]_s)
      )))
   ))
   ()
)) Nil);

s-abs := λ(: lhs S[])(: rhs S[]). (: (
   (close(SCons(
      (close(SAtom 'Abs_s))
      (close(SCons(
         lhs
         rhs
      )))
   )))
) S[]);

s-app := λ(: lhs S[])(: rhs S[]). (: (
   (close(SCons(
      (close(SAtom 'App_s))
      (close(SCons(
         lhs
         rhs
      )))
   )))
) S[]);

s-nil := λ. (: (
   (close SNil)
) S[]);

s-var := λ(: s String). (: (
   (close(SCons(
      (close(SAtom 'Var_s))
      (close(SAtom s))
   )))
) S[]);

s-lit := λ(: s String). (: (
   (close(SCons(
      (close(SAtom 'Lit_s))
      (close(SAtom s))
   )))
) S[]);

serialize-ast := λ(: tt Type). (: (match tt (
   ()
   ( TAny (print '\[Variable\s?\]_s) )
   ( (TVar( vn )) (tail(
      (print '\[Variable\s_s)
      (print vn)
      (print '\]_s)
   )))
   ( (TGround( tag TypeEOF )) (tail(
      (print '\[Literal\s_s)
      (print tag)
      (print '\]_s)
   )))
   ( (TGround( tag (TypeSeq( TypeEOF p1 )) )) (tail(
      (print '\[App\s\[_s)
      (print '\[Literal\s_s)
      (print tag)
      (print '\]\s_s)
      (serialize-ast p1)
      (print '\]\]_s)
   )))
   ( (TGround( tag (TypeSeq( (TypeSeq( TypeEOF p1 )) p2 )) )) (tail(
      (print '\[App\s\[_s)
      (print '\[Literal\s_s)
      (print tag)
      (print '\]\s_s)
      (print '\[App\s\[_s)
      (serialize-ast p1)
      (print '\s_s)
      (serialize-ast p2)
      (print '\]\]_s)
      (print '\]\]_s)
   )))
   ( (TGround( tag (TypeSeq( (TypeSeq( (TypeSeq( TypeEOF p1 )) p2 )) p3 )) )) (tail(
      (print '\[App\s\[_s)
      (print '\[Literal\s_s)
      (print tag)
      (print '\]\s_s)
      (print '\[App\s\[_s)
      (print '\[App\s\[_s)
      (serialize-ast p1)
      (print '\s_s)
      (serialize-ast p2)
      (print '\]\]\s_s)
      (serialize-ast p3)
      (print '\]\]_s)
      (print '\]\]_s)
   )))
   ( (TAnd( lt rt )) (tail(
      (print '\[App\s\[_s)
      (print '\[Literal\sAnd\]\s_s)
      (print '\[App\s\[_s)
      (serialize-ast lt)
      (print '\s_s)
      (serialize-ast rt)
      (print '\]\]_s)
      (print '\]\]_s)
   )))
)) Nil);

