
type AST ASTEOF | ASTNil | (App( AST[] , AST[] )) | (Var( String )) | (Lit( String )) | (Abs( AST[] , AST[] ))
                | (Seq( AST[] , AST[] )) | (Glb( String , AST[] )) | (ASTType( AST[] , AST[] )) | (Fragment( String , AST[] ))
                | (Asc( AST[] , Type[] )) | (As( AST[] , Type[] )) | (Sizeof( Type[] )); zero AST ASTEOF;

type ASTList ASTLEOF | (ASTSeq( ASTList[] , AST )); zero ASTList ASTLEOF;

type StringStringList SSEOF | (SSSeq( StringStringList[] , String , String )); zero StringStringList SSEOF;
type StringSList SSLEOF | (SSLSeq( StringSList[] , String , S )); zero StringSList SSLEOF;

type IsUsed Used | Unused | Tail | Return;

type Context CtxEOF | CtxNil | (CtxBind( Context[] , String , AST[] )); zero Context CtxEOF;
type TContext TCtxEOF | (TCtxBind( TContext[] , String , Type , AST )); zero TContext TCtxEOF;
type Pair (Pair( AST , AST ));
type CPair (CPair( Context , Context ));
type TPair (TPair( Type , Type ));
type TCPair (TCPair( TContext , TContext ));
type UPair (UPair( IsUsed , IsUsed ));

ast-tokenized-program := (: SNil S);
ast-parsed-program := (: ASTEOF AST);

== := λ(: lu IsUsed)(: ru IsUsed). (: (tail(
   (let r 0_u64)
   (match (UPair( lu ru )) (
      ()
      ( (UPair( Used Used )) (set r 1_u64) )
      ( (UPair( Unused Unused )) (set r 1_u64) )
      ( (UPair( Tail Tail )) (set r 1_u64) )
      ( (UPair( Return Return )) (set r 1_u64) )
      ( _ () )
   ))
   r
)) U64);

== := λ(: lt Type)(: rt Type). (: (tail(
   (let r 0_u64)
   (match (TPair( lt rt )) (
      ()
      ( (TPair( TAny TAny )) (set r 1_u64) )
      ( (TPair( (TVar lv) (TVar rv) )) (set r (==( lv rv ))) )
      ( (TPair( (TAnd( llt rlt )) (TAnd( lrt rrt )) )) (
         (if (==( llt lrt )) (
            (if (==( rlt rrt )) (
               (set r 1_u64)
            ) ())
         ) ())
      ))
      ( (TPair( (TGround( ln TypeEOF )) (TGround( rn TypeEOF )) )) (
         (set r (==( ln rn )))
      ))
      ( (TPair( (TGround( ln (TypeSeq( TypeEOF lt1 )) )) (TGround( rn (TypeSeq( TypeEOF rt1 )) )) )) (
         (if (==( ln rn )) (
            (if (==( lt1 rt1 )) (
               (set r 1_u64)
            ) ())
         ) ())
      ))
      ( (TPair( (TGround( ln (TypeSeq( (TypeSeq( TypeEOF lt1 )) lt2 )) )) (TGround( rn (TypeSeq( (TypeSeq( TypeEOF rt1 )) rt2 )) )) )) (
         (if (==( ln rn )) (
            (if (==( lt1 rt1 )) (
               (if (==( lt2 rt2 )) (
                  (set r 1_u64)
               ) ())
            ) ())
         ) ())
      ))
      ( _ () )
   ))
   r
)) U64);

== := λ(: lterm AST)(: rterm AST). (: (tail(
   (let r 0_u64)
   (match (Pair( lterm rterm )) (
      ()
      ( (Pair( ASTEOF ASTEOF )) (set r 1_u64) )
      ( (Pair( ASTNil ASTNil )) (set r 1_u64) )
      ( (Pair( (Var lv) (Var rv) )) (
         (if (==( (as lv U64) (as rv U64) )) (
            (set r 1_u64)
         ) ())
      ))
      ( (Pair( (Lit lv) (Lit rv) )) (
         (if (==( (as lv U64) (as rv U64) )) (
            (set r 1_u64)
         ) ())
      ))
      ( _ (
        (if (==( (.0 lterm) (.0 rterm) )) (
           (if (==( (as (.1 (as lterm App)) U64) (as (.1 (as rterm App)) U64) )) (
              (if (==( (as (.2 (as lterm App)) U64) (as (.2 (as rterm App)) U64) )) (set r 1_u64) () )
           ) ())
        ) ())
      ))
   ))
   r
)) U64);

print := λ(: t Context). (: (tail(
   (match t (
      ()
      ( CtxEOF () )
      ( CtxNil () )
      ( (CtxBind( rst k v )) (tail(
         (print rst)
         (print k)
         (print '\s=\s_s)
         (print v)
         (print '\:\n_s)
      )))
   ))
   ()
)) Nil);

print := λ(: t TContext). (: (tail(
   (match t (
      ()
      ( TCtxEOF () )
      ( (TCtxBind( rst k v )) (tail(
         (print rst)
         (print k)
         (print '\s=\s_s)
         (print v)
         (print '\:\n_s)
      )))
   ))
   ()
)) Nil);

print := λ(: t AST). (: (tail(
   (match t (
      ()
      ( ASTEOF (print 'EOF_s) )
      ( ASTNil (print '\[\]_s) )
      ( (Var a) (print a) )
      ( (Lit a) (tail( (print '\`_s) (print a) )))
      ( (ASTType( lhs rhs )) (tail(
         (print 'type\s_s)
         (print lhs)
         (print '\s=\s_s)
         (print rhs)
      )))
      ( (Glb( k v )) (tail(
         (print k)
         (print '\s:=\s_s)
         (print v)
      )))
      ( (Fragment( k v )) (tail(
         (print 'fragment\s_s)
         (print k)
         (print '\s:=\s_s)
         (print v)
      )))
      ( (App( l r )) (tail(
         (print '\[_s)
         (print l)
         (print '\s_s)
         (print r)
         (print '\]_s)
      )))
      ( (Abs( lhs rhs )) (tail(
         (print '\[_s)
         (print '\l_s)
         (print lhs)
         (print '._s)
         (print rhs)
         (print '\]_s)
      )))
      ( (Asc( t tt )) (tail(
         (print '\[:\s_s)
         (print t)
         (print '\s_s)
         (print tt)
         (print '\]_s)
      )))
      ( (As( t tt )) (tail(
         (print '\[as\s_s)
         (print t)
         (print '\s_s)
         (print tt)
         (print '\]_s)
      )))
      ( (Sizeof( tt )) (tail(
         (print '\[sizeof\s_s)
         (print tt)
         (print '\]_s)
      )))
      ( (Seq( l r )) (tail(
         (print l)
         (print '\:\n_s)
         (print r)
      )))
   ))
   ()
)) Nil);

serialize-ast := λ(: t AST). (: (tail(
   (match t (
      ()
      ( ASTEOF (print '\[\]_s) )
      ( ASTNil (print 'Nil_s) )
      ( (Var a) (tail(
         (print '\[Variable\s_s)
         (print a)
         (print '\]_s)
      )))
      ( (Lit a) (tail(
         (print '\[Literal\s_s)
         (print a)
         (print '\]_s)
      )))
      ( (ASTType( lhs rhs )) (tail(
         (print '\[Type\s\[_s)
         (serialize-ast lhs)
         (print '\s_s)
         (serialize-ast rhs)
         (print '\]\]_s)
      )))
      ( (Glb( lhs rhs )) (tail(
         (print '\[Global\s\[_s)
         (print lhs)
         (print '\s_s)
         (serialize-ast rhs)
         (print '\]\]_s)
      )))
      ( (Fragment( lhs rhs )) (tail(
         (print '\[Fragment\s\[_s)
         (print lhs)
         (print '\s_s)
         (serialize-ast rhs)
         (print '\]\]_s)
      )))
      ( (App( lhs rhs )) (tail(
         (print '\[App\s\[_s)
         (serialize-ast lhs)
         (print '\s_s)
         (serialize-ast rhs)
         (print '\]\]_s)
      )))
      ( (Abs( lhs rhs )) (tail(
         (print '\[Lambda\s\[_s)
         (serialize-ast lhs)
         (print '\s_s)
         (serialize-ast rhs)
         (print '\]\]_s)
      )))
      ( (Seq( ASTEOF r )) (tail(
         (serialize-ast r)
         (print '\n_s)
      )))
      ( (Seq( l r )) (tail(
         (serialize-ast l)
         (serialize-ast r)
         (print '\n_s)
      )))
      ( (Asc( t tt )) (tail(
         (print '\[App\s\[_s)
         (print '\[App\s\[_s)
         (print '\[Literal\s:\]\s_s)
         (serialize-ast t)
         (print '\]\]\s_s)
         (serialize-ast tt)
         (print '\]\]_s)
      )))
      ( (As( t tt )) (tail(
         (print '\[App\s\[_s)
         (print '\[App\s\[_s)
         (print '\[Var\sas\]\s_s)
         (serialize-ast t)
         (print '\]\]\s_s)
         (serialize-ast tt)
         (print '\]\]_s)
      )))
      ( (Sizeof( tt )) (tail(
         (print '\[App\s\[_s)
         (print '\[Var\ssizeof\]\s_s)
         (serialize-ast tt)
         (print '\]\]_s)
      )))
   ))
   ()
)) Nil);

s-abs := λ(: lhs S[])(: rhs S[]). (: (
   (close(SCons(
      (close(SAtom 'Abs_s))
      (close(SCons(
         lhs
         rhs
      )))
   )))
) S[]);

s-app := λ(: lhs S[])(: rhs S[]). (: (
   (close(SCons(
      (close(SAtom 'App_s))
      (close(SCons(
         lhs
         rhs
      )))
   )))
) S[]);

s-nil := λ. (: (
   (close SNil)
) S[]);

s-var := λ(: s String). (: (
   (close(SCons(
      (close(SAtom 'Var_s))
      (close(SAtom s))
   )))
) S[]);

s-lit := λ(: s String). (: (
   (close(SCons(
      (close(SAtom 'Lit_s))
      (close(SAtom s))
   )))
) S[]);

print := λ(: tt Type). (: (match tt (
   ()
   ( TAny (print '?_s) )
   ( (TVar( vn )) (tail( (print '`_s) (print vn) )) )
   ( (TGround( tag TypeEOF )) (print tag) )
   ( (TGround( tag (TypeSeq( TypeEOF p1 )) )) (tail(
      (print tag)
      (print '<_s)
      (print p1)
      (print '>_s)
   )))
   ( (TGround( tag (TypeSeq( (TypeSeq( TypeEOF p1 )) p2 )) )) (tail(
      (print tag)
      (print '<_s)
      (print p1)
      (print ',_s)
      (print p2)
      (print '>_s)
   )))
   ( (TGround( tag (TypeSeq( (TypeSeq( (TypeSeq( TypeEOF p1 )) p2 )) p3 )) )) (tail(
      (print tag)
      (print '<_s)
      (print p1)
      (print ',_s)
      (print p2)
      (print ',_s)
      (print p3)
      (print '>_s)
   )))
   ( (TAnd( (TGround( 'Arrow_s (TypeSeq( (TypeSeq( TypeEOF p1 )) p2 )) )) rt )) (tail(
      (print 'Arrow<_s)
      (print p1)
      (print ',_s)
      (print p2)
      (print '>\n_s)
      (print rt)
   )))
   ( (TAnd( lt (TGround( 'Arrow_s (TypeSeq( (TypeSeq( TypeEOF p1 )) p2 )) )) )) (tail(
      (print lt)
      (print '\n_s)
      (print 'Arrow<_s)
      (print p1)
      (print ',_s)
      (print p2)
      (print '>_s)
   )))
   ( (TAnd( lt rt )) (tail(
      (print lt)
      (print '\s+\s_s)
      (print rt)
   )))
)) Nil);

serialize-ast := λ(: tt Type). (: (match tt (
   ()
   ( TAny (print '\[Variable\s?\]_s) )
   ( (TVar( vn )) (tail(
      (print '\[Variable\s_s)
      (print vn)
      (print '\]_s)
   )))
   ( (TGround( tag TypeEOF )) (tail(
      (print '\[Literal\s_s)
      (print tag)
      (print '\]_s)
   )))
   ( (TGround( tag (TypeSeq( TypeEOF p1 )) )) (tail(
      (print '\[App\s\[_s)
      (print '\[Literal\s_s)
      (print tag)
      (print '\]\s_s)
      (serialize-ast p1)
      (print '\]\]_s)
   )))
   ( (TGround( tag (TypeSeq( (TypeSeq( TypeEOF p1 )) p2 )) )) (tail(
      (print '\[App\s\[_s)
      (print '\[Literal\s_s)
      (print tag)
      (print '\]\s_s)
      (print '\[App\s\[_s)
      (serialize-ast p1)
      (print '\s_s)
      (serialize-ast p2)
      (print '\]\]_s)
      (print '\]\]_s)
   )))
   ( (TGround( tag (TypeSeq( (TypeSeq( (TypeSeq( TypeEOF p1 )) p2 )) p3 )) )) (tail(
      (print '\[App\s\[_s)
      (print '\[Literal\s_s)
      (print tag)
      (print '\]\s_s)
      (print '\[App\s\[_s)
      (print '\[App\s\[_s)
      (serialize-ast p1)
      (print '\s_s)
      (serialize-ast p2)
      (print '\]\]\s_s)
      (serialize-ast p3)
      (print '\]\]_s)
      (print '\]\]_s)
   )))
   ( (TAnd( lt rt )) (tail(
      (print '\[App\s\[_s)
      (print '\[Literal\sAnd\]\s_s)
      (print '\[App\s\[_s)
      (serialize-ast lt)
      (print '\s_s)
      (serialize-ast rt)
      (print '\]\]_s)
      (print '\]\]_s)
   )))
)) Nil);

