
let unify-hint(hint: Type, tt: Type): Type = (
   match Tuple{hint, tt} {
      Tuple{first:TGround{hint-tag=tag, hint-args=parameters},
            second:TGround{tt-tag=tag, tt-args=parameters}} => (
         if hint-tag == tt-tag { hint }
         else { TGround{ tt-tag, close(unify-hint(hint,tt-args)) } };
      );
      Tuple{second:TAnd{lt=left,rt=right}} => (
         TAnd{ close(unify-hint(hint,lt)), close(unify-hint(hint,rt)) };
      );
      _ => tt;
   }
);

let unify-hint(hint: Type, tt: List<Type>): List<Type> = (
   match tt {
      LCons{ th=head, tl=tail } => cons( unify-hint(hint,th), unify-hint(hint,tl) );
      _ => tt;
   }
);
