
# without-location is mainly used to scrub macro location information so that the preprocessor knows to overwrite them

let without-location(term: AST): AST = (
   match term {
      Var{key=key,token=token} => Var{key,without-location(token)};
      Lit{key=key,token=token} => Lit{key,without-location(token)};
      App{left=left,right=right} => App{close(without-location(left)),close(without-location(right))};
      Seq{left=left,right=right} => Seq{close(without-location(left)),close(without-location(right))};
      Abs{lhs=lhs,rhs=rhs,tt=tt} => Abs{close(without-location(lhs)),close(without-location(rhs)),tt};
      Typedef{lhs=lhs,rhs=rhs} => Typedef{close(without-location(lhs)),close(without-location(rhs))};
      Glb{key=key,val=val} => Glb{key,close(without-location(val))};
      _ => term;
   }
);

let without-location(t: Token): Token = (
   Token{ t.key, t.nonce, mk-location() }
);
