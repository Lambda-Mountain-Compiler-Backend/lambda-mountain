
add-field-aliases := λ(: fn String)(: field-index U64)(: base-type Type)(: ft Type)(: tag String). (: (
   (add-alias(
      (clone-rope(SCons( (close(SAtom '._s)) (close(SAtom fn)) )))
      (clone-rope(SCons( (close(SAtom '._s)) (close(SAtom(to-string field-index))) )))
      (t3( 'Arrow_s (+( (t1(+( 'Tag::_s tag ))) base-type )) ft ))
   ))
   (add-alias(
      (clone-rope(SCons( (close(SAtom 'set._s)) (close(SAtom fn)) )))
      (clone-rope(SCons( (close(SAtom 'set._s)) (close(SAtom(to-string field-index))) )))
      (t3( 'Arrow_s (t3( 'Cons_s (+( (t1(+( 'Tag::_s tag ))) base-type )) ft )) (t1 'Nil_s) ))
   ))
   (add-alias(
      (clone-rope(SCons( (close(SAtom '._s)) (close(SAtom fn)) )))
      (clone-rope(SCons( (close(SAtom '._s)) (close(SAtom(to-string field-index))) )))
      (t3( 'Arrow_s (t3( 'Array_s base-type TAny )) ft ))
   ))
   (add-alias(
      (clone-rope(SCons( (close(SAtom 'set._s)) (close(SAtom fn)) )))
      (clone-rope(SCons( (close(SAtom 'set._s)) (close(SAtom(to-string field-index))) )))
      (t3( 'Arrow_s (t3( 'Cons_s (t3( 'Array_s base-type TAny )) ft )) (t1 'Nil_s) ))
   ))
) Nil);

type-of-s-with-fields := λ(: base-type Type)(: tag String)(: compound AST)(: field-index U64). (: (
   (let r TAny)
   (match compound (
      ()
      ( (App( (Var(fn _)) (AType ft) )) (
         (add-field-aliases( fn field-index base-type ft tag ))
         (set r ft)
      ))
      ( (App( rst (App( (Var(fn _)) (AType ft) )) )) (
         (let ltt (type-of-s-with-fields( base-type tag rst (+( field-index 1_u64 )) )))
         (add-field-aliases( fn field-index base-type ft tag ))
         (set r (t3( 'Cons_s ltt ft )))
      ))
      ( (Lit( tt _ )) (
         (let nt TAny)
         (match (parse-field-of tt) (
            ()
            ( (Tuple( '_s ft )) (set nt ft) )
            ( (Tuple( fn ft )) (
               (add-field-aliases( fn field-index base-type ft tag ))
               (set nt ft)
            ))
         ))
         (set r nt)
      ))
      ( (Var( tt _ )) (
         (let nt TAny)
         (match (parse-field-of tt) (
            ()
            ( (Tuple( '_s ft )) (set nt ft) )
            ( (Tuple( fn ft )) (
               (add-field-aliases( fn field-index base-type ft tag ))
              (set nt ft)
            ))
         ))
         (set r nt)
      ))
      ( (App( (App( lt (Lit( ',_s _ )) )) rt )) (
         (let ltt (type-of-s-with-fields( base-type tag lt (+( field-index 1_u64 )) )))
         (let rtt (type-of-s-with-fields( base-type tag rt field-index )))
         (set r (t3( 'Cons_s ltt rtt )))
      ))
      ( _ (exit-error( 'Malformed\sType\sDefinition\sWith\sFields_s compound )))
   ))
   r
) Type);
