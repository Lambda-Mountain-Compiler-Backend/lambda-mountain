apply := λ(: function-name String)(: ft Type)(: pt Type)(: blame AST). (: (
   (apply-blame( function-name ft pt 0_u64 blame ))
) ApplyResult);

apply := λ(: ctx AContext)(: term AST). (: (
   (let return term)
   (match term (
      ()
      ( ASTEOF () )
      ( ASTNil () )
      ( (Lit( _ _ )) () )
      ( (AType tt) (
         (set return (AType( (substitute( ctx tt )) )))
      ))
      ( (Var( n _ )) (
         (let nr (.lookup( ctx n ASTEOF )))
         (if (non-zero nr) (set return nr) ())
      ))
      ( (App( vl vr )) (
         (set return (App(
            (close(apply( ctx vl )))
            (close(apply( ctx vr )))
         )))
      ))
      ( (Abs( vl vr tlt )) (
         (set return (Abs(
            (close(apply( ctx vl )))
            (close(apply( ctx vr )))
            tlt
         )))
      ))
      ( (Seq( vl vr )) (
         (set return (Seq(
            (close(apply( ctx vl )))
            (close(apply( ctx vr )))
         )))
      ))
      ( (Typedef( vl vr )) (
         (set return (Typedef(
            (close(apply( ctx vl )))
            (close(apply( ctx vr )))
         )))
      ))
      ( (Glb( k vr )) (
         (set return (Glb(
            (substitute( ctx k ))
            (close(apply( ctx vr )))
         )))
      ))
   ))
   return
) AST);

