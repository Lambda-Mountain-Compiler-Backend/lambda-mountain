
print := λ(: ctx FContext). (: (
   (print 'Fragment\sContext:\n_s)
   (while (non-zero ctx) (match ctx (
      ()
      ( (FCtxBind( rst k kt kf )) (
         (print k)(print '\s:\s_s)(print kt)(print '\n_s)(print kf)
         (set ctx rst)
      ))
   )))
) Nil);

fragment-context::new := λ. (: (
   (let r FCtxEOF)
   r
) FContext);

fragment-context::lookup := λ(: ctx FContext)(: k String)(: kt Type)(: sloc AST). (: (
   (fragment-context::lookup( ctx k kt sloc True_u8 ))
) Fragment);

fragment-context::lookup-soft := λ(: ctx FContext)(: k String)(: kt Type)(: sloc AST). (: (
   (fragment-context::lookup( ctx k kt sloc False_u8 ))
) Fragment);

fragment-context::lookup := λ(: ctx FContext)(: k String)(: kt Type)(: sloc AST)(: hard U8). (: (
   (let r (fragment::new()))
   (let found TAny)
   (while (non-zero ctx) (match ctx (
      ()
      ( (FCtxBind( is-vararg rst rk rt rf )) (
         (if (==( k rk )) (
            (match (slot( rt 'Arrow_s )) (
               ()
               ( (TGround( 'Arrow_s (TypeSeq( (TypeSeq( TypeEOF domaint )) ranget )) )) (
                  (if (can-unify( domaint kt )) (
                     (if (non-zero found) (
                        (if (can-unify( found domaint )) (
                           (set r rf)
                           (set found domaint)
                        ) ())
                     ) (
                        (set r rf)
                        (set found domaint)
                     ))
                  ) ())
                  (set ctx rst)
               ))
               ( _ (
                  (set r rf)
                  (set found (t1 'LocalVariable_s))
                  (set ctx FCtxEOF)
               ))
            ))
         ) (
            (set ctx rst)
         ))
      ))
   )))
   (if (||( (non-zero( found )) (==( hard False_u8 )) )) () (
      (print 'Context::lookup\s_s)(print k)(print '\s:\s_s)(print kt)(print '\n_s)
      (exit-error( 'Context::lookup\sCould\sNot\sFind\sSymbol_s sloc ))
   ))
   r
) Fragment);

fragment-context::lookup-vararg := λ(: ctx FContext)(: k String)(: kt Type)(: sloc AST). (: (
   (let r FLEOF)
   (while (non-zero ctx) (match ctx (
      ()
      ( (FCtxBind( is-vararg rst rk rt rf )) (
         (if (&&( (==( k rk )) (==( is-vararg True_u8 )) )) (
            (set r (FLSeq( (close r) rf )))
         ) (
            (set ctx rst)
         ))
      ))
   )))
   r
) FragmentList);

fragment-context::bind := λ(: ctx FContext)(: k String)(: kt Type)(: f Fragment). (: (
   (let new-ctx (FCtxBind(
      False_u8
      (close ctx)
      k kt f
   )))
   new-ctx
) FContext);

fragment-context::bind-vararg := λ(: ctx FContext)(: k String)(: kt Type)(: f Fragment). (: (
   (let new-ctx (FCtxBind(
      True_u8
      (close ctx)
      k kt f
   )))
   new-ctx
) FContext);
