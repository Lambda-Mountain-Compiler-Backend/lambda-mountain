
print := 位(: ctx FContext). (: (tail(
   (print 'Fragment\sContext:\n_s)
   (while (non-zero ctx) (match ctx (
      ()
      ( (FCtxBind( rst k kt kf )) (tail(
         (print k)(print '\s:\s_s)(print kt)(print '\n_s)(print kf)
         (set ctx rst)
      )))
   )))
)) Nil);

fragment-context::new := 位. (: (tail(
   (let r FCtxEOF)
   r
)) FContext);

fragment-context::lookup := 位(: ctx FContext)(: k String)(: kt Type)(: sloc AST). (: (tail(
   (let r (fragment::new()))
   (let found TAny)
   (while (non-zero ctx) (match ctx (
      ()
      ( (FCtxBind( rst rk rt rf )) (
         (if (==( k rk )) (
            (match (slot( rt 'Arrow_s )) (
               ()
               ( (TGround( 'Arrow_s (TypeSeq( (TypeSeq( TypeEOF domaint )) ranget )) )) (tail(
                  (if (can-unify( domaint kt )) (
                     (if (non-zero found) (
                        (if (can-unify( found domaint )) (tail(
                           (set r rf)
                           (set found domaint)
                        )) ())
                     ) (tail(
                        (set r rf)
                        (set found domaint)
                     )))
                  ) ())
                  (set ctx rst)
               )))
               ( _ (tail(
                  (set r rf)
                  (set found (t1 'LocalVariable_s))
                  (set ctx FCtxEOF)
               )))
            ))
         ) (
            (set ctx rst)
         ))
      ))
   )))
   (if (non-zero( found )) () (tail(
      (print 'Context::lookup\s_s)(print k)(print '\s:\s_s)(print kt)(print '\n_s)
      (exit-error( 'Context::lookup\sCould\sNot\sFind\sSymbol_s sloc ))
   )))
   r
)) Fragment);

fragment-context::bind := 位(: ctx FContext)(: k String)(: kt Type)(: f Fragment). (: (tail(
   (let new-ctx (FCtxBind(
      (close ctx)
      k kt f
   )))
   new-ctx
)) FContext);
