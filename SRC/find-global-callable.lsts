
let find-global-callable(fname: CString, arg-types: Type): AST = (
   let result = ASTEOF;
   let result-type = TAny;
   for Tuple{kt=first, t=second} in global-type-context.lookup(fname, [] :: List<Tuple<Type,AST>>) {
      if non-zero(apply-plural(kt, arg-types)) {
         if non-zero(result) {
            if can-unify(result-type, kt) { result = t; result-type = kt; }
            else if can-unify(kt, result-type) {();}
            else fail("Unable to find unambiguous global callable: \{fname}\n\{result-type}\n\{kt}\n");
         } else { result = t; result-type = kt; }
      }
   };
   if not(non-zero(result)) then fail("Unable to find appropriate global callable: \{fname}\n");
   result
);
