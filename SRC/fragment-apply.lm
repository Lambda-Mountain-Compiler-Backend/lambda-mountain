
fragment-apply := λ(: ctx FContext)(: offset I64)(: k String)(: args FragmentList)(: direct-type Type)(: sloc AST). (: (
   (fragment-apply( ctx offset k args direct-type sloc False_u8 ))
) Fragment);

fragment-apply := λ(: ctx FContext)(: offset I64)(: k String)(: args FragmentList)(: direct-type Type)(: sloc AST)(: already-destructured U8). (: (
   (let e-proto (fragment::new()))
   (set e-proto (fragment::set-context( e-proto ctx )))
   (set e-proto (fragment::set-offset( e-proto offset )))

   (let args-tt (typeof args))
   (if (non-zero args-tt) () (
      (print 'Apply\s_s)(print k)(print args-tt)
      (let msg (clone-rope(SCons( (close(SAtom 'Untyped\sFragment\sArguments:\s_s)) (close(SAtom k)) ))))
      (exit-error( msg sloc ))
   ))
   (let arrow (fragment-context::lookup( ctx k args-tt sloc )))
   (let arrow-tt (.type arrow))

   (let chain True_u8)
   (if (non-zero(slot( arrow-tt 'DontChain_s ))) (
      (set chain False_u8)
   ) ())

   (let tctx (unify( (slot( arrow-tt 'Arrow_s )) direct-type )))
   (set ctx (union( ctx tctx )))

   (match (fragment::get( arrow 'fragment_s )) (
      ()
      ( (SCons( (SAtom 'Abs_s) (SCons( lhs rhs )) )) () )
      ( _ (
         (print 'Fragment\sWas\sNot\sAn\sArrow:\s_s)
         (print k)(print '\s:\s_s)(print arrow-tt)(print '\n_s)
         (print (fragment::get( arrow 'fragment_s )))
         (exit 1_u64)
      ))
   ))

   (let return (apply-direct( ctx arrow args e-proto chain already-destructured sloc )))

   # add comments if in GNU mode
   (if (is( config-assemble-mode AssembleGNU )) (
      (let comment (SAtom '\oCall\sFragment\s_s))
      (set comment (SCons( (close comment) (close(SAtom k)) )))
      (set comment (SCons( (close comment) (close(SAtom '\s:\s_s)) )))
      (set comment (SCons( (close comment) (close(SAtom(to-string arrow-tt))) )))
      (set comment (SCons( (close comment) (close(SAtom '\n_s)) )))
      (set return (fragment::set( return 'program_s (SCons(
         (close comment)
         (close(fragment::get( return 'program_s )))
      )))))
   ) ())

   (set return (fragment::set-type( return (range arrow-tt) )))

   return
) Fragment);
