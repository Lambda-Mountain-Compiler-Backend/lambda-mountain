
compile-fragment-args := Î»(: ctx FContext)(: function-args-type Type)(: rval AST)(: offset I64). (: (
   (let r FLEOF)
   (match (slot( (typeof rval) 'Cons_s )) (
      ()
      ( (TGround( 'Cons_s (LCons( p2 (LCons( p1 LEOF )) )) )) (
         (match rval (
            ()
            ( (App( le re )) (
               (let e1 (compile-fragment-args( ctx (cons-head function-args-type) le offset )))
               (if (non-zero(slot( (cons-head function-args-type) 'Meta_s 'OntoStack_s ))) (
                  (set offset (-( offset (as (sizeof-aligned(cons-head function-args-type)) I64) )))
               ) ())
               (if (non-zero(slot( (cons-tail(cons-head function-args-type)) 'Meta_s 'OntoStack_s ))) (
                  (set offset (-( offset (as (sizeof-aligned(cons-tail(cons-head function-args-type))) I64) )))
               ) ())
               (let e2 (compile-expr( ctx re offset Used )))
               (if (non-zero(fragment::get-type e2)) () (
                  (set e2 (fragment::set-type( e2 (denormalize p2) )))
               ))
               (set r (FLSeq( (close e1) e2 )))
            ))
         ))
      ))
      ( _ (
         (let e1 (compile-expr( ctx rval offset Used )))
         (if (non-zero(fragment::get-type e1)) () (
            (set e1 (fragment::set-type( e1 (typeof rval) )))
         ))
         (set r (FLSeq( (close FLEOF) e1 )))
      ))
   ))
   r
) FragmentList);
