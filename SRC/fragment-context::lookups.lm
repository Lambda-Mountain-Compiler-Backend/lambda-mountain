
fragment-context::lookups := λ(: ctx FContext)(: k String)(: kt Type)(: sloc AST). (: (
   (fragment-context::lookups( ctx k kt sloc True_u8 ))
) List<Fragment>);

fragment-context::lookups := λ(: ctx FContext)(: k String)(: kt Type)(: sloc AST)(: hard U8). (: (
   (set k (find-alias( k kt )))
   (let r (: LEOF List<Fragment>))
   (let found TAny)
   (while (non-zero ctx) (match ctx (
      ()
      ( (FCtxBind( rst rk rt rf )) (
         (if (==( k rk )) (
            (if (is-arrow rt) (
               (let domaint (domain rt))
               (let ranget (range rt))
               (if (can-unify( domaint kt )) (
                  (if (non-zero found) (
                     (if (can-unify( found domaint )) (
                        (if (!=( (is-hook rt) 0_u64 )) (
                           (set r (cons( rf r )))
                        ) (
                           (set r (cons( rf (: LEOF List<Fragment>) )))
                           (set found domaint)
                        ))
                     ) ())
                  ) (
                     (if (!=( (is-hook rt) 0_u64 )) (
                        (set r (cons( rf r )))
                     ) (
                        (set r (cons( rf (: LEOF List<Fragment>) )))
                        (set found domaint)
                     ))
                  ))
               ) ())
               (set ctx rst)
            ) (
               (if (!=( (is-hook rt) 0_u64 )) (
                  (set r (cons( rf r )))
               ) (
                  (set r (cons( rf (: LEOF List<Fragment>) )))
                  (set ctx FCtxEOF)
                  (set found (t1 'LocalVariable_s))
               ))
            ))
         ) (
            (set ctx rst)
         ))
      ))
   )))
   (if (||( (!=( (.length r) 0_u64 )) (==( hard False_u8 )) )) () (
      (print 'Context::lookups\s_s)(print k)(print '\s:\s_s)(print kt)(print '\n_s)
      (exit-error( 'Context::lookup\sCould\sNot\sFind\sSymbol_s sloc ))
   ))
   r
) List<Fragment>);
