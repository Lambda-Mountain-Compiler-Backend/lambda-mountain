
index-typedefs := λ(: program AST). (: (
   (for-each-v (p in (.unroll-seq program)) (match p (
      ()
      ( (Typedef( lhs rhs )) (
         (index-typedefs( rhs 0_u64 ))
      ))
      ( (Typedef2( _ )) (
         (index-typedefs( p 0_u64 ))
      ))
      ( _ () )
   )))
) Nil);

index-typedefs := λ(: def AST)(: index U64) . (: (
   (match def (
      ()
      ( (App( (App( tds (Var( '|_s _ )) )) (Lit( tag _ )) )) (
         (index-index-of-tag( tag index ))
         (index-lone-tag( tag ))
         (index-typedefs( tds (+( index 1_u64 )) ))
      ))
      ( (App( (App( tds (Var( '|_s _ )) )) (App( (Lit( tag _ )) _ )) )) (
         (index-index-of-tag( tag index ))
         (index-typedefs( tds (+( index 1_u64 )) ))
      ))
      ( (Lit( tag _ )) (
         (index-index-of-tag( tag index ))
         (index-lone-tag( tag ))
      ))
      ( (App( (Lit( tag _ )) _ )) (
         (index-index-of-tag( tag index ))
      ))
      ( (Typedef2( _ )) (
         (let cases (.cases(as def Tag::Typedef2)))
         (for-each-v (case-fields in cases) (
            (if (non-zero(.first case-fields)) (
               (index-index-of-tag( (.first case-fields) 0_u64 ))
               (if (==( (.length(.second case-fields)) 0_u64 )) (
                  (index-lone-tag(.first case-fields))
               ) ())
            ) ())
            
         ))
      ))
      ( ASTEOF () )
      ( _ (exit-error( 'Invalid\sTypedef_s def )) )
   ))
) Nil);
