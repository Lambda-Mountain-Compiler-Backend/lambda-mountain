
cstring-cache := (: SSEOF StringStringList);
compile-declare-cstring := Î»(: val String). (: (
   (let cache cstring-cache)
   (let id '_s)
   (while (non-zero cache) (match cache (
      ()
      ( (SSSeq( rst k v )) (
         (if (==( k val )) (
            (set id v)
            (set cache SSEOF)
         ) (set cache rst))
      ))
   )))
   (if (head-string id) () (
      (set id (uuid()))
      (set assemble-data-section (SCons( (close assemble-data-section) (close(SAtom id)) )))
      (set assemble-data-section (SCons( (close assemble-data-section) (close(SAtom ':\n\t.ascii\s"_s)) )))
      (set assemble-data-section (SCons( (close assemble-data-section) (close(SAtom( escape-literal val ))) )))
      (set assemble-data-section (SCons( (close assemble-data-section) (close(SAtom '"\n\t.zero\s1\n_s)) )))
      (set cstring-cache (SSSeq(
         (close cstring-cache) val id
      )))
   ))
   (let r (fragment::new()))
   (set r (fragment::set( r 'expression_s (SAtom id) )))
   r
) Fragment);
