
index-c-type-ordinal := (: (HashtableEq( 0_u64 0_u64 (as 0_u64 Tuple<Type,String>[]) )) HashtableEq<Type,String>);

compile-c-typedef-concrete-ordinal := λ(: base-type Type). (: (
   (let base-uuid (uuid()))
   (set index-c-type-ordinal (.bind( index-c-type-ordinal base-type base-uuid )))
   (set assemble-header-section (SCons( (close assemble-header-section) (close(SAtom '//predefine\sdefine\s_s)) )))
   (set assemble-header-section (SCons( (close assemble-header-section) (close(SAtom(to-string base-type))) )))
   (set assemble-header-section (SCons( (close assemble-header-section) (close(SAtom '\nstruct\s_s)) )))
   (set assemble-header-section (SCons( (close assemble-header-section) (close(SAtom base-uuid)) )))
   (set assemble-header-section (SCons( (close assemble-header-section) (close(SAtom '\:\n_s)) )))
) Nil);

compile-c-typedef-ordinal := λ(: base-type Type). (: (
   (if (is-open base-type) () (
      (compile-c-typedef-concrete-ordinal( base-type ))
   ))
   (match base-type (
      ()
      ( (TGround( tag ts )) (
         (let k (Tuple( tag (.length ts) )))
         (for-each (vt in (.lookup( concrete-type-instances-index k (: LEOF List<Type>) ))) (
            (compile-c-typedef-concrete-ordinal( vt ))
         ))
      ))
   ))
) Nil);

continue-compile-c-typedefs-concrete := (: LEOF List<Tuple<Tuple<TContext,Type>,AST>>);
continue-compile-c-typedefs-count := 0_u64;
try-continue-compile-c-typedefs := λ. (: (
   (let continue continue-compile-c-typedefs-concrete)
   (while (non-zero continue) (
      (set continue-compile-c-typedefs-count (+( continue-compile-c-typedefs-count 1_u64 )))
      (if (<( continue-compile-c-typedefs-count 100_u64 )) () (
         (fail 'Unable\sTo\sResolve\sCircular\sType\sDependency\sDuring\sCompilation_s)
      ))
      (for-each ( (Tuple( (Tuple( tctx base-type )) body )) in continue ) (
         (compile-c-typedef-concrete( tctx base-type body ))
      ))
      (set continue continue-compile-c-typedefs-concrete)
   ))
) Nil);

is-incomplete-typedef := λ(: tt Type). (: (
   (let r 0_u64)
   (match tt (
      ()
      ( (TGround( 'Cons_s (LCons( p1 (LCons( p2 LEOF )) )) )) (
         (set r (||( (is-incomplete-typedef p1) (is-incomplete-typedef p2) )))
      ))
      ( (TAnd( lt rt )) (
         (set r (||( (is-incomplete-typedef lt) (is-incomplete-typedef rt) )))
      ))
      ( TAny () )
      ( (TVar _) () )
      ( (TGround( 'Nil_s _ )) () )
      ( (TGround( 'Never_s _ )) () )
      ( (TGround( 'U8_s _ )) () )
      ( (TGround( 'U16_s _ )) () )
      ( (TGround( 'U32_s _ )) () )
      ( (TGround( 'U64_s _ )) () )
      ( (TGround( 'I8_s _ )) () )
      ( (TGround( 'I16_s _ )) () )
      ( (TGround( 'I32_s _ )) () )
      ( (TGround( 'I64_s _ )) () )
      ( (TGround( 'String_s _ )) () )
      ( (TGround( 'File_s _ )) () )
      ( (TGround( 'Array_s _ )) () )
      ( (TGround( _ _ )) (
         (let c-type-name (.lookup( index-c-type-ordinal tt 'UnknownCTypename_s )))
         (if (==( c-type-name 'UnknownCTypename_s )) () (
            (set r 1_u64)
         ))
      ))
   ))
   r
) U64);

is-cstruct-hard-compiled-index := (: (HashtableEq( 0_u64 0_u64 (as 0_u64 Tuple<Type,U64>[]) )) HashtableEq<Type,U64>);
compile-c-typedef-concrete := λ(: tctx TContext)(: base-type Type)(: body AST). (: (
      (let base-uuid (.lookup( index-c-type-ordinal base-type 'UnknownCTypename_s )))
      (let case-number 0_u64)
      (let cases SNil)
      (let incomplete 0_u64)
      (while (non-zero body) (match body (
         ()
         ( (App( (App( rst (Var( '|_s _ )) )) case-definition )) (
            (let fields (compile-c-fields-of-case( base-type case-definition case-number )))
            (set fields (substitute( tctx fields )))
            (set incomplete (||( incomplete (is-incomplete-typedef fields) )))
            (set cases (+( cases (compile-c-casedef( fields case-number )) )))
            (set case-number (+( case-number 1_u64 )))
            (set body rst)
         ))
         ( case-definition (
            (let fields (compile-c-fields-of-case( base-type case-definition case-number )))
            (set fields (substitute( tctx fields )))
            (set incomplete (||( incomplete (is-incomplete-typedef fields) )))
            (set cases (+( cases (compile-c-casedef( fields case-number )) )))
            (set body ASTEOF)
         ))
      )))
      (if incomplete (
         (set continue-compile-c-typedefs-concrete (cons(
            (Tuple( (Tuple( tctx base-type )) body ))
            continue-compile-c-typedefs-concrete
         )))
      ) (
         (set is-cstruct-hard-compile-index (.bind( is-cstruct-hard-compiled-index base-type 1_u64 )))
         (set assemble-header-section (SCons( (close assemble-header-section) (close(SAtom '//define\s_s)) )))
         (set assemble-header-section (SCons( (close assemble-header-section) (close(SAtom(to-string base-type))) )))
         (set assemble-header-section (SCons( (close assemble-header-section) (close(SAtom '\nstruct\s_s)) )))
         (set assemble-header-section (SCons( (close assemble-header-section) (close(SAtom base-uuid)) )))
         (set assemble-header-section (SCons( (close assemble-header-section) (close(SAtom '{\n_s)) )))
         (set assemble-header-section (SCons( (close assemble-header-section) (close(SAtom '\tlong\s_0\:\n_s)) )))
         (set assemble-header-section (SCons( (close assemble-header-section) (close(SAtom '\tunion\s{\n_s)) )))
         (set assemble-header-section (SCons( (close assemble-header-section) (close cases) )))
         (set assemble-header-section (SCons( (close assemble-header-section) (close(SAtom '\t}\:\n}\:\n_s)) )))
      ))
) Nil);

compile-c-typedef := λ(: base-type Type)(: body AST). (: (
   (if (is-open base-type) () (
      (compile-c-typedef-concrete( TCtxEOF base-type body ))
   ))
   (match base-type (
      ()
      ( (TGround( tag ts )) (
         (let k (Tuple( tag (.length ts) )))
         (for-each (vt in (.lookup( concrete-type-instances-index k (: LEOF List<Type>) ))) (
            (let tctx (unify( base-type vt )))
            (compile-c-typedef-concrete( tctx vt body ))
         ))
      ))
   ))
) Nil);

compile-c-fields-of-case := λ(: base-type Type)(: tag-definition AST)(: case-number U64). (: (
   (let ft (t1 'Nil_s))
   (match tag-definition (
      ()
      ( (App( (Lit( tag _ )) case-definition )) (
         (set ft (type-of-s-with-fields( base-type tag case-definition case-number )))
      ))
      ( _ () )
   ))
   ft
) Type);

compile-c-casedef := λ(: fields Type)(: case-number U64). (: (
   (let r (+(
      (SAtom 'struct\s{_s)
      (+(
         (compile-c-casedef-fields( fields case-number 1_u64 ))
         (SAtom '}\:\n_s)
      ))
   )))
   r
) S);

compile-c-casedef-fields := λ(: fields Type)(: case-number U64)(: field-index U64). (: (
   (let r SNil)
   (match fields (
      ()
      ( (TGround( 'Nil_s _ )) () )
      ( (TGround( 'Cons_s (LCons( ft (LCons( rst _ )) )) )) (
         (set r (+( (+( (mangle-c-type ft) (SAtom '\s__s) )) (+( (SAtom(
            (to-string(+( (*( case-number 1000_u64 )) field-index )))
         )) (SAtom '\:_s) )) )))
         (set r (+( r (compile-c-casedef-fields( rst case-number (+( field-index 1_u64 )) )) )))
      ))
      ( ft (
         (set r (+( (+( (mangle-c-type ft) (SAtom '\s__s) )) (+( (SAtom(
            (to-string(+( (*( case-number 1000_u64 )) field-index )))
         )) (SAtom '\:_s) )) )))
      ))
   ))
   r
) S);
