
index-c-type-ordinal := (: (HashtableEq( 0_u64 0_u64 (as 0_u64 Tuple<Type,String>[]) )) HashtableEq<Type,String>);

compile-c-typedef := λ(: base-type Type)(: body AST). (: (
   (let base-uuid (uuid()))
   (set index-c-type-ordinal (.bind( index-c-type-ordinal base-type base-uuid )))
   (let case-number 0_u64)
   (let cases SNil)
   (while (non-zero body) (match body (
      ()
      ( (App( (App( rst (Var( '|_s _ )) )) case-definition )) (
         (let fields (type-of-s-with-fields case-definition))
         (set cases (+( cases (compile-c-casedef( fields case-number )) )))
         (set case-number (+( case-number 1_u64 )))
         (set body rst)
      ))
      ( case-definition (
         (let fields (type-of-s-with-fields case-definition))
         (set cases (+( cases (compile-c-casedef( fields case-number )) )))
         (set body ASTEOF)
      ))
   )))
   (set assemble-header-section (SCons( (close assemble-header-section) (close 'struct\s_s) )))
   (set assemble-header-section (SCons( (close assemble-header-section) (close base-uuid) )))
   (set assemble-header-section (SCons( (close assemble-header-section) (close '{\n_s) )))
   (set assemble-header-section (SCons( (close assemble-header-section) (close '\tlong\s_0\:\n_s) )))
   (set assemble-header-section (SCons( (close assemble-header-section) (close '\tunion\s{\n_s) )))
   (set assemble-header-section (SCons( (close assemble-header-section) (close cases) )))
   (set assemble-header-section (SCons( (close assemble-header-section) (close '\t}\:\n}\:\n_s) )))
) Nil);

compile-c-casedef := λ(: fields Type)(: case-number U64). (: (
   (let r (+(
      (SAtom 'struct\s{_s)
      (+(
         (compile-c-casedef-fields( fields case-number 1_u64 ))
         (SAtom '}\n_s)
      ))
   )))
   r
) S);

compile-c-casedef-fields := λ(: fields Type)(: case-number U64)(: field-index U64). (: (
   (let r SNil)
   (match fields (
      ()
      ( (TGround( 'cons_s (LCons( rst (LCons( ft _ )) )) )) (
         (set r (+( (+( (mangle-c-type ft) (SAtom '\s__s) )) (+( (SAtom(
            (to-string(+( (*( case-number 1000_u64 )) field-index )))
         )) (SAtom '\:_s) )) )))
         (set r (+( (compile-casedef-fields( rst case-number (+( field-index 1_u64 )) )) r )))
      ))
      ( ft (
         (set r (+( (+( (mangle-c-type ft) (SAtom '\s__s) )) (+( (SAtom(
            (to-string(+( (*( case-number 1000_u64 )) field-index )))
         )) (SAtom '\:_s) )) )))
      ))
   ))
   r
) S);
