
let decorate-var-to-def-todo = mk-vector(type((Maybe<TContext>,CString,Type,AST))) :: Vector<(Maybe<TContext>,CString,Type,AST)>;

let mark-var-to-def-todo(tctx: Maybe<TContext>, k: CString, tt: Type, t: AST): Nil = (
   decorate-var-to-def-todo = decorate-var-to-def-todo.push( (tctx, k, tt, t) );
);

let decorate-var-to-def(): Nil = (
   for Tuple{tctx=first, k=second, tt=third, t=fourth} in decorate-var-to-def-todo {
      let def = defof-var(t, tctx, k, tt);
      if non-zero(def) then mark-var-to-def(t, def);
   }
);
