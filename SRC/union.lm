
union := λ(: l Context)(: r Context). (: (
   (let return l)
   (if (not(non-zero r)) (set return CtxEOF) ())
   (if (non-zero return) (
      (match r (
         ()
         ( (CtxBind( rst k v )) (
            (set return (CtxBind(
               (close(union( l rst ))) k v
            )))
         ))
         ( _ (set r CtxEOF) )
      ))
   ) ())
   return
) Context);

union := λ(: ctx FContext)(: tctx TContext). (: (
   (let r ctx)
   (while (non-zero tctx) (match tctx (
      ()
      ( TCtxNil (set tctx TCtxEOF) )
      ( (TCtxBind( rst k vt _ )) (
         (set r (FCtxBind(
            (close r) k TAny (mk-fragment())
         )))
         (set tctx rst)
      ))
   )))
   r
) FContext);
