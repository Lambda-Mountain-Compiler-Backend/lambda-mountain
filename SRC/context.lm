
type CCContext (CCCEOF) | (CCCtxBind( CCContext[] , String , Type , Fragment )); zero CCContext CCCEOF;

print := 位(: ctx CCContext). (: (tail(
   (print 'Context:\n_s)
   (while (non-zero ctx) (match ctx (
      ()
      ( (CCCtxBind( rst k kt kf )) (tail(
         (print k)(print '\s:\s_s)(print kt)(print '\n_s)(print kf)
         (set ctx rst)
      )))
   )))
)) Nil);

cccontext::new := 位. (: (tail(
   (let r CCCEOF)
   r
)) CCContext);

cccontext::lookup := 位(: ctx CCContext)(: k String)(: kt Type)(: sloc AST). (: (tail(
   (let r (maybe-deref(ccfragment::new())))
   (let found False_u8)
   (while (non-zero ctx) (match ctx (
      ()
      ( (CCCtxBind( rst rk rt rf )) (
         (if (==( k rk )) (
            (match (slot( rt 'Arrow_s )) (
               ()
               ( (TGround( 'Arrow_s (TypeSeq( (TypeSeq( TypeEOF domaint )) ranget )) )) (
                  (if (can-unify( domaint kt )) (tail(
                     (set r rf)
                     (set found True_u8)
                     (set ctx CCCEOF)
                  )) (set ctx rst))
               ))
               ( _ (tail(
                  (set r rf)
                  (set found True_u8)
                  (set ctx CCCEOF)
               )))
            ))
         ) (
            (set ctx rst)
         ))
      ))
   )))
   (if (==( found True_u8 )) () (tail(
      (print 'Context::lookup\s_s)(print k)(print '\s:\s_s)(print kt)(print '\n_s)
      (exit-error( 'Context::lookup\sCould\sNot\sFind\sSymbol_s sloc ))
   )))
   r
)) Fragment);

cccontext::bind := 位(: ctx CCContext)(: k String)(: kt Type)(: f Fragment). (: (tail(
   (let new-ctx (CCCtxBind(
      (close ctx)
      k kt f
   )))
   new-ctx
)) CCContext);

