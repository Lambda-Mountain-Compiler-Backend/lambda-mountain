
parse-many-expressions := Î»(: tokens List<Token>). (: (
   (print 'Parse\sMany\s_s)(print tokens)(print '\n_s)
   (let expr ASTEOF)
   (let remainder (: LEOF List<Token>))
   (while (non-zero tokens) (
      (match tokens (
         ()
         ( (LCons( '\:_t tl )) (
            (set remainder tokens)
            (set tokens (: LEOF List<Token>))
         ))
         ( (LCons( '\]_t tl )) (
            (if (non-zero expr) () (set expr ASTNil))
            (set remainder tl)
            (set tokens (: LEOF List<Token>))
         ))
         ( _ (
            (match (parse-one-expression tokens) (
               ()
               ( (PME( pe pr )) (
                  (if (non-zero expr) (
                     (set expr (App(
                        (close expr)
                        (close pe)
                     )))
                  ) (
                     (set expr pe)
                  ))
                  (set tokens pr)
               ))
            ))
         ))
      ))
   ))
   (let pp ( (PME( expr remainder )) ))
   pp
) ParsePartial);
