
preprocess-apply-hard := Î»(: macro-name String)(: arity U64)(: program AST). (: (
   (let return program)
   (let macros preprocess-macros)
   (let matched False_u8)
   (while (non-zero macros) (match macros (
      ()
      ( (MSeq( rst (Macro( lhs rhs )) )) (
         (set macros rst)
         (let go False_u8)
         (match lhs (
            ()
            ( (App( (Lit( m _ )) _ )) (
               (if (&&( (==( macro-name m)) (==( arity 1_u64 )) )) (
                  (set go True_u8)
               ) ())
            ))
            ( (App( (App( (Lit( m _ )) _ )) _ )) (
               (if (&&( (==( macro-name m)) (==( arity 2_u64 )) )) (
                  (set go True_u8)
               ) ())
            ))
         ))
         (if (==( go True_u8 )) (
            (let des (try-destructure-macro( (.location program) lhs program )))
            (if (.is-some des) (
               (let ctx (.get-or( des (: LEOF AContext) )))
               (set rhs (with-location( rhs (.location program) )))
               (set rhs (preprocess-apply-literals( rhs )))
               (let p (apply( ctx rhs )))
               (let c (extract-uuids( p )))
               (set p (substitute-uuids( c p )))
               (set return (preprocess-apply p))
               (set macros MEOF)
               (set matched True_u8)
            ) ())
         ) ())
      ))
      ( _ (set macros MEOF) )
   )))
   (if (not matched) (
      (exit-error( 'Invalid\sMacro\sApplication\n_s program ))
   ) ())
   return
) AST);

