
infer-type-definition := Î»(: base-type Type)(: body AST)(: case-number U64). (: (
   # This works but is too slow
   (let r 0_u64)
   (if (non-zero body) (
      (add-class-info-layout( base-type LM1Style ))
      (add-quick-prop( (t3( 'Array_s base-type TAny )) TAny (t1 'LMStruct_s) ))
      (add-quick-prop( base-type TAny (t1 'LMStruct_s) ))
   ) ())
   (match body (
      ()
      ( (App( (App( tds (Var( '|_s _ )) )) case )) (
         (let r1 (infer-type-definition( base-type tds (+( case-number 1_u64 )) )))
         (let r2 (infer-type-constructor( base-type case )))
         (set r (max( r1 r2 )))
      ))
      ( case (
         (let tag '_s)
         (match case (
            ()
            ( (Lit( tg _ )) (set tag tg) )
            ( (App( (Lit( tg _ )) args )) (set tag tg) )
            ( ASTEOF () )
            ( _ (
               (print 'Unexpected\sType\sCase\s_s)(print base-type)(print '\n_s)(exit 1_u64)
            ))
         ))
         (let and-tag (&&( base-type (t1(+( 'Tag::_s tag ))) )))
         (add-quick-prop( and-tag and-tag (t2( 'CaseNumber_s (t1(to-string case-number)) )) ))
         (if (==( case-number 0_u64 )) (
            (add-quick-prop( (t3( 'Array_s base-type TAny )) (t3( 'Array_s base-type TAny ))
               (t2( 'CaseNumber_s (t1 '0_s) ))
            ))
         ) ())
         (set r (infer-type-constructor( base-type case )))
      ))
   ))
   r
) U64);
