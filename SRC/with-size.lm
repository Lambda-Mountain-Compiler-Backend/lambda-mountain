
with-size := λ(: tt Type). (: (
   (if (&&(
          (&&(
             (not(.is-t( tt 'Sized_s )))
             (not(is( tt TAny )))
          ))
          (&&(
             (not(.is-t( tt 'Cons_s )))
             (not(.is-t( tt 'Arrow_s )))
          ))
       ))
   (
      (set tt (and( tt (t2( 'Sized_s (t1 '0_s) )) )))
   ) ())
   (match tt (
      ()
      ( (TGround( 'Cons_s (LCons( p2 (LCons( p1 LEOF )) )) )) (
         (set tt (t3( 'Cons_s (with-size p1) (with-size p2) )))
      ))
      ( _ () )
   ))
   tt
) Type);

with-size := λ(: tt List<Type>). (: (
   (match tt (
      ()
      ( LEOF () )
      ( (LCons( p1 ps )) (
         (set tt (cons( (with-size p1) (with-size ps) )))
      ))
   ))
   tt
) List<Type>);
