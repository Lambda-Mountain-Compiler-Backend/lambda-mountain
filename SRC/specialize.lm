
specialize := Î»(: key String)(: ft Type)(: unify-ctx Maybe<TContext>)(: result-type Type). (: (
   (if (is-special( key result-type )) () (
      (let term ASTEOF)
      (for-each ((Tuple( kt _ t )) in (.lookup( global-type-context key (: LEOF List<Tuple<Type,Type,AST>>) ))) (
         (if (==( ft kt )) (
            (match t (
               ()
               ( (Glb( _ (Abs( _ _ _ )) )) (set term t) )
               ( _ () )
            ))
         ) ())
      ))
      (if (non-zero term) (
         (mark-as-special( key result-type ))
         (let special-term (substitute( unify-ctx term )))
         (infer-global-context( special-term ))
         (infer-expr( (: None Maybe<TContext>) special-term Unscoped (t1 'Specialize_s) Used ))
         (set global-type-context (.bind( global-type-context key (typeof special-term) special-term )))
         (set ast-parsed-program (Seq(
            (close ast-parsed-program)
            (close special-term)
         )))
      ) ())
      (if (==( key 'hash_s )) (
         (print 'specialize\shash\s:\s_s)(print result-type)(print '\n_s)
      ) ())
   ))
) Nil);
