
specialize := Î»(: key String)(: ft Type)(: unify-ctx TContext)(: result-type Type). (: (
   (if (is-special( key result-type )) () (
      (print 'Specialize\s_s)(print key)(print result-type)(print '\n_s)
      (set unify-ctx (normalize unify-ctx))
      (let term ASTEOF)
      (let global-tctx global-type-context)
      (while (non-zero global-tctx) (match global-tctx (
         ()
         ( TCtxNil (set global-tctx TCtxEOF) )
         ( (TCtxBind( rst k kt t )) (
            (set kt (slot( kt 'Arrow_s )))
            (if (==( k key )) (
               (if (==( ft kt )) (
                  (match t (
                     ()
                     ( (Glb( _ (Abs( _ _ _ )) )) (set term t) )
                     ( _ () )
                  ))
               ) ())
            ) ())
            (set global-tctx rst)
         ))
      )))
      (mark-as-special( key result-type ))
      (if (non-zero term) (
         (let special-term (substitute( unify-ctx term )))
         (infer-global-context( special-term ))
         (infer-expr( global-type-context special-term Unscoped TAny Used ))
         (set ast-parsed-program (Seq(
            (close ast-parsed-program)
            (close special-term)
         )))
      ) ())
      (print 'Specialized\s_s)(print key)(print result-type)(print '\n_s)
   ))
) Nil);
