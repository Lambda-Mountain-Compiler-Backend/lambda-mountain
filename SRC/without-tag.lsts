

let .without-tag(tt: Type): Type = (
   match tt {
      TAnd { conjugate=conjugate } => (
         let result = TAny;
         for vector c in conjugate { result = result && c.without-tag };
         result
      );
      TGround { tag:c"Constructor" } => TAny;
      TGround { tag:c"CaseNumber" } => TAny;
      TGround { tag:c"C-FFI", parameters:[] } => TAny;
      TGround { tag:c"Raw" } => TAny;
      TGround { tag:c"LMStruct" } => TAny;
      TGround { tag:c"Constant" } => TAny;
      TGround { tag:c"Literal" } => TAny;
      TGround { tag:c"LocalVariable" } => TAny;
      TGround { tag:c"GlobalVariable" } => TAny;
      TGround { tag:tag } => if tag.has-prefix(c"Tag::") then TAny
                        else if tag.has-prefix(c"Field::") then TAny
                        else tt;
      _ => tt;
   }
);

let .without-tag(tt: List<Type>): List<Type> = (
   match tt {
      [hd..tl] => cons( hd.without-tag, tl.without-tag );
      tl => tl;
   }
);
