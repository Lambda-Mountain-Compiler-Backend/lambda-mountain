
let visit-field-template(field-name: CString, base-type: Type, field-type: Type, blame: AST, field-ordinal: U64): Nil = (
   let ctx = None :: Maybe<TContext>;
   ctx = ctx.bind( c"base-type", base-type, ASTEOF );
   ctx = ctx.bind( c"field-type", field-type, ASTEOF );
   ctx = ctx.bind( c"field-name", ta, mk-lit(field-name) );
   ctx = ctx.bind( c"primitive::field-get", ta, mk-var(c"."+field-name) );
   ctx = ctx.bind( c"primitive::field-set", ta, mk-var(c"set."+field-name) );
   ctx = ctx.bind( c"primitive::field-get-indirect", ta, mk-var(c"."+field-name) );
   ctx = ctx.bind( c"primitive::field-set-indirect", ta, mk-var(c"set."+field-name) );
   let field-get = substitute(ctx, find-global-callable(c"primitive::field-get", base-type, blame));
   let field-set = substitute(ctx, find-global-callable(c"primitive::field-set", t3(c"Cons", base-type, field-type), blame));
   let field-get-indirect = substitute(ctx, find-global-callable(c"primitive::field-get-indirect", t3(c"Array",base-type,ta), blame));
   let field-set-indirect = substitute(ctx, find-global-callable(c"primitive::field-set-indirect", t3(c"Cons", t3(c"Array",base-type,ta), field-type), blame));
   infer-global-context(field-get);
   infer-global-context(field-set);
   infer-global-context(field-get-indirect);
   infer-global-context(field-set-indirect);

   ctx = None :: Maybe<TContext>;
   ctx = ctx.bind( c"base-type", base-type, ASTEOF );
   ctx = ctx.bind( c"field-type", field-type, ASTEOF );
   ctx = ctx.bind( c"field-name", ta, mk-lit(field-name) );
   ctx = ctx.bind( c"primitive::field-get", ta, mk-var(c"."+to-string(field-ordinal)) );
   let field-ordinal-get = substitute(ctx, find-global-callable(c"primitive::field-get", base-type, blame));
   infer-global-context(field-ordinal-get);

   ast-parsed-program = ast-parsed-program + field-get + field-set + field-get-indirect + field-set-indirect + field-ordinal-get;
);

let type2-base-type-index = {} :: HashtableEq<(CString,U64),U64>;

let .is-type2(tt: Type): U64 = (
   let gta = normalize(tt).ground-tag-and-arity;
   type2-base-type-index.has(gta)
);

let infer-type2-definition(term: AST): Nil = (
   match term { Typedef2{} => (); };
   let lhs-type = (term as Tag::Typedef2).lhs-type;
   let implies = (term as Tag::Typedef2).implies;
   let implements = (term as Tag::Typedef2).implements;
   let constraints = (term as Tag::Typedef2).constraints;
   let size = (term as Tag::Typedef2).size;
   let alias = (term as Tag::Typedef2).alias;
   let opaque-alias = (term as Tag::Typedef2).opaque-alias;
   let cases = (term as Tag::Typedef2).cases;
   for vector rhs-type in implies {
      add-quick-prop(lhs-type, lhs-type, rhs-type);
      add-weaken-quick-prop(lhs-type, lhs-type, rhs-type);
   };
   for vector rhs-type in implements {
      add-quick-prop(lhs-type, lhs-type, rhs-type);
      add-weaken-quick-prop(lhs-type, lhs-type, rhs-type);
      interface-implementors = cons( (lhs-type, rhs-type, term), interface-implementors );
   };
   if non-zero(alias) then add-type-alias(lhs-type, alias);
   if non-zero(opaque-alias) then add-opaque-type-alias(lhs-type, opaque-alias);
   for vector Tuple{ case-tag=first, case-fields=second } in cases {
      type2-base-type-index = type2-base-type-index.bind( lhs-type.ground-tag-and-arity, 1 );
      let field-ordinal = 0_u64;
      for vector Tuple{ field-name=first, field-type=second } in case-fields {
         let guard = lhs-type && (if non-zero(case-tag) then t1(c"Tag::"+case-tag) else ta);
         let field-wrapped-type = t2(c"Field::"+field-name, field-type);
         add-quick-prop(lhs-type, guard, field-wrapped-type);
         add-weaken-quick-prop(lhs-type, guard, field-wrapped-type);
         visit-field-template(field-name, guard, field-type, term, case-fields.length - field-ordinal);
         field-ordinal = field-ordinal + 1;
      };
   };
   let common-fields = [] :: List<(CString,Type)>;
   let has-tag-case = false;
   for vector Tuple{ case-tag=first, case-fields=second } in cases {
      if case-tag==c"" {
         for vector Tuple{ field-name=first, field-type=second } in case-fields {
            common-fields = cons((field-name, field-type), common-fields);
         };
      } else has-tag-case = true;
   };
   if not(has-tag-case) then infer-type2-yield-constructor(lhs-type, lhs-type.simple-tag, 0, common-fields, term);
   add-quick-prop(lhs-type, lhs-type, t1(c"LM2Struct"));
   add-weaken-quick-prop(lhs-type, lhs-type, t1(c"LM2Struct"));
   if not(has-tag-case) then {
      let tag-case-number = t2(c"CaseNumber", t1(c"0"));
      add-quick-prop(lhs-type, lhs-type, tag-case-number);
      add-weaken-quick-prop(lhs-type, lhs-type, tag-case-number);
   };
   let case-index = 0_u64;
   for vector Tuple{ case-tag=first, case-fields=second } in cases {
      if case-tag!=c"" {
         let o-case-fields = common-fields;
         for vector Tuple{ field-name=first, field-type=second } in case-fields {
            o-case-fields = cons((field-name, field-type), o-case-fields);
         };
         let tag-guard = lhs-type && t1(c"Tag::"+case-tag);
         let tag-case-number = t2(c"CaseNumber", t1(to-string(case-index)));
         add-quick-prop(tag-guard, tag-guard, tag-case-number);
         add-weaken-quick-prop(tag-guard, tag-guard, tag-case-number);
         infer-type2-yield-constructor(lhs-type, case-tag, case-index, o-case-fields, term);
         case-index = case-index + 1;
      };
   };
);

let type-constructor-tag-ordinal-index = {} :: HashtableEq<(CString,U64,CString),U64>;

let infer-type2-yield-constructor(base-type: Type, case-tag: CString, case-number: U64, case-fields: List<(CString,Type)>, blame: AST): Nil = (
   (let base-tag, let base-arity) = base-type.ground-tag-and-arity;
   type-constructor-tag-ordinal-index = type-constructor-tag-ordinal-index.bind( (base-tag,base-arity,case-tag), case-number );

   # The constructor is hard-coded for now
   # This only works for C-backend...

   let args = mk-eof();
   for Tuple{field-name=first, field-type=second} in case-fields.reverse {
      let par = mk-var(field-name).ascript(field-type);
      if non-zero(args)
      then args = mk-cons(args, par)
      else args = par
   };
   if not(non-zero(args)) then args = mk-nil();

   let return-id = uuid();
 
   let body = mk-lit(c"({").ascript(t1(c"L"));
   body = mk-cons(body, mk-app(mk-var(c"mangle-pre"),mk-atype(t2(c"Type",base-type))) );
   body = mk-cons(body, mk-lit(c" ").ascript(t1(c"L")));
   body = mk-cons(body, mk-lit(return-id).ascript(t1(c"L")));
   body = mk-cons(body, mk-app(mk-var(c"mangle-post"),mk-atype(t2(c"Type",base-type))) );
   body = mk-cons(body, mk-lit(c";").ascript(t1(c"L")));

   if case-number >= 0 {
      body = mk-cons(body, mk-lit(return-id).ascript(t1(c"L")) );
      body = mk-cons(body, mk-lit(c".discriminator_case_tag=").ascript(t1(c"L")));
      body = mk-cons(body, mk-lit(to-string(case-number)).ascript(t1(c"L")) );
      body = mk-cons(body, mk-lit(c";").ascript(t1(c"L")));
   };

   for Tuple{field-name=first, field-type=second} in case-fields.reverse {
      body = mk-cons(body, mk-lit(return-id).ascript(t1(c"L")) );
      body = mk-cons(body, mk-lit(c".").ascript(t1(c"L")));
      body = mk-cons(body, mk-app(mk-var(c"mangle"),mk-lit(field-name).ascript(t1(c"L"))) );
      body = mk-cons(body, mk-lit(c"=").ascript(t1(c"L")));
      body = mk-cons(body, mk-var(field-name) );
      body = mk-cons(body, mk-lit(c";").ascript(t1(c"L")));
   };

   body = mk-cons(body, mk-lit(return-id).ascript(t1(c"L")));
   body = mk-cons(body, mk-lit(c";})").ascript(t1(c"L")));

   let constructor = mk-glb( mk-token(case-tag).with-location(blame.location), mk-abs(args, body.ascript(base-type), t1(c"Blob")) );
   infer-global-context(constructor);
   ast-parsed-program = ast-parsed-program + constructor;
);

