
fragment::render := λ(: ctx FContext)(: s S)(: blame AST). (: (
   (let s-2 (fragment::unlet( s )))
   (while (not(is( s s-2 ))) (
      (set ctx (fragment::let( ctx s blame )))
      (set s s-2)
      (set s-2 (fragment::unlet( s )))
   ) ())
   (let return (fragment::render-impl( ctx s blame )))
   return
) S);

fragment::render-ctx := (: FCtxEOF FContext);
fragment::render-impl := λ(: ctx FContext)(: s S)(: blame AST). (: (
   (set fragment::render-ctx ctx)
   (let r (fragment::render-impl( s blame )))
   r
) S);
fragment::render-impl := λ(: s S)(: blame AST). (: (
   (let ctx fragment::render-ctx)
   (let r SNil)
   (match s (
      ()
      ( SNil () )
      ( (SCons( (SAtom 'App_s) (SCons(
           (SCons( (SAtom 'Var_s) (SAtom 'uuid_s) ))
           (SCons( (SAtom 'Var_s) (SAtom v) ))
        )) )) (
         (let f (fragment-context::lookup-soft( ctx v TAny blame )))
         (set r (fragment::get( f 'expression_s )))
         (if (non-zero r) () (
            (set f (fragment::expression(uuid())))
            (set fragment::render-ctx (FCtxBind(
              (close fragment::render-ctx) v TAny f
            )))
            (set r (fragment::get( f 'expression_s )))
         ))
      ))
      ( (SCons( (SAtom 'Var_s) (SAtom v) )) (
         (print 'Raw\sVariables\sNot\sPermitted\sIn\sFragments:\s_s)
         (print v)(print '\n_s)
         (exit 1_u64)
      ))
      ( (SCons( (SAtom 'Lit_s) (SAtom v) )) (set r (SAtom v)) )
      ( (SCons( (SAtom 'App_s) (SCons( (SCons( (SAtom 'Var_s) (SAtom 'inv_s) )) lc )) )) (
         (let lt (fragment::render-impl( lc blame )))
         (let li 0_i64)
         (match lt (
            ()
            ( (SAtom lai) (set li (to-i64 lai)) )
            ( _ () )
         ))
         (set r (SAtom(to-string (-( 0_i64 li )) )))
      ))
      ( (SCons( (SAtom 'App_s) (SCons( (SCons( (SAtom 'Var_s) (SAtom 'align_s) )) lc )) )) (
         (let lt (fragment::render-impl( lc blame )))
         (let li 0_i64)
         (match lt (
            ()
            ( (SAtom lai) (set li (max( (to-i64 lai) 8_i64 ))) )
            ( _ () )
         ))
         (set r (SAtom(to-string li)))
      ))
      ( (SCons( (SAtom 'App_s) (SCons( (SCons( (SAtom 'Var_s) (SAtom '>_s) )) (SCons( (SAtom 'App_s) (SCons( lc rc )) )) )) )) (
         (let lt (fragment::render-impl( lc blame )))
         (let li 0_i64)
         (match lt (
            ()
            ( (SAtom lai) (set li (to-i64 lai)) )
            ( _ () )
         ))
         (let rt (fragment::render-impl( rc blame )))
         (let ri 0_i64)
         (match rt (
            ()
            ( (SAtom rai) (set ri (to-i64 rai)) )
            ( _ () )
         ))
         (if (>( li ri )) (
            (set r (SAtom '1_s))
         ) (
            (set r (SAtom '0_s))
         ))
      ))
      ( (SCons( (SAtom 'App_s) (SCons( (SCons( (SAtom 'Var_s) (SAtom 'max_s) )) (SCons( (SAtom 'App_s) (SCons( lc rc )) )) )) )) (
         (let lt (fragment::render-impl( lc blame )))
         (let li 0_i64)
         (match lt (
            ()
            ( (SAtom lai) (set li (to-i64 lai)) )
            ( _ () )
         ))
         (let rt (fragment::render-impl( rc blame )))
         (let ri 0_i64)
         (match rt (
            ()
            ( (SAtom rai) (set ri (to-i64 rai)) )
            ( _ () )
         ))
         (set r (SAtom(to-string(max( li ri )))))
      ))
      ( (SCons( (SAtom 'App_s) (SCons( (SCons( (SAtom 'Var_s) (SAtom '+_s) )) (SCons( (SAtom 'App_s) (SCons( lc rc )) )) )) )) (
         (let lt (fragment::render-impl( lc blame )))
         (let li 0_i64)
         (match lt (
            ()
            ( (SAtom lai) (set li (to-i64 lai)) )
            ( _ () )
         ))
         (let rt (fragment::render-impl( rc blame )))
         (let ri 0_i64)
         (match rt (
            ()
            ( (SAtom rai) (set ri (to-i64 rai)) )
            ( _ () )
         ))
         (set r (SAtom(to-string(+( li ri )))))
      ))
      ( (SCons( (SAtom 'App_s) (SCons( (SCons( (SAtom 'Var_s) (SAtom '-_s) )) (SCons( (SAtom 'App_s) (SCons( lc rc )) )) )) )) (
         (let lt (fragment::render-impl( lc blame )))
         (let li 0_i64)
         (match lt (
            ()
            ( (SAtom lai) (set li (to-i64 lai)) )
            ( _ () )
         ))
         (let rt (fragment::render-impl( rc blame )))
         (let ri 0_i64)
         (match rt (
            ()
            ( (SAtom rai) (set ri (to-i64 rai)) )
            ( _ () )
         ))
         (set r (SAtom(to-string(-( li ri )))))
      ))
      ( (SCons( (SAtom 'App_s) (SCons( (SCons( (SAtom 'Var_s) (SAtom '*_s) )) (SCons( (SAtom 'App_s) (SCons( lc rc )) )) )) )) (
         (let lt (fragment::render-impl( lc blame )))
         (let li 0_i64)
         (match lt (
            ()
            ( (SAtom lai) (set li (to-i64 lai)) )
            ( _ () )
         ))
         (let rt (fragment::render-impl( rc blame )))
         (let ri 0_i64)
         (match rt (
            ()
            ( (SAtom rai) (set ri (to-i64 rai)) )
            ( _ () )
         ))
         (set r (SAtom(to-string(*( li ri )))))
      ))
      ( (SCons( (SAtom 'App_s) (SCons( (SCons( (SAtom 'Var_s) (SAtom '/_s) )) (SCons( (SAtom 'App_s) (SCons( lc rc )) )) )) )) (
         (let lt (fragment::render-impl( lc blame )))
         (let li 0_i64)
         (match lt (
            ()
            ( (SAtom lai) (set li (to-i64 lai)) )
            ( _ () )
         ))
         (let rt (fragment::render-impl( rc blame )))
         (let ri 0_i64)
         (match rt (
            ()
            ( (SAtom rai) (set ri (to-i64 rai)) )
            ( _ () )
         ))
         (if (>( ri 0_i64 )) (
            (set r (SAtom(to-string(/( li ri )))))
         ) ())
      ))
      ( (SCons( (SAtom 'App_s) (SCons( (SCons( (SAtom 'Var_s) (SAtom '%_s) )) (SCons( (SAtom 'App_s) (SCons( lc rc )) )) )) )) (
         (let lt (fragment::render-impl( lc blame )))
         (let li 0_i64)
         (match lt (
            ()
            ( (SAtom lai) (set li (to-i64 lai)) )
            ( _ () )
         ))
         (let rt (fragment::render-impl( rc blame )))
         (let ri 0_i64)
         (match rt (
            ()
            ( (SAtom rai) (set ri (to-i64 rai)) )
            ( _ () )
         ))
         (if (>( ri 0_i64 )) (
            (set r (SAtom(to-string(%( li ri )))))
         ) ())
      ))
      ( (SCons( (SAtom 'App_s) (SCons( (SCons( (SAtom 'Var_s) (SAtom 'range_s) )) (SCons( (SAtom 'App_s) (SCons( lc rc )) )) )) )) (
         (let lt (fragment::render-impl( lc blame )))
         (let li 0_i64)
         (match lt (
            ()
            ( (SAtom lai) (set li (to-i64 lai)) )
            ( _ () )
         ))
         (let rt (fragment::render-impl( rc blame )))
         (let ri 0_i64)
         (match rt (
            ()
            ( (SAtom rai) (set ri (to-i64 rai)) )
            ( _ () )
         ))
         (while (<( li ri )) (
            (set ri (-( ri 1_i64 )))
            (set r (SCons( (close(SAtom(to-string ri))) (close r) )))
         ))
      ))
      ( (SCons( (SAtom 'App_s) (SCons(
         (SCons( (SAtom 'App_s) (SCons(
            (SCons( (SAtom 'App_s) (SCons(
               (SCons( (SAtom 'Var_s) (SAtom 'if-eq_s) )) lc
            )) )) rc
         )) )) body
      )) )) (
         (let lt (fragment::render-impl( lc blame )))
         (let rt (fragment::render-impl( rc blame )))
         (if (==( lt rt )) (
            (let bodyt (fragment::render( ctx body blame )))
            (set r bodyt)
         ) ())
      ))
      ( (SCons( (SAtom 'App_s) (SCons(
         (SCons( (SAtom 'App_s) (SCons(
            (SCons( (SAtom 'App_s) (SCons(
               (SCons( (SAtom 'Var_s) (SAtom 'if-neq_s) )) lc
            )) )) rc
         )) )) body
      )) )) (
         (let lt (fragment::render-impl( lc blame )))
         (let rt (fragment::render-impl( rc blame )))
         (if (!=( lt rt )) (
            (let bodyt (fragment::render( ctx body blame )))
            (set r bodyt)
         ) ())
      ))
      ( (SCons( (SAtom 'App_s) (SCons(
         (SCons( (SAtom 'App_s) (SCons(
            (SCons( (SAtom 'App_s) (SCons(
               (SCons( (SAtom 'App_s) (SCons(
                  (SCons( (SAtom 'Var_s) (SAtom 'for_s) ))
                  (SCons( (SAtom 'Var_s) (SAtom binding) ))
               )) ))
               (SCons( (SAtom 'Var_s) (SAtom 'in_s) ))
            )) )) iter
         )) )) body
      )) )) (
         (let iter-result (fragment::render-impl( iter blame )))
         (while (non-zero iter-result) (match iter-result (
            ()
            ( (SCons( (SAtom i) rst )) (
               (let fi (fragment::expression i))
               (let fi-2 (fragment::set( fi 'program_s (SAtom i) )))(set fi fi-2)
               (let inner-ctx (FCtxBind(
                  (close ctx) binding TAny fi
               )))
               (let body-instance (fragment::render( inner-ctx body blame )))
               (set r (SCons(
                  (close r)
                  (close body-instance)
               )))
               (set iter-result rst)
            ))
         )))
      ))
      ( (SCons( (SAtom 'App_s) (SCons(
         (SCons( (SAtom 'App_s) (SCons(
            (SCons( (SAtom 'App_s) (SCons(
               (SCons( (SAtom 'App_s) (SCons(
                  (SCons( (SAtom 'Var_s) (SAtom 'for-arg_s) ))
                  (SCons( (SAtom 'Var_s) (SAtom binding) ))
               )) ))
               (SCons( (SAtom 'Var_s) (SAtom 'in_s) ))
            )) ))
            (SCons( (SAtom 'Var_s) (SAtom iter) ))
         )) )) body
      )) )) (
         (let iter-result (reverse(fragment-context::lookup-vararg( ctx iter TAny ASTEOF ))))
         (while (non-zero iter-result) (match iter-result (
            ()
            ( (FLSeq( rst fi )) (
               (let inner-ctx (FCtxBind(
                  (close ctx) binding TAny fi
               )))
               (let body-instance (fragment::render( inner-ctx body blame )))
               (set r (SCons(
                  (close r)
                  (close body-instance)
               )))
               (set iter-result rst)
            ))
         )))
      ))
      ( (SCons( (SAtom 'App_s) (SCons( (SCons( (SAtom 'Var_s) (SAtom op) )) (SCons( (SAtom 'Var_s) (SAtom v) )) )) )) (
         (if (==( (head-string op) 46_u8 )) (
            (let f (fragment-context::lookup( ctx v TAny ASTEOF )))
            (let fe (fragment::get( f (tail-string op) )))
            (set r fe)
         ) (
            (print 'Raw\sVariables\sNot\sPermitted\sIn\sFragments:\s_s)
            (print op)(print '\n_s)
            (exit 1_u64)
         ))
      ))
      ( (SCons( (SAtom 'App_s) (SCons( ls rs )) )) (
         (let lf (fragment::render-impl( ls blame )))
         (let rf (fragment::render-impl( rs blame )))
         (set r (SCons( (close lf) (close rf) )))
      ))
      ( u (
         (print 'Fragment\sRender\sUnknown\s_s)(print u)(print '\n_s)(exit 1_u64)
      ))
   ))
   r
) S);

fragment::render := λ(: ctx FContext)(: rhs S)(: prototype Fragment)(: blame AST). (: (
   (let return prototype)
   (match rhs (
      ()
      ( (SCons( (SAtom 'App_s) (SCons( (SCons( (SAtom 'Var_s) (SAtom mode) )) prg )) )) (
         (if (!=( (head-string mode) 46_u8 )) (fail 'Invalid\sMode\sIn\sfragment::render_s) ())
         (let s (fragment::render( ctx prg blame )))
         (set return (fragment::set( return (tail-string mode) s )))
      ))
      ( (SCons( (SAtom 'App_s) (SCons( rst (SCons( (SAtom 'App_s) (SCons( (SCons( (SAtom 'Var_s) (SAtom mode) )) prg )) )) )) )) (
         (if (!=( (head-string mode) 46_u8 )) (fail 'Invalid\sMode\sIn\sfragment::render_s) ())
         (let s (fragment::render( ctx prg blame )))
         (set return (fragment::set( return (tail-string mode) s )))
         (set return (fragment::render( ctx rst return blame )))
      ))
      ( SNil () )
      ( prg (
         (print 'Invalid\sRHS\sIn\sfragment::render\s_s)
         (print prg)
         (exit 1_u64)
      ))
   ))
   return
) Fragment);

