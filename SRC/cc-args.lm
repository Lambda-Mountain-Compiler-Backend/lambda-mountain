
cc-args := Î»(: ctx FContext)(: lhs AST)(: rhs AST)(: offset I64). (: (
   # for varargs, even if there is nothing to bind, the binding still needs to exist as an empty vararg list
   (match lhs (
      ()
      ( (App( lhs-rst (App( (Lit( ':_s _ )) (App( (Var( k _ )) (AType kt) )) )) )) (
         (match rhs (
            ()
            ( (App( le re )) (
               (if (is-vararg kt) (scope(
                  (if (can-unify( kt (typeof re) )) (scope(
                     (set ctx (bind-vararg( ctx k (p1(slot( kt '..._s ))) (compile-expr( ctx re offset Used )) )))
                     (let e1 (cc-args( ctx lhs le offset )))
                     (set ctx (.1 e1))
                     (set offset (.2 e1))
                  )) (scope(
                     (set ctx (bind-vararg( ctx k (p1(slot( kt '..._s ))) )))
                     (let e1 (cc-args( ctx lhs-rst le offset )))
                     (set ctx (.1 e1))
                     (set offset (.2 e1))
                  )))
               )) (scope(
                  (let e1 (cc-args( ctx lhs-rst le offset )))
                  (set ctx (.1 e1))
                  (set offset (.2 e1))
                  (set ctx (FCtxBind( (close ctx) k kt (compile-expr( ctx re offset Used )) )))
               )))
               (if (non-zero(slot( kt 'Meta_s 'OntoStack_s ))) (
                  (set offset (-( offset (as (sizeof-aligned kt) I64) )))
               ) ())
            ))
         ))
      ))
      ( (App( (Lit( ':_s _ )) (App( (Var( k _ )) (AType kt) )) )) (
         (if (is-vararg kt) (scope(
            (if (can-unify( kt (typeof rhs) )) (scope(
               (set ctx (bind-vararg( ctx k (p1(slot( kt '..._s ))) (compile-expr( ctx rhs offset Used )) )))
            )) (scope(
               (set ctx (bind-vararg( ctx k (p1(slot( kt '..._s ))) )))
            )))
         )) (scope(
            (set ctx (FCtxBind( (close ctx) k kt (compile-expr( ctx rhs offset Used )) )))
         )))
         (if (non-zero(slot( kt 'Meta_s 'OntoStack_s ))) (
            (set offset (-( offset (as (sizeof-aligned kt) I64) )))
         ) ())
      ))
      ( ASTNil () )
   ))
   (Tuple( offset ctx ))
) Tuple<I64,FContext>);
