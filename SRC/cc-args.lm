
cc-args := Î»(: callee-ctx FContext)(: caller-ctx FContext)(: lhs AST)(: rhs AST)(: offset I64). (: (
   # for varargs, even if there is nothing to bind, the binding still needs to exist as an empty vararg list
   (match lhs (
      ()
      ( (App( lhs-rst (App( (Lit( ':_s _ )) (App( (Var( k _ )) (AType kt) )) )) )) (
         (if (is-cons(typeof rhs)) (scope(
            (match rhs (
               ()
               ( (App( le re )) (
                  (if (is-vararg kt) (
                     (set kt (get-vararg-inner kt))
                     (if (can-unify( kt (typeof re) )) (scope(
                        (if (is-open kt) (
                           (set callee-ctx (union( callee-ctx (unify( kt (typeof re) )) )))
                        ) ())
                        (set callee-ctx (bind-vararg( callee-ctx k kt (compile-expr( caller-ctx re offset Used )) )))
                        (if (is-onto-stack kt) (set offset (+( offset (as (sizeof-aligned kt) I64) ))) ())
                        (let e1 (cc-args( callee-ctx caller-ctx lhs le offset )))
                        (set callee-ctx (.1 e1))
                        (set offset (.2 e1))
                     )) (
                        (let e1 (cc-args( callee-ctx caller-ctx lhs-rst rhs offset )))
                        (set callee-ctx (.1 e1))
                        (set offset (.2 e1))
                     ))
                  ) (scope(
                     (if (is-open kt) (
                        (set callee-ctx (union( callee-ctx (unify( kt (typeof re) )) )))
                     ) ())
                     (set callee-ctx (FCtxBind( (close callee-ctx) k kt (compile-expr( caller-ctx re offset Used )) )))
                     (if (is-onto-stack kt) (set offset (+( offset (as (sizeof-aligned kt) I64) ))) ())
                     (let e1 (cc-args( callee-ctx caller-ctx lhs-rst le offset )))
                     (set callee-ctx (.1 e1))
                     (set offset (.2 e1))
                  )))
               ))
            ))
         )) (
            (if (is-vararg kt) (
               (set kt (get-vararg-inner kt))
               (if (can-unify( kt (typeof rhs) )) (scope(
                  (if (is-open kt) (
                     (set callee-ctx (union( callee-ctx (unify( kt (typeof rhs) )) )))
                  ) ())
                  (set callee-ctx (bind-vararg( callee-ctx k kt (compile-expr( caller-ctx rhs offset Used )) )))
               )) (
                  (let e1 (cc-args( callee-ctx caller-ctx lhs-rst rhs offset )))
                  (set callee-ctx (.1 e1))
                  (set offset (.2 e1))
               ))
            ) (
               (if (is-open kt) (
                  (set callee-ctx (union( callee-ctx (unify( kt (typeof rhs) )) )))
               ) ())
               (set callee-ctx (FCtxBind( (close callee-ctx) k kt (compile-expr( caller-ctx rhs offset Used )) )))
            ))
         ))
      ))
      ( (App( (Lit( ':_s _ )) (App( (Var( k _ )) (AType kt) )) )) (
         (if (is-cons(typeof rhs)) (
            (match rhs (
               ()
               ( (App( le re )) (
                  (if (is-vararg kt) (scope(
                     (set kt (get-vararg-inner kt))
                     (if (is-open kt) (
                        (set callee-ctx (union( callee-ctx (unify( kt (typeof re) )) )))
                     ) ())
                     (set callee-ctx (bind-vararg( callee-ctx k kt (compile-expr( caller-ctx re offset Used )) )))
                     (if (is-onto-stack kt) (set offset (+( offset (as (sizeof-aligned kt) I64) ))) ())
                     (let e1 (cc-args( callee-ctx caller-ctx lhs le offset )))
                     (set callee-ctx (.1 e1))
                     (set offset (.2 e1))
                  )) (
                     (print (typeof rhs))
                     (exit-error( 'Codegen\sUnexpected\sRHS_s rhs ))
                  ))
               ))
            ))
         ) (
            (if (is-vararg kt) (
               (set kt (get-vararg-inner kt))
               (if (is-open kt) (
                  (set callee-ctx (union( callee-ctx (unify( kt (typeof rhs) )) )))
               ) ())
               (set callee-ctx (bind-vararg( callee-ctx k kt (compile-expr( caller-ctx rhs offset Used )) )))
            ) (
               (if (is-open kt) (
                  (set callee-ctx (union( callee-ctx (unify( kt (typeof rhs) )) )))
               ) ())
               (set callee-ctx (FCtxBind( (close callee-ctx) k kt (compile-expr( caller-ctx rhs offset Used )) )))
            ))
         ))
      ))
      ( ASTNil () )
   ))
   (Tuple( offset callee-ctx ))
) Tuple<I64,FContext>);
