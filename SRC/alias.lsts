
let alias-index = {} :: HashtableEq<CString,List<(CString,Type)>>;

let add-alias(from: CString, to: CString, tt: Type): Nil = (
   let row = alias-index.lookup(from, [] :: List<(CString,Type)>);
   alias-index = alias-index.bind(from, cons((to,tt),row) );
);

let find-alias(from: CString, pars: Type): CString = (
   let to = from;
   for Tuple{alt-to=first, second:TGround{tag:c"Arrow",parameters:[_..alt-domain..]}}
   in alias-index.lookup(from, [] :: List<(CString,Type)>) {
      if can-unify(alt-domain,pars) { to = alt-to };
   }; to
);

let find-alias-type(from: CString): Type = (
   let to = TAny;
   for Tuple{alt-to=first, alt-tt=second}
   in alias-index.lookup(from, [] :: List<(CString,Type)>) {
      to = to && alt-tt;
   }; to
);
