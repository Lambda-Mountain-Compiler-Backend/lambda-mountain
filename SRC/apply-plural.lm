
apply-plural := Î»(: ft Type)(: pt Type). (: (
   (let r (: LEOF List<Type>))
   (match ft (
      ()
      ( (TAnd( conjugate )) (
         (for-each-v (c in conjugate) (set r (+( r (apply-plural( c pt)) ))))
      ))
      ( (TGround( 'Array_s (LCons( _ (LCons(
         (TGround( 'Arrow_s (LCons( frt (LCons( fpt LEOF )) )) ))
         LEOF )) )) )) (
         (if (can-unify( fpt pt )) (
            (set r (cons( ft r )))
         ) ())
      ))
      ( (TGround( 'Arrow_s (LCons( frt (LCons( fpt LEOF )) )) )) (
         (if (can-unify( fpt pt )) (
            (set r (cons( ft r )))
         ) ())
      ))
      ( _ () )
   ))
   r
) List<Type>);

