
translate-local-variables := λ(: ctx FContext)(: delta I64). (: (tail(
   (match ctx (
      ()
      ( FCtxEOF () )
      ( (FCtxBind( rst k kt f )) (tail(
         (set rst (translate-local-variables( rst delta )))
         (match (fragment::get( f 'fragment-type_s )) (
            ()
            ( (SAtom 'LocalVariable_s) (
               (match (fragment::get( f 'expression_s )) (
                  ()
                  ( (SAtom previous-offset) (tail(
                     (let p-offset (to-i64 previous-offset))
                     (let new-offset (+( p-offset delta )))
                     (set f (fragment::set( f 'expression_s (SAtom(to-string new-offset)) )))
                     (set ctx (FCtxBind( (close rst) k kt f )))
                  )))
               ))
            ))
            ( _ (set ctx (FCtxBind( (close rst) k kt f ))) )
         ))
      )))
   ))
   ctx
)) FContext);

compile-expr := λ(: ctx FContext)(: term AST)(: stack-offset I64)(: used IsUsed). (: (tail(
   (let e (fragment::new()))
   (match used (
      ()
      ( Return (tail(
         (set e (compile-expr-direct( ctx term stack-offset Used )))
         (let term-tt (typeof term))
         (if (==( (sizeof-type term-tt) 0_u64 )) () (
            (set e (fragment-apply( ctx stack-offset 'cdecl::return_s
               (FLSeq( (close FLEOF) e ))
               (typeof term)
               term
            )))
         ))
      )))
      ( _ (
         (set e (compile-expr-direct( ctx term stack-offset used )))
      ))
   ))
   e
)) Fragment);

compile-stack-call-push-args := λ(: ctx FContext)(: args AST)(: inner-offset I64). (: (tail(
   (let stack-offset 0_i64)
   (let translate-delta (-( 8_i64 inner-offset )))
   (set ctx (translate-local-variables( ctx translate-delta )))
   (let r (compile-push-rvalue( ctx args stack-offset )))
   r
)) Fragment);

compile-destructure-args := λ(: tt Type)(: ctx FContext)(: lhs AST)(: offset I64). (: (tail(
   (match lhs (
      ()
      ( (App( rst (App( (Lit( ':_s _ )) (App( (Var( k _ )) (AType kt) )) )) )) (
         (match (slot( tt 'Cons_s )) (
            ()
            ( (TGround( 'Cons_s (TypeSeq( (TypeSeq( TypeEOF rst-tt )) p2 )) )) (tail(
               (set ctx (compile-destructure-args( rst-tt ctx rst offset )))
               (let rst-sz (sizeof-aligned rst-tt))
               (let rst-offset (-( offset (as rst-sz I64) )))
               (set kt (and( kt (t1 'LocalVariable_s) )))
               (let sz (sizeof-aligned kt))
               (let new-offset (-( rst-offset (as sz I64) )))
               (set ctx (fragment-context::bind(
                  ctx k kt (fragment::local-variable( new-offset kt ))
               )))
            )))
         ))
      ))
      ( (App( (Lit( ':_s _ )) (App( (Var( k _ )) (AType kt) )) )) (tail(
         (set kt (and( kt (t1 'LocalVariable_s) )))
         (let sz (sizeof-aligned kt))
         (let new-offset (-( offset (as sz I64) )))
         (set ctx (fragment-context::bind(
            ctx k kt (fragment::local-variable( new-offset kt ))
         )))
      )))
      ( _ () )
   ))
   ctx
)) FContext);

as-branch-conditional := λ(: f Fragment). (: (tail(
   (let ft (fragment::get-type f))
   (match (slot( ft 'BranchConditional_s )) (
      ()
      ( (TGround( 'BranchConditional_s _ )) () )
      ( _ (tail(
         (set f (fragment::set-type( f (maybe-deref(t1 'BranchConditional_s)) )))
         (set f (fragment::set( f 'expression_s (SAtom 'jne_s) )))
         (set f (fragment::set( f 'program_s
            (SCons(
               (close(fragment::get( f 'program_s )))
               (close(SAtom '\tcmp\s$0,\s%rax\n_s))
            ))
         )))
      )))
   ))
   f
)) Fragment);

cstring-cache := (: SSEOF StringStringList);
compile-declare-cstring := λ(: val String). (: (tail(
   (let cache cstring-cache)
   (let id '_s)
   (while (non-zero cache) (match cache (
      ()
      ( (SSSeq( rst k v )) (
         (if (==( k val )) (tail(
            (set id v)
            (set cache SSEOF)
         )) (set cache rst))
      ))
   )))
   (if (head-string id) () (tail(
      (set id (uuid()))
      (set assemble-data-section (SCons( (close assemble-data-section) (close(SAtom id)) )))
      (set assemble-data-section (SCons( (close assemble-data-section) (close(SAtom ':\n\t.ascii\s"_s)) )))
      (set assemble-data-section (SCons( (close assemble-data-section) (close(SAtom( escape-literal val ))) )))
      (set assemble-data-section (SCons( (close assemble-data-section) (close(SAtom '"\n\t.zero\s1\n_s)) )))
      (set cstring-cache (SSSeq(
         (close cstring-cache) val id
      )))
   )))
   (let r (maybe-deref(fragment::new())))
   (set r (fragment::set( r 'expression_s (SAtom id) )))
   r
)) Fragment);

compile-constructor := λ(: ctx FContext)(: tag-name String)(: return-type Type)(: args-type Type)(: args AST)(: offset I64). (: (tail(
   (let whitespace-sz (-( (-( (sizeof-aligned return-type) (sizeof-aligned args-type) )) 8_u64 )))
   (let e (compile-push-rvalue( ctx args (-( offset (as whitespace-sz I64) )) )))
   (let constructor-parms (and(
      (t2( 'Constructor_s (t1 tag-name) ))
      (and(
         (t2( 'Sized_s (t1(to-string(sizeof-aligned return-type))) ))
         (t2( 'FieldsSized_s (t1(to-string(sizeof-aligned args-type))) ))
      ))
   )))
   (set e (fragment::set-type( e constructor-parms )))
   (let r (fragment-apply(
      ctx offset 'push_s
      (FLSeq( (close FLEOF) e )) (t3( 'Arrow_s constructor-parms return-type )) args
   )))
   (set r (fragment::set-context( r ctx )))
   (set r (fragment::set-type( r return-type )))
   (let new-offset (-( offset (as (sizeof-type return-type) I64) )))
   (set r (fragment::set-offset( r new-offset )))
   r
)) Fragment);

compile-push-rvalue := λ(: ctx FContext)(: rval AST)(: offset I64). (: (tail(
   (let r (fragment::new()))
   (match (slot( (typeof rval) 'Cons_s )) (
      ()
      ( (TGround( 'Cons_s (TypeSeq( (TypeSeq( TypeEOF p1 )) p2 )) )) (
         (match rval (
            ()
            ( (App( le re )) (tail(
               (let e1 (compile-push-rvalue( ctx le offset )))
               (let e2 (compile-expr( ctx re (fragment::get-offset e1) Used )))
               (set e2 (compile-maybe-push-stack( ctx (fragment::get-offset e2) e2 p2 rval )))
               (let sz (sizeof-type(maybe-deref(typeof rval))))
               (set e2 (fragment::set-offset( e2 (-( offset (as sz I64) )) )))
               (set r (fragment::chain( e1 e2 )))
            )))
         ))
      ))
      ( _ (tail(
         (let sz (sizeof-type(typeof rval)))
         (if (==( sz 0_u64 )) (tail(
            (set r (fragment::set-context( r ctx )))
            (set r (fragment::set-offset( r offset )))
            (set r (fragment::set( r 'program_s (SCons( (close SNil) (close SNil) )) )))
         )) (tail(
            (set r (compile-expr( ctx rval offset Used )))
            (set r (compile-maybe-push-stack( ctx (fragment::get-offset r) r (typeof rval) rval )))
            (set r (fragment::set-offset( r (-( offset (as sz I64) )) )))
         )))
      )))
   ))
   r
)) Fragment);

compile-fragment-args := λ(: ctx FContext)(: rval AST)(: offset I64). (: (tail(
   (let r FLEOF)
   (match (slot( (typeof rval) 'Cons_s )) (
      ()
      ( (TGround( 'Cons_s (TypeSeq( (TypeSeq( TypeEOF p1 )) p2 )) )) (
         (match rval (
            ()
            ( (App( le re )) (tail(
               (let e1 (compile-fragment-args( ctx le offset )))
               (let e2 (compile-expr( ctx re offset Used )))
               (if (non-zero(fragment::get-type e2)) () (
                  (set e2 (fragment::set-type( e2 p2 )))
               ))
               (set r (FLSeq( (close e1) e2 )))
            )))
         ))
      ))
      ( _ (tail(
         (let e1 (compile-expr( ctx rval offset Used )))
         (if (non-zero(fragment::get-type e1)) () (
            (set e1 (fragment::set-type( e1 (typeof rval) )))
         ))
         (set r (FLSeq( (close FLEOF) e1 )))
      )))
   ))
   r
)) FragmentList);

compile-maybe-push-stack := λ(: ctx FContext)(: offset I64)(: fragment Fragment)(: expression-type Type)(: sloc AST). (: (tail(
   (let ft (fragment::get-type( fragment )))
   (if (non-zero ft) () (set ft expression-type))
   (match (slot( ft 'StackVariable_s )) (
      ()
      ( (TGround( 'StackVariable_s _ )) () )
      ( _ (tail(
         (set fragment (fragment::set-type( fragment ft )))
         (set fragment (fragment-apply(
            ctx offset 'push_s
            (FLSeq( (close FLEOF) fragment ))
            (t3( 'Arrow_s ft
                          (and( (t1 'StackVariable_s) (t2( 'Sized_s (t1(to-string(sizeof-aligned ft))) )) ))
            ))
            sloc
         )))
         (let f-sz (as (sizeof-aligned ft) I64))
         (set fragment (fragment::set-offset( fragment (-( offset f-sz )) )))
      )))
   ))
   fragment
)) Fragment);
