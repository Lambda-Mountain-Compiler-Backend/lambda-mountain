
infer-expr := λ(: tctx Maybe<TContext>)(: term AST)(: scoped IsScoped)(: hint Type)(: used IsUsed). (: (
   (if (.is-seq term) (
      (let seqs (: LEOF List<AST>))
      (while (.is-seq term) (match term (
         ()
         ( (Seq( l r )) (
            (set tctx (infer-expr-one( tctx r scoped hint used )))
            (set term l)
         ))
      )))
   ) (
      (set tctx (infer-expr-one( tctx term scoped hint used )))
   ))
   tctx
) Maybe<TContext>);

meta
   (description (
      'Use\sa\sContext\sto\sinfer\sthe\stype\sof\san\sexpression.
   ))
;
infer-expr-one := λ(: tctx Maybe<TContext>)(: term AST)(: scoped IsScoped)(: hint Type)(: used IsUsed). (: (
   (match term (
      ()
      ( _ (
         (let tctx-term (std-infer-expr( tctx term (as (is( scoped Scoped )) Bool) used hint )))
         (set tctx (.first tctx-term)) 
         (if (not(is( term (.second tctx-term) ))) (
            (print 'TODO:\sinfer-expr\sreplace\sterm\sin\scontext\n_s)
            (print (.second tctx-term))(print '\n_s)
            (exit 1_u64)
         ) ())
      ))
   ))
   tctx
) Maybe<TContext>);

