
infer-expr := λ(: tctx TContext)(: term AST)(: scoped IsScoped)(: hint Type)(: used IsUsed). (: (
   (if (is-seq term) (
      (let seqs (: LEOF List<AST>))
      (while (is-seq term) (match term (
         ()
         ( (Seq( l r )) (
            (set tctx (infer-expr-one( tctx r scoped hint used )))
            (set term l)
         ))
      )))
   ) (
      (set tctx (infer-expr-one( tctx term scoped hint used )))
   ))
   tctx
) TContext);

meta
   (description (
      'Use\sa\sContext\sto\sinfer\sthe\stype\sof\san\sexpression.
   ))
;
infer-expr-one := λ(: tctx TContext)(: term AST)(: scoped IsScoped)(: hint Type)(: used IsUsed). (: (
   (match term (
      ()
      ( ASTNil (ascript-normal( term (t1 'Nil_s) )) )
      ( ASTEOF (ascript-normal( term (t1 'Nil_s) )) )
      ( (Seq( l r )) (
         (infer-expr( tctx l Unscoped TAny Used ))
         (infer-expr( tctx r Unscoped TAny Used ))
      ))
      ( (Typedef( _ _ )) () )
      ( (Glb( k (@( v (Abs( _ )) )) )) (
         (if (.is-open(typeof term)) () (
            (infer-expr( tctx v Unscoped TAny Used ))
            (let vt (typeof v))
         ))
      ))
      ( (Glb( k v )) () ) # globals should already be inferred by now
      ( (App( (Lit( ':_s _ )) (App( (Lit( _ _ )) (AType tt) )) )) (
         (add-concrete-type-instance tt)
         (match term (
            ()
            ( (App( _ (App( t _ )) )) (
               (if (.is-t( tt 'String_s )) () (
                  (infer-expr( tctx t Unscoped tt used ))
               ))
               (let inner-tt (typeof t))
               (if (non-zero inner-tt) (
                  (if (can-unify( tt inner-tt )) (
                     (set tt inner-tt)
                  ) (
                     (set tt (+( inner-tt tt )))
                  ))
               ) (
                  (ascript-normal( t tt ))
               ))
               (ascript-normal( term tt ))
            ))
         ))
      ))
      ( (App( (Lit( ':_s _ )) (App( t (AType tt) )) )) (
         (set tctx (infer-expr( tctx t Unscoped tt used )))
         (let inner-tt (typeof t))
         (if (non-zero inner-tt) (
            (ascript-normal( term tt ))
            (match term (
               ()
               ( (App( las ras )) (
                  (ascript-normal( las tt ))
                  (ascript-normal( ras tt ))
               ))
            ))
         ) ())
         (if (.is-t( tt 'SmartString_s )) () (
            (maybe-specialize( 'intern_s (typeof-var-raw( term tctx 'intern_s )) tt ))
         ))
      ))
      ( (App( (Var( 'gensym-label_s _ )) (Var( lname _ )) )) (
         (set tctx (TCtxBind(
            (close tctx) lname (t1 'Label_s) ASTEOF
         )))
         (ascript-normal( term (t1 'Nil_s) ))
      ))
      ( (App( (Var( 'label_s _ )) (Var( lname _ )) )) (
         (ascript-normal( term (t1 'Nil_s) ))
      ))
      ( (App( (App( (App( (Var( 'if_s _ )) cond )) t )) f )) (
         (if (is( scoped Scoped )) (scope(
            (let tctx-inner (infer-expr( tctx cond Unscoped TAny Used )))
            (let tctx-weak-t (infer-expr( tctx-inner t Unscoped TAny Tail )))
            (let tctx-t (phi-override( tctx tctx-weak-t )))
            (let tctx-f (infer-expr( tctx f Unscoped TAny Tail )))
            (set tctx (phi-merge( tctx-t tctx-f )))
         )) (
            (set tctx (infer-expr( tctx cond Unscoped TAny Used )))
            (let tctx-t (infer-expr( tctx t Unscoped TAny Tail )))
            (let tctx-f (infer-expr( tctx f Unscoped TAny Tail )))
            (set tctx (phi-merge( tctx-t tctx-f )))
         ))
         (ascript-normal( term (typeof t) ))
      ))
      ( (App( (Var( 'as_s _ )) (App( t (AType tt) )) )) (
         (add-concrete-type-instance tt)
         (set tctx (infer-expr( tctx t Unscoped TAny used )))
         (let inner-tt (typeof t))
         (if (non-zero inner-tt) (
            (if (.has-prefix( (tag-of tt) 'Tag::_s )) (
               (set tt (+( tt inner-tt )))
            ) (
               (let inner-class (with-only-class inner-tt))
               (if (non-zero inner-class) (
                  (set tt (+( tt inner-class )))
               ) ())
            ))
            (ascript-normal( term tt ))
         ) ())
      ))
      ( (App( (Var( 'sizeof_s _ )) (AType _) )) (
         (let tt (as-constant(parse-type 'U64_s)))
         (ascript-normal( term tt ))
         (match term (
            ()
            ( (App( s _ )) (ascript-normal( s tt )) )
         ))
      ))
      ( (App( (Var( 'scope_s _ )) r )) (
         (let weak-ctx (infer-expr( tctx r Scoped TAny Tail )))
         (ascript-normal( term (typeof r) ))
         (set tctx (phi-override( tctx weak-ctx )))
      ))
      ( (App( (Var( 'open_s _ )) r )) (
         (set tctx (infer-expr( tctx r Unscoped TAny Used )))
         (let deref-type (typeof r))
         (match (slot( deref-type 'Array_s )) (
            ()
            ( (TGround( 'Array_s (LCons( _ (LCons( TAny LEOF )) )) )) () )
            ( (TGround( 'Array_s (LCons( TAny (LCons( array-base LEOF )) )) )) (
               (maybe-specialize( 'open_s (typeof-var-raw( term tctx 'open_s )) deref-type ))
               (set deref-type (+( array-base (t1 'StackVariable_s) )))
            ))
            ( _ (do-specialize( 'open_s (typeof-var-raw( term tctx 'open_s )) deref-type term )) )
         ))
         (ascript-normal( term deref-type ))
      ))
      ( (App( (Abs( (Var( lname _ )) ASTNil tlt )) rhs )) (
         (let prev-tt (typeof-var-raw( term tctx lname )))
         (if (non-zero prev-tt) (
            (if (.is-t( prev-tt 'LocalVariable_s )) (
               (exit-error( 'Variable\sName\sIs\sAlready\sBound\sIn\sOuter\sScope_s term ))
            ) ())
         ) ())
         (match rhs (
            ()
            ( (App( (Lit( ':_s _ )) (App( (@( u (Var( '__uninitialized_s _ )) )) (AType tt) )) )) (
               (ascript-normal( u tt ))
               (ascript-normal( rhs tt ))
            ))
            ( _ (
               (infer-expr( tctx rhs Unscoped TAny Tail ))
            ))
         ))
         (let tt (typeof rhs))
         (if (non-zero tt) () (
            (exit-error( 'Unable\sto\sinfer\stype\sof\sexpression_s rhs ))
         ))
         (set tt (maybe-local-variable(without-constructor tt)))
         (match term (
            ()
            ( (App( (Abs( lname-var _ _ )) _ )) (
               (ascript-normal( lname-var tt ))
            ))
         ))
         (set tctx (TCtxBind(
            (close tctx) lname tt ASTEOF
         )))
         (ascript-normal( term (t1 'Nil_s) ))

         (maybe-specialize( 'del_s (typeof-var-raw( term tctx 'del_s )) tt ))
      ))
      ( (App( is-cons l r )) (
         (if is-cons (
            (set tctx (infer-expr( tctx l Unscoped TAny Used )))
            (set tctx (infer-expr( tctx r Unscoped TAny Used )))
            (let rt (t3( 'Cons_s (typeof l) (typeof r) )))
            (ascript-normal( term rt ))
         ) (
            (let l-used Unused)
            (if (is( used Call )) (set l-used Call) ())
            (let r-used Used)
            (let rt TAny)
            (match l (
               ()
               ( (Var( l-fname _ )) (
                  (if (==( l-fname 'list::cons_s )) (
                     (match r (
                        ()
                        ( (App( k m )) (
                           (infer-expr( tctx k Unscoped TAny Call ))
                           (infer-expr( tctx m Unscoped (t2( 'List_s (normalize(typeof k)) )) Used ))
                        ))
                        ( _ () )
                     ))
                  ) ())
                  (if (==( l-fname 'map::cons_s )) (
                     (match r (
                        ()
                        ( (App( kv m )) (
                           (infer-expr( tctx kv Unscoped TAny Call ))
                           (infer-expr( tctx m Unscoped (t3( 'HashtableEq_s (.p2(normalize(typeof kv))) (.p1(normalize(typeof kv))) )) Used ))
                        ))
                        ( _ () )
                     ))
                  ) ())
                  (if (is( used Unused )) (set r-used Unused) ())
                  (set tctx (infer-expr( tctx l Unscoped TAny l-used )))
                  (if (.is-arrow(typeof l)) (set r-used Call) ())
                  (let r-hint TAny)
                  (set tctx (infer-expr( tctx r Unscoped TAny r-used )))
                  (let lt-fname (find-alias( l-fname (typeof r) )))
                  (let apply-result (apply-or-cons-and-specialize(
                     lt-fname
                     (typeof-var-raw( term tctx lt-fname ))
                     (typeof r)
                     term
                  )))
                  (ascript-normal( l (.function-type apply-result) ))
                  (set rt (.return-type apply-result))
                  (if (non-zero (.phi-types apply-result)) (
                     (for-each ((Tuple( phi-id phi-new-type )) in (.phi-types apply-result)) (
                        (set tctx (phi-transition( tctx phi-id phi-new-type )))
                     ))
                  ) ())
               ))
               ( _ (
                  (if (is( used Unused )) (set r-used Unused) ())
                  (set tctx (infer-expr( tctx l Unscoped TAny l-used )))
                  (if (.is-arrow(typeof l)) (set r-used Call) ())
                  (set tctx (infer-expr( tctx r Unscoped TAny r-used )))
                  (let apply-result (apply-cons(
                     (var-name-if-var l)
                     (typeof l)
                     (typeof r)
                     term
                  )))
                  (if (head-string(var-name-if-var l)) (
                     (set apply-result (apply-or-cons-and-specialize(
                        (var-name-if-var l)
                        (typeof l)
                        (typeof r)
                        term
                     )))
                  ) ())
                  (set rt (.return-type apply-result))
                  (if (non-zero (.phi-types apply-result)) (
                     (for-each ((Tuple( phi-id phi-new-type )) in (.phi-types apply-result)) (
                        (set tctx (phi-transition( tctx phi-id phi-new-type )))
                     ))
                  ) ())
               ))
            ))
            (if (is( l-used Unused )) (
               (set rt (cons-tail-or-self rt))
            ) ())
            (ascript-normal( term rt ))
            (if (==( (var-name-if-var l) 'Rc_s )) (
               (maybe-specialize( 'inc_s (typeof-var-raw( term tctx 'inc_s ))
                  (t2( 'Rc_s (.p2(slot( (.p2(slot( (.p1 (typeof r)) 'Array_s ))) 'Tuple_s ))) )) # invert Rc constructor to get type parameter
               ))
            ) ())

            (let lt (typeof l))
            (if (.is-arrow lt) (
               (match l (
                  ()
                  ( (Lit( l-name _ )) (
                     (let ct (t2( 'Constructor_s (t1(var-name-if-var l)) )))
                     (set ct (+( ct (t2( 'CaseNumber_s (t1(to-string(index-of-tag l-name))) )) )))
                  ))
                  ( _ () )
               ))
            ) ())
         ))
      ))
      ( (Abs( lhs rhs tlt )) (
         (set tctx (infer-ctx( tctx lhs )))
         (if (.is-t( tlt 'Blob_s )) (
            (match rhs (
               ()
               ( (App( (Lit( ':_s _ )) (App( inner-rhs (AType return-type) )) )) (
                  (infer-expr( tctx inner-rhs Unscoped TAny Tail ))
                  (ascript-normal( rhs return-type ))
               ))
            ))
         ) (
            (infer-expr( tctx rhs Unscoped TAny Tail ))
         ))
         (let lt (typeof-lhs lhs))
         (let rt (typeof rhs))
         (ascript-normal( term (enrich( (t3( 'Arrow_s lt rt )) tlt )) ))
         (if (.is-t( tlt 'Blob_s )) () (
            (maybe-specialize( 'cdecl::return_s (typeof-var-raw( term tctx 'cdecl::return_s )) rt ))
         ))
      ))
      ( (Var( v vtk )) (
         (let vt (denormalize(typeof-var( term tctx v ))))
         (ascript-normal( term vt ))
      ))
      ( (Lit( l _ )) (
         (if (non-zero(typeof term)) () (
            (let tt (typeof-tag l))
            (if (non-zero tt) (
               (if (non-zero hint) (
                  (if (||( (.is-t( hint 'String_s )) (.is-t( hint 'SmartString_s )) )) (
                     (set tt hint)
                  ) (
                     (set tt (unify-hint( hint tt )))
                  ))
               ) ())
               (ascript-normal( term tt ))
            ) ())
         ))
      ))
      ( (Meta( _ )) (ascript-normal( term (t1 'Nil_s) )) )
      ( (AType( tt )) (ascript-normal( term tt )) )
      ( _ (
         (print 'Unknown\sTerm\sIn\sType\sInference\n_s)
         (print term)
         (print '\n_s)
         (exit 1_u64)
      ))
   ))
   tctx
) TContext);

