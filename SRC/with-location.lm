
with-location := λ(: term AST)(: loc SourceLocation). (: (
   (let return term)
   (match term (
      ()
      ( ASTEOF () )
      ( ASTNil () )
      ( (Var( v vtk )) (
         (if (non-zero(.location vtk)) () (
            (set return (Var( v (with-location( vtk loc )) )))
         ))
      ))
      ( (Lit( v vtk )) (
         (if (non-zero(.location vtk)) () (
            (set return (Lit( v (with-location( vtk loc )) )))
         ))
      ))
      ( (AType _) () )
      ( (App( lt rt )) (
         (set return (App(
            (close(with-location( lt loc )))
            (close(with-location( rt loc )))
         )))
      ))
      ( (Abs( lt rt tlt )) (
         (set return (Abs(
            (close(with-location( lt loc )))
            (close(with-location( rt loc )))
            tlt
         )))
      ))
      ( (Seq( lt rt )) (
         (set return (Seq(
            (close(with-location( lt loc )))
            (close(with-location( rt loc )))
         )))
      ))
      ( (Typedef( lt rt )) (
         (set return (Typedef(
            (close(with-location( lt loc )))
            (close(with-location( rt loc )))
         )))
      ))
      ( (Glb( k t )) (
         (if (non-zero(location-of t)) () (
            (set k (with-location( k loc )))
            (set t (with-location( t loc )))
         ))
         (set return (Glb( k (close t) )))
      ))
   ))
   return
) AST);


with-location := λ(: t Token)(: loc SourceLocation). (: (
   (match t (
      ()
      ( (Token( k _ _ )) (
         (set t (Token( k (iuid()) loc )))
      ))
   ))
   t
) Token);
