
type2 SourceLocation = { filename: CString, line: U64, column: U64 };
type2 Token = { skey: String, key: CString, nonce: U64, location: SourceLocation };

type AST
         = ASTEOF
         | ASTNil
         | App { is-cons: U64, left: AST[], right: AST[] }
         | Var { key: CString, token: Token }
         | Lit { key: CString, token: Token }
         | Abs { lhs: AST[], rhs: AST[], tt: Type }
         | AType { tt: Type }
         | Seq { seq: Vector<AST> }
         | Glb { key: Token , val: AST[] }
         | Typedef { lhs: AST[] , rhs: AST[] }
         | Typedef2 { location: SourceLocation, lhs-type: Type, implies: Vector<Type>, implements: Vector<Type>, constraints: Vector<(CString,Type)>,
                      size: Type, alias: Type, opaque-alias: Type, cases: Vector<(CString,Vector<(CString,Type)>)> }
         | Meta { val: AST[] };
type AST implements DefaultFormattable;
zero AST = ASTEOF;

# constructor with a default argument
let $"App"(left: AST[], right: AST[]): AST = App { false, left, right };

type2 alias TContext = List<Tuple<CString,Type,AST>>;
type2 alias AContext = List<Tuple<CString,AST>>;

type2 StackToSpecialize = { key:CString, pre-type:Type, ctx:Maybe<TContext>, post-type:Type };

type2 ParsePartial = PME{ term:AST , remainder:List<Token> };

type2 ApplyResult = { function-type:Type , return-type:Type };
