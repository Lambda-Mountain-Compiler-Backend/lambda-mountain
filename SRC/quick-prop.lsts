
let quick-prop = {} :: HashtableEq<(CString,U64),List<(Type,Type)>>;

let add-quick-prop(pre: Type, pat: Type, post: Type): Nil = (
   let key = pre.ground-tag-and-arity;
   let val = quick-prop.lookup(key, ([] :: List<(Type,Type)>));
   val = cons( (pat,post), val );
   quick-prop = quick-prop.bind( key, val );
);

let enrich-quick-prop(base: Type): Type = (
   enrich-quick-prop(base, base)
);

let enrich-quick-prop(base: Type, pre: Type): Type = (
   match pre {
      TGround {} => (
         for Tuple { lt=first, rt=second } in quick-prop.lookup( pre.ground-tag-and-arity, ([] :: List<(Type,Type)>) ).iter() {
            if can-unify(lt, base) then (
               let tctx = unify(lt, base);
               let post = substitute(tctx, rt);
               if not(can-unify(post, base)) {
                  pre = TAnd { close(pre), close(post) };
               };
            );
         };
      );
      TAnd { lt=left, rt=right } => (
         let next-lt = enrich-quick-prop(base, lt);
         let next-rt = enrich-quick-prop(base, rt);
         if not(is(lt,next-lt)) || not(is(rt,next-rt)) then (
            pre = TAnd { close(next-lt), close(next-rt) };
         );
      );
      _ => ();
   };
   pre
);

let weaken-quick-prop-index = {} :: HashtableEq<(CString,U64),List<(Type,Type)>>;

# core implicit weakening rules
add-weaken-quick-prop( t2(c"Phi",TAny), t2(c"Phi",TAny), t2(c"Phi",TAny) );
add-weaken-quick-prop( t2(c"Constructor",TAny), t2(c"Constructor",TAny), t2(c"Constructor",TAny) );
add-weaken-quick-prop( t2(c"CaseNumber",TAny), t2(c"CaseNumber",TAny), t2(c"CaseNumber",TAny) );

let add-weaken-quick-prop(pre: Type, pat: Type, post: Type): Nil = (
   let key = pre.ground-tag-and-arity;
   let val = weaken-quick-prop-index.lookup(key, ([] :: List<(Type,Type)>));
   val = cons( (pat,post), val );
   weaken-quick-prop-index = weaken-quick-prop-index.bind( key, val );
);

let weaken-quick-prop(base: Type): Type = (
   weaken-quick-prop(base, base)
);

let weaken-quick-prop(base: Type, pre: Type): Type = (
   match pre {
      TGround {} => (
         for Tuple { lt=first, rt=second } in weaken-quick-prop-index.lookup( pre.ground-tag-and-arity, ([] :: List<(Type,Type)>) ).iter() {
            if can-unify(lt, base) then (
               base = remove-info(base, rt);
            );
         };
      );
      TAnd { lt=left, rt=right } => (
         base = weaken-quick-prop(base, lt);
         base = weaken-quick-prop(base, rt);
      );
      _ => ();
   };
   base
);
