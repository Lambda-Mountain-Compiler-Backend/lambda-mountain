
let quick-prop = {} :: HashtableEq<(CString,U64),List<(Type,Type)>>;

let .ground-tag-and-arity(tt: Type): (CString,U64) = (
   match tt {
      TGround { tag:c"Array", parameters:[_.. array-base..] } => (
         let ga = array-base.ground-tag-and-arity;
         ( ga.first, ga.second + 1000 )
      );
      TGround { tag:c"Sized" } => (c"", 9999999);
      TGround { tag=tag, parameters=parameters } => (tag, parameters.length);
      TAny {} => (c"?", 0);
      TVar {} => (c"", 9999999);
      TAnd { left=left, right=right } => (
         let lga = left.ground-tag-and-arity;
         if lga.second==9999999 then right.ground-tag-and-arity else lga 
      );
   }
);

let add-quick-prop(pre: Type, pat: Type, post: Type): Nil = (
   print("quick-prop \{pre} x \{pat} => \{post}\n");
   let key = pre.ground-tag-and-arity;
   let val = quick-prop.lookup(key, ([] :: List<(Type,Type)>));
   val = cons( (pat,post), val );
   quick-prop = quick-prop.bind( key, val );
);

let enrich-quick-prop(base: Type): Type = (
   enrich-quick-prop(base, base)
);

let enrich-quick-prop(base: Type, pre: Type): Type = (
   match pre {
      TGround { tag=tag, parameters=parameters } => (
         if parameters.length > 0 then (
            let ps = [] :: List<Type>;
            for p in parameters.reverse {
               ps = cons( enrich-quick-prop(base, p), ps );
            };
            pre = TGround { tag, close(ps) };
         );
         for Tuple { lt=first, rt=second } in quick-prop.lookup( pre.ground-tag-and-arity, ([] :: List<(Type,Type)>) ) {
            if can-unify(lt, base) then (
               let tctx = unify(lt, base);
               let post = substitute(tctx, rt);
               if not(can-unify(post, pre)) {
                  pre = TAnd { close(pre), close(post) };
               };
            );
         };
      );
      TAnd { lt=left, rt=right } => (
         let next-lt = enrich-quick-prop(base, lt);
         let next-rt = enrich-quick-prop(base, rt);
         if not(is(lt,next-lt)) || not(is(rt,next-rt)) then (
            pre = TAnd { close(next-lt), close(next-rt) };
         );
      );
      _ => ();
   };
   pre
);

