
type Type implements DefaultFormattable;

let .into(tt: Type, tgt: Type<String>): String = (
   match tt {
      TAny{} => "?";
      TVar{name=name} => intern(name);
      TGround{tag=tag,parameters=parameters} => (
         let r = if tag[0] >= 97 && tag[0] <= 122 then intern("\"\{tag}\"") else intern(tag);
         if parameters.length > 0 {
            let pc = 0_u64;
            r = r + "<";
            for p in parameters.reverse {
               if pc > 0 { r = r + ","; };
               r = r + to-smart-string(p);
               pc = pc + 1;
            };
            r = r + ">";
         }; r
      );
      TAnd{left=left,right=right} => "\{left}+\{right}";
   }
);

let .pretty(tt: Type): String = (
   match tt {
      TAny{} => "?";
      TVar{name=name} => intern(name);
      TGround{tag=tag,parameters=parameters} => (
         let r = intern(tag);
         if parameters.length > 0 {
            let pc = 0_u64;
            r = r + "<";
            for p in parameters.reverse {
               if pc > 0 { r = r + ","; };
               r = r + to-smart-string(p);
               pc = pc + 1;
            };
            r = r + ">";
         }; r
      );
      TAnd{left=left,right=right} => "\{left.pretty}+\n\{right.pretty}";
   }
);
