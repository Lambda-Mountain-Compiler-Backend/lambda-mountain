
type TypeSizeList (TSzEOF) | (TSzSeq( TypeSizeList[] , String , U64 ));

typecheck-s-type-list := (: STEOF STypeList);
typecheck-ascript := λ(: t S)(: tt Type). (: (
   (set typecheck-s-type-list (STSeq(
      (close typecheck-s-type-list)
      t tt
   )))
) Nil);

print := λ(: tt Type). (: (match tt (
   ()
   ( TAny (print '?_s) )
   ( (TVar( vn )) (tail( (print '`_s) (print vn) )) )
   ( (TGround( tag TypeEOF )) (print tag) )
   ( (TGround( tag (TypeSeq( TypeEOF p1 )) )) (tail(
      (print tag)
      (print '<_s)
      (print p1)
      (print '>_s)
   )))
   ( (TGround( tag (TypeSeq( (TypeSeq( TypeEOF p1 )) p2 )) )) (tail(
      (print tag)
      (print '<_s)
      (print p1)
      (print ',_s)
      (print p2)
      (print '>_s)
   )))
   ( (TGround( tag (TypeSeq( (TypeSeq( (TypeSeq( TypeEOF p1 )) p2 )) p3 )) )) (tail(
      (print tag)
      (print '<_s)
      (print p1)
      (print ',_s)
      (print p2)
      (print ',_s)
      (print p3)
      (print '>_s)
   )))
   ( (TAnd( (TGround( '->_s (TypeSeq( (TypeSeq( TypeEOF p1 )) p2 )) )) rt )) (tail(
      (print '-><_s)
      (print p1)
      (print ',_s)
      (print p2)
      (print '>\n_s)
      (print rt)
   )))
   ( (TAnd( lt (TGround( '->_s (TypeSeq( (TypeSeq( TypeEOF p1 )) p2 )) )) )) (tail(
      (print lt)
      (print '\n_s)
      (print '-><_s)
      (print p1)
      (print ',_s)
      (print p2)
      (print '>_s)
   )))
   ( (TAnd( lt rt )) (tail(
      (print lt)
      (print '\s+\s_s)
      (print rt)
   )))
)) Nil);

serialize-ast := λ(: tt Type). (: (match tt (
   ()
   ( TAny (print '\[Variable\s?\]_s) )
   ( (TVar( vn )) (tail(
      (print '\[Variable\s_s)
      (print vn)
      (print '\]_s)
   )))
   ( (TGround( tag TypeEOF )) (tail(
      (print '\[Literal\s_s)
      (print tag)
      (print '\]_s)
   )))
   ( (TGround( tag (TypeSeq( TypeEOF p1 )) )) (tail(
      (print '\[App\s\[_s)
      (print '\[Literal\s_s)
      (print tag)
      (print '\]\s_s)
      (serialize-ast p1)
      (print '\]\]_s)
   )))
   ( (TGround( tag (TypeSeq( (TypeSeq( TypeEOF p1 )) p2 )) )) (tail(
      (print '\[App\s\[_s)
      (print '\[Literal\s_s)
      (print tag)
      (print '\]\s_s)
      (print '\[App\s\[_s)
      (serialize-ast p1)
      (print '\s_s)
      (serialize-ast p2)
      (print '\]\]_s)
      (print '\]\]_s)
   )))
   ( (TGround( tag (TypeSeq( (TypeSeq( (TypeSeq( TypeEOF p1 )) p2 )) p3 )) )) (tail(
      (print '\[App\s\[_s)
      (print '\[Literal\s_s)
      (print tag)
      (print '\]\s_s)
      (print '\[App\s\[_s)
      (print '\[App\s\[_s)
      (serialize-ast p1)
      (print '\s_s)
      (serialize-ast p2)
      (print '\]\]\s_s)
      (serialize-ast p3)
      (print '\]\]_s)
      (print '\]\]_s)
   )))
   ( (TAnd( lt rt )) (tail(
      (print '\[App\s\[_s)
      (print '\[Literal\sAnd\]\s_s)
      (print '\[App\s\[_s)
      (serialize-ast lt)
      (print '\s_s)
      (serialize-ast rt)
      (print '\]\]_s)
      (print '\]\]_s)
   )))
)) Nil);

type TermTypeList TTEOF | (TTSeq( TermTypeList[] , AST , Type ));
type STypeList STEOF | (STSeq( STypeList[] , S , Type ));

non-zero := λ(: t TermTypeList). (: (tail(
   (let r 1_u64)
   (match t (
      ()
      ( TTEOF (set r 0_u64))
      ( _ () )
   ))
   r
)) U64);

non-zero := λ(: t STypeList). (: (tail(
   (let r 1_u64)
   (match t (
      ()
      ( STEOF (set r 0_u64))
      ( _ () )
   ))
   r
)) U64);

non-zero := λ(: t Type). (: (tail(
   (let r 1_u64)
   (match t (
      ()
      ( TAny (set r 0_u64))
      ( _ () )
   ))
   r
)) U64);

non-zero := λ(: t TypeSizeList). (: (tail(
   (let r 1_u64)
   (match t (
      ()
      ( TSzEOF (set r 0_u64))
      ( _ () )
   ))
   r
)) U64);

close := λ(: x Type). (: (tail(
   (mov( (malloc(sizeof Type)) R8 ))
   (mov( x 0_u64 (as R8 Type[]) ))
   (as R8 Type[])
)) Type[]);

close := λ(: x TypeConstructorList). (: (tail(
   (mov( (malloc(sizeof TypeConstructorList)) R8 ))
   (mov( x 0_u64 (as R8 TypeConstructorList[]) ))
   (as R8 TypeConstructorList[])
)) TypeConstructorList[]);

close := λ(: x TypeSizeList). (: (tail(
   (mov( (malloc(sizeof TypeSizeList)) R8 ))
   (mov( x 0_u64 (as R8 TypeSizeList[]) ))
   (as R8 TypeSizeList[])
)) TypeSizeList[]);

close := λ(: x TermTypeList). (: (tail(
   (mov( (malloc(sizeof TermTypeList)) R8 ))
   (mov( x 0_u64 (as R8 TermTypeList[]) ))
   (as R8 TermTypeList[])
)) TermTypeList[]);

close := λ(: x STypeList). (: (tail(
   (mov( (malloc(sizeof STypeList)) R8 ))
   (mov( x 0_u64 (as R8 STypeList[]) ))
   (as R8 STypeList[])
)) STypeList[]);
