
typecheck := Î». (: (
   (let p ast-parsed-program)
   (let ordered-type-exprs ASTEOF)
   (while (non-zero p) (match p (
      ()
      ( (Seq( rst r )) (
         (set ordered-type-exprs (Seq( (close ordered-type-exprs) (close r) )))
         (set p rst)
      ))
   )))
   (let preordered-type-exprs ordered-type-exprs)
   (while (non-zero preordered-type-exprs) (match preordered-type-exprs (
      ()
      ( (Seq( rst r )) (
         (infer-global-context( r ))
         (set preordered-type-exprs rst)
      ))
   )))
   (while (non-zero ordered-type-exprs) (match ordered-type-exprs (
      ()
      ( (Seq( rst r )) (
         (infer-global-context-2( r ))
         (set ordered-type-exprs rst)
      ))
   )))
   (infer-expr( (: None TContext) ast-parsed-program Unscoped TAny Used ))
   (while (non-zero stack-to-specialize) (match stack-to-specialize (
      ()
      ( (LCons( (StackToSpecialize( function-name ft unify-ctx special-type )) rst )) (
         (set stack-to-specialize rst)
         (specialize( function-name ft unify-ctx special-type ))
      ))
   )))
   (assert-well-typed ast-parsed-program)
) Nil);
