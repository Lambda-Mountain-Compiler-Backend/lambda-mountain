
let std-infer-expr(tctx: Maybe<TContext>, term: AST, is-scoped: Bool, used: IsUsed): (TContext?, AST) = (
   match term {
      ASTEOF{} => ascript-normal(term, t1(c"Nil"));
      ASTNil{} => ascript-normal(term, t1(c"Nil"));
      Meta{} => ascript-normal(term, t1(c"Nil"));
      AType{tt=tt} => ascript-normal(term, tt);
      App{ is-cons=is-cons, l=left, r=right } => (
         if is-cons {
            tctx = infer-expr(tctx, l, Unscoped, TAny, Used);
            tctx = infer-expr(tctx, r, Unscoped, TAny, Used);
            ascript-normal(term, if is(used, Tail) then typeof(r) else t3(c"Cons", typeof(l), typeof(r)));
         } else {
            let rt = TAny;
            if var-name-if-var(l)==c"list::cons" { match r {
               App{k=left, m=right} => (
                  infer-expr(tctx, k, Unscoped, TAny, Call);
                  infer-expr(tctx, m, Unscoped, t2(c"List",normalize(typeof(k))), Used);
               );
               _ => ();
            }};
            if var-name-if-var(l)==c"map::cons" { match r {
               App{kv=left, m=right} => (
                  infer-expr(tctx, kv, Unscoped, TAny, Call);
                  infer-expr(tctx, m, Unscoped, t3(c"HashtableEq",normalize(typeof(kv)).r2,normalize(typeof(kv)).r1), Used);
               );
               _ => ();
            }};

            if index-macro-table.has(var-name-if-var(l)) {
               (tctx, term) = std-apply-macro(tctx, term);
            } else {
               tctx = infer-expr(tctx, l, Unscoped, TAny, used);
               if typeof(l).is-arrow {
                  tctx = infer-expr(tctx, r, Unscoped, TAny, Call);            
               } else {
                  tctx = infer-expr(tctx, r, Unscoped, TAny, Used);
               };
               rt = if typeof(l).is-arrow && non-zero(var-name-if-var(l)) {
                  apply-global-callable(var-name-if-var(l), typeof(r), term);
               } else {
                  t3(c"Cons", typeof(l), typeof(r))
               };
               if not(is(used,Call)) { rt = cons-tail-or-self(rt); };
               ascript-normal(term, rt);
            };
         };

         if not(index-macro-table.has(var-name-if-var(l))) && not(is-cons) && non-zero(var-name-if-var(l)) && typeof(l).is-arrow {
            mark-var-to-def-todo(tctx, var-name-if-var(l), typeof(r), l);
         };
      );
   };
   (tctx, term);
);

