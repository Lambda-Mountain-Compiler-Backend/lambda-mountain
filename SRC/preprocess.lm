
type Macro (Macro( AST , AST ));
type MacroList MEOF | (MSeq( MacroList[] , Macro )); zero MacroList MEOF;
type IndexList IEOF | (ISeq( IndexList[] , String , U64 )); zero IndexList IEOF;

preprocess-macros := (: MEOF MacroList);
preprocess-tag-indices := (: IEOF IndexList);
preprocess-tag-index-eof := 99999_u64;

preprocess-index-of-tag := λ(: tag String). (: (tail(
   (let index preprocess-tag-index-eof)
   (let indices preprocess-tag-indices)
   (while (non-zero indices) (match indices (
      ()
      ( (ISeq( rst tag-name tag-index )) (tail(
         (if (==( tag tag-name )) (
            (set index tag-index)
         ) ())
         (set indices rst)
      )))
   )))
   index
)) U64);

preprocess := λ. (: (tail(
   (preprocess-index-typedefs ast-parsed-program)
   (let program (maybe-deref(preprocess-apply ast-parsed-program)))
   (set ast-parsed-program program)
)) Nil);

preprocess-index-typedefs := λ(: program AST). (: (
   (while (non-zero program) (match program (
      ()
      ( (Seq( rst term )) (tail(
         (preprocess-index-typedef term)
         (set program rst)
      )))
      ( _ (set program ASTEOF) )
   )))
) Nil);

preprocess-index-typedef := λ(: term AST). (: (match term (
   ()
   ( (ASTType( lhs rhs )) (
      (preprocess-index-indices( rhs 0_u64 ))
   ))
   ( _ () )
)) Nil);

preprocess-index-indices := λ(: def AST)(: index U64) . (: (tail(
   ()
   (match def (
      ()
      ( (App( (App( tds (Var '|_s) )) body )) (tail(
         (preprocess-index-indices( tds (+( index 1_u64 )) ))
         (preprocess-index-index( body index ))
      )))
      ( body (
         (preprocess-index-index( body index ))
      ))
   ))
)) Nil);

preprocess-index-index := λ(: body AST)(: index U64). (: (tail(
   (match body (
      ()
      ( (Lit tag) (
         (set preprocess-tag-indices (ISeq(
            (close preprocess-tag-indices)
            tag
            index
         )))
      ))
      ( (App( (Lit tag) args )) (
         (set preprocess-tag-indices (ISeq(
            (close preprocess-tag-indices)
            tag
            index
         )))
      ))
      ( _ () )
   ))
   ()
)) Nil);

preprocess-apply := λ(: program AST). (: (tail(
   (let r program)
   (match program (
      ()
      ( (App( (App( (Lit ':_s) mvar )) (Lit mtype) )) (
         (set r (Asc( (close(preprocess-apply mvar)) (close(parse-type mtype)) )))
      ))
      ( (App( (App( (Lit ':_s) mvar )) (Var mtype) )) (
         (set r (Asc( (close(preprocess-apply mvar)) (close(parse-type mtype)) )))
      ))
      ( (App( (App( (Var 'as_s) mvar )) (Lit mtype) )) (
         (set r (As( (close(preprocess-apply mvar)) (close(parse-type mtype)) )))
      ))
      ( (App( (App( (Var 'as_s) mvar )) (Var mtype) )) (
         (set r (As( (close(preprocess-apply mvar)) (close(parse-type mtype)) )))
      ))
      ( (App( (Var 'sizeof_s) (Var mtype) )) (
         (set r (Sizeof( (close(parse-type mtype)) )))
      ))
      ( (App( (Var 'sizeof_s) (Lit mtype) )) (
         (set r (Sizeof( (close(parse-type mtype)) )))
      ))
      ( (Lit l) (tail(
         (let suffixes parse-suffixes)
         (while (non-zero suffixes) (match suffixes (
            ()
            ( (SfxSeq( rst sfxs sfxtt )) (
               (if (has-suffix( l sfxs )) (tail(
                  (let lloc (maybe-deref(location-of l)))
                  (let lpfx (remove-suffix( l sfxs )))
                  (map-location( lpfx lloc ))
                  (set r (Asc( (close (Lit lpfx)) (close sfxtt) )))
                  (set suffixes SfxEOF)
               )) (
                  (set suffixes rst)
               ))
            ))
         )))
      )))
      ( (Var l) (tail(
         (let suffixes parse-suffixes)
         (while (non-zero suffixes) (match suffixes (
            ()
            ( (SfxSeq( rst sfxs sfxtt )) (
               (if (has-suffix( l sfxs )) (tail(
                  (let lloc (maybe-deref(location-of l)))
                  (let lpfx (remove-suffix( l sfxs )))
                  (map-location( lpfx lloc ))
                  (set r (Asc( (close (Lit lpfx)) (close sfxtt) )))
                  (set suffixes SfxEOF)
               )) (
                  (set suffixes rst)
               ))
            ))
         )))
      )))
      ( (App( (Var vn) vt )) (
         if (is-macro-head vn) (tail(
            (let applied (maybe-deref(preprocess-apply-maybe program)))
            (set r applied)
         )) (
            (match program (
               ()
               ( (App( v1 v2 )) (
                  (set r (App( (close(preprocess-apply v1)) (close(preprocess-apply v2)) )))
               ))
            ))
         )
      ))
      ( (App( (App( (Var vn) vt1 )) vt2 )) (
         if (is-macro-head vn) (tail(
            (let applied (maybe-deref(preprocess-apply-maybe program)))
            (set r applied)
         )) (
            (match program (
               ()
               ( (App( (App( v1 v2 )) v3 )) (
                  (set r (App(
                     (close(App(
                        (close(preprocess-apply v1))
                        (close(preprocess-apply v2))
                     )))
                     (close(preprocess-apply v3))
                  )))
               ))
            ))
         )
      ))
      ( (Seq( al ar )) (set r (Seq(
         (close(preprocess-apply al))
         (close(preprocess-apply ar))
      ))))
      ( (App( al ar )) (set r (App(
         (close(preprocess-apply al))
         (close(preprocess-apply ar))
      ))))
      ( (Abs( al ar )) (set r (Abs(
         (close(preprocess-apply al))
         (close(preprocess-apply ar))
      ))))
      ( (Asc( al at )) (set r (Asc(
         (close(preprocess-apply al))
         (close at)
      ))))
      ( (Fragment( al ar )) (set r (Fragment(
         al
         (close(preprocess-apply ar))
      ))))
      ( (Glb( k ar )) (set r (Glb(
         k
         (close(preprocess-apply ar))
      ))))
      ( u (set r u))
   ))
   r
)) AST);

is-macro-head := λ(: s String)(: m AST). (: (tail(
   (let r 0_u64)
   (match m (
      ()
      ( (Lit mv) (set r (==( s mv ))) )
      ( (App( l1 l2 )) (set r (is-macro-head( s l1 ))) )
      ( _ (exit-error( 'Unrecognized\sMacro\sLHS_s m )) )
   ))
   r
)) U64);

is-macro-head := λ(: s String). (: (tail(
   (let macros preprocess-macros)
   (let found 0_u64)
   (while (non-zero macros) (match macros (
      ()
      ( (MSeq( rst (Macro( mlhs mrhs )) )) (
         (if (is-macro-head( s mlhs )) (tail(
            (set found 1_u64)
            (set macros MEOF)
         )) (
            (set macros rst)
         ))
      ))
   )))
   found
)) U64);

merge := λ(: l Context)(: r Context). (: (tail(
   (match (CPair( l r )) (
      ()
      ( (CPair( CtxEOF _ )) (set l CtxEOF ) )
      ( (CPair( _ CtxEOF )) (set l CtxEOF ) )
      ( (CPair( CtxNil cr )) (set l cr) )
      ( (CPair( cl CtxNil )) (set l cl) )
      ( (CPair( (CtxBind( cl kl vl ))
                (CtxBind( cr kr vr )) )) (tail(
         (let c1 (merge( cl cr )))
         (let c2 (close(CtxBind( c1 kl (close vl) ))))
         (let c3 (CtxBind( c2 kr (close vr) )))
         (set l c3)
      )))
   ))
   (close l)
)) Context[]);

try-destructure-macro := λ(: lhs AST)(: term AST). (: (tail(
   (let r CtxEOF)
   (match (Pair( lhs term )) (
      ()
      ( (Pair( ASTNil ASTNil )) (set r CtxNil) )
      ( (Pair( (App( (App( (Var _) (Var _) )) (Var _) )) (App( (App( (Lit _) _ )) _ )) )) () )
      ( (Pair( (App(pl pr)) (App(el er)) )) (tail(
         (let ll (maybe-deref(try-destructure-macro( pl el ))))
         (if (non-zero ll) (tail(
            (let rl (maybe-deref(try-destructure-macro( pr er ))))
            (if (non-zero rl) (tail(
               (let m (maybe-deref(merge( ll rl ))))
               (set r m)
            )) ())
         )) ())
      )))
      ( (Pair( (Abs(pl pr)) (Abs(el er)) )) (tail(
         (let ll (maybe-deref(try-destructure-macro( pl el ))))
         (if (non-zero ll) (tail(
            (let rl (maybe-deref(try-destructure-macro( pr er ))))
            (if (non-zero rl) (tail(
               (let m (maybe-deref(merge( ll rl ))))
               (set r m)
            )) ())
         )) ())
      )))
      ( (Pair( (Lit ':Any:_s) (Var '__s) )) (
         (set r CtxNil)
      ))
      ( (Pair( (Lit pl) (Var el) )) (
         (if (==( pl el )) (set r CtxNil) ())
      ))
      ( (Pair( (Lit pl) (Lit el) )) (
         (if (==( pl el )) (set r CtxNil) ())
      ))
      ( (Pair( (App( (Lit ':Literal:_s) (Var pv) )) (Lit el) )) (
         (if (==( (preprocess-index-of-tag el) preprocess-tag-index-eof ))
             (set r (CtxBind( (close CtxNil) pv (close term) )))
             ()
         )
      ))
      ( (Pair( (App( (Lit ':Variable:_s) _ )) (Var '__s) )) (
         ()
      ))
      ( (Pair( (App( (Lit ':Variable:_s) (Var pv) )) (Var el) )) (
         (set r (CtxBind( (close CtxNil) pv (close term) )))
      ))
      ( (Pair( (App( (App( (Lit ':Tag:_s) (Var pv) )) (Var pt) )) (Lit el) )) (
         (if (==( (preprocess-index-of-tag el) preprocess-tag-index-eof )) () (tail(
            (set r CtxNil)
            (set r (CtxBind( (close r) pv (close(
               (Asc(
                  (close(Lit (to-string(preprocess-index-of-tag el)) ))
                  (close(parse-type 'Constant+Literal+U64_s))
               ))
            )) )))
            (set r (CtxBind( (close r) pt (close(Lit el)) )))
         )))
      ))
      ( (Pair( (Var pv) _ )) (
         (set r (CtxBind( (close CtxNil) pv (close term) )))
      ))
      ( _ () )
   ))
   (close r)
)) Context[]);

replace-loc := λ(: loc AST)(: term AST). (: (tail(
   (match term (
      ()
      ( ASTEOF () )
      ( ASTNil () )
      ( (Var v) (tail(
         (let new-v (clone-rope(SAtom v)))
         (map-location( new-v (maybe-deref(location-of loc)) ))
         (set term (Var new-v))
      )))
      ( (Lit v) (tail(
         (let new-v (clone-rope(SAtom v)))
         (map-location( new-v (maybe-deref(location-of loc)) ))
         (set term (Lit new-v))
      )))
      ( (App( lt rt )) (
         (set term (App(
            (replace-loc( loc lt ))
            (replace-loc( loc rt ))
         )))
      ))
      ( (Abs( lt rt )) (
         (set term (Abs(
            (replace-loc( loc lt ))
            (replace-loc( loc rt ))
         )))
      ))
      ( (Seq( lt rt )) (
         (set term (Seq(
            (replace-loc( loc lt ))
            (replace-loc( loc rt ))
         )))
      ))
      ( (Asc( lt rt )) (
         (set term (Asc(
            (replace-loc( loc lt ))
            (close rt)
         )))
      ))
      ( _ (exit-error( 'preprocess::replace-loc\sUnexpected\sTerm_s term )) )
   ))
   (close term)
)) AST[]);

apply-context := λ(: ctx Context)(: term AST). (: (tail( 
   (match term (
      ()
      ( (Var n) (
         (while (non-zero ctx) (match ctx (
            ()
            ( (CtxBind( rst k v )) (
               (if (==( k n )) (tail(
                  (set term v)
                  (set ctx CtxEOF)
               )) (
                  (set ctx rst)
               ))
            ))
            ( _ (set ctx CtxEOF))
         )))
      ))
      ( (App( vl vr )) (
         (set term (App(
            (apply-context( ctx vl ))
            (apply-context( ctx vr ))
         )))
      ))
      ( (Abs( vl vr )) (
         (set term (Abs(
            (apply-context( ctx vl ))
            (apply-context( ctx vr ))
         )))
      ))
      ( _ () )
   ))
   (close term)
)) AST[]);

substitute-uuids := λ(: ctx Context)(: term AST). (: (tail( 
   (match term (
      ()
      ( (App( (Var 'uuid_s) (Var x ) )) (
         (while (non-zero ctx) (match ctx (
            ()
            ( (CtxBind( rst k v )) (
               (if (==( x k )) (tail(
                  (set term v)
                  (set ctx rst)
               )) (
                  (set ctx rst)
               ))
            ))
            ( _ (set ctx CtxEOF) )
         )))
      ))
      ( (App( l r )) (
         (set term (App(
            (substitute-uuids( ctx l ))
            (substitute-uuids( ctx r ))
         )))
      ))
      ( (Abs( l r )) (
         (set term (Abs(
            (substitute-uuids( ctx l ))
            (substitute-uuids( ctx r ))
         )))
      ))
      ( (Asc( l rt )) (
         (set term (Asc(
            (substitute-uuids( ctx l ))
            (close rt)
         )))
      ))
      ( _ () )
   ))
   (close term)
)) AST[]);

extract-uuids := λ(: sloc AST)(: ctx Context)(: term AST). (: (tail( 
   (match term (
      ()
      ( (App( (Var 'uuid_s) (Var x) )) (tail(
         (let id (uuid()))
         (let loc (maybe-deref(location-of sloc)))
         (map-location( id loc ))
         (let lctx (CtxBind( (close ctx) x (close(Var id)) )))
         (set ctx lctx)
      )))
      ( (App( l r )) (tail(
         (let lctx (maybe-deref(extract-uuids( sloc ctx l ))))
         (let rctx (maybe-deref(extract-uuids( sloc lctx r ))))
         (set ctx rctx)
      )))
      ( (Abs( l r )) (tail(
         (let lctx (maybe-deref(extract-uuids( sloc ctx l ))))
         (let rctx (maybe-deref(extract-uuids( sloc lctx r ))))
         (set ctx rctx)
      )))
      ( (Asc( l rt )) (tail(
         (let lctx (maybe-deref(extract-uuids( sloc ctx l ))))
         (set ctx lctx)
      )))
      ( _ () )
   ))
   (close ctx)
)) Context[]);

preprocess-apply-maybe := λ(: program AST). (: (tail(
   (let macros preprocess-macros)
   (let matched False_u8)
   (while (non-zero macros) (match macros (
      ()
      ( (MSeq( rst (Macro( lhs rhs )) )) (
         (match (try-destructure-macro( lhs program )) (
            ()
            ( CtxEOF (set macros rst) )
            ( ctx (tail(
               (let p (maybe-deref(apply-context( ctx rhs ))))
               (let c (maybe-deref(extract-uuids( program CtxEOF p ))))
               (let u (maybe-deref(substitute-uuids( c p ))))
               (let n (maybe-deref(preprocess-apply u)))
               (set program n)
               (set macros MEOF)
               (set matched True_u8)
            )))
         ))
      ))
      ( _ (set macros MEOF) )
   )))
   (match program (
      ()
      ( (App( l r )) (tail(
         (let np (App(
            (close(preprocess-apply l))
            (close(preprocess-apply r))
         )))
         (set program np)
      )))
      ( _ () )
   ))
   (close program)
)) AST[]);
