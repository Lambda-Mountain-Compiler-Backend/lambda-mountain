
try-destructure-macro := 位(: lhs AST)(: term AST). (: (tail(
   (let r CtxEOF)
   (match (APair( lhs term )) (
      ()
      ( (APair( ASTNil ASTNil )) (set r CtxNil) )
      ( (APair( (App( (App( (Var _) (Var _) )) (Var _) )) (App( (App( (Lit _) _ )) _ )) )) () )
      ( (APair( (App(pl pr)) (App(el er)) )) (tail(
         (let ll (maybe-deref(try-destructure-macro( pl el ))))
         (if (non-zero ll) (tail(
            (let rl (maybe-deref(try-destructure-macro( pr er ))))
            (if (non-zero rl) (tail(
               (let m (maybe-deref(union( ll rl ))))
               (set r m)
            )) ())
         )) ())
      )))
      ( (APair( (Abs(pl pr)) (Abs(el er)) )) (tail(
         (let ll (maybe-deref(try-destructure-macro( pl el ))))
         (if (non-zero ll) (tail(
            (let rl (maybe-deref(try-destructure-macro( pr er ))))
            (if (non-zero rl) (tail(
               (let m (maybe-deref(union( ll rl ))))
               (set r m)
            )) ())
         )) ())
      )))
      ( (APair( (Lit ':Any:_s) (Var '__s) )) (
         (set r CtxNil)
      ))
      ( (APair( (Lit pl) (Var el) )) (
         (if (==( pl el )) (set r CtxNil) ())
      ))
      ( (APair( (Lit pl) (Lit el) )) (
         (if (==( pl el )) (set r CtxNil) ())
      ))
      ( (APair( (App( (Lit ':Literal:_s) (Var pv) )) (Lit el) )) (
         (if (==( (index-of-tag el) unknown-index-of-tag ))
             (set r (CtxBind( (close CtxNil) pv term )))
             ()
         )
      ))
      ( (APair( (App( (Lit ':Variable:_s) _ )) (Var '__s) )) (
         ()
      ))
      ( (APair( (App( (Lit ':Variable:_s) (Var pv) )) (Var el) )) (
         (set r (CtxBind( (close CtxNil) pv term )))
      ))
      ( (APair( (App( (App( (Lit ':Tag:_s) (Var pv) )) (Var pt) )) (Lit el) )) (
         (if (==( (index-of-tag el) unknown-index-of-tag )) () (tail(
            (set r CtxNil)
            (set r (CtxBind( (close r) pv (
               (Asc(
                  (close(Lit (to-string(index-of-tag el)) ))
                  (close(parse-type 'Constant+Literal+U64_s))
               ))
            ) )))
            (set r (CtxBind( (close r) pt (Lit el) )))
         )))
      ))
      ( (APair( (Var pv) _ )) (
         (set r (CtxBind( (close CtxNil) pv term )))
      ))
      ( _ () )
   ))
   (close r)
)) Context[]);

replace-loc := 位(: loc AST)(: term AST). (: (tail(
   (match term (
      ()
      ( ASTEOF () )
      ( ASTNil () )
      ( (Var v) (tail(
         (let new-v (clone-rope(SAtom v)))
         (map-location( new-v (maybe-deref(location-of loc)) ))
         (set term (Var new-v))
      )))
      ( (Lit v) (tail(
         (let new-v (clone-rope(SAtom v)))
         (map-location( new-v (maybe-deref(location-of loc)) ))
         (set term (Lit new-v))
      )))
      ( (App( lt rt )) (
         (set term (App(
            (replace-loc( loc lt ))
            (replace-loc( loc rt ))
         )))
      ))
      ( (Abs( lt rt )) (
         (set term (Abs(
            (replace-loc( loc lt ))
            (replace-loc( loc rt ))
         )))
      ))
      ( (Seq( lt rt )) (
         (set term (Seq(
            (replace-loc( loc lt ))
            (replace-loc( loc rt ))
         )))
      ))
      ( (Asc( lt rt )) (
         (set term (Asc(
            (replace-loc( loc lt ))
            (close rt)
         )))
      ))
      ( _ (exit-error( 'preprocess::replace-loc\sUnexpected\sTerm_s term )) )
   ))
   (close term)
)) AST[]);

substitute-uuids := 位(: ctx Context)(: term AST). (: (tail( 
   (match term (
      ()
      ( (App( (Var 'uuid_s) (Var x ) )) (
         (while (non-zero ctx) (match ctx (
            ()
            ( (CtxBind( rst k v )) (
               (if (==( x k )) (tail(
                  (set term v)
                  (set ctx rst)
               )) (
                  (set ctx rst)
               ))
            ))
            ( _ (set ctx CtxEOF) )
         )))
      ))
      ( (App( l r )) (
         (set term (App(
            (substitute-uuids( ctx l ))
            (substitute-uuids( ctx r ))
         )))
      ))
      ( (Abs( l r )) (
         (set term (Abs(
            (substitute-uuids( ctx l ))
            (substitute-uuids( ctx r ))
         )))
      ))
      ( (Asc( l rt )) (
         (set term (Asc(
            (substitute-uuids( ctx l ))
            (close rt)
         )))
      ))
      ( _ () )
   ))
   (close term)
)) AST[]);

extract-uuids := 位(: sloc AST)(: ctx Context)(: term AST). (: (tail( 
   (match term (
      ()
      ( (App( (Var 'uuid_s) (Var x) )) (tail(
         (let id (uuid()))
         (let loc (maybe-deref(location-of sloc)))
         (map-location( id loc ))
         (let lctx (CtxBind( (close ctx) x (Var id) )))
         (set ctx lctx)
      )))
      ( (App( l r )) (tail(
         (let lctx (maybe-deref(extract-uuids( sloc ctx l ))))
         (let rctx (maybe-deref(extract-uuids( sloc lctx r ))))
         (set ctx rctx)
      )))
      ( (Abs( l r )) (tail(
         (let lctx (maybe-deref(extract-uuids( sloc ctx l ))))
         (let rctx (maybe-deref(extract-uuids( sloc lctx r ))))
         (set ctx rctx)
      )))
      ( (Asc( l rt )) (tail(
         (let lctx (maybe-deref(extract-uuids( sloc ctx l ))))
         (set ctx lctx)
      )))
      ( _ () )
   ))
   (close ctx)
)) Context[]);

