
let without-size-unless-class(tt: List<Type>): List<Type> = (
   match tt {
      LCons{head=head,tail=tail} => LCons{without-size-unless-class(head),close(without-size-unless-class(tail))};
      _ => tt;
   }
);

let without-size-unless-class(tt: Type): Type = (
   match tt {
      TGround{tag=tag,parameters=parameters} => TGround{tag,close(without-size-unless-class(parameters))};
      _ => without-size-unless-class-inner(tt);
   }
);

let without-size-unless-class-inner(tt: Type): Type = (
   match tt {
      TAnd{left=left,right=right} => without-size-unless-class-inner(left) && without-size-unless-class-inner(right);
      TGround{tag:c"Sized"} => TAny;
      TGround{tag=tag,parameters=parameters} => TGround{tag,close(without-size-unless-class(parameters))};
      _ => tt;      
   }
);
