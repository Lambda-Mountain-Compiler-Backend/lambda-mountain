

infer-global-context := λ(: td AST). (: (
   (match td (
      ()
      ( (Typedef( (Lit( base-type _ )) case-constructors )) (
         (let bt (parse-type base-type))
         (infer-type-definition( bt case-constructors 0_u64 ))
      ))
      ( (Typedef( (AType( bt )) case-constructors )) (
         (infer-type-definition( bt case-constructors 0_u64 ))
      ))
      ( (Glb( k (@( frhs (Abs( lhs (App( (Lit( ':_s _ )) (App( rhs (AType rhst) )) )) tlt )) )) )) (
         (let lt (typeof-lhs lhs))
         (let return-type rhst)
         (let ft (t3( 'Arrow_s lt return-type )))
         (set ft (&&( ft tlt )))
         (if (&&( (.is-t( tlt 'Hook_s )) (not(.is-t( rhst 'Nil_s ))) )) (
            (exit-error( 'Hooks\sMust\sNot\sReturn\sValues._s td ))
         ) ())
         (mark-global-as-seen( (.key k) ft tlt ))
         (ascript-normal( td ft ))
         (ascript-normal( frhs ft ))
         (set global-type-context (.bind( global-type-context (.key k) ft td )))
      ))
      ( _ () )
   ))
) Nil);

infer-global-context-2 := λ(: td AST). (: (
   (match td (
      ()
      ( (Glb( k (@( frhs (Abs( lhs (App( (Lit( ':_s _ )) (App( rhs (AType rhst) )) )) tlt )) )) )) (
      ))
      ( (Glb( k rhs )) (
         (infer-expr( (: None Maybe<TContext>) rhs Unscoped TAny Used ))
         (let rhst (normalize(typeof rhs)))
         (let kt (&&( rhst (t1 'GlobalVariable_s) )))
         (set global-type-context (.bind( global-type-context (.key k) kt td )))
         (mark-global-as-seen( (.key k) kt TAny ))
         (ascript-normal( td kt ))
         (maybe-specialize( 'mov_s (typeof-var-raw( rhs (: None Maybe<TContext>) 'mov_s )) (t3( 'Cons_s kt kt )) ))
      ))
      ( _ () )
   ))
) Nil);

