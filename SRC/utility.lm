
list-tail-order-to-head-order := λ(: s S). (: (tail(
   (let new SNil)
   (while (non-zero s) (match s (
      ()
      ( (SCons( l r )) (tail(
         (set new (SCons(
            (close r)
            (close new)
         )))
         (set s l)
      )))
   )))
   new
)) S);

is-suffix := λ(: base String)(: sfx String). (: (tail(
   (let r 0_u64)
   (while (head-string base) (tail(
      (if (==( base sfx )) (
         (set r 1_u64)
      ) ())
      (set base (tail-string base))
   )))
   r
)) U64);

remove-suffix := λ(: base String)(: sfx String). (: (tail(
   (let r SNil)
   (while (head-string base) (tail(
      (if (==( base sfx )) (
         (set base '0_s)
      ) (
         (set r (SCons(
            (close r)
            (close(SAtom(clone-rope(head-string base))))
         )))
      ))
      (set base (tail-string base))
   )))
   (clone-rope r)
)) String);

uuid-counter := 0_u64;
uuid := λ . (: (tail(
   (set uuid-counter (+( uuid-counter 1_u64 )))
   (clone-rope (SCons(
      (close(SAtom 'uuid__s))
      (close(SAtom(to-hex uuid-counter)))
   )))
)) String);

mangle-identifier := λ(: kt Type). (: (tail(
   (let r SNil)
   (match kt (
      ()
      ( TAny (tail(
         (let kr (mangle-identifier '?_s))
         (set r kr)
      )))
      ( (TVar v) (tail(
         (let kr (mangle-identifier v))
         (set r kr)
      )))
      ( (TGround( tv TypeEOF )) (tail(
         (let kr (mangle-identifier tv))
         (set r kr)
      )))
      ( (TGround( tv (TypeSeq( TypeEOF tv1 )) )) (tail(
         (let kr (mangle-identifier tv))
         (let kr1 (mangle-identifier tv1))
         (set r (SCons( (close kr) (close kr1) )))
      )))
      ( (TGround( tv (TypeSeq( (TypeSeq( TypeEOF tv1 )) tv2 )) )) (tail(
         (let kr (mangle-identifier tv))
         (let kr1 (mangle-identifier tv1))
         (let kr2 (mangle-identifier tv2))
         (set r (SCons( (close kr) (close(SCons( (close kr1) (close kr2) ))) )))
      )))
      ( (TAnd( tl tr )) (tail(
         (let kl (mangle-identifier tl))
         (let kr (mangle-identifier tr))
         (set r (SCons( (close kl) (close kr) )))
      )))
   ))
   r
)) S);

mangle-identifier := λ(: k String). (: (tail(
   (let cs SNil)
   (while (head-string k) (tail(
      (match (head-string k) (
         ()
         ( 33_u8 (set cs (SCons( (close cs) (close(SAtom( '_EX__s ))) ))))
         ( 36_u8 (set cs (SCons( (close cs) (close(SAtom( '_DL__s ))) ))))
         ( 37_u8 (set cs (SCons( (close cs) (close(SAtom( '_MD__s ))) ))))
         ( 38_u8 (set cs (SCons( (close cs) (close(SAtom( '_AM__s ))) ))))
         ( 42_u8 (set cs (SCons( (close cs) (close(SAtom( '_ML__s ))) ))))
         ( 43_u8 (set cs (SCons( (close cs) (close(SAtom( '_AD__s ))) ))))
         ( 45_u8 (set cs (SCons( (close cs) (close(SAtom( '_SB__s ))) ))))
         ( 46_u8 (set cs (SCons( (close cs) (close(SAtom( '_DT__s ))) ))))
         ( 47_u8 (set cs (SCons( (close cs) (close(SAtom( '_DV__s ))) ))))
         ( 58_u8 (set cs (SCons( (close cs) (close(SAtom( '_CL__s ))) ))))
         ( 59_u8 (set cs (SCons( (close cs) (close(SAtom( '_SC__s ))) ))))
         ( 60_u8 (set cs (SCons( (close cs) (close(SAtom( '_LT__s ))) ))))
         ( 61_u8 (set cs (SCons( (close cs) (close(SAtom( '_EQ__s ))) ))))
         ( 62_u8 (set cs (SCons( (close cs) (close(SAtom( '_GT__s ))) ))))
         ( 63_u8 (set cs (SCons( (close cs) (close(SAtom( '_QM__s ))) ))))
         ( 64_u8 (set cs (SCons( (close cs) (close(SAtom( '_AT__s ))) ))))
         ( 94_u8 (set cs (SCons( (close cs) (close(SAtom( '_HT__s ))) ))))
         ( 95_u8 (set cs (SCons( (close cs) (close(SAtom( '_US__s ))) ))))
         ( 124_u8 (set cs (SCons( (close cs) (close(SAtom( '_BR__s ))) ))))
         ( 126_u8 (set cs (SCons( (close cs) (close(SAtom( '_TL__s ))) ))))
         ( c (set cs (SCons( (close cs) (close(SAtom(clone-rope c))) ))))
      ))
      (set k (tail-string k))
   )))
   cs
)) S);

mangle-identifier := λ(: k String)(: kt Type). (: (tail(
   (let cs (mangle-identifier( k )))
   (set cs (SCons( (close cs) (close(SAtom( '_CL__s ))) )))
   (let kt2 (maybe-deref(without-representation kt)))
   (set cs (SCons( (close cs) (close(mangle-identifier kt2)) )))
   (clone-rope cs)
)) String);

escape-string := λ(: s String). (: (tail(
   (let e SNil)
   (while (head-string s) (
      (if (==( (head-string s) 92_u8 )) (tail(
         (set s (tail-string s))
         (match (head-string s) (
            ()
            ( 91_u8 (set e (SCons( (close e) (close(SAtom( (clone-rope 40_u8) ))) ))) )
            ( 92_u8 (set e (SCons( (close e) (close(SAtom( '\\_s ))) ))) )
            ( 93_u8 (set e (SCons( (close e) (close(SAtom( (clone-rope 41_u8) ))) ))) )
            ( 96_u8 (set e (SCons( (close e) (close(SAtom( (clone-rope 39_u8) ))) ))) ) 
            ( 110_u8 (set e (SCons( (close e) (close(SAtom( (clone-rope 10_u8) ))) ))) )
            ( 116_u8 (set e (SCons( (close e) (close(SAtom( (clone-rope 9_u8) ))) ))) )
            ( 115_u8 (set e (SCons( (close e) (close(SAtom( (clone-rope 32_u8) ))) ))) )
            ( _ () )
         ))
         (set s (tail-string s))
      )) (tail(
         (set e (SCons( (close e) (close(SAtom( (clone-rope(head-string s)) ))) )))
         (set s (tail-string s))
      )))
   ))
   (clone-rope e)
)) String);

escape-string := λ(: s S). (: (tail(
   (match s (
      ()
      ( (SAtom a) (set s (SAtom(escape-string a))) )
      ( (SCons( l r )) (set s (SCons(
         (close(escape-string l))
         (close(escape-string r))
      ))))
      ( _ () )
   ))
   s
)) S);

escape-literal := λ(: s String). (: (tail(
   (let cs SNil)
   (while (head-string s) (tail(
      (match (head-string s) (
         ()
         ( 34_u8 (set cs (SCons( (close cs) (close(SAtom '\\\\"_s)) ))))
         ( 92_u8 (
            (match (head-string(tail-string s)) (
               ()
               ( 58_u8 (tail(
                  (set s (tail-string s))
                  (set cs (SCons( (close cs) (close(SAtom '\:_s)) )))
               )))
               ( 91_u8 (tail(
                  (set s (tail-string s))
                  (set cs (SCons( (close cs) (close(SAtom '\[_s)) )))
               )))
               ( 92_u8 (tail(
                  (set s (tail-string s))
                  (set cs (SCons( (close cs) (close(SAtom '\\\\\\\\_s)) )))
               )))
               ( 93_u8 (tail(
                  (set s (tail-string s))
                  (set cs (SCons( (close cs) (close(SAtom '\]_s)) )))
               )))
               ( 96_u8 (tail(
                  (set s (tail-string s))
                  (set cs (SCons( (close cs) (close(SAtom '\`_s)) )))
               )))
               ( 108_u8 (tail(
                  (set s (tail-string s))
                  (set cs (SCons( (close cs) (close(SAtom '\l_s)) )))
               )))
               ( 110_u8 (tail(
                  (set s (tail-string s))
                  (set cs (SCons( (close cs) (close(SAtom '\\\\n_s)) )))
               )))
               ( 111_u8 (tail(
                  (set s (tail-string s))
                  (set cs (SCons( (close cs) (close(SAtom '\o_s)) )))
               )))
               ( 115_u8 (tail(
                  (set s (tail-string s))
                  (set cs (SCons( (close cs) (close(SAtom '\s_s)) )))
               )))
               ( 116_u8 (tail(
                  (set s (tail-string s))
                  (set cs (SCons( (close cs) (close(SAtom '\t_s)) )))
               )))
               ( _ (set cs (SCons( (close cs) (close(SAtom '\\\\_s)) ))) )
            ))
         ))
         ( 10_u8 (set cs (SCons( (close cs) (close(SAtom '\\n_s)) ))))
         ( c (set cs (SCons( (close cs) (close(SAtom(clone-rope c))) ))))
      ))
      (set s (tail-string s))
   )))
   (clone-rope cs)
)) String);

