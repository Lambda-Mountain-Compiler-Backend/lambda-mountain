
let can-unify(fpt: List<Type>, pt: List<Type>): U64 = (
   if fpt.length == pt.length {
      let ok = true;
      while ok && non-zero(fpt) {
         if not(can-unify(head(fpt), head(pt))) then (ok = false);
         fpt = tail(fpt); pt = tail(pt);
      };
      ok
   } else false
);

let can-unify(fpt: Type, pt: Type): U64 = (
   match (Tuple{fpt, pt}) {
      Tuple{ first:TAny{} } => true;
      Tuple{ first:TGround{tag:c"Any"} } => true;
      Tuple{ first:TVar{} } => true;
      Tuple{ first:TAnd{ lt1=left,lt2=right }, rt=second } => (
         can-unify(lt1,rt) && can-unify(lt2,rt)
      );
      Tuple{ lt=first, second:TAnd{ rt1=left,rt2=right } } => (
         can-unify(lt,rt1) || can-unify(lt,rt2)
      );

      # Ignore C Access Modifiers For Now
      Tuple{ first:TGround{tag:c"C", parameters:[TGround{tag:c"const"}..]} } => true;

      # Literal Constants
      Tuple{ first:TGround{tag:c"CONST"}, second:TGround{c=tag} } => (
         c.is-digit || c==c"CONST"
      );

      # Phi Types
      Tuple{
         first:TGround{tag:c"Phi", parameters:[TGround{to_phi=tag}.. TGround{from_phi=tag}..]},
         second:TGround{tag:c"Phi", parameters:[TGround{state_phi=tag}.. TGround{id_phi=tag}..]}
      } => from_phi == state_phi;

      # Varargs
      Tuple{
          first:TGround{tag:c"Cons", parameters:[
             TGround{tag:c"...", parameters:[lp1..]}..
             lpr..
          ]},
          second:TGround{tag:c"Cons", parameters:[rp1..rpr..]}
      } => (
         if can-unify(lp1,rp1) then can-unify(fpt,rpr) else can-unify(lpr,pt)
      );
      Tuple{
          first:TGround{tag:c"Cons", parameters:[
             TGround{tag:c"...", parameters:[lp1..]}..
             lpr..
          ]},
          second:rp1
      } => (
         if can-unify(lp1,rp1) then can-unify(lpr,t1(c"Nil")) else can-unify(lpr,rp1)
      );
      Tuple{
          first:TGround{tag:c"...", parameters:[lp1..]},
          second:TGround{tag:c"Cons", parameters:[rp1..rpr..]}
      } => (
         can-unify(lp1,rp1) && can-unify(fpt,rpr)
      );
      Tuple{
          first:TGround{tag:c"...", parameters:[lp1..]},
          second:TGround{tag:c"Nil", parameters:[]}
      } => true;
      Tuple{
          first:TGround{tag:c"...", parameters:[lp1..]},
          second:rp1
      } => can-unify(lp1,rp1);

      Tuple{
          first:TGround{tag:c"Arrow", parameters:[lrng.. ldom..]},
          second:TGround{tag:c"Arrow", parameters:[rrng.. rdom..]}
      } => can-unify(rdom, ldom) && can-unify(ldom, rdom);

      Tuple{
          first:TGround{ltn=tag, lps=parameters},
          second:TGround{rtn=tag, rps=parameters}
      } => ltn==rtn && can-unify(lps,rps);
      _ => false;
   }
);
