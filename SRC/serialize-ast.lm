
serialize-ast := λ(: t AST). (: (
   (match t (
      ()
      ( ASTEOF (print '\[\]_s) )
      ( ASTNil (print 'Nil_s) )
      ( (Meta _) (print 'Meta_s) )
      ( (Var( a _ )) (
         (print '\[Variable\s_s)
         (print a)
         (print '\]_s)
      ))
      ( (Lit( a _ )) (
         (print '\[Literal\s_s)
         (print a)
         (print '\]_s)
      ))
      ( (AType a) (serialize-ast a) )
      ( (Typedef( lhs rhs )) (
         (print '\[Type\s\[_s)
         (serialize-ast lhs)
         (print '\s_s)
         (serialize-ast rhs)
         (print '\]\]_s)
      ))
      ( (Glb( lhs rhs )) (
         (print '\[Global\s\[_s)
         (print lhs)
         (print '\s_s)
         (serialize-ast rhs)
         (print '\]\]_s)
      ))
      ( (App( lhs rhs )) (
         (print '\[App\s\[_s)
         (serialize-ast lhs)
         (print '\s_s)
         (serialize-ast rhs)
         (print '\]\]_s)
      ))
      ( (Abs( lhs rhs tlt )) (
         (print '\[Lambda\s\[_s)
         (serialize-ast lhs)
         (print '\s_s)
         (serialize-ast rhs)
         (print '\]\]_s)
      ))
      ( (Seq( ASTEOF r )) (
         (serialize-ast r)
         (print '\n_s)
      ))
      ( (Seq( l r )) (
         (serialize-ast l)
         (serialize-ast r)
         (print '\n_s)
      ))
   ))
) Nil);

serialize-ast := λ(: tt List<Type>). (: (match tt (
   ()
   ( LEOF () )
   ( (LCons( p1 LEOF )) (serialize-ast p1) )
   ( (LCons( p1 rst )) (
      (print '\[App\s\[_s)
      (serialize-ast rst)
      (print '\s_s)
      (serialize-ast p1)
      (print '\]\]_s)
   ))
)) Nil);

serialize-ast := λ(: tt Type). (: (match tt (
   ()
   ( TAny (print '\[Variable\s?\]_s) )
   ( (TVar( vn )) (
      (print '\[Variable\s_s)
      (print vn)
      (print '\]_s)
   ))
   ( (TAnd( lt rt )) (
      (print '\[App\s\[_s)
      (print '\[Literal\sAnd\]\s_s)
      (print '\[App\s\[_s)
      (serialize-ast lt)
      (print '\s_s)
      (serialize-ast rt)
      (print '\]\]_s)
      (print '\]\]_s)
   ))
   ( (TGround( tag LEOF )) (
      (print '\[Literal\s_s)
      (print tag)
      (print '\]_s)
   ))
   ( (TGround( tag ps )) (
      (print '\[App\s\[_s)
      (print '\[Literal\s_s)
      (print tag)
      (print '\]\s_s)
      (serialize-ast ps)
      (print '\]\]_s)
   ))
)) Nil);

