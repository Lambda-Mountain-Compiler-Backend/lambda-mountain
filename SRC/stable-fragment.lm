
print := λ(: x Fragment). (: (
   (match x (
      ()
      ( (Fragment( kvs offset xtt ctx )) (tail(
         (print 'Fragment\n_s)
         (print '\tOffset\s=\s_s)(print offset)(print '\n_s)
         (while (non-zero kvs) (match kvs (
            ()
            ( (FKVSeq( rst k v )) (tail(
               (print '\t_s)(print k)(print '\s=\s_s)(print v)(print '\n_s)
               (set kvs rst)
            )))
         )))
      )))
   ))
) Nil);

print := λ(: x FragmentList). (: (
   (match x (
      ()
      ( (FLSeq( rst f )) (tail(
         (print rst)
         (print f)
      )))
      ( _ () )
   ))
) Nil);

fragment::new := λ . (: (tail(
   (let r (Fragment(
      (close FKVEOF)
      0_i64
      TAny
      (close(fragment-context::new()))
   )))
   r
)) Fragment);

fragment::get := λ(: e Fragment)(: k String). (: (tail(
   (let r SNil)
   (match e (
      ()
      ( (Fragment( kvs offset ft ctx )) (
         (while (non-zero kvs) (match kvs (
            ()
            ( (FKVSeq( rst kvs-k kvs-v )) (
               (if (==( k kvs-k )) (tail(
                  (set r kvs-v)
                  (set kvs FKVEOF)
               )) (set kvs rst))
            ))
         )))
      ))
   ))
   r
)) S);

fragment::set := λ(: e Fragment)(: k String)(: v S). (: (tail(
   (match e (
      ()
      ( (Fragment( kvs offset ft ctx )) (
         (set e (Fragment(
            (close(FKVSeq( (close kvs) k v )))
            offset ft (close ctx)
         )))
      ))
   ))
   e
)) Fragment);
