
let .lookup(ctx: FContext, k: CString, kt: Type, sloc: AST): Fragment = (
   ctx.lookup( k, kt, sloc, true )
);

let .lookup-soft(ctx: FContext, k: CString, kt: Type, sloc: AST): Fragment = (
   ctx.lookup( k, kt, sloc, false )
);

# TODO: unify lookup and lookups logic, with common logical elements isolated and explanation of algorithm

let .lookup(ctx: FContext, k: CString, kt: Type, sloc: AST, hard: U64): Fragment = (
   let original-ctx = ctx;
   let found = TAny;
   let r = mk-fragment();
   k = find-alias(k, kt);
   if kt.is-arrow { kt = normalize(kt); };
   while non-zero(ctx) { match ctx {
      FCtxBind { remainder=remainder, ctx-k=k, ctx-kt=kt, ctx-kv=kv } => (
         if k==ctx-k {
            if kt==ctx-kt || can-unify(kt, ctx-kt) {
               r = ctx-kv;
               found = t1(c"GlobalVariable");
               ctx = FCtxEOF;
            } else {
               if ctx-kt.is-arrow {
                  let domaint = ctx-kt.domain;
                  let domaind = denormalize(ctx-kt.domain);
                  let ranget = ctx-kt.range;
                  if can-unify( domaint, kt ) {
                     if non-zero(found) {
                        if can-unify(found,domaind) {
                           r = ctx-kv;
                           found = domaind;
                        }
                     } else {
                        r = ctx-kv;
                        found = domaind;
                     }
                  };
                  ctx = remainder;
               } else {
                  r = ctx-kv;
                  found = t1(c"LocalVariable");
                  ctx = FCtxEOF;
               }
            }
         } else { ctx = remainder; }
      );
   }};
   if not(non-zero(found)) && hard {
      print("Context::lookup \{k} : "); print(kt); print("\nCandidates:\n");
      while non-zero(original-ctx) { match original-ctx {
         FCtxBind { remainder=remainder, ctx-k=k, ctx-kt=kt } => (
            if k==ctx-k { print("\{k} : "); print(kt); print("\n"); };
            original-ctx = remainder;
         );
      }};
      print("Context::lookup Could Not Find Symbol\n"); exit(1);
   };
   r
);
