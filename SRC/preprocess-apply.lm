
preprocess-apply := Î»(: program AST). (: (
   (let r program)
   (match program (
      ()
      ( (App( (App( (Var( 'macro::concat_s ctk )) (App( (Var( lk _ )) (Var( rk _ )) )) )) nt )) (
         (set r (App(
            (close(Var( (+( lk rk )) (unique ctk) )))
            (close(preprocess-apply( nt )))
         )))
      ))
      ( (App( (App( (Var( 'macro::concat_s ctk )) (App( (Var( lk _ )) (Lit( rk _ )) )) )) nt )) (
         (set r (App(
            (close(Var( (+( lk rk )) (unique ctk) )))
            (close(preprocess-apply( nt )))
         )))
      ))
      ( (App( (App( (Var( 'macro::concat_s ctk )) (App( (Lit( lk _ )) (Var( rk _ )) )) )) nt )) (
         (set r (App(
            (close(Var( (+( lk rk )) (unique ctk) )))
            (close(preprocess-apply( nt )))
         )))
      ))
      ( (App( (App( (Var( 'macro::concat_s ctk )) (App( (Lit( lk _ )) (Lit( rk _ )) )) )) nt )) (
         (set r (App(
            (close(Var( (+( lk rk )) (unique ctk) )))
            (close(preprocess-apply( nt )))
         )))
      ))
      ( (App( is-cons-1 (App( is-cons-2 (Lit( ':_s ctk )) (App( is-cons-3 t (AType tt) )) )) nt )) (
         (set r (App( is-cons-1
            (close(App( is-cons-2 (close(Lit( ':_s (unique ctk) ))) (close(App( is-cons-3 (close(preprocess-apply t)) (close(AType tt)) ))) )))
            (close(preprocess-apply( nt )))
         )))
      ))
      ( (App( is-cons-1 (App( is-cons-2 (Lit( ':_s ctk )) mvar )) (Lit( mtype mtk )) )) (
         (if is-cons-1
            (set r (App( is-cons-1 (close(App( is-cons-2 (close(Lit( ':_s ctk ))) (close(preprocess-apply mvar))  ))) (close(Lit( mtype mtk ))) )))
            (set r (App( (close(Lit( ':_s (unique ctk) ))) (close(App( (close(preprocess-apply mvar)) (close(AType(parse-type mtype))) ))) )))
         )
      ))
      ( (App( is-cons-1 (App( is-cons-2 (Lit( ':_s ctk )) mvar )) (Var( mtype mtk )) )) (
         (if is-cons-1
            (set r (App( is-cons-1 (close(App( is-cons-2 (close(Lit( ':_s ctk ))) (close(preprocess-apply mvar))  ))) (close(Lit( mtype mtk ))) )))
            (set r (App( (close(Lit( ':_s (unique ctk) ))) (close(App( (close(preprocess-apply mvar)) (close(AType(parse-type mtype))) ))) )))
         )
      ))
      ( (App( (App( (Var( 'as_s atk )) (App( t (AType tt) )) )) nt )) (
         (set r (App(
            (close(App( (close(Var( 'as_s (unique atk) ))) (close(App( (close(preprocess-apply t)) (close(AType tt)) ))) )))
            (close(preprocess-apply( nt )))
         )))
      ))
      ( (App( (App( (Var( 'as_s atk )) mvar )) (Lit( mtype _ )) )) (
         (set r (App( (close(Var( 'as_s (unique atk) ))) (close(App( (close(preprocess-apply mvar)) (close(AType(parse-type mtype))) ))) )))
      ))
      ( (App( (App( (Var( 'as_s atk )) mvar )) (Var( mtype _ )) )) (
         (set r (App( (close(Var( 'as_s (unique atk) ))) (close(App( (close(preprocess-apply mvar)) (close(AType(parse-type mtype))) ))) )))
      ))
      ( (App( (Var( 'sizeof_s stk )) (Var( mtype _ )) )) (
         (set r (App( (close(Var( 'sizeof_s (unique stk) ))) (close(AType(parse-type mtype))) )))
      ))
      ( (App( (Var( 'sizeof_s stk )) (Lit( mtype _ )) )) (
         (set r (App( (close(Var( 'sizeof_s (unique stk) ))) (close(AType(parse-type mtype))) )))
      ))
      ( (Lit( l ltk )) (
         (for-each ((Tuple( sfxs sfxtt )) in parse-suffixes) (
            (if (.has-suffix( l sfxs )) (
               (let lpfx (.remove-suffix( l sfxs )))
               (set r (App(
                  (close(Lit( ':_s (with-key( ltk ':_s )) )))
                  (close(App( (close(Lit( lpfx (with-key( ltk lpfx )) ))) (close(AType sfxtt)) )))
               )))
            ) ())
         ))
      ))
      ( (Var( l ltk )) (
         (for-each ((Tuple( sfxs sfxtt )) in parse-suffixes) (
            (if (.has-suffix( l sfxs )) (
               (let lpfx (.remove-suffix( l sfxs )))
               (set r (App(
                  (close(Lit( ':_s (with-key( ltk ':_s )) )))
                  (close(App( (close(Lit( lpfx (with-key( ltk lpfx )) ))) (close(AType sfxtt)) )))
               )))
            ) ())
         ))
      ))
      ( (App( is-cons (Var( vn vntk )) vt )) (
         if (is-macro-head( vn 1_u64 )) (
            (let applied (preprocess-apply-hard( vn 1_u64 program )))
            (set r applied)
         ) (
            (set r (App(
               is-cons
               (close(preprocess-apply(Var( vn (unique vntk) ))))
               (close(preprocess-apply vt))
            )))
         )
      ))
      ( (App( is-cons-1 (App( is-cons-2 (Var( vn vntk )) vt1 )) vt2 )) (
         if (is-macro-head( vn 2_u64 )) (
            (let applied (preprocess-apply-hard( vn 2_u64 program )))
            (set r applied)
         ) (
            (set r (App(
               is-cons-1
               (close(preprocess-apply(App(
                  is-cons-2
                  (close(Var( vn (unique vntk) )))
                  (close vt1)
               ))))
               (close(preprocess-apply vt2))
            )))
         )
      ))
      ( (Seq( seq )) (
         (set r ASTEOF)
         (for-each-v (s in seq) (
            (set r (+( r (preprocess-apply s) )))
         ))
      ))
      ( (App( is-cons al ar )) (set r (App(
         is-cons
         (close(preprocess-apply al))
         (close(preprocess-apply ar))
      ))))
      ( (Abs( al ar tlt )) (set r (Abs(
         (close(preprocess-apply al))
         (close(preprocess-apply ar))
         tlt
      ))))
      ( (Glb( k ar )) (set r (Glb(
         (unique k)
         (close(preprocess-apply ar))
      ))))
      ( u (set r u))
   ))
   r
) AST);

