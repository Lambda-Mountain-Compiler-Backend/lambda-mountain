
substitute := λ(: tctx Maybe<TContext>)(: tt List<Type>). (: (
   (match tt (
      ()
      ( LEOF () )
      ( (LCons( par rst )) (
         (set tt (cons(
            (substitute( tctx par ))
            (substitute( tctx rst ))
         )))
      ))
   ))
   tt
) List<Type>);

substitute := λ(: tctx Maybe<TContext>)(: tt Type). (: (
   (match tt (
      ()
      ( (TVar v) (
         (let found 0_u64)
         (for-each ( (Tuple( tk tv _ )) in
             (.get-or( tctx (: LEOF List<Tuple<String,Type,AST>>) ))
         ) (
            (if (&&( (not found) (==( tk v )) )) (
               (set tt tv)
               (set found 1_u64)
            ) ())
         ))
      ))
      ( (TGround( tag pars )) (
         (set tt (TGround(
            tag
            (close(substitute( tctx pars )))
         )))
      ))
      ( (TAnd( lt rt )) (
         (set tt (TAnd(
            (close(substitute( tctx lt )))
            (close(substitute( tctx rt )))
         )))
      ))
      ( _ () )
   ))
   tt
) Type);

