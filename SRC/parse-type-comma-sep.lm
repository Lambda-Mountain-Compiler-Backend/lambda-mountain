
parse-type-comma-sep := Î»(: tt String). (: (
   (let buff SNil)
   (let depth 0_u64)
   (let base (: LEOF List<Type>))
   (while (head-string tt) (
      (match (head-string tt) (
         ()
         ( 60_u8 (set depth (+( depth 1_u64 )) ))
         ( 62_u8 (set depth (-( depth 1_u64 )) ))
         ( 91_u8 (set depth (+( depth 1_u64 )) ))
         ( 93_u8 (set depth (-( depth 1_u64 )) ))
         ( _ () )
      ))
      (if (==( depth 0_u64 )) (
         (if (==( (head-string tt) 44_u8 )) (
            (set base (cons(
               (parse-type(clone-rope buff))
               base
            )))
            (set buff SNil)
         ) (
            (set buff (SCons(
               (close buff)
               (close (SAtom (clone-rope (head-string tt))))
            )))
         ))
      ) (
         (set buff (SCons(
            (close buff)
            (close (SAtom (clone-rope (head-string tt))))
         )))
      ))
      (set tt (tail-string tt))
   ))
   (set base (cons(
      (parse-type(clone-rope buff))
      base
   )))
   base
) List<Type>);
