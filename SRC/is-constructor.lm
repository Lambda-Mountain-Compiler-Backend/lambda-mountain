
is-constructor := λ(: tt Type). (: (
   (let r 0_u64)
   (match tt (
      ()
      ( (TAnd( t1 t2 )) (set r (||( (is-constructor t1) (is-constructor t2) ))) )
      ( (TGround( 'Constructor_s _ )) (set r 1_u64) )
      ( (TGround( 'Arrow_s _ )) (set r (is-constructor(p2 tt))) )
      ( (TGround( 'Cons_s _ )) (set r (is-constructor(p2 tt))) )
      ( _ () )
   ))
   r
) U64);

is-simple-constructor := λ(: tt Type). (: (
   (let r 0_u64)
   (match tt (
      ()
      ( (TAnd( t1 t2 )) (set r (||( (is-simple-constructor t1) (is-simple-constructor t2) ))) )
      ( (TGround( 'Constructor_s _ )) (set r 1_u64) )
      ( _ () )
   ))
   r
) U64);

is-tag := λ(: tt Type). (: (
   (let r 0_u64)
   (match tt (
      ()
      ( (TAnd( t1 t2 )) (set r (||( (is-tag t1) (is-tag t2) ))) )
      ( _ () )
   ))
   r
) U64);
