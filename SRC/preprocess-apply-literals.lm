


preprocess-apply-literals := Î»(: program AST). (: (
   (let r program)
   (match program (
      ()
      ( (App( is-cons-1 (App( is-cons-2 (Lit( ':_s ctk )) mvar )) (Lit( mtype mtk )) )) (
         (if is-cons-1
            (set r (App( is-cons-1 (close(App( is-cons-2 (close(Lit( ':_s ctk ))) (close(preprocess-apply-literals mvar)) ))) (close(Lit( mtype mtk ))) )))
            (set r (App( (close(Lit( ':_s (unique ctk) ))) (close(App( (close(preprocess-apply-literals mvar)) (close(AType(parse-type mtype))) ))) )))
         )
      ))
      ( (App( is-cons-1 (App( is-cons-2 (Lit( ':_s ctk )) mvar )) (Var( mtype mtk )) )) (
         (if is-cons-1
            (set r (App( is-cons-1 (close(App( is-cons-2 (close(Lit( ':_s ctk ))) (close(preprocess-apply-literals mvar)) ))) (close(Var( mtype mtk ))) )))
            (set r (App( (close(Lit( ':_s (unique ctk) ))) (close(App( (close(preprocess-apply-literals mvar)) (close(AType(parse-type mtype))) ))) )))
         )
      ))
      ( (Lit( l ltk )) (
         (if (.has-suffix( l '_t_s )) (
            (let lpfx (.remove-suffix( l '_t_s )))
            (set r (App(
               (close(Lit( 'Token_s (with-key( ltk 'Token_s )) )))
               (close(App(
                  (close(App(
                     (close(App(
                        (close(Lit( ':_s (with-key( ltk ':_s )) )))
                        (close(App( (close(Lit( lpfx (with-key( ltk lpfx )) ))) (close(AType(parse-type 'Literal+Constant+String_s))) )))
                     )))
                     (close(Var( '__s (with-key( ltk '__s )) )))
                  )))
                  (close(Var( '__s (with-key( ltk '__s )) )))
               )))
            )))
         ) ())
      ))
      ( (Var( l ltk )) (
         (if (.has-suffix( l '_t_s )) (
            (let lpfx (.remove-suffix( l '_t_s )))
            (set r (App(
               (close(Lit( 'Token_s (with-key( ltk 'Token_s )) )))
               (close(App(
                  (close(App(
                     (close(Var( lpfx (with-key( ltk lpfx )) )))
                     (close(Var( '__s (with-key( ltk '__s )) )))
                  )))
                  (close(Var( '__s (with-key( ltk '__s )) )))
               )))
            )))
         ) ())
      ))
      ( (App( is-cons t1 t2 )) (
         (set r (App(
            is-cons
            (close(preprocess-apply-literals t1))
            (close(preprocess-apply-literals t2))
         )))
      ))
      ( (Seq( seqs )) (
         (let ret ASTEOF)
         (for-each-v (p in seqs) (
            (set ret (+( ret (preprocess-apply-literals p) )))
         ))
         ret
      ))
      ( (Abs( al ar tlt )) (set r (Abs(
         (close(preprocess-apply-literals al))
         (close(preprocess-apply-literals ar))
         tlt
      ))))
      ( (Glb( k ar )) (set r (Glb(
         (unique k)
         (close(preprocess-apply-literals ar))
      ))))
      ( u (set r u))
   ))
   r
) AST);

