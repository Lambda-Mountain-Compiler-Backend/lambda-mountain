
index-typedefs := 位(: program AST). (: (
   (while (non-zero program) (match program (
      ()
      ( (Seq( rst (ASTType( lhs rhs )) )) (tail(
         (index-typedefs( rhs 0_u64 ))
         (set program rst)
      )))
      ( (Seq( rst _ )) (
         (set program rst)
      ))
      ( _ (set program ASTEOF) )
   )))
) Nil);

index-typedefs := 位(: def AST)(: index U64) . (: (
   (match def (
      ()
      ( (App( (App( tds (Var '|_s) )) (Lit tag) )) (tail(
         (index-index-of-tag( tag index ))
         (index-typedefs( tds (+( index 1_u64 )) ))
      )))
      ( (App( (App( tds (Var '|_s) )) (App( (Lit tag) _ )) )) (tail(
         (index-index-of-tag( tag index ))
         (index-typedefs( tds (+( index 1_u64 )) ))
      )))
      ( (Lit tag) (
         (index-index-of-tag( tag index ))
      ))
      ( (App( (Lit tag) _ )) (
         (index-index-of-tag( tag index ))
      ))
      ( ASTEOF () )
      ( _ (exit-error( 'Invalid\sTypedef_s def )) )
   ))
) Nil);

preprocess := 位. (: (tail(
   (index-typedefs ast-parsed-program)
   (set ast-parsed-program (preprocess-apply ast-parsed-program))
)) Nil);

union := 位(: l Context)(: r Context). (: (tail(
   (let return l)
   (if (not(non-zero r)) (set return CtxEOF) ())
   (if (non-zero return) (
      (match r (
         ()
         ( (CtxBind( rst k v )) (
            (set return (CtxBind(
               (close(union( l rst ))) k v
            )))
         ))
         ( _ (set r CtxEOF) )
      ))
   ) ())
   return
)) Context);
