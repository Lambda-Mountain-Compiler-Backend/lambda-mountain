
doc-render := λ. (: (
   (let doc SNil)
   (set doc (+( doc (SAtom '\nimport\sdocs/ubuntu-docs.lm\:\n\n_s) )))
   (set doc (+( doc (SAtom '\[docs-html\[\n_s) )))
   (set doc (+( doc (SAtom '\s\s\s\`Documentation:\\s_s) )))
   (set doc (+( doc (SAtom config-doby-input) )))
   (set doc (+( doc (SAtom '_s\n_s) )))
   (set doc (+( doc (SAtom '\s\s\s\[docs-header\[\]\]\n_s) )))
   (set doc (+( doc (SAtom '\s\s\s\[docs-sidebar\[\]\]\n_s) )))
   (set doc (+( doc (SAtom '\s\s\s\[docs-title\s\`_s) )))
   (set doc (+( doc (SAtom config-doby-input) )))
   (set doc (+( doc (SAtom '\\sDocumentation_s\]\n_s) )))

   (set doc (+( doc (SAtom '\s\s\s\[as\[\n_s) )))
   (set doc (+( doc (SAtom '\s\s\s\s\s\s\[main\[\s\[class\s\`l-docs__main_s\]\n_s) )))
   (set doc (+( doc (SAtom '\s\s\s\s\s\s\s\s\s\[div\[\s\[class\s\`row_s\]\n_s) )))
   (set doc (+( doc (SAtom '\s\s\s\s\s\s\s\s\s\s\s\s\[div\[\s\[class\s\`col-12_s\]\n_s) )))

   (set doc (+( doc (SAtom '\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\[h2\[\s\[text\s\`Bound\\sSymbols_s\]\s\]\]\n_s) )))

   (set doc (+( doc (doc-bound-symbols()) )))

   (set doc (+( doc (SAtom '\s\s\s\s\s\s\s\s\s\s\s\s\]\]\n_s) )))
   (set doc (+( doc (SAtom '\s\s\s\s\s\s\s\s\s\]\]\n_s) )))
   (set doc (+( doc (SAtom '\s\s\s\s\s\s\]\]\n_s) )))
   (set doc (+( doc (SAtom '\s\s\s\]\sDocsContent+HTMLElement\]\n_s) )))

   (set doc (+( doc (SAtom '\s\s\s\[docs-meta\[\]\]\n_s) )))
   (set doc (+( doc (SAtom '\s\s\s\[docs-footer\[\]\]\n_s) )))
   (set doc (+( doc (SAtom '\]\]\n_s) )))
   
   (clone-rope doc)
) String);

doc-bound-symbols := λ. (: (
   (let doc SNil)
   (let program ast-parsed-program)
   (while (non-zero program) (match program (
      ()
      ( (Seq( (Seq( rst (Meta m) )) f )) (
         (set doc (+( doc (doc-symbol( m f )) )))
         (set program rst)
      ))
      ( (Seq( rst _ )) (
         (set program rst)
      ))
   )))
   doc
) S);

doc-symbol := λ(: meta AST)(: binding AST). (: (
   (let doc SNil)
   (match binding (
      ()
      ( (Frg( k (Abs( lhs rhs )) kt )) (
         (print 'TODO\sdoc\s_s)(print k)(print '\s:=\s_s)(print lhs)(print '\n_s)
         (set doc (+( doc (doc-meta meta) )))
      ))
      ( _ (
         (print 'Unknown\sSymbol\sBinding\sin\sdoc-symbol:\s_s)
         (print binding)
         (exit 1_u64)
      ))
   ))
   doc
) S);

doc-meta := λ(: meta AST). (: (
   (let doc SNil)
   (match meta (
      ()
      ( (App( (Var m-key_t) m-item )) (
         (set doc (doc-meta-item( m-key m-item )))
      ))
      ( (App( m-rst (App( (Var m-key_t) m-item )) )) (
         (set doc (+(
            (doc-meta( m-rst ))
            (doc-meta-item( m-key m-item ))
         )))
      ))
   ))
   doc
) S);

doc-meta-item := λ(: m-key String)(: m-item AST). (: (
   (let doc SNil)
   (print 'doc-meta-item\s_s)(print m-key)(print m-item)(print '\n_s)
   doc
) S);
