
main := (
   (local mode)
   (= mode Options)
   (local inputs)
   (= inputs ())
   (foreach-atom (tail argv) (match $_ (
      ()
      (--parse (= mode Parse))
      (() ())
      (fp (= inputs (fp inputs)))
   )))
   (match mode (
      ()
      (Options (print-s (TODO list options)))
      (Parse (foreach-atom inputs (
         if $_ (print-s (parse-file $_)) ()
      )))
   ))
);

parse-file := λpath. (
   parse-program (load-file path)
);

parse-program := λtext. (tail(
   (print-s (PARSE_PROGRAM text))
   (local program)
   (= program ())
   (local buffer)
   (= buffer ())
   (foreach-char text (match $_ (
      ()

#     These characters are special characters
#     They are never allowed in escaped strings etc.
      (\o (print-s (OCTOTHORPE)))
      (\[ (print-s (OPEN PARENS)))
      (\] (print-s (CLOSE PARENS)))
      (\n (if buffer (
         (= program (program (clone-rope buffer)))
         (= buffer ())
      ) ()))
      (\t (if buffer (
         (= program (program (clone-rope buffer)))
         (= buffer ())
      ) ()))
      (\s (if buffer (
         (= program (program (clone-rope buffer)))
         (= buffer ())
      ) ()))

#     These characters are special characters
#     They are permitted as parts of literals in context-sensitive ways
#     λ LAMBDA
#     . DOT
#     : COLON
#     = EQUAL

      (c (
         (print-s c)
         (= buffer (
            buffer (clone-rope c)
         ))
         (print-d buffer)
      ))
   )))
   program
));


