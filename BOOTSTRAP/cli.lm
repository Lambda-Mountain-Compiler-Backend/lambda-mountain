
main := (
   (local mode)
   (set mode Options)
   (local inputs)
   (set inputs ())
   (foreach-atom (tail argv) (match $_ (
      ()
      (--parse (set mode Parse))
      (--parse-expression (set mode ParseExpression))
      (--tokenize (set mode Tokenize))
      (() ())
      (fp (set inputs (fp inputs)))
   )))
   (match mode (
      ()
      (Options (print-s (TODO list options)))
      (Parse (foreach-atom inputs (
         if $_ (print-s (parse-program (tokenize (load-file $_)))) ()
      )))
      (ParseExpression (foreach-atom inputs (
         if $_ (print-s (parse-expression (tokenize (load-file $_)))) ()
      )))
      (Tokenize (foreach-atom inputs (
         if $_ (print-s (tokenize (load-file $_))) ()
      )))
   ))
);

tokenize-file := λpath. (
   tokenize (load-file path)
);

parse-expression := λtoks. (tail(
   (local e)
   (set e ())
   (foreach-atom toks (match $_ (
      ()
      (() ())
      (a (
         (print-s a)
         (print-s (is_variable a))
         if (is_variable a)
         (set e (Variable a))
         (set e (Literal a))
      ))
   )))
   e
));
parse-program := λtoks. toks;

tokenize := λtext. (tail(
   (local program)
   (set program ())
   (local buffer)
   (set buffer ())
   (local in_comment)
   (set in_comment ())
   (foreach-char text (match $_ (
      ()

#     These characters are special characters
#     They are removed during tokenization
      (\o (
         (if buffer (
            (set program (program (clone-rope buffer)))
            (set buffer ())
         ) ())
         (set in_comment True)
      ))
      (\n (
         (if buffer (
            (set program (program (clone-rope buffer)))
            (set buffer ())
         ) ())
         (set in_comment ())
      ))
      (\s (
         (if buffer (
            (set program (program (clone-rope buffer)))
            (set buffer ())
         ) ())
      ))
      (\t (if buffer (
         (set program (program (clone-rope buffer)))
         (set buffer ())
      ) ()))

#     These characters are special characters
#     They are isolated during tokenization
      (\[ (if in_comment () (
         (if buffer (
            (set program (program (clone-rope buffer)))
            (set buffer ())
         ) ())
         (set program (program \[))
      )))
      (\] (if in_comment () (
         (if buffer (
            (set program (program (clone-rope buffer)))
            (set buffer ())
         ) ())
         (set program (program \]))
      )))
      (' (if in_comment () (
         (if buffer (
            (set program (program (clone-rope buffer)))
            (set buffer ())
         ) ())
         (set program (program '))
      )))
      (\: (if in_comment () (
         (if buffer (
            (set program (program (clone-rope buffer)))
            (set buffer ())
         ) ())
         (set program (program \:))
      )))
      (': (if in_comment () (
         (if buffer (
            (set program (program (clone-rope buffer)))
            (set buffer ())
         ) ())
         (set program (program ':))
      )))
      (= (if in_comment () (
         (if buffer (
            (set program (program (clone-rope buffer)))
            (set buffer ())
         ) ())
         (set program (program =))
      )))
      (. (if in_comment () (
         (if buffer (
            (set program (program (clone-rope buffer)))
            (set buffer ())
         ) ())
         (set program (program .))
      )))

      (c (if in_comment () (
         (set buffer (
            buffer (clone-rope c)
         ))
         (if (eq(\l (clone-rope buffer))) (
            (set program (program (clone-rope buffer)))
            (set buffer ())
         ) ())
      )))
   )))
   (if buffer (
      (set program (program (clone-rope buffer)))
   ) ())
   program
));

is_variable := λv. (tail(
   (local is_variable)
   (set is_variable ())
   (local passed_char)
   (set passed_char ())
   (foreach-char v (if passed_char () (match $_ (
      ()
      ('$ ( (set is_variable True) (set passed_char True) ))
      ('_ ( (set is_variable True) (set passed_char True) ))
      ('a ( (set is_variable True) (set passed_char True) ))
      ('b ( (set is_variable True) (set passed_char True) ))
      ('c ( (set is_variable True) (set passed_char True) ))
      ('d ( (set is_variable True) (set passed_char True) ))
      ('e ( (set is_variable True) (set passed_char True) ))
      ('f ( (set is_variable True) (set passed_char True) ))
      ('g ( (set is_variable True) (set passed_char True) ))
      ('h ( (set is_variable True) (set passed_char True) ))
      ('i ( (set is_variable True) (set passed_char True) ))
      ('j ( (set is_variable True) (set passed_char True) ))
      ('k ( (set is_variable True) (set passed_char True) ))
      ('l ( (set is_variable True) (set passed_char True) ))
      ('m ( (set is_variable True) (set passed_char True) ))
      ('n ( (set is_variable True) (set passed_char True) ))
      ('o ( (set is_variable True) (set passed_char True) ))
      ('p ( (set is_variable True) (set passed_char True) ))
      ('q ( (set is_variable True) (set passed_char True) ))
      ('r ( (set is_variable True) (set passed_char True) ))
      ('s ( (set is_variable True) (set passed_char True) ))
      ('t ( (set is_variable True) (set passed_char True) ))
      ('u ( (set is_variable True) (set passed_char True) ))
      ('v ( (set is_variable True) (set passed_char True) ))
      ('w ( (set is_variable True) (set passed_char True) ))
      ('x ( (set is_variable True) (set passed_char True) ))
      ('y ( (set is_variable True) (set passed_char True) ))
      ('z ( (set is_variable True) (set passed_char True) ))
      (_ (set passed_char True))
   ))))
   is_variable
));
