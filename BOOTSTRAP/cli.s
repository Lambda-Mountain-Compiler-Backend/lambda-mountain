.global _start
.text
_start:
	mov %rsp,%rbp
	mov $malloc_SB_block_SB_head_CL_U64, %r15
	movq $0, 0(%r15)
	mov $malloc_SB_block_SB_tail_CL_U64, %r15
	movq $0, 0(%r15)
	mov $malloc_SB_first_SB_free_CL_U64, %r15
	movq $0, 0(%r15)
	mov $malloc_SB_page_SB_tail_CL_U64, %r15
	movq $0, 0(%r15)
	mov $malloc_SB_large_SB_size_CL_U64, %r15
	movq $1024, 0(%r15)
	mov $point_SB_of_SB_interest_CL_U64, %r15
	movq $0, 0(%r15)
	mov $rc_SB_magic_SB_number_CL_U64, %r15
	movq $423809104, 0(%r15)
	pushq $0
	pushq $0
	pushq $3
	movq $assemble_SB_header_SB_section_CL_SS, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	pushq $0
	pushq $0
	pushq $3
	movq $assemble_SB_text_SB_section_CL_SS, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	pushq $0
	pushq $0
	pushq $3
	movq $assemble_SB_init_SB_section_CL_SS, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	pushq $0
	pushq $0
	pushq $3
	movq $assemble_SB_data_SB_section_CL_SS, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	pushq $0
	pushq $0
	pushq $3
	movq $assemble_SB_profile_SB_onexit_CL_SS, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	pushq $0
	pushq $0
	pushq $3
	movq $assemble_SB_global_SB_initializer_SB_section_CL_SS, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	mov $assemble_SB_final_CL_String, %r15
	movq $uuid_00000000000daee6, 0(%r15)
	mov $assemble_SB_argv_SB_referenced_CL_U8, %r15
	movb $0, 0(%r15)
	mov $main_SB_with_SB_argv_CL_U8, %r15
	movb $0, 0(%r15)
	mov $main_SB_with_CL_U8, %r15
	movb $0, 0(%r15)
	mov $config_SB_platform_SB_prefix_CL_String, %r15
	movq $uuid_00000000000daf3b, 0(%r15)
	mov $config_SB_profile_SB_invocations_CL_U8, %r15
	movb $0, 0(%r15)
	mov $config_SB_strict_CL_U8, %r15
	movb $1, 0(%r15)
	mov $config_SB_preprocess_CL_U8, %r15
	movb $1, 0(%r15)
	mov $config_SB_target_CL_String, %r15
	movq $uuid_00000000000daee6, 0(%r15)
	pushq $2
	movq $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %R15
	popq 0(%R15)
	pushq $0
	movq $config_SB_mode_CL_CompileModeCompileMode, %R15
	popq 0(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $preprocess_SB_macros_CL_MacroListMacroList, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	popq 80(%R15)
	popq 88(%R15)
	popq 96(%R15)
	popq 104(%R15)
	popq 112(%R15)
	popq 120(%R15)
	popq 128(%R15)
	popq 136(%R15)
	popq 144(%R15)
	popq 152(%R15)
	popq 160(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	movq $ast_SB_parsed_SB_program_CL_ASTAST, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	movq $global_SB_type_SB_context_CL_TContextTContext, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	popq 80(%R15)
	popq 88(%R15)
	popq 96(%R15)
	popq 104(%R15)
	popq 112(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $global_SB_ctx_CL_FContextFContext, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	popq 80(%R15)
	popq 88(%R15)
	popq 96(%R15)
	popq 104(%R15)
	popq 112(%R15)
	popq 120(%R15)
	popq 128(%R15)
	popq 136(%R15)
	popq 144(%R15)
	popq 152(%R15)
	popq 160(%R15)
	popq 168(%R15)
	popq 176(%R15)
	popq 184(%R15)
	popq 192(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $parse_SB_suffixes_CL_SfxListSfxList, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecialize, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	popq 80(%R15)
	popq 88(%R15)
	popq 96(%R15)
	popq 104(%R15)
	popq 112(%R15)
	popq 120(%R15)
	popq 128(%R15)
	popq 136(%R15)
	popq 144(%R15)
	popq 152(%R15)
	popq 160(%R15)
	popq 168(%R15)
	popq 176(%R15)
	popq 184(%R15)
	popq 192(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $concrete_SB_type_SB_instances_SB_index_CL_HashtableEqListTypeTupleU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $type_SB_index_CL_HashtableIsTypeAST, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $alias_SB_index_CL_ListTupleTypeTupleStringStringListTupleTypeTupleStringString, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $class_SB_exists_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $parameter_SB_is_SB_flat_SB_index_CL_HashtableEqU64TupleU64TupleU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $is_SB_special_SB_index_CL_HashtableEqU64TupleTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $lone_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $tag_SB_is_SB_fragment_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $global_SB_symbol_SB_registry_CL_HashtableEqU64TupleTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $class_SB_to_SB_only_SB_child_CL_HashtableEqStringString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $tag_SB_to_SB_index_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov $unknown_SB_index_SB_of_SB_tag_CL_U64, %r15
	movq $99999, 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	movq $class_SB_to_SB_size_SB_index_CL_BTreeEqU64StringBTreeEqU64String, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $tag_SB_to_SB_class_SB_index_CL_HashtableEqTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $class_SB_to_SB_yes_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $tag_SB_to_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $type_SB_constructors_SB_index_CL_HashtableEqTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $type_SB_complex_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov $types_SB_have_SB_changed_CL_U8, %r15
	movb $1, 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $index_SB_c_SB_type_SB_ordinal_CL_HashtableEqStringType, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $continue_SB_compile_SB_c_SB_typedefs_SB_concrete_CL_ListTupleASTTupleTypeTContextListTupleASTTupleTypeTContext, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	popq 80(%R15)
	popq 88(%R15)
	popq 96(%R15)
	popq 104(%R15)
	popq 112(%R15)
	popq 120(%R15)
	popq 128(%R15)
	popq 136(%R15)
	popq 144(%R15)
	popq 152(%R15)
	popq 160(%R15)
	popq 168(%R15)
	popq 176(%R15)
	popq 184(%R15)
	popq 192(%R15)
	popq 200(%R15)
	popq 208(%R15)
	popq 216(%R15)
	popq 224(%R15)
	popq 232(%R15)
	popq 240(%R15)
	mov $continue_SB_compile_SB_c_SB_typedefs_SB_count_CL_U64, %r15
	movq $0, 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $is_SB_cstruct_SB_hard_SB_compiled_SB_index_CL_HashtableEqU64Type, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $1
	movq $already_SB_tokenized_CL_ListStringListString, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $is_SB_lm_SB_struct_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov $uuid_SB_counter_CL_U64, %r15
	movq $0, 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $cstring_SB_cache_CL_StringStringListStringStringList, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	mov %rbp,%rsp
	popq %r8
	movq %rsp, %r9
	push %rbp
	mov %rsp, %rbp
	pushq %r8
	pushq %r9
	call main
	mov %rbp, %rsp
	pop %rbp
	mov $60, %rax
	mov $0, %rdi
	syscall
_EQ__EQ__CL_ArrowU64ConsStringString:
	pushq $0
	pushq $0
	pushq $0
	mov -8(%rbp), %R8
	mov -16(%rbp), %R9
	cmp %R8,%R9
	je uuid_00000000000dad8c
	cmp $0,%R8
	je uuid_00000000000dad8d
	cmp $0,%R9
	je uuid_00000000000dad8d
uuid_00000000000dad8b:
	mov %R8, %r14
	movb 0(%r14), %r15b
	movb %r15b, -32(%rbp)
	mov %R9, %r14
	movb 0(%r14), %r15b
	movb %r15b, -40(%rbp)
	mov -32(%RBP), %AL
	mov -40(%RBP), %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	movq %RAX, -48(%rbp)
	mov -48(%rbp), %R10
	cmp $0,%R10
	je uuid_00000000000dad8d
	mov -32(%RBP), %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	movq %RAX, -48(%rbp)
	mov -48(%rbp), %R10
	cmp $0,%R10
	jne uuid_00000000000dad8c
	inc %R8
	inc %R9
	jmp uuid_00000000000dad8b
uuid_00000000000dad8c:
	mov $1, %RAX
	jmp uuid_00000000000dad8e
uuid_00000000000dad8d:
	mov $0, %RAX
	jmp uuid_00000000000dad8e
uuid_00000000000dad8e:
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
_EX__EQ__CL_ArrowU64ConsStringString:
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
_AD__CL_ArrowSConsSS:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dad92
	jmp uuid_00000000000dad94
uuid_00000000000dad92:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dad8f
	movq -48(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -40(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -32(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dad91
uuid_00000000000dad8f:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dad91:
	mov -72(%RBP),%RSP
	add $-72, %RSP
uuid_00000000000dad94:
	mov -64(%RBP),%RSP
	add $-72, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
deep_SB_hash_CL_ArrowU64U64:
#call function hash : Arrow<Sized<8>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call hash_CL_ArrowU64Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
non_SB_zero_CL_ArrowU64S:
	pushq $1
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dad9a
	push %RBP
	jmp uuid_00000000000dad97
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dad96
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dad99
uuid_00000000000dad97:
uuid_00000000000dad99:
	mov -104(%RBP),%RSP
	add $-104, %RSP
	jmp uuid_00000000000dad9c
uuid_00000000000dad9a:
	movq $0, -40(%rbp)
uuid_00000000000dad9c:
	mov -72(%RBP),%RSP
	add $-96, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
non_SB_zero_CL_ArrowU64String:
	pushq $0
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000dad9d
	jmp uuid_00000000000dad9f
uuid_00000000000dad9d:
	movq $1, -24(%rbp)
uuid_00000000000dad9f:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_EQ__EQ__CL_ArrowU64ConsSS:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dada6
	jmp uuid_00000000000dada8
uuid_00000000000dada6:
	push %RBP
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dada3
	jmp uuid_00000000000dada5
uuid_00000000000dada3:
	push %RBP
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dada0
	jmp uuid_00000000000dada2
uuid_00000000000dada0:
	movb $1, -192(%rbp)
uuid_00000000000dada2:
	mov -240(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dada5:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dada8:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae04
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dadbb
	jmp uuid_00000000000dadbd
uuid_00000000000dadbb:
	push %RBP
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dadac
	jmp uuid_00000000000dadae
uuid_00000000000dadac:
	push %RBP
	mov -368(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dada9
	jmp uuid_00000000000dadab
uuid_00000000000dada9:
	movb $1, -384(%rbp)
uuid_00000000000dadab:
	mov -400(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000dadae:
	mov -392(%RBP),%RSP
	add $-408, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dadb8
	jmp uuid_00000000000dadba
uuid_00000000000dadb8:
	push %RBP
	pushq -280(%RBP)
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq $0
	push %RBP
	mov -440(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dadb2
	jmp uuid_00000000000dadb4
uuid_00000000000dadb2:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dadaf
	jmp uuid_00000000000dadb1
uuid_00000000000dadaf:
	movb $1, -448(%rbp)
uuid_00000000000dadb1:
	mov -464(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000dadb4:
	mov -456(%RBP),%RSP
	add $-472, %RSP
	mov -448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dadb5
	jmp uuid_00000000000dadb7
uuid_00000000000dadb5:
	movb $1, -336(%rbp)
uuid_00000000000dadb7:
	mov -416(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000dadba:
	mov -352(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000dadbd:
	mov -344(%RBP),%RSP
	add $-472, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae01
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dadd6
	jmp uuid_00000000000dadd8
uuid_00000000000dadd6:
	push %RBP
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq $0
	push %RBP
	mov -584(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dadc4
	jmp uuid_00000000000dadc6
uuid_00000000000dadc4:
	push %RBP
	mov -576(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dadc1
	jmp uuid_00000000000dadc3
uuid_00000000000dadc1:
	push %RBP
	mov -568(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dadbe
	jmp uuid_00000000000dadc0
uuid_00000000000dadbe:
	movb $1, -592(%rbp)
uuid_00000000000dadc0:
	mov -640(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000dadc3:
	mov -608(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000dadc6:
	mov -600(%RBP),%RSP
	add $-664, %RSP
	mov -592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dadd3
	jmp uuid_00000000000dadd5
uuid_00000000000dadd3:
	push %RBP
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dadcd
	jmp uuid_00000000000dadcf
uuid_00000000000dadcd:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dadca
	jmp uuid_00000000000dadcc
uuid_00000000000dadca:
	push %RBP
	mov -680(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dadc7
	jmp uuid_00000000000dadc9
uuid_00000000000dadc7:
	movb $1, -704(%rbp)
uuid_00000000000dadc9:
	mov -752(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000dadcc:
	mov -720(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000dadcf:
	mov -712(%RBP),%RSP
	add $-776, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dadd0
	jmp uuid_00000000000dadd2
uuid_00000000000dadd0:
	movb $1, -544(%rbp)
uuid_00000000000dadd2:
	mov -672(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000dadd5:
	mov -560(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000dadd8:
	mov -552(%RBP),%RSP
	add $-776, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dadfe
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -840(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dadf1
	jmp uuid_00000000000dadf3
uuid_00000000000dadf1:
	push %RBP
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq $0
	push %RBP
	mov -888(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dade2
	jmp uuid_00000000000dade4
uuid_00000000000dade2:
	push %RBP
	mov -880(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000daddf
	jmp uuid_00000000000dade1
uuid_00000000000daddf:
	movb $1, -896(%rbp)
uuid_00000000000dade1:
	mov -912(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000dade4:
	mov -904(%RBP),%RSP
	add $-920, %RSP
	mov -896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dadee
	jmp uuid_00000000000dadf0
uuid_00000000000dadee:
	push %RBP
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq $0
	push %RBP
	mov -952(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dade8
	jmp uuid_00000000000dadea
uuid_00000000000dade8:
	push %RBP
	mov -944(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dade5
	jmp uuid_00000000000dade7
uuid_00000000000dade5:
	movb $1, -960(%rbp)
uuid_00000000000dade7:
	mov -976(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000dadea:
	mov -968(%RBP),%RSP
	add $-984, %RSP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dadeb
	jmp uuid_00000000000daded
uuid_00000000000dadeb:
	movb $1, -848(%rbp)
uuid_00000000000daded:
	mov -928(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000dadf0:
	mov -864(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000dadf3:
	mov -856(%RBP),%RSP
	add $-984, %RSP
	mov -848(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dadfb
	push %RBP
	jmp uuid_00000000000dadf8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dadf7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dadfa
uuid_00000000000dadf8:
uuid_00000000000dadfa:
	mov -992(%RBP),%RSP
	add $-992, %RSP
	jmp uuid_00000000000dadfd
uuid_00000000000dadfb:
	push %RBP
	mov -984(%RBP), %RAX
	mov -920(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dadf4
	jmp uuid_00000000000dadf6
uuid_00000000000dadf4:
	movq $1, -64(%rbp)
uuid_00000000000dadf6:
	mov -992(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000dadfd:
	mov -784(%RBP),%RSP
	add $-992, %RSP
	jmp uuid_00000000000dae00
uuid_00000000000dadfe:
	push %RBP
#call function == : Arrow<Cons<S,S>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000daddc
	jmp uuid_00000000000dadde
uuid_00000000000daddc:
	push %RBP
#call function == : Arrow<Cons<S,S>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dadd9
	jmp uuid_00000000000daddb
uuid_00000000000dadd9:
	movq $1, -64(%rbp)
uuid_00000000000daddb:
	mov -792(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000dadde:
	mov -784(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000dae00:
	mov -480(%RBP),%RSP
	add $-792, %RSP
	jmp uuid_00000000000dae03
uuid_00000000000dae01:
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -408(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000dae03:
	mov -272(%RBP),%RSP
	add $-472, %RSP
	jmp uuid_00000000000dae06
uuid_00000000000dae04:
	movq $1, -64(%rbp)
uuid_00000000000dae06:
	mov -128(%RBP),%RSP
	add $-264, %RSP
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
_EX__EQ__CL_ArrowU64ConsSS:
#call function == : Arrow<Cons<S,S>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
print_CL_ArrowNilS:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dae2c
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dae0b
	jmp uuid_00000000000dae0d
uuid_00000000000dae0b:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dae08
	jmp uuid_00000000000dae0a
uuid_00000000000dae08:
	movb $1, -128(%rbp)
uuid_00000000000dae0a:
	mov -144(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000dae0d:
	mov -136(%RBP),%RSP
	add $-152, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae29
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dae14
	jmp uuid_00000000000dae16
uuid_00000000000dae14:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dae11
	jmp uuid_00000000000dae13
uuid_00000000000dae11:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dae0e
	jmp uuid_00000000000dae10
uuid_00000000000dae0e:
	movb $1, -192(%rbp)
uuid_00000000000dae10:
	mov -240(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dae13:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dae16:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae26
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dae1d
	jmp uuid_00000000000dae1f
uuid_00000000000dae1d:
	push %RBP
	mov -288(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dae1a
	jmp uuid_00000000000dae1c
uuid_00000000000dae1a:
	movb $1, -304(%rbp)
uuid_00000000000dae1c:
	mov -320(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000dae1f:
	mov -312(%RBP),%RSP
	add $-328, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae23
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dae22
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dae25
uuid_00000000000dae23:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae20
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae21
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dae25:
	mov -272(%RBP),%RSP
	add $-328, %RSP
	jmp uuid_00000000000dae28
uuid_00000000000dae26:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae17
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<S,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae18
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<S,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae19
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dae28:
	mov -160(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000dae2b
uuid_00000000000dae29:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dae2b:
	mov -96(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000dae2e
uuid_00000000000dae2c:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae07
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dae2e:
	mov -64(%RBP),%RSP
	add $-88, %RSP
	mov %rbp, %rsp
	sub $32, %rsp
	ret
fail_CL_ArrowNilString:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
fail_CL_ArrowNilConsStringString:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae2f
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
exit_CL_ArrowNilU64:
	mov $60, %RAX
	mov -8(%rbp), %RDI
	syscall
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilString:
	mov -8(%rbp), %R15
	mov $0, %RDX
uuid_00000000000dae30:
	mov 0(%R15), %R14B
	cmp $0,%R14B
	je uuid_00000000000dae31
	inc %RDX
	inc %R15
	jmp uuid_00000000000dae30
uuid_00000000000dae31:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	pushq $1
	pushq -8(%rbp)
	push %RDX
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
eprint_CL_ArrowNilString:
	mov -8(%rbp), %R15
	mov $0, %RDX
uuid_00000000000dae32:
	mov 0(%R15), %R14B
	cmp $0,%R14B
	je uuid_00000000000dae33
	inc %RDX
	inc %R15
	jmp uuid_00000000000dae32
uuid_00000000000dae33:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	pushq $2
	pushq -8(%rbp)
	push %RDX
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilU64:
	pushq $0
	mov -8(%rbp), %R15
	mov $0, %R14
uuid_00000000000dae34:
	mov	%R15, %RAX
	mov $0, %RDX
	mov $10, %RCX
	div %RCX
	push %RDX
	inc %R14
	mov	%RAX, %R15
	cmp $0,%R15
	jne uuid_00000000000dae34
uuid_00000000000dae35:
	pop %RDX
	movb %DL, -24(%rbp)
	addb $48, -24(%rbp)
	dec %R14
	mov $1, %RAX
	mov $1, %RDI
	mov	%rbp, %r12
	addq $-24, %r12
	mov	%R12, %RSI
	mov $1, %RDX
	syscall
	cmp $0,%R14
	jne uuid_00000000000dae35
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilASCII:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	pushq $1
	mov	%rbp, %r12
	addq $0, %r12
	push %R12
	pushq $1
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
print_CL_ArrowNilI64:
	pushq $0
	mov -8(%rbp), %R15
	mov $0, %R14
	cmp $0,%R15
	jge uuid_00000000000dae36
	neg %R15
	movb $45, -24(%rbp)
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	pushq $1
	mov	%rbp, %r12
	addq $-24, %r12
	push %R12
	pushq $1
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dae36:
	mov	%R15, %RAX
	mov $0, %RDX
	mov $10, %RCX
	div %RCX
	push %RDX
	inc %R14
	mov	%RAX, %R15
	cmp $0,%R15
	jne uuid_00000000000dae36
uuid_00000000000dae37:
	pop %RDX
	movb %DL, -24(%rbp)
	addb $48, -24(%rbp)
	dec %R14
	mov $1, %RAX
	mov $1, %RDI
	mov	%rbp, %r12
	addq $-24, %r12
	mov	%R12, %RSI
	mov $1, %RDX
	syscall
	cmp $0,%R14
	jne uuid_00000000000dae37
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilU32:
	mov $0, %R15
	mov -8(%rbp), %R15D
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	push %R15
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilU16:
	mov $0, %R15
	mov -8(%rbp), %R15W
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	push %R15
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilU8:
	mov $0, %R15
	mov -8(%rbp), %R15B
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	push %R15
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilI32:
	mov $0, %R15
	mov -8(%rbp), %R15D
	movsx %R15D,%R15
#call function print : Arrow<I64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	push %R15
	mov %RBX, %RBP
	call print_CL_ArrowNilI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilI16:
	mov $0, %R15
	mov -8(%rbp), %R15W
	movsx %R15W,%R15
#call function print : Arrow<I64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	push %R15
	mov %RBX, %RBP
	call print_CL_ArrowNilI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilI8:
	mov $0, %R15
	mov -8(%rbp), %R15B
	movsx %R15B,%R15
#call function print : Arrow<I64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	push %R15
	mov %RBX, %RBP
	call print_CL_ArrowNilI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64:
	mov -8(%rbp), %RAX
	mov -16(%rbp), %RDI
	mov -24(%rbp), %RSI
	mov -32(%rbp), %RDX
	syscall
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
read_SB_file_CL_ArrowStringString:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $2
	pushq -8(%rbp)
	pushq $0
	pushq $0
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -24(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dae3d
	jmp uuid_00000000000dae3f
uuid_00000000000dae3d:
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3b
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dae3f:
	mov -32(%RBP),%RSP
	add $-32, %RSP
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1025
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $1024
uuid_00000000000dae45:
	mov -56(%RBP), %RAX
	mov $1024, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dae46
	jmp uuid_00000000000dae47
uuid_00000000000dae46:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -24(%rbp)
	mov -40(%RBP), %RAX
	mov -48(%RBP), %R14
	addq %R14,%RAX
	push %RAX
	pushq $1024
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -56(%rbp)
	push %RBP
	mov -56(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dae42
	jmp uuid_00000000000dae44
uuid_00000000000dae42:
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae40
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<I64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae41
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dae44:
	mov -64(%RBP),%RSP
	add $-64, %RSP
	mov -48(%RBP), %RAX
	mov -56(%RBP), %R14
	addq %R14,%RAX
	movq %RAX, -48(%rbp)
#call function realloc : Arrow<Cons<Array<?,?>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov -48(%RBP), %RAX
	mov $1025, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call realloc_CL_ArrowArray_QM__QM_ConsU64Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
	add $8, %RSP
	jmp uuid_00000000000dae45
uuid_00000000000dae47:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $3
	pushq -24(%rbp)
	pushq $0
	pushq $0
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov -48(%RBP), %R13
	mov -40(%RBP), %R15
	add %R13, %R15
	movb $0, 0(%R15)
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
clone_SB_rope_CL_ArrowStringS:
#call function malloc : Arrow<Cons<U64,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $1024
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function clone-rope-impl : Arrow<Cons<Cons<Array<?,?>,S>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $0
	mov %RBX, %RBP
	call clone_SB_rope_SB_impl_CL_ArrowU64ConsU64ConsSArray_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function realloc : Arrow<Cons<Array<?,?>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov -48(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call realloc_CL_ArrowArray_QM__QM_ConsU64Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
	mov -48(%RBP), %R13
	mov -40(%RBP), %R15
	add %R13, %R15
	movb $0, 0(%R15)
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
clone_SB_rope_SB_impl_CL_ArrowU64ConsU64ConsSArray_QM__QM_:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov -104(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dae61
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dae4e
	jmp uuid_00000000000dae50
uuid_00000000000dae4e:
	push %RBP
	mov -128(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dae4b
	jmp uuid_00000000000dae4d
uuid_00000000000dae4b:
	push %RBP
	mov -120(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dae48
	jmp uuid_00000000000dae4a
uuid_00000000000dae48:
	movb $1, -144(%rbp)
uuid_00000000000dae4a:
	mov -192(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000dae4d:
	mov -160(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000dae50:
	mov -152(%RBP),%RSP
	add $-216, %RSP
	mov -144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae5e
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dae54
	jmp uuid_00000000000dae56
uuid_00000000000dae54:
	push %RBP
	mov -240(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dae51
	jmp uuid_00000000000dae53
uuid_00000000000dae51:
	movb $1, -256(%rbp)
uuid_00000000000dae53:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000dae56:
	mov -264(%RBP),%RSP
	add $-280, %RSP
	mov -256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae5b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dae5a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dae5d
uuid_00000000000dae5b:
	pushq $0
	mov -280(%RBP), %R15
	mov -288(%RBP), %R14
	add %R14, %R15
	mov 0(%R15), %R15B
	mov %R15B, %AL
	push %RAX
uuid_00000000000dae57:
	mov -296(%RBP), %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	setne %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae58
	jmp uuid_00000000000dae59
uuid_00000000000dae58:
#call function realloc : Arrow<Cons<Array<?,?>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov -40(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call realloc_CL_ArrowArray_QM__QM_ConsU64Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -8(%rbp)
	mov -296(%RBP), %R14B
	mov -40(%RBP), %R13
	mov -8(%RBP), %R15
	add %R13, %R15
	movb %R14B, 0(%R15)
	mov -288(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -288(%rbp)
	mov -40(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
	mov -280(%RBP), %R15
	mov -288(%RBP), %R14
	add %R14, %R15
	mov 0(%R15), %R15B
	movb %R15B, -296(%rbp)
	jmp uuid_00000000000dae57
uuid_00000000000dae59:
uuid_00000000000dae5d:
	mov -224(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000dae60
uuid_00000000000dae5e:
#call function clone-rope-impl : Arrow<Cons<Cons<Array<?,?>,S>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_SB_impl_CL_ArrowU64ConsU64ConsSArray_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
#call function clone-rope-impl : Arrow<Cons<Cons<Array<?,?>,S>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_SB_impl_CL_ArrowU64ConsU64ConsSArray_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000dae60:
	mov -112(%RBP),%RSP
	add $-216, %RSP
	jmp uuid_00000000000dae63
uuid_00000000000dae61:
uuid_00000000000dae63:
	mov -80(%RBP),%RSP
	add $-104, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
clone_SB_rope_CL_ArrowStringU8:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $2
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -24(%rbp), %r14
	mov -8(%rbp),%r15b
	mov %r15b, 0(%r14)
	mov -24(%rbp), %r15
	movb $0, 1(%r15)
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
length_CL_ArrowU64String:
	pushq $0
uuid_00000000000dae64:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000dae65
	jmp uuid_00000000000dae66
uuid_00000000000dae65:
	mov -24(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000dae64
uuid_00000000000dae66:
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
write_SB_file_CL_ArrowNilConsStringString:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $2
	pushq -8(%rbp)
	pushq $577
	pushq $420
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	pushq -32(%rbp)
	pushq -16(%rbp)
#call function length : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	mov %RBX, %RBP
	call length_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $3
	pushq -32(%rbp)
	pushq $0
	pushq $0
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
to_SB_string_CL_ArrowStringU64:
	pushq $0
	pushq $0
	pushq $3
	pushq $0
uuid_00000000000dae67:
	mov -8(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dae68
	jmp uuid_00000000000dae69
uuid_00000000000dae68:
	mov -8(%RBP), %RAX
	mov $10, %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	mov %RAX, %RAX
	mov $48, %R14
	addq %R14,%RAX
	push %RAX
	mov -8(%RBP), %RAX
	mov $10, %R14
	mov $0, %RDX
	div %R14
	movq %RAX, -8(%rbp)
	mov -56(%rbp), %R8
	movb %R8B, -48(%rbp)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	add $8, %rsp
	jmp uuid_00000000000dae67
uuid_00000000000dae69:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dae6b
	pushq $0
	pushq $uuid_00000000000dae6a
	pushq $2
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	jmp uuid_00000000000dae6d
uuid_00000000000dae6b:
uuid_00000000000dae6d:
	mov -56(%RBP),%RSP
	add $-56, %RSP
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
to_SB_string_CL_ArrowStringI64:
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	pushq $0
	pushq $3
	push %RBP
	mov -8(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dae6f
	jmp uuid_00000000000dae71
uuid_00000000000dae6f:
	pushq $0
	pushq $uuid_00000000000dae6e
	pushq $2
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	mov $0, %RAX
	mov -8(%RBP), %R14
	subq %R14,%RAX
	movq %RAX, -8(%rbp)
uuid_00000000000dae71:
	mov -72(%RBP),%RSP
	add $-72, %RSP
	pushq $0
uuid_00000000000dae72:
	mov -8(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dae73
	jmp uuid_00000000000dae74
uuid_00000000000dae73:
	mov -8(%RBP), %RAX
	mov $10, %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	mov %RAX, %RAX
	mov $48, %R14
	addq %R14,%RAX
	push %RAX
	mov -8(%RBP), %RAX
	mov $10, %R14
	mov $0, %RDX
	div %R14
	movq %RAX, -8(%rbp)
	mov -88(%rbp), %R8
	movb %R8B, -80(%rbp)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	add $8, %rsp
	jmp uuid_00000000000dae72
uuid_00000000000dae74:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dae75
	pushq $0
	pushq $uuid_00000000000dae6a
	pushq $2
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	jmp uuid_00000000000dae77
uuid_00000000000dae75:
uuid_00000000000dae77:
	mov -88(%RBP),%RSP
	add $-88, %RSP
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
to_SB_i64_CL_ArrowI64String:
	pushq $0
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $45, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae78
	jmp uuid_00000000000dae7a
uuid_00000000000dae78:
	movb $1, -24(%rbp)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
uuid_00000000000dae7a:
	mov -32(%RBP),%RSP
	add $-32, %RSP
#call function to-u64 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call to_SB_u64_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -24(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae7b
	jmp uuid_00000000000dae7d
uuid_00000000000dae7b:
	mov $0, %RAX
	mov -40(%RBP), %R14
	subq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dae7d:
	mov -48(%RBP),%RSP
	add $-48, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
to_SB_u64_CL_ArrowU64String:
	pushq $0
uuid_00000000000daea0:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000daea1
	jmp uuid_00000000000daea2
uuid_00000000000daea1:
	mov -24(%RBP), %RAX
	mov $10, %R14
	mul %R14
	movq %RAX, -24(%rbp)
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -32(%rbp)
	mov -48(%RBP), %AL
	mov $48, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae9d
	push %RBP
	pushq -32(%rbp)
	mov -64(%RBP), %AL
	mov $49, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae9a
	push %RBP
	pushq -32(%rbp)
	mov -80(%RBP), %AL
	mov $50, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae97
	push %RBP
	pushq -32(%rbp)
	mov -96(%RBP), %AL
	mov $51, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae94
	push %RBP
	pushq -32(%rbp)
	mov -112(%RBP), %AL
	mov $52, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae91
	push %RBP
	pushq -32(%rbp)
	mov -128(%RBP), %AL
	mov $53, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae8e
	push %RBP
	pushq -32(%rbp)
	mov -144(%RBP), %AL
	mov $54, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae8b
	push %RBP
	pushq -32(%rbp)
	mov -160(%RBP), %AL
	mov $55, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae88
	push %RBP
	pushq -32(%rbp)
	mov -176(%RBP), %AL
	mov $56, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae85
	push %RBP
	pushq -32(%rbp)
	mov -192(%RBP), %AL
	mov $57, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae82
	push %RBP
	jmp uuid_00000000000dae7f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dae7e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dae81
uuid_00000000000dae7f:
uuid_00000000000dae81:
	mov -200(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000dae84
uuid_00000000000dae82:
	mov -24(%RBP), %RAX
	mov $9, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000dae84:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000dae87
uuid_00000000000dae85:
	mov -24(%RBP), %RAX
	mov $8, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000dae87:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000dae8a
uuid_00000000000dae88:
	mov -24(%RBP), %RAX
	mov $7, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000dae8a:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000dae8d
uuid_00000000000dae8b:
	mov -24(%RBP), %RAX
	mov $6, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000dae8d:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000dae90
uuid_00000000000dae8e:
	mov -24(%RBP), %RAX
	mov $5, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000dae90:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000dae93
uuid_00000000000dae91:
	mov -24(%RBP), %RAX
	mov $4, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000dae93:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000dae96
uuid_00000000000dae94:
	mov -24(%RBP), %RAX
	mov $3, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000dae96:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000dae99
uuid_00000000000dae97:
	mov -24(%RBP), %RAX
	mov $2, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000dae99:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000dae9c
uuid_00000000000dae9a:
	mov -24(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000dae9c:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000dae9f
uuid_00000000000dae9d:
uuid_00000000000dae9f:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000daea0
uuid_00000000000daea2:
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
to_SB_hex_CL_ArrowStringU64:
	pushq $0
	pushq $0
	pushq $3
	pushq $16
uuid_00000000000daee3:
	mov -48(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daee4
	jmp uuid_00000000000daee5
uuid_00000000000daee4:
	mov -8(%RBP), %RAX
	mov $16, %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	push %RBP
	pushq -56(%rbp)
	mov -72(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daee0
	push %RBP
	pushq -56(%rbp)
	mov -88(%RBP), %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daedd
	push %RBP
	pushq -56(%rbp)
	mov -104(%RBP), %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daeda
	push %RBP
	pushq -56(%rbp)
	mov -120(%RBP), %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daed7
	push %RBP
	pushq -56(%rbp)
	mov -136(%RBP), %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daed4
	push %RBP
	pushq -56(%rbp)
	mov -152(%RBP), %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daed1
	push %RBP
	pushq -56(%rbp)
	mov -168(%RBP), %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daece
	push %RBP
	pushq -56(%rbp)
	mov -184(%RBP), %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daecb
	push %RBP
	pushq -56(%rbp)
	mov -200(%RBP), %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daec8
	push %RBP
	pushq -56(%rbp)
	mov -216(%RBP), %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daec5
	push %RBP
	pushq -56(%rbp)
	mov -232(%RBP), %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daec2
	push %RBP
	pushq -56(%rbp)
	mov -248(%RBP), %RAX
	mov $11, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daebf
	push %RBP
	pushq -56(%rbp)
	mov -264(%RBP), %RAX
	mov $12, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daebc
	push %RBP
	pushq -56(%rbp)
	mov -280(%RBP), %RAX
	mov $13, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daeb9
	push %RBP
	pushq -56(%rbp)
	mov -296(%RBP), %RAX
	mov $14, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daeb6
	push %RBP
	pushq -56(%rbp)
	mov -312(%RBP), %RAX
	mov $15, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daeb3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000daeb2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000daeb5
uuid_00000000000daeb3:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daeb1
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daeb5:
	mov -304(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000daeb8
uuid_00000000000daeb6:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daeb0
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daeb8:
	mov -288(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000daebb
uuid_00000000000daeb9:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daeaf
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daebb:
	mov -272(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000daebe
uuid_00000000000daebc:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daeae
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daebe:
	mov -256(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000daec1
uuid_00000000000daebf:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daead
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daec1:
	mov -240(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000daec4
uuid_00000000000daec2:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daeac
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daec4:
	mov -224(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000daec7
uuid_00000000000daec5:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daeab
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daec7:
	mov -208(%RBP),%RSP
	add $-216, %RSP
	jmp uuid_00000000000daeca
uuid_00000000000daec8:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daeaa
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daeca:
	mov -192(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000daecd
uuid_00000000000daecb:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daea9
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daecd:
	mov -176(%RBP),%RSP
	add $-184, %RSP
	jmp uuid_00000000000daed0
uuid_00000000000daece:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daea8
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daed0:
	mov -160(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000daed3
uuid_00000000000daed1:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daea7
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daed3:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000daed6
uuid_00000000000daed4:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daea6
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daed6:
	mov -128(%RBP),%RSP
	add $-136, %RSP
	jmp uuid_00000000000daed9
uuid_00000000000daed7:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daea5
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daed9:
	mov -112(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000daedc
uuid_00000000000daeda:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daea4
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daedc:
	mov -96(%RBP),%RSP
	add $-104, %RSP
	jmp uuid_00000000000daedf
uuid_00000000000daedd:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daea3
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daedf:
	mov -80(%RBP),%RSP
	add $-88, %RSP
	jmp uuid_00000000000daee2
uuid_00000000000daee0:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dae6a
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daee2:
	mov -64(%RBP),%RSP
	add $-72, %RSP
	mov -8(%RBP), %RAX
	mov $16, %R14
	mov $0, %RDX
	div %R14
	movq %RAX, -8(%rbp)
	mov -48(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -48(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000daee3
uuid_00000000000daee5:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
has_SB_prefix_CL_ArrowU64ConsStringString:
	pushq $1
uuid_00000000000daeed:
	mov -16(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000daeee
	jmp uuid_00000000000daeef
uuid_00000000000daeee:
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000daeea
	movq $0, -32(%rbp)
	movq $uuid_00000000000daee6, -16(%rbp)
	jmp uuid_00000000000daeec
uuid_00000000000daeea:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov -16(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	mov -48(%RBP), %AL
	mov -56(%RBP), %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daee7
	movq $0, -32(%rbp)
	movq $uuid_00000000000daee6, -16(%rbp)
	jmp uuid_00000000000daee9
uuid_00000000000daee7:
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	mov -16(%RBP), %RAX
	inc %RAX
	movq %RAX, -16(%rbp)
uuid_00000000000daee9:
	mov -64(%RBP),%RSP
	add $-64, %RSP
uuid_00000000000daeec:
	mov -40(%RBP),%RSP
	add $-64, %RSP
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000daeed
uuid_00000000000daeef:
	mov -32(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
remove_SB_prefix_CL_ArrowStringConsStringString:
	push %RBP
#call function has-prefix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call has_SB_prefix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000daef3
	jmp uuid_00000000000daef5
uuid_00000000000daef3:
uuid_00000000000daef0:
	mov -16(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000daef1
	jmp uuid_00000000000daef2
uuid_00000000000daef1:
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	mov -16(%RBP), %RAX
	inc %RAX
	movq %RAX, -16(%rbp)
	jmp uuid_00000000000daef0
uuid_00000000000daef2:
uuid_00000000000daef5:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -8(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
replace_CL_ArrowStringConsStringConsStringString:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000daef9:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000daefa
	jmp uuid_00000000000daefb
uuid_00000000000daefa:
	push %RBP
#call function has-prefix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call has_SB_prefix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000daef6
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000daef8
uuid_00000000000daef6:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -24(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function remove-prefix : Arrow<Cons<String,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call remove_SB_prefix_CL_ArrowStringConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -8(%rbp)
uuid_00000000000daef8:
	mov -64(%RBP),%RSP
	add $-64, %RSP
	add $8, %RSP
	jmp uuid_00000000000daef9
uuid_00000000000daefb:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
has_SB_suffix_CL_ArrowU64ConsStringString:
	pushq $0
uuid_00000000000daeff:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000daf00
	jmp uuid_00000000000daf01
uuid_00000000000daf00:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000daefc
	jmp uuid_00000000000daefe
uuid_00000000000daefc:
	movq $1, -32(%rbp)
uuid_00000000000daefe:
	mov -40(%RBP),%RSP
	add $-40, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %RSP
	jmp uuid_00000000000daeff
uuid_00000000000daf01:
	mov -32(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
remove_SB_suffix_CL_ArrowStringConsStringString:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000daf05:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000daf06
	jmp uuid_00000000000daf07
uuid_00000000000daf06:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000daf02
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	jmp uuid_00000000000daf04
uuid_00000000000daf02:
	movq $uuid_00000000000dae6a, -8(%rbp)
uuid_00000000000daf04:
	mov -56(%RBP),%RSP
	add $-56, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %RSP
	jmp uuid_00000000000daf05
uuid_00000000000daf07:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
deep_SB_hash_CL_ArrowU64String:
	pushq $0
	pushq $0
uuid_00000000000daf08:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000daf09
	jmp uuid_00000000000daf0a
uuid_00000000000daf09:
	mov $0, %R14
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov -40(%rbp), %R14B
	mov %R14, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	mov -32(%RBP),%RAX
	shl $10,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%RBP),%RAX
	shr $6,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	xorq %R14,%RAX
	movq %RAX, -32(%rbp)
	add $8, %rsp
	jmp uuid_00000000000daf08
uuid_00000000000daf0a:
	mov -32(%RBP),%RAX
	shl $3,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%RBP),%RAX
	shr $11,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	xorq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%RBP),%RAX
	shl $15,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_ML__CL_ArrowStringConsU64String:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000daf0b:
	mov -16(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daf0c
	jmp uuid_00000000000daf0d
uuid_00000000000daf0c:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	pushq -8(%rbp)
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	mov -16(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -16(%rbp)
	jmp uuid_00000000000daf0b
uuid_00000000000daf0d:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
not_CL_ArrowU64U64:
	pushq $0
	push %RBP
	mov -8(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daf0e
	jmp uuid_00000000000daf10
uuid_00000000000daf0e:
	movq $1, -24(%rbp)
uuid_00000000000daf10:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
not_CL_ArrowU64U8:
	pushq $0
	push %RBP
	mov -8(%RBP), %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf11
	jmp uuid_00000000000daf13
uuid_00000000000daf11:
	movq $1, -24(%rbp)
uuid_00000000000daf13:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_DT_block_SB_size_CL_ArrowU64Array_QM_MallocBlock:
	mov -8(%RBP), %R15
	add $0, %R15
	mov 0(%R15), %R15
	push %R15
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_DT_block_SB_prev_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock:
	mov -8(%RBP), %R15
	add $8, %R15
	mov 0(%R15), %R15
	push %R15
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_DT_block_SB_next_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock:
	mov -8(%RBP), %R15
	add $16, %R15
	mov 0(%R15), %R15
	push %R15
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_DT_block_SB_data_CL_ArrowArray_QM__QM_Array_QM_MallocBlock:
	mov -8(%RBP), %RAX
	mov $24, %R14
	addq %R14,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
set_DT_block_SB_size_CL_ArrowNilConsU64Array_QM_MallocBlock:
	mov -16(%RBP), %R14
	mov -8(%RBP), %R15
	mov %R14, 0(%R15)
	mov %rbp, %rsp
	sub $24, %rsp
	ret
set_DT_block_SB_prev_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock:
	mov -16(%RBP), %R14
	mov -8(%RBP), %R15
	mov %R14, 8(%R15)
	mov %rbp, %rsp
	sub $24, %rsp
	ret
set_DT_block_SB_next_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock:
	mov -16(%RBP), %R14
	mov -8(%RBP), %R15
	mov %R14, 16(%R15)
	mov %rbp, %rsp
	sub $24, %rsp
	ret
malloc_SB_new_SB_page_CL_ArrowNilNil:
	mov $12, %RAX
	mov $0, %RDI
	syscall
	mov	%RAX, %R8
	movq %R8, %r15
	movq $malloc_SB_block_SB_head_CL_U64, %r14
	movq %r15, 0(%r14)
	movq %R8, %r15
	movq $malloc_SB_block_SB_tail_CL_U64, %r14
	movq %r15, 0(%r14)
	addq $1073741824, %R8
	addq $1073741824, %R8
	addq $1073741824, %R8
	addq $1073741824, %R8
	addq $1073741824, %R8
	addq $1073741824, %R8
	addq $1073741824, %R8
	addq $1073741824, %R8
	mov $12, %RAX
	mov	%R8, %RDI
	syscall
	movq %R8, %r15
	movq $malloc_SB_page_SB_tail_CL_U64, %r14
	movq %r15, 0(%r14)
	mov %rbp, %rsp
	sub $8, %rsp
	ret
realloc_CL_ArrowArray_QM__QM_ConsU64Array_QM__QM_:
	mov -8(%RBP), %RAX
	mov $24, %R14
	subq %R14,%RAX
	push %RAX
#call function .block-size : Arrow<Array<MallocBlock,?>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_size_CL_ArrowU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -16(%RBP), %RAX
	subq %R14,%RAX
	push %RAX
	push %RBP
#call function .free-space : Arrow<Array<MallocBlock,?>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_free_SB_space_CL_ArrowU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -40(%RBP), %RAX
	cmp %R14,%RAX
	setle %AL
	andq $1,%RAX
	push %RAX
#call function .block-size : Arrow<Array<MallocBlock,?>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_size_CL_ArrowU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daf1a
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -56(%RBP), %RAX
	mov $24, %R14
	subq %R14,%RAX
	push %RAX
	pushq $0
uuid_00000000000daf17:
	mov -72(%RBP), %RAX
	mov -16(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daf18
	jmp uuid_00000000000daf19
uuid_00000000000daf18:
#call function .block-data : Arrow<Array<MallocBlock,?>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_data_CL_ArrowArray_QM__QM_Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function .block-data : Arrow<Array<MallocBlock,?>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_data_CL_ArrowArray_QM__QM_Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %R15B, %R14B
	mov -72(%RBP), %R13
	mov -80(%RBP), %R15
	add %R13, %R15
	mov %R14B, 0(%R15)
	mov -72(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -72(%rbp)
	add $8, %rsp
	add $8, %rsp
	jmp uuid_00000000000daf17
uuid_00000000000daf19:
#call function free : Arrow<Array<?,?>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function .block-data : Arrow<Array<MallocBlock,?>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_data_CL_ArrowArray_QM__QM_Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call free_CL_ArrowNilArray_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -64(%rbp), %r15
	movq %r15, -32(%rbp)
	mov -64(%rbp), %r15
	mov %r15, -32(%rbp)
	jmp uuid_00000000000daf1c
uuid_00000000000daf1a:
#call function set.block-size : Arrow<Cons<Array<MallocBlock,?>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_size_CL_ArrowNilConsU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
	mov -40(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daf14
	jmp uuid_00000000000daf16
uuid_00000000000daf14:
	mov $malloc_SB_block_SB_tail_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov -40(%RBP), %R14
	addq %R14,%RAX
	movq %RAX, %r15
	movq $malloc_SB_block_SB_tail_CL_U64, %r14
	movq %r15, 0(%r14)
uuid_00000000000daf16:
	mov -56(%RBP),%RSP
	add $-56, %RSP
uuid_00000000000daf1c:
	mov -48(%RBP),%RSP
	add $-56, %RSP
#call function .block-data : Arrow<Array<MallocBlock,?>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_data_CL_ArrowArray_QM__QM_Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
_DT_free_SB_space_CL_ArrowU64Array_QM_MallocBlock:
	pushq $0
	push %RBP
#call function .block-next : Arrow<Array<MallocBlock,?>,Array<MallocBlock,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_next_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daf1d
#call function .block-size : Arrow<Array<MallocBlock,?>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_size_CL_ArrowU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov $24, %RAX
	addq %R14,%RAX
	mov %RAX, %R14
	mov -8(%RBP), %RAX
	addq %R14,%RAX
	push %RAX
#call function .block-next : Arrow<Array<MallocBlock,?>,Array<MallocBlock,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_next_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	subq %R14,%RAX
	movq %RAX, -24(%rbp)
	jmp uuid_00000000000daf1f
uuid_00000000000daf1d:
	movq $1073741824, -24(%rbp)
uuid_00000000000daf1f:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
free_CL_ArrowNilArray_QM__QM_:
	mov -8(%RBP), %RAX
	mov $24, %R14
	subq %R14,%RAX
	push %RAX
#call function .block-prev : Arrow<Array<MallocBlock,?>,Array<MallocBlock,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_prev_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function .block-next : Arrow<Array<MallocBlock,?>,Array<MallocBlock,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_next_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -32(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daf20
	jmp uuid_00000000000daf22
uuid_00000000000daf20:
#call function set.block-next : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_next_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000daf22:
	mov -48(%RBP),%RSP
	add $-48, %RSP
	push %RBP
	mov -40(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daf23
	jmp uuid_00000000000daf25
uuid_00000000000daf23:
#call function set.block-prev : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_prev_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000daf25:
	mov -56(%RBP),%RSP
	add $-56, %RSP
	mov %rbp, %rsp
	sub $16, %rsp
	ret
malloc_CL_ArrowArray_QM__QM_U64:
#call function malloc : Arrow<Cons<U64,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -8(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
malloc_CL_ArrowArray_QM__QM_ConsU64U64:
	push %RBP
	mov $malloc_SB_block_SB_head_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daf26
	jmp uuid_00000000000daf28
uuid_00000000000daf26:
#call function malloc-new-page : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call malloc_SB_new_SB_page_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000daf28:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov $malloc_SB_first_SB_free_CL_U64, %r15
	pushq 0(%r15)
	push %RBP
	mov -40(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daf29
	jmp uuid_00000000000daf2b
uuid_00000000000daf29:
	mov $malloc_SB_block_SB_head_CL_U64, %r14
	movq 0(%r14), %r15
	movq %r15, -40(%rbp)
	mov 0(%r14), %r15
	mov %r15, -40(%rbp)
uuid_00000000000daf2b:
	mov -48(%RBP),%RSP
	add $-48, %RSP
	pushq $0
uuid_00000000000daf2f:
#call function .free-space : Arrow<Array<MallocBlock,?>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _DT_free_SB_space_CL_ArrowU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -16(%RBP), %RAX
	mov $24, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daf30
	jmp uuid_00000000000daf31
uuid_00000000000daf30:
#call function .block-next : Arrow<Array<MallocBlock,?>,Array<MallocBlock,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_next_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
	mov $malloc_SB_first_SB_free_CL_U64, %r14
	movq -40(%rbp), %r15
	movq %r15, 0(%r14)
	mov -40(%rbp), %r15
	mov %r15, 0(%r14)
	push %RBP
	mov -16(%RBP), %RAX
	mov $malloc_SB_large_SB_size_CL_U64, %R14
	mov 0(%R14), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daf2c
	mov -56(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
	jmp uuid_00000000000daf2e
uuid_00000000000daf2c:
uuid_00000000000daf2e:
	mov -64(%RBP),%RSP
	add $-64, %RSP
	add $8, %RSP
	jmp uuid_00000000000daf2f
uuid_00000000000daf31:
	mov $malloc_SB_block_SB_tail_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov $8, %RAX
	mov -64(%RBP), %R14
	subq %R14,%RAX
	mov %RAX, %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov $malloc_SB_block_SB_tail_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov -72(%RBP), %R14
	addq %R14,%RAX
	movq %RAX, %r15
	movq $malloc_SB_block_SB_tail_CL_U64, %r14
	movq %r15, 0(%r14)
	mov $malloc_SB_block_SB_tail_CL_U64, %r15
	pushq 0(%r15)
	mov -80(%RBP), %RAX
	mov $24, %R14
	addq %R14,%RAX
	push %RAX
	mov -88(%RBP), %RAX
	mov -8(%RBP), %R14
	addq %R14,%RAX
	movq %RAX, %r15
	movq $malloc_SB_block_SB_tail_CL_U64, %r14
	movq %r15, 0(%r14)
#call function .block-next : Arrow<Array<MallocBlock,?>,Array<MallocBlock,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_next_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -96(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daf32
	jmp uuid_00000000000daf34
uuid_00000000000daf32:
#call function set.block-prev : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_prev_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000daf34:
	mov -104(%RBP),%RSP
	add $-104, %RSP
#call function set.block-next : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_next_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function set.block-size : Arrow<Cons<Array<MallocBlock,?>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -8(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_size_CL_ArrowNilConsU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function set.block-next : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $0
	mov %RBX, %RBP
	call set_DT_block_SB_next_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
	mov -80(%RBP), %RAX
	mov -40(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daf35
#call function set.block-prev : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_prev_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000daf37
uuid_00000000000daf35:
#call function set.block-prev : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $0
	mov %RBX, %RBP
	call set_DT_block_SB_prev_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000daf37:
	mov -112(%RBP),%RSP
	add $-112, %RSP
	mov -88(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_:
	pushq $0
uuid_00000000000daf38:
	mov -40(%RBP), %RAX
	mov -24(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daf39
	jmp uuid_00000000000daf3a
uuid_00000000000daf39:
	mov -16(%RBP), %R14B
	mov -40(%RBP), %R13
	mov -8(%RBP), %R15
	add %R13, %R15
	movb %R14B, 0(%R15)
	mov -40(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
	jmp uuid_00000000000daf38
uuid_00000000000daf3a:
	mov -8(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
non_SB_zero_CL_ArrowU64Type:
	mov $3, %RAX
	push %RAX
	mov -24(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
non_SB_zero_CL_ArrowU64AST:
	mov $10, %RAX
	push %RAX
	mov -72(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
non_SB_zero_CL_ArrowU64FragmentKV:
	mov $1, %RAX
	push %RAX
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
non_SB_zero_CL_ArrowU64FragmentList:
	mov $1, %RAX
	push %RAX
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
non_SB_zero_CL_ArrowU64Context:
	mov $2, %RAX
	push %RAX
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $104, %rsp
	ret
non_SB_zero_CL_ArrowU64TContext:
	mov $2, %RAX
	push %RAX
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $128, %rsp
	ret
non_SB_zero_CL_ArrowU64FContext:
	mov $1, %RAX
	push %RAX
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $208, %rsp
	ret
non_SB_zero_CL_ArrowU64STypeList:
	mov $1, %RAX
	push %RAX
	mov -64(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $72, %rsp
	ret
non_SB_zero_CL_ArrowU64StringTypeList:
	mov $1, %RAX
	push %RAX
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
non_SB_zero_CL_ArrowU64StringList:
	mov $1, %RAX
	push %RAX
	mov -24(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
non_SB_zero_CL_ArrowU64StringU64List:
	mov $1, %RAX
	push %RAX
	mov -32(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
non_SB_zero_CL_ArrowU64StringStringList:
	mov $1, %RAX
	push %RAX
	mov -32(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
non_SB_zero_CL_ArrowU64StringSList:
	mov $1, %RAX
	push %RAX
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
non_SB_zero_CL_ArrowU64MacroList:
	mov $1, %RAX
	push %RAX
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
non_SB_zero_CL_ArrowU64SfxList:
	mov $1, %RAX
	push %RAX
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
mangle_SB_identifier_CL_ArrowSString:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000dafa4:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000dafa5
	jmp uuid_00000000000dafa6
uuid_00000000000dafa5:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -48(%rbp)
	mov -64(%RBP), %AL
	mov $33, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dafa1
	push %RBP
	pushq -48(%rbp)
	mov -80(%RBP), %AL
	mov $36, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf9e
	push %RBP
	pushq -48(%rbp)
	mov -96(%RBP), %AL
	mov $37, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf9b
	push %RBP
	pushq -48(%rbp)
	mov -112(%RBP), %AL
	mov $38, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf98
	push %RBP
	pushq -48(%rbp)
	mov -128(%RBP), %AL
	mov $42, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf95
	push %RBP
	pushq -48(%rbp)
	mov -144(%RBP), %AL
	mov $43, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf92
	push %RBP
	pushq -48(%rbp)
	mov -160(%RBP), %AL
	mov $45, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf8f
	push %RBP
	pushq -48(%rbp)
	mov -176(%RBP), %AL
	mov $46, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf8c
	push %RBP
	pushq -48(%rbp)
	mov -192(%RBP), %AL
	mov $47, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf89
	push %RBP
	pushq -48(%rbp)
	mov -208(%RBP), %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf86
	push %RBP
	pushq -48(%rbp)
	mov -224(%RBP), %AL
	mov $59, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf83
	push %RBP
	pushq -48(%rbp)
	mov -240(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf80
	push %RBP
	pushq -48(%rbp)
	mov -256(%RBP), %AL
	mov $61, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf7d
	push %RBP
	pushq -48(%rbp)
	mov -272(%RBP), %AL
	mov $62, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf7a
	push %RBP
	pushq -48(%rbp)
	mov -288(%RBP), %AL
	mov $63, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf77
	push %RBP
	pushq -48(%rbp)
	mov -304(%RBP), %AL
	mov $64, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf74
	push %RBP
	pushq -48(%rbp)
	mov -320(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf71
	push %RBP
	pushq -48(%rbp)
	mov -336(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf6e
	push %RBP
	pushq -48(%rbp)
	mov -352(%RBP), %AL
	mov $94, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf6b
	push %RBP
	pushq -48(%rbp)
	mov -368(%RBP), %AL
	mov $95, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf68
	push %RBP
	pushq -48(%rbp)
	mov -384(%RBP), %AL
	mov $96, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf65
	push %RBP
	pushq -48(%rbp)
	mov -400(%RBP), %AL
	mov $124, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf62
	push %RBP
	pushq -48(%rbp)
	mov -416(%RBP), %AL
	mov $126, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf5f
	push %RBP
	pushq -48(%rbp)
	jmp uuid_00000000000daf5c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000daf5b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000daf5e
uuid_00000000000daf5c:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -432(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daf5e:
	mov -424(%RBP),%RSP
	add $-432, %RSP
	jmp uuid_00000000000daf61
uuid_00000000000daf5f:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daf5a
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daf61:
	mov -408(%RBP),%RSP
	add $-416, %RSP
	jmp uuid_00000000000daf64
uuid_00000000000daf62:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daf59
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daf64:
	mov -392(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000daf67
uuid_00000000000daf65:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daf58
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daf67:
	mov -376(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000daf6a
uuid_00000000000daf68:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daf57
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daf6a:
	mov -360(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000daf6d
uuid_00000000000daf6b:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daf56
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daf6d:
	mov -344(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000daf70
uuid_00000000000daf6e:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daf55
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daf70:
	mov -328(%RBP),%RSP
	add $-336, %RSP
	jmp uuid_00000000000daf73
uuid_00000000000daf71:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daf54
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daf73:
	mov -312(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000daf76
uuid_00000000000daf74:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daf53
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daf76:
	mov -296(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000daf79
uuid_00000000000daf77:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daf52
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daf79:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000daf7c
uuid_00000000000daf7a:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daf51
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daf7c:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000daf7f
uuid_00000000000daf7d:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daf50
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daf7f:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000daf82
uuid_00000000000daf80:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daf4f
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daf82:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000daf85
uuid_00000000000daf83:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daf4e
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daf85:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000daf88
uuid_00000000000daf86:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daf4d
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daf88:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000daf8b
uuid_00000000000daf89:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daf4c
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daf8b:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000daf8e
uuid_00000000000daf8c:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daf4b
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daf8e:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000daf91
uuid_00000000000daf8f:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daf4a
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daf91:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000daf94
uuid_00000000000daf92:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daf49
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daf94:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000daf97
uuid_00000000000daf95:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daf48
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daf97:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000daf9a
uuid_00000000000daf98:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daf47
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daf9a:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000daf9d
uuid_00000000000daf9b:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daf46
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000daf9d:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000dafa0
uuid_00000000000daf9e:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daf45
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dafa0:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000dafa3
uuid_00000000000dafa1:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daf44
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dafa3:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000dafa4
uuid_00000000000dafa6:
	subq $24, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
mangle_SB_identifier_CL_ArrowSType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dafda
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dafab
	jmp uuid_00000000000dafad
uuid_00000000000dafab:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dafa8
	jmp uuid_00000000000dafaa
uuid_00000000000dafa8:
	movb $1, -152(%rbp)
uuid_00000000000dafaa:
	mov -168(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dafad:
	mov -160(%RBP),%RSP
	add $-176, %RSP
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dafd7
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dafb4
	jmp uuid_00000000000dafb6
uuid_00000000000dafb4:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dafb1
	jmp uuid_00000000000dafb3
uuid_00000000000dafb1:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dafae
	jmp uuid_00000000000dafb0
uuid_00000000000dafae:
	movb $1, -216(%rbp)
uuid_00000000000dafb0:
	mov -280(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000dafb3:
	mov -232(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000dafb6:
	mov -224(%RBP),%RSP
	add $-288, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dafd4
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -320(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dafcd
	jmp uuid_00000000000dafcf
uuid_00000000000dafcd:
	push %RBP
	mov -312(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dafca
	jmp uuid_00000000000dafcc
uuid_00000000000dafca:
	push %RBP
	mov -304(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dafc7
	jmp uuid_00000000000dafc9
uuid_00000000000dafc7:
	movb $1, -328(%rbp)
uuid_00000000000dafc9:
	mov -376(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000dafcc:
	mov -344(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000dafcf:
	mov -336(%RBP),%RSP
	add $-400, %RSP
	mov -328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dafd1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dafd0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dafd3
uuid_00000000000dafd1:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-identifier : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-identifier : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000dafd3:
	mov -296(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000dafd6
uuid_00000000000dafd4:
#call function mangle-identifier : Arrow<String,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000dafc4:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dafc5
	jmp uuid_00000000000dafc6
uuid_00000000000dafc5:
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dafbd
	jmp uuid_00000000000dafbf
uuid_00000000000dafbd:
	push %RBP
	mov -368(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dafba
	jmp uuid_00000000000dafbc
uuid_00000000000dafba:
	push %RBP
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	jmp uuid_00000000000dafb7
	jmp uuid_00000000000dafb9
uuid_00000000000dafb7:
	movb $1, -384(%rbp)
uuid_00000000000dafb9:
	mov -448(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000dafbc:
	mov -400(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000dafbf:
	mov -392(%RBP),%RSP
	add $-472, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dafc1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dafc0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dafc3
uuid_00000000000dafc1:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-identifier : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	movq -440(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -408(%rbp), %r15
	movq %r15, -240(%rbp)
uuid_00000000000dafc3:
	mov -336(%RBP),%RSP
	add $-472, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dafc4
uuid_00000000000dafc6:
uuid_00000000000dafd6:
	mov -184(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000dafd9
uuid_00000000000dafd7:
#call function mangle-identifier : Arrow<String,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000dafd9:
	mov -120(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000dafdc
uuid_00000000000dafda:
#call function mangle-identifier : Arrow<String,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dafa7
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000dafdc:
	mov -88(%RBP),%RSP
	add $-112, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
mangle_SB_identifier_CL_ArrowStringConsTypeString:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-identifier : Arrow<String,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daf4d
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-identifier : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
mangle_SB_c_SB_type_CL_ArrowSType:
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function mangle-c-type-internal : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_SB_internal_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
mangle_SB_c_SB_type_SB_internal_CL_ArrowSType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dafe3
	jmp uuid_00000000000dafe5
uuid_00000000000dafe3:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dafe0
	jmp uuid_00000000000dafe2
uuid_00000000000dafe0:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dafdd
	jmp uuid_00000000000dafdf
uuid_00000000000dafdd:
	movb $1, -120(%rbp)
uuid_00000000000dafdf:
	mov -168(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000dafe2:
	mov -136(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000dafe5:
	mov -128(%RBP),%RSP
	add $-192, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0cd
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db0ca
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dafed
	jmp uuid_00000000000dafef
uuid_00000000000dafed:
	push %RBP
	jmp uuid_00000000000dafea
	jmp uuid_00000000000dafec
uuid_00000000000dafea:
	movb $1, -264(%rbp)
uuid_00000000000dafec:
	mov -280(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000dafef:
	mov -272(%RBP),%RSP
	add $-280, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0c7
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daff7
	jmp uuid_00000000000daff9
uuid_00000000000daff7:
	push %RBP
	jmp uuid_00000000000daff4
	jmp uuid_00000000000daff6
uuid_00000000000daff4:
	push %RBP
	mov -296(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -352(%rbp)
	pushq $uuid_00000000000daff0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000daff1
	jmp uuid_00000000000daff3
uuid_00000000000daff1:
	movb $1, -320(%rbp)
uuid_00000000000daff3:
	mov -344(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000daff6:
	mov -336(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000daff9:
	mov -328(%RBP),%RSP
	add $-352, %RSP
	mov -320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0c4
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db001
	jmp uuid_00000000000db003
uuid_00000000000db001:
	push %RBP
	jmp uuid_00000000000daffe
	jmp uuid_00000000000db000
uuid_00000000000daffe:
	push %RBP
	mov -368(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -424(%rbp)
	pushq $uuid_00000000000daffa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000daffb
	jmp uuid_00000000000daffd
uuid_00000000000daffb:
	movb $1, -392(%rbp)
uuid_00000000000daffd:
	mov -416(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000db000:
	mov -408(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000db003:
	mov -400(%RBP),%RSP
	add $-424, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0c1
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db00b
	jmp uuid_00000000000db00d
uuid_00000000000db00b:
	push %RBP
	jmp uuid_00000000000db008
	jmp uuid_00000000000db00a
uuid_00000000000db008:
	push %RBP
	mov -440(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq $uuid_00000000000db004
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db005
	jmp uuid_00000000000db007
uuid_00000000000db005:
	movb $1, -464(%rbp)
uuid_00000000000db007:
	mov -488(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000db00a:
	mov -480(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000db00d:
	mov -472(%RBP),%RSP
	add $-496, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0be
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db016
	jmp uuid_00000000000db018
uuid_00000000000db016:
	push %RBP
	jmp uuid_00000000000db013
	jmp uuid_00000000000db015
uuid_00000000000db013:
	push %RBP
	mov -512(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -568(%rbp)
	pushq $uuid_00000000000db00f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db010
	jmp uuid_00000000000db012
uuid_00000000000db010:
	movb $1, -536(%rbp)
uuid_00000000000db012:
	mov -560(%RBP),%RSP
	add $-568, %RSP
uuid_00000000000db015:
	mov -552(%RBP),%RSP
	add $-568, %RSP
uuid_00000000000db018:
	mov -544(%RBP),%RSP
	add $-568, %RSP
	mov -536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0bb
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db021
	jmp uuid_00000000000db023
uuid_00000000000db021:
	push %RBP
	jmp uuid_00000000000db01e
	jmp uuid_00000000000db020
uuid_00000000000db01e:
	push %RBP
	mov -584(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -640(%rbp)
	pushq $uuid_00000000000db01a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db01b
	jmp uuid_00000000000db01d
uuid_00000000000db01b:
	movb $1, -608(%rbp)
uuid_00000000000db01d:
	mov -632(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000db020:
	mov -624(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000db023:
	mov -616(%RBP),%RSP
	add $-640, %RSP
	mov -608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0b8
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db02c
	jmp uuid_00000000000db02e
uuid_00000000000db02c:
	push %RBP
	jmp uuid_00000000000db029
	jmp uuid_00000000000db02b
uuid_00000000000db029:
	push %RBP
	mov -656(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq $uuid_00000000000db025
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db026
	jmp uuid_00000000000db028
uuid_00000000000db026:
	movb $1, -680(%rbp)
uuid_00000000000db028:
	mov -704(%RBP),%RSP
	add $-712, %RSP
uuid_00000000000db02b:
	mov -696(%RBP),%RSP
	add $-712, %RSP
uuid_00000000000db02e:
	mov -688(%RBP),%RSP
	add $-712, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0b5
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -744(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db037
	jmp uuid_00000000000db039
uuid_00000000000db037:
	push %RBP
	jmp uuid_00000000000db034
	jmp uuid_00000000000db036
uuid_00000000000db034:
	push %RBP
	mov -728(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -784(%rbp)
	pushq $uuid_00000000000db030
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db031
	jmp uuid_00000000000db033
uuid_00000000000db031:
	movb $1, -752(%rbp)
uuid_00000000000db033:
	mov -776(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000db036:
	mov -768(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000db039:
	mov -760(%RBP),%RSP
	add $-784, %RSP
	mov -752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0b2
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -816(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db042
	jmp uuid_00000000000db044
uuid_00000000000db042:
	push %RBP
	jmp uuid_00000000000db03f
	jmp uuid_00000000000db041
uuid_00000000000db03f:
	push %RBP
	mov -800(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -856(%rbp)
	pushq $uuid_00000000000db03b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db03c
	jmp uuid_00000000000db03e
uuid_00000000000db03c:
	movb $1, -824(%rbp)
uuid_00000000000db03e:
	mov -848(%RBP),%RSP
	add $-856, %RSP
uuid_00000000000db041:
	mov -840(%RBP),%RSP
	add $-856, %RSP
uuid_00000000000db044:
	mov -832(%RBP),%RSP
	add $-856, %RSP
	mov -824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0af
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -888(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db04d
	jmp uuid_00000000000db04f
uuid_00000000000db04d:
	push %RBP
	jmp uuid_00000000000db04a
	jmp uuid_00000000000db04c
uuid_00000000000db04a:
	push %RBP
	mov -872(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq $uuid_00000000000db046
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db047
	jmp uuid_00000000000db049
uuid_00000000000db047:
	movb $1, -896(%rbp)
uuid_00000000000db049:
	mov -920(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000db04c:
	mov -912(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000db04f:
	mov -904(%RBP),%RSP
	add $-928, %RSP
	mov -896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0ac
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -960(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db058
	jmp uuid_00000000000db05a
uuid_00000000000db058:
	push %RBP
	jmp uuid_00000000000db055
	jmp uuid_00000000000db057
uuid_00000000000db055:
	push %RBP
	mov -944(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1000(%rbp)
	pushq $uuid_00000000000db051
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db052
	jmp uuid_00000000000db054
uuid_00000000000db052:
	movb $1, -968(%rbp)
uuid_00000000000db054:
	mov -992(%RBP),%RSP
	add $-1000, %RSP
uuid_00000000000db057:
	mov -984(%RBP),%RSP
	add $-1000, %RSP
uuid_00000000000db05a:
	mov -976(%RBP),%RSP
	add $-1000, %RSP
	mov -968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0a9
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -1032(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db063
	jmp uuid_00000000000db065
uuid_00000000000db063:
	push %RBP
	jmp uuid_00000000000db060
	jmp uuid_00000000000db062
uuid_00000000000db060:
	push %RBP
	mov -1016(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq $uuid_00000000000db05c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db05d
	jmp uuid_00000000000db05f
uuid_00000000000db05d:
	movb $1, -1040(%rbp)
uuid_00000000000db05f:
	mov -1064(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000db062:
	mov -1056(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000db065:
	mov -1048(%RBP),%RSP
	add $-1072, %RSP
	mov -1040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0a6
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -1104(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db06e
	jmp uuid_00000000000db070
uuid_00000000000db06e:
	push %RBP
	jmp uuid_00000000000db06b
	jmp uuid_00000000000db06d
uuid_00000000000db06b:
	push %RBP
	mov -1088(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1144(%rbp)
	pushq $uuid_00000000000db067
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db068
	jmp uuid_00000000000db06a
uuid_00000000000db068:
	movb $1, -1112(%rbp)
uuid_00000000000db06a:
	mov -1136(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000db06d:
	mov -1128(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000db070:
	mov -1120(%RBP),%RSP
	add $-1144, %RSP
	mov -1112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0a3
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -1176(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db08b
	jmp uuid_00000000000db08d
uuid_00000000000db08b:
	push %RBP
	mov -1168(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db081
	jmp uuid_00000000000db083
uuid_00000000000db081:
	push %RBP
	mov -1232(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1304(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db078
	jmp uuid_00000000000db07a
uuid_00000000000db078:
	push %RBP
	jmp uuid_00000000000db075
	jmp uuid_00000000000db077
uuid_00000000000db075:
	push %RBP
	pushq -1272(%RBP)
	pushq -1280(%RBP)
	pushq -1288(%RBP)
	jmp uuid_00000000000db072
	jmp uuid_00000000000db074
uuid_00000000000db072:
	movb $1, -1312(%rbp)
uuid_00000000000db074:
	mov -1336(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000db077:
	mov -1328(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000db07a:
	mov -1320(%RBP),%RSP
	add $-1360, %RSP
	mov -1312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db07e
	jmp uuid_00000000000db080
uuid_00000000000db07e:
	push %RBP
	jmp uuid_00000000000db07b
	jmp uuid_00000000000db07d
uuid_00000000000db07b:
	movb $1, -1248(%rbp)
uuid_00000000000db07d:
	mov -1368(%RBP),%RSP
	add $-1368, %RSP
uuid_00000000000db080:
	mov -1264(%RBP),%RSP
	add $-1368, %RSP
uuid_00000000000db083:
	mov -1256(%RBP),%RSP
	add $-1368, %RSP
	mov -1248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db088
	jmp uuid_00000000000db08a
uuid_00000000000db088:
	push %RBP
	mov -1160(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1384(%rbp)
	pushq $uuid_00000000000db084
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db085
	jmp uuid_00000000000db087
uuid_00000000000db085:
	movb $1, -1184(%rbp)
uuid_00000000000db087:
	mov -1376(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000db08a:
	mov -1200(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000db08d:
	mov -1192(%RBP),%RSP
	add $-1384, %RSP
	mov -1184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0a0
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -1416(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db095
	jmp uuid_00000000000db097
uuid_00000000000db095:
	push %RBP
	jmp uuid_00000000000db092
	jmp uuid_00000000000db094
uuid_00000000000db092:
	push %RBP
	jmp uuid_00000000000db08f
	jmp uuid_00000000000db091
uuid_00000000000db08f:
	movb $1, -1424(%rbp)
uuid_00000000000db091:
	mov -1448(%RBP),%RSP
	add $-1448, %RSP
uuid_00000000000db094:
	mov -1440(%RBP),%RSP
	add $-1448, %RSP
uuid_00000000000db097:
	mov -1432(%RBP),%RSP
	add $-1448, %RSP
	mov -1424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db09d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db09c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db09f
uuid_00000000000db09d:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<Type,String>,Type>,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $index_SB_c_SB_type_SB_ordinal_CL_HashtableEqStringType, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $uuid_00000000000db098
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowStringConsStringConsTypeHashtableEqStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1456(%rbp)
	pushq $uuid_00000000000db098
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db099
	pushq $0
	pushq -1456(%rbp)
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	jmp uuid_00000000000db09b
uuid_00000000000db099:
uuid_00000000000db09b:
	mov -1464(%RBP),%RSP
	add $-1464, %RSP
uuid_00000000000db09f:
	mov -1392(%RBP),%RSP
	add $-1464, %RSP
	jmp uuid_00000000000db0a2
uuid_00000000000db0a0:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $0
	pushq $uuid_00000000000db08e
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000db0a2:
	mov -1152(%RBP),%RSP
	add $-1384, %RSP
	jmp uuid_00000000000db0a5
uuid_00000000000db0a3:
	pushq $0
	pushq $uuid_00000000000db071
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000db0a5:
	mov -1080(%RBP),%RSP
	add $-1144, %RSP
	jmp uuid_00000000000db0a8
uuid_00000000000db0a6:
	pushq $0
	pushq $uuid_00000000000db066
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000db0a8:
	mov -1008(%RBP),%RSP
	add $-1072, %RSP
	jmp uuid_00000000000db0ab
uuid_00000000000db0a9:
	pushq $0
	pushq $uuid_00000000000db05b
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000db0ab:
	mov -936(%RBP),%RSP
	add $-1000, %RSP
	jmp uuid_00000000000db0ae
uuid_00000000000db0ac:
	pushq $0
	pushq $uuid_00000000000db050
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000db0ae:
	mov -864(%RBP),%RSP
	add $-928, %RSP
	jmp uuid_00000000000db0b1
uuid_00000000000db0af:
	pushq $0
	pushq $uuid_00000000000db045
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000db0b1:
	mov -792(%RBP),%RSP
	add $-856, %RSP
	jmp uuid_00000000000db0b4
uuid_00000000000db0b2:
	pushq $0
	pushq $uuid_00000000000db03a
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000db0b4:
	mov -720(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000db0b7
uuid_00000000000db0b5:
	pushq $0
	pushq $uuid_00000000000db02f
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000db0b7:
	mov -648(%RBP),%RSP
	add $-712, %RSP
	jmp uuid_00000000000db0ba
uuid_00000000000db0b8:
	pushq $0
	pushq $uuid_00000000000db024
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000db0ba:
	mov -576(%RBP),%RSP
	add $-640, %RSP
	jmp uuid_00000000000db0bd
uuid_00000000000db0bb:
	pushq $0
	pushq $uuid_00000000000db019
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000db0bd:
	mov -504(%RBP),%RSP
	add $-568, %RSP
	jmp uuid_00000000000db0c0
uuid_00000000000db0be:
	pushq $0
	pushq $uuid_00000000000db00e
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000db0c0:
	mov -432(%RBP),%RSP
	add $-496, %RSP
	jmp uuid_00000000000db0c3
uuid_00000000000db0c1:
	pushq $0
	pushq $uuid_00000000000dafe9
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000db0c3:
	mov -360(%RBP),%RSP
	add $-424, %RSP
	jmp uuid_00000000000db0c6
uuid_00000000000db0c4:
	pushq $0
	pushq $uuid_00000000000dafe9
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000db0c6:
	mov -288(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000db0c9
uuid_00000000000db0c7:
uuid_00000000000db0c9:
	mov -232(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000db0cc
uuid_00000000000db0ca:
	pushq $0
	pushq $uuid_00000000000dafe9
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000db0cc:
	mov -200(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000db0cf
uuid_00000000000db0cd:
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dafe6
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	jmp uuid_00000000000dafe8
uuid_00000000000dafe6:
uuid_00000000000dafe8:
	mov -200(%RBP),%RSP
	add $-200, %RSP
uuid_00000000000db0cf:
	mov -88(%RBP),%RSP
	add $-200, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
escape_SB_string_CL_ArrowStringString:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000db0f5:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000db0f6
	jmp uuid_00000000000db0f7
uuid_00000000000db0f6:
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $92, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0f2
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000db0f4
uuid_00000000000db0f2:
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -56(%rbp)
	mov -72(%RBP), %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0ef
	push %RBP
	pushq -56(%rbp)
	mov -88(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0ec
	push %RBP
	pushq -56(%rbp)
	mov -104(%RBP), %AL
	mov $92, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0e9
	push %RBP
	pushq -56(%rbp)
	mov -120(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0e6
	push %RBP
	pushq -56(%rbp)
	mov -136(%RBP), %AL
	mov $96, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0e3
	push %RBP
	pushq -56(%rbp)
	mov -152(%RBP), %AL
	mov $110, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0e0
	push %RBP
	pushq -56(%rbp)
	mov -168(%RBP), %AL
	mov $111, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0dd
	push %RBP
	pushq -56(%rbp)
	mov -184(%RBP), %AL
	mov $116, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0da
	push %RBP
	pushq -56(%rbp)
	mov -200(%RBP), %AL
	mov $115, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0d7
	push %RBP
	pushq -56(%rbp)
	jmp uuid_00000000000db0d4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db0d3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db0d6
uuid_00000000000db0d4:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db0d1
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<U8,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function fail : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db0d2
	mov %RBX, %RBP
	call fail_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db0d6:
	mov -208(%RBP),%RSP
	add $-216, %RSP
	jmp uuid_00000000000db0d9
uuid_00000000000db0d7:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $32
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000db0d9:
	mov -192(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000db0dc
uuid_00000000000db0da:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $9
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000db0dc:
	mov -176(%RBP),%RSP
	add $-184, %RSP
	jmp uuid_00000000000db0df
uuid_00000000000db0dd:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $35
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000db0df:
	mov -160(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000db0e2
uuid_00000000000db0e0:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $10
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000db0e2:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000db0e5
uuid_00000000000db0e3:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $39
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000db0e5:
	mov -128(%RBP),%RSP
	add $-136, %RSP
	jmp uuid_00000000000db0e8
uuid_00000000000db0e6:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $41
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000db0e8:
	mov -112(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000db0eb
uuid_00000000000db0e9:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000db0d0
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000db0eb:
	mov -96(%RBP),%RSP
	add $-104, %RSP
	jmp uuid_00000000000db0ee
uuid_00000000000db0ec:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $40
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000db0ee:
	mov -80(%RBP),%RSP
	add $-88, %RSP
	jmp uuid_00000000000db0f1
uuid_00000000000db0ef:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $59
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000db0f1:
	mov -64(%RBP),%RSP
	add $-72, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
uuid_00000000000db0f4:
	mov -48(%RBP),%RSP
	add $-72, %RSP
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000db0f5
uuid_00000000000db0f7:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
escape_SB_literal_CL_ArrowStringString:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000db134:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000db135
	jmp uuid_00000000000db136
uuid_00000000000db135:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -48(%rbp)
	mov -64(%RBP), %AL
	mov $34, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db131
	push %RBP
	pushq -48(%rbp)
	mov -80(%RBP), %AL
	mov $92, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db12e
	push %RBP
	pushq -48(%rbp)
	mov -96(%RBP), %AL
	mov $10, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db12b
	push %RBP
	pushq -48(%rbp)
	jmp uuid_00000000000db128
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db127
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db12a
uuid_00000000000db128:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000db12a:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000db12d
uuid_00000000000db12b:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000db126
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000db12d:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000db130
uuid_00000000000db12e:
	pushq $uuid_00000000000daee6
	mov -8(%RBP), %RAX
	inc %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -96(%rbp)
	mov -112(%RBP), %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db11f
	push %RBP
	pushq -96(%rbp)
	mov -128(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db11c
	push %RBP
	pushq -96(%rbp)
	mov -144(%RBP), %AL
	mov $92, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db119
	push %RBP
	pushq -96(%rbp)
	mov -160(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db116
	push %RBP
	pushq -96(%rbp)
	mov -176(%RBP), %AL
	mov $96, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db113
	push %RBP
	pushq -96(%rbp)
	mov -192(%RBP), %AL
	mov $108, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db110
	push %RBP
	pushq -96(%rbp)
	mov -208(%RBP), %AL
	mov $110, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db10d
	push %RBP
	pushq -96(%rbp)
	mov -224(%RBP), %AL
	mov $111, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db10a
	push %RBP
	pushq -96(%rbp)
	mov -240(%RBP), %AL
	mov $115, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db107
	push %RBP
	pushq -96(%rbp)
	mov -256(%RBP), %AL
	mov $116, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db104
	push %RBP
	jmp uuid_00000000000db101
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db100
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db103
uuid_00000000000db101:
uuid_00000000000db103:
	mov -264(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000db106
uuid_00000000000db104:
	movq $uuid_00000000000db0ff, -88(%rbp)
uuid_00000000000db106:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000db109
uuid_00000000000db107:
	movq $uuid_00000000000dae18, -88(%rbp)
uuid_00000000000db109:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000db10c
uuid_00000000000db10a:
	movq $uuid_00000000000db0fe, -88(%rbp)
uuid_00000000000db10c:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000db10f
uuid_00000000000db10d:
	movq $uuid_00000000000db0fd, -88(%rbp)
uuid_00000000000db10f:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000db112
uuid_00000000000db110:
	movq $uuid_00000000000db0fc, -88(%rbp)
uuid_00000000000db112:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000db115
uuid_00000000000db113:
	movq $uuid_00000000000db0fb, -88(%rbp)
uuid_00000000000db115:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000db118
uuid_00000000000db116:
	movq $uuid_00000000000dae19, -88(%rbp)
uuid_00000000000db118:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000db11b
uuid_00000000000db119:
	movq $uuid_00000000000db0fa, -88(%rbp)
uuid_00000000000db11b:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000db11e
uuid_00000000000db11c:
	movq $uuid_00000000000dae17, -88(%rbp)
uuid_00000000000db11e:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000db121
uuid_00000000000db11f:
	movq $uuid_00000000000db0f9, -88(%rbp)
uuid_00000000000db121:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	push %RBP
	mov -88(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000db123
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000db122
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	jmp uuid_00000000000db125
uuid_00000000000db123:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -88(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
uuid_00000000000db125:
	mov -120(%RBP),%RSP
	add $-120, %RSP
uuid_00000000000db130:
	mov -72(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000db133
uuid_00000000000db131:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000db0f8
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000db133:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000db134
uuid_00000000000db136:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
escape_SB_string_CL_ArrowSS:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db13a
	jmp uuid_00000000000db13c
uuid_00000000000db13a:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db137
	jmp uuid_00000000000db139
uuid_00000000000db137:
	movb $1, -96(%rbp)
uuid_00000000000db139:
	mov -112(%RBP),%RSP
	add $-120, %RSP
uuid_00000000000db13c:
	mov -104(%RBP),%RSP
	add $-120, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db14d
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -152(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db143
	jmp uuid_00000000000db145
uuid_00000000000db143:
	push %RBP
	mov -144(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db140
	jmp uuid_00000000000db142
uuid_00000000000db140:
	push %RBP
	mov -136(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db13d
	jmp uuid_00000000000db13f
uuid_00000000000db13d:
	movb $1, -160(%rbp)
uuid_00000000000db13f:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000db142:
	mov -176(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000db145:
	mov -168(%RBP),%RSP
	add $-232, %RSP
	mov -160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db14a
	push %RBP
	jmp uuid_00000000000db147
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db146
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db149
uuid_00000000000db147:
uuid_00000000000db149:
	mov -240(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000db14c
uuid_00000000000db14a:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function escape-string : Arrow<S,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call escape_SB_string_CL_ArrowSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function escape-string : Arrow<S,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call escape_SB_string_CL_ArrowSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000db14c:
	mov -128(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000db14f
uuid_00000000000db14d:
	pushq $0
#call function escape-string : Arrow<String,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	mov %RBX, %RBP
	call escape_SB_string_CL_ArrowStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000db14f:
	mov -64(%RBP),%RSP
	add $-120, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
exit_SB_error_CL_ArrowNilConsASTString:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<SourceLocation,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db16f
	jmp uuid_00000000000db171
uuid_00000000000db16f:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db15c
	jmp uuid_00000000000db15e
uuid_00000000000db15c:
	push %RBP
	mov -328(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -432(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db153
	jmp uuid_00000000000db155
uuid_00000000000db153:
	push %RBP
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	jmp uuid_00000000000db150
	jmp uuid_00000000000db152
uuid_00000000000db150:
	movb $1, -440(%rbp)
uuid_00000000000db152:
	mov -456(%RBP),%RSP
	add $-480, %RSP
uuid_00000000000db155:
	mov -448(%RBP),%RSP
	add $-480, %RSP
	mov -440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db159
	jmp uuid_00000000000db15b
uuid_00000000000db159:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db156
	jmp uuid_00000000000db158
uuid_00000000000db156:
	movb $1, -344(%rbp)
uuid_00000000000db158:
	mov -488(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000db15b:
	mov -360(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000db15e:
	mov -352(%RBP),%RSP
	add $-560, %RSP
	mov -344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db16c
	jmp uuid_00000000000db16e
uuid_00000000000db16c:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -640(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db166
	jmp uuid_00000000000db168
uuid_00000000000db166:
	push %RBP
	jmp uuid_00000000000db163
	jmp uuid_00000000000db165
uuid_00000000000db163:
	push %RBP
	mov -576(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq $uuid_00000000000db15f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db160
	jmp uuid_00000000000db162
uuid_00000000000db160:
	movb $1, -648(%rbp)
uuid_00000000000db162:
	mov -672(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000db165:
	mov -664(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000db168:
	mov -656(%RBP),%RSP
	add $-680, %RSP
	mov -648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db169
	jmp uuid_00000000000db16b
uuid_00000000000db169:
	movb $1, -248(%rbp)
uuid_00000000000db16b:
	mov -568(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000db16e:
	mov -264(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000db171:
	mov -256(%RBP),%RSP
	add $-680, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db187
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db17b
	jmp uuid_00000000000db17d
uuid_00000000000db17b:
	push %RBP
	mov -752(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db178
	jmp uuid_00000000000db17a
uuid_00000000000db178:
	push %RBP
	mov -744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db175
	jmp uuid_00000000000db177
uuid_00000000000db175:
	movb $1, -768(%rbp)
uuid_00000000000db177:
	mov -864(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000db17a:
	mov -784(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000db17d:
	mov -776(%RBP),%RSP
	add $-936, %RSP
	mov -768(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db184
	push %RBP
	jmp uuid_00000000000db181
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db180
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db183
uuid_00000000000db181:
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db183:
	mov -944(%RBP),%RSP
	add $-944, %RSP
	jmp uuid_00000000000db186
uuid_00000000000db184:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db17e
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db173
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db173
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db17f
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db186:
	mov -688(%RBP),%RSP
	add $-936, %RSP
	jmp uuid_00000000000db189
uuid_00000000000db187:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db172
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db173
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db174
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db189:
	mov -168(%RBP),%RSP
	add $-680, %RSP
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
is_SB_variable_CL_ArrowU64String:
	pushq $0
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -32(%rbp)
	mov -48(%RBP), %AL
	mov $33, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db225
	push %RBP
	pushq -32(%rbp)
	mov -64(%RBP), %AL
	mov $36, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db222
	push %RBP
	pushq -32(%rbp)
	mov -80(%RBP), %AL
	mov $37, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db21f
	push %RBP
	pushq -32(%rbp)
	mov -96(%RBP), %AL
	mov $38, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db21c
	push %RBP
	pushq -32(%rbp)
	mov -112(%RBP), %AL
	mov $42, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db219
	push %RBP
	pushq -32(%rbp)
	mov -128(%RBP), %AL
	mov $43, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db216
	push %RBP
	pushq -32(%rbp)
	mov -144(%RBP), %AL
	mov $45, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db213
	push %RBP
	pushq -32(%rbp)
	mov -160(%RBP), %AL
	mov $46, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db210
	push %RBP
	pushq -32(%rbp)
	mov -176(%RBP), %AL
	mov $47, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db20d
	push %RBP
	pushq -32(%rbp)
	mov -192(%RBP), %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db20a
	push %RBP
	pushq -32(%rbp)
	mov -208(%RBP), %AL
	mov $59, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db207
	push %RBP
	pushq -32(%rbp)
	mov -224(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db204
	push %RBP
	pushq -32(%rbp)
	mov -240(%RBP), %AL
	mov $61, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db201
	push %RBP
	pushq -32(%rbp)
	mov -256(%RBP), %AL
	mov $62, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1fe
	push %RBP
	pushq -32(%rbp)
	mov -272(%RBP), %AL
	mov $63, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1fb
	push %RBP
	pushq -32(%rbp)
	mov -288(%RBP), %AL
	mov $64, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1f8
	push %RBP
	pushq -32(%rbp)
	mov -304(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1f5
	push %RBP
	pushq -32(%rbp)
	mov -320(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1f2
	push %RBP
	pushq -32(%rbp)
	mov -336(%RBP), %AL
	mov $94, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1ef
	push %RBP
	pushq -32(%rbp)
	mov -352(%RBP), %AL
	mov $95, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1ec
	push %RBP
	pushq -32(%rbp)
	mov -368(%RBP), %AL
	mov $97, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1e9
	push %RBP
	pushq -32(%rbp)
	mov -384(%RBP), %AL
	mov $98, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1e6
	push %RBP
	pushq -32(%rbp)
	mov -400(%RBP), %AL
	mov $99, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1e3
	push %RBP
	pushq -32(%rbp)
	mov -416(%RBP), %AL
	mov $100, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1e0
	push %RBP
	pushq -32(%rbp)
	mov -432(%RBP), %AL
	mov $101, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1dd
	push %RBP
	pushq -32(%rbp)
	mov -448(%RBP), %AL
	mov $102, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1da
	push %RBP
	pushq -32(%rbp)
	mov -464(%RBP), %AL
	mov $103, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1d7
	push %RBP
	pushq -32(%rbp)
	mov -480(%RBP), %AL
	mov $104, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1d4
	push %RBP
	pushq -32(%rbp)
	mov -496(%RBP), %AL
	mov $105, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1d1
	push %RBP
	pushq -32(%rbp)
	mov -512(%RBP), %AL
	mov $106, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1ce
	push %RBP
	pushq -32(%rbp)
	mov -528(%RBP), %AL
	mov $107, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1cb
	push %RBP
	pushq -32(%rbp)
	mov -544(%RBP), %AL
	mov $108, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1c8
	push %RBP
	pushq -32(%rbp)
	mov -560(%RBP), %AL
	mov $109, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1c5
	push %RBP
	pushq -32(%rbp)
	mov -576(%RBP), %AL
	mov $110, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1c2
	push %RBP
	pushq -32(%rbp)
	mov -592(%RBP), %AL
	mov $111, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1bf
	push %RBP
	pushq -32(%rbp)
	mov -608(%RBP), %AL
	mov $112, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1bc
	push %RBP
	pushq -32(%rbp)
	mov -624(%RBP), %AL
	mov $113, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1b9
	push %RBP
	pushq -32(%rbp)
	mov -640(%RBP), %AL
	mov $114, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1b6
	push %RBP
	pushq -32(%rbp)
	mov -656(%RBP), %AL
	mov $115, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1b3
	push %RBP
	pushq -32(%rbp)
	mov -672(%RBP), %AL
	mov $116, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1b0
	push %RBP
	pushq -32(%rbp)
	mov -688(%RBP), %AL
	mov $117, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1ad
	push %RBP
	pushq -32(%rbp)
	mov -704(%RBP), %AL
	mov $118, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1aa
	push %RBP
	pushq -32(%rbp)
	mov -720(%RBP), %AL
	mov $119, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1a7
	push %RBP
	pushq -32(%rbp)
	mov -736(%RBP), %AL
	mov $120, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1a4
	push %RBP
	pushq -32(%rbp)
	mov -752(%RBP), %AL
	mov $121, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1a1
	push %RBP
	pushq -32(%rbp)
	mov -768(%RBP), %AL
	mov $122, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db19e
	push %RBP
	pushq -32(%rbp)
	mov -784(%RBP), %AL
	mov $124, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db19b
	push %RBP
	pushq -32(%rbp)
	mov -800(%RBP), %AL
	mov $126, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db198
	push %RBP
	jmp uuid_00000000000db195
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db194
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db197
uuid_00000000000db195:
uuid_00000000000db197:
	mov -808(%RBP),%RSP
	add $-808, %RSP
	jmp uuid_00000000000db19a
uuid_00000000000db198:
	movb $1, -24(%rbp)
uuid_00000000000db19a:
	mov -792(%RBP),%RSP
	add $-800, %RSP
	jmp uuid_00000000000db19d
uuid_00000000000db19b:
	movb $1, -24(%rbp)
uuid_00000000000db19d:
	mov -776(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000db1a0
uuid_00000000000db19e:
	movb $1, -24(%rbp)
uuid_00000000000db1a0:
	mov -760(%RBP),%RSP
	add $-768, %RSP
	jmp uuid_00000000000db1a3
uuid_00000000000db1a1:
	movb $1, -24(%rbp)
uuid_00000000000db1a3:
	mov -744(%RBP),%RSP
	add $-752, %RSP
	jmp uuid_00000000000db1a6
uuid_00000000000db1a4:
	movb $1, -24(%rbp)
uuid_00000000000db1a6:
	mov -728(%RBP),%RSP
	add $-736, %RSP
	jmp uuid_00000000000db1a9
uuid_00000000000db1a7:
	movb $1, -24(%rbp)
uuid_00000000000db1a9:
	mov -712(%RBP),%RSP
	add $-720, %RSP
	jmp uuid_00000000000db1ac
uuid_00000000000db1aa:
	movb $1, -24(%rbp)
uuid_00000000000db1ac:
	mov -696(%RBP),%RSP
	add $-704, %RSP
	jmp uuid_00000000000db1af
uuid_00000000000db1ad:
	movb $1, -24(%rbp)
uuid_00000000000db1af:
	mov -680(%RBP),%RSP
	add $-688, %RSP
	jmp uuid_00000000000db1b2
uuid_00000000000db1b0:
	movb $1, -24(%rbp)
uuid_00000000000db1b2:
	mov -664(%RBP),%RSP
	add $-672, %RSP
	jmp uuid_00000000000db1b5
uuid_00000000000db1b3:
	movb $1, -24(%rbp)
uuid_00000000000db1b5:
	mov -648(%RBP),%RSP
	add $-656, %RSP
	jmp uuid_00000000000db1b8
uuid_00000000000db1b6:
	movb $1, -24(%rbp)
uuid_00000000000db1b8:
	mov -632(%RBP),%RSP
	add $-640, %RSP
	jmp uuid_00000000000db1bb
uuid_00000000000db1b9:
	movb $1, -24(%rbp)
uuid_00000000000db1bb:
	mov -616(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000db1be
uuid_00000000000db1bc:
	movb $1, -24(%rbp)
uuid_00000000000db1be:
	mov -600(%RBP),%RSP
	add $-608, %RSP
	jmp uuid_00000000000db1c1
uuid_00000000000db1bf:
	movb $1, -24(%rbp)
uuid_00000000000db1c1:
	mov -584(%RBP),%RSP
	add $-592, %RSP
	jmp uuid_00000000000db1c4
uuid_00000000000db1c2:
	movb $1, -24(%rbp)
uuid_00000000000db1c4:
	mov -568(%RBP),%RSP
	add $-576, %RSP
	jmp uuid_00000000000db1c7
uuid_00000000000db1c5:
	movb $1, -24(%rbp)
uuid_00000000000db1c7:
	mov -552(%RBP),%RSP
	add $-560, %RSP
	jmp uuid_00000000000db1ca
uuid_00000000000db1c8:
	movb $1, -24(%rbp)
uuid_00000000000db1ca:
	mov -536(%RBP),%RSP
	add $-544, %RSP
	jmp uuid_00000000000db1cd
uuid_00000000000db1cb:
	movb $1, -24(%rbp)
uuid_00000000000db1cd:
	mov -520(%RBP),%RSP
	add $-528, %RSP
	jmp uuid_00000000000db1d0
uuid_00000000000db1ce:
	movb $1, -24(%rbp)
uuid_00000000000db1d0:
	mov -504(%RBP),%RSP
	add $-512, %RSP
	jmp uuid_00000000000db1d3
uuid_00000000000db1d1:
	movb $1, -24(%rbp)
uuid_00000000000db1d3:
	mov -488(%RBP),%RSP
	add $-496, %RSP
	jmp uuid_00000000000db1d6
uuid_00000000000db1d4:
	movb $1, -24(%rbp)
uuid_00000000000db1d6:
	mov -472(%RBP),%RSP
	add $-480, %RSP
	jmp uuid_00000000000db1d9
uuid_00000000000db1d7:
	movb $1, -24(%rbp)
uuid_00000000000db1d9:
	mov -456(%RBP),%RSP
	add $-464, %RSP
	jmp uuid_00000000000db1dc
uuid_00000000000db1da:
	movb $1, -24(%rbp)
uuid_00000000000db1dc:
	mov -440(%RBP),%RSP
	add $-448, %RSP
	jmp uuid_00000000000db1df
uuid_00000000000db1dd:
	movb $1, -24(%rbp)
uuid_00000000000db1df:
	mov -424(%RBP),%RSP
	add $-432, %RSP
	jmp uuid_00000000000db1e2
uuid_00000000000db1e0:
	movb $1, -24(%rbp)
uuid_00000000000db1e2:
	mov -408(%RBP),%RSP
	add $-416, %RSP
	jmp uuid_00000000000db1e5
uuid_00000000000db1e3:
	movb $1, -24(%rbp)
uuid_00000000000db1e5:
	mov -392(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000db1e8
uuid_00000000000db1e6:
	movb $1, -24(%rbp)
uuid_00000000000db1e8:
	mov -376(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000db1eb
uuid_00000000000db1e9:
	movb $1, -24(%rbp)
uuid_00000000000db1eb:
	mov -360(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000db1ee
uuid_00000000000db1ec:
	movb $1, -24(%rbp)
uuid_00000000000db1ee:
	mov -344(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000db1f1
uuid_00000000000db1ef:
	movb $1, -24(%rbp)
uuid_00000000000db1f1:
	mov -328(%RBP),%RSP
	add $-336, %RSP
	jmp uuid_00000000000db1f4
uuid_00000000000db1f2:
	movb $1, -24(%rbp)
uuid_00000000000db1f4:
	mov -312(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000db1f7
uuid_00000000000db1f5:
	movb $1, -24(%rbp)
uuid_00000000000db1f7:
	mov -296(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000db1fa
uuid_00000000000db1f8:
	movb $1, -24(%rbp)
uuid_00000000000db1fa:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000db1fd
uuid_00000000000db1fb:
	movb $1, -24(%rbp)
uuid_00000000000db1fd:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000db200
uuid_00000000000db1fe:
	movb $1, -24(%rbp)
uuid_00000000000db200:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000db203
uuid_00000000000db201:
	movb $1, -24(%rbp)
uuid_00000000000db203:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000db206
uuid_00000000000db204:
	movb $1, -24(%rbp)
uuid_00000000000db206:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000db209
uuid_00000000000db207:
	movb $1, -24(%rbp)
uuid_00000000000db209:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000db20c
uuid_00000000000db20a:
	push %RBP
	mov -8(%RBP), %RAX
	inc %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db18e
	jmp uuid_00000000000db190
uuid_00000000000db18e:
	movb $1, -24(%rbp)
uuid_00000000000db190:
	mov -200(%RBP),%RSP
	add $-200, %RSP
	push %RBP
#call function is-variable : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	inc %RAX
	push %RAX
	mov %RBX, %RBP
	call is_SB_variable_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db191
	jmp uuid_00000000000db193
uuid_00000000000db191:
	movb $1, -24(%rbp)
uuid_00000000000db193:
	mov -208(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000db20c:
	mov -184(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000db20f
uuid_00000000000db20d:
	movb $1, -24(%rbp)
uuid_00000000000db20f:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000db212
uuid_00000000000db210:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq $uuid_00000000000db18a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db18b
	movb $1, -24(%rbp)
	jmp uuid_00000000000db18d
uuid_00000000000db18b:
uuid_00000000000db18d:
	mov -168(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000db212:
	mov -152(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000db215
uuid_00000000000db213:
	movb $1, -24(%rbp)
uuid_00000000000db215:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000db218
uuid_00000000000db216:
	movb $1, -24(%rbp)
uuid_00000000000db218:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000db21b
uuid_00000000000db219:
	movb $1, -24(%rbp)
uuid_00000000000db21b:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000db21e
uuid_00000000000db21c:
	movb $1, -24(%rbp)
uuid_00000000000db21e:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000db221
uuid_00000000000db21f:
	movb $1, -24(%rbp)
uuid_00000000000db221:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000db224
uuid_00000000000db222:
	movb $1, -24(%rbp)
uuid_00000000000db224:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000db227
uuid_00000000000db225:
	movb $1, -24(%rbp)
uuid_00000000000db227:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq $uuid_00000000000db228
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db229
	jmp uuid_00000000000db22b
uuid_00000000000db229:
	movb $0, -24(%rbp)
uuid_00000000000db22b:
	mov -56(%RBP),%RSP
	add $-56, %RSP
	mov -24(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
to_SB_string_CL_ArrowStringIsUsed:
	pushq $uuid_00000000000daee6
	pushq -8(%rbp)
	push %RBP
	pushq -32(%rbp)
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db23e
	push %RBP
	pushq -32(%rbp)
	mov -64(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db23b
	push %RBP
	pushq -32(%rbp)
	mov -80(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db238
	push %RBP
	pushq -32(%rbp)
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db235
	push %RBP
	pushq -32(%rbp)
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db232
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db231
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db234
uuid_00000000000db232:
	movq $uuid_00000000000db230, -24(%rbp)
uuid_00000000000db234:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000db237
uuid_00000000000db235:
	movq $uuid_00000000000db22f, -24(%rbp)
uuid_00000000000db237:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000db23a
uuid_00000000000db238:
	movq $uuid_00000000000db22e, -24(%rbp)
uuid_00000000000db23a:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000db23d
uuid_00000000000db23b:
	movq $uuid_00000000000db22d, -24(%rbp)
uuid_00000000000db23d:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000db240
uuid_00000000000db23e:
	movq $uuid_00000000000db22c, -24(%rbp)
uuid_00000000000db240:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
to_SB_string_CL_ArrowStringType:
#call function to-string-impl : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call to_SB_string_SB_impl_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
to_SB_string_CL_ArrowSListType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db25f
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db24b
	jmp uuid_00000000000db24d
uuid_00000000000db24b:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db248
	jmp uuid_00000000000db24a
uuid_00000000000db248:
	push %RBP
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	jmp uuid_00000000000db245
	jmp uuid_00000000000db247
uuid_00000000000db245:
	movb $1, -216(%rbp)
uuid_00000000000db247:
	mov -280(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000db24a:
	mov -232(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000db24d:
	mov -224(%RBP),%RSP
	add $-304, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db25c
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db254
	jmp uuid_00000000000db256
uuid_00000000000db254:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db251
	jmp uuid_00000000000db253
uuid_00000000000db251:
	push %RBP
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	jmp uuid_00000000000db24e
	jmp uuid_00000000000db250
uuid_00000000000db24e:
	movb $1, -360(%rbp)
uuid_00000000000db250:
	mov -424(%RBP),%RSP
	add $-448, %RSP
uuid_00000000000db253:
	mov -376(%RBP),%RSP
	add $-448, %RSP
uuid_00000000000db256:
	mov -368(%RBP),%RSP
	add $-448, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db259
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db258
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db25b
uuid_00000000000db259:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<List<Type>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowSListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000db257
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string-impl : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	mov %RBX, %RBP
	call to_SB_string_SB_impl_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000db25b:
	mov -312(%RBP),%RSP
	add $-448, %RSP
	jmp uuid_00000000000db25e
uuid_00000000000db25c:
#call function to-string-impl : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call to_SB_string_SB_impl_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000db25e:
	mov -168(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000db261
uuid_00000000000db25f:
uuid_00000000000db261:
	mov -120(%RBP),%RSP
	add $-160, %RSP
	subq $24, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
to_SB_string_SB_impl_CL_ArrowSType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db2a9
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db265
	jmp uuid_00000000000db267
uuid_00000000000db265:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db262
	jmp uuid_00000000000db264
uuid_00000000000db262:
	movb $1, -152(%rbp)
uuid_00000000000db264:
	mov -168(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000db267:
	mov -160(%RBP),%RSP
	add $-176, %RSP
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db2a6
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db26e
	jmp uuid_00000000000db270
uuid_00000000000db26e:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db26b
	jmp uuid_00000000000db26d
uuid_00000000000db26b:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db268
	jmp uuid_00000000000db26a
uuid_00000000000db268:
	movb $1, -216(%rbp)
uuid_00000000000db26a:
	mov -264(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000db26d:
	mov -232(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000db270:
	mov -224(%RBP),%RSP
	add $-288, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db2a3
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -320(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db278
	jmp uuid_00000000000db27a
uuid_00000000000db278:
	push %RBP
	mov -312(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db275
	jmp uuid_00000000000db277
uuid_00000000000db275:
	push %RBP
	mov -304(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db272
	jmp uuid_00000000000db274
uuid_00000000000db272:
	movb $1, -328(%rbp)
uuid_00000000000db274:
	mov -392(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000db277:
	mov -344(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000db27a:
	mov -336(%RBP),%RSP
	add $-400, %RSP
	mov -328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db2a0
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -432(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db28b
	jmp uuid_00000000000db28d
uuid_00000000000db28b:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db281
	jmp uuid_00000000000db283
uuid_00000000000db281:
	push %RBP
	mov -488(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db27e
	jmp uuid_00000000000db280
uuid_00000000000db27e:
	push %RBP
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	jmp uuid_00000000000db27b
	jmp uuid_00000000000db27d
uuid_00000000000db27b:
	movb $1, -504(%rbp)
uuid_00000000000db27d:
	mov -568(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000db280:
	mov -520(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000db283:
	mov -512(%RBP),%RSP
	add $-592, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db288
	jmp uuid_00000000000db28a
uuid_00000000000db288:
	push %RBP
	mov -416(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq $uuid_00000000000db284
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db285
	jmp uuid_00000000000db287
uuid_00000000000db285:
	movb $1, -440(%rbp)
uuid_00000000000db287:
	mov -600(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000db28a:
	mov -456(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000db28d:
	mov -448(%RBP),%RSP
	add $-608, %RSP
	mov -440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db29d
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -640(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db294
	jmp uuid_00000000000db296
uuid_00000000000db294:
	push %RBP
	mov -632(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db291
	jmp uuid_00000000000db293
uuid_00000000000db291:
	push %RBP
	mov -624(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db28e
	jmp uuid_00000000000db290
uuid_00000000000db28e:
	movb $1, -648(%rbp)
uuid_00000000000db290:
	mov -712(%RBP),%RSP
	add $-720, %RSP
uuid_00000000000db293:
	mov -664(%RBP),%RSP
	add $-720, %RSP
uuid_00000000000db296:
	mov -656(%RBP),%RSP
	add $-720, %RSP
	mov -648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db29a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db299
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db29c
uuid_00000000000db29a:
	pushq $0
	pushq -720(%rbp)
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000db297
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<List<Type>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowSListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000db298
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000db29c:
	mov -616(%RBP),%RSP
	add $-720, %RSP
	jmp uuid_00000000000db29f
uuid_00000000000db29d:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string-impl : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call to_SB_string_SB_impl_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000db284
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000db29f:
	mov -408(%RBP),%RSP
	add $-608, %RSP
	jmp uuid_00000000000db2a2
uuid_00000000000db2a0:
	pushq $0
	pushq -400(%rbp)
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000db2a2:
	mov -296(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000db2a5
uuid_00000000000db2a3:
#call function to-string-impl : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call to_SB_string_SB_impl_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function to-string-impl : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call to_SB_string_SB_impl_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000db271
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000db2a5:
	mov -184(%RBP),%RSP
	add $-336, %RSP
	jmp uuid_00000000000db2a8
uuid_00000000000db2a6:
	pushq $0
	pushq -176(%rbp)
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000db2a8:
	mov -120(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000db2ab
uuid_00000000000db2a9:
	pushq $0
	pushq $uuid_00000000000dafa7
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000db2ab:
	mov -88(%RBP),%RSP
	add $-112, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
_EQ__EQ__CL_ArrowU64ConsTypeType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db2b2
	jmp uuid_00000000000db2b4
uuid_00000000000db2b2:
	push %RBP
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db2af
	jmp uuid_00000000000db2b1
uuid_00000000000db2af:
	push %RBP
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db2ac
	jmp uuid_00000000000db2ae
uuid_00000000000db2ac:
	movb $1, -192(%rbp)
uuid_00000000000db2ae:
	mov -240(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000db2b1:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000db2b4:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db319
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db2c7
	jmp uuid_00000000000db2c9
uuid_00000000000db2c7:
	push %RBP
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db2b8
	jmp uuid_00000000000db2ba
uuid_00000000000db2b8:
	push %RBP
	mov -368(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db2b5
	jmp uuid_00000000000db2b7
uuid_00000000000db2b5:
	movb $1, -384(%rbp)
uuid_00000000000db2b7:
	mov -400(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000db2ba:
	mov -392(%RBP),%RSP
	add $-408, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db2c4
	jmp uuid_00000000000db2c6
uuid_00000000000db2c4:
	push %RBP
	pushq -280(%RBP)
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq $0
	push %RBP
	mov -440(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db2be
	jmp uuid_00000000000db2c0
uuid_00000000000db2be:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db2bb
	jmp uuid_00000000000db2bd
uuid_00000000000db2bb:
	movb $1, -448(%rbp)
uuid_00000000000db2bd:
	mov -464(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000db2c0:
	mov -456(%RBP),%RSP
	add $-472, %RSP
	mov -448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db2c1
	jmp uuid_00000000000db2c3
uuid_00000000000db2c1:
	movb $1, -336(%rbp)
uuid_00000000000db2c3:
	mov -416(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000db2c6:
	mov -352(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000db2c9:
	mov -344(%RBP),%RSP
	add $-472, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db316
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db2e2
	jmp uuid_00000000000db2e4
uuid_00000000000db2e2:
	push %RBP
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq $0
	push %RBP
	mov -584(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db2d0
	jmp uuid_00000000000db2d2
uuid_00000000000db2d0:
	push %RBP
	mov -576(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db2cd
	jmp uuid_00000000000db2cf
uuid_00000000000db2cd:
	push %RBP
	mov -568(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db2ca
	jmp uuid_00000000000db2cc
uuid_00000000000db2ca:
	movb $1, -592(%rbp)
uuid_00000000000db2cc:
	mov -640(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000db2cf:
	mov -608(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000db2d2:
	mov -600(%RBP),%RSP
	add $-664, %RSP
	mov -592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db2df
	jmp uuid_00000000000db2e1
uuid_00000000000db2df:
	push %RBP
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db2d9
	jmp uuid_00000000000db2db
uuid_00000000000db2d9:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db2d6
	jmp uuid_00000000000db2d8
uuid_00000000000db2d6:
	push %RBP
	mov -680(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db2d3
	jmp uuid_00000000000db2d5
uuid_00000000000db2d3:
	movb $1, -704(%rbp)
uuid_00000000000db2d5:
	mov -752(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000db2d8:
	mov -720(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000db2db:
	mov -712(%RBP),%RSP
	add $-776, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db2dc
	jmp uuid_00000000000db2de
uuid_00000000000db2dc:
	movb $1, -544(%rbp)
uuid_00000000000db2de:
	mov -672(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000db2e1:
	mov -560(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000db2e4:
	mov -552(%RBP),%RSP
	add $-776, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db313
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -840(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db303
	jmp uuid_00000000000db305
uuid_00000000000db303:
	push %RBP
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq $0
	push %RBP
	mov -888(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db2f1
	jmp uuid_00000000000db2f3
uuid_00000000000db2f1:
	push %RBP
	mov -880(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db2ee
	jmp uuid_00000000000db2f0
uuid_00000000000db2ee:
	push %RBP
	mov -872(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db2eb
	jmp uuid_00000000000db2ed
uuid_00000000000db2eb:
	movb $1, -896(%rbp)
uuid_00000000000db2ed:
	mov -960(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000db2f0:
	mov -912(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000db2f3:
	mov -904(%RBP),%RSP
	add $-968, %RSP
	mov -896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db300
	jmp uuid_00000000000db302
uuid_00000000000db300:
	push %RBP
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq $0
	push %RBP
	mov -1000(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db2fa
	jmp uuid_00000000000db2fc
uuid_00000000000db2fa:
	push %RBP
	mov -992(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db2f7
	jmp uuid_00000000000db2f9
uuid_00000000000db2f7:
	push %RBP
	mov -984(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db2f4
	jmp uuid_00000000000db2f6
uuid_00000000000db2f4:
	movb $1, -1008(%rbp)
uuid_00000000000db2f6:
	mov -1072(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000db2f9:
	mov -1024(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000db2fc:
	mov -1016(%RBP),%RSP
	add $-1080, %RSP
	mov -1008(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db2fd
	jmp uuid_00000000000db2ff
uuid_00000000000db2fd:
	movb $1, -848(%rbp)
uuid_00000000000db2ff:
	mov -976(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000db302:
	mov -864(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000db305:
	mov -856(%RBP),%RSP
	add $-1080, %RSP
	mov -848(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db310
	push %RBP
	jmp uuid_00000000000db30d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db30c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db30f
uuid_00000000000db30d:
uuid_00000000000db30f:
	mov -1088(%RBP),%RSP
	add $-1088, %RSP
	jmp uuid_00000000000db312
uuid_00000000000db310:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -968(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db309
	jmp uuid_00000000000db30b
uuid_00000000000db309:
	push %RBP
#call function == : Arrow<Cons<List<Type>,List<Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db306
	jmp uuid_00000000000db308
uuid_00000000000db306:
	movq $1, -64(%rbp)
uuid_00000000000db308:
	mov -1096(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000db30b:
	mov -1088(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000db312:
	mov -784(%RBP),%RSP
	add $-1096, %RSP
	jmp uuid_00000000000db315
uuid_00000000000db313:
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db2e8
	jmp uuid_00000000000db2ea
uuid_00000000000db2e8:
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db2e5
	jmp uuid_00000000000db2e7
uuid_00000000000db2e5:
	movq $1, -64(%rbp)
uuid_00000000000db2e7:
	mov -792(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000db2ea:
	mov -784(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000db315:
	mov -480(%RBP),%RSP
	add $-792, %RSP
	jmp uuid_00000000000db318
uuid_00000000000db316:
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -408(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000db318:
	mov -272(%RBP),%RSP
	add $-472, %RSP
	jmp uuid_00000000000db31b
uuid_00000000000db319:
	movq $1, -64(%rbp)
uuid_00000000000db31b:
	mov -128(%RBP),%RSP
	add $-264, %RSP
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
add_SB_concrete_SB_type_SB_instance_CL_ArrowNilType:
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db353
	jmp uuid_00000000000db355
uuid_00000000000db353:
#call function with-only-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call with_SB_only_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db350
	jmp uuid_00000000000db352
uuid_00000000000db350:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -104(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db322
	jmp uuid_00000000000db324
uuid_00000000000db322:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db31f
	jmp uuid_00000000000db321
uuid_00000000000db31f:
	push %RBP
	mov -88(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db31c
	jmp uuid_00000000000db31e
uuid_00000000000db31c:
	movb $1, -112(%rbp)
uuid_00000000000db31e:
	mov -176(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000db321:
	mov -128(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000db324:
	mov -120(%RBP),%RSP
	add $-184, %RSP
	mov -112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db34d
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -216(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db32b
	jmp uuid_00000000000db32d
uuid_00000000000db32b:
	push %RBP
	mov -208(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db328
	jmp uuid_00000000000db32a
uuid_00000000000db328:
	push %RBP
	mov -200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db325
	jmp uuid_00000000000db327
uuid_00000000000db325:
	movb $1, -224(%rbp)
uuid_00000000000db327:
	mov -288(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000db32a:
	mov -240(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000db32d:
	mov -232(%RBP),%RSP
	add $-296, %RSP
	mov -224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db34a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db349
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db34c
uuid_00000000000db34a:
	push %RBP
#call function does-concrete-type-instance-exist : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call does_SB_concrete_SB_type_SB_instance_SB_exist_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db336
	pushq -296(%rbp)
#call function .length : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call _DT_length_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function .bind : Arrow<Cons<Cons<HashtableEq<Tuple<String,U64>,List<Type>>,Tuple<String,U64>>,List<Type>>,HashtableEq<Tuple<String,U64>,List<Type>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $concrete_SB_type_SB_instances_SB_index_CL_HashtableEqListTypeTupleU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function .lookup : Arrow<Cons<Cons<HashtableEq<Tuple<String,U64>,List<Type>>,Tuple<String,U64>>,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $concrete_SB_type_SB_instances_SB_index_CL_HashtableEqListTypeTupleU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowListTypeConsListTypeConsTupleU64StringHashtableEqListTypeTupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqListTypeTupleU64StringConsListTypeConsTupleU64StringHashtableEqListTypeTupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	mov $concrete_SB_type_SB_instances_SB_index_CL_HashtableEqListTypeTupleU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	jmp uuid_00000000000db338
uuid_00000000000db336:
uuid_00000000000db338:
	mov -304(%RBP),%RSP
	add $-304, %RSP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
uuid_00000000000db346:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db347
	jmp uuid_00000000000db348
uuid_00000000000db347:
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	push %RBP
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -432(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db33f
	jmp uuid_00000000000db341
uuid_00000000000db33f:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db33c
	jmp uuid_00000000000db33e
uuid_00000000000db33c:
	push %RBP
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	jmp uuid_00000000000db339
	jmp uuid_00000000000db33b
uuid_00000000000db339:
	movb $1, -440(%rbp)
uuid_00000000000db33b:
	mov -504(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000db33e:
	mov -456(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000db341:
	mov -448(%RBP),%RSP
	add $-528, %RSP
	mov -440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db343
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db342
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db345
uuid_00000000000db343:
#call function add-concrete-type-instance : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	mov %RBX, %RBP
	call add_SB_concrete_SB_type_SB_instance_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -496(%rbp), %r15
	movq %r15, -344(%rbp)
	movq -488(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -328(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -312(%rbp)
uuid_00000000000db345:
	mov -392(%RBP),%RSP
	add $-528, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000db346
uuid_00000000000db348:
uuid_00000000000db34c:
	mov -192(%RBP),%RSP
	add $-344, %RSP
	jmp uuid_00000000000db34f
uuid_00000000000db34d:
uuid_00000000000db34f:
	mov -80(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000db352:
	mov -48(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000db355:
	mov -40(%RBP),%RSP
	add $-184, %RSP
	mov %rbp, %rsp
	sub $32, %rsp
	ret
does_SB_concrete_SB_type_SB_instance_SB_exist_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db35c
	jmp uuid_00000000000db35e
uuid_00000000000db35c:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db359
	jmp uuid_00000000000db35b
uuid_00000000000db359:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db356
	jmp uuid_00000000000db358
uuid_00000000000db356:
	movb $1, -104(%rbp)
uuid_00000000000db358:
	mov -168(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000db35b:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000db35e:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db387
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db365
	jmp uuid_00000000000db367
uuid_00000000000db365:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db362
	jmp uuid_00000000000db364
uuid_00000000000db362:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db35f
	jmp uuid_00000000000db361
uuid_00000000000db35f:
	movb $1, -216(%rbp)
uuid_00000000000db361:
	mov -280(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000db364:
	mov -232(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000db367:
	mov -224(%RBP),%RSP
	add $-288, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db384
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db383
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db386
uuid_00000000000db384:
	pushq -288(%rbp)
#call function .length : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call _DT_length_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function .lookup : Arrow<Cons<Cons<HashtableEq<Tuple<String,U64>,List<Type>>,Tuple<String,U64>>,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $concrete_SB_type_SB_instances_SB_index_CL_HashtableEqListTypeTupleU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowListTypeConsListTypeConsTupleU64StringHashtableEqListTypeTupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
uuid_00000000000db380:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db381
	jmp uuid_00000000000db382
uuid_00000000000db381:
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	push %RBP
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -440(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db376
	jmp uuid_00000000000db378
uuid_00000000000db376:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db373
	jmp uuid_00000000000db375
uuid_00000000000db373:
	push %RBP
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	jmp uuid_00000000000db370
	jmp uuid_00000000000db372
uuid_00000000000db370:
	movb $1, -448(%rbp)
uuid_00000000000db372:
	mov -512(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000db375:
	mov -464(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000db378:
	mov -456(%RBP),%RSP
	add $-536, %RSP
	mov -448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db37d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db37c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db37f
uuid_00000000000db37d:
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db379
	jmp uuid_00000000000db37b
uuid_00000000000db379:
	movq $1, -40(%rbp)
uuid_00000000000db37b:
	mov -544(%RBP),%RSP
	add $-544, %RSP
	movq -504(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -496(%rbp), %r15
	movq %r15, -344(%rbp)
	movq -488(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -328(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -320(%rbp)
uuid_00000000000db37f:
	mov -400(%RBP),%RSP
	add $-544, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000db380
uuid_00000000000db382:
uuid_00000000000db386:
	mov -184(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000db389
uuid_00000000000db387:
uuid_00000000000db389:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
typeof_CL_ArrowTypeAST:
#call function .lookup : Arrow<Cons<Cons<HashtableIs<AST,Type>,AST>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $type_SB_index_CL_HashtableIsTypeAST, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowTypeConsTypeConsASTHashtableIsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
ascript_CL_ArrowNilConsTypeAST:
#call function .bind : Arrow<Cons<Cons<HashtableIs<AST,Type>,AST>,Type>,HashtableIs<AST,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $type_SB_index_CL_HashtableIsTypeAST, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableIsTypeASTConsTypeConsASTHashtableIsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	mov $type_SB_index_CL_HashtableIsTypeAST, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $104, %rsp
	ret
infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db689
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db686
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db390
	jmp uuid_00000000000db392
uuid_00000000000db390:
	push %RBP
	mov -544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db38d
	jmp uuid_00000000000db38f
uuid_00000000000db38d:
	push %RBP
	mov -536(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db38a
	jmp uuid_00000000000db38c
uuid_00000000000db38a:
	movb $1, -560(%rbp)
uuid_00000000000db38c:
	mov -656(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000db38f:
	mov -576(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000db392:
	mov -568(%RBP),%RSP
	add $-728, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db683
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -808(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db399
	jmp uuid_00000000000db39b
uuid_00000000000db399:
	push %RBP
	jmp uuid_00000000000db396
	jmp uuid_00000000000db398
uuid_00000000000db396:
	push %RBP
	jmp uuid_00000000000db393
	jmp uuid_00000000000db395
uuid_00000000000db393:
	movb $1, -816(%rbp)
uuid_00000000000db395:
	mov -840(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000db398:
	mov -832(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000db39b:
	mov -824(%RBP),%RSP
	add $-840, %RSP
	mov -816(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db680
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db3a2
	jmp uuid_00000000000db3a4
uuid_00000000000db3a2:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db39f
	jmp uuid_00000000000db3a1
uuid_00000000000db39f:
	push %RBP
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	jmp uuid_00000000000db39c
	jmp uuid_00000000000db39e
uuid_00000000000db39c:
	movb $1, -928(%rbp)
uuid_00000000000db39e:
	mov -1024(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000db3a1:
	mov -944(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000db3a4:
	mov -936(%RBP),%RSP
	add $-1080, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db67d
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -1160(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db3d6
	jmp uuid_00000000000db3d8
uuid_00000000000db3d6:
	push %RBP
	mov -1152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1256(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db3c3
	jmp uuid_00000000000db3c5
uuid_00000000000db3c3:
	push %RBP
	mov -1248(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1352(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db3b1
	jmp uuid_00000000000db3b3
uuid_00000000000db3b1:
	push %RBP
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	jmp uuid_00000000000db3ae
	jmp uuid_00000000000db3b0
uuid_00000000000db3ae:
	movb $1, -1360(%rbp)
uuid_00000000000db3b0:
	mov -1376(%RBP),%RSP
	add $-1400, %RSP
uuid_00000000000db3b3:
	mov -1368(%RBP),%RSP
	add $-1400, %RSP
	mov -1360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db3c0
	jmp uuid_00000000000db3c2
uuid_00000000000db3c0:
	push %RBP
	mov -1240(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1480(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db3ba
	jmp uuid_00000000000db3bc
uuid_00000000000db3ba:
	push %RBP
	jmp uuid_00000000000db3b7
	jmp uuid_00000000000db3b9
uuid_00000000000db3b7:
	push %RBP
	jmp uuid_00000000000db3b4
	jmp uuid_00000000000db3b6
uuid_00000000000db3b4:
	movb $1, -1488(%rbp)
uuid_00000000000db3b6:
	mov -1512(%RBP),%RSP
	add $-1512, %RSP
uuid_00000000000db3b9:
	mov -1504(%RBP),%RSP
	add $-1512, %RSP
uuid_00000000000db3bc:
	mov -1496(%RBP),%RSP
	add $-1512, %RSP
	mov -1488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db3bd
	jmp uuid_00000000000db3bf
uuid_00000000000db3bd:
	movb $1, -1264(%rbp)
uuid_00000000000db3bf:
	mov -1408(%RBP),%RSP
	add $-1512, %RSP
uuid_00000000000db3c2:
	mov -1280(%RBP),%RSP
	add $-1512, %RSP
uuid_00000000000db3c5:
	mov -1272(%RBP),%RSP
	add $-1512, %RSP
	mov -1264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db3d3
	jmp uuid_00000000000db3d5
uuid_00000000000db3d3:
	push %RBP
	mov -1144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1592(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db3cd
	jmp uuid_00000000000db3cf
uuid_00000000000db3cd:
	push %RBP
	jmp uuid_00000000000db3ca
	jmp uuid_00000000000db3cc
uuid_00000000000db3ca:
	push %RBP
	mov -1528(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1632(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db3c7
	jmp uuid_00000000000db3c9
uuid_00000000000db3c7:
	movb $1, -1600(%rbp)
uuid_00000000000db3c9:
	mov -1624(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000db3cc:
	mov -1616(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000db3cf:
	mov -1608(%RBP),%RSP
	add $-1632, %RSP
	mov -1600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db3d0
	jmp uuid_00000000000db3d2
uuid_00000000000db3d0:
	movb $1, -1168(%rbp)
uuid_00000000000db3d2:
	mov -1520(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000db3d5:
	mov -1184(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000db3d8:
	mov -1176(%RBP),%RSP
	add $-1632, %RSP
	mov -1168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db67a
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -1712(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db413
	jmp uuid_00000000000db415
uuid_00000000000db413:
	push %RBP
	mov -1704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1808(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db401
	jmp uuid_00000000000db403
uuid_00000000000db401:
	push %RBP
	mov -1800(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1904(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db3f8
	jmp uuid_00000000000db3fa
uuid_00000000000db3f8:
	push %RBP
	pushq -1880(%RBP)
	pushq -1888(%RBP)
	pushq -1896(%RBP)
	jmp uuid_00000000000db3f5
	jmp uuid_00000000000db3f7
uuid_00000000000db3f5:
	movb $1, -1912(%rbp)
uuid_00000000000db3f7:
	mov -1928(%RBP),%RSP
	add $-1952, %RSP
uuid_00000000000db3fa:
	mov -1920(%RBP),%RSP
	add $-1952, %RSP
	mov -1912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db3fe
	jmp uuid_00000000000db400
uuid_00000000000db3fe:
	push %RBP
	mov -1792(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db3fb
	jmp uuid_00000000000db3fd
uuid_00000000000db3fb:
	movb $1, -1816(%rbp)
uuid_00000000000db3fd:
	mov -1960(%RBP),%RSP
	add $-2032, %RSP
uuid_00000000000db400:
	mov -1832(%RBP),%RSP
	add $-2032, %RSP
uuid_00000000000db403:
	mov -1824(%RBP),%RSP
	add $-2032, %RSP
	mov -1816(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db410
	jmp uuid_00000000000db412
uuid_00000000000db410:
	push %RBP
	mov -1696(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2112(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db40a
	jmp uuid_00000000000db40c
uuid_00000000000db40a:
	push %RBP
	jmp uuid_00000000000db407
	jmp uuid_00000000000db409
uuid_00000000000db407:
	push %RBP
	mov -2048(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2152(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db404
	jmp uuid_00000000000db406
uuid_00000000000db404:
	movb $1, -2120(%rbp)
uuid_00000000000db406:
	mov -2144(%RBP),%RSP
	add $-2152, %RSP
uuid_00000000000db409:
	mov -2136(%RBP),%RSP
	add $-2152, %RSP
uuid_00000000000db40c:
	mov -2128(%RBP),%RSP
	add $-2152, %RSP
	mov -2120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db40d
	jmp uuid_00000000000db40f
uuid_00000000000db40d:
	movb $1, -1720(%rbp)
uuid_00000000000db40f:
	mov -2040(%RBP),%RSP
	add $-2152, %RSP
uuid_00000000000db412:
	mov -1736(%RBP),%RSP
	add $-2152, %RSP
uuid_00000000000db415:
	mov -1728(%RBP),%RSP
	add $-2152, %RSP
	mov -1720(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db677
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -2232(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db442
	jmp uuid_00000000000db444
uuid_00000000000db442:
	push %RBP
	mov -2224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2328(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db42f
	jmp uuid_00000000000db431
uuid_00000000000db42f:
	push %RBP
	jmp uuid_00000000000db42c
	jmp uuid_00000000000db42e
uuid_00000000000db42c:
	push %RBP
	mov -2264(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db429
	jmp uuid_00000000000db42b
uuid_00000000000db429:
	movb $1, -2336(%rbp)
uuid_00000000000db42b:
	mov -2360(%RBP),%RSP
	add $-2368, %RSP
uuid_00000000000db42e:
	mov -2352(%RBP),%RSP
	add $-2368, %RSP
uuid_00000000000db431:
	mov -2344(%RBP),%RSP
	add $-2368, %RSP
	mov -2336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db43f
	jmp uuid_00000000000db441
uuid_00000000000db43f:
	push %RBP
	mov -2216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2448(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db439
	jmp uuid_00000000000db43b
uuid_00000000000db439:
	push %RBP
	jmp uuid_00000000000db436
	jmp uuid_00000000000db438
uuid_00000000000db436:
	push %RBP
	mov -2384(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2488(%rbp)
	pushq $uuid_00000000000db432
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db433
	jmp uuid_00000000000db435
uuid_00000000000db433:
	movb $1, -2456(%rbp)
uuid_00000000000db435:
	mov -2480(%RBP),%RSP
	add $-2488, %RSP
uuid_00000000000db438:
	mov -2472(%RBP),%RSP
	add $-2488, %RSP
uuid_00000000000db43b:
	mov -2464(%RBP),%RSP
	add $-2488, %RSP
	mov -2456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db43c
	jmp uuid_00000000000db43e
uuid_00000000000db43c:
	movb $1, -2240(%rbp)
uuid_00000000000db43e:
	mov -2376(%RBP),%RSP
	add $-2488, %RSP
uuid_00000000000db441:
	mov -2256(%RBP),%RSP
	add $-2488, %RSP
uuid_00000000000db444:
	mov -2248(%RBP),%RSP
	add $-2488, %RSP
	mov -2240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db674
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -2568(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db45f
	jmp uuid_00000000000db461
uuid_00000000000db45f:
	push %RBP
	mov -2560(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2664(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db44c
	jmp uuid_00000000000db44e
uuid_00000000000db44c:
	push %RBP
	jmp uuid_00000000000db449
	jmp uuid_00000000000db44b
uuid_00000000000db449:
	push %RBP
	mov -2600(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db446
	jmp uuid_00000000000db448
uuid_00000000000db446:
	movb $1, -2672(%rbp)
uuid_00000000000db448:
	mov -2696(%RBP),%RSP
	add $-2704, %RSP
uuid_00000000000db44b:
	mov -2688(%RBP),%RSP
	add $-2704, %RSP
uuid_00000000000db44e:
	mov -2680(%RBP),%RSP
	add $-2704, %RSP
	mov -2672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db45c
	jmp uuid_00000000000db45e
uuid_00000000000db45c:
	push %RBP
	mov -2552(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2784(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db456
	jmp uuid_00000000000db458
uuid_00000000000db456:
	push %RBP
	jmp uuid_00000000000db453
	jmp uuid_00000000000db455
uuid_00000000000db453:
	push %RBP
	mov -2720(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2824(%rbp)
	pushq $uuid_00000000000db44f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db450
	jmp uuid_00000000000db452
uuid_00000000000db450:
	movb $1, -2792(%rbp)
uuid_00000000000db452:
	mov -2816(%RBP),%RSP
	add $-2824, %RSP
uuid_00000000000db455:
	mov -2808(%RBP),%RSP
	add $-2824, %RSP
uuid_00000000000db458:
	mov -2800(%RBP),%RSP
	add $-2824, %RSP
	mov -2792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db459
	jmp uuid_00000000000db45b
uuid_00000000000db459:
	movb $1, -2576(%rbp)
uuid_00000000000db45b:
	mov -2712(%RBP),%RSP
	add $-2824, %RSP
uuid_00000000000db45e:
	mov -2592(%RBP),%RSP
	add $-2824, %RSP
uuid_00000000000db461:
	mov -2584(%RBP),%RSP
	add $-2824, %RSP
	mov -2576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db671
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -2904(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db484
	jmp uuid_00000000000db486
uuid_00000000000db484:
	push %RBP
	mov -2896(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db481
	jmp uuid_00000000000db483
uuid_00000000000db481:
	push %RBP
	mov -2888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3080(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db47b
	jmp uuid_00000000000db47d
uuid_00000000000db47b:
	push %RBP
	mov -3072(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db478
	jmp uuid_00000000000db47a
uuid_00000000000db478:
	push %RBP
	mov -3064(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3256(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db472
	jmp uuid_00000000000db474
uuid_00000000000db472:
	push %RBP
	mov -3248(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db46f
	jmp uuid_00000000000db471
uuid_00000000000db46f:
	push %RBP
	mov -3240(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3432(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db469
	jmp uuid_00000000000db46b
uuid_00000000000db469:
	push %RBP
	jmp uuid_00000000000db466
	jmp uuid_00000000000db468
uuid_00000000000db466:
	push %RBP
	mov -3368(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3472(%rbp)
	pushq $uuid_00000000000db462
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db463
	jmp uuid_00000000000db465
uuid_00000000000db463:
	movb $1, -3440(%rbp)
uuid_00000000000db465:
	mov -3464(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000db468:
	mov -3456(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000db46b:
	mov -3448(%RBP),%RSP
	add $-3472, %RSP
	mov -3440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db46c
	jmp uuid_00000000000db46e
uuid_00000000000db46c:
	movb $1, -3264(%rbp)
uuid_00000000000db46e:
	mov -3360(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000db471:
	mov -3280(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000db474:
	mov -3272(%RBP),%RSP
	add $-3472, %RSP
	mov -3264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db475
	jmp uuid_00000000000db477
uuid_00000000000db475:
	movb $1, -3088(%rbp)
uuid_00000000000db477:
	mov -3184(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000db47a:
	mov -3104(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000db47d:
	mov -3096(%RBP),%RSP
	add $-3472, %RSP
	mov -3088(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db47e
	jmp uuid_00000000000db480
uuid_00000000000db47e:
	movb $1, -2912(%rbp)
uuid_00000000000db480:
	mov -3008(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000db483:
	mov -2928(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000db486:
	mov -2920(%RBP),%RSP
	add $-3472, %RSP
	mov -2912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db66e
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -3552(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db4a8
	jmp uuid_00000000000db4aa
uuid_00000000000db4a8:
	push %RBP
	mov -3544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3648(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db496
	jmp uuid_00000000000db498
uuid_00000000000db496:
	push %RBP
	mov -3640(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3744(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db48d
	jmp uuid_00000000000db48f
uuid_00000000000db48d:
	push %RBP
	pushq -3720(%RBP)
	pushq -3728(%RBP)
	pushq -3736(%RBP)
	jmp uuid_00000000000db48a
	jmp uuid_00000000000db48c
uuid_00000000000db48a:
	movb $1, -3752(%rbp)
uuid_00000000000db48c:
	mov -3768(%RBP),%RSP
	add $-3792, %RSP
uuid_00000000000db48f:
	mov -3760(%RBP),%RSP
	add $-3792, %RSP
	mov -3752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db493
	jmp uuid_00000000000db495
uuid_00000000000db493:
	push %RBP
	mov -3632(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db490
	jmp uuid_00000000000db492
uuid_00000000000db490:
	movb $1, -3656(%rbp)
uuid_00000000000db492:
	mov -3800(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000db495:
	mov -3672(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000db498:
	mov -3664(%RBP),%RSP
	add $-3872, %RSP
	mov -3656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db4a5
	jmp uuid_00000000000db4a7
uuid_00000000000db4a5:
	push %RBP
	mov -3536(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3952(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db49f
	jmp uuid_00000000000db4a1
uuid_00000000000db49f:
	push %RBP
	jmp uuid_00000000000db49c
	jmp uuid_00000000000db49e
uuid_00000000000db49c:
	push %RBP
	mov -3888(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3992(%rbp)
	pushq $uuid_00000000000db15f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db499
	jmp uuid_00000000000db49b
uuid_00000000000db499:
	movb $1, -3960(%rbp)
uuid_00000000000db49b:
	mov -3984(%RBP),%RSP
	add $-3992, %RSP
uuid_00000000000db49e:
	mov -3976(%RBP),%RSP
	add $-3992, %RSP
uuid_00000000000db4a1:
	mov -3968(%RBP),%RSP
	add $-3992, %RSP
	mov -3960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db4a2
	jmp uuid_00000000000db4a4
uuid_00000000000db4a2:
	movb $1, -3560(%rbp)
uuid_00000000000db4a4:
	mov -3880(%RBP),%RSP
	add $-3992, %RSP
uuid_00000000000db4a7:
	mov -3576(%RBP),%RSP
	add $-3992, %RSP
uuid_00000000000db4aa:
	mov -3568(%RBP),%RSP
	add $-3992, %RSP
	mov -3560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db66b
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -4072(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db4ea
	jmp uuid_00000000000db4ec
uuid_00000000000db4ea:
	push %RBP
	mov -4064(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4168(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db4d7
	jmp uuid_00000000000db4d9
uuid_00000000000db4d7:
	push %RBP
	jmp uuid_00000000000db4d4
	jmp uuid_00000000000db4d6
uuid_00000000000db4d4:
	movb $1, -4176(%rbp)
uuid_00000000000db4d6:
	mov -4192(%RBP),%RSP
	add $-4192, %RSP
uuid_00000000000db4d9:
	mov -4184(%RBP),%RSP
	add $-4192, %RSP
	mov -4176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db4e7
	jmp uuid_00000000000db4e9
uuid_00000000000db4e7:
	push %RBP
	mov -4056(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4272(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db4e1
	jmp uuid_00000000000db4e3
uuid_00000000000db4e1:
	push %RBP
	jmp uuid_00000000000db4de
	jmp uuid_00000000000db4e0
uuid_00000000000db4de:
	push %RBP
	mov -4208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4312(%rbp)
	pushq $uuid_00000000000db4da
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db4db
	jmp uuid_00000000000db4dd
uuid_00000000000db4db:
	movb $1, -4280(%rbp)
uuid_00000000000db4dd:
	mov -4304(%RBP),%RSP
	add $-4312, %RSP
uuid_00000000000db4e0:
	mov -4296(%RBP),%RSP
	add $-4312, %RSP
uuid_00000000000db4e3:
	mov -4288(%RBP),%RSP
	add $-4312, %RSP
	mov -4280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db4e4
	jmp uuid_00000000000db4e6
uuid_00000000000db4e4:
	movb $1, -4080(%rbp)
uuid_00000000000db4e6:
	mov -4200(%RBP),%RSP
	add $-4312, %RSP
uuid_00000000000db4e9:
	mov -4096(%RBP),%RSP
	add $-4312, %RSP
uuid_00000000000db4ec:
	mov -4088(%RBP),%RSP
	add $-4312, %RSP
	mov -4080(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db668
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -4392(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db50a
	jmp uuid_00000000000db50c
uuid_00000000000db50a:
	push %RBP
	mov -4384(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db507
	jmp uuid_00000000000db509
uuid_00000000000db507:
	push %RBP
	mov -4376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4568(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db501
	jmp uuid_00000000000db503
uuid_00000000000db501:
	push %RBP
	jmp uuid_00000000000db4fe
	jmp uuid_00000000000db500
uuid_00000000000db4fe:
	push %RBP
	mov -4504(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4608(%rbp)
	pushq $uuid_00000000000db4fa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db4fb
	jmp uuid_00000000000db4fd
uuid_00000000000db4fb:
	movb $1, -4576(%rbp)
uuid_00000000000db4fd:
	mov -4600(%RBP),%RSP
	add $-4608, %RSP
uuid_00000000000db500:
	mov -4592(%RBP),%RSP
	add $-4608, %RSP
uuid_00000000000db503:
	mov -4584(%RBP),%RSP
	add $-4608, %RSP
	mov -4576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db504
	jmp uuid_00000000000db506
uuid_00000000000db504:
	movb $1, -4400(%rbp)
uuid_00000000000db506:
	mov -4496(%RBP),%RSP
	add $-4608, %RSP
uuid_00000000000db509:
	mov -4416(%RBP),%RSP
	add $-4608, %RSP
uuid_00000000000db50c:
	mov -4408(%RBP),%RSP
	add $-4608, %RSP
	mov -4400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db665
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -4688(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db51d
	jmp uuid_00000000000db51f
uuid_00000000000db51d:
	push %RBP
	mov -4680(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db51a
	jmp uuid_00000000000db51c
uuid_00000000000db51a:
	push %RBP
	mov -4672(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4864(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db514
	jmp uuid_00000000000db516
uuid_00000000000db514:
	push %RBP
	jmp uuid_00000000000db511
	jmp uuid_00000000000db513
uuid_00000000000db511:
	push %RBP
	mov -4800(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4904(%rbp)
	pushq $uuid_00000000000db50d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db50e
	jmp uuid_00000000000db510
uuid_00000000000db50e:
	movb $1, -4872(%rbp)
uuid_00000000000db510:
	mov -4896(%RBP),%RSP
	add $-4904, %RSP
uuid_00000000000db513:
	mov -4888(%RBP),%RSP
	add $-4904, %RSP
uuid_00000000000db516:
	mov -4880(%RBP),%RSP
	add $-4904, %RSP
	mov -4872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db517
	jmp uuid_00000000000db519
uuid_00000000000db517:
	movb $1, -4696(%rbp)
uuid_00000000000db519:
	mov -4792(%RBP),%RSP
	add $-4904, %RSP
uuid_00000000000db51c:
	mov -4712(%RBP),%RSP
	add $-4904, %RSP
uuid_00000000000db51f:
	mov -4704(%RBP),%RSP
	add $-4904, %RSP
	mov -4696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db662
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -4984(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db57d
	jmp uuid_00000000000db57f
uuid_00000000000db57d:
	push %RBP
	mov -4976(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db57a
	jmp uuid_00000000000db57c
uuid_00000000000db57a:
	push %RBP
	mov -4968(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5160(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db574
	jmp uuid_00000000000db576
uuid_00000000000db574:
	push %RBP
	pushq -5136(%RBP)
	pushq -5144(%RBP)
	pushq -5152(%RBP)
	jmp uuid_00000000000db571
	jmp uuid_00000000000db573
uuid_00000000000db571:
	push %RBP
	mov -5128(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -5288(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db56e
	jmp uuid_00000000000db570
uuid_00000000000db56e:
	push %RBP
	mov -5120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5368(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db568
	jmp uuid_00000000000db56a
uuid_00000000000db568:
	push %RBP
	jmp uuid_00000000000db565
	jmp uuid_00000000000db567
uuid_00000000000db565:
	push %RBP
	mov -5304(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db562
	jmp uuid_00000000000db564
uuid_00000000000db562:
	movb $1, -5376(%rbp)
uuid_00000000000db564:
	mov -5400(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000db567:
	mov -5392(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000db56a:
	mov -5384(%RBP),%RSP
	add $-5408, %RSP
	mov -5376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db56b
	jmp uuid_00000000000db56d
uuid_00000000000db56b:
	movb $1, -5168(%rbp)
uuid_00000000000db56d:
	mov -5296(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000db570:
	mov -5216(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000db573:
	mov -5184(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000db576:
	mov -5176(%RBP),%RSP
	add $-5408, %RSP
	mov -5168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db577
	jmp uuid_00000000000db579
uuid_00000000000db577:
	movb $1, -4992(%rbp)
uuid_00000000000db579:
	mov -5088(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000db57c:
	mov -5008(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000db57f:
	mov -5000(%RBP),%RSP
	add $-5408, %RSP
	mov -4992(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db65f
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -5488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db5ab
	jmp uuid_00000000000db5ad
uuid_00000000000db5ab:
	push %RBP
	mov -5480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db5a8
	jmp uuid_00000000000db5aa
uuid_00000000000db5a8:
	push %RBP
	mov -5472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db5a5
	jmp uuid_00000000000db5a7
uuid_00000000000db5a5:
	movb $1, -5496(%rbp)
uuid_00000000000db5a7:
	mov -5592(%RBP),%RSP
	add $-5664, %RSP
uuid_00000000000db5aa:
	mov -5512(%RBP),%RSP
	add $-5664, %RSP
uuid_00000000000db5ad:
	mov -5504(%RBP),%RSP
	add $-5664, %RSP
	mov -5496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db65c
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -5744(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db5f7
	jmp uuid_00000000000db5f9
uuid_00000000000db5f7:
	push %RBP
	pushq -5720(%RBP)
	pushq -5728(%RBP)
	pushq -5736(%RBP)
	jmp uuid_00000000000db5f4
	jmp uuid_00000000000db5f6
uuid_00000000000db5f4:
	push %RBP
	mov -5712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db5f1
	jmp uuid_00000000000db5f3
uuid_00000000000db5f1:
	push %RBP
	mov -5704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db5ee
	jmp uuid_00000000000db5f0
uuid_00000000000db5ee:
	movb $1, -5752(%rbp)
uuid_00000000000db5f0:
	mov -5880(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000db5f3:
	mov -5800(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000db5f6:
	mov -5768(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000db5f9:
	mov -5760(%RBP),%RSP
	add $-5952, %RSP
	mov -5752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db659
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -6032(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db62d
	jmp uuid_00000000000db62f
uuid_00000000000db62d:
	push %RBP
	pushq -5976(%RBP)
	pushq -5984(%RBP)
	pushq -5992(%RBP)
	pushq -6000(%RBP)
	pushq -6008(%RBP)
	pushq -6016(%RBP)
	pushq -6024(%RBP)
	jmp uuid_00000000000db62a
	jmp uuid_00000000000db62c
uuid_00000000000db62a:
	push %RBP
	mov -5968(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db627
	jmp uuid_00000000000db629
uuid_00000000000db627:
	movb $1, -6040(%rbp)
uuid_00000000000db629:
	mov -6120(%RBP),%RSP
	add $-6128, %RSP
uuid_00000000000db62c:
	mov -6056(%RBP),%RSP
	add $-6128, %RSP
uuid_00000000000db62f:
	mov -6048(%RBP),%RSP
	add $-6128, %RSP
	mov -6040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db656
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -6208(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db636
	jmp uuid_00000000000db638
uuid_00000000000db636:
	push %RBP
	jmp uuid_00000000000db633
	jmp uuid_00000000000db635
uuid_00000000000db633:
	push %RBP
	mov -6144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db630
	jmp uuid_00000000000db632
uuid_00000000000db630:
	movb $1, -6216(%rbp)
uuid_00000000000db632:
	mov -6240(%RBP),%RSP
	add $-6248, %RSP
uuid_00000000000db635:
	mov -6232(%RBP),%RSP
	add $-6248, %RSP
uuid_00000000000db638:
	mov -6224(%RBP),%RSP
	add $-6248, %RSP
	mov -6216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db653
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -6328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db648
	jmp uuid_00000000000db64a
uuid_00000000000db648:
	push %RBP
	jmp uuid_00000000000db645
	jmp uuid_00000000000db647
uuid_00000000000db645:
	movb $1, -6336(%rbp)
uuid_00000000000db647:
	mov -6352(%RBP),%RSP
	add $-6352, %RSP
uuid_00000000000db64a:
	mov -6344(%RBP),%RSP
	add $-6352, %RSP
	mov -6336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db650
	push %RBP
	jmp uuid_00000000000db64d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db64c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db64f
uuid_00000000000db64d:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db64b
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db64f:
	mov -6360(%RBP),%RSP
	add $-6360, %RSP
	jmp uuid_00000000000db652
uuid_00000000000db650:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daff0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db652:
	mov -6256(%RBP),%RSP
	add $-6352, %RSP
	jmp uuid_00000000000db655
uuid_00000000000db653:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db642
#call function typeof-tag : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6248(%rbp)
	mov %RBX, %RBP
	call typeof_SB_tag_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db63f
	jmp uuid_00000000000db641
uuid_00000000000db63f:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db639
	jmp uuid_00000000000db63b
uuid_00000000000db639:
#call function unify-hint : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	mov %RBX, %RBP
	call unify_SB_hint_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -6280(%RBP)
	popq -6272(%RBP)
	popq -6264(%RBP)
uuid_00000000000db63b:
	mov -6296(%RBP),%RSP
	add $-6296, %RSP
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db63c
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db5e3
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000db5e3
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	pushq -6312(%rbp)
	pushq -6320(%rbp)
	pushq -6328(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	jmp uuid_00000000000db63e
uuid_00000000000db63c:
uuid_00000000000db63e:
	mov -6304(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000db641:
	mov -6288(%RBP),%RSP
	add $-6304, %RSP
	jmp uuid_00000000000db644
uuid_00000000000db642:
uuid_00000000000db644:
	mov -6256(%RBP),%RSP
	add $-6256, %RSP
uuid_00000000000db655:
	mov -6136(%RBP),%RSP
	add $-6256, %RSP
	jmp uuid_00000000000db658
uuid_00000000000db656:
#call function typeof-var : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -6128(%rbp)
	mov %RBX, %RBP
	call typeof_SB_var_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function typeof-var : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -6128(%rbp)
	mov %RBX, %RBP
	call typeof_SB_var_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db658:
	mov -5960(%RBP),%RSP
	add $-6152, %RSP
	jmp uuid_00000000000db65b
uuid_00000000000db659:
#call function infer-ctx : Arrow<Cons<TContext,AST>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5888(%rbp)
	pushq -5896(%rbp)
	pushq -5904(%rbp)
	pushq -5912(%rbp)
	pushq -5920(%rbp)
	pushq -5928(%rbp)
	pushq -5936(%rbp)
	pushq -5944(%rbp)
	pushq -5952(%rbp)
	mov %RBX, %RBP
	call infer_SB_ctx_CL_ArrowTContextConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5776(%rbp)
	pushq -5784(%rbp)
	pushq -5792(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db61f
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -5840(%rbp)
	pushq -5848(%rbp)
	pushq -5856(%rbp)
	pushq -5864(%rbp)
	pushq -5872(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	jmp uuid_00000000000db621
uuid_00000000000db61f:
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -5840(%rbp)
	pushq -5848(%rbp)
	pushq -5856(%rbp)
	pushq -5864(%rbp)
	pushq -5872(%rbp)
	push %RBP
	pushq -5968(%rbp)
	pushq -5976(%rbp)
	pushq -5984(%rbp)
	pushq -5992(%rbp)
	pushq -6000(%rbp)
	pushq -6008(%rbp)
	pushq -6016(%rbp)
	pushq -6024(%rbp)
	pushq -6032(%rbp)
	pushq $0
	push %RBP
	mov -6112(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db618
	jmp uuid_00000000000db61a
uuid_00000000000db618:
	push %RBP
	mov -6104(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6208(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db606
	jmp uuid_00000000000db608
uuid_00000000000db606:
	push %RBP
	mov -6200(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6304(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db5fd
	jmp uuid_00000000000db5ff
uuid_00000000000db5fd:
	push %RBP
	pushq -6280(%RBP)
	pushq -6288(%RBP)
	pushq -6296(%RBP)
	jmp uuid_00000000000db5fa
	jmp uuid_00000000000db5fc
uuid_00000000000db5fa:
	movb $1, -6312(%rbp)
uuid_00000000000db5fc:
	mov -6328(%RBP),%RSP
	add $-6352, %RSP
uuid_00000000000db5ff:
	mov -6320(%RBP),%RSP
	add $-6352, %RSP
	mov -6312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db603
	jmp uuid_00000000000db605
uuid_00000000000db603:
	push %RBP
	mov -6192(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db600
	jmp uuid_00000000000db602
uuid_00000000000db600:
	movb $1, -6216(%rbp)
uuid_00000000000db602:
	mov -6360(%RBP),%RSP
	add $-6432, %RSP
uuid_00000000000db605:
	mov -6232(%RBP),%RSP
	add $-6432, %RSP
uuid_00000000000db608:
	mov -6224(%RBP),%RSP
	add $-6432, %RSP
	mov -6216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db615
	jmp uuid_00000000000db617
uuid_00000000000db615:
	push %RBP
	mov -6096(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6512(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db60f
	jmp uuid_00000000000db611
uuid_00000000000db60f:
	push %RBP
	jmp uuid_00000000000db60c
	jmp uuid_00000000000db60e
uuid_00000000000db60c:
	push %RBP
	mov -6448(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6552(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db609
	jmp uuid_00000000000db60b
uuid_00000000000db609:
	movb $1, -6520(%rbp)
uuid_00000000000db60b:
	mov -6544(%RBP),%RSP
	add $-6552, %RSP
uuid_00000000000db60e:
	mov -6536(%RBP),%RSP
	add $-6552, %RSP
uuid_00000000000db611:
	mov -6528(%RBP),%RSP
	add $-6552, %RSP
	mov -6520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db612
	jmp uuid_00000000000db614
uuid_00000000000db612:
	movb $1, -6120(%rbp)
uuid_00000000000db614:
	mov -6440(%RBP),%RSP
	add $-6552, %RSP
uuid_00000000000db617:
	mov -6136(%RBP),%RSP
	add $-6552, %RSP
uuid_00000000000db61a:
	mov -6128(%RBP),%RSP
	add $-6552, %RSP
	mov -6120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db61c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db61b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db61e
uuid_00000000000db61c:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -6368(%rbp)
	pushq -6376(%rbp)
	pushq -6384(%rbp)
	pushq -6392(%rbp)
	pushq -6400(%rbp)
	pushq -6408(%rbp)
	pushq -6416(%rbp)
	pushq -6424(%rbp)
	pushq -6432(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -5840(%rbp)
	pushq -5848(%rbp)
	pushq -5856(%rbp)
	pushq -5864(%rbp)
	pushq -5872(%rbp)
	pushq -6336(%rbp)
	pushq -6344(%rbp)
	pushq -6352(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db61e:
	mov -6040(%RBP),%RSP
	add $-6552, %RSP
uuid_00000000000db621:
	mov -5960(%RBP),%RSP
	add $-6552, %RSP
#call function typeof-lhs : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5888(%rbp)
	pushq -5896(%rbp)
	pushq -5904(%rbp)
	pushq -5912(%rbp)
	pushq -5920(%rbp)
	pushq -5928(%rbp)
	pushq -5936(%rbp)
	pushq -5944(%rbp)
	pushq -5952(%rbp)
	mov %RBX, %RBP
	call typeof_SB_lhs_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -5840(%rbp)
	pushq -5848(%rbp)
	pushq -5856(%rbp)
	pushq -5864(%rbp)
	pushq -5872(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function enrich : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db622
	pushq -6560(%rbp)
	pushq -6568(%rbp)
	pushq -6576(%rbp)
	pushq -6584(%rbp)
	pushq -6592(%rbp)
	pushq -6600(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq -5776(%rbp)
	pushq -5784(%rbp)
	pushq -5792(%rbp)
	mov %RBX, %RBP
	call enrich_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5776(%rbp)
	pushq -5784(%rbp)
	pushq -5792(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db624
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db623
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000db623
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	pushq -6584(%rbp)
	pushq -6592(%rbp)
	pushq -6600(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	jmp uuid_00000000000db626
uuid_00000000000db624:
uuid_00000000000db626:
	mov -6608(%RBP),%RSP
	add $-6608, %RSP
uuid_00000000000db65b:
	mov -5672(%RBP),%RSP
	add $-6608, %RSP
	mov %RSP, %R14
	add $72, %rsp
	add $8, %rsp
	add $24, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000db65e
uuid_00000000000db65c:
	pushq $3
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db5ae
	jmp uuid_00000000000db5b0
uuid_00000000000db5ae:
	pushq $0
	popq -5672(%RBP)
uuid_00000000000db5b0:
	mov -5680(%RBP),%RSP
	add $-5680, %RSP
	pushq $4
	pushq $0
	pushq $0
	pushq $3
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	push %RBP
	pushq -5720(%rbp)
	pushq -5728(%rbp)
	pushq -5736(%rbp)
	pushq -5744(%rbp)
	pushq -5752(%rbp)
	pushq -5760(%rbp)
	pushq -5768(%rbp)
	pushq -5776(%rbp)
	pushq -5784(%rbp)
	pushq $0
	push %RBP
	mov -5864(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db5b7
	jmp uuid_00000000000db5b9
uuid_00000000000db5b7:
	push %RBP
	jmp uuid_00000000000db5b4
	jmp uuid_00000000000db5b6
uuid_00000000000db5b4:
	push %RBP
	mov -5800(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db5b1
	jmp uuid_00000000000db5b3
uuid_00000000000db5b1:
	movb $1, -5872(%rbp)
uuid_00000000000db5b3:
	mov -5896(%RBP),%RSP
	add $-5904, %RSP
uuid_00000000000db5b6:
	mov -5888(%RBP),%RSP
	add $-5904, %RSP
uuid_00000000000db5b9:
	mov -5880(%RBP),%RSP
	add $-5904, %RSP
	mov -5872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db5ca
	push %RBP
	jmp uuid_00000000000db5c7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db5c6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db5c9
uuid_00000000000db5c7:
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq $3
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db5c0
	jmp uuid_00000000000db5c2
uuid_00000000000db5c0:
	pushq $3
	popq -5688(%RBP)
uuid_00000000000db5c2:
	mov -5920(%RBP),%RSP
	add $-5920, %RSP
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq -5672(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db5c3
	jmp uuid_00000000000db5c5
uuid_00000000000db5c3:
	pushq $0
	popq -5688(%RBP)
uuid_00000000000db5c5:
	mov -5928(%RBP),%RSP
	add $-5928, %RSP
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq -5688(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function apply-or-cons-and-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function var-name-if-var : Arrow<AST,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call var_SB_name_SB_if_SB_var_CL_ArrowStringAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call apply_SB_or_SB_cons_SB_and_SB_specialize_CL_ArrowTupleTypeTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	pushq -5960(%RBP)
	pushq -5968(%RBP)
	pushq -5976(%RBP)
	popq -5712(%RBP)
	popq -5704(%RBP)
	popq -5696(%RBP)
uuid_00000000000db5c9:
	mov -5912(%RBP),%RSP
	add $-5984, %RSP
	jmp uuid_00000000000db5cc
uuid_00000000000db5ca:
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq $3
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db5ba
	jmp uuid_00000000000db5bc
uuid_00000000000db5ba:
	pushq $3
	popq -5688(%RBP)
uuid_00000000000db5bc:
	mov -5912(%RBP),%RSP
	add $-5912, %RSP
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq -5672(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db5bd
	jmp uuid_00000000000db5bf
uuid_00000000000db5bd:
	pushq $0
	popq -5688(%RBP)
uuid_00000000000db5bf:
	mov -5920(%RBP),%RSP
	add $-5920, %RSP
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq -5688(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function apply-or-cons-and-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function var-name-if-var : Arrow<AST,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call var_SB_name_SB_if_SB_var_CL_ArrowStringAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call apply_SB_or_SB_cons_SB_and_SB_specialize_CL_ArrowTupleTypeTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	pushq -5928(%RBP)
	pushq -5936(%RBP)
	pushq -5944(%RBP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	pushq -5984(%rbp)
	pushq -5992(%rbp)
	pushq -6000(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq -5952(%RBP)
	pushq -5960(%RBP)
	pushq -5968(%RBP)
	popq -5712(%RBP)
	popq -5704(%RBP)
	popq -5696(%RBP)
uuid_00000000000db5cc:
	mov -5792(%RBP),%RSP
	add $-6000, %RSP
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5672(%rbp)
	pushq $3
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db5cd
	jmp uuid_00000000000db5cf
uuid_00000000000db5cd:
#call function implicit-tail : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5696(%rbp)
	pushq -5704(%rbp)
	pushq -5712(%rbp)
	mov %RBX, %RBP
	call implicit_SB_tail_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -5712(%RBP)
	popq -5704(%RBP)
	popq -5696(%RBP)
uuid_00000000000db5cf:
	mov -6008(%RBP),%RSP
	add $-6008, %RSP
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -5696(%rbp)
	pushq -5704(%rbp)
	pushq -5712(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function var-name-if-var : Arrow<AST,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call var_SB_name_SB_if_SB_var_CL_ArrowStringAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $uuid_00000000000db5d0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db5d3
	mov %RSP, %R14
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000db5d5
uuid_00000000000db5d3:
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db5d1
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000db5d1
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db5d0
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function p1 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call p1_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $uuid_00000000000db084
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $uuid_00000000000db5d2
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
uuid_00000000000db5d5:
	mov -6016(%RBP),%RSP
	add $-6016, %RSP
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6024(%rbp)
	pushq -6032(%rbp)
	pushq -6040(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db5eb
	mov %RSP, %R14
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000db5ed
uuid_00000000000db5eb:
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	push %RBP
	pushq -6056(%rbp)
	pushq -6064(%rbp)
	pushq -6072(%rbp)
	pushq -6080(%rbp)
	pushq -6088(%rbp)
	pushq -6096(%rbp)
	pushq -6104(%rbp)
	pushq -6112(%rbp)
	pushq -6120(%rbp)
	pushq $0
	push %RBP
	mov -6200(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db5dc
	jmp uuid_00000000000db5de
uuid_00000000000db5dc:
	push %RBP
	jmp uuid_00000000000db5d9
	jmp uuid_00000000000db5db
uuid_00000000000db5d9:
	push %RBP
	mov -6136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db5d6
	jmp uuid_00000000000db5d8
uuid_00000000000db5d6:
	movb $1, -6208(%rbp)
uuid_00000000000db5d8:
	mov -6232(%RBP),%RSP
	add $-6240, %RSP
uuid_00000000000db5db:
	mov -6224(%RBP),%RSP
	add $-6240, %RSP
uuid_00000000000db5de:
	mov -6216(%RBP),%RSP
	add $-6240, %RSP
	mov -6208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db5e8
	push %RBP
	jmp uuid_00000000000db5e5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db5e4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db5e7
uuid_00000000000db5e5:
uuid_00000000000db5e7:
	mov -6248(%RBP),%RSP
	add $-6248, %RSP
	mov %RSP, %R14
	add $8, %RSP
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000db5ea
uuid_00000000000db5e8:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5696(%rbp)
	pushq -5704(%rbp)
	pushq -5712(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db5df
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function var-name-if-var : Arrow<AST,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call var_SB_name_SB_if_SB_var_CL_ArrowStringAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db5e0
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6240(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -6280(%RBP)
	popq -6272(%RBP)
	popq -6264(%RBP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db5e1
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6256(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -6280(%RBP)
	popq -6272(%RBP)
	popq -6264(%RBP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db5e2
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6248(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -6280(%RBP)
	popq -6272(%RBP)
	popq -6264(%RBP)
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db5e3
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000db5e3
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
uuid_00000000000db5ea:
	mov -6128(%RBP),%RSP
	add $-6280, %RSP
uuid_00000000000db5ed:
	mov -6048(%RBP),%RSP
	add $-6280, %RSP
uuid_00000000000db65e:
	mov -5416(%RBP),%RSP
	add $-6280, %RSP
	mov %RSP, %R14
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %rsp
	add $24, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $56, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000db661
uuid_00000000000db65f:
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5408(%rbp)
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5416(%rbp)
	pushq -5424(%rbp)
	pushq -5432(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db584
	jmp uuid_00000000000db586
uuid_00000000000db584:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5416(%rbp)
	pushq -5424(%rbp)
	pushq -5432(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db581
	jmp uuid_00000000000db583
uuid_00000000000db581:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db580
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db583:
	mov -5448(%RBP),%RSP
	add $-5448, %RSP
uuid_00000000000db586:
	mov -5440(%RBP),%RSP
	add $-5448, %RSP
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db588
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db587
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db58a
uuid_00000000000db588:
uuid_00000000000db58a:
	mov -5480(%RBP),%RSP
	add $-5480, %RSP
#call function maybe-local-variable : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-constructor : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	mov %RBX, %RBP
	call without_SB_constructor_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call maybe_SB_local_SB_variable_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -5472(%RBP)
	popq -5464(%RBP)
	popq -5456(%RBP)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -5488(%rbp)
	pushq -5496(%rbp)
	pushq -5504(%rbp)
	pushq -5512(%rbp)
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq $0
	push %RBP
	mov -5632(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db59d
	jmp uuid_00000000000db59f
uuid_00000000000db59d:
	push %RBP
	jmp uuid_00000000000db59a
	jmp uuid_00000000000db59c
uuid_00000000000db59a:
	push %RBP
	mov -5616(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5736(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db594
	jmp uuid_00000000000db596
uuid_00000000000db594:
	push %RBP
	jmp uuid_00000000000db591
	jmp uuid_00000000000db593
uuid_00000000000db591:
	push %RBP
	jmp uuid_00000000000db58e
	jmp uuid_00000000000db590
uuid_00000000000db58e:
	push %RBP
	mov -5696(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db58b
	jmp uuid_00000000000db58d
uuid_00000000000db58b:
	movb $1, -5744(%rbp)
uuid_00000000000db58d:
	mov -5776(%RBP),%RSP
	add $-5848, %RSP
uuid_00000000000db590:
	mov -5768(%RBP),%RSP
	add $-5848, %RSP
uuid_00000000000db593:
	mov -5760(%RBP),%RSP
	add $-5848, %RSP
uuid_00000000000db596:
	mov -5752(%RBP),%RSP
	add $-5848, %RSP
	mov -5744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db597
	jmp uuid_00000000000db599
uuid_00000000000db597:
	movb $1, -5640(%rbp)
uuid_00000000000db599:
	mov -5664(%RBP),%RSP
	add $-5848, %RSP
uuid_00000000000db59c:
	mov -5656(%RBP),%RSP
	add $-5848, %RSP
uuid_00000000000db59f:
	mov -5648(%RBP),%RSP
	add $-5848, %RSP
	mov -5640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db5a1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db5a0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db5a3
uuid_00000000000db5a1:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5784(%rbp)
	pushq -5792(%rbp)
	pushq -5800(%rbp)
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -5840(%rbp)
	pushq -5848(%rbp)
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db5a3:
	mov -5560(%RBP),%RSP
	add $-5848, %RSP
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -5408(%rbp)
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daff0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db5a4
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000db5a4
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
uuid_00000000000db661:
	mov -4912(%RBP),%RSP
	add $-5848, %RSP
	jmp uuid_00000000000db664
uuid_00000000000db662:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq $uuid_00000000000db084
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq $0
	push %RBP
	mov -4984(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db538
	jmp uuid_00000000000db53a
uuid_00000000000db538:
	push %RBP
	mov -4976(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5048(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db52f
	jmp uuid_00000000000db531
uuid_00000000000db52f:
	push %RBP
	mov -5040(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db526
	jmp uuid_00000000000db528
uuid_00000000000db526:
	push %RBP
	mov -5104(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -5176(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db523
	jmp uuid_00000000000db525
uuid_00000000000db523:
	push %RBP
	pushq -5080(%RBP)
	pushq -5088(%RBP)
	pushq -5096(%RBP)
	mov -5208(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db520
	jmp uuid_00000000000db522
uuid_00000000000db520:
	movb $1, -5120(%rbp)
uuid_00000000000db522:
	mov -5184(%RBP),%RSP
	add $-5208, %RSP
uuid_00000000000db525:
	mov -5136(%RBP),%RSP
	add $-5208, %RSP
uuid_00000000000db528:
	mov -5128(%RBP),%RSP
	add $-5208, %RSP
	mov -5120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db52c
	jmp uuid_00000000000db52e
uuid_00000000000db52c:
	push %RBP
	jmp uuid_00000000000db529
	jmp uuid_00000000000db52b
uuid_00000000000db529:
	movb $1, -5056(%rbp)
uuid_00000000000db52b:
	mov -5216(%RBP),%RSP
	add $-5216, %RSP
uuid_00000000000db52e:
	mov -5072(%RBP),%RSP
	add $-5216, %RSP
uuid_00000000000db531:
	mov -5064(%RBP),%RSP
	add $-5216, %RSP
	mov -5056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db535
	jmp uuid_00000000000db537
uuid_00000000000db535:
	push %RBP
	mov -4968(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5232(%rbp)
	pushq $uuid_00000000000db084
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db532
	jmp uuid_00000000000db534
uuid_00000000000db532:
	movb $1, -4992(%rbp)
uuid_00000000000db534:
	mov -5224(%RBP),%RSP
	add $-5232, %RSP
uuid_00000000000db537:
	mov -5008(%RBP),%RSP
	add $-5232, %RSP
uuid_00000000000db53a:
	mov -5000(%RBP),%RSP
	add $-5232, %RSP
	mov -4992(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db55f
	push %RBP
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq $0
	push %RBP
	mov -5264(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db553
	jmp uuid_00000000000db555
uuid_00000000000db553:
	push %RBP
	mov -5256(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db54a
	jmp uuid_00000000000db54c
uuid_00000000000db54a:
	push %RBP
	mov -5320(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5392(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db541
	jmp uuid_00000000000db543
uuid_00000000000db541:
	push %RBP
	mov -5384(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -5456(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db53e
	jmp uuid_00000000000db540
uuid_00000000000db53e:
	push %RBP
	pushq -5360(%RBP)
	pushq -5368(%RBP)
	pushq -5376(%RBP)
	jmp uuid_00000000000db53b
	jmp uuid_00000000000db53d
uuid_00000000000db53b:
	movb $1, -5400(%rbp)
uuid_00000000000db53d:
	mov -5464(%RBP),%RSP
	add $-5488, %RSP
uuid_00000000000db540:
	mov -5416(%RBP),%RSP
	add $-5488, %RSP
uuid_00000000000db543:
	mov -5408(%RBP),%RSP
	add $-5488, %RSP
	mov -5400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db547
	jmp uuid_00000000000db549
uuid_00000000000db547:
	push %RBP
	pushq -5296(%RBP)
	pushq -5304(%RBP)
	pushq -5312(%RBP)
	mov -5520(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db544
	jmp uuid_00000000000db546
uuid_00000000000db544:
	movb $1, -5336(%rbp)
uuid_00000000000db546:
	mov -5496(%RBP),%RSP
	add $-5520, %RSP
uuid_00000000000db549:
	mov -5352(%RBP),%RSP
	add $-5520, %RSP
uuid_00000000000db54c:
	mov -5344(%RBP),%RSP
	add $-5520, %RSP
	mov -5336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db550
	jmp uuid_00000000000db552
uuid_00000000000db550:
	push %RBP
	mov -5248(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5536(%rbp)
	pushq $uuid_00000000000db084
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db54d
	jmp uuid_00000000000db54f
uuid_00000000000db54d:
	movb $1, -5272(%rbp)
uuid_00000000000db54f:
	mov -5528(%RBP),%RSP
	add $-5536, %RSP
uuid_00000000000db552:
	mov -5288(%RBP),%RSP
	add $-5536, %RSP
uuid_00000000000db555:
	mov -5280(%RBP),%RSP
	add $-5536, %RSP
	mov -5272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db55c
	push %RBP
	jmp uuid_00000000000db559
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db558
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RSP, %R14
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000db55b
uuid_00000000000db559:
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db50d
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000db50d
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
uuid_00000000000db55b:
	mov -5544(%RBP),%RSP
	add $-5544, %RSP
	jmp uuid_00000000000db55e
uuid_00000000000db55c:
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db50d
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000db50d
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db556
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000db556
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5472(%rbp)
	pushq -5480(%rbp)
	pushq -5488(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db557
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -4928(%RBP)
	popq -4920(%RBP)
	popq -4912(%RBP)
uuid_00000000000db55e:
	mov -5240(%RBP),%RSP
	add $-5536, %RSP
	jmp uuid_00000000000db561
uuid_00000000000db55f:
uuid_00000000000db561:
	mov -4960(%RBP),%RSP
	add $-5232, %RSP
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db664:
	mov -4616(%RBP),%RSP
	add $-5232, %RSP
	jmp uuid_00000000000db667
uuid_00000000000db665:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq $1
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db667:
	mov -4320(%RBP),%RSP
	add $-4608, %RSP
	jmp uuid_00000000000db66a
uuid_00000000000db668:
#call function as-constant : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db025
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call as_SB_constant_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -4320(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	pushq -4408(%rbp)
	pushq $0
	push %RBP
	mov -4488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db4f3
	jmp uuid_00000000000db4f5
uuid_00000000000db4f3:
	push %RBP
	jmp uuid_00000000000db4f0
	jmp uuid_00000000000db4f2
uuid_00000000000db4f0:
	push %RBP
	mov -4472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db4ed
	jmp uuid_00000000000db4ef
uuid_00000000000db4ed:
	movb $1, -4496(%rbp)
uuid_00000000000db4ef:
	mov -4520(%RBP),%RSP
	add $-4592, %RSP
uuid_00000000000db4f2:
	mov -4512(%RBP),%RSP
	add $-4592, %RSP
uuid_00000000000db4f5:
	mov -4504(%RBP),%RSP
	add $-4592, %RSP
	mov -4496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db4f7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db4f6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db4f9
uuid_00000000000db4f7:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4528(%rbp)
	pushq -4536(%rbp)
	pushq -4544(%rbp)
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	pushq -4568(%rbp)
	pushq -4576(%rbp)
	pushq -4584(%rbp)
	pushq -4592(%rbp)
	pushq -4320(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db4f9:
	mov -4416(%RBP),%RSP
	add $-4592, %RSP
uuid_00000000000db66a:
	mov -4000(%RBP),%RSP
	add $-4592, %RSP
	jmp uuid_00000000000db66d
uuid_00000000000db66b:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3808(%rbp)
	pushq -3816(%rbp)
	pushq -3824(%rbp)
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq -232(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3808(%rbp)
	pushq -3816(%rbp)
	pushq -3824(%rbp)
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -3808(%rbp)
	pushq -3816(%rbp)
	pushq -3824(%rbp)
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	push %RBP
	pushq -4024(%rbp)
	pushq -4032(%rbp)
	pushq -4040(%rbp)
	pushq -4048(%rbp)
	pushq -4056(%rbp)
	pushq -4064(%rbp)
	pushq -4072(%rbp)
	pushq -4080(%rbp)
	pushq -4088(%rbp)
	pushq $0
	push %RBP
	mov -4168(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db4b1
	jmp uuid_00000000000db4b3
uuid_00000000000db4b1:
	push %RBP
	jmp uuid_00000000000db4ae
	jmp uuid_00000000000db4b0
uuid_00000000000db4ae:
	push %RBP
	mov -4104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db4ab
	jmp uuid_00000000000db4ad
uuid_00000000000db4ab:
	movb $1, -4176(%rbp)
uuid_00000000000db4ad:
	mov -4200(%RBP),%RSP
	add $-4208, %RSP
uuid_00000000000db4b0:
	mov -4192(%RBP),%RSP
	add $-4208, %RSP
uuid_00000000000db4b3:
	mov -4184(%RBP),%RSP
	add $-4208, %RSP
	mov -4176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db4c8
	push %RBP
	jmp uuid_00000000000db4c5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db4c4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db4c7
uuid_00000000000db4c5:
uuid_00000000000db4c7:
	mov -4216(%RBP),%RSP
	add $-4216, %RSP
	jmp uuid_00000000000db4ca
uuid_00000000000db4c8:
	push %RBP
#call function is-reg8 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4208(%rbp)
	mov %RBX, %RBP
	call is_SB_reg8_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db4b5
	jmp uuid_00000000000db4b7
uuid_00000000000db4b5:
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db4b4
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -4016(%RBP)
	popq -4008(%RBP)
	popq -4000(%RBP)
uuid_00000000000db4b7:
	mov -4216(%RBP),%RSP
	add $-4216, %RSP
	push %RBP
#call function is-reg16 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4208(%rbp)
	mov %RBX, %RBP
	call is_SB_reg16_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db4b9
	jmp uuid_00000000000db4bb
uuid_00000000000db4b9:
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db4b8
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -4016(%RBP)
	popq -4008(%RBP)
	popq -4000(%RBP)
uuid_00000000000db4bb:
	mov -4224(%RBP),%RSP
	add $-4224, %RSP
	push %RBP
#call function is-reg32 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4208(%rbp)
	mov %RBX, %RBP
	call is_SB_reg32_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db4bd
	jmp uuid_00000000000db4bf
uuid_00000000000db4bd:
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db4bc
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -4016(%RBP)
	popq -4008(%RBP)
	popq -4000(%RBP)
uuid_00000000000db4bf:
	mov -4232(%RBP),%RSP
	add $-4232, %RSP
	push %RBP
#call function is-reg64 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4208(%rbp)
	mov %RBX, %RBP
	call is_SB_reg64_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db4c1
	jmp uuid_00000000000db4c3
uuid_00000000000db4c1:
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db4c0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -4016(%RBP)
	popq -4008(%RBP)
	popq -4000(%RBP)
uuid_00000000000db4c3:
	mov -4240(%RBP),%RSP
	add $-4240, %RSP
uuid_00000000000db4ca:
	mov -4096(%RBP),%RSP
	add $-4240, %RSP
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4000(%rbp)
	pushq -4008(%rbp)
	pushq -4016(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db4d1
	jmp uuid_00000000000db4d3
uuid_00000000000db4d1:
#call function with-only-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4000(%rbp)
	pushq -4008(%rbp)
	pushq -4016(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4256(%rbp)
	pushq -4264(%rbp)
	pushq -4272(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db4cb
	jmp uuid_00000000000db4cd
uuid_00000000000db4cb:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3776(%rbp)
	pushq -3784(%rbp)
	pushq -3792(%rbp)
	pushq -4256(%rbp)
	pushq -4264(%rbp)
	pushq -4272(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -3792(%RBP)
	popq -3784(%RBP)
	popq -3776(%RBP)
uuid_00000000000db4cd:
	mov -4280(%RBP),%RSP
	add $-4280, %RSP
#call function with-only-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4000(%rbp)
	pushq -4008(%rbp)
	pushq -4016(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4288(%rbp)
	pushq -4296(%rbp)
	pushq -4304(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db4ce
	jmp uuid_00000000000db4d0
uuid_00000000000db4ce:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3776(%rbp)
	pushq -3784(%rbp)
	pushq -3792(%rbp)
	pushq -4288(%rbp)
	pushq -4296(%rbp)
	pushq -4304(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -3792(%RBP)
	popq -3784(%RBP)
	popq -3776(%RBP)
uuid_00000000000db4d0:
	mov -4312(%RBP),%RSP
	add $-4312, %RSP
#call function with-fields : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3776(%rbp)
	pushq -3784(%rbp)
	pushq -3792(%rbp)
	mov %RBX, %RBP
	call with_SB_fields_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -3792(%RBP)
	popq -3784(%RBP)
	popq -3776(%RBP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -3776(%rbp)
	pushq -3784(%rbp)
	pushq -3792(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db4d3:
	mov -4248(%RBP),%RSP
	add $-4312, %RSP
uuid_00000000000db66d:
	mov -3480(%RBP),%RSP
	add $-4312, %RSP
	jmp uuid_00000000000db670
uuid_00000000000db66e:
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq $1
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db487
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3288(%rbp)
	pushq -3296(%rbp)
	pushq -3304(%rbp)
	pushq -3312(%rbp)
	pushq -3320(%rbp)
	pushq -3328(%rbp)
	pushq -3336(%rbp)
	pushq -3344(%rbp)
	pushq -3352(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3112(%rbp)
	pushq -3120(%rbp)
	pushq -3128(%rbp)
	pushq -3136(%rbp)
	pushq -3144(%rbp)
	pushq -3152(%rbp)
	pushq -3160(%rbp)
	pushq -3168(%rbp)
	pushq -3176(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	mov %RSP, %R14
	movq 112(%R14), %R15
	movq %R15, 112(%RSP)
	movq 104(%R14), %R15
	movq %R15, 104(%RSP)
	movq 96(%R14), %R15
	movq %R15, 96(%RSP)
	movq 88(%R14), %R15
	movq %R15, 88(%RSP)
	movq 80(%R14), %R15
	movq %R15, 80(%RSP)
	movq 72(%R14), %R15
	movq %R15, 72(%RSP)
	movq 64(%R14), %R15
	movq %R15, 64(%RSP)
	movq 56(%R14), %R15
	movq %R15, 56(%RSP)
	movq 48(%R14), %R15
	movq %R15, 48(%RSP)
	movq 40(%R14), %R15
	movq %R15, 40(%RSP)
	movq 32(%R14), %R15
	movq %R15, 32(%RSP)
	movq 24(%R14), %R15
	movq %R15, 24(%RSP)
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000db489
uuid_00000000000db487:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3288(%rbp)
	pushq -3296(%rbp)
	pushq -3304(%rbp)
	pushq -3312(%rbp)
	pushq -3320(%rbp)
	pushq -3328(%rbp)
	pushq -3336(%rbp)
	pushq -3344(%rbp)
	pushq -3352(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3488(%rbp)
	pushq -3496(%rbp)
	pushq -3504(%rbp)
	pushq -3512(%rbp)
	pushq -3520(%rbp)
	pushq -3528(%rbp)
	pushq -3536(%rbp)
	pushq -3544(%rbp)
	pushq -3552(%rbp)
	pushq -3560(%rbp)
	pushq -3568(%rbp)
	pushq -3576(%rbp)
	pushq -3584(%rbp)
	pushq -3592(%rbp)
	pushq -3600(%rbp)
	pushq -3112(%rbp)
	pushq -3120(%rbp)
	pushq -3128(%rbp)
	pushq -3136(%rbp)
	pushq -3144(%rbp)
	pushq -3152(%rbp)
	pushq -3160(%rbp)
	pushq -3168(%rbp)
	pushq -3176(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
uuid_00000000000db489:
	mov -3480(%RBP),%RSP
	add $-3600, %RSP
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2936(%rbp)
	pushq -2944(%rbp)
	pushq -2952(%rbp)
	pushq -2960(%rbp)
	pushq -2968(%rbp)
	pushq -2976(%rbp)
	pushq -2984(%rbp)
	pushq -2992(%rbp)
	pushq -3000(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function guess-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3112(%rbp)
	pushq -3120(%rbp)
	pushq -3128(%rbp)
	pushq -3136(%rbp)
	pushq -3144(%rbp)
	pushq -3152(%rbp)
	pushq -3160(%rbp)
	pushq -3168(%rbp)
	pushq -3176(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call guess_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db670:
	mov -2832(%RBP),%RSP
	add $-3600, %RSP
	jmp uuid_00000000000db673
uuid_00000000000db671:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daff0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db673:
	mov -2496(%RBP),%RSP
	add $-2824, %RSP
	jmp uuid_00000000000db676
uuid_00000000000db674:
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -2368(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db445
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daff0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db676:
	mov -2160(%RBP),%RSP
	add $-2488, %RSP
	jmp uuid_00000000000db679
uuid_00000000000db677:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq $0
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db426
	jmp uuid_00000000000db428
uuid_00000000000db426:
#call function with-only-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db416
	jmp uuid_00000000000db418
uuid_00000000000db416:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	movq -2240(%rbp), %r15
	movq %r15, -1952(%rbp)
	movq -2232(%rbp), %r15
	movq %r15, -1944(%rbp)
	movq -2224(%rbp), %r15
	movq %r15, -1936(%rbp)
uuid_00000000000db418:
	mov -2216(%RBP),%RSP
	add $-2240, %RSP
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	pushq -2312(%rbp)
	pushq $0
	push %RBP
	mov -2392(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db41f
	jmp uuid_00000000000db421
uuid_00000000000db41f:
	push %RBP
	mov -2384(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db41c
	jmp uuid_00000000000db41e
uuid_00000000000db41c:
	push %RBP
	mov -2376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db419
	jmp uuid_00000000000db41b
uuid_00000000000db419:
	movb $1, -2400(%rbp)
uuid_00000000000db41b:
	mov -2496(%RBP),%RSP
	add $-2568, %RSP
uuid_00000000000db41e:
	mov -2416(%RBP),%RSP
	add $-2568, %RSP
uuid_00000000000db421:
	mov -2408(%RBP),%RSP
	add $-2568, %RSP
	mov -2400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db423
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db422
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db425
uuid_00000000000db423:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2504(%rbp)
	pushq -2512(%rbp)
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	pushq -2568(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2424(%rbp)
	pushq -2432(%rbp)
	pushq -2440(%rbp)
	pushq -2448(%rbp)
	pushq -2456(%rbp)
	pushq -2464(%rbp)
	pushq -2472(%rbp)
	pushq -2480(%rbp)
	pushq -2488(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db425:
	mov -2320(%RBP),%RSP
	add $-2568, %RSP
uuid_00000000000db428:
	mov -2184(%RBP),%RSP
	add $-2568, %RSP
uuid_00000000000db679:
	mov -1640(%RBP),%RSP
	add $-2568, %RSP
	jmp uuid_00000000000db67c
uuid_00000000000db67a:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq $0
	push %RBP
	mov -1784(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db3e8
	jmp uuid_00000000000db3ea
uuid_00000000000db3e8:
	push %RBP
	mov -1776(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1880(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db3df
	jmp uuid_00000000000db3e1
uuid_00000000000db3df:
	push %RBP
	jmp uuid_00000000000db3dc
	jmp uuid_00000000000db3de
uuid_00000000000db3dc:
	push %RBP
	mov -1864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db3d9
	jmp uuid_00000000000db3db
uuid_00000000000db3d9:
	movb $1, -1888(%rbp)
uuid_00000000000db3db:
	mov -1912(%RBP),%RSP
	add $-1984, %RSP
uuid_00000000000db3de:
	mov -1904(%RBP),%RSP
	add $-1984, %RSP
uuid_00000000000db3e1:
	mov -1896(%RBP),%RSP
	add $-1984, %RSP
	mov -1888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db3e5
	jmp uuid_00000000000db3e7
uuid_00000000000db3e5:
	push %RBP
	jmp uuid_00000000000db3e2
	jmp uuid_00000000000db3e4
uuid_00000000000db3e2:
	movb $1, -1792(%rbp)
uuid_00000000000db3e4:
	mov -1992(%RBP),%RSP
	add $-1992, %RSP
uuid_00000000000db3e7:
	mov -1808(%RBP),%RSP
	add $-1992, %RSP
uuid_00000000000db3ea:
	mov -1800(%RBP),%RSP
	add $-1992, %RSP
	mov -1792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db3f2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db3f1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db3f4
uuid_00000000000db3f2:
	push %RBP
#call function is-string : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	mov %RBX, %RBP
	call is_SB_string_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db3eb
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq $0
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	jmp uuid_00000000000db3ed
uuid_00000000000db3eb:
uuid_00000000000db3ed:
	mov -2000(%RBP),%RSP
	add $-2000, %RSP
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db3ee
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db3f0
uuid_00000000000db3ee:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -1400(%RBP)
	popq -1392(%RBP)
	popq -1384(%RBP)
uuid_00000000000db3f0:
	mov -2032(%RBP),%RSP
	add $-2032, %RSP
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db3f4:
	mov -1712(%RBP),%RSP
	add $-2032, %RSP
uuid_00000000000db67c:
	mov -1088(%RBP),%RSP
	add $-2032, %RSP
	jmp uuid_00000000000db67f
uuid_00000000000db67d:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db3ab
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db3a8
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3a5
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3a6
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000db3a6
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3a7
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	jmp uuid_00000000000db3aa
uuid_00000000000db3a8:
uuid_00000000000db3aa:
	mov -1120(%RBP),%RSP
	add $-1120, %RSP
	jmp uuid_00000000000db3ad
uuid_00000000000db3ab:
uuid_00000000000db3ad:
	mov -1088(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000db67f:
	mov -848(%RBP),%RSP
	add $-1088, %RSP
	jmp uuid_00000000000db682
uuid_00000000000db680:
uuid_00000000000db682:
	mov -736(%RBP),%RSP
	add $-840, %RSP
	mov %RSP, %R14
	add $72, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	movq 112(%R14), %R15
	movq %R15, 112(%RSP)
	movq 104(%R14), %R15
	movq %R15, 104(%RSP)
	movq 96(%R14), %R15
	movq %R15, 96(%RSP)
	movq 88(%R14), %R15
	movq %R15, 88(%RSP)
	movq 80(%R14), %R15
	movq %R15, 80(%RSP)
	movq 72(%R14), %R15
	movq %R15, 72(%RSP)
	movq 64(%R14), %R15
	movq %R15, 64(%RSP)
	movq 56(%R14), %R15
	movq %R15, 56(%RSP)
	movq 48(%R14), %R15
	movq %R15, 48(%RSP)
	movq 40(%R14), %R15
	movq %R15, 40(%RSP)
	movq 32(%R14), %R15
	movq %R15, 32(%RSP)
	movq 24(%R14), %R15
	movq %R15, 24(%RSP)
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000db685
uuid_00000000000db683:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
uuid_00000000000db685:
	mov -480(%RBP),%RSP
	add $-728, %RSP
	jmp uuid_00000000000db688
uuid_00000000000db686:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daff0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db688:
	mov -400(%RBP),%RSP
	add $-472, %RSP
	jmp uuid_00000000000db68b
uuid_00000000000db689:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daff0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db68b:
	mov -320(%RBP),%RSP
	add $-392, %RSP
	push %RBP
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db68c
	mov %RSP, %R14
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000db68e
uuid_00000000000db68c:
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db5e3
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000db5e3
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
uuid_00000000000db68e:
	mov -400(%RBP),%RSP
	add $-400, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $240, %rsp
	ret
add_SB_alias_CL_ArrowNilConsTypeConsStringString:
#call function cons : Arrow<Cons<Tuple<Tuple<String,String>,Type>,List<Tuple<Tuple<String,String>,Type>>>,List<Tuple<Tuple<String,String>,Type>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq $0
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	mov $alias_SB_index_CL_ListTupleTypeTupleStringStringListTupleTypeTupleStringString, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call cons_CL_ArrowListTupleTypeTupleStringStringConsListTupleTypeTupleStringStringTupleTypeTupleStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	mov $alias_SB_index_CL_ListTupleTypeTupleStringStringListTupleTypeTupleStringString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	mov %rbp, %rsp
	sub $48, %rsp
	ret
find_SB_alias_CL_ArrowStringConsTypeString:
	pushq -8(%rbp)
	mov $alias_SB_index_CL_ListTupleTypeTupleStringStringListTupleTypeTupleStringString, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000db70f:
#call function non-zero : Arrow<List<Tuple<Tuple<String,String>,Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListTupleTypeTupleStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db710
	jmp uuid_00000000000db711
uuid_00000000000db710:
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db6d1
	jmp uuid_00000000000db6d3
uuid_00000000000db6d1:
	push %RBP
	mov -264(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db6ce
	jmp uuid_00000000000db6d0
uuid_00000000000db6ce:
	push %RBP
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	jmp uuid_00000000000db6cb
	jmp uuid_00000000000db6cd
uuid_00000000000db6cb:
	movb $1, -280(%rbp)
uuid_00000000000db6cd:
	mov -376(%RBP),%RSP
	add $-432, %RSP
uuid_00000000000db6d0:
	mov -296(%RBP),%RSP
	add $-432, %RSP
uuid_00000000000db6d3:
	mov -288(%RBP),%RSP
	add $-432, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db70c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db70b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db70e
uuid_00000000000db70c:
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	push %RBP
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db6fe
	jmp uuid_00000000000db700
uuid_00000000000db6fe:
	push %RBP
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq $0
	push %RBP
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db6ec
	jmp uuid_00000000000db6ee
uuid_00000000000db6ec:
	push %RBP
	mov -592(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db6e3
	jmp uuid_00000000000db6e5
uuid_00000000000db6e3:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -728(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db6da
	jmp uuid_00000000000db6dc
uuid_00000000000db6da:
	push %RBP
	mov -720(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -792(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db6d7
	jmp uuid_00000000000db6d9
uuid_00000000000db6d7:
	push %RBP
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	jmp uuid_00000000000db6d4
	jmp uuid_00000000000db6d6
uuid_00000000000db6d4:
	movb $1, -736(%rbp)
uuid_00000000000db6d6:
	mov -800(%RBP),%RSP
	add $-824, %RSP
uuid_00000000000db6d9:
	mov -752(%RBP),%RSP
	add $-824, %RSP
uuid_00000000000db6dc:
	mov -744(%RBP),%RSP
	add $-824, %RSP
	mov -736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db6e0
	jmp uuid_00000000000db6e2
uuid_00000000000db6e0:
	push %RBP
	jmp uuid_00000000000db6dd
	jmp uuid_00000000000db6df
uuid_00000000000db6dd:
	movb $1, -672(%rbp)
uuid_00000000000db6df:
	mov -832(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000db6e2:
	mov -688(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000db6e5:
	mov -680(%RBP),%RSP
	add $-832, %RSP
	mov -672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db6e9
	jmp uuid_00000000000db6eb
uuid_00000000000db6e9:
	push %RBP
	mov -584(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -848(%rbp)
	pushq $uuid_00000000000db622
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db6e6
	jmp uuid_00000000000db6e8
uuid_00000000000db6e6:
	movb $1, -608(%rbp)
uuid_00000000000db6e8:
	mov -840(%RBP),%RSP
	add $-848, %RSP
uuid_00000000000db6eb:
	mov -624(%RBP),%RSP
	add $-848, %RSP
uuid_00000000000db6ee:
	mov -616(%RBP),%RSP
	add $-848, %RSP
	mov -608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db6fb
	jmp uuid_00000000000db6fd
uuid_00000000000db6fb:
	push %RBP
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db6f5
	jmp uuid_00000000000db6f7
uuid_00000000000db6f5:
	push %RBP
	mov -872(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db6f2
	jmp uuid_00000000000db6f4
uuid_00000000000db6f2:
	push %RBP
	mov -864(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db6ef
	jmp uuid_00000000000db6f1
uuid_00000000000db6ef:
	movb $1, -888(%rbp)
uuid_00000000000db6f1:
	mov -920(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000db6f4:
	mov -904(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000db6f7:
	mov -896(%RBP),%RSP
	add $-928, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db6f8
	jmp uuid_00000000000db6fa
uuid_00000000000db6f8:
	movb $1, -560(%rbp)
uuid_00000000000db6fa:
	mov -856(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000db6fd:
	mov -576(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000db700:
	mov -568(%RBP),%RSP
	add $-928, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db708
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db707
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db70a
uuid_00000000000db708:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -928(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db704
	jmp uuid_00000000000db706
uuid_00000000000db704:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db701
	jmp uuid_00000000000db703
uuid_00000000000db701:
	movq -912(%rbp), %r15
	movq %r15, -48(%rbp)
	mov -912(%rbp), %r15
	mov %r15, -48(%rbp)
uuid_00000000000db703:
	mov -944(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000db706:
	mov -936(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000db70a:
	mov -496(%RBP),%RSP
	add $-944, %RSP
	movq -368(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -320(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -312(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -304(%rbp), %r15
	movq %r15, -56(%rbp)
uuid_00000000000db70e:
	mov -200(%RBP),%RSP
	add $-944, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $56, %rsp
	add $56, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000db70f
uuid_00000000000db711:
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
find_SB_alias_SB_type_CL_ArrowTypeString:
	pushq $0
	pushq $0
	pushq $3
	mov $alias_SB_index_CL_ListTupleTypeTupleStringStringListTupleTypeTupleStringString, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000db753:
#call function non-zero : Arrow<List<Tuple<Tuple<String,String>,Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListTupleTypeTupleStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db754
	jmp uuid_00000000000db755
uuid_00000000000db754:
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db730
	jmp uuid_00000000000db732
uuid_00000000000db730:
	push %RBP
	mov -256(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db72d
	jmp uuid_00000000000db72f
uuid_00000000000db72d:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq -240(%RBP)
	pushq -248(%RBP)
	jmp uuid_00000000000db72a
	jmp uuid_00000000000db72c
uuid_00000000000db72a:
	movb $1, -272(%rbp)
uuid_00000000000db72c:
	mov -368(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000db72f:
	mov -288(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000db732:
	mov -280(%RBP),%RSP
	add $-424, %RSP
	mov -272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db750
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db74f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db752
uuid_00000000000db750:
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	push %RBP
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db742
	jmp uuid_00000000000db744
uuid_00000000000db742:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000db73f
	jmp uuid_00000000000db741
uuid_00000000000db73f:
	push %RBP
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq $0
	push %RBP
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db739
	jmp uuid_00000000000db73b
uuid_00000000000db739:
	push %RBP
	mov -616(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db736
	jmp uuid_00000000000db738
uuid_00000000000db736:
	push %RBP
	mov -608(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db733
	jmp uuid_00000000000db735
uuid_00000000000db733:
	movb $1, -632(%rbp)
uuid_00000000000db735:
	mov -664(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000db738:
	mov -648(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000db73b:
	mov -640(%RBP),%RSP
	add $-672, %RSP
	mov -632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db73c
	jmp uuid_00000000000db73e
uuid_00000000000db73c:
	movb $1, -552(%rbp)
uuid_00000000000db73e:
	mov -600(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000db741:
	mov -568(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000db744:
	mov -560(%RBP),%RSP
	add $-672, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db74c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db74b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db74e
uuid_00000000000db74c:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -672(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db748
	jmp uuid_00000000000db74a
uuid_00000000000db748:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db745
	movq -592(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -584(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -576(%rbp), %r15
	movq %r15, -24(%rbp)
	jmp uuid_00000000000db747
uuid_00000000000db745:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000db747:
	mov -688(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000db74a:
	mov -680(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000db74e:
	mov -488(%RBP),%RSP
	add $-688, %RSP
	movq -360(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -320(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -312(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -304(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -296(%rbp), %r15
	movq %r15, -48(%rbp)
uuid_00000000000db752:
	mov -192(%RBP),%RSP
	add $-688, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $56, %rsp
	add $56, %rsp
	add $8, %rsp
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000db753
uuid_00000000000db755:
	subq $24, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
mark_SB_class_SB_exists_CL_ArrowNilString:
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,HashtableEq<String,U64>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_exists_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqU64StringConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $class_SB_exists_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $16, %rsp
	ret
mark_SB_parameter_SB_flat_CL_ArrowNilConsU64ConsU64String:
#call function .bind : Arrow<Cons<Cons<HashtableEq<Tuple<Tuple<String,U64>,U64>,U64>,Tuple<Tuple<String,U64>,U64>>,U64>,HashtableEq<Tuple<Tuple<String,U64>,U64>,U64>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $parameter_SB_is_SB_flat_SB_index_CL_HashtableEqU64TupleU64TupleU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq $0
	pushq -24(%rbp)
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqU64TupleU64TupleU64StringConsU64ConsTupleU64TupleU64StringHashtableEqU64TupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	mov $parameter_SB_is_SB_flat_SB_index_CL_HashtableEqU64TupleU64TupleU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_parameter_SB_flat_CL_ArrowU64ConsU64ConsU64String:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<Tuple<Tuple<String,U64>,U64>,U64>,Tuple<Tuple<String,U64>,U64>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $parameter_SB_is_SB_flat_SB_index_CL_HashtableEqU64TupleU64TupleU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq $0
	pushq -24(%rbp)
	pushq $0
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsTupleU64TupleU64StringHashtableEqU64TupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
mark_SB_as_SB_special_CL_ArrowNilConsTypeString:
#call function .bind : Arrow<Cons<Cons<HashtableEq<Tuple<String,Type>,U64>,Tuple<String,Type>>,U64>,HashtableEq<Tuple<String,Type>,U64>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $is_SB_special_SB_index_CL_HashtableEqU64TupleTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqU64TupleTypeStringConsU64ConsTupleTypeStringHashtableEqU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	mov $is_SB_special_SB_index_CL_HashtableEqU64TupleTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $40, %rsp
	ret
is_SB_special_CL_ArrowU64ConsTypeString:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<Tuple<String,Type>,U64>,Tuple<String,Type>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $is_SB_special_SB_index_CL_HashtableEqU64TupleTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsTupleTypeStringHashtableEqU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
index_SB_lone_SB_tag_CL_ArrowNilString:
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,HashtableEq<String,U64>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $lone_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqU64StringConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $lone_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_lone_SB_tag_CL_ArrowU64String:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $lone_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
index_SB_tag_SB_is_SB_fragment_CL_ArrowNilString:
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,HashtableEq<String,U64>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_is_SB_fragment_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqU64StringConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $tag_SB_is_SB_fragment_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_fragment_CL_ArrowU64String:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_is_SB_fragment_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_fragment_CL_ArrowU64Type:
#call function is-fragment : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function tag-of : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call tag_SB_of_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call is_SB_fragment_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
mark_SB_global_SB_as_SB_seen_CL_ArrowNilConsTypeConsTypeString:
	push %RBP
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function global-is-seen : Arrow<Cons<String,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call global_SB_is_SB_seen_CL_ArrowU64ConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db758
#call function .bind : Arrow<Cons<Cons<HashtableEq<Tuple<String,Type>,U64>,Tuple<String,Type>>,U64>,HashtableEq<Tuple<String,Type>,U64>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_symbol_SB_registry_CL_HashtableEqU64TupleTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqU64TupleTypeStringConsU64ConsTupleTypeStringHashtableEqU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	mov $global_SB_symbol_SB_registry_CL_HashtableEqU64TupleTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	jmp uuid_00000000000db75a
uuid_00000000000db758:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db756
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db757
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db75a:
	mov -72(%RBP),%RSP
	add $-72, %RSP
	mov %rbp, %rsp
	sub $64, %rsp
	ret
global_SB_is_SB_seen_CL_ArrowU64ConsTypeString:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<Tuple<String,Type>,U64>,Tuple<String,Type>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_symbol_SB_registry_CL_HashtableEqU64TupleTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsTupleTypeStringHashtableEqU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
has_SB_only_SB_child_CL_ArrowNilConsStringString:
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,String>,String>,String>,HashtableEq<String,String>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_to_SB_only_SB_child_CL_HashtableEqStringString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqStringStringConsStringConsStringHashtableEqStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $class_SB_to_SB_only_SB_child_CL_HashtableEqStringString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $24, %rsp
	ret
get_SB_only_SB_child_CL_ArrowStringString:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,String>,String>,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_to_SB_only_SB_child_CL_HashtableEqStringString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $uuid_00000000000daee6
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowStringConsStringConsStringHashtableEqStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
index_SB_of_SB_tag_CL_ArrowU64String:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_to_SB_index_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	mov $unknown_SB_index_SB_of_SB_tag_CL_U64, %r15
	pushq 0(%r15)
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
index_SB_index_SB_of_SB_tag_CL_ArrowNilConsU64String:
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,HashtableEq<String,U64>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_to_SB_index_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqU64StringConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $tag_SB_to_SB_index_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $24, %rsp
	ret
index_SB_size_SB_of_SB_class_CL_ArrowNilConsU64String:
#call function .bind : Arrow<Cons<Cons<Array<BTreeEq<String,U64>,?>,String>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov	$class_SB_to_SB_size_SB_index_CL_BTreeEqU64StringBTreeEqU64String, %r12
	push %R12
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowNilConsU64ConsStringArray_QM_BTreeEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
size_SB_of_SB_class_CL_ArrowU64String:
#call function .lookup : Arrow<Cons<Cons<BTreeEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_to_SB_size_SB_index_CL_BTreeEqU64StringBTreeEqU64String, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringBTreeEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
index_SB_class_SB_of_SB_tag_CL_ArrowNilConsTypeString:
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,Type>,String>,Type>,HashtableEq<String,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_to_SB_class_SB_index_CL_HashtableEqTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqTypeStringConsTypeConsStringHashtableEqTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov $tag_SB_to_SB_class_SB_index_CL_HashtableEqTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db779
	jmp uuid_00000000000db77b
uuid_00000000000db779:
	push %RBP
	jmp uuid_00000000000db776
	jmp uuid_00000000000db778
uuid_00000000000db776:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db773
	jmp uuid_00000000000db775
uuid_00000000000db773:
	movb $1, -104(%rbp)
uuid_00000000000db775:
	mov -128(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000db778:
	mov -120(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000db77b:
	mov -112(%RBP),%RSP
	add $-136, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db781
	push %RBP
	jmp uuid_00000000000db77e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db77d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db780
uuid_00000000000db77e:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db77c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db780:
	mov -144(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000db783
uuid_00000000000db781:
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,HashtableEq<String,U64>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_to_SB_yes_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -136(%rbp)
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqU64StringConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $class_SB_to_SB_yes_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
uuid_00000000000db783:
	mov -72(%RBP),%RSP
	add $-136, %RSP
	mov %rbp, %rsp
	sub $40, %rsp
	ret
class_SB_of_SB_tag_CL_ArrowTypeString:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,Type>,String>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_to_SB_class_SB_index_CL_HashtableEqTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowTypeConsTypeConsStringHashtableEqTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	subq $24, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_class_CL_ArrowU64String:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_to_SB_yes_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
index_SB_fields_SB_of_SB_tag_CL_ArrowNilConsTypeConsTypeString:
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,Tuple<Type,Type>>,String>,Tuple<Type,Type>>,HashtableEq<String,Tuple<Type,Type>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_to_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqTupleTypeTypeStringConsTupleTypeTypeConsStringHashtableEqTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	mov $tag_SB_to_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $64, %rsp
	ret
fields_SB_of_SB_tag_CL_ArrowTupleTypeTypeString:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,Tuple<Type,Type>>,String>,Tuple<Type,Type>>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_to_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowTupleTypeTypeConsTupleTypeTypeConsStringHashtableEqTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	subq $56, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
fields_SB_of_SB_tag_CL_ArrowTypeConsTypeType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	push %RBP
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db79d
	jmp uuid_00000000000db79f
uuid_00000000000db79d:
	push %RBP
	mov -128(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db793
	jmp uuid_00000000000db795
uuid_00000000000db793:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db790
	jmp uuid_00000000000db792
uuid_00000000000db790:
	push %RBP
	pushq -168(%RBP)
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db78a
	jmp uuid_00000000000db78c
uuid_00000000000db78a:
	push %RBP
	jmp uuid_00000000000db787
	jmp uuid_00000000000db789
uuid_00000000000db787:
	push %RBP
	mov -280(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db784
	jmp uuid_00000000000db786
uuid_00000000000db784:
	movb $1, -304(%rbp)
uuid_00000000000db786:
	mov -328(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000db789:
	mov -320(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000db78c:
	mov -312(%RBP),%RSP
	add $-336, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db78d
	jmp uuid_00000000000db78f
uuid_00000000000db78d:
	movb $1, -208(%rbp)
uuid_00000000000db78f:
	mov -272(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000db792:
	mov -224(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000db795:
	mov -216(%RBP),%RSP
	add $-336, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db79a
	jmp uuid_00000000000db79c
uuid_00000000000db79a:
	push %RBP
	mov -120(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -352(%rbp)
	pushq $uuid_00000000000db796
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db797
	jmp uuid_00000000000db799
uuid_00000000000db797:
	movb $1, -144(%rbp)
uuid_00000000000db799:
	mov -344(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000db79c:
	mov -160(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000db79f:
	mov -152(%RBP),%RSP
	add $-352, %RSP
	mov -144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db7be
	push %RBP
	jmp uuid_00000000000db7bb
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db7ba
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db7bd
uuid_00000000000db7bb:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db7b9
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db7bd:
	mov -360(%RBP),%RSP
	add $-360, %RSP
	jmp uuid_00000000000db7c0
uuid_00000000000db7be:
#call function fields-of-tag : Arrow<String,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	mov %RBX, %RBP
	call fields_SB_of_SB_tag_CL_ArrowTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push %RBP
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq $0
	push %RBP
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db7a6
	jmp uuid_00000000000db7a8
uuid_00000000000db7a6:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	mov -520(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db7a3
	jmp uuid_00000000000db7a5
uuid_00000000000db7a3:
	push %RBP
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db7a0
	jmp uuid_00000000000db7a2
uuid_00000000000db7a0:
	movb $1, -480(%rbp)
uuid_00000000000db7a2:
	mov -528(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000db7a5:
	mov -496(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000db7a8:
	mov -488(%RBP),%RSP
	add $-552, %RSP
	mov -480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db7b6
	push %RBP
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db7af
	jmp uuid_00000000000db7b1
uuid_00000000000db7af:
	push %RBP
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	jmp uuid_00000000000db7ac
	jmp uuid_00000000000db7ae
uuid_00000000000db7ac:
	push %RBP
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	jmp uuid_00000000000db7a9
	jmp uuid_00000000000db7ab
uuid_00000000000db7a9:
	movb $1, -624(%rbp)
uuid_00000000000db7ab:
	mov -672(%RBP),%RSP
	add $-696, %RSP
uuid_00000000000db7ae:
	mov -640(%RBP),%RSP
	add $-696, %RSP
uuid_00000000000db7b1:
	mov -632(%RBP),%RSP
	add $-696, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db7b3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db7b2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db7b5
uuid_00000000000db7b3:
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000db7b5:
	mov -560(%RBP),%RSP
	add $-696, %RSP
	jmp uuid_00000000000db7b8
uuid_00000000000db7b6:
uuid_00000000000db7b8:
	mov -416(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000db7c0:
	mov -112(%RBP),%RSP
	add $-552, %RSP
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	pushq $uuid_00000000000db7c1
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fields-of-type : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3a7
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db025
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db5e1
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daeaa
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call fields_SB_of_SB_type_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	subq $24, %rsp
	pushq -576(%rbp)
	pushq -568(%rbp)
	pushq -560(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
set_SB_type_SB_fields_CL_ArrowNilConsTypeType:
	pushq $uuid_00000000000daee6
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db7d0
	jmp uuid_00000000000db7d2
uuid_00000000000db7d0:
	push %RBP
	jmp uuid_00000000000db7cd
	jmp uuid_00000000000db7cf
uuid_00000000000db7cd:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db7ca
	jmp uuid_00000000000db7cc
uuid_00000000000db7ca:
	movb $1, -128(%rbp)
uuid_00000000000db7cc:
	mov -152(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000db7cf:
	mov -144(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000db7d2:
	mov -136(%RBP),%RSP
	add $-160, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db7d8
	push %RBP
	jmp uuid_00000000000db7d5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db7d4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db7d7
uuid_00000000000db7d5:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db7d3
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db7d7:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000db7da
uuid_00000000000db7d8:
	movq -160(%rbp), %r15
	movq %r15, -64(%rbp)
	mov -160(%rbp), %r15
	mov %r15, -64(%rbp)
uuid_00000000000db7da:
	mov -96(%RBP),%RSP
	add $-160, %RSP
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,Tuple<Type,Type>>,String>,Tuple<Type,Type>>,HashtableEq<String,Tuple<Type,Type>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $type_SB_complex_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -64(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqTupleTypeTypeStringConsTupleTypeTypeConsStringHashtableEqTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	mov $type_SB_complex_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $56, %rsp
	ret
get_SB_vararg_SB_inner_CL_ArrowTypeType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db7e1
	jmp uuid_00000000000db7e3
uuid_00000000000db7e1:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db7de
	jmp uuid_00000000000db7e0
uuid_00000000000db7de:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db7db
	jmp uuid_00000000000db7dd
uuid_00000000000db7db:
	movb $1, -120(%rbp)
uuid_00000000000db7dd:
	mov -168(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000db7e0:
	mov -136(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000db7e3:
	mov -128(%RBP),%RSP
	add $-192, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db803
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db7f9
	jmp uuid_00000000000db7fb
uuid_00000000000db7f9:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -288(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db7f0
	jmp uuid_00000000000db7f2
uuid_00000000000db7f0:
	push %RBP
	jmp uuid_00000000000db7ed
	jmp uuid_00000000000db7ef
uuid_00000000000db7ed:
	push %RBP
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	jmp uuid_00000000000db7ea
	jmp uuid_00000000000db7ec
uuid_00000000000db7ea:
	movb $1, -296(%rbp)
uuid_00000000000db7ec:
	mov -320(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000db7ef:
	mov -312(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000db7f2:
	mov -304(%RBP),%RSP
	add $-344, %RSP
	mov -296(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db7f6
	jmp uuid_00000000000db7f8
uuid_00000000000db7f6:
	push %RBP
	mov -208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq $uuid_00000000000db284
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db7f3
	jmp uuid_00000000000db7f5
uuid_00000000000db7f3:
	movb $1, -232(%rbp)
uuid_00000000000db7f5:
	mov -352(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000db7f8:
	mov -248(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000db7fb:
	mov -240(%RBP),%RSP
	add $-360, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db800
	push %RBP
	jmp uuid_00000000000db7fd
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db7fc
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db7ff
uuid_00000000000db7fd:
uuid_00000000000db7ff:
	mov -368(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000db802
uuid_00000000000db800:
	movq -344(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000db802:
	mov -200(%RBP),%RSP
	add $-360, %RSP
	jmp uuid_00000000000db805
uuid_00000000000db803:
#call function get-vararg-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call get_SB_vararg_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db7e4
	jmp uuid_00000000000db7e6
uuid_00000000000db7e4:
	movq -192(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000db7e6:
	mov -200(%RBP),%RSP
	add $-200, %RSP
#call function get-vararg-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call get_SB_vararg_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db7e7
	jmp uuid_00000000000db7e9
uuid_00000000000db7e7:
	movq -160(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -152(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -144(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000db7e9:
	mov -208(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000db805:
	mov -88(%RBP),%RSP
	add $-208, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString:
#call function apply : Arrow<Cons<Cons<Cons<Cons<Cons<String,Type>,Type>,U64>,AST>,U64>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $1
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq $0
	mov %RBX, %RBP
	call apply_CL_ArrowTupleTypeTypeConsU64ConsASTConsU64ConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
maybe_SB_local_SB_variable_CL_ArrowTypeType:
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db807
	jmp uuid_00000000000db809
uuid_00000000000db807:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db806
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000db809:
	mov -40(%RBP),%RSP
	add $-40, %RSP
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_constructor_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db810
	jmp uuid_00000000000db812
uuid_00000000000db810:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db80d
	jmp uuid_00000000000db80f
uuid_00000000000db80d:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db80a
	jmp uuid_00000000000db80c
uuid_00000000000db80a:
	movb $1, -104(%rbp)
uuid_00000000000db80c:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000db80f:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000db812:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db83b
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db819
	jmp uuid_00000000000db81b
uuid_00000000000db819:
	push %RBP
	jmp uuid_00000000000db816
	jmp uuid_00000000000db818
uuid_00000000000db816:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000db5df
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db813
	jmp uuid_00000000000db815
uuid_00000000000db813:
	movb $1, -216(%rbp)
uuid_00000000000db815:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000db818:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000db81b:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db838
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db822
	jmp uuid_00000000000db824
uuid_00000000000db822:
	push %RBP
	jmp uuid_00000000000db81f
	jmp uuid_00000000000db821
uuid_00000000000db81f:
	push %RBP
	mov -264(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -320(%rbp)
	pushq $uuid_00000000000db622
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db81c
	jmp uuid_00000000000db81e
uuid_00000000000db81c:
	movb $1, -288(%rbp)
uuid_00000000000db81e:
	mov -312(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000db821:
	mov -304(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000db824:
	mov -296(%RBP),%RSP
	add $-320, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db835
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db82b
	jmp uuid_00000000000db82d
uuid_00000000000db82b:
	push %RBP
	jmp uuid_00000000000db828
	jmp uuid_00000000000db82a
uuid_00000000000db828:
	push %RBP
	mov -336(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -392(%rbp)
	pushq $uuid_00000000000db3a7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db825
	jmp uuid_00000000000db827
uuid_00000000000db825:
	movb $1, -360(%rbp)
uuid_00000000000db827:
	mov -384(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000db82a:
	mov -376(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000db82d:
	mov -368(%RBP),%RSP
	add $-392, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db832
	push %RBP
	jmp uuid_00000000000db82f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db82e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db831
uuid_00000000000db82f:
uuid_00000000000db831:
	mov -400(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000db834
uuid_00000000000db832:
#call function is-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call is_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000db834:
	mov -328(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000db837
uuid_00000000000db835:
#call function is-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call is_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000db837:
	mov -256(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000db83a
uuid_00000000000db838:
	movq $1, -40(%rbp)
uuid_00000000000db83a:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000db83d
uuid_00000000000db83b:
#call function is-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000db83d:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_simple_SB_constructor_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db844
	jmp uuid_00000000000db846
uuid_00000000000db844:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db841
	jmp uuid_00000000000db843
uuid_00000000000db841:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db83e
	jmp uuid_00000000000db840
uuid_00000000000db83e:
	movb $1, -104(%rbp)
uuid_00000000000db840:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000db843:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000db846:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db857
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db84d
	jmp uuid_00000000000db84f
uuid_00000000000db84d:
	push %RBP
	jmp uuid_00000000000db84a
	jmp uuid_00000000000db84c
uuid_00000000000db84a:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000db5df
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db847
	jmp uuid_00000000000db849
uuid_00000000000db847:
	movb $1, -216(%rbp)
uuid_00000000000db849:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000db84c:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000db84f:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db854
	push %RBP
	jmp uuid_00000000000db851
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db850
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db853
uuid_00000000000db851:
uuid_00000000000db853:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000db856
uuid_00000000000db854:
	movq $1, -40(%rbp)
uuid_00000000000db856:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000db859
uuid_00000000000db857:
#call function is-simple-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_simple_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-simple-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_simple_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000db859:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_tag_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db860
	jmp uuid_00000000000db862
uuid_00000000000db860:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db85d
	jmp uuid_00000000000db85f
uuid_00000000000db85d:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db85a
	jmp uuid_00000000000db85c
uuid_00000000000db85a:
	movb $1, -104(%rbp)
uuid_00000000000db85c:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000db85f:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000db862:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db873
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db869
	jmp uuid_00000000000db86b
uuid_00000000000db869:
	push %RBP
	jmp uuid_00000000000db866
	jmp uuid_00000000000db868
uuid_00000000000db866:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000db796
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db863
	jmp uuid_00000000000db865
uuid_00000000000db863:
	movb $1, -216(%rbp)
uuid_00000000000db865:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000db868:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000db86b:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db870
	push %RBP
	jmp uuid_00000000000db86d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db86c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db86f
uuid_00000000000db86d:
uuid_00000000000db86f:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000db872
uuid_00000000000db870:
	movq $1, -40(%rbp)
uuid_00000000000db872:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000db875
uuid_00000000000db873:
#call function is-tag : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_tag_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-tag : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_tag_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000db875:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_open_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db90c
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -128(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db879
	jmp uuid_00000000000db87b
uuid_00000000000db879:
	push %RBP
	jmp uuid_00000000000db876
	jmp uuid_00000000000db878
uuid_00000000000db876:
	movb $1, -136(%rbp)
uuid_00000000000db878:
	mov -152(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000db87b:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	mov -136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db909
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db882
	jmp uuid_00000000000db884
uuid_00000000000db882:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db87f
	jmp uuid_00000000000db881
uuid_00000000000db87f:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db87c
	jmp uuid_00000000000db87e
uuid_00000000000db87c:
	movb $1, -192(%rbp)
uuid_00000000000db87e:
	mov -240(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000db881:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000db884:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db906
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db8a3
	jmp uuid_00000000000db8a5
uuid_00000000000db8a3:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -360(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db89a
	jmp uuid_00000000000db89c
uuid_00000000000db89a:
	push %RBP
	mov -352(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -424(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db891
	jmp uuid_00000000000db893
uuid_00000000000db891:
	push %RBP
	mov -416(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db88e
	jmp uuid_00000000000db890
uuid_00000000000db88e:
	push %RBP
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	mov -520(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db88b
	jmp uuid_00000000000db88d
uuid_00000000000db88b:
	movb $1, -432(%rbp)
uuid_00000000000db88d:
	mov -496(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000db890:
	mov -448(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000db893:
	mov -440(%RBP),%RSP
	add $-520, %RSP
	mov -432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db897
	jmp uuid_00000000000db899
uuid_00000000000db897:
	push %RBP
	jmp uuid_00000000000db894
	jmp uuid_00000000000db896
uuid_00000000000db894:
	movb $1, -368(%rbp)
uuid_00000000000db896:
	mov -528(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000db899:
	mov -384(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000db89c:
	mov -376(%RBP),%RSP
	add $-528, %RSP
	mov -368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db8a0
	jmp uuid_00000000000db8a2
uuid_00000000000db8a0:
	push %RBP
	mov -280(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -544(%rbp)
	pushq $uuid_00000000000db084
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db89d
	jmp uuid_00000000000db89f
uuid_00000000000db89d:
	movb $1, -304(%rbp)
uuid_00000000000db89f:
	mov -536(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000db8a2:
	mov -320(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000db8a5:
	mov -312(%RBP),%RSP
	add $-544, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db903
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -576(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db8be
	jmp uuid_00000000000db8c0
uuid_00000000000db8be:
	push %RBP
	mov -568(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -640(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db8b5
	jmp uuid_00000000000db8b7
uuid_00000000000db8b5:
	push %RBP
	mov -632(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -704(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db8ac
	jmp uuid_00000000000db8ae
uuid_00000000000db8ac:
	push %RBP
	mov -696(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -768(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db8a9
	jmp uuid_00000000000db8ab
uuid_00000000000db8a9:
	push %RBP
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq -688(%RBP)
	jmp uuid_00000000000db8a6
	jmp uuid_00000000000db8a8
uuid_00000000000db8a6:
	movb $1, -712(%rbp)
uuid_00000000000db8a8:
	mov -776(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000db8ab:
	mov -728(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000db8ae:
	mov -720(%RBP),%RSP
	add $-800, %RSP
	mov -712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db8b2
	jmp uuid_00000000000db8b4
uuid_00000000000db8b2:
	push %RBP
	jmp uuid_00000000000db8af
	jmp uuid_00000000000db8b1
uuid_00000000000db8af:
	movb $1, -648(%rbp)
uuid_00000000000db8b1:
	mov -808(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000db8b4:
	mov -664(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000db8b7:
	mov -656(%RBP),%RSP
	add $-808, %RSP
	mov -648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db8bb
	jmp uuid_00000000000db8bd
uuid_00000000000db8bb:
	push %RBP
	mov -560(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -824(%rbp)
	pushq $uuid_00000000000db084
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db8b8
	jmp uuid_00000000000db8ba
uuid_00000000000db8b8:
	movb $1, -584(%rbp)
uuid_00000000000db8ba:
	mov -816(%RBP),%RSP
	add $-824, %RSP
uuid_00000000000db8bd:
	mov -600(%RBP),%RSP
	add $-824, %RSP
uuid_00000000000db8c0:
	mov -592(%RBP),%RSP
	add $-824, %RSP
	mov -584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db900
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -856(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db8da
	jmp uuid_00000000000db8dc
uuid_00000000000db8da:
	push %RBP
	mov -848(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db8d0
	jmp uuid_00000000000db8d2
uuid_00000000000db8d0:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -984(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db8c7
	jmp uuid_00000000000db8c9
uuid_00000000000db8c7:
	push %RBP
	mov -976(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1048(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db8c4
	jmp uuid_00000000000db8c6
uuid_00000000000db8c4:
	push %RBP
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	jmp uuid_00000000000db8c1
	jmp uuid_00000000000db8c3
uuid_00000000000db8c1:
	movb $1, -992(%rbp)
uuid_00000000000db8c3:
	mov -1056(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000db8c6:
	mov -1008(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000db8c9:
	mov -1000(%RBP),%RSP
	add $-1080, %RSP
	mov -992(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db8cd
	jmp uuid_00000000000db8cf
uuid_00000000000db8cd:
	push %RBP
	jmp uuid_00000000000db8ca
	jmp uuid_00000000000db8cc
uuid_00000000000db8ca:
	movb $1, -928(%rbp)
uuid_00000000000db8cc:
	mov -1088(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000db8cf:
	mov -944(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000db8d2:
	mov -936(%RBP),%RSP
	add $-1088, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db8d7
	jmp uuid_00000000000db8d9
uuid_00000000000db8d7:
	push %RBP
	mov -840(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1104(%rbp)
	pushq $uuid_00000000000db8d3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db8d4
	jmp uuid_00000000000db8d6
uuid_00000000000db8d4:
	movb $1, -864(%rbp)
uuid_00000000000db8d6:
	mov -1096(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000db8d9:
	mov -880(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000db8dc:
	mov -872(%RBP),%RSP
	add $-1104, %RSP
	mov -864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db8fd
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db8e3
	jmp uuid_00000000000db8e5
uuid_00000000000db8e3:
	push %RBP
	mov -1128(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db8e0
	jmp uuid_00000000000db8e2
uuid_00000000000db8e0:
	push %RBP
	jmp uuid_00000000000db8dd
	jmp uuid_00000000000db8df
uuid_00000000000db8dd:
	movb $1, -1144(%rbp)
uuid_00000000000db8df:
	mov -1208(%RBP),%RSP
	add $-1208, %RSP
uuid_00000000000db8e2:
	mov -1160(%RBP),%RSP
	add $-1208, %RSP
uuid_00000000000db8e5:
	mov -1152(%RBP),%RSP
	add $-1208, %RSP
	mov -1144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db8fa
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db8f9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db8fc
uuid_00000000000db8fa:
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
uuid_00000000000db8f6:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db8f7
	jmp uuid_00000000000db8f8
uuid_00000000000db8f7:
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	push %RBP
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq $0
	push %RBP
	mov -1336(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db8ec
	jmp uuid_00000000000db8ee
uuid_00000000000db8ec:
	push %RBP
	mov -1328(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db8e9
	jmp uuid_00000000000db8eb
uuid_00000000000db8e9:
	push %RBP
	pushq -1304(%RBP)
	pushq -1312(%RBP)
	pushq -1320(%RBP)
	jmp uuid_00000000000db8e6
	jmp uuid_00000000000db8e8
uuid_00000000000db8e6:
	movb $1, -1344(%rbp)
uuid_00000000000db8e8:
	mov -1408(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000db8eb:
	mov -1360(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000db8ee:
	mov -1352(%RBP),%RSP
	add $-1432, %RSP
	mov -1344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db8f3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db8f2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db8f5
uuid_00000000000db8f3:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db8ef
	jmp uuid_00000000000db8f1
uuid_00000000000db8ef:
	movq $1, -40(%rbp)
uuid_00000000000db8f1:
	mov -1440(%RBP),%RSP
	add $-1440, %RSP
	movq -1400(%rbp), %r15
	movq %r15, -1248(%rbp)
	movq -1392(%rbp), %r15
	movq %r15, -1240(%rbp)
	movq -1384(%rbp), %r15
	movq %r15, -1232(%rbp)
	movq -1376(%rbp), %r15
	movq %r15, -1224(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -1216(%rbp)
uuid_00000000000db8f5:
	mov -1296(%RBP),%RSP
	add $-1440, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000db8f6
uuid_00000000000db8f8:
uuid_00000000000db8fc:
	mov -1112(%RBP),%RSP
	add $-1248, %RSP
	jmp uuid_00000000000db8ff
uuid_00000000000db8fd:
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000db8ff:
	mov -832(%RBP),%RSP
	add $-1104, %RSP
	jmp uuid_00000000000db902
uuid_00000000000db900:
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000db902:
	mov -552(%RBP),%RSP
	add $-824, %RSP
	jmp uuid_00000000000db905
uuid_00000000000db903:
uuid_00000000000db905:
	mov -272(%RBP),%RSP
	add $-544, %RSP
	jmp uuid_00000000000db908
uuid_00000000000db906:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db885
	jmp uuid_00000000000db887
uuid_00000000000db885:
	movq $1, -40(%rbp)
uuid_00000000000db887:
	mov -272(%RBP),%RSP
	add $-272, %RSP
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db888
	jmp uuid_00000000000db88a
uuid_00000000000db888:
	movq $1, -40(%rbp)
uuid_00000000000db88a:
	mov -280(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000db908:
	mov -160(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000db90b
uuid_00000000000db909:
	movq $1, -40(%rbp)
uuid_00000000000db90b:
	mov -104(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000db90e
uuid_00000000000db90c:
	movq $1, -40(%rbp)
uuid_00000000000db90e:
	mov -72(%RBP),%RSP
	add $-96, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_vararg_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db915
	jmp uuid_00000000000db917
uuid_00000000000db915:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db912
	jmp uuid_00000000000db914
uuid_00000000000db912:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db90f
	jmp uuid_00000000000db911
uuid_00000000000db90f:
	movb $1, -104(%rbp)
uuid_00000000000db911:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000db914:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000db917:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db928
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db91e
	jmp uuid_00000000000db920
uuid_00000000000db91e:
	push %RBP
	jmp uuid_00000000000db91b
	jmp uuid_00000000000db91d
uuid_00000000000db91b:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000db284
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db918
	jmp uuid_00000000000db91a
uuid_00000000000db918:
	movb $1, -216(%rbp)
uuid_00000000000db91a:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000db91d:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000db920:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db925
	push %RBP
	jmp uuid_00000000000db922
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db921
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db924
uuid_00000000000db922:
uuid_00000000000db924:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000db927
uuid_00000000000db925:
	movq $1, -40(%rbp)
uuid_00000000000db927:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000db92a
uuid_00000000000db928:
#call function is-vararg : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_vararg_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-vararg : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_vararg_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000db92a:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_parameterized_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db93a
	jmp uuid_00000000000db93c
uuid_00000000000db93a:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db931
	jmp uuid_00000000000db933
uuid_00000000000db931:
	push %RBP
	jmp uuid_00000000000db92e
	jmp uuid_00000000000db930
uuid_00000000000db92e:
	push %RBP
	jmp uuid_00000000000db92b
	jmp uuid_00000000000db92d
uuid_00000000000db92b:
	movb $1, -168(%rbp)
uuid_00000000000db92d:
	mov -192(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000db930:
	mov -184(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000db933:
	mov -176(%RBP),%RSP
	add $-192, %RSP
	mov -168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db937
	jmp uuid_00000000000db939
uuid_00000000000db937:
	push %RBP
	jmp uuid_00000000000db934
	jmp uuid_00000000000db936
uuid_00000000000db934:
	movb $1, -104(%rbp)
uuid_00000000000db936:
	mov -200(%RBP),%RSP
	add $-200, %RSP
uuid_00000000000db939:
	mov -120(%RBP),%RSP
	add $-200, %RSP
uuid_00000000000db93c:
	mov -112(%RBP),%RSP
	add $-200, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db953
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db943
	jmp uuid_00000000000db945
uuid_00000000000db943:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db940
	jmp uuid_00000000000db942
uuid_00000000000db940:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db93d
	jmp uuid_00000000000db93f
uuid_00000000000db93d:
	movb $1, -240(%rbp)
uuid_00000000000db93f:
	mov -288(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000db942:
	mov -256(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000db945:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db950
	push %RBP
	jmp uuid_00000000000db94d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db94c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db94f
uuid_00000000000db94d:
uuid_00000000000db94f:
	mov -320(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000db952
uuid_00000000000db950:
	push %RBP
#call function is-parameterized : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call is_SB_parameterized_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db946
	jmp uuid_00000000000db948
uuid_00000000000db946:
	movq $1, -40(%rbp)
uuid_00000000000db948:
	mov -320(%RBP),%RSP
	add $-320, %RSP
	push %RBP
#call function is-parameterized : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call is_SB_parameterized_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db949
	jmp uuid_00000000000db94b
uuid_00000000000db949:
	movq $1, -40(%rbp)
uuid_00000000000db94b:
	mov -328(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000db952:
	mov -208(%RBP),%RSP
	add $-328, %RSP
	jmp uuid_00000000000db955
uuid_00000000000db953:
	movq $1, -40(%rbp)
uuid_00000000000db955:
	mov -72(%RBP),%RSP
	add $-200, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_sized_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db98a
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -128(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db95c
	jmp uuid_00000000000db95e
uuid_00000000000db95c:
	push %RBP
	jmp uuid_00000000000db959
	jmp uuid_00000000000db95b
uuid_00000000000db959:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq $uuid_00000000000db3a7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db956
	jmp uuid_00000000000db958
uuid_00000000000db956:
	movb $1, -136(%rbp)
uuid_00000000000db958:
	mov -160(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000db95b:
	mov -152(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000db95e:
	mov -144(%RBP),%RSP
	add $-168, %RSP
	mov -136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db987
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db965
	jmp uuid_00000000000db967
uuid_00000000000db965:
	push %RBP
	jmp uuid_00000000000db962
	jmp uuid_00000000000db964
uuid_00000000000db962:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000db622
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db95f
	jmp uuid_00000000000db961
uuid_00000000000db95f:
	movb $1, -208(%rbp)
uuid_00000000000db961:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000db964:
	mov -224(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000db967:
	mov -216(%RBP),%RSP
	add $-240, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db984
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db96e
	jmp uuid_00000000000db970
uuid_00000000000db96e:
	push %RBP
	jmp uuid_00000000000db96b
	jmp uuid_00000000000db96d
uuid_00000000000db96b:
	push %RBP
	mov -256(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq $uuid_00000000000db5e1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db968
	jmp uuid_00000000000db96a
uuid_00000000000db968:
	movb $1, -280(%rbp)
uuid_00000000000db96a:
	mov -304(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000db96d:
	mov -296(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000db970:
	mov -288(%RBP),%RSP
	add $-312, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db981
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db977
	jmp uuid_00000000000db979
uuid_00000000000db977:
	push %RBP
	mov -336(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db974
	jmp uuid_00000000000db976
uuid_00000000000db974:
	push %RBP
	mov -328(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db971
	jmp uuid_00000000000db973
uuid_00000000000db971:
	movb $1, -352(%rbp)
uuid_00000000000db973:
	mov -400(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000db976:
	mov -368(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000db979:
	mov -360(%RBP),%RSP
	add $-424, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db97e
	push %RBP
	jmp uuid_00000000000db97b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db97a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db97d
uuid_00000000000db97b:
uuid_00000000000db97d:
	mov -432(%RBP),%RSP
	add $-432, %RSP
	jmp uuid_00000000000db980
uuid_00000000000db97e:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function is-sized : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov %RBX, %RBP
	call is_SB_sized_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-sized : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	mov %RBX, %RBP
	call is_SB_sized_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000db980:
	mov -320(%RBP),%RSP
	add $-424, %RSP
	jmp uuid_00000000000db983
uuid_00000000000db981:
	movq $1, -40(%rbp)
uuid_00000000000db983:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000db986
uuid_00000000000db984:
	movq $1, -40(%rbp)
uuid_00000000000db986:
	mov -176(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000db989
uuid_00000000000db987:
	movq $1, -40(%rbp)
uuid_00000000000db989:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000db98c
uuid_00000000000db98a:
	movq $1, -40(%rbp)
uuid_00000000000db98c:
	mov -72(%RBP),%RSP
	add $-96, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
has_SB_representation_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db993
	jmp uuid_00000000000db995
uuid_00000000000db993:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db990
	jmp uuid_00000000000db992
uuid_00000000000db990:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db98d
	jmp uuid_00000000000db98f
uuid_00000000000db98d:
	movb $1, -104(%rbp)
uuid_00000000000db98f:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000db992:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000db995:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db9e3
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db99d
	jmp uuid_00000000000db99f
uuid_00000000000db99d:
	push %RBP
	jmp uuid_00000000000db99a
	jmp uuid_00000000000db99c
uuid_00000000000db99a:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000db996
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db997
	jmp uuid_00000000000db999
uuid_00000000000db997:
	movb $1, -216(%rbp)
uuid_00000000000db999:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000db99c:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000db99f:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db9e0
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db9a6
	jmp uuid_00000000000db9a8
uuid_00000000000db9a6:
	push %RBP
	jmp uuid_00000000000db9a3
	jmp uuid_00000000000db9a5
uuid_00000000000db9a3:
	push %RBP
	mov -264(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -320(%rbp)
	pushq $uuid_00000000000db4b4
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db9a0
	jmp uuid_00000000000db9a2
uuid_00000000000db9a0:
	movb $1, -288(%rbp)
uuid_00000000000db9a2:
	mov -312(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000db9a5:
	mov -304(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000db9a8:
	mov -296(%RBP),%RSP
	add $-320, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db9dd
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db9af
	jmp uuid_00000000000db9b1
uuid_00000000000db9af:
	push %RBP
	jmp uuid_00000000000db9ac
	jmp uuid_00000000000db9ae
uuid_00000000000db9ac:
	push %RBP
	mov -336(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -392(%rbp)
	pushq $uuid_00000000000db4b8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db9a9
	jmp uuid_00000000000db9ab
uuid_00000000000db9a9:
	movb $1, -360(%rbp)
uuid_00000000000db9ab:
	mov -384(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000db9ae:
	mov -376(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000db9b1:
	mov -368(%RBP),%RSP
	add $-392, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db9da
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -424(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db9b8
	jmp uuid_00000000000db9ba
uuid_00000000000db9b8:
	push %RBP
	jmp uuid_00000000000db9b5
	jmp uuid_00000000000db9b7
uuid_00000000000db9b5:
	push %RBP
	mov -408(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -464(%rbp)
	pushq $uuid_00000000000db4bc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db9b2
	jmp uuid_00000000000db9b4
uuid_00000000000db9b2:
	movb $1, -432(%rbp)
uuid_00000000000db9b4:
	mov -456(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000db9b7:
	mov -448(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000db9ba:
	mov -440(%RBP),%RSP
	add $-464, %RSP
	mov -432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db9d7
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db9c1
	jmp uuid_00000000000db9c3
uuid_00000000000db9c1:
	push %RBP
	jmp uuid_00000000000db9be
	jmp uuid_00000000000db9c0
uuid_00000000000db9be:
	push %RBP
	mov -480(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	pushq $uuid_00000000000db4c0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db9bb
	jmp uuid_00000000000db9bd
uuid_00000000000db9bb:
	movb $1, -504(%rbp)
uuid_00000000000db9bd:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000db9c0:
	mov -520(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000db9c3:
	mov -512(%RBP),%RSP
	add $-536, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db9d4
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -568(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db9ca
	jmp uuid_00000000000db9cc
uuid_00000000000db9ca:
	push %RBP
	jmp uuid_00000000000db9c7
	jmp uuid_00000000000db9c9
uuid_00000000000db9c7:
	push %RBP
	mov -552(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq $uuid_00000000000db557
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db9c4
	jmp uuid_00000000000db9c6
uuid_00000000000db9c4:
	movb $1, -576(%rbp)
uuid_00000000000db9c6:
	mov -600(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000db9c9:
	mov -592(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000db9cc:
	mov -584(%RBP),%RSP
	add $-608, %RSP
	mov -576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db9d1
	push %RBP
	jmp uuid_00000000000db9ce
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db9cd
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db9d0
uuid_00000000000db9ce:
uuid_00000000000db9d0:
	mov -616(%RBP),%RSP
	add $-616, %RSP
	jmp uuid_00000000000db9d3
uuid_00000000000db9d1:
	movq $1, -40(%rbp)
uuid_00000000000db9d3:
	mov -544(%RBP),%RSP
	add $-608, %RSP
	jmp uuid_00000000000db9d6
uuid_00000000000db9d4:
	movq $1, -40(%rbp)
uuid_00000000000db9d6:
	mov -472(%RBP),%RSP
	add $-536, %RSP
	jmp uuid_00000000000db9d9
uuid_00000000000db9d7:
	movq $1, -40(%rbp)
uuid_00000000000db9d9:
	mov -400(%RBP),%RSP
	add $-464, %RSP
	jmp uuid_00000000000db9dc
uuid_00000000000db9da:
	movq $1, -40(%rbp)
uuid_00000000000db9dc:
	mov -328(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000db9df
uuid_00000000000db9dd:
	movq $1, -40(%rbp)
uuid_00000000000db9df:
	mov -256(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000db9e2
uuid_00000000000db9e0:
	movq $1, -40(%rbp)
uuid_00000000000db9e2:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000db9e5
uuid_00000000000db9e3:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function has-representation : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call has_SB_representation_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function has-representation : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call has_SB_representation_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000db9e5:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
guess_SB_representation_CL_ArrowTypeType:
	push %RBP
#call function has-representation : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call has_SB_representation_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db9f9
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -48(%rbp)
	push %RBP
	pushq -56(%rbp)
	mov -72(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db9f6
	push %RBP
	pushq -56(%rbp)
	mov -88(%RBP), %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db9f3
	push %RBP
	pushq -56(%rbp)
	mov -104(%RBP), %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db9f0
	push %RBP
	pushq -56(%rbp)
	mov -120(%RBP), %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db9ed
	push %RBP
	pushq -56(%rbp)
	mov -136(%RBP), %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db9ea
	push %RBP
	jmp uuid_00000000000db9e7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000db9e6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db9e9
uuid_00000000000db9e7:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db557
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000db9e9:
	mov -144(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000db9ec
uuid_00000000000db9ea:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db4c0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000db9ec:
	mov -128(%RBP),%RSP
	add $-136, %RSP
	jmp uuid_00000000000db9ef
uuid_00000000000db9ed:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db4bc
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000db9ef:
	mov -112(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000db9f2
uuid_00000000000db9f0:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db4b8
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000db9f2:
	mov -96(%RBP),%RSP
	add $-104, %RSP
	jmp uuid_00000000000db9f5
uuid_00000000000db9f3:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db4b4
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000db9f5:
	mov -80(%RBP),%RSP
	add $-88, %RSP
	jmp uuid_00000000000db9f8
uuid_00000000000db9f6:
uuid_00000000000db9f8:
	mov -64(%RBP),%RSP
	add $-72, %RSP
	jmp uuid_00000000000db9fb
uuid_00000000000db9f9:
uuid_00000000000db9fb:
	mov -40(%RBP),%RSP
	add $-40, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
as_SB_constant_CL_ArrowTypeType:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db9fc
	jmp uuid_00000000000db9fe
uuid_00000000000db9fc:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db996
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000db9fe:
	mov -40(%RBP),%RSP
	add $-40, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
deep_SB_hash_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba21
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -128(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba02
	jmp uuid_00000000000dba04
uuid_00000000000dba02:
	push %RBP
	mov -120(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db9ff
	jmp uuid_00000000000dba01
uuid_00000000000db9ff:
	movb $1, -136(%rbp)
uuid_00000000000dba01:
	mov -152(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000dba04:
	mov -144(%RBP),%RSP
	add $-160, %RSP
	mov -136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dba1e
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba0b
	jmp uuid_00000000000dba0d
uuid_00000000000dba0b:
	push %RBP
	mov -184(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dba08
	jmp uuid_00000000000dba0a
uuid_00000000000dba08:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dba05
	jmp uuid_00000000000dba07
uuid_00000000000dba05:
	movb $1, -200(%rbp)
uuid_00000000000dba07:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000dba0a:
	mov -216(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000dba0d:
	mov -208(%RBP),%RSP
	add $-272, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dba1b
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba14
	jmp uuid_00000000000dba16
uuid_00000000000dba14:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dba11
	jmp uuid_00000000000dba13
uuid_00000000000dba11:
	push %RBP
	mov -288(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dba0e
	jmp uuid_00000000000dba10
uuid_00000000000dba0e:
	movb $1, -312(%rbp)
uuid_00000000000dba10:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000dba13:
	mov -328(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000dba16:
	mov -320(%RBP),%RSP
	add $-384, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dba18
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dba17
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dba1a
uuid_00000000000dba18:
#call function deep-hash : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dba1a:
	mov -280(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000dba1d
uuid_00000000000dba1b:
#call function deep-hash : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function deep-hash : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dba1d:
	mov -168(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000dba20
uuid_00000000000dba1e:
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000dba20:
	mov -104(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000dba23
uuid_00000000000dba21:
uuid_00000000000dba23:
	mov -72(%RBP),%RSP
	add $-96, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
deep_SB_hash_CL_ArrowU64ListType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba35
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba2e
	jmp uuid_00000000000dba30
uuid_00000000000dba2e:
	push %RBP
	mov -184(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dba2b
	jmp uuid_00000000000dba2d
uuid_00000000000dba2b:
	push %RBP
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	jmp uuid_00000000000dba28
	jmp uuid_00000000000dba2a
uuid_00000000000dba28:
	movb $1, -200(%rbp)
uuid_00000000000dba2a:
	mov -264(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000dba2d:
	mov -216(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000dba30:
	mov -208(%RBP),%RSP
	add $-288, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dba32
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dba31
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dba34
uuid_00000000000dba32:
#call function deep-hash : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function deep-hash : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
uuid_00000000000dba34:
	mov -152(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000dba37
uuid_00000000000dba35:
uuid_00000000000dba37:
	mov -104(%RBP),%RSP
	add $-144, %RSP
	mov -56(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
ascript_SB_normal_CL_ArrowNilConsTypeAST:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dba43
	jmp uuid_00000000000dba45
uuid_00000000000dba43:
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dba40
#call function add-concrete-type-instance : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call add_SB_concrete_SB_type_SB_instance_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
#call function ascript : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call ascript_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov $types_SB_have_SB_changed_CL_U8, %r15
	movb $1, 0(%r15)
	jmp uuid_00000000000dba42
uuid_00000000000dba40:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dba3d
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba3a
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dba38
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dba39
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dba3c
uuid_00000000000dba3a:
uuid_00000000000dba3c:
	mov -184(%RBP),%RSP
	add $-184, %RSP
	jmp uuid_00000000000dba3f
uuid_00000000000dba3d:
uuid_00000000000dba3f:
	mov -152(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000dba42:
	mov -144(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000dba45:
	mov -112(%RBP),%RSP
	add $-152, %RSP
	mov %rbp, %rsp
	sub $104, %rsp
	ret
typeof_CL_ArrowTypeFragmentList:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba4c
	jmp uuid_00000000000dba4e
uuid_00000000000dba4c:
	push %RBP
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000dba49
	jmp uuid_00000000000dba4b
uuid_00000000000dba49:
	push %RBP
	mov -384(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dba46
	jmp uuid_00000000000dba48
uuid_00000000000dba46:
	movb $1, -552(%rbp)
uuid_00000000000dba48:
	mov -728(%RBP),%RSP
	add $-896, %RSP
uuid_00000000000dba4b:
	mov -568(%RBP),%RSP
	add $-896, %RSP
uuid_00000000000dba4e:
	mov -560(%RBP),%RSP
	add $-896, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dba56
	push %RBP
	jmp uuid_00000000000dba53
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dba52
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dba55
uuid_00000000000dba53:
uuid_00000000000dba55:
	mov -904(%RBP),%RSP
	add $-904, %RSP
	jmp uuid_00000000000dba58
uuid_00000000000dba56:
#call function typeof : Arrow<FragmentList,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeFragmentList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dba4f
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	jmp uuid_00000000000dba51
uuid_00000000000dba4f:
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3a7
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000dba51:
	mov -904(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000dba58:
	mov -376(%RBP),%RSP
	add $-904, %RSP
	subq $24, %rsp
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $176, %rsp
	ret
to_SB_s_CL_ArrowSAST:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba5f
	jmp uuid_00000000000dba61
uuid_00000000000dba5f:
	push %RBP
	jmp uuid_00000000000dba5c
	jmp uuid_00000000000dba5e
uuid_00000000000dba5c:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dba59
	jmp uuid_00000000000dba5b
uuid_00000000000dba59:
	movb $1, -264(%rbp)
uuid_00000000000dba5b:
	mov -288(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000dba5e:
	mov -280(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000dba61:
	mov -272(%RBP),%RSP
	add $-296, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbad9
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba69
	jmp uuid_00000000000dba6b
uuid_00000000000dba69:
	push %RBP
	jmp uuid_00000000000dba66
	jmp uuid_00000000000dba68
uuid_00000000000dba66:
	push %RBP
	mov -312(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dba63
	jmp uuid_00000000000dba65
uuid_00000000000dba63:
	movb $1, -384(%rbp)
uuid_00000000000dba65:
	mov -408(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dba68:
	mov -400(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dba6b:
	mov -392(%RBP),%RSP
	add $-416, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbad6
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba8b
	jmp uuid_00000000000dba8d
uuid_00000000000dba8b:
	push %RBP
	mov -488(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -592(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba79
	jmp uuid_00000000000dba7b
uuid_00000000000dba79:
	push %RBP
	mov -584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -688(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba70
	jmp uuid_00000000000dba72
uuid_00000000000dba70:
	push %RBP
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	jmp uuid_00000000000dba6d
	jmp uuid_00000000000dba6f
uuid_00000000000dba6d:
	movb $1, -696(%rbp)
uuid_00000000000dba6f:
	mov -712(%RBP),%RSP
	add $-736, %RSP
uuid_00000000000dba72:
	mov -704(%RBP),%RSP
	add $-736, %RSP
	mov -696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dba76
	jmp uuid_00000000000dba78
uuid_00000000000dba76:
	push %RBP
	mov -576(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dba73
	jmp uuid_00000000000dba75
uuid_00000000000dba73:
	movb $1, -600(%rbp)
uuid_00000000000dba75:
	mov -744(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000dba78:
	mov -616(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000dba7b:
	mov -608(%RBP),%RSP
	add $-816, %RSP
	mov -600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dba88
	jmp uuid_00000000000dba8a
uuid_00000000000dba88:
	push %RBP
	mov -480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -896(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba82
	jmp uuid_00000000000dba84
uuid_00000000000dba82:
	push %RBP
	jmp uuid_00000000000dba7f
	jmp uuid_00000000000dba81
uuid_00000000000dba7f:
	push %RBP
	mov -832(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dba7c
	jmp uuid_00000000000dba7e
uuid_00000000000dba7c:
	movb $1, -904(%rbp)
uuid_00000000000dba7e:
	mov -928(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000dba81:
	mov -920(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000dba84:
	mov -912(%RBP),%RSP
	add $-936, %RSP
	mov -904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dba85
	jmp uuid_00000000000dba87
uuid_00000000000dba85:
	movb $1, -504(%rbp)
uuid_00000000000dba87:
	mov -824(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000dba8a:
	mov -520(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000dba8d:
	mov -512(%RBP),%RSP
	add $-936, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbad3
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -1016(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbaac
	jmp uuid_00000000000dbaae
uuid_00000000000dbaac:
	push %RBP
	mov -1008(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1112(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba9a
	jmp uuid_00000000000dba9c
uuid_00000000000dba9a:
	push %RBP
	mov -1104(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1208(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba91
	jmp uuid_00000000000dba93
uuid_00000000000dba91:
	push %RBP
	pushq -1184(%RBP)
	pushq -1192(%RBP)
	pushq -1200(%RBP)
	jmp uuid_00000000000dba8e
	jmp uuid_00000000000dba90
uuid_00000000000dba8e:
	movb $1, -1216(%rbp)
uuid_00000000000dba90:
	mov -1232(%RBP),%RSP
	add $-1256, %RSP
uuid_00000000000dba93:
	mov -1224(%RBP),%RSP
	add $-1256, %RSP
	mov -1216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dba97
	jmp uuid_00000000000dba99
uuid_00000000000dba97:
	push %RBP
	mov -1096(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dba94
	jmp uuid_00000000000dba96
uuid_00000000000dba94:
	movb $1, -1120(%rbp)
uuid_00000000000dba96:
	mov -1264(%RBP),%RSP
	add $-1336, %RSP
uuid_00000000000dba99:
	mov -1136(%RBP),%RSP
	add $-1336, %RSP
uuid_00000000000dba9c:
	mov -1128(%RBP),%RSP
	add $-1336, %RSP
	mov -1120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbaa9
	jmp uuid_00000000000dbaab
uuid_00000000000dbaa9:
	push %RBP
	mov -1000(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1416(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbaa3
	jmp uuid_00000000000dbaa5
uuid_00000000000dbaa3:
	push %RBP
	jmp uuid_00000000000dbaa0
	jmp uuid_00000000000dbaa2
uuid_00000000000dbaa0:
	push %RBP
	mov -1352(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1456(%rbp)
	pushq $uuid_00000000000db15f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dba9d
	jmp uuid_00000000000dba9f
uuid_00000000000dba9d:
	movb $1, -1424(%rbp)
uuid_00000000000dba9f:
	mov -1448(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000dbaa2:
	mov -1440(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000dbaa5:
	mov -1432(%RBP),%RSP
	add $-1456, %RSP
	mov -1424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbaa6
	jmp uuid_00000000000dbaa8
uuid_00000000000dbaa6:
	movb $1, -1024(%rbp)
uuid_00000000000dbaa8:
	mov -1344(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000dbaab:
	mov -1040(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000dbaae:
	mov -1032(%RBP),%RSP
	add $-1456, %RSP
	mov -1024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbad0
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -1536(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbab5
	jmp uuid_00000000000dbab7
uuid_00000000000dbab5:
	push %RBP
	mov -1528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbab2
	jmp uuid_00000000000dbab4
uuid_00000000000dbab2:
	push %RBP
	mov -1520(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbaaf
	jmp uuid_00000000000dbab1
uuid_00000000000dbaaf:
	movb $1, -1544(%rbp)
uuid_00000000000dbab1:
	mov -1640(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000dbab4:
	mov -1560(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000dbab7:
	mov -1552(%RBP),%RSP
	add $-1712, %RSP
	mov -1544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbacd
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -1792(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbac2
	jmp uuid_00000000000dbac4
uuid_00000000000dbac2:
	push %RBP
	pushq -1768(%RBP)
	pushq -1776(%RBP)
	pushq -1784(%RBP)
	jmp uuid_00000000000dbabf
	jmp uuid_00000000000dbac1
uuid_00000000000dbabf:
	push %RBP
	mov -1760(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbabc
	jmp uuid_00000000000dbabe
uuid_00000000000dbabc:
	push %RBP
	mov -1752(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbab9
	jmp uuid_00000000000dbabb
uuid_00000000000dbab9:
	movb $1, -1800(%rbp)
uuid_00000000000dbabb:
	mov -1928(%RBP),%RSP
	add $-2000, %RSP
uuid_00000000000dbabe:
	mov -1848(%RBP),%RSP
	add $-2000, %RSP
uuid_00000000000dbac1:
	mov -1816(%RBP),%RSP
	add $-2000, %RSP
uuid_00000000000dbac4:
	mov -1808(%RBP),%RSP
	add $-2000, %RSP
	mov -1800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbaca
	push %RBP
	jmp uuid_00000000000dbac7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dbac6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dbac9
uuid_00000000000dbac7:
uuid_00000000000dbac9:
	mov -2008(%RBP),%RSP
	add $-2008, %RSP
	jmp uuid_00000000000dbacc
uuid_00000000000dbaca:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dbac5
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-s : Arrow<AST,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	mov %RBX, %RBP
	call to_SB_s_CL_ArrowSAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-s : Arrow<AST,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	mov %RBX, %RBP
	call to_SB_s_CL_ArrowSAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dbacc:
	mov -1720(%RBP),%RSP
	add $-2000, %RSP
	jmp uuid_00000000000dbacf
uuid_00000000000dbacd:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dbab8
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-s : Arrow<AST,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	mov %RBX, %RBP
	call to_SB_s_CL_ArrowSAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-s : Arrow<AST,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	mov %RBX, %RBP
	call to_SB_s_CL_ArrowSAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dbacf:
	mov -1464(%RBP),%RSP
	add $-1712, %RSP
	jmp uuid_00000000000dbad2
uuid_00000000000dbad0:
#call function to-s : Arrow<AST,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	mov %RBX, %RBP
	call to_SB_s_CL_ArrowSAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dbad2:
	mov -944(%RBP),%RSP
	add $-1456, %RSP
	jmp uuid_00000000000dbad5
uuid_00000000000dbad3:
#call function to-s : Arrow<AST,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	mov %RBX, %RBP
	call to_SB_s_CL_ArrowSAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dbad5:
	mov -424(%RBP),%RSP
	add $-936, %RSP
	jmp uuid_00000000000dbad8
uuid_00000000000dbad6:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dba6c
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -416(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dbad8:
	mov -304(%RBP),%RSP
	add $-416, %RSP
	jmp uuid_00000000000dbadb
uuid_00000000000dbad9:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dba62
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -296(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dbadb:
	mov -184(%RBP),%RSP
	add $-296, %RSP
	subq $24, %rsp
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
domain_CL_ArrowTypeType:
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $uuid_00000000000db622
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
range_CL_ArrowTypeType:
#call function p1 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $uuid_00000000000db622
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call p1_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
t1_CL_ArrowTypeString:
	pushq -8(%rbp)
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
t2_CL_ArrowTypeConsTypeString:
	pushq -8(%rbp)
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $40, %rsp
	ret
t3_CL_ArrowTypeConsTypeConsTypeString:
	pushq -8(%rbp)
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $64, %rsp
	ret
p_CL_ArrowTypeConsU64Type:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbafa
	jmp uuid_00000000000dbafc
uuid_00000000000dbafa:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbaf7
	jmp uuid_00000000000dbaf9
uuid_00000000000dbaf7:
	push %RBP
	jmp uuid_00000000000dbaf4
	jmp uuid_00000000000dbaf6
uuid_00000000000dbaf4:
	movb $1, -104(%rbp)
uuid_00000000000dbaf6:
	mov -168(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dbaf9:
	mov -120(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dbafc:
	mov -112(%RBP),%RSP
	add $-168, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb01
	push %RBP
	jmp uuid_00000000000dbafe
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dbafd
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dbb00
uuid_00000000000dbafe:
uuid_00000000000dbb00:
	mov -176(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000dbb03
uuid_00000000000dbb01:
#call function .nth : Arrow<Cons<Cons<List<Type>,U64>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call _DT_nth_CL_ArrowTypeConsTypeConsU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dbb03:
	mov -72(%RBP),%RSP
	add $-168, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $40, %rsp
	ret
p1_CL_ArrowTypeType:
#call function p : Arrow<Cons<Type,U64>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $0
	mov %RBX, %RBP
	call p_CL_ArrowTypeConsU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
p2_CL_ArrowTypeType:
#call function p : Arrow<Cons<Type,U64>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $1
	mov %RBX, %RBP
	call p_CL_ArrowTypeConsU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
and_CL_ArrowTContextConsTContextTContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq $0
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb0a
	jmp uuid_00000000000dbb0c
uuid_00000000000dbb0a:
	push %RBP
	jmp uuid_00000000000dbb07
	jmp uuid_00000000000dbb09
uuid_00000000000dbb07:
	push %RBP
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	mov -904(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb04
	jmp uuid_00000000000dbb06
uuid_00000000000dbb04:
	movb $1, -760(%rbp)
uuid_00000000000dbb06:
	mov -784(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000dbb09:
	mov -776(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000dbb0c:
	mov -768(%RBP),%RSP
	add $-904, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb1d
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq $0
	push %RBP
	mov -1160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb13
	jmp uuid_00000000000dbb15
uuid_00000000000dbb13:
	push %RBP
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	pushq -1152(%RBP)
	mov -1304(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb10
	jmp uuid_00000000000dbb12
uuid_00000000000dbb10:
	push %RBP
	jmp uuid_00000000000dbb0d
	jmp uuid_00000000000dbb0f
uuid_00000000000dbb0d:
	movb $1, -1168(%rbp)
uuid_00000000000dbb0f:
	mov -1312(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000dbb12:
	mov -1184(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000dbb15:
	mov -1176(%RBP),%RSP
	add $-1312, %RSP
	mov -1168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb1a
	push %RBP
	jmp uuid_00000000000dbb17
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dbb16
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dbb19
uuid_00000000000dbb17:
#call function union : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dbb19:
	mov -1320(%RBP),%RSP
	add $-1320, %RSP
	jmp uuid_00000000000dbb1c
uuid_00000000000dbb1a:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dbb1c:
	mov -912(%RBP),%RSP
	add $-1312, %RSP
	jmp uuid_00000000000dbb1f
uuid_00000000000dbb1d:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dbb1f:
	mov -504(%RBP),%RSP
	add $-904, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $248, %rsp
	ret
and_CL_ArrowTypeConsTypeType:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	subq $24, %rsp
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
union_CL_ArrowTContextConsTContextTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb36
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb33
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb2c
	jmp uuid_00000000000dbb2e
uuid_00000000000dbb2c:
	push %RBP
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	jmp uuid_00000000000dbb29
	jmp uuid_00000000000dbb2b
uuid_00000000000dbb29:
	push %RBP
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	jmp uuid_00000000000dbb26
	jmp uuid_00000000000dbb28
uuid_00000000000dbb26:
	push %RBP
	mov -648(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dbb23
	jmp uuid_00000000000dbb25
uuid_00000000000dbb23:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbb20
	jmp uuid_00000000000dbb22
uuid_00000000000dbb20:
	movb $1, -760(%rbp)
uuid_00000000000dbb22:
	mov -904(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000dbb25:
	mov -888(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000dbb28:
	mov -856(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000dbb2b:
	mov -776(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000dbb2e:
	mov -768(%RBP),%RSP
	add $-1024, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb30
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dbb2f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dbb32
uuid_00000000000dbb30:
#call function union : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -896(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dbb32:
	mov -632(%RBP),%RSP
	add $-1024, %RSP
	jmp uuid_00000000000dbb35
uuid_00000000000dbb33:
uuid_00000000000dbb35:
	mov -504(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000dbb38
uuid_00000000000dbb36:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dbb38:
	mov -376(%RBP),%RSP
	add $-496, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $248, %rsp
	ret
union_CL_ArrowContextConsContextContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb39
	jmp uuid_00000000000dbb3b
uuid_00000000000dbb39:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
uuid_00000000000dbb3b:
	mov -304(%RBP),%RSP
	add $-304, %RSP
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbb4f
	jmp uuid_00000000000dbb51
uuid_00000000000dbb4f:
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq $0
	push %RBP
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb45
	jmp uuid_00000000000dbb47
uuid_00000000000dbb45:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	jmp uuid_00000000000dbb42
	jmp uuid_00000000000dbb44
uuid_00000000000dbb42:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dbb3f
	jmp uuid_00000000000dbb41
uuid_00000000000dbb3f:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbb3c
	jmp uuid_00000000000dbb3e
uuid_00000000000dbb3c:
	movb $1, -520(%rbp)
uuid_00000000000dbb3e:
	mov -632(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000dbb41:
	mov -616(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000dbb44:
	mov -536(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000dbb47:
	mov -528(%RBP),%RSP
	add $-728, %RSP
	mov -520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb4c
	push %RBP
	jmp uuid_00000000000dbb49
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dbb48
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dbb4b
uuid_00000000000dbb49:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
uuid_00000000000dbb4b:
	mov -736(%RBP),%RSP
	add $-736, %RSP
	jmp uuid_00000000000dbb4e
uuid_00000000000dbb4c:
#call function close : Arrow<Context,Array<Context,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function union : Arrow<Cons<Context,Context>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowContextConsContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -624(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq $0
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
uuid_00000000000dbb4e:
	mov -416(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000dbb51:
	mov -312(%RBP),%RSP
	add $-728, %RSP
	subq $96, %rsp
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	addq $96, %rsp
	mov %rbp, %rsp
	sub $200, %rsp
	ret
union_CL_ArrowFContextConsTContextFContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
uuid_00000000000dbb69:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbb6a
	jmp uuid_00000000000dbb6b
uuid_00000000000dbb6a:
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	push %RBP
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov -776(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb66
	push %RBP
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq $0
	push %RBP
	mov -904(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb5e
	jmp uuid_00000000000dbb60
uuid_00000000000dbb5e:
	push %RBP
	jmp uuid_00000000000dbb5b
	jmp uuid_00000000000dbb5d
uuid_00000000000dbb5b:
	push %RBP
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	jmp uuid_00000000000dbb58
	jmp uuid_00000000000dbb5a
uuid_00000000000dbb58:
	push %RBP
	mov -800(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dbb55
	jmp uuid_00000000000dbb57
uuid_00000000000dbb55:
	push %RBP
	mov -792(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbb52
	jmp uuid_00000000000dbb54
uuid_00000000000dbb52:
	movb $1, -912(%rbp)
uuid_00000000000dbb54:
	mov -984(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000dbb57:
	mov -968(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000dbb5a:
	mov -936(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000dbb5d:
	mov -928(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000dbb60:
	mov -920(%RBP),%RSP
	add $-1104, %RSP
	mov -912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb63
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dbb62
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dbb65
uuid_00000000000dbb63:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq $uuid_00000000000dbb61
	pushq $0
#call function to-string : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1256(%RBP)
	popq -1248(%RBP)
	popq -1240(%RBP)
	popq -1232(%RBP)
	popq -1224(%RBP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -976(%rbp)
	pushq $0
	pushq $0
	pushq $3
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq $0
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	movq -1104(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -208(%rbp)
uuid_00000000000dbb65:
	mov -784(%RBP),%RSP
	add $-1256, %RSP
	jmp uuid_00000000000dbb68
uuid_00000000000dbb66:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
uuid_00000000000dbb68:
	mov -656(%RBP),%RSP
	add $-776, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000dbb69
uuid_00000000000dbb6b:
	subq $200, %rsp
	pushq -528(%rbp)
	pushq -520(%rbp)
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $328, %rsp
	ret
tag_SB_of_CL_ArrowStringType:
	pushq $uuid_00000000000daee6
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb72
	jmp uuid_00000000000dbb74
uuid_00000000000dbb72:
	push %RBP
	jmp uuid_00000000000dbb6f
	jmp uuid_00000000000dbb71
uuid_00000000000dbb6f:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dbb6c
	jmp uuid_00000000000dbb6e
uuid_00000000000dbb6c:
	movb $1, -104(%rbp)
uuid_00000000000dbb6e:
	mov -128(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000dbb71:
	mov -120(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000dbb74:
	mov -112(%RBP),%RSP
	add $-136, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb79
	push %RBP
	jmp uuid_00000000000dbb76
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dbb75
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dbb78
uuid_00000000000dbb76:
uuid_00000000000dbb78:
	mov -144(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000dbb7b
uuid_00000000000dbb79:
	movq -136(%rbp), %r15
	movq %r15, -40(%rbp)
	mov -136(%rbp), %r15
	mov %r15, -40(%rbp)
uuid_00000000000dbb7b:
	mov -72(%RBP),%RSP
	add $-136, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
can_SB_unify_CL_ArrowU64ConsListTypeListType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb8b
	jmp uuid_00000000000dbb8d
uuid_00000000000dbb8b:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb88
	jmp uuid_00000000000dbb8a
uuid_00000000000dbb88:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb85
	jmp uuid_00000000000dbb87
uuid_00000000000dbb85:
	movb $1, -288(%rbp)
uuid_00000000000dbb87:
	mov -352(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000dbb8a:
	mov -304(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000dbb8d:
	mov -296(%RBP),%RSP
	add $-392, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbb6
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbba6
	jmp uuid_00000000000dbba8
uuid_00000000000dbba6:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb94
	jmp uuid_00000000000dbb96
uuid_00000000000dbb94:
	push %RBP
	mov -544(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbb91
	jmp uuid_00000000000dbb93
uuid_00000000000dbb91:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000dbb8e
	jmp uuid_00000000000dbb90
uuid_00000000000dbb8e:
	movb $1, -560(%rbp)
uuid_00000000000dbb90:
	mov -624(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000dbb93:
	mov -576(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000dbb96:
	mov -568(%RBP),%RSP
	add $-648, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbba3
	jmp uuid_00000000000dbba5
uuid_00000000000dbba3:
	push %RBP
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb9d
	jmp uuid_00000000000dbb9f
uuid_00000000000dbb9d:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbb9a
	jmp uuid_00000000000dbb9c
uuid_00000000000dbb9a:
	push %RBP
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	jmp uuid_00000000000dbb97
	jmp uuid_00000000000dbb99
uuid_00000000000dbb97:
	movb $1, -704(%rbp)
uuid_00000000000dbb99:
	mov -768(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000dbb9c:
	mov -720(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000dbb9f:
	mov -712(%RBP),%RSP
	add $-792, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbba0
	jmp uuid_00000000000dbba2
uuid_00000000000dbba0:
	movb $1, -496(%rbp)
uuid_00000000000dbba2:
	mov -656(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000dbba5:
	mov -512(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000dbba8:
	mov -504(%RBP),%RSP
	add $-792, %RSP
	mov -496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbb3
	push %RBP
	jmp uuid_00000000000dbbb0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dbbaf
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dbbb2
uuid_00000000000dbbb0:
uuid_00000000000dbbb2:
	mov -800(%RBP),%RSP
	add $-800, %RSP
	jmp uuid_00000000000dbbb5
uuid_00000000000dbbb3:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbbac
	jmp uuid_00000000000dbbae
uuid_00000000000dbbac:
	push %RBP
#call function can-unify : Arrow<Cons<List<Type>,List<Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbba9
	jmp uuid_00000000000dbbab
uuid_00000000000dbba9:
	movq $1, -96(%rbp)
uuid_00000000000dbbab:
	mov -808(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000dbbae:
	mov -800(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000dbbb5:
	mov -400(%RBP),%RSP
	add $-808, %RSP
	jmp uuid_00000000000dbbb8
uuid_00000000000dbbb6:
	movq $1, -96(%rbp)
uuid_00000000000dbbb8:
	mov -192(%RBP),%RSP
	add $-392, %RSP
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
can_SB_unify_CL_ArrowU64ConsTypeType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbbf
	jmp uuid_00000000000dbbc1
uuid_00000000000dbbbf:
	push %RBP
	jmp uuid_00000000000dbbbc
	jmp uuid_00000000000dbbbe
uuid_00000000000dbbbc:
	push %RBP
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbb9
	jmp uuid_00000000000dbbbb
uuid_00000000000dbbb9:
	movb $1, -192(%rbp)
uuid_00000000000dbbbb:
	mov -216(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000dbbbe:
	mov -208(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000dbbc1:
	mov -200(%RBP),%RSP
	add $-240, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd96
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbdb
	jmp uuid_00000000000dbbdd
uuid_00000000000dbbdb:
	push %RBP
	jmp uuid_00000000000dbbd8
	jmp uuid_00000000000dbbda
uuid_00000000000dbbd8:
	push %RBP
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	pushq $0
	push %RBP
	mov -360(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbd2
	jmp uuid_00000000000dbbd4
uuid_00000000000dbbd2:
	push %RBP
	mov -352(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -424(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbc8
	jmp uuid_00000000000dbbca
uuid_00000000000dbbc8:
	push %RBP
	jmp uuid_00000000000dbbc5
	jmp uuid_00000000000dbbc7
uuid_00000000000dbbc5:
	push %RBP
	jmp uuid_00000000000dbbc2
	jmp uuid_00000000000dbbc4
uuid_00000000000dbbc2:
	movb $1, -432(%rbp)
uuid_00000000000dbbc4:
	mov -456(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000dbbc7:
	mov -448(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000dbbca:
	mov -440(%RBP),%RSP
	add $-456, %RSP
	mov -432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbcf
	jmp uuid_00000000000dbbd1
uuid_00000000000dbbcf:
	push %RBP
	mov -344(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq $uuid_00000000000dbbcb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbbcc
	jmp uuid_00000000000dbbce
uuid_00000000000dbbcc:
	movb $1, -368(%rbp)
uuid_00000000000dbbce:
	mov -464(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000dbbd1:
	mov -384(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000dbbd4:
	mov -376(%RBP),%RSP
	add $-472, %RSP
	mov -368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbd5
	jmp uuid_00000000000dbbd7
uuid_00000000000dbbd5:
	movb $1, -312(%rbp)
uuid_00000000000dbbd7:
	mov -336(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000dbbda:
	mov -328(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000dbbdd:
	mov -320(%RBP),%RSP
	add $-472, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd93
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbea
	jmp uuid_00000000000dbbec
uuid_00000000000dbbea:
	push %RBP
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	jmp uuid_00000000000dbbe7
	jmp uuid_00000000000dbbe9
uuid_00000000000dbbe7:
	push %RBP
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbe1
	jmp uuid_00000000000dbbe3
uuid_00000000000dbbe1:
	push %RBP
	mov -608(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dbbde
	jmp uuid_00000000000dbbe0
uuid_00000000000dbbde:
	movb $1, -624(%rbp)
uuid_00000000000dbbe0:
	mov -640(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000dbbe3:
	mov -632(%RBP),%RSP
	add $-648, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbe4
	jmp uuid_00000000000dbbe6
uuid_00000000000dbbe4:
	movb $1, -544(%rbp)
uuid_00000000000dbbe6:
	mov -592(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000dbbe9:
	mov -560(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000dbbec:
	mov -552(%RBP),%RSP
	add $-648, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd90
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -712(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbfc
	jmp uuid_00000000000dbbfe
uuid_00000000000dbbfc:
	push %RBP
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	jmp uuid_00000000000dbbf9
	jmp uuid_00000000000dbbfb
uuid_00000000000dbbf9:
	push %RBP
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq $0
	push %RBP
	mov -792(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbf3
	jmp uuid_00000000000dbbf5
uuid_00000000000dbbf3:
	push %RBP
	mov -784(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbbf0
	jmp uuid_00000000000dbbf2
uuid_00000000000dbbf0:
	push %RBP
	mov -776(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbbed
	jmp uuid_00000000000dbbef
uuid_00000000000dbbed:
	movb $1, -800(%rbp)
uuid_00000000000dbbef:
	mov -848(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000dbbf2:
	mov -816(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000dbbf5:
	mov -808(%RBP),%RSP
	add $-872, %RSP
	mov -800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbf6
	jmp uuid_00000000000dbbf8
uuid_00000000000dbbf6:
	movb $1, -720(%rbp)
uuid_00000000000dbbf8:
	mov -768(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000dbbfb:
	mov -736(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000dbbfe:
	mov -728(%RBP),%RSP
	add $-872, %RSP
	mov -720(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd8d
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -936(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc14
	jmp uuid_00000000000dbc16
uuid_00000000000dbc14:
	push %RBP
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq $0
	push %RBP
	mov -984(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc0b
	jmp uuid_00000000000dbc0d
uuid_00000000000dbc0b:
	push %RBP
	mov -976(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbc08
	jmp uuid_00000000000dbc0a
uuid_00000000000dbc08:
	push %RBP
	mov -968(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbc05
	jmp uuid_00000000000dbc07
uuid_00000000000dbc05:
	movb $1, -992(%rbp)
uuid_00000000000dbc07:
	mov -1040(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000dbc0a:
	mov -1008(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000dbc0d:
	mov -1000(%RBP),%RSP
	add $-1064, %RSP
	mov -992(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc11
	jmp uuid_00000000000dbc13
uuid_00000000000dbc11:
	push %RBP
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	jmp uuid_00000000000dbc0e
	jmp uuid_00000000000dbc10
uuid_00000000000dbc0e:
	movb $1, -944(%rbp)
uuid_00000000000dbc10:
	mov -1072(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000dbc13:
	mov -960(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000dbc16:
	mov -952(%RBP),%RSP
	add $-1096, %RSP
	mov -944(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd8a
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -1160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc6b
	jmp uuid_00000000000dbc6d
uuid_00000000000dbc6b:
	push %RBP
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	pushq -1152(%RBP)
	pushq $0
	push %RBP
	mov -1208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc35
	jmp uuid_00000000000dbc37
uuid_00000000000dbc35:
	push %RBP
	mov -1200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1272(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc2c
	jmp uuid_00000000000dbc2e
uuid_00000000000dbc2c:
	push %RBP
	mov -1264(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1336(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc23
	jmp uuid_00000000000dbc25
uuid_00000000000dbc23:
	push %RBP
	mov -1328(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1400(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc20
	jmp uuid_00000000000dbc22
uuid_00000000000dbc20:
	push %RBP
	pushq -1304(%RBP)
	pushq -1312(%RBP)
	pushq -1320(%RBP)
	jmp uuid_00000000000dbc1d
	jmp uuid_00000000000dbc1f
uuid_00000000000dbc1d:
	movb $1, -1344(%rbp)
uuid_00000000000dbc1f:
	mov -1408(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000dbc22:
	mov -1360(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000dbc25:
	mov -1352(%RBP),%RSP
	add $-1432, %RSP
	mov -1344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc29
	jmp uuid_00000000000dbc2b
uuid_00000000000dbc29:
	push %RBP
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	pushq -1256(%RBP)
	jmp uuid_00000000000dbc26
	jmp uuid_00000000000dbc28
uuid_00000000000dbc26:
	movb $1, -1280(%rbp)
uuid_00000000000dbc28:
	mov -1440(%RBP),%RSP
	add $-1464, %RSP
uuid_00000000000dbc2b:
	mov -1296(%RBP),%RSP
	add $-1464, %RSP
uuid_00000000000dbc2e:
	mov -1288(%RBP),%RSP
	add $-1464, %RSP
	mov -1280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc32
	jmp uuid_00000000000dbc34
uuid_00000000000dbc32:
	push %RBP
	mov -1192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1480(%rbp)
	pushq $uuid_00000000000db3a7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbc2f
	jmp uuid_00000000000dbc31
uuid_00000000000dbc2f:
	movb $1, -1216(%rbp)
uuid_00000000000dbc31:
	mov -1472(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000dbc34:
	mov -1232(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000dbc37:
	mov -1224(%RBP),%RSP
	add $-1480, %RSP
	mov -1216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc68
	jmp uuid_00000000000dbc6a
uuid_00000000000dbc68:
	push %RBP
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq $0
	push %RBP
	mov -1512(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc62
	jmp uuid_00000000000dbc64
uuid_00000000000dbc62:
	push %RBP
	mov -1504(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1576(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc59
	jmp uuid_00000000000dbc5b
uuid_00000000000dbc59:
	push %RBP
	mov -1568(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1640(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc3e
	jmp uuid_00000000000dbc40
uuid_00000000000dbc3e:
	push %RBP
	mov -1632(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1704(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc3b
	jmp uuid_00000000000dbc3d
uuid_00000000000dbc3b:
	push %RBP
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	jmp uuid_00000000000dbc38
	jmp uuid_00000000000dbc3a
uuid_00000000000dbc38:
	movb $1, -1648(%rbp)
uuid_00000000000dbc3a:
	mov -1712(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000dbc3d:
	mov -1664(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000dbc40:
	mov -1656(%RBP),%RSP
	add $-1736, %RSP
	mov -1648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc56
	jmp uuid_00000000000dbc58
uuid_00000000000dbc56:
	push %RBP
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq $0
	push %RBP
	mov -1768(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc50
	jmp uuid_00000000000dbc52
uuid_00000000000dbc50:
	push %RBP
	mov -1760(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1832(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc47
	jmp uuid_00000000000dbc49
uuid_00000000000dbc47:
	push %RBP
	mov -1824(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1896(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc44
	jmp uuid_00000000000dbc46
uuid_00000000000dbc44:
	push %RBP
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	jmp uuid_00000000000dbc41
	jmp uuid_00000000000dbc43
uuid_00000000000dbc41:
	movb $1, -1840(%rbp)
uuid_00000000000dbc43:
	mov -1904(%RBP),%RSP
	add $-1928, %RSP
uuid_00000000000dbc46:
	mov -1856(%RBP),%RSP
	add $-1928, %RSP
uuid_00000000000dbc49:
	mov -1848(%RBP),%RSP
	add $-1928, %RSP
	mov -1840(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc4d
	jmp uuid_00000000000dbc4f
uuid_00000000000dbc4d:
	push %RBP
	mov -1752(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1944(%rbp)
	pushq $uuid_00000000000db284
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbc4a
	jmp uuid_00000000000dbc4c
uuid_00000000000dbc4a:
	movb $1, -1776(%rbp)
uuid_00000000000dbc4c:
	mov -1936(%RBP),%RSP
	add $-1944, %RSP
uuid_00000000000dbc4f:
	mov -1792(%RBP),%RSP
	add $-1944, %RSP
uuid_00000000000dbc52:
	mov -1784(%RBP),%RSP
	add $-1944, %RSP
	mov -1776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc53
	jmp uuid_00000000000dbc55
uuid_00000000000dbc53:
	movb $1, -1584(%rbp)
uuid_00000000000dbc55:
	mov -1744(%RBP),%RSP
	add $-1944, %RSP
uuid_00000000000dbc58:
	mov -1600(%RBP),%RSP
	add $-1944, %RSP
uuid_00000000000dbc5b:
	mov -1592(%RBP),%RSP
	add $-1944, %RSP
	mov -1584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc5f
	jmp uuid_00000000000dbc61
uuid_00000000000dbc5f:
	push %RBP
	mov -1496(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1960(%rbp)
	pushq $uuid_00000000000db3a7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbc5c
	jmp uuid_00000000000dbc5e
uuid_00000000000dbc5c:
	movb $1, -1520(%rbp)
uuid_00000000000dbc5e:
	mov -1952(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000dbc61:
	mov -1536(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000dbc64:
	mov -1528(%RBP),%RSP
	add $-1960, %RSP
	mov -1520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc65
	jmp uuid_00000000000dbc67
uuid_00000000000dbc65:
	movb $1, -1168(%rbp)
uuid_00000000000dbc67:
	mov -1488(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000dbc6a:
	mov -1184(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000dbc6d:
	mov -1176(%RBP),%RSP
	add $-1960, %RSP
	mov -1168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd87
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -2024(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbca4
	jmp uuid_00000000000dbca6
uuid_00000000000dbca4:
	push %RBP
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	jmp uuid_00000000000dbca1
	jmp uuid_00000000000dbca3
uuid_00000000000dbca1:
	push %RBP
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq $0
	push %RBP
	mov -2104(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc9b
	jmp uuid_00000000000dbc9d
uuid_00000000000dbc9b:
	push %RBP
	mov -2096(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2168(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc92
	jmp uuid_00000000000dbc94
uuid_00000000000dbc92:
	push %RBP
	mov -2160(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc77
	jmp uuid_00000000000dbc79
uuid_00000000000dbc77:
	push %RBP
	mov -2224(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2296(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc74
	jmp uuid_00000000000dbc76
uuid_00000000000dbc74:
	push %RBP
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	jmp uuid_00000000000dbc71
	jmp uuid_00000000000dbc73
uuid_00000000000dbc71:
	movb $1, -2240(%rbp)
uuid_00000000000dbc73:
	mov -2304(%RBP),%RSP
	add $-2328, %RSP
uuid_00000000000dbc76:
	mov -2256(%RBP),%RSP
	add $-2328, %RSP
uuid_00000000000dbc79:
	mov -2248(%RBP),%RSP
	add $-2328, %RSP
	mov -2240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc8f
	jmp uuid_00000000000dbc91
uuid_00000000000dbc8f:
	push %RBP
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2152(%RBP)
	pushq $0
	push %RBP
	mov -2360(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc89
	jmp uuid_00000000000dbc8b
uuid_00000000000dbc89:
	push %RBP
	mov -2352(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2424(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc80
	jmp uuid_00000000000dbc82
uuid_00000000000dbc80:
	push %RBP
	mov -2416(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2488(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc7d
	jmp uuid_00000000000dbc7f
uuid_00000000000dbc7d:
	push %RBP
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	jmp uuid_00000000000dbc7a
	jmp uuid_00000000000dbc7c
uuid_00000000000dbc7a:
	movb $1, -2432(%rbp)
uuid_00000000000dbc7c:
	mov -2496(%RBP),%RSP
	add $-2520, %RSP
uuid_00000000000dbc7f:
	mov -2448(%RBP),%RSP
	add $-2520, %RSP
uuid_00000000000dbc82:
	mov -2440(%RBP),%RSP
	add $-2520, %RSP
	mov -2432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc86
	jmp uuid_00000000000dbc88
uuid_00000000000dbc86:
	push %RBP
	mov -2344(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2536(%rbp)
	pushq $uuid_00000000000db284
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbc83
	jmp uuid_00000000000dbc85
uuid_00000000000dbc83:
	movb $1, -2368(%rbp)
uuid_00000000000dbc85:
	mov -2528(%RBP),%RSP
	add $-2536, %RSP
uuid_00000000000dbc88:
	mov -2384(%RBP),%RSP
	add $-2536, %RSP
uuid_00000000000dbc8b:
	mov -2376(%RBP),%RSP
	add $-2536, %RSP
	mov -2368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc8c
	jmp uuid_00000000000dbc8e
uuid_00000000000dbc8c:
	movb $1, -2176(%rbp)
uuid_00000000000dbc8e:
	mov -2336(%RBP),%RSP
	add $-2536, %RSP
uuid_00000000000dbc91:
	mov -2192(%RBP),%RSP
	add $-2536, %RSP
uuid_00000000000dbc94:
	mov -2184(%RBP),%RSP
	add $-2536, %RSP
	mov -2176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc98
	jmp uuid_00000000000dbc9a
uuid_00000000000dbc98:
	push %RBP
	mov -2088(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2552(%rbp)
	pushq $uuid_00000000000db3a7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbc95
	jmp uuid_00000000000dbc97
uuid_00000000000dbc95:
	movb $1, -2112(%rbp)
uuid_00000000000dbc97:
	mov -2544(%RBP),%RSP
	add $-2552, %RSP
uuid_00000000000dbc9a:
	mov -2128(%RBP),%RSP
	add $-2552, %RSP
uuid_00000000000dbc9d:
	mov -2120(%RBP),%RSP
	add $-2552, %RSP
	mov -2112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc9e
	jmp uuid_00000000000dbca0
uuid_00000000000dbc9e:
	movb $1, -2032(%rbp)
uuid_00000000000dbca0:
	mov -2080(%RBP),%RSP
	add $-2552, %RSP
uuid_00000000000dbca3:
	mov -2048(%RBP),%RSP
	add $-2552, %RSP
uuid_00000000000dbca6:
	mov -2040(%RBP),%RSP
	add $-2552, %RSP
	mov -2032(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd84
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -2616(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcdd
	jmp uuid_00000000000dbcdf
uuid_00000000000dbcdd:
	push %RBP
	pushq -2592(%RBP)
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq $0
	push %RBP
	mov -2664(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcc2
	jmp uuid_00000000000dbcc4
uuid_00000000000dbcc2:
	push %RBP
	mov -2656(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2728(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcb9
	jmp uuid_00000000000dbcbb
uuid_00000000000dbcb9:
	push %RBP
	mov -2720(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2792(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcb0
	jmp uuid_00000000000dbcb2
uuid_00000000000dbcb0:
	push %RBP
	mov -2784(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2856(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcad
	jmp uuid_00000000000dbcaf
uuid_00000000000dbcad:
	push %RBP
	pushq -2760(%RBP)
	pushq -2768(%RBP)
	pushq -2776(%RBP)
	jmp uuid_00000000000dbcaa
	jmp uuid_00000000000dbcac
uuid_00000000000dbcaa:
	movb $1, -2800(%rbp)
uuid_00000000000dbcac:
	mov -2864(%RBP),%RSP
	add $-2888, %RSP
uuid_00000000000dbcaf:
	mov -2816(%RBP),%RSP
	add $-2888, %RSP
uuid_00000000000dbcb2:
	mov -2808(%RBP),%RSP
	add $-2888, %RSP
	mov -2800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcb6
	jmp uuid_00000000000dbcb8
uuid_00000000000dbcb6:
	push %RBP
	pushq -2696(%RBP)
	pushq -2704(%RBP)
	pushq -2712(%RBP)
	jmp uuid_00000000000dbcb3
	jmp uuid_00000000000dbcb5
uuid_00000000000dbcb3:
	movb $1, -2736(%rbp)
uuid_00000000000dbcb5:
	mov -2896(%RBP),%RSP
	add $-2920, %RSP
uuid_00000000000dbcb8:
	mov -2752(%RBP),%RSP
	add $-2920, %RSP
uuid_00000000000dbcbb:
	mov -2744(%RBP),%RSP
	add $-2920, %RSP
	mov -2736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcbf
	jmp uuid_00000000000dbcc1
uuid_00000000000dbcbf:
	push %RBP
	mov -2648(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2936(%rbp)
	pushq $uuid_00000000000db3a7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbcbc
	jmp uuid_00000000000dbcbe
uuid_00000000000dbcbc:
	movb $1, -2672(%rbp)
uuid_00000000000dbcbe:
	mov -2928(%RBP),%RSP
	add $-2936, %RSP
uuid_00000000000dbcc1:
	mov -2688(%RBP),%RSP
	add $-2936, %RSP
uuid_00000000000dbcc4:
	mov -2680(%RBP),%RSP
	add $-2936, %RSP
	mov -2672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcda
	jmp uuid_00000000000dbcdc
uuid_00000000000dbcda:
	push %RBP
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq $0
	push %RBP
	mov -2968(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcd4
	jmp uuid_00000000000dbcd6
uuid_00000000000dbcd4:
	push %RBP
	mov -2960(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3032(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbccb
	jmp uuid_00000000000dbccd
uuid_00000000000dbccb:
	push %RBP
	mov -3024(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3096(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcc8
	jmp uuid_00000000000dbcca
uuid_00000000000dbcc8:
	push %RBP
	pushq -3000(%RBP)
	pushq -3008(%RBP)
	pushq -3016(%RBP)
	jmp uuid_00000000000dbcc5
	jmp uuid_00000000000dbcc7
uuid_00000000000dbcc5:
	movb $1, -3040(%rbp)
uuid_00000000000dbcc7:
	mov -3104(%RBP),%RSP
	add $-3128, %RSP
uuid_00000000000dbcca:
	mov -3056(%RBP),%RSP
	add $-3128, %RSP
uuid_00000000000dbccd:
	mov -3048(%RBP),%RSP
	add $-3128, %RSP
	mov -3040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcd1
	jmp uuid_00000000000dbcd3
uuid_00000000000dbcd1:
	push %RBP
	mov -2952(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3144(%rbp)
	pushq $uuid_00000000000db284
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbcce
	jmp uuid_00000000000dbcd0
uuid_00000000000dbcce:
	movb $1, -2976(%rbp)
uuid_00000000000dbcd0:
	mov -3136(%RBP),%RSP
	add $-3144, %RSP
uuid_00000000000dbcd3:
	mov -2992(%RBP),%RSP
	add $-3144, %RSP
uuid_00000000000dbcd6:
	mov -2984(%RBP),%RSP
	add $-3144, %RSP
	mov -2976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcd7
	jmp uuid_00000000000dbcd9
uuid_00000000000dbcd7:
	movb $1, -2624(%rbp)
uuid_00000000000dbcd9:
	mov -2944(%RBP),%RSP
	add $-3144, %RSP
uuid_00000000000dbcdc:
	mov -2640(%RBP),%RSP
	add $-3144, %RSP
uuid_00000000000dbcdf:
	mov -2632(%RBP),%RSP
	add $-3144, %RSP
	mov -2624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd81
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -3208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd04
	jmp uuid_00000000000dbd06
uuid_00000000000dbd04:
	push %RBP
	pushq -3184(%RBP)
	pushq -3192(%RBP)
	pushq -3200(%RBP)
	pushq $0
	push %RBP
	mov -3256(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbce9
	jmp uuid_00000000000dbceb
uuid_00000000000dbce9:
	push %RBP
	mov -3248(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3320(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbce6
	jmp uuid_00000000000dbce8
uuid_00000000000dbce6:
	push %RBP
	mov -3240(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3336(%rbp)
	pushq $uuid_00000000000daff0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbce3
	jmp uuid_00000000000dbce5
uuid_00000000000dbce3:
	movb $1, -3264(%rbp)
uuid_00000000000dbce5:
	mov -3328(%RBP),%RSP
	add $-3336, %RSP
uuid_00000000000dbce8:
	mov -3280(%RBP),%RSP
	add $-3336, %RSP
uuid_00000000000dbceb:
	mov -3272(%RBP),%RSP
	add $-3336, %RSP
	mov -3264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd01
	jmp uuid_00000000000dbd03
uuid_00000000000dbd01:
	push %RBP
	pushq -3160(%RBP)
	pushq -3168(%RBP)
	pushq -3176(%RBP)
	pushq $0
	push %RBP
	mov -3368(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcfb
	jmp uuid_00000000000dbcfd
uuid_00000000000dbcfb:
	push %RBP
	mov -3360(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3432(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcf2
	jmp uuid_00000000000dbcf4
uuid_00000000000dbcf2:
	push %RBP
	mov -3424(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3496(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcef
	jmp uuid_00000000000dbcf1
uuid_00000000000dbcef:
	push %RBP
	pushq -3400(%RBP)
	pushq -3408(%RBP)
	pushq -3416(%RBP)
	jmp uuid_00000000000dbcec
	jmp uuid_00000000000dbcee
uuid_00000000000dbcec:
	movb $1, -3440(%rbp)
uuid_00000000000dbcee:
	mov -3504(%RBP),%RSP
	add $-3528, %RSP
uuid_00000000000dbcf1:
	mov -3456(%RBP),%RSP
	add $-3528, %RSP
uuid_00000000000dbcf4:
	mov -3448(%RBP),%RSP
	add $-3528, %RSP
	mov -3440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcf8
	jmp uuid_00000000000dbcfa
uuid_00000000000dbcf8:
	push %RBP
	mov -3352(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3544(%rbp)
	pushq $uuid_00000000000db284
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbcf5
	jmp uuid_00000000000dbcf7
uuid_00000000000dbcf5:
	movb $1, -3376(%rbp)
uuid_00000000000dbcf7:
	mov -3536(%RBP),%RSP
	add $-3544, %RSP
uuid_00000000000dbcfa:
	mov -3392(%RBP),%RSP
	add $-3544, %RSP
uuid_00000000000dbcfd:
	mov -3384(%RBP),%RSP
	add $-3544, %RSP
	mov -3376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcfe
	jmp uuid_00000000000dbd00
uuid_00000000000dbcfe:
	movb $1, -3216(%rbp)
uuid_00000000000dbd00:
	mov -3344(%RBP),%RSP
	add $-3544, %RSP
uuid_00000000000dbd03:
	mov -3232(%RBP),%RSP
	add $-3544, %RSP
uuid_00000000000dbd06:
	mov -3224(%RBP),%RSP
	add $-3544, %RSP
	mov -3216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd7e
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -3608(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd1f
	jmp uuid_00000000000dbd21
uuid_00000000000dbd1f:
	push %RBP
	pushq -3584(%RBP)
	pushq -3592(%RBP)
	pushq -3600(%RBP)
	jmp uuid_00000000000dbd1c
	jmp uuid_00000000000dbd1e
uuid_00000000000dbd1c:
	push %RBP
	pushq -3560(%RBP)
	pushq -3568(%RBP)
	pushq -3576(%RBP)
	pushq $0
	push %RBP
	mov -3688(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd16
	jmp uuid_00000000000dbd18
uuid_00000000000dbd16:
	push %RBP
	mov -3680(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3752(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd0d
	jmp uuid_00000000000dbd0f
uuid_00000000000dbd0d:
	push %RBP
	mov -3744(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3816(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd0a
	jmp uuid_00000000000dbd0c
uuid_00000000000dbd0a:
	push %RBP
	pushq -3720(%RBP)
	pushq -3728(%RBP)
	pushq -3736(%RBP)
	jmp uuid_00000000000dbd07
	jmp uuid_00000000000dbd09
uuid_00000000000dbd07:
	movb $1, -3760(%rbp)
uuid_00000000000dbd09:
	mov -3824(%RBP),%RSP
	add $-3848, %RSP
uuid_00000000000dbd0c:
	mov -3776(%RBP),%RSP
	add $-3848, %RSP
uuid_00000000000dbd0f:
	mov -3768(%RBP),%RSP
	add $-3848, %RSP
	mov -3760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd13
	jmp uuid_00000000000dbd15
uuid_00000000000dbd13:
	push %RBP
	mov -3672(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3864(%rbp)
	pushq $uuid_00000000000db284
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbd10
	jmp uuid_00000000000dbd12
uuid_00000000000dbd10:
	movb $1, -3696(%rbp)
uuid_00000000000dbd12:
	mov -3856(%RBP),%RSP
	add $-3864, %RSP
uuid_00000000000dbd15:
	mov -3712(%RBP),%RSP
	add $-3864, %RSP
uuid_00000000000dbd18:
	mov -3704(%RBP),%RSP
	add $-3864, %RSP
	mov -3696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd19
	jmp uuid_00000000000dbd1b
uuid_00000000000dbd19:
	movb $1, -3616(%rbp)
uuid_00000000000dbd1b:
	mov -3664(%RBP),%RSP
	add $-3864, %RSP
uuid_00000000000dbd1e:
	mov -3632(%RBP),%RSP
	add $-3864, %RSP
uuid_00000000000dbd21:
	mov -3624(%RBP),%RSP
	add $-3864, %RSP
	mov -3616(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd7b
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -3928(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd4d
	jmp uuid_00000000000dbd4f
uuid_00000000000dbd4d:
	push %RBP
	pushq -3904(%RBP)
	pushq -3912(%RBP)
	pushq -3920(%RBP)
	pushq $0
	push %RBP
	mov -3976(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd28
	jmp uuid_00000000000dbd2a
uuid_00000000000dbd28:
	push %RBP
	mov -3968(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4040(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd25
	jmp uuid_00000000000dbd27
uuid_00000000000dbd25:
	push %RBP
	mov -3960(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dbd22
	jmp uuid_00000000000dbd24
uuid_00000000000dbd22:
	movb $1, -3984(%rbp)
uuid_00000000000dbd24:
	mov -4048(%RBP),%RSP
	add $-4056, %RSP
uuid_00000000000dbd27:
	mov -4000(%RBP),%RSP
	add $-4056, %RSP
uuid_00000000000dbd2a:
	mov -3992(%RBP),%RSP
	add $-4056, %RSP
	mov -3984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd4a
	jmp uuid_00000000000dbd4c
uuid_00000000000dbd4a:
	push %RBP
	pushq -3880(%RBP)
	pushq -3888(%RBP)
	pushq -3896(%RBP)
	pushq $0
	push %RBP
	mov -4088(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd44
	jmp uuid_00000000000dbd46
uuid_00000000000dbd44:
	push %RBP
	mov -4080(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4152(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd3a
	jmp uuid_00000000000dbd3c
uuid_00000000000dbd3a:
	push %RBP
	mov -4144(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4216(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd37
	jmp uuid_00000000000dbd39
uuid_00000000000dbd37:
	push %RBP
	pushq -4120(%RBP)
	pushq -4128(%RBP)
	pushq -4136(%RBP)
	pushq $0
	push %RBP
	mov -4248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd31
	jmp uuid_00000000000dbd33
uuid_00000000000dbd31:
	push %RBP
	mov -4240(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4312(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd2e
	jmp uuid_00000000000dbd30
uuid_00000000000dbd2e:
	push %RBP
	mov -4232(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dbd2b
	jmp uuid_00000000000dbd2d
uuid_00000000000dbd2b:
	movb $1, -4256(%rbp)
uuid_00000000000dbd2d:
	mov -4320(%RBP),%RSP
	add $-4328, %RSP
uuid_00000000000dbd30:
	mov -4272(%RBP),%RSP
	add $-4328, %RSP
uuid_00000000000dbd33:
	mov -4264(%RBP),%RSP
	add $-4328, %RSP
	mov -4256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd34
	jmp uuid_00000000000dbd36
uuid_00000000000dbd34:
	movb $1, -4160(%rbp)
uuid_00000000000dbd36:
	mov -4224(%RBP),%RSP
	add $-4328, %RSP
uuid_00000000000dbd39:
	mov -4176(%RBP),%RSP
	add $-4328, %RSP
uuid_00000000000dbd3c:
	mov -4168(%RBP),%RSP
	add $-4328, %RSP
	mov -4160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd41
	jmp uuid_00000000000dbd43
uuid_00000000000dbd41:
	push %RBP
	mov -4072(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4344(%rbp)
	pushq $uuid_00000000000dbd3d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbd3e
	jmp uuid_00000000000dbd40
uuid_00000000000dbd3e:
	movb $1, -4096(%rbp)
uuid_00000000000dbd40:
	mov -4336(%RBP),%RSP
	add $-4344, %RSP
uuid_00000000000dbd43:
	mov -4112(%RBP),%RSP
	add $-4344, %RSP
uuid_00000000000dbd46:
	mov -4104(%RBP),%RSP
	add $-4344, %RSP
	mov -4096(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd47
	jmp uuid_00000000000dbd49
uuid_00000000000dbd47:
	movb $1, -3936(%rbp)
uuid_00000000000dbd49:
	mov -4064(%RBP),%RSP
	add $-4344, %RSP
uuid_00000000000dbd4c:
	mov -3952(%RBP),%RSP
	add $-4344, %RSP
uuid_00000000000dbd4f:
	mov -3944(%RBP),%RSP
	add $-4344, %RSP
	mov -3936(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd78
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -4408(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd6b
	jmp uuid_00000000000dbd6d
uuid_00000000000dbd6b:
	push %RBP
	pushq -4384(%RBP)
	pushq -4392(%RBP)
	pushq -4400(%RBP)
	pushq $0
	push %RBP
	mov -4456(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd59
	jmp uuid_00000000000dbd5b
uuid_00000000000dbd59:
	push %RBP
	mov -4448(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbd56
	jmp uuid_00000000000dbd58
uuid_00000000000dbd56:
	push %RBP
	mov -4440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dbd53
	jmp uuid_00000000000dbd55
uuid_00000000000dbd53:
	movb $1, -4464(%rbp)
uuid_00000000000dbd55:
	mov -4528(%RBP),%RSP
	add $-4536, %RSP
uuid_00000000000dbd58:
	mov -4480(%RBP),%RSP
	add $-4536, %RSP
uuid_00000000000dbd5b:
	mov -4472(%RBP),%RSP
	add $-4536, %RSP
	mov -4464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd68
	jmp uuid_00000000000dbd6a
uuid_00000000000dbd68:
	push %RBP
	pushq -4360(%RBP)
	pushq -4368(%RBP)
	pushq -4376(%RBP)
	pushq $0
	push %RBP
	mov -4568(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd62
	jmp uuid_00000000000dbd64
uuid_00000000000dbd62:
	push %RBP
	mov -4560(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbd5f
	jmp uuid_00000000000dbd61
uuid_00000000000dbd5f:
	push %RBP
	mov -4552(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dbd5c
	jmp uuid_00000000000dbd5e
uuid_00000000000dbd5c:
	movb $1, -4576(%rbp)
uuid_00000000000dbd5e:
	mov -4640(%RBP),%RSP
	add $-4648, %RSP
uuid_00000000000dbd61:
	mov -4592(%RBP),%RSP
	add $-4648, %RSP
uuid_00000000000dbd64:
	mov -4584(%RBP),%RSP
	add $-4648, %RSP
	mov -4576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd65
	jmp uuid_00000000000dbd67
uuid_00000000000dbd65:
	movb $1, -4416(%rbp)
uuid_00000000000dbd67:
	mov -4544(%RBP),%RSP
	add $-4648, %RSP
uuid_00000000000dbd6a:
	mov -4432(%RBP),%RSP
	add $-4648, %RSP
uuid_00000000000dbd6d:
	mov -4424(%RBP),%RSP
	add $-4648, %RSP
	mov -4416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd75
	push %RBP
	jmp uuid_00000000000dbd72
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dbd71
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dbd74
uuid_00000000000dbd72:
uuid_00000000000dbd74:
	mov -4656(%RBP),%RSP
	add $-4656, %RSP
	jmp uuid_00000000000dbd77
uuid_00000000000dbd75:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4648(%rbp)
	pushq -4536(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbd6e
	jmp uuid_00000000000dbd70
uuid_00000000000dbd6e:
#call function can-unify : Arrow<Cons<List<Type>,List<Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4600(%rbp)
	pushq -4608(%rbp)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000dbd70:
	mov -4656(%RBP),%RSP
	add $-4656, %RSP
uuid_00000000000dbd77:
	mov -4352(%RBP),%RSP
	add $-4656, %RSP
	jmp uuid_00000000000dbd7a
uuid_00000000000dbd78:
	push %RBP
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4328(%rbp)
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4056(%rbp)
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd50
	jmp uuid_00000000000dbd52
uuid_00000000000dbd50:
	movq $1, -64(%rbp)
uuid_00000000000dbd52:
	mov -4352(%RBP),%RSP
	add $-4352, %RSP
uuid_00000000000dbd7a:
	mov -3872(%RBP),%RSP
	add $-4352, %RSP
	jmp uuid_00000000000dbd7d
uuid_00000000000dbd7b:
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	pushq -3640(%rbp)
	pushq -3648(%rbp)
	pushq -3656(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000dbd7d:
	mov -3552(%RBP),%RSP
	add $-3864, %RSP
	jmp uuid_00000000000dbd80
uuid_00000000000dbd7e:
	movq $1, -64(%rbp)
uuid_00000000000dbd80:
	mov -3152(%RBP),%RSP
	add $-3544, %RSP
	jmp uuid_00000000000dbd83
uuid_00000000000dbd81:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3112(%rbp)
	pushq -3120(%rbp)
	pushq -3128(%rbp)
	pushq -2904(%rbp)
	pushq -2912(%rbp)
	pushq -2920(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbce0
	jmp uuid_00000000000dbce2
uuid_00000000000dbce0:
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -2872(%rbp)
	pushq -2880(%rbp)
	pushq -2888(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000dbce2:
	mov -3152(%RBP),%RSP
	add $-3152, %RSP
uuid_00000000000dbd83:
	mov -2560(%RBP),%RSP
	add $-3152, %RSP
	jmp uuid_00000000000dbd86
uuid_00000000000dbd84:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2504(%rbp)
	pushq -2512(%rbp)
	pushq -2520(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbca7
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
	jmp uuid_00000000000dbca9
uuid_00000000000dbca7:
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daff0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000dbca9:
	mov -2560(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000dbd86:
	mov -1968(%RBP),%RSP
	add $-2560, %RSP
	jmp uuid_00000000000dbd89
uuid_00000000000dbd87:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbc6e
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
	jmp uuid_00000000000dbc70
uuid_00000000000dbc6e:
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000dbc70:
	mov -1968(%RBP),%RSP
	add $-1968, %RSP
uuid_00000000000dbd89:
	mov -1104(%RBP),%RSP
	add $-1968, %RSP
	jmp uuid_00000000000dbd8c
uuid_00000000000dbd8a:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbc17
	jmp uuid_00000000000dbc19
uuid_00000000000dbc17:
	movq $1, -64(%rbp)
uuid_00000000000dbc19:
	mov -1104(%RBP),%RSP
	add $-1104, %RSP
	push %RBP
	mov -64(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc1a
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
	jmp uuid_00000000000dbc1c
uuid_00000000000dbc1a:
uuid_00000000000dbc1c:
	mov -1112(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000dbd8c:
	mov -880(%RBP),%RSP
	add $-1112, %RSP
	jmp uuid_00000000000dbd8f
uuid_00000000000dbd8d:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbc02
	jmp uuid_00000000000dbc04
uuid_00000000000dbc02:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbbff
	jmp uuid_00000000000dbc01
uuid_00000000000dbbff:
	movq $1, -64(%rbp)
uuid_00000000000dbc01:
	mov -888(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000dbc04:
	mov -880(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000dbd8f:
	mov -656(%RBP),%RSP
	add $-888, %RSP
	jmp uuid_00000000000dbd92
uuid_00000000000dbd90:
	movq $1, -64(%rbp)
uuid_00000000000dbd92:
	mov -480(%RBP),%RSP
	add $-648, %RSP
	jmp uuid_00000000000dbd95
uuid_00000000000dbd93:
	movq $1, -64(%rbp)
uuid_00000000000dbd95:
	mov -248(%RBP),%RSP
	add $-472, %RSP
	jmp uuid_00000000000dbd98
uuid_00000000000dbd96:
	movq $1, -64(%rbp)
uuid_00000000000dbd98:
	mov -128(%RBP),%RSP
	add $-240, %RSP
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
unify_CL_ArrowTContextConsTypeType:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbd99
	jmp uuid_00000000000dbd9b
uuid_00000000000dbd99:
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000dbd9b:
	mov -184(%RBP),%RSP
	add $-184, %RSP
	subq $120, %rsp
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
unify_SB_inner_CL_ArrowTContextConsTypeType:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbda2
	jmp uuid_00000000000dbda4
uuid_00000000000dbda2:
	push %RBP
	jmp uuid_00000000000dbd9f
	jmp uuid_00000000000dbda1
uuid_00000000000dbd9f:
	push %RBP
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd9c
	jmp uuid_00000000000dbd9e
uuid_00000000000dbd9c:
	movb $1, -304(%rbp)
uuid_00000000000dbd9e:
	mov -328(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000dbda1:
	mov -320(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000dbda4:
	mov -312(%RBP),%RSP
	add $-352, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbfdc
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbdba
	jmp uuid_00000000000dbdbc
uuid_00000000000dbdba:
	push %RBP
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq $0
	push %RBP
	mov -464(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbdab
	jmp uuid_00000000000dbdad
uuid_00000000000dbdab:
	push %RBP
	mov -456(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbda8
	jmp uuid_00000000000dbdaa
uuid_00000000000dbda8:
	push %RBP
	mov -448(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dbda5
	jmp uuid_00000000000dbda7
uuid_00000000000dbda5:
	movb $1, -472(%rbp)
uuid_00000000000dbda7:
	mov -536(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000dbdaa:
	mov -488(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000dbdad:
	mov -480(%RBP),%RSP
	add $-544, %RSP
	mov -472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbdb7
	jmp uuid_00000000000dbdb9
uuid_00000000000dbdb7:
	push %RBP
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq $0
	push %RBP
	mov -576(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbdb1
	jmp uuid_00000000000dbdb3
uuid_00000000000dbdb1:
	push %RBP
	mov -568(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dbdae
	jmp uuid_00000000000dbdb0
uuid_00000000000dbdae:
	movb $1, -584(%rbp)
uuid_00000000000dbdb0:
	mov -600(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000dbdb3:
	mov -592(%RBP),%RSP
	add $-608, %RSP
	mov -584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbdb4
	jmp uuid_00000000000dbdb6
uuid_00000000000dbdb4:
	movb $1, -424(%rbp)
uuid_00000000000dbdb6:
	mov -552(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000dbdb9:
	mov -440(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000dbdbc:
	mov -432(%RBP),%RSP
	add $-608, %RSP
	mov -424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbfd9
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbdd5
	jmp uuid_00000000000dbdd7
uuid_00000000000dbdd5:
	push %RBP
	jmp uuid_00000000000dbdd2
	jmp uuid_00000000000dbdd4
uuid_00000000000dbdd2:
	push %RBP
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq $0
	push %RBP
	mov -728(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbdcc
	jmp uuid_00000000000dbdce
uuid_00000000000dbdcc:
	push %RBP
	mov -720(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -792(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbdc3
	jmp uuid_00000000000dbdc5
uuid_00000000000dbdc3:
	push %RBP
	mov -784(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -856(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbdc0
	jmp uuid_00000000000dbdc2
uuid_00000000000dbdc0:
	push %RBP
	pushq -760(%RBP)
	pushq -768(%RBP)
	pushq -776(%RBP)
	jmp uuid_00000000000dbdbd
	jmp uuid_00000000000dbdbf
uuid_00000000000dbdbd:
	movb $1, -800(%rbp)
uuid_00000000000dbdbf:
	mov -864(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000dbdc2:
	mov -816(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000dbdc5:
	mov -808(%RBP),%RSP
	add $-888, %RSP
	mov -800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbdc9
	jmp uuid_00000000000dbdcb
uuid_00000000000dbdc9:
	push %RBP
	mov -712(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -904(%rbp)
	pushq $uuid_00000000000dbbcb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbdc6
	jmp uuid_00000000000dbdc8
uuid_00000000000dbdc6:
	movb $1, -736(%rbp)
uuid_00000000000dbdc8:
	mov -896(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000dbdcb:
	mov -752(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000dbdce:
	mov -744(%RBP),%RSP
	add $-904, %RSP
	mov -736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbdcf
	jmp uuid_00000000000dbdd1
uuid_00000000000dbdcf:
	movb $1, -680(%rbp)
uuid_00000000000dbdd1:
	mov -704(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000dbdd4:
	mov -696(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000dbdd7:
	mov -688(%RBP),%RSP
	add $-904, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbfd6
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -968(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbde4
	jmp uuid_00000000000dbde6
uuid_00000000000dbde4:
	push %RBP
	pushq -944(%RBP)
	pushq -952(%RBP)
	pushq -960(%RBP)
	jmp uuid_00000000000dbde1
	jmp uuid_00000000000dbde3
uuid_00000000000dbde1:
	push %RBP
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	pushq $0
	push %RBP
	mov -1048(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbddb
	jmp uuid_00000000000dbddd
uuid_00000000000dbddb:
	push %RBP
	mov -1040(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dbdd8
	jmp uuid_00000000000dbdda
uuid_00000000000dbdd8:
	movb $1, -1056(%rbp)
uuid_00000000000dbdda:
	mov -1072(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000dbddd:
	mov -1064(%RBP),%RSP
	add $-1080, %RSP
	mov -1056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbdde
	jmp uuid_00000000000dbde0
uuid_00000000000dbdde:
	movb $1, -976(%rbp)
uuid_00000000000dbde0:
	mov -1024(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000dbde3:
	mov -992(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000dbde6:
	mov -984(%RBP),%RSP
	add $-1080, %RSP
	mov -976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbfd3
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -1144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbdf6
	jmp uuid_00000000000dbdf8
uuid_00000000000dbdf6:
	push %RBP
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	jmp uuid_00000000000dbdf3
	jmp uuid_00000000000dbdf5
uuid_00000000000dbdf3:
	push %RBP
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq $0
	push %RBP
	mov -1224(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbded
	jmp uuid_00000000000dbdef
uuid_00000000000dbded:
	push %RBP
	mov -1216(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbdea
	jmp uuid_00000000000dbdec
uuid_00000000000dbdea:
	push %RBP
	mov -1208(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbde7
	jmp uuid_00000000000dbde9
uuid_00000000000dbde7:
	movb $1, -1232(%rbp)
uuid_00000000000dbde9:
	mov -1280(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000dbdec:
	mov -1248(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000dbdef:
	mov -1240(%RBP),%RSP
	add $-1304, %RSP
	mov -1232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbdf0
	jmp uuid_00000000000dbdf2
uuid_00000000000dbdf0:
	movb $1, -1152(%rbp)
uuid_00000000000dbdf2:
	mov -1200(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000dbdf5:
	mov -1168(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000dbdf8:
	mov -1160(%RBP),%RSP
	add $-1304, %RSP
	mov -1152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbfd0
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -1368(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe2d
	jmp uuid_00000000000dbe2f
uuid_00000000000dbe2d:
	push %RBP
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq $0
	push %RBP
	mov -1416(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe24
	jmp uuid_00000000000dbe26
uuid_00000000000dbe24:
	push %RBP
	mov -1408(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbe21
	jmp uuid_00000000000dbe23
uuid_00000000000dbe21:
	push %RBP
	mov -1400(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbe1e
	jmp uuid_00000000000dbe20
uuid_00000000000dbe1e:
	movb $1, -1424(%rbp)
uuid_00000000000dbe20:
	mov -1472(%RBP),%RSP
	add $-1496, %RSP
uuid_00000000000dbe23:
	mov -1440(%RBP),%RSP
	add $-1496, %RSP
uuid_00000000000dbe26:
	mov -1432(%RBP),%RSP
	add $-1496, %RSP
	mov -1424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe2a
	jmp uuid_00000000000dbe2c
uuid_00000000000dbe2a:
	push %RBP
	pushq -1320(%RBP)
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	jmp uuid_00000000000dbe27
	jmp uuid_00000000000dbe29
uuid_00000000000dbe27:
	movb $1, -1376(%rbp)
uuid_00000000000dbe29:
	mov -1504(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000dbe2c:
	mov -1392(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000dbe2f:
	mov -1384(%RBP),%RSP
	add $-1528, %RSP
	mov -1376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbfcd
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -1592(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbeaf
	jmp uuid_00000000000dbeb1
uuid_00000000000dbeaf:
	push %RBP
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq $0
	push %RBP
	mov -1640(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe79
	jmp uuid_00000000000dbe7b
uuid_00000000000dbe79:
	push %RBP
	mov -1632(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1704(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe70
	jmp uuid_00000000000dbe72
uuid_00000000000dbe70:
	push %RBP
	mov -1696(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1768(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe67
	jmp uuid_00000000000dbe69
uuid_00000000000dbe67:
	push %RBP
	mov -1760(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1832(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe64
	jmp uuid_00000000000dbe66
uuid_00000000000dbe64:
	push %RBP
	pushq -1736(%RBP)
	pushq -1744(%RBP)
	pushq -1752(%RBP)
	jmp uuid_00000000000dbe61
	jmp uuid_00000000000dbe63
uuid_00000000000dbe61:
	movb $1, -1776(%rbp)
uuid_00000000000dbe63:
	mov -1840(%RBP),%RSP
	add $-1864, %RSP
uuid_00000000000dbe66:
	mov -1792(%RBP),%RSP
	add $-1864, %RSP
uuid_00000000000dbe69:
	mov -1784(%RBP),%RSP
	add $-1864, %RSP
	mov -1776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe6d
	jmp uuid_00000000000dbe6f
uuid_00000000000dbe6d:
	push %RBP
	pushq -1672(%RBP)
	pushq -1680(%RBP)
	pushq -1688(%RBP)
	jmp uuid_00000000000dbe6a
	jmp uuid_00000000000dbe6c
uuid_00000000000dbe6a:
	movb $1, -1712(%rbp)
uuid_00000000000dbe6c:
	mov -1872(%RBP),%RSP
	add $-1896, %RSP
uuid_00000000000dbe6f:
	mov -1728(%RBP),%RSP
	add $-1896, %RSP
uuid_00000000000dbe72:
	mov -1720(%RBP),%RSP
	add $-1896, %RSP
	mov -1712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe76
	jmp uuid_00000000000dbe78
uuid_00000000000dbe76:
	push %RBP
	mov -1624(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1912(%rbp)
	pushq $uuid_00000000000db3a7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbe73
	jmp uuid_00000000000dbe75
uuid_00000000000dbe73:
	movb $1, -1648(%rbp)
uuid_00000000000dbe75:
	mov -1904(%RBP),%RSP
	add $-1912, %RSP
uuid_00000000000dbe78:
	mov -1664(%RBP),%RSP
	add $-1912, %RSP
uuid_00000000000dbe7b:
	mov -1656(%RBP),%RSP
	add $-1912, %RSP
	mov -1648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbeac
	jmp uuid_00000000000dbeae
uuid_00000000000dbeac:
	push %RBP
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq $0
	push %RBP
	mov -1944(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbea6
	jmp uuid_00000000000dbea8
uuid_00000000000dbea6:
	push %RBP
	mov -1936(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2008(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe9d
	jmp uuid_00000000000dbe9f
uuid_00000000000dbe9d:
	push %RBP
	mov -2000(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2072(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe82
	jmp uuid_00000000000dbe84
uuid_00000000000dbe82:
	push %RBP
	mov -2064(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe7f
	jmp uuid_00000000000dbe81
uuid_00000000000dbe7f:
	push %RBP
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	jmp uuid_00000000000dbe7c
	jmp uuid_00000000000dbe7e
uuid_00000000000dbe7c:
	movb $1, -2080(%rbp)
uuid_00000000000dbe7e:
	mov -2144(%RBP),%RSP
	add $-2168, %RSP
uuid_00000000000dbe81:
	mov -2096(%RBP),%RSP
	add $-2168, %RSP
uuid_00000000000dbe84:
	mov -2088(%RBP),%RSP
	add $-2168, %RSP
	mov -2080(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe9a
	jmp uuid_00000000000dbe9c
uuid_00000000000dbe9a:
	push %RBP
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq $0
	push %RBP
	mov -2200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe94
	jmp uuid_00000000000dbe96
uuid_00000000000dbe94:
	push %RBP
	mov -2192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2264(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe8b
	jmp uuid_00000000000dbe8d
uuid_00000000000dbe8b:
	push %RBP
	mov -2256(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2328(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe88
	jmp uuid_00000000000dbe8a
uuid_00000000000dbe88:
	push %RBP
	pushq -2232(%RBP)
	pushq -2240(%RBP)
	pushq -2248(%RBP)
	jmp uuid_00000000000dbe85
	jmp uuid_00000000000dbe87
uuid_00000000000dbe85:
	movb $1, -2272(%rbp)
uuid_00000000000dbe87:
	mov -2336(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000dbe8a:
	mov -2288(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000dbe8d:
	mov -2280(%RBP),%RSP
	add $-2360, %RSP
	mov -2272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe91
	jmp uuid_00000000000dbe93
uuid_00000000000dbe91:
	push %RBP
	mov -2184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2376(%rbp)
	pushq $uuid_00000000000db284
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbe8e
	jmp uuid_00000000000dbe90
uuid_00000000000dbe8e:
	movb $1, -2208(%rbp)
uuid_00000000000dbe90:
	mov -2368(%RBP),%RSP
	add $-2376, %RSP
uuid_00000000000dbe93:
	mov -2224(%RBP),%RSP
	add $-2376, %RSP
uuid_00000000000dbe96:
	mov -2216(%RBP),%RSP
	add $-2376, %RSP
	mov -2208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe97
	jmp uuid_00000000000dbe99
uuid_00000000000dbe97:
	movb $1, -2016(%rbp)
uuid_00000000000dbe99:
	mov -2176(%RBP),%RSP
	add $-2376, %RSP
uuid_00000000000dbe9c:
	mov -2032(%RBP),%RSP
	add $-2376, %RSP
uuid_00000000000dbe9f:
	mov -2024(%RBP),%RSP
	add $-2376, %RSP
	mov -2016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbea3
	jmp uuid_00000000000dbea5
uuid_00000000000dbea3:
	push %RBP
	mov -1928(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2392(%rbp)
	pushq $uuid_00000000000db3a7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbea0
	jmp uuid_00000000000dbea2
uuid_00000000000dbea0:
	movb $1, -1952(%rbp)
uuid_00000000000dbea2:
	mov -2384(%RBP),%RSP
	add $-2392, %RSP
uuid_00000000000dbea5:
	mov -1968(%RBP),%RSP
	add $-2392, %RSP
uuid_00000000000dbea8:
	mov -1960(%RBP),%RSP
	add $-2392, %RSP
	mov -1952(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbea9
	jmp uuid_00000000000dbeab
uuid_00000000000dbea9:
	movb $1, -1600(%rbp)
uuid_00000000000dbeab:
	mov -1920(%RBP),%RSP
	add $-2392, %RSP
uuid_00000000000dbeae:
	mov -1616(%RBP),%RSP
	add $-2392, %RSP
uuid_00000000000dbeb1:
	mov -1608(%RBP),%RSP
	add $-2392, %RSP
	mov -1600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbfca
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -2456(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbee8
	jmp uuid_00000000000dbeea
uuid_00000000000dbee8:
	push %RBP
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	jmp uuid_00000000000dbee5
	jmp uuid_00000000000dbee7
uuid_00000000000dbee5:
	push %RBP
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq $0
	push %RBP
	mov -2536(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbedf
	jmp uuid_00000000000dbee1
uuid_00000000000dbedf:
	push %RBP
	mov -2528(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2600(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbed6
	jmp uuid_00000000000dbed8
uuid_00000000000dbed6:
	push %RBP
	mov -2592(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbebb
	jmp uuid_00000000000dbebd
uuid_00000000000dbebb:
	push %RBP
	mov -2656(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2728(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbeb8
	jmp uuid_00000000000dbeba
uuid_00000000000dbeb8:
	push %RBP
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	jmp uuid_00000000000dbeb5
	jmp uuid_00000000000dbeb7
uuid_00000000000dbeb5:
	movb $1, -2672(%rbp)
uuid_00000000000dbeb7:
	mov -2736(%RBP),%RSP
	add $-2760, %RSP
uuid_00000000000dbeba:
	mov -2688(%RBP),%RSP
	add $-2760, %RSP
uuid_00000000000dbebd:
	mov -2680(%RBP),%RSP
	add $-2760, %RSP
	mov -2672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbed3
	jmp uuid_00000000000dbed5
uuid_00000000000dbed3:
	push %RBP
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq $0
	push %RBP
	mov -2792(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbecd
	jmp uuid_00000000000dbecf
uuid_00000000000dbecd:
	push %RBP
	mov -2784(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2856(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbec4
	jmp uuid_00000000000dbec6
uuid_00000000000dbec4:
	push %RBP
	mov -2848(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2920(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbec1
	jmp uuid_00000000000dbec3
uuid_00000000000dbec1:
	push %RBP
	pushq -2824(%RBP)
	pushq -2832(%RBP)
	pushq -2840(%RBP)
	jmp uuid_00000000000dbebe
	jmp uuid_00000000000dbec0
uuid_00000000000dbebe:
	movb $1, -2864(%rbp)
uuid_00000000000dbec0:
	mov -2928(%RBP),%RSP
	add $-2952, %RSP
uuid_00000000000dbec3:
	mov -2880(%RBP),%RSP
	add $-2952, %RSP
uuid_00000000000dbec6:
	mov -2872(%RBP),%RSP
	add $-2952, %RSP
	mov -2864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbeca
	jmp uuid_00000000000dbecc
uuid_00000000000dbeca:
	push %RBP
	mov -2776(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2968(%rbp)
	pushq $uuid_00000000000db284
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbec7
	jmp uuid_00000000000dbec9
uuid_00000000000dbec7:
	movb $1, -2800(%rbp)
uuid_00000000000dbec9:
	mov -2960(%RBP),%RSP
	add $-2968, %RSP
uuid_00000000000dbecc:
	mov -2816(%RBP),%RSP
	add $-2968, %RSP
uuid_00000000000dbecf:
	mov -2808(%RBP),%RSP
	add $-2968, %RSP
	mov -2800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbed0
	jmp uuid_00000000000dbed2
uuid_00000000000dbed0:
	movb $1, -2608(%rbp)
uuid_00000000000dbed2:
	mov -2768(%RBP),%RSP
	add $-2968, %RSP
uuid_00000000000dbed5:
	mov -2624(%RBP),%RSP
	add $-2968, %RSP
uuid_00000000000dbed8:
	mov -2616(%RBP),%RSP
	add $-2968, %RSP
	mov -2608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbedc
	jmp uuid_00000000000dbede
uuid_00000000000dbedc:
	push %RBP
	mov -2520(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2984(%rbp)
	pushq $uuid_00000000000db3a7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbed9
	jmp uuid_00000000000dbedb
uuid_00000000000dbed9:
	movb $1, -2544(%rbp)
uuid_00000000000dbedb:
	mov -2976(%RBP),%RSP
	add $-2984, %RSP
uuid_00000000000dbede:
	mov -2560(%RBP),%RSP
	add $-2984, %RSP
uuid_00000000000dbee1:
	mov -2552(%RBP),%RSP
	add $-2984, %RSP
	mov -2544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbee2
	jmp uuid_00000000000dbee4
uuid_00000000000dbee2:
	movb $1, -2464(%rbp)
uuid_00000000000dbee4:
	mov -2512(%RBP),%RSP
	add $-2984, %RSP
uuid_00000000000dbee7:
	mov -2480(%RBP),%RSP
	add $-2984, %RSP
uuid_00000000000dbeea:
	mov -2472(%RBP),%RSP
	add $-2984, %RSP
	mov -2464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbfc7
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -3048(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf21
	jmp uuid_00000000000dbf23
uuid_00000000000dbf21:
	push %RBP
	pushq -3024(%RBP)
	pushq -3032(%RBP)
	pushq -3040(%RBP)
	pushq $0
	push %RBP
	mov -3096(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf06
	jmp uuid_00000000000dbf08
uuid_00000000000dbf06:
	push %RBP
	mov -3088(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbefd
	jmp uuid_00000000000dbeff
uuid_00000000000dbefd:
	push %RBP
	mov -3152(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3224(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbef4
	jmp uuid_00000000000dbef6
uuid_00000000000dbef4:
	push %RBP
	mov -3216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3288(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbef1
	jmp uuid_00000000000dbef3
uuid_00000000000dbef1:
	push %RBP
	pushq -3192(%RBP)
	pushq -3200(%RBP)
	pushq -3208(%RBP)
	jmp uuid_00000000000dbeee
	jmp uuid_00000000000dbef0
uuid_00000000000dbeee:
	movb $1, -3232(%rbp)
uuid_00000000000dbef0:
	mov -3296(%RBP),%RSP
	add $-3320, %RSP
uuid_00000000000dbef3:
	mov -3248(%RBP),%RSP
	add $-3320, %RSP
uuid_00000000000dbef6:
	mov -3240(%RBP),%RSP
	add $-3320, %RSP
	mov -3232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbefa
	jmp uuid_00000000000dbefc
uuid_00000000000dbefa:
	push %RBP
	pushq -3128(%RBP)
	pushq -3136(%RBP)
	pushq -3144(%RBP)
	jmp uuid_00000000000dbef7
	jmp uuid_00000000000dbef9
uuid_00000000000dbef7:
	movb $1, -3168(%rbp)
uuid_00000000000dbef9:
	mov -3328(%RBP),%RSP
	add $-3352, %RSP
uuid_00000000000dbefc:
	mov -3184(%RBP),%RSP
	add $-3352, %RSP
uuid_00000000000dbeff:
	mov -3176(%RBP),%RSP
	add $-3352, %RSP
	mov -3168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf03
	jmp uuid_00000000000dbf05
uuid_00000000000dbf03:
	push %RBP
	mov -3080(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3368(%rbp)
	pushq $uuid_00000000000db3a7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbf00
	jmp uuid_00000000000dbf02
uuid_00000000000dbf00:
	movb $1, -3104(%rbp)
uuid_00000000000dbf02:
	mov -3360(%RBP),%RSP
	add $-3368, %RSP
uuid_00000000000dbf05:
	mov -3120(%RBP),%RSP
	add $-3368, %RSP
uuid_00000000000dbf08:
	mov -3112(%RBP),%RSP
	add $-3368, %RSP
	mov -3104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf1e
	jmp uuid_00000000000dbf20
uuid_00000000000dbf1e:
	push %RBP
	pushq -3000(%RBP)
	pushq -3008(%RBP)
	pushq -3016(%RBP)
	pushq $0
	push %RBP
	mov -3400(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf18
	jmp uuid_00000000000dbf1a
uuid_00000000000dbf18:
	push %RBP
	mov -3392(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3464(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf0f
	jmp uuid_00000000000dbf11
uuid_00000000000dbf0f:
	push %RBP
	mov -3456(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3528(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf0c
	jmp uuid_00000000000dbf0e
uuid_00000000000dbf0c:
	push %RBP
	pushq -3432(%RBP)
	pushq -3440(%RBP)
	pushq -3448(%RBP)
	jmp uuid_00000000000dbf09
	jmp uuid_00000000000dbf0b
uuid_00000000000dbf09:
	movb $1, -3472(%rbp)
uuid_00000000000dbf0b:
	mov -3536(%RBP),%RSP
	add $-3560, %RSP
uuid_00000000000dbf0e:
	mov -3488(%RBP),%RSP
	add $-3560, %RSP
uuid_00000000000dbf11:
	mov -3480(%RBP),%RSP
	add $-3560, %RSP
	mov -3472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf15
	jmp uuid_00000000000dbf17
uuid_00000000000dbf15:
	push %RBP
	mov -3384(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3576(%rbp)
	pushq $uuid_00000000000db284
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbf12
	jmp uuid_00000000000dbf14
uuid_00000000000dbf12:
	movb $1, -3408(%rbp)
uuid_00000000000dbf14:
	mov -3568(%RBP),%RSP
	add $-3576, %RSP
uuid_00000000000dbf17:
	mov -3424(%RBP),%RSP
	add $-3576, %RSP
uuid_00000000000dbf1a:
	mov -3416(%RBP),%RSP
	add $-3576, %RSP
	mov -3408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf1b
	jmp uuid_00000000000dbf1d
uuid_00000000000dbf1b:
	movb $1, -3056(%rbp)
uuid_00000000000dbf1d:
	mov -3376(%RBP),%RSP
	add $-3576, %RSP
uuid_00000000000dbf20:
	mov -3072(%RBP),%RSP
	add $-3576, %RSP
uuid_00000000000dbf23:
	mov -3064(%RBP),%RSP
	add $-3576, %RSP
	mov -3056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbfc4
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -3640(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf48
	jmp uuid_00000000000dbf4a
uuid_00000000000dbf48:
	push %RBP
	pushq -3616(%RBP)
	pushq -3624(%RBP)
	pushq -3632(%RBP)
	pushq $0
	push %RBP
	mov -3688(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf2d
	jmp uuid_00000000000dbf2f
uuid_00000000000dbf2d:
	push %RBP
	mov -3680(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3752(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf2a
	jmp uuid_00000000000dbf2c
uuid_00000000000dbf2a:
	push %RBP
	mov -3672(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3768(%rbp)
	pushq $uuid_00000000000daff0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbf27
	jmp uuid_00000000000dbf29
uuid_00000000000dbf27:
	movb $1, -3696(%rbp)
uuid_00000000000dbf29:
	mov -3760(%RBP),%RSP
	add $-3768, %RSP
uuid_00000000000dbf2c:
	mov -3712(%RBP),%RSP
	add $-3768, %RSP
uuid_00000000000dbf2f:
	mov -3704(%RBP),%RSP
	add $-3768, %RSP
	mov -3696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf45
	jmp uuid_00000000000dbf47
uuid_00000000000dbf45:
	push %RBP
	pushq -3592(%RBP)
	pushq -3600(%RBP)
	pushq -3608(%RBP)
	pushq $0
	push %RBP
	mov -3800(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf3f
	jmp uuid_00000000000dbf41
uuid_00000000000dbf3f:
	push %RBP
	mov -3792(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3864(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf36
	jmp uuid_00000000000dbf38
uuid_00000000000dbf36:
	push %RBP
	mov -3856(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3928(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf33
	jmp uuid_00000000000dbf35
uuid_00000000000dbf33:
	push %RBP
	pushq -3832(%RBP)
	pushq -3840(%RBP)
	pushq -3848(%RBP)
	jmp uuid_00000000000dbf30
	jmp uuid_00000000000dbf32
uuid_00000000000dbf30:
	movb $1, -3872(%rbp)
uuid_00000000000dbf32:
	mov -3936(%RBP),%RSP
	add $-3960, %RSP
uuid_00000000000dbf35:
	mov -3888(%RBP),%RSP
	add $-3960, %RSP
uuid_00000000000dbf38:
	mov -3880(%RBP),%RSP
	add $-3960, %RSP
	mov -3872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf3c
	jmp uuid_00000000000dbf3e
uuid_00000000000dbf3c:
	push %RBP
	mov -3784(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3976(%rbp)
	pushq $uuid_00000000000db284
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbf39
	jmp uuid_00000000000dbf3b
uuid_00000000000dbf39:
	movb $1, -3808(%rbp)
uuid_00000000000dbf3b:
	mov -3968(%RBP),%RSP
	add $-3976, %RSP
uuid_00000000000dbf3e:
	mov -3824(%RBP),%RSP
	add $-3976, %RSP
uuid_00000000000dbf41:
	mov -3816(%RBP),%RSP
	add $-3976, %RSP
	mov -3808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf42
	jmp uuid_00000000000dbf44
uuid_00000000000dbf42:
	movb $1, -3648(%rbp)
uuid_00000000000dbf44:
	mov -3776(%RBP),%RSP
	add $-3976, %RSP
uuid_00000000000dbf47:
	mov -3664(%RBP),%RSP
	add $-3976, %RSP
uuid_00000000000dbf4a:
	mov -3656(%RBP),%RSP
	add $-3976, %RSP
	mov -3648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbfc1
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -4040(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf63
	jmp uuid_00000000000dbf65
uuid_00000000000dbf63:
	push %RBP
	pushq -4016(%RBP)
	pushq -4024(%RBP)
	pushq -4032(%RBP)
	jmp uuid_00000000000dbf60
	jmp uuid_00000000000dbf62
uuid_00000000000dbf60:
	push %RBP
	pushq -3992(%RBP)
	pushq -4000(%RBP)
	pushq -4008(%RBP)
	pushq $0
	push %RBP
	mov -4120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf5a
	jmp uuid_00000000000dbf5c
uuid_00000000000dbf5a:
	push %RBP
	mov -4112(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf51
	jmp uuid_00000000000dbf53
uuid_00000000000dbf51:
	push %RBP
	mov -4176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf4e
	jmp uuid_00000000000dbf50
uuid_00000000000dbf4e:
	push %RBP
	pushq -4152(%RBP)
	pushq -4160(%RBP)
	pushq -4168(%RBP)
	jmp uuid_00000000000dbf4b
	jmp uuid_00000000000dbf4d
uuid_00000000000dbf4b:
	movb $1, -4192(%rbp)
uuid_00000000000dbf4d:
	mov -4256(%RBP),%RSP
	add $-4280, %RSP
uuid_00000000000dbf50:
	mov -4208(%RBP),%RSP
	add $-4280, %RSP
uuid_00000000000dbf53:
	mov -4200(%RBP),%RSP
	add $-4280, %RSP
	mov -4192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf57
	jmp uuid_00000000000dbf59
uuid_00000000000dbf57:
	push %RBP
	mov -4104(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4296(%rbp)
	pushq $uuid_00000000000db284
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbf54
	jmp uuid_00000000000dbf56
uuid_00000000000dbf54:
	movb $1, -4128(%rbp)
uuid_00000000000dbf56:
	mov -4288(%RBP),%RSP
	add $-4296, %RSP
uuid_00000000000dbf59:
	mov -4144(%RBP),%RSP
	add $-4296, %RSP
uuid_00000000000dbf5c:
	mov -4136(%RBP),%RSP
	add $-4296, %RSP
	mov -4128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf5d
	jmp uuid_00000000000dbf5f
uuid_00000000000dbf5d:
	movb $1, -4048(%rbp)
uuid_00000000000dbf5f:
	mov -4096(%RBP),%RSP
	add $-4296, %RSP
uuid_00000000000dbf62:
	mov -4064(%RBP),%RSP
	add $-4296, %RSP
uuid_00000000000dbf65:
	mov -4056(%RBP),%RSP
	add $-4296, %RSP
	mov -4048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbfbe
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -4360(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf90
	jmp uuid_00000000000dbf92
uuid_00000000000dbf90:
	push %RBP
	pushq -4336(%RBP)
	pushq -4344(%RBP)
	pushq -4352(%RBP)
	pushq $0
	push %RBP
	mov -4408(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf6c
	jmp uuid_00000000000dbf6e
uuid_00000000000dbf6c:
	push %RBP
	mov -4400(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4472(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf69
	jmp uuid_00000000000dbf6b
uuid_00000000000dbf69:
	push %RBP
	mov -4392(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dbf66
	jmp uuid_00000000000dbf68
uuid_00000000000dbf66:
	movb $1, -4416(%rbp)
uuid_00000000000dbf68:
	mov -4480(%RBP),%RSP
	add $-4488, %RSP
uuid_00000000000dbf6b:
	mov -4432(%RBP),%RSP
	add $-4488, %RSP
uuid_00000000000dbf6e:
	mov -4424(%RBP),%RSP
	add $-4488, %RSP
	mov -4416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf8d
	jmp uuid_00000000000dbf8f
uuid_00000000000dbf8d:
	push %RBP
	pushq -4312(%RBP)
	pushq -4320(%RBP)
	pushq -4328(%RBP)
	pushq $0
	push %RBP
	mov -4520(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf87
	jmp uuid_00000000000dbf89
uuid_00000000000dbf87:
	push %RBP
	mov -4512(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4584(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf7e
	jmp uuid_00000000000dbf80
uuid_00000000000dbf7e:
	push %RBP
	mov -4576(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4648(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf7b
	jmp uuid_00000000000dbf7d
uuid_00000000000dbf7b:
	push %RBP
	pushq -4552(%RBP)
	pushq -4560(%RBP)
	pushq -4568(%RBP)
	pushq $0
	push %RBP
	mov -4680(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf75
	jmp uuid_00000000000dbf77
uuid_00000000000dbf75:
	push %RBP
	mov -4672(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4744(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf72
	jmp uuid_00000000000dbf74
uuid_00000000000dbf72:
	push %RBP
	mov -4664(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dbf6f
	jmp uuid_00000000000dbf71
uuid_00000000000dbf6f:
	movb $1, -4688(%rbp)
uuid_00000000000dbf71:
	mov -4752(%RBP),%RSP
	add $-4760, %RSP
uuid_00000000000dbf74:
	mov -4704(%RBP),%RSP
	add $-4760, %RSP
uuid_00000000000dbf77:
	mov -4696(%RBP),%RSP
	add $-4760, %RSP
	mov -4688(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf78
	jmp uuid_00000000000dbf7a
uuid_00000000000dbf78:
	movb $1, -4592(%rbp)
uuid_00000000000dbf7a:
	mov -4656(%RBP),%RSP
	add $-4760, %RSP
uuid_00000000000dbf7d:
	mov -4608(%RBP),%RSP
	add $-4760, %RSP
uuid_00000000000dbf80:
	mov -4600(%RBP),%RSP
	add $-4760, %RSP
	mov -4592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf84
	jmp uuid_00000000000dbf86
uuid_00000000000dbf84:
	push %RBP
	mov -4504(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4776(%rbp)
	pushq $uuid_00000000000dbd3d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbf81
	jmp uuid_00000000000dbf83
uuid_00000000000dbf81:
	movb $1, -4528(%rbp)
uuid_00000000000dbf83:
	mov -4768(%RBP),%RSP
	add $-4776, %RSP
uuid_00000000000dbf86:
	mov -4544(%RBP),%RSP
	add $-4776, %RSP
uuid_00000000000dbf89:
	mov -4536(%RBP),%RSP
	add $-4776, %RSP
	mov -4528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf8a
	jmp uuid_00000000000dbf8c
uuid_00000000000dbf8a:
	movb $1, -4368(%rbp)
uuid_00000000000dbf8c:
	mov -4496(%RBP),%RSP
	add $-4776, %RSP
uuid_00000000000dbf8f:
	mov -4384(%RBP),%RSP
	add $-4776, %RSP
uuid_00000000000dbf92:
	mov -4376(%RBP),%RSP
	add $-4776, %RSP
	mov -4368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbfbb
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -4840(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbfae
	jmp uuid_00000000000dbfb0
uuid_00000000000dbfae:
	push %RBP
	pushq -4816(%RBP)
	pushq -4824(%RBP)
	pushq -4832(%RBP)
	pushq $0
	push %RBP
	mov -4888(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf9c
	jmp uuid_00000000000dbf9e
uuid_00000000000dbf9c:
	push %RBP
	mov -4880(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbf99
	jmp uuid_00000000000dbf9b
uuid_00000000000dbf99:
	push %RBP
	mov -4872(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dbf96
	jmp uuid_00000000000dbf98
uuid_00000000000dbf96:
	movb $1, -4896(%rbp)
uuid_00000000000dbf98:
	mov -4960(%RBP),%RSP
	add $-4968, %RSP
uuid_00000000000dbf9b:
	mov -4912(%RBP),%RSP
	add $-4968, %RSP
uuid_00000000000dbf9e:
	mov -4904(%RBP),%RSP
	add $-4968, %RSP
	mov -4896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbfab
	jmp uuid_00000000000dbfad
uuid_00000000000dbfab:
	push %RBP
	pushq -4792(%RBP)
	pushq -4800(%RBP)
	pushq -4808(%RBP)
	pushq $0
	push %RBP
	mov -5000(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbfa5
	jmp uuid_00000000000dbfa7
uuid_00000000000dbfa5:
	push %RBP
	mov -4992(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbfa2
	jmp uuid_00000000000dbfa4
uuid_00000000000dbfa2:
	push %RBP
	mov -4984(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dbf9f
	jmp uuid_00000000000dbfa1
uuid_00000000000dbf9f:
	movb $1, -5008(%rbp)
uuid_00000000000dbfa1:
	mov -5072(%RBP),%RSP
	add $-5080, %RSP
uuid_00000000000dbfa4:
	mov -5024(%RBP),%RSP
	add $-5080, %RSP
uuid_00000000000dbfa7:
	mov -5016(%RBP),%RSP
	add $-5080, %RSP
	mov -5008(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbfa8
	jmp uuid_00000000000dbfaa
uuid_00000000000dbfa8:
	movb $1, -4848(%rbp)
uuid_00000000000dbfaa:
	mov -4976(%RBP),%RSP
	add $-5080, %RSP
uuid_00000000000dbfad:
	mov -4864(%RBP),%RSP
	add $-5080, %RSP
uuid_00000000000dbfb0:
	mov -4856(%RBP),%RSP
	add $-5080, %RSP
	mov -4848(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbfb8
	push %RBP
	jmp uuid_00000000000dbfb5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dbfb4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dbfb7
uuid_00000000000dbfb5:
uuid_00000000000dbfb7:
	mov -5088(%RBP),%RSP
	add $-5088, %RSP
	jmp uuid_00000000000dbfba
uuid_00000000000dbfb8:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5080(%rbp)
	pushq -4968(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbfb1
	jmp uuid_00000000000dbfb3
uuid_00000000000dbfb1:
#call function unify : Arrow<Cons<List<Type>,List<Type>>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -5064(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000dbfb3:
	mov -5088(%RBP),%RSP
	add $-5088, %RSP
uuid_00000000000dbfba:
	mov -4784(%RBP),%RSP
	add $-5088, %RSP
	jmp uuid_00000000000dbfbd
uuid_00000000000dbfbb:
	push %RBP
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4760(%rbp)
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4488(%rbp)
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf93
	jmp uuid_00000000000dbf95
uuid_00000000000dbf93:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000dbf95:
	mov -4784(%RBP),%RSP
	add $-4784, %RSP
uuid_00000000000dbfbd:
	mov -4304(%RBP),%RSP
	add $-4784, %RSP
	jmp uuid_00000000000dbfc0
uuid_00000000000dbfbe:
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4264(%rbp)
	pushq -4272(%rbp)
	pushq -4280(%rbp)
	pushq -4072(%rbp)
	pushq -4080(%rbp)
	pushq -4088(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000dbfc0:
	mov -3984(%RBP),%RSP
	add $-4296, %RSP
	jmp uuid_00000000000dbfc3
uuid_00000000000dbfc1:
uuid_00000000000dbfc3:
	mov -3584(%RBP),%RSP
	add $-3976, %RSP
	jmp uuid_00000000000dbfc6
uuid_00000000000dbfc4:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3544(%rbp)
	pushq -3552(%rbp)
	pushq -3560(%rbp)
	pushq -3336(%rbp)
	pushq -3344(%rbp)
	pushq -3352(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbf24
	jmp uuid_00000000000dbf26
uuid_00000000000dbf24:
#call function and : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -3304(%rbp)
	pushq -3312(%rbp)
	pushq -3320(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3544(%rbp)
	pushq -3552(%rbp)
	pushq -3560(%rbp)
	pushq -3336(%rbp)
	pushq -3344(%rbp)
	pushq -3352(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000dbf26:
	mov -3584(%RBP),%RSP
	add $-3584, %RSP
uuid_00000000000dbfc6:
	mov -2992(%RBP),%RSP
	add $-3584, %RSP
	jmp uuid_00000000000dbfc9
uuid_00000000000dbfc7:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2936(%rbp)
	pushq -2944(%rbp)
	pushq -2952(%rbp)
	pushq -2488(%rbp)
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbeeb
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2744(%rbp)
	pushq -2752(%rbp)
	pushq -2760(%rbp)
	pushq -2488(%rbp)
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	jmp uuid_00000000000dbeed
uuid_00000000000dbeeb:
#call function and : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2936(%rbp)
	pushq -2944(%rbp)
	pushq -2952(%rbp)
	pushq -2488(%rbp)
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2744(%rbp)
	pushq -2752(%rbp)
	pushq -2760(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daff0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000dbeed:
	mov -2992(%RBP),%RSP
	add $-2992, %RSP
uuid_00000000000dbfc9:
	mov -2400(%RBP),%RSP
	add $-2992, %RSP
	jmp uuid_00000000000dbfcc
uuid_00000000000dbfca:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbeb2
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	jmp uuid_00000000000dbeb4
uuid_00000000000dbeb2:
#call function and : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000dbeb4:
	mov -2400(%RBP),%RSP
	add $-2400, %RSP
uuid_00000000000dbfcc:
	mov -1536(%RBP),%RSP
	add $-2400, %RSP
	jmp uuid_00000000000dbfcf
uuid_00000000000dbfcd:
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	push %RBP
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq $0
	push %RBP
	mov -2032(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe36
	jmp uuid_00000000000dbe38
uuid_00000000000dbe36:
	push %RBP
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	mov -2176(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe33
	jmp uuid_00000000000dbe35
uuid_00000000000dbe33:
	push %RBP
	pushq -1792(%RBP)
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	pushq -1824(%RBP)
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	pushq -1856(%RBP)
	pushq -1864(%RBP)
	pushq -1872(%RBP)
	pushq -1880(%RBP)
	pushq -1888(%RBP)
	pushq -1896(%RBP)
	pushq -1904(%RBP)
	mov -2304(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe30
	jmp uuid_00000000000dbe32
uuid_00000000000dbe30:
	movb $1, -2040(%rbp)
uuid_00000000000dbe32:
	mov -2184(%RBP),%RSP
	add $-2304, %RSP
uuid_00000000000dbe35:
	mov -2056(%RBP),%RSP
	add $-2304, %RSP
uuid_00000000000dbe38:
	mov -2048(%RBP),%RSP
	add $-2304, %RSP
	mov -2040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe5e
	push %RBP
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq $0
	push %RBP
	mov -2560(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe3f
	jmp uuid_00000000000dbe41
uuid_00000000000dbe3f:
	push %RBP
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	mov -2704(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe3c
	jmp uuid_00000000000dbe3e
uuid_00000000000dbe3c:
	push %RBP
	pushq -2320(%RBP)
	pushq -2328(%RBP)
	pushq -2336(%RBP)
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	pushq -2360(%RBP)
	pushq -2368(%RBP)
	pushq -2376(%RBP)
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	jmp uuid_00000000000dbe39
	jmp uuid_00000000000dbe3b
uuid_00000000000dbe39:
	movb $1, -2568(%rbp)
uuid_00000000000dbe3b:
	mov -2712(%RBP),%RSP
	add $-2832, %RSP
uuid_00000000000dbe3e:
	mov -2584(%RBP),%RSP
	add $-2832, %RSP
uuid_00000000000dbe41:
	mov -2576(%RBP),%RSP
	add $-2832, %RSP
	mov -2568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe5b
	push %RBP
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq $0
	push %RBP
	mov -3088(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe48
	jmp uuid_00000000000dbe4a
uuid_00000000000dbe48:
	push %RBP
	pushq -2968(%RBP)
	pushq -2976(%RBP)
	pushq -2984(%RBP)
	pushq -2992(%RBP)
	pushq -3000(%RBP)
	pushq -3008(%RBP)
	pushq -3016(%RBP)
	pushq -3024(%RBP)
	pushq -3032(%RBP)
	pushq -3040(%RBP)
	pushq -3048(%RBP)
	pushq -3056(%RBP)
	pushq -3064(%RBP)
	pushq -3072(%RBP)
	pushq -3080(%RBP)
	jmp uuid_00000000000dbe45
	jmp uuid_00000000000dbe47
uuid_00000000000dbe45:
	push %RBP
	pushq -2848(%RBP)
	pushq -2856(%RBP)
	pushq -2864(%RBP)
	pushq -2872(%RBP)
	pushq -2880(%RBP)
	pushq -2888(%RBP)
	pushq -2896(%RBP)
	pushq -2904(%RBP)
	pushq -2912(%RBP)
	pushq -2920(%RBP)
	pushq -2928(%RBP)
	pushq -2936(%RBP)
	pushq -2944(%RBP)
	pushq -2952(%RBP)
	pushq -2960(%RBP)
	mov -3360(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe42
	jmp uuid_00000000000dbe44
uuid_00000000000dbe42:
	movb $1, -3096(%rbp)
uuid_00000000000dbe44:
	mov -3240(%RBP),%RSP
	add $-3360, %RSP
uuid_00000000000dbe47:
	mov -3112(%RBP),%RSP
	add $-3360, %RSP
uuid_00000000000dbe4a:
	mov -3104(%RBP),%RSP
	add $-3360, %RSP
	mov -3096(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe58
	push %RBP
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq $0
	push %RBP
	mov -3616(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe51
	jmp uuid_00000000000dbe53
uuid_00000000000dbe51:
	push %RBP
	pushq -3496(%RBP)
	pushq -3504(%RBP)
	pushq -3512(%RBP)
	pushq -3520(%RBP)
	pushq -3528(%RBP)
	pushq -3536(%RBP)
	pushq -3544(%RBP)
	pushq -3552(%RBP)
	pushq -3560(%RBP)
	pushq -3568(%RBP)
	pushq -3576(%RBP)
	pushq -3584(%RBP)
	pushq -3592(%RBP)
	pushq -3600(%RBP)
	pushq -3608(%RBP)
	jmp uuid_00000000000dbe4e
	jmp uuid_00000000000dbe50
uuid_00000000000dbe4e:
	push %RBP
	pushq -3376(%RBP)
	pushq -3384(%RBP)
	pushq -3392(%RBP)
	pushq -3400(%RBP)
	pushq -3408(%RBP)
	pushq -3416(%RBP)
	pushq -3424(%RBP)
	pushq -3432(%RBP)
	pushq -3440(%RBP)
	pushq -3448(%RBP)
	pushq -3456(%RBP)
	pushq -3464(%RBP)
	pushq -3472(%RBP)
	pushq -3480(%RBP)
	pushq -3488(%RBP)
	jmp uuid_00000000000dbe4b
	jmp uuid_00000000000dbe4d
uuid_00000000000dbe4b:
	movb $1, -3624(%rbp)
uuid_00000000000dbe4d:
	mov -3768(%RBP),%RSP
	add $-3888, %RSP
uuid_00000000000dbe50:
	mov -3640(%RBP),%RSP
	add $-3888, %RSP
uuid_00000000000dbe53:
	mov -3632(%RBP),%RSP
	add $-3888, %RSP
	mov -3624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe55
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dbe54
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dbe57
uuid_00000000000dbe55:
#call function union : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3776(%rbp)
	pushq -3784(%rbp)
	pushq -3792(%rbp)
	pushq -3800(%rbp)
	pushq -3808(%rbp)
	pushq -3816(%rbp)
	pushq -3824(%rbp)
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq -3880(%rbp)
	pushq -3888(%rbp)
	pushq -3648(%rbp)
	pushq -3656(%rbp)
	pushq -3664(%rbp)
	pushq -3672(%rbp)
	pushq -3680(%rbp)
	pushq -3688(%rbp)
	pushq -3696(%rbp)
	pushq -3704(%rbp)
	pushq -3712(%rbp)
	pushq -3720(%rbp)
	pushq -3728(%rbp)
	pushq -3736(%rbp)
	pushq -3744(%rbp)
	pushq -3752(%rbp)
	pushq -3760(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000dbe57:
	mov -3368(%RBP),%RSP
	add $-3888, %RSP
	jmp uuid_00000000000dbe5a
uuid_00000000000dbe58:
	movq -3232(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -3224(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -3216(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -3208(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -3200(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -3192(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -3184(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -3176(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -3168(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -3160(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -3152(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -3144(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -3136(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -3128(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -3120(%rbp), %r15
	movq %r15, -64(%rbp)
uuid_00000000000dbe5a:
	mov -2840(%RBP),%RSP
	add $-3360, %RSP
	jmp uuid_00000000000dbe5d
uuid_00000000000dbe5b:
	movq -2832(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -2824(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -2816(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -2808(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -2800(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -2792(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -2784(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -2776(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -2768(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -2760(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -2752(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -2744(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -2736(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -2728(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2720(%rbp), %r15
	movq %r15, -64(%rbp)
uuid_00000000000dbe5d:
	mov -2312(%RBP),%RSP
	add $-2832, %RSP
	jmp uuid_00000000000dbe60
uuid_00000000000dbe5e:
uuid_00000000000dbe60:
	mov -1784(%RBP),%RSP
	add $-2304, %RSP
uuid_00000000000dbfcf:
	mov -1312(%RBP),%RSP
	add $-2304, %RSP
	jmp uuid_00000000000dbfd2
uuid_00000000000dbfd0:
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	push %RBP
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq $0
	push %RBP
	mov -1808(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbdff
	jmp uuid_00000000000dbe01
uuid_00000000000dbdff:
	push %RBP
	jmp uuid_00000000000dbdfc
	jmp uuid_00000000000dbdfe
uuid_00000000000dbdfc:
	push %RBP
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	pushq -1656(%RBP)
	pushq -1664(%RBP)
	pushq -1672(%RBP)
	pushq -1680(%RBP)
	mov -1960(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbdf9
	jmp uuid_00000000000dbdfb
uuid_00000000000dbdf9:
	movb $1, -1816(%rbp)
uuid_00000000000dbdfb:
	mov -1840(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000dbdfe:
	mov -1832(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000dbe01:
	mov -1824(%RBP),%RSP
	add $-1960, %RSP
	mov -1816(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe1b
	push %RBP
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq $0
	push %RBP
	mov -2216(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe08
	jmp uuid_00000000000dbe0a
uuid_00000000000dbe08:
	push %RBP
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2152(%RBP)
	pushq -2160(%RBP)
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	mov -2360(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe05
	jmp uuid_00000000000dbe07
uuid_00000000000dbe05:
	push %RBP
	jmp uuid_00000000000dbe02
	jmp uuid_00000000000dbe04
uuid_00000000000dbe02:
	movb $1, -2224(%rbp)
uuid_00000000000dbe04:
	mov -2368(%RBP),%RSP
	add $-2368, %RSP
uuid_00000000000dbe07:
	mov -2240(%RBP),%RSP
	add $-2368, %RSP
uuid_00000000000dbe0a:
	mov -2232(%RBP),%RSP
	add $-2368, %RSP
	mov -2224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe18
	push %RBP
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq $0
	push %RBP
	mov -2624(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe11
	jmp uuid_00000000000dbe13
uuid_00000000000dbe11:
	push %RBP
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq -2560(%RBP)
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq -2592(%RBP)
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	jmp uuid_00000000000dbe0e
	jmp uuid_00000000000dbe10
uuid_00000000000dbe0e:
	push %RBP
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	jmp uuid_00000000000dbe0b
	jmp uuid_00000000000dbe0d
uuid_00000000000dbe0b:
	movb $1, -2632(%rbp)
uuid_00000000000dbe0d:
	mov -2776(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000dbe10:
	mov -2648(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000dbe13:
	mov -2640(%RBP),%RSP
	add $-2896, %RSP
	mov -2632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe15
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dbe14
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dbe17
uuid_00000000000dbe15:
#call function union : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2784(%rbp)
	pushq -2792(%rbp)
	pushq -2800(%rbp)
	pushq -2808(%rbp)
	pushq -2816(%rbp)
	pushq -2824(%rbp)
	pushq -2832(%rbp)
	pushq -2840(%rbp)
	pushq -2848(%rbp)
	pushq -2856(%rbp)
	pushq -2864(%rbp)
	pushq -2872(%rbp)
	pushq -2880(%rbp)
	pushq -2888(%rbp)
	pushq -2896(%rbp)
	pushq -2656(%rbp)
	pushq -2664(%rbp)
	pushq -2672(%rbp)
	pushq -2680(%rbp)
	pushq -2688(%rbp)
	pushq -2696(%rbp)
	pushq -2704(%rbp)
	pushq -2712(%rbp)
	pushq -2720(%rbp)
	pushq -2728(%rbp)
	pushq -2736(%rbp)
	pushq -2744(%rbp)
	pushq -2752(%rbp)
	pushq -2760(%rbp)
	pushq -2768(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000dbe17:
	mov -2376(%RBP),%RSP
	add $-2896, %RSP
	jmp uuid_00000000000dbe1a
uuid_00000000000dbe18:
uuid_00000000000dbe1a:
	mov -1968(%RBP),%RSP
	add $-2368, %RSP
	jmp uuid_00000000000dbe1d
uuid_00000000000dbe1b:
uuid_00000000000dbe1d:
	mov -1560(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000dbfd2:
	mov -1088(%RBP),%RSP
	add $-1960, %RSP
	jmp uuid_00000000000dbfd5
uuid_00000000000dbfd3:
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1080(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000dbfd5:
	mov -912(%RBP),%RSP
	add $-1080, %RSP
	jmp uuid_00000000000dbfd8
uuid_00000000000dbfd6:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000dbfd8:
	mov -616(%RBP),%RSP
	add $-904, %RSP
	jmp uuid_00000000000dbfdb
uuid_00000000000dbfd9:
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -608(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -544(%rbp)
#call function token::new : Arrow<String,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -544(%rbp)
	mov %RBX, %RBP
	call token_CL__CL_new_CL_ArrowTokenString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $6
	pushq $0
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000dbfdb:
	mov -360(%RBP),%RSP
	add $-608, %RSP
	jmp uuid_00000000000dbfde
uuid_00000000000dbfdc:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000dbfde:
	mov -240(%RBP),%RSP
	add $-352, %RSP
	subq $120, %rsp
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
unify_CL_ArrowTContextConsListTypeListType:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbfee
	jmp uuid_00000000000dbff0
uuid_00000000000dbfee:
	push %RBP
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbfeb
	jmp uuid_00000000000dbfed
uuid_00000000000dbfeb:
	push %RBP
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	mov -504(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbfe8
	jmp uuid_00000000000dbfea
uuid_00000000000dbfe8:
	movb $1, -400(%rbp)
uuid_00000000000dbfea:
	mov -464(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000dbfed:
	mov -416(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000dbff0:
	mov -408(%RBP),%RSP
	add $-504, %RSP
	mov -400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc016
	push %RBP
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc009
	jmp uuid_00000000000dc00b
uuid_00000000000dc009:
	push %RBP
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq $0
	push %RBP
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbff7
	jmp uuid_00000000000dbff9
uuid_00000000000dbff7:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbff4
	jmp uuid_00000000000dbff6
uuid_00000000000dbff4:
	push %RBP
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	jmp uuid_00000000000dbff1
	jmp uuid_00000000000dbff3
uuid_00000000000dbff1:
	movb $1, -672(%rbp)
uuid_00000000000dbff3:
	mov -736(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000dbff6:
	mov -688(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000dbff9:
	mov -680(%RBP),%RSP
	add $-760, %RSP
	mov -672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc006
	jmp uuid_00000000000dc008
uuid_00000000000dc006:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq $0
	push %RBP
	mov -808(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc000
	jmp uuid_00000000000dc002
uuid_00000000000dc000:
	push %RBP
	mov -800(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbffd
	jmp uuid_00000000000dbfff
uuid_00000000000dbffd:
	push %RBP
	pushq -776(%RBP)
	pushq -784(%RBP)
	pushq -792(%RBP)
	jmp uuid_00000000000dbffa
	jmp uuid_00000000000dbffc
uuid_00000000000dbffa:
	movb $1, -816(%rbp)
uuid_00000000000dbffc:
	mov -880(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000dbfff:
	mov -832(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000dc002:
	mov -824(%RBP),%RSP
	add $-904, %RSP
	mov -816(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc003
	jmp uuid_00000000000dc005
uuid_00000000000dc003:
	movb $1, -608(%rbp)
uuid_00000000000dc005:
	mov -768(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000dc008:
	mov -624(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000dc00b:
	mov -616(%RBP),%RSP
	add $-904, %RSP
	mov -608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc013
	push %RBP
	jmp uuid_00000000000dc010
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc00f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc012
uuid_00000000000dc010:
uuid_00000000000dc012:
	mov -912(%RBP),%RSP
	add $-912, %RSP
	jmp uuid_00000000000dc015
uuid_00000000000dc013:
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	push %RBP
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc00c
	jmp uuid_00000000000dc00e
uuid_00000000000dc00c:
#call function union : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
#call function unify : Arrow<Cons<List<Type>,List<Type>>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
uuid_00000000000dc00e:
	mov -912(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000dc015:
	mov -512(%RBP),%RSP
	add $-912, %RSP
	jmp uuid_00000000000dc018
uuid_00000000000dc016:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
uuid_00000000000dc018:
	mov -304(%RBP),%RSP
	add $-504, %RSP
	subq $120, %rsp
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $88, %rsp
	ret
fields_SB_of_SB_type_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc04b
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc031
	jmp uuid_00000000000dc033
uuid_00000000000dc031:
	push %RBP
	mov -112(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc028
	jmp uuid_00000000000dc02a
uuid_00000000000dc028:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc01f
	jmp uuid_00000000000dc021
uuid_00000000000dc01f:
	push %RBP
	mov -240(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc01c
	jmp uuid_00000000000dc01e
uuid_00000000000dc01c:
	push %RBP
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	jmp uuid_00000000000dc019
	jmp uuid_00000000000dc01b
uuid_00000000000dc019:
	movb $1, -256(%rbp)
uuid_00000000000dc01b:
	mov -320(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000dc01e:
	mov -272(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000dc021:
	mov -264(%RBP),%RSP
	add $-344, %RSP
	mov -256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc025
	jmp uuid_00000000000dc027
uuid_00000000000dc025:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	jmp uuid_00000000000dc022
	jmp uuid_00000000000dc024
uuid_00000000000dc022:
	movb $1, -192(%rbp)
uuid_00000000000dc024:
	mov -352(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000dc027:
	mov -208(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000dc02a:
	mov -200(%RBP),%RSP
	add $-376, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc02e
	jmp uuid_00000000000dc030
uuid_00000000000dc02e:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -392(%rbp)
	pushq $uuid_00000000000db3a7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc02b
	jmp uuid_00000000000dc02d
uuid_00000000000dc02b:
	movb $1, -128(%rbp)
uuid_00000000000dc02d:
	mov -384(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000dc030:
	mov -144(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000dc033:
	mov -136(%RBP),%RSP
	add $-392, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc048
	push %RBP
	jmp uuid_00000000000dc045
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc044
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc047
uuid_00000000000dc045:
	pushq $uuid_00000000000db3a7
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daff0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc047:
	mov -400(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000dc04a
uuid_00000000000dc048:
	pushq $uuid_00000000000db3a7
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fields-of-type : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call fields_SB_of_SB_type_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc04a:
	mov -96(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000dc04d
uuid_00000000000dc04b:
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daff0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc04d:
	mov -64(%RBP),%RSP
	add $-88, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
sizeof_SB_type_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc11d
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -128(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc051
	jmp uuid_00000000000dc053
uuid_00000000000dc051:
	push %RBP
	jmp uuid_00000000000dc04e
	jmp uuid_00000000000dc050
uuid_00000000000dc04e:
	movb $1, -136(%rbp)
uuid_00000000000dc050:
	mov -152(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000dc053:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	mov -136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc11a
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc05a
	jmp uuid_00000000000dc05c
uuid_00000000000dc05a:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc057
	jmp uuid_00000000000dc059
uuid_00000000000dc057:
	push %RBP
	mov -168(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc054
	jmp uuid_00000000000dc056
uuid_00000000000dc054:
	movb $1, -192(%rbp)
uuid_00000000000dc056:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dc059:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dc05c:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc117
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc075
	jmp uuid_00000000000dc077
uuid_00000000000dc075:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -360(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc06c
	jmp uuid_00000000000dc06e
uuid_00000000000dc06c:
	push %RBP
	mov -352(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -424(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc069
	jmp uuid_00000000000dc06b
uuid_00000000000dc069:
	push %RBP
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc063
	jmp uuid_00000000000dc065
uuid_00000000000dc063:
	push %RBP
	mov -448(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -520(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc060
	jmp uuid_00000000000dc062
uuid_00000000000dc060:
	push %RBP
	mov -440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc05d
	jmp uuid_00000000000dc05f
uuid_00000000000dc05d:
	movb $1, -464(%rbp)
uuid_00000000000dc05f:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000dc062:
	mov -480(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000dc065:
	mov -472(%RBP),%RSP
	add $-536, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc066
	jmp uuid_00000000000dc068
uuid_00000000000dc066:
	movb $1, -368(%rbp)
uuid_00000000000dc068:
	mov -432(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000dc06b:
	mov -384(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000dc06e:
	mov -376(%RBP),%RSP
	add $-536, %RSP
	mov -368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc072
	jmp uuid_00000000000dc074
uuid_00000000000dc072:
	push %RBP
	mov -280(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -552(%rbp)
	pushq $uuid_00000000000db5e1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc06f
	jmp uuid_00000000000dc071
uuid_00000000000dc06f:
	movb $1, -304(%rbp)
uuid_00000000000dc071:
	mov -544(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000dc074:
	mov -320(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000dc077:
	mov -312(%RBP),%RSP
	add $-552, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc114
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -584(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc090
	jmp uuid_00000000000dc092
uuid_00000000000dc090:
	push %RBP
	mov -576(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -648(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc087
	jmp uuid_00000000000dc089
uuid_00000000000dc087:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -712(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc07e
	jmp uuid_00000000000dc080
uuid_00000000000dc07e:
	push %RBP
	mov -704(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -776(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc07b
	jmp uuid_00000000000dc07d
uuid_00000000000dc07b:
	push %RBP
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	jmp uuid_00000000000dc078
	jmp uuid_00000000000dc07a
uuid_00000000000dc078:
	movb $1, -720(%rbp)
uuid_00000000000dc07a:
	mov -784(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000dc07d:
	mov -736(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000dc080:
	mov -728(%RBP),%RSP
	add $-808, %RSP
	mov -720(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc084
	jmp uuid_00000000000dc086
uuid_00000000000dc084:
	push %RBP
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	mov -840(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc081
	jmp uuid_00000000000dc083
uuid_00000000000dc081:
	movb $1, -656(%rbp)
uuid_00000000000dc083:
	mov -816(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000dc086:
	mov -672(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000dc089:
	mov -664(%RBP),%RSP
	add $-840, %RSP
	mov -656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc08d
	jmp uuid_00000000000dc08f
uuid_00000000000dc08d:
	push %RBP
	mov -568(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -856(%rbp)
	pushq $uuid_00000000000db084
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc08a
	jmp uuid_00000000000dc08c
uuid_00000000000dc08a:
	movb $1, -592(%rbp)
uuid_00000000000dc08c:
	mov -848(%RBP),%RSP
	add $-856, %RSP
uuid_00000000000dc08f:
	mov -608(%RBP),%RSP
	add $-856, %RSP
uuid_00000000000dc092:
	mov -600(%RBP),%RSP
	add $-856, %RSP
	mov -592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc111
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -888(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0ab
	jmp uuid_00000000000dc0ad
uuid_00000000000dc0ab:
	push %RBP
	mov -880(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -952(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0a2
	jmp uuid_00000000000dc0a4
uuid_00000000000dc0a2:
	push %RBP
	mov -944(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1016(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc099
	jmp uuid_00000000000dc09b
uuid_00000000000dc099:
	push %RBP
	mov -1008(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1080(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc096
	jmp uuid_00000000000dc098
uuid_00000000000dc096:
	push %RBP
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	jmp uuid_00000000000dc093
	jmp uuid_00000000000dc095
uuid_00000000000dc093:
	movb $1, -1024(%rbp)
uuid_00000000000dc095:
	mov -1088(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000dc098:
	mov -1040(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000dc09b:
	mov -1032(%RBP),%RSP
	add $-1112, %RSP
	mov -1024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc09f
	jmp uuid_00000000000dc0a1
uuid_00000000000dc09f:
	push %RBP
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	jmp uuid_00000000000dc09c
	jmp uuid_00000000000dc09e
uuid_00000000000dc09c:
	movb $1, -960(%rbp)
uuid_00000000000dc09e:
	mov -1120(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000dc0a1:
	mov -976(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000dc0a4:
	mov -968(%RBP),%RSP
	add $-1144, %RSP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0a8
	jmp uuid_00000000000dc0aa
uuid_00000000000dc0a8:
	push %RBP
	mov -872(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1160(%rbp)
	pushq $uuid_00000000000db3a7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc0a5
	jmp uuid_00000000000dc0a7
uuid_00000000000dc0a5:
	movb $1, -896(%rbp)
uuid_00000000000dc0a7:
	mov -1152(%RBP),%RSP
	add $-1160, %RSP
uuid_00000000000dc0aa:
	mov -912(%RBP),%RSP
	add $-1160, %RSP
uuid_00000000000dc0ad:
	mov -904(%RBP),%RSP
	add $-1160, %RSP
	mov -896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc10e
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1192(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0cf
	jmp uuid_00000000000dc0d1
uuid_00000000000dc0cf:
	push %RBP
	mov -1184(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1256(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0c6
	jmp uuid_00000000000dc0c8
uuid_00000000000dc0c6:
	push %RBP
	mov -1248(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1320(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0b4
	jmp uuid_00000000000dc0b6
uuid_00000000000dc0b4:
	push %RBP
	mov -1312(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1384(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0b1
	jmp uuid_00000000000dc0b3
uuid_00000000000dc0b1:
	push %RBP
	pushq -1288(%RBP)
	pushq -1296(%RBP)
	pushq -1304(%RBP)
	jmp uuid_00000000000dc0ae
	jmp uuid_00000000000dc0b0
uuid_00000000000dc0ae:
	movb $1, -1328(%rbp)
uuid_00000000000dc0b0:
	mov -1392(%RBP),%RSP
	add $-1416, %RSP
uuid_00000000000dc0b3:
	mov -1344(%RBP),%RSP
	add $-1416, %RSP
uuid_00000000000dc0b6:
	mov -1336(%RBP),%RSP
	add $-1416, %RSP
	mov -1328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0c3
	jmp uuid_00000000000dc0c5
uuid_00000000000dc0c3:
	push %RBP
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq $0
	push %RBP
	mov -1448(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0bd
	jmp uuid_00000000000dc0bf
uuid_00000000000dc0bd:
	push %RBP
	mov -1440(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1512(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0ba
	jmp uuid_00000000000dc0bc
uuid_00000000000dc0ba:
	push %RBP
	mov -1432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc0b7
	jmp uuid_00000000000dc0b9
uuid_00000000000dc0b7:
	movb $1, -1456(%rbp)
uuid_00000000000dc0b9:
	mov -1520(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000dc0bc:
	mov -1472(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000dc0bf:
	mov -1464(%RBP),%RSP
	add $-1528, %RSP
	mov -1456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0c0
	jmp uuid_00000000000dc0c2
uuid_00000000000dc0c0:
	movb $1, -1264(%rbp)
uuid_00000000000dc0c2:
	mov -1424(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000dc0c5:
	mov -1280(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000dc0c8:
	mov -1272(%RBP),%RSP
	add $-1528, %RSP
	mov -1264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0cc
	jmp uuid_00000000000dc0ce
uuid_00000000000dc0cc:
	push %RBP
	mov -1176(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1544(%rbp)
	pushq $uuid_00000000000db8d3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc0c9
	jmp uuid_00000000000dc0cb
uuid_00000000000dc0c9:
	movb $1, -1200(%rbp)
uuid_00000000000dc0cb:
	mov -1536(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000dc0ce:
	mov -1216(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000dc0d1:
	mov -1208(%RBP),%RSP
	add $-1544, %RSP
	mov -1200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc10b
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1576(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0d8
	jmp uuid_00000000000dc0da
uuid_00000000000dc0d8:
	push %RBP
	jmp uuid_00000000000dc0d5
	jmp uuid_00000000000dc0d7
uuid_00000000000dc0d5:
	push %RBP
	mov -1560(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc0d2
	jmp uuid_00000000000dc0d4
uuid_00000000000dc0d2:
	movb $1, -1584(%rbp)
uuid_00000000000dc0d4:
	mov -1608(%RBP),%RSP
	add $-1616, %RSP
uuid_00000000000dc0d7:
	mov -1600(%RBP),%RSP
	add $-1616, %RSP
uuid_00000000000dc0da:
	mov -1592(%RBP),%RSP
	add $-1616, %RSP
	mov -1584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc108
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1648(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0fa
	jmp uuid_00000000000dc0fc
uuid_00000000000dc0fa:
	push %RBP
	mov -1640(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc0f7
	jmp uuid_00000000000dc0f9
uuid_00000000000dc0f7:
	push %RBP
	mov -1632(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc0f4
	jmp uuid_00000000000dc0f6
uuid_00000000000dc0f4:
	movb $1, -1656(%rbp)
uuid_00000000000dc0f6:
	mov -1704(%RBP),%RSP
	add $-1728, %RSP
uuid_00000000000dc0f9:
	mov -1672(%RBP),%RSP
	add $-1728, %RSP
uuid_00000000000dc0fc:
	mov -1664(%RBP),%RSP
	add $-1728, %RSP
	mov -1656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc105
	push %RBP
	jmp uuid_00000000000dc102
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc101
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc104
uuid_00000000000dc102:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc100
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dc104:
	mov -1736(%RBP),%RSP
	add $-1736, %RSP
	jmp uuid_00000000000dc107
uuid_00000000000dc105:
	push %RBP
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc0fd
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
	jmp uuid_00000000000dc0ff
uuid_00000000000dc0fd:
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000dc0ff:
	mov -1736(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000dc107:
	mov -1624(%RBP),%RSP
	add $-1736, %RSP
	jmp uuid_00000000000dc10a
uuid_00000000000dc108:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,Tuple<Type,Type>>,String>,Tuple<Type,Type>>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $type_SB_complex_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -1616(%rbp)
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowTupleTypeTypeConsTupleTypeTypeConsStringHashtableEqTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push %RBP
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq $0
	push %RBP
	mov -1736(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0e1
	jmp uuid_00000000000dc0e3
uuid_00000000000dc0e1:
	push %RBP
	pushq -1712(%RBP)
	pushq -1720(%RBP)
	pushq -1728(%RBP)
	mov -1784(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0de
	jmp uuid_00000000000dc0e0
uuid_00000000000dc0de:
	push %RBP
	pushq -1688(%RBP)
	pushq -1696(%RBP)
	pushq -1704(%RBP)
	mov -1816(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0db
	jmp uuid_00000000000dc0dd
uuid_00000000000dc0db:
	movb $1, -1744(%rbp)
uuid_00000000000dc0dd:
	mov -1792(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000dc0e0:
	mov -1760(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000dc0e3:
	mov -1752(%RBP),%RSP
	add $-1816, %RSP
	mov -1744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0f1
	push %RBP
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq $0
	push %RBP
	mov -1880(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0ea
	jmp uuid_00000000000dc0ec
uuid_00000000000dc0ea:
	push %RBP
	pushq -1856(%RBP)
	pushq -1864(%RBP)
	pushq -1872(%RBP)
	jmp uuid_00000000000dc0e7
	jmp uuid_00000000000dc0e9
uuid_00000000000dc0e7:
	push %RBP
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	jmp uuid_00000000000dc0e4
	jmp uuid_00000000000dc0e6
uuid_00000000000dc0e4:
	movb $1, -1888(%rbp)
uuid_00000000000dc0e6:
	mov -1936(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000dc0e9:
	mov -1904(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000dc0ec:
	mov -1896(%RBP),%RSP
	add $-1960, %RSP
	mov -1888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0ee
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc0ed
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc0f0
uuid_00000000000dc0ee:
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov $8, %RAX
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dc0f0:
	mov -1824(%RBP),%RSP
	add $-2104, %RSP
	jmp uuid_00000000000dc0f3
uuid_00000000000dc0f1:
uuid_00000000000dc0f3:
	mov -1680(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000dc10a:
	mov -1552(%RBP),%RSP
	add $-1816, %RSP
	jmp uuid_00000000000dc10d
uuid_00000000000dc10b:
#call function to-u64 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1528(%rbp)
	mov %RBX, %RBP
	call to_SB_u64_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	mul %R14
	movq %RAX, -40(%rbp)
uuid_00000000000dc10d:
	mov -1168(%RBP),%RSP
	add $-1544, %RSP
	jmp uuid_00000000000dc110
uuid_00000000000dc10e:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dc110:
	mov -864(%RBP),%RSP
	add $-1160, %RSP
	jmp uuid_00000000000dc113
uuid_00000000000dc111:
	movq $8, -40(%rbp)
uuid_00000000000dc113:
	mov -560(%RBP),%RSP
	add $-856, %RSP
	jmp uuid_00000000000dc116
uuid_00000000000dc114:
#call function to-u64 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	mov %RBX, %RBP
	call to_SB_u64_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000dc116:
	mov -272(%RBP),%RSP
	add $-552, %RSP
	jmp uuid_00000000000dc119
uuid_00000000000dc117:
#call function size-of-class : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	mov %RBX, %RBP
	call size_SB_of_SB_class_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000dc119:
	mov -160(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000dc11c
uuid_00000000000dc11a:
uuid_00000000000dc11c:
	mov -104(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000dc11f
uuid_00000000000dc11d:
uuid_00000000000dc11f:
	mov -72(%RBP),%RSP
	add $-96, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
sizeof_SB_aligned_CL_ArrowU64Type:
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -40(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc120
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $8
	pushq -40(%rbp)
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
	jmp uuid_00000000000dc122
uuid_00000000000dc120:
uuid_00000000000dc122:
	mov -48(%RBP),%RSP
	add $-48, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
has_SB_infinite_CL_ArrowU64ConsU64ConsListTypeConsU64ConsStringType:
	pushq $0
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc13b
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc12e
	jmp uuid_00000000000dc130
uuid_00000000000dc12e:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc12b
	jmp uuid_00000000000dc12d
uuid_00000000000dc12b:
	push %RBP
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	jmp uuid_00000000000dc128
	jmp uuid_00000000000dc12a
uuid_00000000000dc128:
	movb $1, -248(%rbp)
uuid_00000000000dc12a:
	mov -312(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000dc12d:
	mov -264(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000dc130:
	mov -256(%RBP),%RSP
	add $-336, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc138
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc137
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc13a
uuid_00000000000dc138:
	push %RBP
#call function is-parameter-flat : Arrow<Cons<Cons<String,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call is_SB_parameter_SB_flat_CL_ArrowU64ConsU64ConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc134
	jmp uuid_00000000000dc136
uuid_00000000000dc134:
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc131
	jmp uuid_00000000000dc133
uuid_00000000000dc131:
	movq $1, -104(%rbp)
uuid_00000000000dc133:
	mov -352(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000dc136:
	mov -344(%RBP),%RSP
	add $-352, %RSP
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function has-infinite : Arrow<Cons<Cons<Cons<Cons<Type,String>,U64>,List<Type>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov -88(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsU64ConsListTypeConsU64ConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -104(%rbp)
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -104(%rbp)
uuid_00000000000dc13a:
	mov -200(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000dc13d
uuid_00000000000dc13b:
uuid_00000000000dc13d:
	mov -152(%RBP),%RSP
	add $-192, %RSP
	mov -104(%rbp), %RAX
	mov %rbp, %rsp
	sub $96, %rsp
	ret
has_SB_infinite_CL_ArrowU64ConsTypeType:
	pushq $0
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc144
	jmp uuid_00000000000dc146
uuid_00000000000dc144:
	push %RBP
	jmp uuid_00000000000dc141
	jmp uuid_00000000000dc143
uuid_00000000000dc141:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $uuid_00000000000db084
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc13e
	jmp uuid_00000000000dc140
uuid_00000000000dc13e:
	movb $1, -128(%rbp)
uuid_00000000000dc140:
	mov -152(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000dc143:
	mov -144(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000dc146:
	mov -136(%RBP),%RSP
	add $-160, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc19f
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc15f
	jmp uuid_00000000000dc161
uuid_00000000000dc15f:
	push %RBP
	mov -184(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc156
	jmp uuid_00000000000dc158
uuid_00000000000dc156:
	push %RBP
	mov -248(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -320(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc14d
	jmp uuid_00000000000dc14f
uuid_00000000000dc14d:
	push %RBP
	mov -312(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc14a
	jmp uuid_00000000000dc14c
uuid_00000000000dc14a:
	push %RBP
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq -304(%RBP)
	jmp uuid_00000000000dc147
	jmp uuid_00000000000dc149
uuid_00000000000dc147:
	movb $1, -328(%rbp)
uuid_00000000000dc149:
	mov -392(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dc14c:
	mov -344(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dc14f:
	mov -336(%RBP),%RSP
	add $-416, %RSP
	mov -328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc153
	jmp uuid_00000000000dc155
uuid_00000000000dc153:
	push %RBP
	jmp uuid_00000000000dc150
	jmp uuid_00000000000dc152
uuid_00000000000dc150:
	movb $1, -264(%rbp)
uuid_00000000000dc152:
	mov -424(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000dc155:
	mov -280(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000dc158:
	mov -272(%RBP),%RSP
	add $-424, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc15c
	jmp uuid_00000000000dc15e
uuid_00000000000dc15c:
	push %RBP
	mov -176(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -440(%rbp)
	pushq $uuid_00000000000db8d3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc159
	jmp uuid_00000000000dc15b
uuid_00000000000dc159:
	movb $1, -200(%rbp)
uuid_00000000000dc15b:
	mov -432(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000dc15e:
	mov -216(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000dc161:
	mov -208(%RBP),%RSP
	add $-440, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc19c
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc17a
	jmp uuid_00000000000dc17c
uuid_00000000000dc17a:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc171
	jmp uuid_00000000000dc173
uuid_00000000000dc171:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc168
	jmp uuid_00000000000dc16a
uuid_00000000000dc168:
	push %RBP
	mov -592(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc165
	jmp uuid_00000000000dc167
uuid_00000000000dc165:
	push %RBP
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	jmp uuid_00000000000dc162
	jmp uuid_00000000000dc164
uuid_00000000000dc162:
	movb $1, -608(%rbp)
uuid_00000000000dc164:
	mov -672(%RBP),%RSP
	add $-696, %RSP
uuid_00000000000dc167:
	mov -624(%RBP),%RSP
	add $-696, %RSP
uuid_00000000000dc16a:
	mov -616(%RBP),%RSP
	add $-696, %RSP
	mov -608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc16e
	jmp uuid_00000000000dc170
uuid_00000000000dc16e:
	push %RBP
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	jmp uuid_00000000000dc16b
	jmp uuid_00000000000dc16d
uuid_00000000000dc16b:
	movb $1, -544(%rbp)
uuid_00000000000dc16d:
	mov -704(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000dc170:
	mov -560(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000dc173:
	mov -552(%RBP),%RSP
	add $-728, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc177
	jmp uuid_00000000000dc179
uuid_00000000000dc177:
	push %RBP
	mov -456(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -744(%rbp)
	pushq $uuid_00000000000db3a7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc174
	jmp uuid_00000000000dc176
uuid_00000000000dc174:
	movb $1, -480(%rbp)
uuid_00000000000dc176:
	mov -736(%RBP),%RSP
	add $-744, %RSP
uuid_00000000000dc179:
	mov -496(%RBP),%RSP
	add $-744, %RSP
uuid_00000000000dc17c:
	mov -488(%RBP),%RSP
	add $-744, %RSP
	mov -480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc199
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -776(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc183
	jmp uuid_00000000000dc185
uuid_00000000000dc183:
	push %RBP
	mov -768(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc180
	jmp uuid_00000000000dc182
uuid_00000000000dc180:
	push %RBP
	mov -760(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc17d
	jmp uuid_00000000000dc17f
uuid_00000000000dc17d:
	movb $1, -784(%rbp)
uuid_00000000000dc17f:
	mov -848(%RBP),%RSP
	add $-856, %RSP
uuid_00000000000dc182:
	mov -800(%RBP),%RSP
	add $-856, %RSP
uuid_00000000000dc185:
	mov -792(%RBP),%RSP
	add $-856, %RSP
	mov -784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc196
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -888(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc18c
	jmp uuid_00000000000dc18e
uuid_00000000000dc18c:
	push %RBP
	mov -880(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc189
	jmp uuid_00000000000dc18b
uuid_00000000000dc189:
	push %RBP
	mov -872(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc186
	jmp uuid_00000000000dc188
uuid_00000000000dc186:
	movb $1, -896(%rbp)
uuid_00000000000dc188:
	mov -944(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000dc18b:
	mov -912(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000dc18e:
	mov -904(%RBP),%RSP
	add $-968, %RSP
	mov -896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc193
	push %RBP
	jmp uuid_00000000000dc190
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc18f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc192
uuid_00000000000dc190:
uuid_00000000000dc192:
	mov -976(%RBP),%RSP
	add $-976, %RSP
	jmp uuid_00000000000dc195
uuid_00000000000dc193:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function has-infinite : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function has-infinite : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000dc195:
	mov -864(%RBP),%RSP
	add $-968, %RSP
	jmp uuid_00000000000dc198
uuid_00000000000dc196:
#call function has-infinite : Arrow<Cons<Cons<Cons<Cons<Type,String>,U64>,List<Type>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function tag-of : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call tag_SB_of_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function arity : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call arity_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq $1
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsU64ConsListTypeConsU64ConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000dc198:
	mov -752(%RBP),%RSP
	add $-856, %RSP
	jmp uuid_00000000000dc19b
uuid_00000000000dc199:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function has-infinite : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function has-infinite : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000dc19b:
	mov -448(%RBP),%RSP
	add $-744, %RSP
	jmp uuid_00000000000dc19e
uuid_00000000000dc19c:
#call function has-infinite : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000dc19e:
	mov -168(%RBP),%RSP
	add $-440, %RSP
	jmp uuid_00000000000dc1a1
uuid_00000000000dc19f:
uuid_00000000000dc1a1:
	mov -96(%RBP),%RSP
	add $-160, %RSP
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc1a2
	jmp uuid_00000000000dc1a4
uuid_00000000000dc1a2:
	movq $1, -64(%rbp)
uuid_00000000000dc1a4:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
has_SB_forward_CL_ArrowU64ListType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc1b6
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc1af
	jmp uuid_00000000000dc1b1
uuid_00000000000dc1af:
	push %RBP
	mov -184(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc1ac
	jmp uuid_00000000000dc1ae
uuid_00000000000dc1ac:
	push %RBP
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	jmp uuid_00000000000dc1a9
	jmp uuid_00000000000dc1ab
uuid_00000000000dc1a9:
	movb $1, -200(%rbp)
uuid_00000000000dc1ab:
	mov -264(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000dc1ae:
	mov -216(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000dc1b1:
	mov -208(%RBP),%RSP
	add $-288, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc1b3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc1b2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc1b5
uuid_00000000000dc1b3:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function has-forward : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function has-forward : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -56(%rbp)
uuid_00000000000dc1b5:
	mov -152(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000dc1b8
uuid_00000000000dc1b6:
uuid_00000000000dc1b8:
	mov -104(%RBP),%RSP
	add $-144, %RSP
	mov -56(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
has_SB_forward_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc1bf
	jmp uuid_00000000000dc1c1
uuid_00000000000dc1bf:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc1bc
	jmp uuid_00000000000dc1be
uuid_00000000000dc1bc:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq $uuid_00000000000db084
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc1b9
	jmp uuid_00000000000dc1bb
uuid_00000000000dc1b9:
	movb $1, -104(%rbp)
uuid_00000000000dc1bb:
	mov -168(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dc1be:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dc1c1:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc20b
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc1c8
	jmp uuid_00000000000dc1ca
uuid_00000000000dc1c8:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc1c5
	jmp uuid_00000000000dc1c7
uuid_00000000000dc1c5:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $uuid_00000000000db3a7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc1c2
	jmp uuid_00000000000dc1c4
uuid_00000000000dc1c2:
	movb $1, -216(%rbp)
uuid_00000000000dc1c4:
	mov -280(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000dc1c7:
	mov -232(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000dc1ca:
	mov -224(%RBP),%RSP
	add $-288, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc208
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -320(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc1e3
	jmp uuid_00000000000dc1e5
uuid_00000000000dc1e3:
	push %RBP
	mov -312(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc1da
	jmp uuid_00000000000dc1dc
uuid_00000000000dc1da:
	push %RBP
	mov -376(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc1d1
	jmp uuid_00000000000dc1d3
uuid_00000000000dc1d1:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc1ce
	jmp uuid_00000000000dc1d0
uuid_00000000000dc1ce:
	push %RBP
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	jmp uuid_00000000000dc1cb
	jmp uuid_00000000000dc1cd
uuid_00000000000dc1cb:
	movb $1, -456(%rbp)
uuid_00000000000dc1cd:
	mov -520(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000dc1d0:
	mov -472(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000dc1d3:
	mov -464(%RBP),%RSP
	add $-544, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc1d7
	jmp uuid_00000000000dc1d9
uuid_00000000000dc1d7:
	push %RBP
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	jmp uuid_00000000000dc1d4
	jmp uuid_00000000000dc1d6
uuid_00000000000dc1d4:
	movb $1, -392(%rbp)
uuid_00000000000dc1d6:
	mov -552(%RBP),%RSP
	add $-576, %RSP
uuid_00000000000dc1d9:
	mov -408(%RBP),%RSP
	add $-576, %RSP
uuid_00000000000dc1dc:
	mov -400(%RBP),%RSP
	add $-576, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc1e0
	jmp uuid_00000000000dc1e2
uuid_00000000000dc1e0:
	push %RBP
	mov -304(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -592(%rbp)
	pushq $uuid_00000000000db8d3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc1dd
	jmp uuid_00000000000dc1df
uuid_00000000000dc1dd:
	movb $1, -328(%rbp)
uuid_00000000000dc1df:
	mov -584(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000dc1e2:
	mov -344(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000dc1e5:
	mov -336(%RBP),%RSP
	add $-592, %RSP
	mov -328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc205
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc1ec
	jmp uuid_00000000000dc1ee
uuid_00000000000dc1ec:
	push %RBP
	mov -616(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc1e9
	jmp uuid_00000000000dc1eb
uuid_00000000000dc1e9:
	push %RBP
	mov -608(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc1e6
	jmp uuid_00000000000dc1e8
uuid_00000000000dc1e6:
	movb $1, -632(%rbp)
uuid_00000000000dc1e8:
	mov -696(%RBP),%RSP
	add $-704, %RSP
uuid_00000000000dc1eb:
	mov -648(%RBP),%RSP
	add $-704, %RSP
uuid_00000000000dc1ee:
	mov -640(%RBP),%RSP
	add $-704, %RSP
	mov -632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc202
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -736(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc1f8
	jmp uuid_00000000000dc1fa
uuid_00000000000dc1f8:
	push %RBP
	mov -728(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc1f5
	jmp uuid_00000000000dc1f7
uuid_00000000000dc1f5:
	push %RBP
	mov -720(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc1f2
	jmp uuid_00000000000dc1f4
uuid_00000000000dc1f2:
	movb $1, -744(%rbp)
uuid_00000000000dc1f4:
	mov -792(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000dc1f7:
	mov -760(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000dc1fa:
	mov -752(%RBP),%RSP
	add $-816, %RSP
	mov -744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc1ff
	push %RBP
	jmp uuid_00000000000dc1fc
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc1fb
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc1fe
uuid_00000000000dc1fc:
uuid_00000000000dc1fe:
	mov -824(%RBP),%RSP
	add $-824, %RSP
	jmp uuid_00000000000dc201
uuid_00000000000dc1ff:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function has-forward : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function has-forward : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000dc201:
	mov -712(%RBP),%RSP
	add $-816, %RSP
	jmp uuid_00000000000dc204
uuid_00000000000dc202:
#call function has-forward : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
	push %RBP
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_exists_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -704(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc1ef
	jmp uuid_00000000000dc1f1
uuid_00000000000dc1ef:
	movq $1, -40(%rbp)
uuid_00000000000dc1f1:
	mov -712(%RBP),%RSP
	add $-712, %RSP
uuid_00000000000dc204:
	mov -600(%RBP),%RSP
	add $-712, %RSP
	jmp uuid_00000000000dc207
uuid_00000000000dc205:
#call function has-forward : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000dc207:
	mov -296(%RBP),%RSP
	add $-592, %RSP
	jmp uuid_00000000000dc20a
uuid_00000000000dc208:
#call function has-forward : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000dc20a:
	mov -184(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000dc20d
uuid_00000000000dc20b:
uuid_00000000000dc20d:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_reg8_CL_ArrowU64String:
	pushq $0
	pushq -8(%rbp)
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq $uuid_00000000000dc20e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc24f
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq $uuid_00000000000dc20f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc24c
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $uuid_00000000000dc210
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc249
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq $uuid_00000000000dc211
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc246
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $uuid_00000000000dc212
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc243
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000dc213
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc240
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $uuid_00000000000dc214
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc23d
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $uuid_00000000000dc215
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc23a
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq $uuid_00000000000dc216
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc237
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq $uuid_00000000000dc217
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc234
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000dc218
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc231
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq $uuid_00000000000dc219
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc22e
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000dc21a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc22b
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq $uuid_00000000000dc21b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc228
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq $uuid_00000000000dc21c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc225
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $uuid_00000000000dc21d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc222
	push %RBP
	jmp uuid_00000000000dc21f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc21e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc221
uuid_00000000000dc21f:
uuid_00000000000dc221:
	mov -296(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000dc224
uuid_00000000000dc222:
	movq $1, -24(%rbp)
uuid_00000000000dc224:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000dc227
uuid_00000000000dc225:
	movq $1, -24(%rbp)
uuid_00000000000dc227:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000dc22a
uuid_00000000000dc228:
	movq $1, -24(%rbp)
uuid_00000000000dc22a:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dc22d
uuid_00000000000dc22b:
	movq $1, -24(%rbp)
uuid_00000000000dc22d:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000dc230
uuid_00000000000dc22e:
	movq $1, -24(%rbp)
uuid_00000000000dc230:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000dc233
uuid_00000000000dc231:
	movq $1, -24(%rbp)
uuid_00000000000dc233:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000dc236
uuid_00000000000dc234:
	movq $1, -24(%rbp)
uuid_00000000000dc236:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000dc239
uuid_00000000000dc237:
	movq $1, -24(%rbp)
uuid_00000000000dc239:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000dc23c
uuid_00000000000dc23a:
	movq $1, -24(%rbp)
uuid_00000000000dc23c:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000dc23f
uuid_00000000000dc23d:
	movq $1, -24(%rbp)
uuid_00000000000dc23f:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000dc242
uuid_00000000000dc240:
	movq $1, -24(%rbp)
uuid_00000000000dc242:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000dc245
uuid_00000000000dc243:
	movq $1, -24(%rbp)
uuid_00000000000dc245:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000dc248
uuid_00000000000dc246:
	movq $1, -24(%rbp)
uuid_00000000000dc248:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000dc24b
uuid_00000000000dc249:
	movq $1, -24(%rbp)
uuid_00000000000dc24b:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000dc24e
uuid_00000000000dc24c:
	movq $1, -24(%rbp)
uuid_00000000000dc24e:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000dc251
uuid_00000000000dc24f:
	movq $1, -24(%rbp)
uuid_00000000000dc251:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_reg8_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc258
	jmp uuid_00000000000dc25a
uuid_00000000000dc258:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc255
	jmp uuid_00000000000dc257
uuid_00000000000dc255:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc252
	jmp uuid_00000000000dc254
uuid_00000000000dc252:
	movb $1, -104(%rbp)
uuid_00000000000dc254:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dc257:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dc25a:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc26b
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc261
	jmp uuid_00000000000dc263
uuid_00000000000dc261:
	push %RBP
	jmp uuid_00000000000dc25e
	jmp uuid_00000000000dc260
uuid_00000000000dc25e:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000db4b4
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc25b
	jmp uuid_00000000000dc25d
uuid_00000000000dc25b:
	movb $1, -216(%rbp)
uuid_00000000000dc25d:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dc260:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dc263:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc268
	push %RBP
	jmp uuid_00000000000dc265
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc264
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc267
uuid_00000000000dc265:
uuid_00000000000dc267:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dc26a
uuid_00000000000dc268:
	movq $1, -40(%rbp)
uuid_00000000000dc26a:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000dc26d
uuid_00000000000dc26b:
#call function is-reg8 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_reg8_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-reg8 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_reg8_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dc26d:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_reg16_CL_ArrowU64String:
	pushq $0
	pushq -8(%rbp)
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq $uuid_00000000000dc26e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc2af
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq $uuid_00000000000dc26f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc2ac
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $uuid_00000000000dc270
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc2a9
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq $uuid_00000000000dc271
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc2a6
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $uuid_00000000000dc272
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc2a3
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000dc273
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc2a0
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $uuid_00000000000dc274
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc29d
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $uuid_00000000000dc275
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc29a
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq $uuid_00000000000dc276
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc297
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq $uuid_00000000000dc277
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc294
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000dc278
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc291
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq $uuid_00000000000dc279
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc28e
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000dc27a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc28b
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq $uuid_00000000000dc27b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc288
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq $uuid_00000000000dc27c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc285
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $uuid_00000000000dc27d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc282
	push %RBP
	jmp uuid_00000000000dc27f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc27e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc281
uuid_00000000000dc27f:
uuid_00000000000dc281:
	mov -296(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000dc284
uuid_00000000000dc282:
	movq $1, -24(%rbp)
uuid_00000000000dc284:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000dc287
uuid_00000000000dc285:
	movq $1, -24(%rbp)
uuid_00000000000dc287:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000dc28a
uuid_00000000000dc288:
	movq $1, -24(%rbp)
uuid_00000000000dc28a:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dc28d
uuid_00000000000dc28b:
	movq $1, -24(%rbp)
uuid_00000000000dc28d:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000dc290
uuid_00000000000dc28e:
	movq $1, -24(%rbp)
uuid_00000000000dc290:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000dc293
uuid_00000000000dc291:
	movq $1, -24(%rbp)
uuid_00000000000dc293:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000dc296
uuid_00000000000dc294:
	movq $1, -24(%rbp)
uuid_00000000000dc296:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000dc299
uuid_00000000000dc297:
	movq $1, -24(%rbp)
uuid_00000000000dc299:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000dc29c
uuid_00000000000dc29a:
	movq $1, -24(%rbp)
uuid_00000000000dc29c:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000dc29f
uuid_00000000000dc29d:
	movq $1, -24(%rbp)
uuid_00000000000dc29f:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000dc2a2
uuid_00000000000dc2a0:
	movq $1, -24(%rbp)
uuid_00000000000dc2a2:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000dc2a5
uuid_00000000000dc2a3:
	movq $1, -24(%rbp)
uuid_00000000000dc2a5:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000dc2a8
uuid_00000000000dc2a6:
	movq $1, -24(%rbp)
uuid_00000000000dc2a8:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000dc2ab
uuid_00000000000dc2a9:
	movq $1, -24(%rbp)
uuid_00000000000dc2ab:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000dc2ae
uuid_00000000000dc2ac:
	movq $1, -24(%rbp)
uuid_00000000000dc2ae:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000dc2b1
uuid_00000000000dc2af:
	movq $1, -24(%rbp)
uuid_00000000000dc2b1:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_reg16_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc2b8
	jmp uuid_00000000000dc2ba
uuid_00000000000dc2b8:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc2b5
	jmp uuid_00000000000dc2b7
uuid_00000000000dc2b5:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc2b2
	jmp uuid_00000000000dc2b4
uuid_00000000000dc2b2:
	movb $1, -104(%rbp)
uuid_00000000000dc2b4:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dc2b7:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dc2ba:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc2cb
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc2c1
	jmp uuid_00000000000dc2c3
uuid_00000000000dc2c1:
	push %RBP
	jmp uuid_00000000000dc2be
	jmp uuid_00000000000dc2c0
uuid_00000000000dc2be:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000db4b8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc2bb
	jmp uuid_00000000000dc2bd
uuid_00000000000dc2bb:
	movb $1, -216(%rbp)
uuid_00000000000dc2bd:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dc2c0:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dc2c3:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc2c8
	push %RBP
	jmp uuid_00000000000dc2c5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc2c4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc2c7
uuid_00000000000dc2c5:
uuid_00000000000dc2c7:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dc2ca
uuid_00000000000dc2c8:
	movq $1, -40(%rbp)
uuid_00000000000dc2ca:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000dc2cd
uuid_00000000000dc2cb:
#call function is-reg16 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_reg16_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-reg16 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_reg16_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dc2cd:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_reg32_CL_ArrowU64String:
	pushq $0
	pushq -8(%rbp)
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq $uuid_00000000000dc2ce
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc30f
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq $uuid_00000000000dc2cf
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc30c
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $uuid_00000000000dc2d0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc309
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq $uuid_00000000000dc2d1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc306
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $uuid_00000000000dc2d2
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc303
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000dc2d3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc300
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $uuid_00000000000dc2d4
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc2fd
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $uuid_00000000000dc2d5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc2fa
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq $uuid_00000000000dc2d6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc2f7
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq $uuid_00000000000dc2d7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc2f4
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000dc2d8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc2f1
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq $uuid_00000000000dc2d9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc2ee
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000dc2da
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc2eb
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq $uuid_00000000000dc2db
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc2e8
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq $uuid_00000000000dc2dc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc2e5
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $uuid_00000000000dc2dd
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc2e2
	push %RBP
	jmp uuid_00000000000dc2df
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc2de
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc2e1
uuid_00000000000dc2df:
uuid_00000000000dc2e1:
	mov -296(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000dc2e4
uuid_00000000000dc2e2:
	movq $1, -24(%rbp)
uuid_00000000000dc2e4:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000dc2e7
uuid_00000000000dc2e5:
	movq $1, -24(%rbp)
uuid_00000000000dc2e7:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000dc2ea
uuid_00000000000dc2e8:
	movq $1, -24(%rbp)
uuid_00000000000dc2ea:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dc2ed
uuid_00000000000dc2eb:
	movq $1, -24(%rbp)
uuid_00000000000dc2ed:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000dc2f0
uuid_00000000000dc2ee:
	movq $1, -24(%rbp)
uuid_00000000000dc2f0:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000dc2f3
uuid_00000000000dc2f1:
	movq $1, -24(%rbp)
uuid_00000000000dc2f3:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000dc2f6
uuid_00000000000dc2f4:
	movq $1, -24(%rbp)
uuid_00000000000dc2f6:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000dc2f9
uuid_00000000000dc2f7:
	movq $1, -24(%rbp)
uuid_00000000000dc2f9:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000dc2fc
uuid_00000000000dc2fa:
	movq $1, -24(%rbp)
uuid_00000000000dc2fc:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000dc2ff
uuid_00000000000dc2fd:
	movq $1, -24(%rbp)
uuid_00000000000dc2ff:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000dc302
uuid_00000000000dc300:
	movq $1, -24(%rbp)
uuid_00000000000dc302:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000dc305
uuid_00000000000dc303:
	movq $1, -24(%rbp)
uuid_00000000000dc305:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000dc308
uuid_00000000000dc306:
	movq $1, -24(%rbp)
uuid_00000000000dc308:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000dc30b
uuid_00000000000dc309:
	movq $1, -24(%rbp)
uuid_00000000000dc30b:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000dc30e
uuid_00000000000dc30c:
	movq $1, -24(%rbp)
uuid_00000000000dc30e:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000dc311
uuid_00000000000dc30f:
	movq $1, -24(%rbp)
uuid_00000000000dc311:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_reg32_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc318
	jmp uuid_00000000000dc31a
uuid_00000000000dc318:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc315
	jmp uuid_00000000000dc317
uuid_00000000000dc315:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc312
	jmp uuid_00000000000dc314
uuid_00000000000dc312:
	movb $1, -104(%rbp)
uuid_00000000000dc314:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dc317:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dc31a:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc32b
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc321
	jmp uuid_00000000000dc323
uuid_00000000000dc321:
	push %RBP
	jmp uuid_00000000000dc31e
	jmp uuid_00000000000dc320
uuid_00000000000dc31e:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000db4bc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc31b
	jmp uuid_00000000000dc31d
uuid_00000000000dc31b:
	movb $1, -216(%rbp)
uuid_00000000000dc31d:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dc320:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dc323:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc328
	push %RBP
	jmp uuid_00000000000dc325
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc324
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc327
uuid_00000000000dc325:
uuid_00000000000dc327:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dc32a
uuid_00000000000dc328:
	movq $1, -40(%rbp)
uuid_00000000000dc32a:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000dc32d
uuid_00000000000dc32b:
#call function is-reg32 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_reg32_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-reg32 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_reg32_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dc32d:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_reg64_CL_ArrowU64String:
	pushq $0
	pushq -8(%rbp)
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq $uuid_00000000000dc32e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc36f
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq $uuid_00000000000dc32f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc36c
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $uuid_00000000000dc330
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc369
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq $uuid_00000000000dc331
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc366
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $uuid_00000000000dc332
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc363
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000dc333
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc360
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $uuid_00000000000dc334
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc35d
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $uuid_00000000000dc335
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc35a
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq $uuid_00000000000dc336
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc357
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq $uuid_00000000000dc337
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc354
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000dc338
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc351
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq $uuid_00000000000dc339
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc34e
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000dc33a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc34b
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq $uuid_00000000000dc33b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc348
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq $uuid_00000000000dc33c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc345
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $uuid_00000000000dc33d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc342
	push %RBP
	jmp uuid_00000000000dc33f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc33e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc341
uuid_00000000000dc33f:
uuid_00000000000dc341:
	mov -296(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000dc344
uuid_00000000000dc342:
	movq $1, -24(%rbp)
uuid_00000000000dc344:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000dc347
uuid_00000000000dc345:
	movq $1, -24(%rbp)
uuid_00000000000dc347:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000dc34a
uuid_00000000000dc348:
	movq $1, -24(%rbp)
uuid_00000000000dc34a:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dc34d
uuid_00000000000dc34b:
	movq $1, -24(%rbp)
uuid_00000000000dc34d:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000dc350
uuid_00000000000dc34e:
	movq $1, -24(%rbp)
uuid_00000000000dc350:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000dc353
uuid_00000000000dc351:
	movq $1, -24(%rbp)
uuid_00000000000dc353:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000dc356
uuid_00000000000dc354:
	movq $1, -24(%rbp)
uuid_00000000000dc356:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000dc359
uuid_00000000000dc357:
	movq $1, -24(%rbp)
uuid_00000000000dc359:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000dc35c
uuid_00000000000dc35a:
	movq $1, -24(%rbp)
uuid_00000000000dc35c:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000dc35f
uuid_00000000000dc35d:
	movq $1, -24(%rbp)
uuid_00000000000dc35f:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000dc362
uuid_00000000000dc360:
	movq $1, -24(%rbp)
uuid_00000000000dc362:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000dc365
uuid_00000000000dc363:
	movq $1, -24(%rbp)
uuid_00000000000dc365:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000dc368
uuid_00000000000dc366:
	movq $1, -24(%rbp)
uuid_00000000000dc368:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000dc36b
uuid_00000000000dc369:
	movq $1, -24(%rbp)
uuid_00000000000dc36b:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000dc36e
uuid_00000000000dc36c:
	movq $1, -24(%rbp)
uuid_00000000000dc36e:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000dc371
uuid_00000000000dc36f:
	movq $1, -24(%rbp)
uuid_00000000000dc371:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_reg64_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc378
	jmp uuid_00000000000dc37a
uuid_00000000000dc378:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc375
	jmp uuid_00000000000dc377
uuid_00000000000dc375:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc372
	jmp uuid_00000000000dc374
uuid_00000000000dc372:
	movb $1, -104(%rbp)
uuid_00000000000dc374:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dc377:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dc37a:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc38b
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc381
	jmp uuid_00000000000dc383
uuid_00000000000dc381:
	push %RBP
	jmp uuid_00000000000dc37e
	jmp uuid_00000000000dc380
uuid_00000000000dc37e:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000db4c0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc37b
	jmp uuid_00000000000dc37d
uuid_00000000000dc37b:
	movb $1, -216(%rbp)
uuid_00000000000dc37d:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dc380:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dc383:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc388
	push %RBP
	jmp uuid_00000000000dc385
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc384
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc387
uuid_00000000000dc385:
uuid_00000000000dc387:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dc38a
uuid_00000000000dc388:
	movq $1, -40(%rbp)
uuid_00000000000dc38a:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000dc38d
uuid_00000000000dc38b:
#call function is-reg64 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_reg64_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-reg64 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_reg64_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dc38d:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_tag_CL_ArrowTypeType:
#call function with-only-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc3a1
	jmp uuid_00000000000dc3a3
uuid_00000000000dc3a1:
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc394
	jmp uuid_00000000000dc396
uuid_00000000000dc394:
	push %RBP
	mov -112(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc391
	jmp uuid_00000000000dc393
uuid_00000000000dc391:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc38e
	jmp uuid_00000000000dc390
uuid_00000000000dc38e:
	movb $1, -128(%rbp)
uuid_00000000000dc390:
	mov -192(%RBP),%RSP
	add $-200, %RSP
uuid_00000000000dc393:
	mov -144(%RBP),%RSP
	add $-200, %RSP
uuid_00000000000dc396:
	mov -136(%RBP),%RSP
	add $-200, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc39e
	push %RBP
	jmp uuid_00000000000dc39b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc39a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc39d
uuid_00000000000dc39b:
uuid_00000000000dc39d:
	mov -208(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000dc3a0
uuid_00000000000dc39e:
#call function get-only-child : Arrow<String,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	mov %RBX, %RBP
	call get_SB_only_SB_child_CL_ArrowStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -208(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000dc397
	jmp uuid_00000000000dc399
uuid_00000000000dc397:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db796
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc399:
	mov -216(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000dc3a0:
	mov -96(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000dc3a3:
	mov -64(%RBP),%RSP
	add $-216, %RSP
#call function with-case-number : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_case_SB_number_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_case_SB_number_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc3aa
	jmp uuid_00000000000dc3ac
uuid_00000000000dc3aa:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc3a7
	jmp uuid_00000000000dc3a9
uuid_00000000000dc3a7:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc3a4
	jmp uuid_00000000000dc3a6
uuid_00000000000dc3a4:
	movb $1, -96(%rbp)
uuid_00000000000dc3a6:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc3a9:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc3ac:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc3d5
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc3cb
	jmp uuid_00000000000dc3cd
uuid_00000000000dc3cb:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc3c2
	jmp uuid_00000000000dc3c4
uuid_00000000000dc3c2:
	push %RBP
	jmp uuid_00000000000dc3bf
	jmp uuid_00000000000dc3c1
uuid_00000000000dc3bf:
	push %RBP
	pushq -232(%RBP)
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq $0
	push %RBP
	mov -320(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc3b9
	jmp uuid_00000000000dc3bb
uuid_00000000000dc3b9:
	push %RBP
	jmp uuid_00000000000dc3b6
	jmp uuid_00000000000dc3b8
uuid_00000000000dc3b6:
	push %RBP
	mov -304(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc3b3
	jmp uuid_00000000000dc3b5
uuid_00000000000dc3b3:
	movb $1, -328(%rbp)
uuid_00000000000dc3b5:
	mov -352(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000dc3b8:
	mov -344(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000dc3bb:
	mov -336(%RBP),%RSP
	add $-360, %RSP
	mov -328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc3bc
	jmp uuid_00000000000dc3be
uuid_00000000000dc3bc:
	movb $1, -272(%rbp)
uuid_00000000000dc3be:
	mov -296(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000dc3c1:
	mov -288(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000dc3c4:
	mov -280(%RBP),%RSP
	add $-360, %RSP
	mov -272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc3c8
	jmp uuid_00000000000dc3ca
uuid_00000000000dc3c8:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -376(%rbp)
	pushq $uuid_00000000000db796
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc3c5
	jmp uuid_00000000000dc3c7
uuid_00000000000dc3c5:
	movb $1, -208(%rbp)
uuid_00000000000dc3c7:
	mov -368(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000dc3ca:
	mov -224(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000dc3cd:
	mov -216(%RBP),%RSP
	add $-376, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc3d2
	push %RBP
	jmp uuid_00000000000dc3cf
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc3ce
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc3d1
uuid_00000000000dc3cf:
uuid_00000000000dc3d1:
	mov -384(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000dc3d4
uuid_00000000000dc3d2:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db5e0
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc3d4:
	mov -176(%RBP),%RSP
	add $-376, %RSP
	jmp uuid_00000000000dc3d7
uuid_00000000000dc3d5:
#call function with-case-number : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call with_SB_case_SB_number_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
#call function with-case-number : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call with_SB_case_SB_number_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc3b0
	movq -136(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -128(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -120(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dc3b2
uuid_00000000000dc3b0:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc3ad
	movq -168(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -160(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -152(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dc3af
uuid_00000000000dc3ad:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc3af:
	mov -184(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000dc3b2:
	mov -176(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000dc3d7:
	mov -64(%RBP),%RSP
	add $-184, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_size_CL_ArrowTypeType:
	push %RBP
#call function is-sized : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call is_SB_sized_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc3d8
	jmp uuid_00000000000dc3da
uuid_00000000000dc3d8:
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function with-size-recurse : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_size_SB_recurse_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db5e1
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc3da:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -104(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc3f3
	jmp uuid_00000000000dc3f5
uuid_00000000000dc3f3:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc3ea
	jmp uuid_00000000000dc3ec
uuid_00000000000dc3ea:
	push %RBP
	mov -160(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc3e1
	jmp uuid_00000000000dc3e3
uuid_00000000000dc3e1:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc3de
	jmp uuid_00000000000dc3e0
uuid_00000000000dc3de:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	jmp uuid_00000000000dc3db
	jmp uuid_00000000000dc3dd
uuid_00000000000dc3db:
	movb $1, -240(%rbp)
uuid_00000000000dc3dd:
	mov -304(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000dc3e0:
	mov -256(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000dc3e3:
	mov -248(%RBP),%RSP
	add $-328, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc3e7
	jmp uuid_00000000000dc3e9
uuid_00000000000dc3e7:
	push %RBP
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	jmp uuid_00000000000dc3e4
	jmp uuid_00000000000dc3e6
uuid_00000000000dc3e4:
	movb $1, -176(%rbp)
uuid_00000000000dc3e6:
	mov -336(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000dc3e9:
	mov -192(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000dc3ec:
	mov -184(%RBP),%RSP
	add $-360, %RSP
	mov -176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc3f0
	jmp uuid_00000000000dc3f2
uuid_00000000000dc3f0:
	push %RBP
	mov -88(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -376(%rbp)
	pushq $uuid_00000000000db3a7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc3ed
	jmp uuid_00000000000dc3ef
uuid_00000000000dc3ed:
	movb $1, -112(%rbp)
uuid_00000000000dc3ef:
	mov -368(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000dc3f2:
	mov -128(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000dc3f5:
	mov -120(%RBP),%RSP
	add $-376, %RSP
	mov -112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc3fa
	push %RBP
	jmp uuid_00000000000dc3f7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc3f6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc3f9
uuid_00000000000dc3f7:
uuid_00000000000dc3f9:
	mov -384(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000dc3fc
uuid_00000000000dc3fa:
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3a7
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc3fc:
	mov -80(%RBP),%RSP
	add $-376, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_size_CL_ArrowListTypeListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc40e
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc407
	jmp uuid_00000000000dc409
uuid_00000000000dc407:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc404
	jmp uuid_00000000000dc406
uuid_00000000000dc404:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	jmp uuid_00000000000dc401
	jmp uuid_00000000000dc403
uuid_00000000000dc401:
	movb $1, -192(%rbp)
uuid_00000000000dc403:
	mov -256(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000dc406:
	mov -208(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000dc409:
	mov -200(%RBP),%RSP
	add $-280, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc40b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc40a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc40d
uuid_00000000000dc40b:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function with-size : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc40d:
	mov -144(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000dc410
uuid_00000000000dc40e:
uuid_00000000000dc410:
	mov -96(%RBP),%RSP
	add $-136, %RSP
	subq $40, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
with_SB_size_SB_recurse_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc417
	jmp uuid_00000000000dc419
uuid_00000000000dc417:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc414
	jmp uuid_00000000000dc416
uuid_00000000000dc414:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc411
	jmp uuid_00000000000dc413
uuid_00000000000dc411:
	movb $1, -96(%rbp)
uuid_00000000000dc413:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc416:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc419:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc466
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc420
	jmp uuid_00000000000dc422
uuid_00000000000dc420:
	push %RBP
	jmp uuid_00000000000dc41d
	jmp uuid_00000000000dc41f
uuid_00000000000dc41d:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000db796
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc41a
	jmp uuid_00000000000dc41c
uuid_00000000000dc41a:
	movb $1, -208(%rbp)
uuid_00000000000dc41c:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000dc41f:
	mov -224(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000dc422:
	mov -216(%RBP),%RSP
	add $-240, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc463
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc429
	jmp uuid_00000000000dc42b
uuid_00000000000dc429:
	push %RBP
	jmp uuid_00000000000dc426
	jmp uuid_00000000000dc428
uuid_00000000000dc426:
	push %RBP
	mov -256(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq $uuid_00000000000db5e1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc423
	jmp uuid_00000000000dc425
uuid_00000000000dc423:
	movb $1, -280(%rbp)
uuid_00000000000dc425:
	mov -304(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000dc428:
	mov -296(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000dc42b:
	mov -288(%RBP),%RSP
	add $-312, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc460
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc432
	jmp uuid_00000000000dc434
uuid_00000000000dc432:
	push %RBP
	jmp uuid_00000000000dc42f
	jmp uuid_00000000000dc431
uuid_00000000000dc42f:
	push %RBP
	mov -328(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000db5e0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc42c
	jmp uuid_00000000000dc42e
uuid_00000000000dc42c:
	movb $1, -352(%rbp)
uuid_00000000000dc42e:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000dc431:
	mov -368(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000dc434:
	mov -360(%RBP),%RSP
	add $-384, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc45d
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc43b
	jmp uuid_00000000000dc43d
uuid_00000000000dc43b:
	push %RBP
	jmp uuid_00000000000dc438
	jmp uuid_00000000000dc43a
uuid_00000000000dc438:
	push %RBP
	mov -400(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq $uuid_00000000000db7c1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc435
	jmp uuid_00000000000dc437
uuid_00000000000dc435:
	movb $1, -424(%rbp)
uuid_00000000000dc437:
	mov -448(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000dc43a:
	mov -440(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000dc43d:
	mov -432(%RBP),%RSP
	add $-456, %RSP
	mov -424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc45a
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc444
	jmp uuid_00000000000dc446
uuid_00000000000dc444:
	push %RBP
	jmp uuid_00000000000dc441
	jmp uuid_00000000000dc443
uuid_00000000000dc441:
	push %RBP
	mov -472(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq $uuid_00000000000db5e2
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc43e
	jmp uuid_00000000000dc440
uuid_00000000000dc43e:
	movb $1, -496(%rbp)
uuid_00000000000dc440:
	mov -520(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000dc443:
	mov -512(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000dc446:
	mov -504(%RBP),%RSP
	add $-528, %RSP
	mov -496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc457
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc44d
	jmp uuid_00000000000dc44f
uuid_00000000000dc44d:
	push %RBP
	mov -552(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc44a
	jmp uuid_00000000000dc44c
uuid_00000000000dc44a:
	push %RBP
	mov -544(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc447
	jmp uuid_00000000000dc449
uuid_00000000000dc447:
	movb $1, -568(%rbp)
uuid_00000000000dc449:
	mov -632(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000dc44c:
	mov -584(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000dc44f:
	mov -576(%RBP),%RSP
	add $-640, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc454
	push %RBP
	jmp uuid_00000000000dc451
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc450
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc453
uuid_00000000000dc451:
uuid_00000000000dc453:
	mov -648(%RBP),%RSP
	add $-648, %RSP
	jmp uuid_00000000000dc456
uuid_00000000000dc454:
	pushq -640(%rbp)
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-size : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc456:
	mov -536(%RBP),%RSP
	add $-640, %RSP
	jmp uuid_00000000000dc459
uuid_00000000000dc457:
uuid_00000000000dc459:
	mov -464(%RBP),%RSP
	add $-528, %RSP
	jmp uuid_00000000000dc45c
uuid_00000000000dc45a:
uuid_00000000000dc45c:
	mov -392(%RBP),%RSP
	add $-456, %RSP
	jmp uuid_00000000000dc45f
uuid_00000000000dc45d:
uuid_00000000000dc45f:
	mov -320(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000dc462
uuid_00000000000dc460:
uuid_00000000000dc462:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000dc465
uuid_00000000000dc463:
uuid_00000000000dc465:
	mov -176(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000dc468
uuid_00000000000dc466:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-size-recurse : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call with_SB_size_SB_recurse_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function with-size-recurse : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call with_SB_size_SB_recurse_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc468:
	mov -64(%RBP),%RSP
	add $-168, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_fields_CL_ArrowTypeType:
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $uuid_00000000000db7c1
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc46f
	jmp uuid_00000000000dc471
uuid_00000000000dc46f:
	push %RBP
	jmp uuid_00000000000dc46c
	jmp uuid_00000000000dc46e
uuid_00000000000dc46c:
	push %RBP
	mov -72(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000db7c1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc469
	jmp uuid_00000000000dc46b
uuid_00000000000dc469:
	movb $1, -96(%rbp)
uuid_00000000000dc46b:
	mov -120(%RBP),%RSP
	add $-128, %RSP
uuid_00000000000dc46e:
	mov -112(%RBP),%RSP
	add $-128, %RSP
uuid_00000000000dc471:
	mov -104(%RBP),%RSP
	add $-128, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc479
	push %RBP
	jmp uuid_00000000000dc476
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc475
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc478
uuid_00000000000dc476:
#call function with-only-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function with-only-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc472
	jmp uuid_00000000000dc474
uuid_00000000000dc472:
#call function fields-of-tag : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call fields_SB_of_SB_tag_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc474:
	mov -192(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000dc478:
	mov -136(%RBP),%RSP
	add $-216, %RSP
	jmp uuid_00000000000dc47b
uuid_00000000000dc479:
uuid_00000000000dc47b:
	mov -64(%RBP),%RSP
	add $-128, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_platform_SB_props_CL_ArrowTypeType:
#call function with-only-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc490
	jmp uuid_00000000000dc492
uuid_00000000000dc490:
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc482
	jmp uuid_00000000000dc484
uuid_00000000000dc482:
	push %RBP
	jmp uuid_00000000000dc47f
	jmp uuid_00000000000dc481
uuid_00000000000dc47f:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc47c
	jmp uuid_00000000000dc47e
uuid_00000000000dc47c:
	movb $1, -128(%rbp)
uuid_00000000000dc47e:
	mov -152(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000dc481:
	mov -144(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000dc484:
	mov -136(%RBP),%RSP
	add $-160, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc48d
	push %RBP
	jmp uuid_00000000000dc48a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc489
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc48c
uuid_00000000000dc48a:
uuid_00000000000dc48c:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000dc48f
uuid_00000000000dc48d:
	push %RBP
#call function is-lm-struct : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	mov %RBX, %RBP
	call is_SB_lm_SB_struct_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc486
	jmp uuid_00000000000dc488
uuid_00000000000dc486:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc485
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc488:
	mov -168(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc48f:
	mov -96(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc492:
	mov -64(%RBP),%RSP
	add $-168, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_tag_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc499
	jmp uuid_00000000000dc49b
uuid_00000000000dc499:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc496
	jmp uuid_00000000000dc498
uuid_00000000000dc496:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc493
	jmp uuid_00000000000dc495
uuid_00000000000dc493:
	movb $1, -96(%rbp)
uuid_00000000000dc495:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc498:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc49b:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc501
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc4c7
	jmp uuid_00000000000dc4c9
uuid_00000000000dc4c7:
	push %RBP
	jmp uuid_00000000000dc4c4
	jmp uuid_00000000000dc4c6
uuid_00000000000dc4c4:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000db5df
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc4c1
	jmp uuid_00000000000dc4c3
uuid_00000000000dc4c1:
	movb $1, -208(%rbp)
uuid_00000000000dc4c3:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000dc4c6:
	mov -224(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000dc4c9:
	mov -216(%RBP),%RSP
	add $-240, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc4fe
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc4d0
	jmp uuid_00000000000dc4d2
uuid_00000000000dc4d0:
	push %RBP
	jmp uuid_00000000000dc4cd
	jmp uuid_00000000000dc4cf
uuid_00000000000dc4cd:
	push %RBP
	mov -256(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq $uuid_00000000000db796
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc4ca
	jmp uuid_00000000000dc4cc
uuid_00000000000dc4ca:
	movb $1, -280(%rbp)
uuid_00000000000dc4cc:
	mov -304(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000dc4cf:
	mov -296(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000dc4d2:
	mov -288(%RBP),%RSP
	add $-312, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc4fb
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc4d9
	jmp uuid_00000000000dc4db
uuid_00000000000dc4d9:
	push %RBP
	jmp uuid_00000000000dc4d6
	jmp uuid_00000000000dc4d8
uuid_00000000000dc4d6:
	push %RBP
	mov -328(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000db5e0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc4d3
	jmp uuid_00000000000dc4d5
uuid_00000000000dc4d3:
	movb $1, -352(%rbp)
uuid_00000000000dc4d5:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000dc4d8:
	mov -368(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000dc4db:
	mov -360(%RBP),%RSP
	add $-384, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc4f8
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc4e2
	jmp uuid_00000000000dc4e4
uuid_00000000000dc4e2:
	push %RBP
	jmp uuid_00000000000dc4df
	jmp uuid_00000000000dc4e1
uuid_00000000000dc4df:
	push %RBP
	mov -400(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq $uuid_00000000000db7c1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc4dc
	jmp uuid_00000000000dc4de
uuid_00000000000dc4dc:
	movb $1, -424(%rbp)
uuid_00000000000dc4de:
	mov -448(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000dc4e1:
	mov -440(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000dc4e4:
	mov -432(%RBP),%RSP
	add $-456, %RSP
	mov -424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc4f5
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc4eb
	jmp uuid_00000000000dc4ed
uuid_00000000000dc4eb:
	push %RBP
	jmp uuid_00000000000dc4e8
	jmp uuid_00000000000dc4ea
uuid_00000000000dc4e8:
	push %RBP
	mov -472(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq $uuid_00000000000db5e2
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc4e5
	jmp uuid_00000000000dc4e7
uuid_00000000000dc4e5:
	movb $1, -496(%rbp)
uuid_00000000000dc4e7:
	mov -520(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000dc4ea:
	mov -512(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000dc4ed:
	mov -504(%RBP),%RSP
	add $-528, %RSP
	mov -496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc4f2
	push %RBP
	jmp uuid_00000000000dc4ef
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc4ee
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc4f1
uuid_00000000000dc4ef:
uuid_00000000000dc4f1:
	mov -536(%RBP),%RSP
	add $-536, %RSP
	jmp uuid_00000000000dc4f4
uuid_00000000000dc4f2:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc4f4:
	mov -464(%RBP),%RSP
	add $-528, %RSP
	jmp uuid_00000000000dc4f7
uuid_00000000000dc4f5:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc4f7:
	mov -392(%RBP),%RSP
	add $-456, %RSP
	jmp uuid_00000000000dc4fa
uuid_00000000000dc4f8:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc4fa:
	mov -320(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000dc4fd
uuid_00000000000dc4fb:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc4fd:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000dc500
uuid_00000000000dc4fe:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc500:
	mov -176(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000dc503
uuid_00000000000dc501:
#call function without-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq $0
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc4a2
	jmp uuid_00000000000dc4a4
uuid_00000000000dc4a2:
	push %RBP
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	jmp uuid_00000000000dc49f
	jmp uuid_00000000000dc4a1
uuid_00000000000dc49f:
	push %RBP
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq -304(%RBP)
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc49c
	jmp uuid_00000000000dc49e
uuid_00000000000dc49c:
	movb $1, -344(%rbp)
uuid_00000000000dc49e:
	mov -392(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dc4a1:
	mov -360(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dc4a4:
	mov -352(%RBP),%RSP
	add $-416, %RSP
	mov -344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc4be
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -480(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc4ab
	jmp uuid_00000000000dc4ad
uuid_00000000000dc4ab:
	push %RBP
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc4a8
	jmp uuid_00000000000dc4aa
uuid_00000000000dc4a8:
	push %RBP
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	jmp uuid_00000000000dc4a5
	jmp uuid_00000000000dc4a7
uuid_00000000000dc4a5:
	movb $1, -488(%rbp)
uuid_00000000000dc4a7:
	mov -536(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000dc4aa:
	mov -504(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000dc4ad:
	mov -496(%RBP),%RSP
	add $-560, %RSP
	mov -488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc4bb
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc4b4
	jmp uuid_00000000000dc4b6
uuid_00000000000dc4b4:
	push %RBP
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	jmp uuid_00000000000dc4b1
	jmp uuid_00000000000dc4b3
uuid_00000000000dc4b1:
	push %RBP
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	jmp uuid_00000000000dc4ae
	jmp uuid_00000000000dc4b0
uuid_00000000000dc4ae:
	movb $1, -632(%rbp)
uuid_00000000000dc4b0:
	mov -680(%RBP),%RSP
	add $-704, %RSP
uuid_00000000000dc4b3:
	mov -648(%RBP),%RSP
	add $-704, %RSP
uuid_00000000000dc4b6:
	mov -640(%RBP),%RSP
	add $-704, %RSP
	mov -632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc4b8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc4b7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc4ba
uuid_00000000000dc4b8:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc4ba:
	mov -568(%RBP),%RSP
	add $-704, %RSP
	jmp uuid_00000000000dc4bd
uuid_00000000000dc4bb:
	movq -560(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -552(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -544(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dc4bd:
	mov -424(%RBP),%RSP
	add $-560, %RSP
	jmp uuid_00000000000dc4c0
uuid_00000000000dc4be:
	movq -384(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dc4c0:
	mov -280(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dc503:
	mov -64(%RBP),%RSP
	add $-416, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_tag_CL_ArrowListTypeListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc50e
	jmp uuid_00000000000dc510
uuid_00000000000dc50e:
	push %RBP
	mov -128(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc50b
	jmp uuid_00000000000dc50d
uuid_00000000000dc50b:
	push %RBP
	pushq -104(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	jmp uuid_00000000000dc508
	jmp uuid_00000000000dc50a
uuid_00000000000dc508:
	movb $1, -144(%rbp)
uuid_00000000000dc50a:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc50d:
	mov -160(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc510:
	mov -152(%RBP),%RSP
	add $-232, %RSP
	mov -144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc515
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc512
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc511
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc514
uuid_00000000000dc512:
uuid_00000000000dc514:
	mov -240(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000dc517
uuid_00000000000dc515:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call without_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-tag : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call without_SB_tag_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc517:
	mov -96(%RBP),%RSP
	add $-232, %RSP
	subq $40, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
without_SB_constructor_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc51e
	jmp uuid_00000000000dc520
uuid_00000000000dc51e:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc51b
	jmp uuid_00000000000dc51d
uuid_00000000000dc51b:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc518
	jmp uuid_00000000000dc51a
uuid_00000000000dc518:
	movb $1, -96(%rbp)
uuid_00000000000dc51a:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc51d:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc520:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc543
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc52d
	jmp uuid_00000000000dc52f
uuid_00000000000dc52d:
	push %RBP
	jmp uuid_00000000000dc52a
	jmp uuid_00000000000dc52c
uuid_00000000000dc52a:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000db5df
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc527
	jmp uuid_00000000000dc529
uuid_00000000000dc527:
	movb $1, -208(%rbp)
uuid_00000000000dc529:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000dc52c:
	mov -224(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000dc52f:
	mov -216(%RBP),%RSP
	add $-240, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc540
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc536
	jmp uuid_00000000000dc538
uuid_00000000000dc536:
	push %RBP
	jmp uuid_00000000000dc533
	jmp uuid_00000000000dc535
uuid_00000000000dc533:
	push %RBP
	mov -256(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq $uuid_00000000000db5e0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc530
	jmp uuid_00000000000dc532
uuid_00000000000dc530:
	movb $1, -280(%rbp)
uuid_00000000000dc532:
	mov -304(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000dc535:
	mov -296(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000dc538:
	mov -288(%RBP),%RSP
	add $-312, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc53d
	push %RBP
	jmp uuid_00000000000dc53a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc539
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc53c
uuid_00000000000dc53a:
uuid_00000000000dc53c:
	mov -320(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000dc53f
uuid_00000000000dc53d:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc53f:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000dc542
uuid_00000000000dc540:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc542:
	mov -176(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000dc545
uuid_00000000000dc543:
#call function without-constructor : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_constructor_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
#call function without-constructor : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_constructor_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc524
	movq -136(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -128(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -120(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dc526
uuid_00000000000dc524:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc521
	movq -168(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -160(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -152(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dc523
uuid_00000000000dc521:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc523:
	mov -184(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000dc526:
	mov -176(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000dc545:
	mov -64(%RBP),%RSP
	add $-184, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_representation_CL_ArrowListTypeListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc550
	jmp uuid_00000000000dc552
uuid_00000000000dc550:
	push %RBP
	mov -128(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc54d
	jmp uuid_00000000000dc54f
uuid_00000000000dc54d:
	push %RBP
	pushq -104(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	jmp uuid_00000000000dc54a
	jmp uuid_00000000000dc54c
uuid_00000000000dc54a:
	movb $1, -144(%rbp)
uuid_00000000000dc54c:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc54f:
	mov -160(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc552:
	mov -152(%RBP),%RSP
	add $-232, %RSP
	mov -144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc557
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc554
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc553
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc556
uuid_00000000000dc554:
uuid_00000000000dc556:
	mov -240(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000dc559
uuid_00000000000dc557:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-representation : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc559:
	mov -96(%RBP),%RSP
	add $-232, %RSP
	subq $40, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
without_SB_representation_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc560
	jmp uuid_00000000000dc562
uuid_00000000000dc560:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc55d
	jmp uuid_00000000000dc55f
uuid_00000000000dc55d:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc55a
	jmp uuid_00000000000dc55c
uuid_00000000000dc55a:
	movb $1, -96(%rbp)
uuid_00000000000dc55c:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc55f:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc562:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5f2
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc572
	jmp uuid_00000000000dc574
uuid_00000000000dc572:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc56f
	jmp uuid_00000000000dc571
uuid_00000000000dc56f:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq $uuid_00000000000db996
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc56c
	jmp uuid_00000000000dc56e
uuid_00000000000dc56c:
	movb $1, -208(%rbp)
uuid_00000000000dc56e:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000dc571:
	mov -224(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000dc574:
	mov -216(%RBP),%RSP
	add $-280, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5ef
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc57c
	jmp uuid_00000000000dc57e
uuid_00000000000dc57c:
	push %RBP
	mov -304(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc579
	jmp uuid_00000000000dc57b
uuid_00000000000dc579:
	push %RBP
	mov -296(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -392(%rbp)
	pushq $uuid_00000000000dc575
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc576
	jmp uuid_00000000000dc578
uuid_00000000000dc576:
	movb $1, -320(%rbp)
uuid_00000000000dc578:
	mov -384(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000dc57b:
	mov -336(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000dc57e:
	mov -328(%RBP),%RSP
	add $-392, %RSP
	mov -320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5ec
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -424(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc585
	jmp uuid_00000000000dc587
uuid_00000000000dc585:
	push %RBP
	mov -416(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc582
	jmp uuid_00000000000dc584
uuid_00000000000dc582:
	push %RBP
	mov -408(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -504(%rbp)
	pushq $uuid_00000000000db557
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc57f
	jmp uuid_00000000000dc581
uuid_00000000000dc57f:
	movb $1, -432(%rbp)
uuid_00000000000dc581:
	mov -496(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000dc584:
	mov -448(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000dc587:
	mov -440(%RBP),%RSP
	add $-504, %RSP
	mov -432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5e9
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc58e
	jmp uuid_00000000000dc590
uuid_00000000000dc58e:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc58b
	jmp uuid_00000000000dc58d
uuid_00000000000dc58b:
	push %RBP
	mov -520(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -616(%rbp)
	pushq $uuid_00000000000db806
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc588
	jmp uuid_00000000000dc58a
uuid_00000000000dc588:
	movb $1, -544(%rbp)
uuid_00000000000dc58a:
	mov -608(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000dc58d:
	mov -560(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000dc590:
	mov -552(%RBP),%RSP
	add $-616, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5e6
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -648(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc597
	jmp uuid_00000000000dc599
uuid_00000000000dc597:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -712(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc594
	jmp uuid_00000000000dc596
uuid_00000000000dc594:
	push %RBP
	mov -632(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq $uuid_00000000000db3a5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc591
	jmp uuid_00000000000dc593
uuid_00000000000dc591:
	movb $1, -656(%rbp)
uuid_00000000000dc593:
	mov -720(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000dc596:
	mov -672(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000dc599:
	mov -664(%RBP),%RSP
	add $-728, %RSP
	mov -656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5e3
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5a0
	jmp uuid_00000000000dc5a2
uuid_00000000000dc5a0:
	push %RBP
	mov -752(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -824(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc59d
	jmp uuid_00000000000dc59f
uuid_00000000000dc59d:
	push %RBP
	mov -744(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -840(%rbp)
	pushq $uuid_00000000000db4b4
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc59a
	jmp uuid_00000000000dc59c
uuid_00000000000dc59a:
	movb $1, -768(%rbp)
uuid_00000000000dc59c:
	mov -832(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000dc59f:
	mov -784(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000dc5a2:
	mov -776(%RBP),%RSP
	add $-840, %RSP
	mov -768(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5e0
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -872(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5a9
	jmp uuid_00000000000dc5ab
uuid_00000000000dc5a9:
	push %RBP
	mov -864(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -936(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5a6
	jmp uuid_00000000000dc5a8
uuid_00000000000dc5a6:
	push %RBP
	mov -856(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -952(%rbp)
	pushq $uuid_00000000000db4b8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc5a3
	jmp uuid_00000000000dc5a5
uuid_00000000000dc5a3:
	movb $1, -880(%rbp)
uuid_00000000000dc5a5:
	mov -944(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000dc5a8:
	mov -896(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000dc5ab:
	mov -888(%RBP),%RSP
	add $-952, %RSP
	mov -880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5dd
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -984(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5b2
	jmp uuid_00000000000dc5b4
uuid_00000000000dc5b2:
	push %RBP
	mov -976(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1048(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5af
	jmp uuid_00000000000dc5b1
uuid_00000000000dc5af:
	push %RBP
	mov -968(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	pushq $uuid_00000000000db4bc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc5ac
	jmp uuid_00000000000dc5ae
uuid_00000000000dc5ac:
	movb $1, -992(%rbp)
uuid_00000000000dc5ae:
	mov -1056(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000dc5b1:
	mov -1008(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000dc5b4:
	mov -1000(%RBP),%RSP
	add $-1064, %RSP
	mov -992(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5da
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -1096(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5bb
	jmp uuid_00000000000dc5bd
uuid_00000000000dc5bb:
	push %RBP
	mov -1088(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1160(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5b8
	jmp uuid_00000000000dc5ba
uuid_00000000000dc5b8:
	push %RBP
	mov -1080(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1176(%rbp)
	pushq $uuid_00000000000db4c0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc5b5
	jmp uuid_00000000000dc5b7
uuid_00000000000dc5b5:
	movb $1, -1104(%rbp)
uuid_00000000000dc5b7:
	mov -1168(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000dc5ba:
	mov -1120(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000dc5bd:
	mov -1112(%RBP),%RSP
	add $-1176, %RSP
	mov -1104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5d7
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -1208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5c4
	jmp uuid_00000000000dc5c6
uuid_00000000000dc5c4:
	push %RBP
	mov -1200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc5c1
	jmp uuid_00000000000dc5c3
uuid_00000000000dc5c1:
	push %RBP
	mov -1192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc5be
	jmp uuid_00000000000dc5c0
uuid_00000000000dc5be:
	movb $1, -1216(%rbp)
uuid_00000000000dc5c0:
	mov -1280(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000dc5c3:
	mov -1232(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000dc5c6:
	mov -1224(%RBP),%RSP
	add $-1288, %RSP
	mov -1216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5d4
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -1320(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5d1
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -1352(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5ca
	jmp uuid_00000000000dc5cc
uuid_00000000000dc5ca:
	push %RBP
	jmp uuid_00000000000dc5c7
	jmp uuid_00000000000dc5c9
uuid_00000000000dc5c7:
	movb $1, -1360(%rbp)
uuid_00000000000dc5c9:
	mov -1376(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000dc5cc:
	mov -1368(%RBP),%RSP
	add $-1376, %RSP
	mov -1360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5ce
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc5cd
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc5d0
uuid_00000000000dc5ce:
uuid_00000000000dc5d0:
	mov -1328(%RBP),%RSP
	add $-1376, %RSP
	jmp uuid_00000000000dc5d3
uuid_00000000000dc5d1:
uuid_00000000000dc5d3:
	mov -1296(%RBP),%RSP
	add $-1320, %RSP
	jmp uuid_00000000000dc5d6
uuid_00000000000dc5d4:
	pushq -1288(%rbp)
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc5d6:
	mov -1184(%RBP),%RSP
	add $-1288, %RSP
	jmp uuid_00000000000dc5d9
uuid_00000000000dc5d7:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc5d9:
	mov -1072(%RBP),%RSP
	add $-1176, %RSP
	jmp uuid_00000000000dc5dc
uuid_00000000000dc5da:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc5dc:
	mov -960(%RBP),%RSP
	add $-1064, %RSP
	jmp uuid_00000000000dc5df
uuid_00000000000dc5dd:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc5df:
	mov -848(%RBP),%RSP
	add $-952, %RSP
	jmp uuid_00000000000dc5e2
uuid_00000000000dc5e0:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc5e2:
	mov -736(%RBP),%RSP
	add $-840, %RSP
	jmp uuid_00000000000dc5e5
uuid_00000000000dc5e3:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc5e5:
	mov -624(%RBP),%RSP
	add $-728, %RSP
	jmp uuid_00000000000dc5e8
uuid_00000000000dc5e6:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc5e8:
	mov -512(%RBP),%RSP
	add $-616, %RSP
	jmp uuid_00000000000dc5eb
uuid_00000000000dc5e9:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc5eb:
	mov -400(%RBP),%RSP
	add $-504, %RSP
	jmp uuid_00000000000dc5ee
uuid_00000000000dc5ec:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc5ee:
	mov -288(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000dc5f1
uuid_00000000000dc5ef:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc5f1:
	mov -176(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000dc5f4
uuid_00000000000dc5f2:
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc569
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc566
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000dc568
uuid_00000000000dc566:
	movq -216(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dc568:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000dc56b
uuid_00000000000dc569:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc563
	movq -192(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dc565
uuid_00000000000dc563:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc565:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc56b:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc5f4:
	mov -64(%RBP),%RSP
	add $-232, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_size_SB_unless_SB_class_CL_ArrowListTypeListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5ff
	jmp uuid_00000000000dc601
uuid_00000000000dc5ff:
	push %RBP
	mov -128(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc5fc
	jmp uuid_00000000000dc5fe
uuid_00000000000dc5fc:
	push %RBP
	pushq -104(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	jmp uuid_00000000000dc5f9
	jmp uuid_00000000000dc5fb
uuid_00000000000dc5f9:
	movb $1, -144(%rbp)
uuid_00000000000dc5fb:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc5fe:
	mov -160(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc601:
	mov -152(%RBP),%RSP
	add $-232, %RSP
	mov -144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc606
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc603
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc602
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc605
uuid_00000000000dc603:
uuid_00000000000dc605:
	mov -240(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000dc608
uuid_00000000000dc606:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-size-unless-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-size-unless-class : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc608:
	mov -96(%RBP),%RSP
	add $-232, %RSP
	subq $40, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
without_SB_size_SB_unless_SB_class_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc60f
	jmp uuid_00000000000dc611
uuid_00000000000dc60f:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc60c
	jmp uuid_00000000000dc60e
uuid_00000000000dc60c:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc609
	jmp uuid_00000000000dc60b
uuid_00000000000dc609:
	movb $1, -96(%rbp)
uuid_00000000000dc60b:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc60e:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc611:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc634
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc621
	jmp uuid_00000000000dc623
uuid_00000000000dc621:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc61e
	jmp uuid_00000000000dc620
uuid_00000000000dc61e:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc61b
	jmp uuid_00000000000dc61d
uuid_00000000000dc61b:
	movb $1, -208(%rbp)
uuid_00000000000dc61d:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000dc620:
	mov -224(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000dc623:
	mov -216(%RBP),%RSP
	add $-280, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc631
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc62e
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc627
	jmp uuid_00000000000dc629
uuid_00000000000dc627:
	push %RBP
	jmp uuid_00000000000dc624
	jmp uuid_00000000000dc626
uuid_00000000000dc624:
	movb $1, -352(%rbp)
uuid_00000000000dc626:
	mov -368(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dc629:
	mov -360(%RBP),%RSP
	add $-368, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc62b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc62a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc62d
uuid_00000000000dc62b:
uuid_00000000000dc62d:
	mov -320(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000dc630
uuid_00000000000dc62e:
uuid_00000000000dc630:
	mov -288(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000dc633
uuid_00000000000dc631:
	pushq -280(%rbp)
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-size-unless-class : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc633:
	mov -176(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000dc636
uuid_00000000000dc634:
#call function without-size-unless-class-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-size-unless-class-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc618
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc615
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000dc617
uuid_00000000000dc615:
	movq -216(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dc617:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000dc61a
uuid_00000000000dc618:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc612
	movq -192(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dc614
uuid_00000000000dc612:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc614:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc61a:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc636:
	mov -64(%RBP),%RSP
	add $-232, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_size_SB_unless_SB_class_SB_inner_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc63d
	jmp uuid_00000000000dc63f
uuid_00000000000dc63d:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc63a
	jmp uuid_00000000000dc63c
uuid_00000000000dc63a:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc637
	jmp uuid_00000000000dc639
uuid_00000000000dc637:
	movb $1, -96(%rbp)
uuid_00000000000dc639:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc63c:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc63f:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc67a
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc64f
	jmp uuid_00000000000dc651
uuid_00000000000dc64f:
	push %RBP
	jmp uuid_00000000000dc64c
	jmp uuid_00000000000dc64e
uuid_00000000000dc64c:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000db5e2
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc649
	jmp uuid_00000000000dc64b
uuid_00000000000dc649:
	movb $1, -208(%rbp)
uuid_00000000000dc64b:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000dc64e:
	mov -224(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000dc651:
	mov -216(%RBP),%RSP
	add $-240, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc677
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc658
	jmp uuid_00000000000dc65a
uuid_00000000000dc658:
	push %RBP
	jmp uuid_00000000000dc655
	jmp uuid_00000000000dc657
uuid_00000000000dc655:
	push %RBP
	mov -256(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq $uuid_00000000000db5e1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc652
	jmp uuid_00000000000dc654
uuid_00000000000dc652:
	movb $1, -280(%rbp)
uuid_00000000000dc654:
	mov -304(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000dc657:
	mov -296(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000dc65a:
	mov -288(%RBP),%RSP
	add $-312, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc674
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc661
	jmp uuid_00000000000dc663
uuid_00000000000dc661:
	push %RBP
	mov -336(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc65e
	jmp uuid_00000000000dc660
uuid_00000000000dc65e:
	push %RBP
	mov -328(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc65b
	jmp uuid_00000000000dc65d
uuid_00000000000dc65b:
	movb $1, -352(%rbp)
uuid_00000000000dc65d:
	mov -416(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000dc660:
	mov -368(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000dc663:
	mov -360(%RBP),%RSP
	add $-424, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc671
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc66e
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc667
	jmp uuid_00000000000dc669
uuid_00000000000dc667:
	push %RBP
	jmp uuid_00000000000dc664
	jmp uuid_00000000000dc666
uuid_00000000000dc664:
	movb $1, -496(%rbp)
uuid_00000000000dc666:
	mov -512(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000dc669:
	mov -504(%RBP),%RSP
	add $-512, %RSP
	mov -496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc66b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc66a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc66d
uuid_00000000000dc66b:
uuid_00000000000dc66d:
	mov -464(%RBP),%RSP
	add $-512, %RSP
	jmp uuid_00000000000dc670
uuid_00000000000dc66e:
uuid_00000000000dc670:
	mov -432(%RBP),%RSP
	add $-456, %RSP
	jmp uuid_00000000000dc673
uuid_00000000000dc671:
	pushq -424(%rbp)
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-size-unless-class : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc673:
	mov -320(%RBP),%RSP
	add $-424, %RSP
	jmp uuid_00000000000dc676
uuid_00000000000dc674:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc676:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000dc679
uuid_00000000000dc677:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc679:
	mov -176(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000dc67c
uuid_00000000000dc67a:
#call function without-size-unless-class-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-size-unless-class-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc646
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc643
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000dc645
uuid_00000000000dc643:
	movq -216(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dc645:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000dc648
uuid_00000000000dc646:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc640
	movq -192(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dc642
uuid_00000000000dc640:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc642:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc648:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc67c:
	mov -64(%RBP),%RSP
	add $-232, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_size_CL_ArrowListTypeListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc687
	jmp uuid_00000000000dc689
uuid_00000000000dc687:
	push %RBP
	mov -128(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc684
	jmp uuid_00000000000dc686
uuid_00000000000dc684:
	push %RBP
	pushq -104(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	jmp uuid_00000000000dc681
	jmp uuid_00000000000dc683
uuid_00000000000dc681:
	movb $1, -144(%rbp)
uuid_00000000000dc683:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc686:
	mov -160(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc689:
	mov -152(%RBP),%RSP
	add $-232, %RSP
	mov -144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc68e
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc68b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc68a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc68d
uuid_00000000000dc68b:
uuid_00000000000dc68d:
	mov -240(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000dc690
uuid_00000000000dc68e:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call without_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-size : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call without_SB_size_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc690:
	mov -96(%RBP),%RSP
	add $-232, %RSP
	subq $40, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
without_SB_size_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc697
	jmp uuid_00000000000dc699
uuid_00000000000dc697:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc694
	jmp uuid_00000000000dc696
uuid_00000000000dc694:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc691
	jmp uuid_00000000000dc693
uuid_00000000000dc691:
	movb $1, -96(%rbp)
uuid_00000000000dc693:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc696:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc699:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6d4
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6a9
	jmp uuid_00000000000dc6ab
uuid_00000000000dc6a9:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc6a6
	jmp uuid_00000000000dc6a8
uuid_00000000000dc6a6:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq $uuid_00000000000db5e1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc6a3
	jmp uuid_00000000000dc6a5
uuid_00000000000dc6a3:
	movb $1, -208(%rbp)
uuid_00000000000dc6a5:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000dc6a8:
	mov -224(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000dc6ab:
	mov -216(%RBP),%RSP
	add $-280, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6d1
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6b2
	jmp uuid_00000000000dc6b4
uuid_00000000000dc6b2:
	push %RBP
	mov -304(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc6af
	jmp uuid_00000000000dc6b1
uuid_00000000000dc6af:
	push %RBP
	mov -296(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -392(%rbp)
	pushq $uuid_00000000000db5e2
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc6ac
	jmp uuid_00000000000dc6ae
uuid_00000000000dc6ac:
	movb $1, -320(%rbp)
uuid_00000000000dc6ae:
	mov -384(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000dc6b1:
	mov -336(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000dc6b4:
	mov -328(%RBP),%RSP
	add $-392, %RSP
	mov -320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6ce
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -424(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6bb
	jmp uuid_00000000000dc6bd
uuid_00000000000dc6bb:
	push %RBP
	mov -416(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc6b8
	jmp uuid_00000000000dc6ba
uuid_00000000000dc6b8:
	push %RBP
	mov -408(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc6b5
	jmp uuid_00000000000dc6b7
uuid_00000000000dc6b5:
	movb $1, -432(%rbp)
uuid_00000000000dc6b7:
	mov -496(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000dc6ba:
	mov -448(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000dc6bd:
	mov -440(%RBP),%RSP
	add $-504, %RSP
	mov -432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6cb
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6c8
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -568(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6c1
	jmp uuid_00000000000dc6c3
uuid_00000000000dc6c1:
	push %RBP
	jmp uuid_00000000000dc6be
	jmp uuid_00000000000dc6c0
uuid_00000000000dc6be:
	movb $1, -576(%rbp)
uuid_00000000000dc6c0:
	mov -592(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000dc6c3:
	mov -584(%RBP),%RSP
	add $-592, %RSP
	mov -576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6c5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc6c4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc6c7
uuid_00000000000dc6c5:
uuid_00000000000dc6c7:
	mov -544(%RBP),%RSP
	add $-592, %RSP
	jmp uuid_00000000000dc6ca
uuid_00000000000dc6c8:
uuid_00000000000dc6ca:
	mov -512(%RBP),%RSP
	add $-536, %RSP
	jmp uuid_00000000000dc6cd
uuid_00000000000dc6cb:
	pushq -504(%rbp)
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-size : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call without_SB_size_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc6cd:
	mov -400(%RBP),%RSP
	add $-504, %RSP
	jmp uuid_00000000000dc6d0
uuid_00000000000dc6ce:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc6d0:
	mov -288(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000dc6d3
uuid_00000000000dc6d1:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc6d3:
	mov -176(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000dc6d6
uuid_00000000000dc6d4:
#call function without-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc6a0
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc69d
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000dc69f
uuid_00000000000dc69d:
	movq -216(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dc69f:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000dc6a2
uuid_00000000000dc6a0:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc69a
	movq -192(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dc69c
uuid_00000000000dc69a:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc69c:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc6a2:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc6d6:
	mov -64(%RBP),%RSP
	add $-232, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_platform_SB_props_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6dd
	jmp uuid_00000000000dc6df
uuid_00000000000dc6dd:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc6da
	jmp uuid_00000000000dc6dc
uuid_00000000000dc6da:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc6d7
	jmp uuid_00000000000dc6d9
uuid_00000000000dc6d7:
	movb $1, -96(%rbp)
uuid_00000000000dc6d9:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc6dc:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc6df:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc70e
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6ef
	jmp uuid_00000000000dc6f1
uuid_00000000000dc6ef:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc6ec
	jmp uuid_00000000000dc6ee
uuid_00000000000dc6ec:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq $uuid_00000000000dc485
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc6e9
	jmp uuid_00000000000dc6eb
uuid_00000000000dc6e9:
	movb $1, -208(%rbp)
uuid_00000000000dc6eb:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000dc6ee:
	mov -224(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000dc6f1:
	mov -216(%RBP),%RSP
	add $-280, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc70b
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6f8
	jmp uuid_00000000000dc6fa
uuid_00000000000dc6f8:
	push %RBP
	jmp uuid_00000000000dc6f5
	jmp uuid_00000000000dc6f7
uuid_00000000000dc6f5:
	push %RBP
	jmp uuid_00000000000dc6f2
	jmp uuid_00000000000dc6f4
uuid_00000000000dc6f2:
	movb $1, -320(%rbp)
uuid_00000000000dc6f4:
	mov -344(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000dc6f7:
	mov -336(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000dc6fa:
	mov -328(%RBP),%RSP
	add $-344, %RSP
	mov -320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc708
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc705
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6fe
	jmp uuid_00000000000dc700
uuid_00000000000dc6fe:
	push %RBP
	jmp uuid_00000000000dc6fb
	jmp uuid_00000000000dc6fd
uuid_00000000000dc6fb:
	movb $1, -416(%rbp)
uuid_00000000000dc6fd:
	mov -432(%RBP),%RSP
	add $-432, %RSP
uuid_00000000000dc700:
	mov -424(%RBP),%RSP
	add $-432, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc702
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc701
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc704
uuid_00000000000dc702:
uuid_00000000000dc704:
	mov -384(%RBP),%RSP
	add $-432, %RSP
	jmp uuid_00000000000dc707
uuid_00000000000dc705:
uuid_00000000000dc707:
	mov -352(%RBP),%RSP
	add $-376, %RSP
	jmp uuid_00000000000dc70a
uuid_00000000000dc708:
uuid_00000000000dc70a:
	mov -288(%RBP),%RSP
	add $-344, %RSP
	jmp uuid_00000000000dc70d
uuid_00000000000dc70b:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc70d:
	mov -176(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000dc710
uuid_00000000000dc70e:
#call function without-platform-props : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_platform_SB_props_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-platform-props : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_platform_SB_props_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc6e6
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc6e3
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000dc6e5
uuid_00000000000dc6e3:
	movq -216(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dc6e5:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000dc6e8
uuid_00000000000dc6e6:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc6e0
	movq -192(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dc6e2
uuid_00000000000dc6e0:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc6e2:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc6e8:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc710:
	mov -64(%RBP),%RSP
	add $-232, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_only_SB_tag_CL_ArrowTypeType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc717
	jmp uuid_00000000000dc719
uuid_00000000000dc717:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc714
	jmp uuid_00000000000dc716
uuid_00000000000dc714:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc711
	jmp uuid_00000000000dc713
uuid_00000000000dc711:
	movb $1, -120(%rbp)
uuid_00000000000dc713:
	mov -168(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000dc716:
	mov -136(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000dc719:
	mov -128(%RBP),%RSP
	add $-192, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc730
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc726
	jmp uuid_00000000000dc728
uuid_00000000000dc726:
	push %RBP
	jmp uuid_00000000000dc723
	jmp uuid_00000000000dc725
uuid_00000000000dc723:
	push %RBP
	mov -208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq $uuid_00000000000db796
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc720
	jmp uuid_00000000000dc722
uuid_00000000000dc720:
	movb $1, -232(%rbp)
uuid_00000000000dc722:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dc725:
	mov -248(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dc728:
	mov -240(%RBP),%RSP
	add $-264, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc72d
	push %RBP
	jmp uuid_00000000000dc72a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc729
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc72c
uuid_00000000000dc72a:
uuid_00000000000dc72c:
	mov -272(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000dc72f
uuid_00000000000dc72d:
	movq -24(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000dc72f:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000dc732
uuid_00000000000dc730:
#call function with-only-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc71d
#call function with-only-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc71a
	jmp uuid_00000000000dc71c
uuid_00000000000dc71a:
	movq -248(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -240(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -232(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000dc71c:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dc71f
uuid_00000000000dc71d:
	movq -216(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000dc71f:
	mov -224(%RBP),%RSP
	add $-224, %RSP
uuid_00000000000dc732:
	mov -88(%RBP),%RSP
	add $-224, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_only_SB_class_CL_ArrowTypeType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc739
	jmp uuid_00000000000dc73b
uuid_00000000000dc739:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc736
	jmp uuid_00000000000dc738
uuid_00000000000dc736:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc733
	jmp uuid_00000000000dc735
uuid_00000000000dc733:
	movb $1, -120(%rbp)
uuid_00000000000dc735:
	mov -168(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000dc738:
	mov -136(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000dc73b:
	mov -128(%RBP),%RSP
	add $-192, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc758
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc748
	jmp uuid_00000000000dc74a
uuid_00000000000dc748:
	push %RBP
	jmp uuid_00000000000dc745
	jmp uuid_00000000000dc747
uuid_00000000000dc745:
	push %RBP
	mov -208(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc742
	jmp uuid_00000000000dc744
uuid_00000000000dc742:
	movb $1, -232(%rbp)
uuid_00000000000dc744:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dc747:
	mov -248(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dc74a:
	mov -240(%RBP),%RSP
	add $-264, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc755
	push %RBP
	jmp uuid_00000000000dc752
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc751
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc754
uuid_00000000000dc752:
uuid_00000000000dc754:
	mov -272(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000dc757
uuid_00000000000dc755:
	push %RBP
#call function is-class : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	mov %RBX, %RBP
	call is_SB_class_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc74e
	jmp uuid_00000000000dc750
uuid_00000000000dc74e:
	push %RBP
#call function is-fragment : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	mov %RBX, %RBP
	call is_SB_fragment_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc74b
	jmp uuid_00000000000dc74d
uuid_00000000000dc74b:
	movq -24(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000dc74d:
	mov -280(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000dc750:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000dc757:
	mov -200(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000dc75a
uuid_00000000000dc758:
#call function with-only-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc73c
	jmp uuid_00000000000dc73e
uuid_00000000000dc73c:
	movq -216(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000dc73e:
	mov -224(%RBP),%RSP
	add $-224, %RSP
#call function with-only-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc73f
	jmp uuid_00000000000dc741
uuid_00000000000dc73f:
	movq -248(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -240(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -232(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000dc741:
	mov -256(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000dc75a:
	mov -88(%RBP),%RSP
	add $-256, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_only_SB_representation_CL_ArrowListTypeListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc765
	jmp uuid_00000000000dc767
uuid_00000000000dc765:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc762
	jmp uuid_00000000000dc764
uuid_00000000000dc762:
	push %RBP
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	jmp uuid_00000000000dc75f
	jmp uuid_00000000000dc761
uuid_00000000000dc75f:
	movb $1, -184(%rbp)
uuid_00000000000dc761:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000dc764:
	mov -200(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000dc767:
	mov -192(%RBP),%RSP
	add $-272, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc76c
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov -320(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc769
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc768
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc76b
uuid_00000000000dc769:
uuid_00000000000dc76b:
	mov -280(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000dc76e
uuid_00000000000dc76c:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-only-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function with-only-representation : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_representation_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000dc76e:
	mov -136(%RBP),%RSP
	add $-272, %RSP
	subq $40, %rsp
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
with_SB_only_SB_representation_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc775
	jmp uuid_00000000000dc777
uuid_00000000000dc775:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc772
	jmp uuid_00000000000dc774
uuid_00000000000dc772:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc76f
	jmp uuid_00000000000dc771
uuid_00000000000dc76f:
	movb $1, -120(%rbp)
uuid_00000000000dc771:
	mov -168(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000dc774:
	mov -136(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000dc777:
	mov -128(%RBP),%RSP
	add $-192, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc806
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc787
	jmp uuid_00000000000dc789
uuid_00000000000dc787:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -288(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc784
	jmp uuid_00000000000dc786
uuid_00000000000dc784:
	push %RBP
	mov -208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq $uuid_00000000000db996
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc781
	jmp uuid_00000000000dc783
uuid_00000000000dc781:
	movb $1, -232(%rbp)
uuid_00000000000dc783:
	mov -296(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000dc786:
	mov -248(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000dc789:
	mov -240(%RBP),%RSP
	add $-304, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc803
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc790
	jmp uuid_00000000000dc792
uuid_00000000000dc790:
	push %RBP
	mov -328(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc78d
	jmp uuid_00000000000dc78f
uuid_00000000000dc78d:
	push %RBP
	mov -320(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -416(%rbp)
	pushq $uuid_00000000000dc575
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc78a
	jmp uuid_00000000000dc78c
uuid_00000000000dc78a:
	movb $1, -344(%rbp)
uuid_00000000000dc78c:
	mov -408(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dc78f:
	mov -360(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dc792:
	mov -352(%RBP),%RSP
	add $-416, %RSP
	mov -344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc800
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc799
	jmp uuid_00000000000dc79b
uuid_00000000000dc799:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc796
	jmp uuid_00000000000dc798
uuid_00000000000dc796:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq $uuid_00000000000db557
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc793
	jmp uuid_00000000000dc795
uuid_00000000000dc793:
	movb $1, -456(%rbp)
uuid_00000000000dc795:
	mov -520(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000dc798:
	mov -472(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000dc79b:
	mov -464(%RBP),%RSP
	add $-528, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7fd
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7a2
	jmp uuid_00000000000dc7a4
uuid_00000000000dc7a2:
	push %RBP
	mov -552(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc79f
	jmp uuid_00000000000dc7a1
uuid_00000000000dc79f:
	push %RBP
	mov -544(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -640(%rbp)
	pushq $uuid_00000000000db806
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc79c
	jmp uuid_00000000000dc79e
uuid_00000000000dc79c:
	movb $1, -568(%rbp)
uuid_00000000000dc79e:
	mov -632(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000dc7a1:
	mov -584(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000dc7a4:
	mov -576(%RBP),%RSP
	add $-640, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7fa
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7ab
	jmp uuid_00000000000dc7ad
uuid_00000000000dc7ab:
	push %RBP
	mov -664(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -736(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7a8
	jmp uuid_00000000000dc7aa
uuid_00000000000dc7a8:
	push %RBP
	mov -656(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -752(%rbp)
	pushq $uuid_00000000000db3a5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc7a5
	jmp uuid_00000000000dc7a7
uuid_00000000000dc7a5:
	movb $1, -680(%rbp)
uuid_00000000000dc7a7:
	mov -744(%RBP),%RSP
	add $-752, %RSP
uuid_00000000000dc7aa:
	mov -696(%RBP),%RSP
	add $-752, %RSP
uuid_00000000000dc7ad:
	mov -688(%RBP),%RSP
	add $-752, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7f7
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -784(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7b4
	jmp uuid_00000000000dc7b6
uuid_00000000000dc7b4:
	push %RBP
	mov -776(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7b1
	jmp uuid_00000000000dc7b3
uuid_00000000000dc7b1:
	push %RBP
	mov -768(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
	pushq $uuid_00000000000db4b4
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc7ae
	jmp uuid_00000000000dc7b0
uuid_00000000000dc7ae:
	movb $1, -792(%rbp)
uuid_00000000000dc7b0:
	mov -856(%RBP),%RSP
	add $-864, %RSP
uuid_00000000000dc7b3:
	mov -808(%RBP),%RSP
	add $-864, %RSP
uuid_00000000000dc7b6:
	mov -800(%RBP),%RSP
	add $-864, %RSP
	mov -792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7f4
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -896(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7bd
	jmp uuid_00000000000dc7bf
uuid_00000000000dc7bd:
	push %RBP
	mov -888(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -960(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7ba
	jmp uuid_00000000000dc7bc
uuid_00000000000dc7ba:
	push %RBP
	mov -880(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq $uuid_00000000000db4b8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc7b7
	jmp uuid_00000000000dc7b9
uuid_00000000000dc7b7:
	movb $1, -904(%rbp)
uuid_00000000000dc7b9:
	mov -968(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000dc7bc:
	mov -920(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000dc7bf:
	mov -912(%RBP),%RSP
	add $-976, %RSP
	mov -904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7f1
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -1008(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7c6
	jmp uuid_00000000000dc7c8
uuid_00000000000dc7c6:
	push %RBP
	mov -1000(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1072(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7c3
	jmp uuid_00000000000dc7c5
uuid_00000000000dc7c3:
	push %RBP
	mov -992(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1088(%rbp)
	pushq $uuid_00000000000db4bc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc7c0
	jmp uuid_00000000000dc7c2
uuid_00000000000dc7c0:
	movb $1, -1016(%rbp)
uuid_00000000000dc7c2:
	mov -1080(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000dc7c5:
	mov -1032(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000dc7c8:
	mov -1024(%RBP),%RSP
	add $-1088, %RSP
	mov -1016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7ee
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -1120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7cf
	jmp uuid_00000000000dc7d1
uuid_00000000000dc7cf:
	push %RBP
	mov -1112(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1184(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7cc
	jmp uuid_00000000000dc7ce
uuid_00000000000dc7cc:
	push %RBP
	mov -1104(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1200(%rbp)
	pushq $uuid_00000000000db4c0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc7c9
	jmp uuid_00000000000dc7cb
uuid_00000000000dc7c9:
	movb $1, -1128(%rbp)
uuid_00000000000dc7cb:
	mov -1192(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000dc7ce:
	mov -1144(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000dc7d1:
	mov -1136(%RBP),%RSP
	add $-1200, %RSP
	mov -1128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7eb
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -1232(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7d8
	jmp uuid_00000000000dc7da
uuid_00000000000dc7d8:
	push %RBP
	mov -1224(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc7d5
	jmp uuid_00000000000dc7d7
uuid_00000000000dc7d5:
	push %RBP
	mov -1216(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc7d2
	jmp uuid_00000000000dc7d4
uuid_00000000000dc7d2:
	movb $1, -1240(%rbp)
uuid_00000000000dc7d4:
	mov -1304(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000dc7d7:
	mov -1256(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000dc7da:
	mov -1248(%RBP),%RSP
	add $-1312, %RSP
	mov -1240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7e8
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov -1344(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7e5
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -1376(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7de
	jmp uuid_00000000000dc7e0
uuid_00000000000dc7de:
	push %RBP
	jmp uuid_00000000000dc7db
	jmp uuid_00000000000dc7dd
uuid_00000000000dc7db:
	movb $1, -1384(%rbp)
uuid_00000000000dc7dd:
	mov -1400(%RBP),%RSP
	add $-1400, %RSP
uuid_00000000000dc7e0:
	mov -1392(%RBP),%RSP
	add $-1400, %RSP
	mov -1384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7e2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc7e1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc7e4
uuid_00000000000dc7e2:
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000dc7e4:
	mov -1352(%RBP),%RSP
	add $-1400, %RSP
	jmp uuid_00000000000dc7e7
uuid_00000000000dc7e5:
uuid_00000000000dc7e7:
	mov -1320(%RBP),%RSP
	add $-1344, %RSP
	jmp uuid_00000000000dc7ea
uuid_00000000000dc7e8:
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000dc7ea:
	mov -1208(%RBP),%RSP
	add $-1312, %RSP
	jmp uuid_00000000000dc7ed
uuid_00000000000dc7eb:
uuid_00000000000dc7ed:
	mov -1096(%RBP),%RSP
	add $-1200, %RSP
	jmp uuid_00000000000dc7f0
uuid_00000000000dc7ee:
uuid_00000000000dc7f0:
	mov -984(%RBP),%RSP
	add $-1088, %RSP
	jmp uuid_00000000000dc7f3
uuid_00000000000dc7f1:
uuid_00000000000dc7f3:
	mov -872(%RBP),%RSP
	add $-976, %RSP
	jmp uuid_00000000000dc7f6
uuid_00000000000dc7f4:
uuid_00000000000dc7f6:
	mov -760(%RBP),%RSP
	add $-864, %RSP
	jmp uuid_00000000000dc7f9
uuid_00000000000dc7f7:
uuid_00000000000dc7f9:
	mov -648(%RBP),%RSP
	add $-752, %RSP
	jmp uuid_00000000000dc7fc
uuid_00000000000dc7fa:
uuid_00000000000dc7fc:
	mov -536(%RBP),%RSP
	add $-640, %RSP
	jmp uuid_00000000000dc7ff
uuid_00000000000dc7fd:
uuid_00000000000dc7ff:
	mov -424(%RBP),%RSP
	add $-528, %RSP
	jmp uuid_00000000000dc802
uuid_00000000000dc800:
uuid_00000000000dc802:
	mov -312(%RBP),%RSP
	add $-416, %RSP
	jmp uuid_00000000000dc805
uuid_00000000000dc803:
uuid_00000000000dc805:
	mov -200(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000dc808
uuid_00000000000dc806:
#call function with-only-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function with-only-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc77e
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc77b
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	jmp uuid_00000000000dc77d
uuid_00000000000dc77b:
	movq -240(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -232(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -224(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000dc77d:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dc780
uuid_00000000000dc77e:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc778
	movq -216(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -40(%rbp)
	jmp uuid_00000000000dc77a
uuid_00000000000dc778:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000dc77a:
	mov -256(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000dc780:
	mov -248(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000dc808:
	mov -88(%RBP),%RSP
	add $-256, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
normalize_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function without-platform-props : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call without_SB_platform_SB_props_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function without-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call without_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function without-size-unless-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
normalize_CL_ArrowTContextTContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc81f
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov -504(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc81c
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc815
	jmp uuid_00000000000dc817
uuid_00000000000dc815:
	push %RBP
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	jmp uuid_00000000000dc812
	jmp uuid_00000000000dc814
uuid_00000000000dc812:
	push %RBP
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	jmp uuid_00000000000dc80f
	jmp uuid_00000000000dc811
uuid_00000000000dc80f:
	push %RBP
	mov -528(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc80c
	jmp uuid_00000000000dc80e
uuid_00000000000dc80c:
	push %RBP
	mov -520(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc809
	jmp uuid_00000000000dc80b
uuid_00000000000dc809:
	movb $1, -640(%rbp)
uuid_00000000000dc80b:
	mov -784(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000dc80e:
	mov -768(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000dc811:
	mov -736(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000dc814:
	mov -656(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000dc817:
	mov -648(%RBP),%RSP
	add $-904, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc819
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc818
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc81b
uuid_00000000000dc819:
#call function normalize : Arrow<TContext,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	popq -904(%RBP)
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -776(%rbp)
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc81b:
	mov -512(%RBP),%RSP
	add $-904, %RSP
	jmp uuid_00000000000dc81e
uuid_00000000000dc81c:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc81e:
	mov -384(%RBP),%RSP
	add $-504, %RSP
	jmp uuid_00000000000dc821
uuid_00000000000dc81f:
uuid_00000000000dc821:
	mov -256(%RBP),%RSP
	add $-376, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $128, %rsp
	ret
denormalize_CL_ArrowTypeType:
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function with-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function with-fields : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_fields_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function with-platform-props : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_platform_SB_props_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
enrich_CL_ArrowTypeConsTypeType:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc822
	jmp uuid_00000000000dc824
uuid_00000000000dc822:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc824:
	mov -64(%RBP),%RSP
	add $-64, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
type_SB_of_SB_s_CL_ArrowTypeAST:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc82b
	jmp uuid_00000000000dc82d
uuid_00000000000dc82b:
	push %RBP
	jmp uuid_00000000000dc828
	jmp uuid_00000000000dc82a
uuid_00000000000dc828:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc825
	jmp uuid_00000000000dc827
uuid_00000000000dc825:
	movb $1, -264(%rbp)
uuid_00000000000dc827:
	mov -288(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000dc82a:
	mov -280(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000dc82d:
	mov -272(%RBP),%RSP
	add $-296, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc85d
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc834
	jmp uuid_00000000000dc836
uuid_00000000000dc834:
	push %RBP
	jmp uuid_00000000000dc831
	jmp uuid_00000000000dc833
uuid_00000000000dc831:
	push %RBP
	mov -312(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc82e
	jmp uuid_00000000000dc830
uuid_00000000000dc82e:
	movb $1, -384(%rbp)
uuid_00000000000dc830:
	mov -408(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dc833:
	mov -400(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dc836:
	mov -392(%RBP),%RSP
	add $-416, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc85a
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc84f
	jmp uuid_00000000000dc851
uuid_00000000000dc84f:
	push %RBP
	mov -488(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc84c
	jmp uuid_00000000000dc84e
uuid_00000000000dc84c:
	push %RBP
	mov -480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc846
	jmp uuid_00000000000dc848
uuid_00000000000dc846:
	push %RBP
	mov -664(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -768(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc83d
	jmp uuid_00000000000dc83f
uuid_00000000000dc83d:
	push %RBP
	jmp uuid_00000000000dc83a
	jmp uuid_00000000000dc83c
uuid_00000000000dc83a:
	push %RBP
	mov -704(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -808(%rbp)
	pushq $uuid_00000000000db257
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc837
	jmp uuid_00000000000dc839
uuid_00000000000dc837:
	movb $1, -776(%rbp)
uuid_00000000000dc839:
	mov -800(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000dc83c:
	mov -792(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000dc83f:
	mov -784(%RBP),%RSP
	add $-808, %RSP
	mov -776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc843
	jmp uuid_00000000000dc845
uuid_00000000000dc843:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc840
	jmp uuid_00000000000dc842
uuid_00000000000dc840:
	movb $1, -680(%rbp)
uuid_00000000000dc842:
	mov -816(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000dc845:
	mov -696(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000dc848:
	mov -688(%RBP),%RSP
	add $-888, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc849
	jmp uuid_00000000000dc84b
uuid_00000000000dc849:
	movb $1, -504(%rbp)
uuid_00000000000dc84b:
	mov -600(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000dc84e:
	mov -520(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000dc851:
	mov -512(%RBP),%RSP
	add $-888, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc857
	push %RBP
	jmp uuid_00000000000dc854
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc853
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc856
uuid_00000000000dc854:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc852
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dc856:
	mov -896(%RBP),%RSP
	add $-896, %RSP
	jmp uuid_00000000000dc859
uuid_00000000000dc857:
#call function type-of-s : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	mov %RBX, %RBP
	call type_SB_of_SB_s_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function type-of-s : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call type_SB_of_SB_s_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3a7
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dc859:
	mov -424(%RBP),%RSP
	add $-936, %RSP
	jmp uuid_00000000000dc85c
uuid_00000000000dc85a:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -416(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	movq -440(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000dc85c:
	mov -304(%RBP),%RSP
	add $-440, %RSP
	jmp uuid_00000000000dc85f
uuid_00000000000dc85d:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	movq -320(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -312(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -304(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000dc85f:
	mov -184(%RBP),%RSP
	add $-320, %RSP
	subq $24, %rsp
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
type_SB_of_SB_s_SB_with_SB_fields_CL_ArrowTypeConsU64ConsASTConsStringType:
	pushq $0
	pushq $0
	pushq $3
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	push %RBP
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc866
	jmp uuid_00000000000dc868
uuid_00000000000dc866:
	push %RBP
	jmp uuid_00000000000dc863
	jmp uuid_00000000000dc865
uuid_00000000000dc863:
	push %RBP
	mov -232(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc860
	jmp uuid_00000000000dc862
uuid_00000000000dc860:
	movb $1, -304(%rbp)
uuid_00000000000dc862:
	mov -328(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000dc865:
	mov -320(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000dc868:
	mov -312(%RBP),%RSP
	add $-336, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8ca
	push %RBP
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq $0
	push %RBP
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc889
	jmp uuid_00000000000dc88b
uuid_00000000000dc889:
	push %RBP
	jmp uuid_00000000000dc886
	jmp uuid_00000000000dc888
uuid_00000000000dc886:
	push %RBP
	mov -352(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc883
	jmp uuid_00000000000dc885
uuid_00000000000dc883:
	movb $1, -424(%rbp)
uuid_00000000000dc885:
	mov -448(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000dc888:
	mov -440(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000dc88b:
	mov -432(%RBP),%RSP
	add $-456, %RSP
	mov -424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8c7
	push %RBP
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8bd
	jmp uuid_00000000000dc8bf
uuid_00000000000dc8bd:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc8ba
	jmp uuid_00000000000dc8bc
uuid_00000000000dc8ba:
	push %RBP
	mov -520(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -712(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8b4
	jmp uuid_00000000000dc8b6
uuid_00000000000dc8b4:
	push %RBP
	mov -704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -808(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8ab
	jmp uuid_00000000000dc8ad
uuid_00000000000dc8ab:
	push %RBP
	jmp uuid_00000000000dc8a8
	jmp uuid_00000000000dc8aa
uuid_00000000000dc8a8:
	push %RBP
	mov -744(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -848(%rbp)
	pushq $uuid_00000000000db257
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc8a5
	jmp uuid_00000000000dc8a7
uuid_00000000000dc8a5:
	movb $1, -816(%rbp)
uuid_00000000000dc8a7:
	mov -840(%RBP),%RSP
	add $-848, %RSP
uuid_00000000000dc8aa:
	mov -832(%RBP),%RSP
	add $-848, %RSP
uuid_00000000000dc8ad:
	mov -824(%RBP),%RSP
	add $-848, %RSP
	mov -816(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8b1
	jmp uuid_00000000000dc8b3
uuid_00000000000dc8b1:
	push %RBP
	mov -696(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc8ae
	jmp uuid_00000000000dc8b0
uuid_00000000000dc8ae:
	movb $1, -720(%rbp)
uuid_00000000000dc8b0:
	mov -856(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000dc8b3:
	mov -736(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000dc8b6:
	mov -728(%RBP),%RSP
	add $-928, %RSP
	mov -720(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8b7
	jmp uuid_00000000000dc8b9
uuid_00000000000dc8b7:
	movb $1, -544(%rbp)
uuid_00000000000dc8b9:
	mov -640(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000dc8bc:
	mov -560(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000dc8bf:
	mov -552(%RBP),%RSP
	add $-928, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8c4
	push %RBP
	jmp uuid_00000000000dc8c1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc8c0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc8c3
uuid_00000000000dc8c1:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc852
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dc8c3:
	mov -936(%RBP),%RSP
	add $-936, %RSP
	jmp uuid_00000000000dc8c6
uuid_00000000000dc8c4:
#call function type-of-s-with-fields : Arrow<Cons<Cons<Cons<Type,String>,AST>,U64>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	mov -112(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call type_SB_of_SB_s_SB_with_SB_fields_CL_ArrowTypeConsU64ConsASTConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -144(%RSP)
	push -144(%RSP)
	push -144(%RSP)
#call function type-of-s-with-fields : Arrow<Cons<Cons<Cons<Type,String>,AST>,U64>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call type_SB_of_SB_s_SB_with_SB_fields_CL_ArrowTypeConsU64ConsASTConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -144(%RSP)
	push -144(%RSP)
	push -144(%RSP)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3a7
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dc8c6:
	mov -464(%RBP),%RSP
	add $-976, %RSP
	jmp uuid_00000000000dc8c9
uuid_00000000000dc8c7:
	pushq $0
	pushq $0
	pushq $3
#call function parse-field-of : Arrow<String,Tuple<String,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	mov %RBX, %RBP
	call parse_SB_field_SB_of_CL_ArrowTupleTypeStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push %RBP
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -568(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc892
	jmp uuid_00000000000dc894
uuid_00000000000dc892:
	push %RBP
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	jmp uuid_00000000000dc88f
	jmp uuid_00000000000dc891
uuid_00000000000dc88f:
	push %RBP
	mov -536(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq $uuid_00000000000daee6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc88c
	jmp uuid_00000000000dc88e
uuid_00000000000dc88c:
	movb $1, -576(%rbp)
uuid_00000000000dc88e:
	mov -624(%RBP),%RSP
	add $-632, %RSP
uuid_00000000000dc891:
	mov -592(%RBP),%RSP
	add $-632, %RSP
uuid_00000000000dc894:
	mov -584(%RBP),%RSP
	add $-632, %RSP
	mov -576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8a2
	push %RBP
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -680(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc89b
	jmp uuid_00000000000dc89d
uuid_00000000000dc89b:
	push %RBP
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	jmp uuid_00000000000dc898
	jmp uuid_00000000000dc89a
uuid_00000000000dc898:
	push %RBP
	mov -648(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc895
	jmp uuid_00000000000dc897
uuid_00000000000dc895:
	movb $1, -688(%rbp)
uuid_00000000000dc897:
	mov -736(%RBP),%RSP
	add $-744, %RSP
uuid_00000000000dc89a:
	mov -704(%RBP),%RSP
	add $-744, %RSP
uuid_00000000000dc89d:
	mov -696(%RBP),%RSP
	add $-744, %RSP
	mov -688(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc89f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc89e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc8a1
uuid_00000000000dc89f:
#call function add-alias : Arrow<Cons<Cons<String,String>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000db18a
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -744(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000db18a
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db622
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call add_SB_alias_CL_ArrowNilConsTypeConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -728(%rbp), %r15
	movq %r15, -480(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -472(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -464(%rbp)
uuid_00000000000dc8a1:
	mov -640(%RBP),%RSP
	add $-744, %RSP
	jmp uuid_00000000000dc8a4
uuid_00000000000dc8a2:
	movq -616(%rbp), %r15
	movq %r15, -480(%rbp)
	movq -608(%rbp), %r15
	movq %r15, -472(%rbp)
	movq -600(%rbp), %r15
	movq %r15, -464(%rbp)
uuid_00000000000dc8a4:
	mov -528(%RBP),%RSP
	add $-632, %RSP
	movq -480(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -128(%rbp)
uuid_00000000000dc8c9:
	mov -344(%RBP),%RSP
	add $-632, %RSP
	jmp uuid_00000000000dc8cc
uuid_00000000000dc8ca:
	pushq $0
	pushq $0
	pushq $3
#call function parse-field-of : Arrow<String,Tuple<String,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	mov %RBX, %RBP
	call parse_SB_field_SB_of_CL_ArrowTupleTypeStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push %RBP
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc86f
	jmp uuid_00000000000dc871
uuid_00000000000dc86f:
	push %RBP
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	jmp uuid_00000000000dc86c
	jmp uuid_00000000000dc86e
uuid_00000000000dc86c:
	push %RBP
	mov -416(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -512(%rbp)
	pushq $uuid_00000000000daee6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc869
	jmp uuid_00000000000dc86b
uuid_00000000000dc869:
	movb $1, -456(%rbp)
uuid_00000000000dc86b:
	mov -504(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000dc86e:
	mov -472(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000dc871:
	mov -464(%RBP),%RSP
	add $-512, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc880
	push %RBP
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc878
	jmp uuid_00000000000dc87a
uuid_00000000000dc878:
	push %RBP
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	jmp uuid_00000000000dc875
	jmp uuid_00000000000dc877
uuid_00000000000dc875:
	push %RBP
	mov -528(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc872
	jmp uuid_00000000000dc874
uuid_00000000000dc872:
	movb $1, -568(%rbp)
uuid_00000000000dc874:
	mov -616(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000dc877:
	mov -584(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000dc87a:
	mov -576(%RBP),%RSP
	add $-624, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc87d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc87c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc87f
uuid_00000000000dc87d:
#call function add-alias : Arrow<Cons<Cons<String,String>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000db18a
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -624(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000db18a
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db622
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call add_SB_alias_CL_ArrowNilConsTypeConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc87b
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -624(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db757
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -608(%rbp), %r15
	movq %r15, -360(%rbp)
	movq -600(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -592(%rbp), %r15
	movq %r15, -344(%rbp)
uuid_00000000000dc87f:
	mov -520(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000dc882
uuid_00000000000dc880:
	movq -496(%rbp), %r15
	movq %r15, -360(%rbp)
	movq -488(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -344(%rbp)
uuid_00000000000dc882:
	mov -408(%RBP),%RSP
	add $-512, %RSP
	movq -360(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -128(%rbp)
uuid_00000000000dc8cc:
	mov -224(%RBP),%RSP
	add $-512, %RSP
	subq $24, %rsp
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $120, %rsp
	ret
typeof_SB_lhs_CL_ArrowTypeAST:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8eb
	jmp uuid_00000000000dc8ed
uuid_00000000000dc8eb:
	push %RBP
	mov -248(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8d9
	jmp uuid_00000000000dc8db
uuid_00000000000dc8d9:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8d0
	jmp uuid_00000000000dc8d2
uuid_00000000000dc8d0:
	push %RBP
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	jmp uuid_00000000000dc8cd
	jmp uuid_00000000000dc8cf
uuid_00000000000dc8cd:
	movb $1, -456(%rbp)
uuid_00000000000dc8cf:
	mov -472(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000dc8d2:
	mov -464(%RBP),%RSP
	add $-496, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8d6
	jmp uuid_00000000000dc8d8
uuid_00000000000dc8d6:
	push %RBP
	jmp uuid_00000000000dc8d3
	jmp uuid_00000000000dc8d5
uuid_00000000000dc8d3:
	movb $1, -360(%rbp)
uuid_00000000000dc8d5:
	mov -504(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000dc8d8:
	mov -376(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000dc8db:
	mov -368(%RBP),%RSP
	add $-504, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8e8
	jmp uuid_00000000000dc8ea
uuid_00000000000dc8e8:
	push %RBP
	mov -240(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -584(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8e2
	jmp uuid_00000000000dc8e4
uuid_00000000000dc8e2:
	push %RBP
	jmp uuid_00000000000dc8df
	jmp uuid_00000000000dc8e1
uuid_00000000000dc8df:
	push %RBP
	mov -520(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -624(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc8dc
	jmp uuid_00000000000dc8de
uuid_00000000000dc8dc:
	movb $1, -592(%rbp)
uuid_00000000000dc8de:
	mov -616(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000dc8e1:
	mov -608(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000dc8e4:
	mov -600(%RBP),%RSP
	add $-624, %RSP
	mov -592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8e5
	jmp uuid_00000000000dc8e7
uuid_00000000000dc8e5:
	movb $1, -264(%rbp)
uuid_00000000000dc8e7:
	mov -512(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000dc8ea:
	mov -280(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000dc8ed:
	mov -272(%RBP),%RSP
	add $-624, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc923
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -704(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc915
	jmp uuid_00000000000dc917
uuid_00000000000dc915:
	push %RBP
	mov -696(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -800(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc90c
	jmp uuid_00000000000dc90e
uuid_00000000000dc90c:
	push %RBP
	mov -792(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -896(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8fa
	jmp uuid_00000000000dc8fc
uuid_00000000000dc8fa:
	push %RBP
	mov -888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -992(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8f1
	jmp uuid_00000000000dc8f3
uuid_00000000000dc8f1:
	push %RBP
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	jmp uuid_00000000000dc8ee
	jmp uuid_00000000000dc8f0
uuid_00000000000dc8ee:
	movb $1, -1000(%rbp)
uuid_00000000000dc8f0:
	mov -1016(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000dc8f3:
	mov -1008(%RBP),%RSP
	add $-1040, %RSP
	mov -1000(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8f7
	jmp uuid_00000000000dc8f9
uuid_00000000000dc8f7:
	push %RBP
	jmp uuid_00000000000dc8f4
	jmp uuid_00000000000dc8f6
uuid_00000000000dc8f4:
	movb $1, -904(%rbp)
uuid_00000000000dc8f6:
	mov -1048(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000dc8f9:
	mov -920(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000dc8fc:
	mov -912(%RBP),%RSP
	add $-1048, %RSP
	mov -904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc909
	jmp uuid_00000000000dc90b
uuid_00000000000dc909:
	push %RBP
	mov -784(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1128(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc903
	jmp uuid_00000000000dc905
uuid_00000000000dc903:
	push %RBP
	jmp uuid_00000000000dc900
	jmp uuid_00000000000dc902
uuid_00000000000dc900:
	push %RBP
	mov -1064(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1168(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc8fd
	jmp uuid_00000000000dc8ff
uuid_00000000000dc8fd:
	movb $1, -1136(%rbp)
uuid_00000000000dc8ff:
	mov -1160(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000dc902:
	mov -1152(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000dc905:
	mov -1144(%RBP),%RSP
	add $-1168, %RSP
	mov -1136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc906
	jmp uuid_00000000000dc908
uuid_00000000000dc906:
	movb $1, -808(%rbp)
uuid_00000000000dc908:
	mov -1056(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000dc90b:
	mov -824(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000dc90e:
	mov -816(%RBP),%RSP
	add $-1168, %RSP
	mov -808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc912
	jmp uuid_00000000000dc914
uuid_00000000000dc912:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc90f
	jmp uuid_00000000000dc911
uuid_00000000000dc90f:
	movb $1, -712(%rbp)
uuid_00000000000dc911:
	mov -1176(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000dc914:
	mov -728(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000dc917:
	mov -720(%RBP),%RSP
	add $-1248, %RSP
	mov -712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc920
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov -1328(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc91d
	push %RBP
	jmp uuid_00000000000dc91a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc919
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc91c
uuid_00000000000dc91a:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc918
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dc91c:
	mov -1336(%RBP),%RSP
	add $-1336, %RSP
	jmp uuid_00000000000dc91f
uuid_00000000000dc91d:
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daff0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dc91f:
	mov -1256(%RBP),%RSP
	add $-1328, %RSP
	jmp uuid_00000000000dc922
uuid_00000000000dc920:
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3a7
#call function typeof-lhs : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	mov %RBX, %RBP
	call typeof_SB_lhs_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dc922:
	mov -632(%RBP),%RSP
	add $-1248, %RSP
	jmp uuid_00000000000dc925
uuid_00000000000dc923:
	movq -496(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -488(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000dc925:
	mov -184(%RBP),%RSP
	add $-624, %RSP
	subq $24, %rsp
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
typeof_SB_tag_CL_ArrowTypeString:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,Type>,String>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $type_SB_constructors_SB_index_CL_HashtableEqTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowTypeConsTypeConsStringHashtableEqTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	subq $24, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
cons_SB_head_CL_ArrowTypeType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc93e
	jmp uuid_00000000000dc940
uuid_00000000000dc93e:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc935
	jmp uuid_00000000000dc937
uuid_00000000000dc935:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc92c
	jmp uuid_00000000000dc92e
uuid_00000000000dc92c:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc929
	jmp uuid_00000000000dc92b
uuid_00000000000dc929:
	push %RBP
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	jmp uuid_00000000000dc926
	jmp uuid_00000000000dc928
uuid_00000000000dc926:
	movb $1, -248(%rbp)
uuid_00000000000dc928:
	mov -312(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000dc92b:
	mov -264(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000dc92e:
	mov -256(%RBP),%RSP
	add $-336, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc932
	jmp uuid_00000000000dc934
uuid_00000000000dc932:
	push %RBP
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	jmp uuid_00000000000dc92f
	jmp uuid_00000000000dc931
uuid_00000000000dc92f:
	movb $1, -184(%rbp)
uuid_00000000000dc931:
	mov -344(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dc934:
	mov -200(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dc937:
	mov -192(%RBP),%RSP
	add $-368, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc93b
	jmp uuid_00000000000dc93d
uuid_00000000000dc93b:
	push %RBP
	mov -96(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000db3a7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc938
	jmp uuid_00000000000dc93a
uuid_00000000000dc938:
	movb $1, -120(%rbp)
uuid_00000000000dc93a:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000dc93d:
	mov -136(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000dc940:
	mov -128(%RBP),%RSP
	add $-384, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc945
	push %RBP
	jmp uuid_00000000000dc942
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc941
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc944
uuid_00000000000dc942:
uuid_00000000000dc944:
	mov -392(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000dc947
uuid_00000000000dc945:
	movq -336(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -320(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000dc947:
	mov -88(%RBP),%RSP
	add $-384, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
cons_SB_tail_CL_ArrowTypeType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc960
	jmp uuid_00000000000dc962
uuid_00000000000dc960:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc957
	jmp uuid_00000000000dc959
uuid_00000000000dc957:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc94e
	jmp uuid_00000000000dc950
uuid_00000000000dc94e:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc94b
	jmp uuid_00000000000dc94d
uuid_00000000000dc94b:
	push %RBP
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	jmp uuid_00000000000dc948
	jmp uuid_00000000000dc94a
uuid_00000000000dc948:
	movb $1, -248(%rbp)
uuid_00000000000dc94a:
	mov -312(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000dc94d:
	mov -264(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000dc950:
	mov -256(%RBP),%RSP
	add $-336, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc954
	jmp uuid_00000000000dc956
uuid_00000000000dc954:
	push %RBP
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	jmp uuid_00000000000dc951
	jmp uuid_00000000000dc953
uuid_00000000000dc951:
	movb $1, -184(%rbp)
uuid_00000000000dc953:
	mov -344(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dc956:
	mov -200(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dc959:
	mov -192(%RBP),%RSP
	add $-368, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc95d
	jmp uuid_00000000000dc95f
uuid_00000000000dc95d:
	push %RBP
	mov -96(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000db3a7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc95a
	jmp uuid_00000000000dc95c
uuid_00000000000dc95a:
	movb $1, -120(%rbp)
uuid_00000000000dc95c:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000dc95f:
	mov -136(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000dc962:
	mov -128(%RBP),%RSP
	add $-384, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc967
	push %RBP
	jmp uuid_00000000000dc964
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc963
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc966
uuid_00000000000dc964:
uuid_00000000000dc966:
	mov -392(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000dc969
uuid_00000000000dc967:
	movq -368(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000dc969:
	mov -88(%RBP),%RSP
	add $-384, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
parameter_SB_number_CL_ArrowU64ConsStringType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -104(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc970
	jmp uuid_00000000000dc972
uuid_00000000000dc970:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc96d
	jmp uuid_00000000000dc96f
uuid_00000000000dc96d:
	push %RBP
	jmp uuid_00000000000dc96a
	jmp uuid_00000000000dc96c
uuid_00000000000dc96a:
	movb $1, -112(%rbp)
uuid_00000000000dc96c:
	mov -176(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dc96f:
	mov -128(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dc972:
	mov -120(%RBP),%RSP
	add $-176, %RSP
	mov -112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc977
	push %RBP
	jmp uuid_00000000000dc974
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc973
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc976
uuid_00000000000dc974:
uuid_00000000000dc976:
	mov -184(%RBP),%RSP
	add $-184, %RSP
	jmp uuid_00000000000dc979
uuid_00000000000dc977:
#call function parameter-number : Arrow<Cons<Cons<List<Type>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -32(%rbp)
	pushq $1
	mov %RBX, %RBP
	call parameter_SB_number_CL_ArrowU64ConsU64ConsStringListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -48(%rbp)
uuid_00000000000dc979:
	mov -80(%RBP),%RSP
	add $-176, %RSP
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
parameter_SB_number_CL_ArrowU64ConsU64ConsStringListType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	push %RBP
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc98c
	jmp uuid_00000000000dc98e
uuid_00000000000dc98c:
	push %RBP
	mov -152(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc989
	jmp uuid_00000000000dc98b
uuid_00000000000dc989:
	push %RBP
	pushq -128(%RBP)
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc983
	jmp uuid_00000000000dc985
uuid_00000000000dc983:
	push %RBP
	mov -248(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc980
	jmp uuid_00000000000dc982
uuid_00000000000dc980:
	movb $1, -264(%rbp)
uuid_00000000000dc982:
	mov -280(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000dc985:
	mov -272(%RBP),%RSP
	add $-288, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc986
	jmp uuid_00000000000dc988
uuid_00000000000dc986:
	movb $1, -168(%rbp)
uuid_00000000000dc988:
	mov -232(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000dc98b:
	mov -184(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000dc98e:
	mov -176(%RBP),%RSP
	add $-288, %RSP
	mov -168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc996
	push %RBP
	jmp uuid_00000000000dc993
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc992
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc995
uuid_00000000000dc993:
uuid_00000000000dc995:
	mov -296(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000dc998
uuid_00000000000dc996:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc98f
#call function parameter-number : Arrow<Cons<Cons<List<Type>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -48(%rbp)
	mov -56(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call parameter_SB_number_CL_ArrowU64ConsU64ConsStringListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -72(%rbp)
	jmp uuid_00000000000dc991
uuid_00000000000dc98f:
	movq -56(%rbp), %r15
	movq %r15, -72(%rbp)
	mov -56(%rbp), %r15
	mov %r15, -72(%rbp)
uuid_00000000000dc991:
	mov -296(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000dc998:
	mov -120(%RBP),%RSP
	add $-296, %RSP
	mov -72(%rbp), %RAX
	mov %rbp, %rsp
	sub $64, %rsp
	ret
apply_CL_ArrowTupleTypeTypeConsASTConsTypeConsTypeString:
#call function apply : Arrow<Cons<Cons<Cons<Cons<String,Type>,Type>,U64>,AST>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowTupleTypeTypeConsASTConsU64ConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	subq $56, %rsp
	pushq 56(%rsp)
	pushq 72(%rsp)
	pushq 88(%rsp)
	pushq 104(%rsp)
	pushq 120(%rsp)
	pushq 136(%rsp)
	pushq 152(%rsp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
apply_CL_ArrowTupleTypeTypeConsASTConsU64ConsTypeConsTypeString:
#call function apply : Arrow<Cons<Cons<Cons<Cons<Cons<String,Type>,Type>,U64>,AST>,U64>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq $1
	mov %RBX, %RBP
	call apply_CL_ArrowTupleTypeTypeConsU64ConsASTConsU64ConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	subq $56, %rsp
	pushq 56(%rsp)
	pushq 72(%rsp)
	pushq 88(%rsp)
	pushq 104(%rsp)
	pushq 120(%rsp)
	pushq 136(%rsp)
	pushq 152(%rsp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $144, %rsp
	ret
apply_CL_ArrowTupleTypeTypeConsU64ConsASTConsU64ConsTypeConsTypeString:
	pushq $0
	pushq $0
	pushq $3
#call function apply-plural : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call apply_SB_plural_CL_ArrowListTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push %RBP
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc999
	jmp uuid_00000000000dc99b
uuid_00000000000dc999:
#call function reduce-plural : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call reduce_SB_plural_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000dc99b:
	mov -224(%RBP),%RSP
	add $-224, %RSP
	push %RBP
#call function .length : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call _DT_length_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	mov %RAX, %RAX
	mov -144(%RBP), %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc99f
	jmp uuid_00000000000dc9a1
uuid_00000000000dc99f:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc99c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc99d
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<SourceLocation,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc99e
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dc9a1:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	push %RBP
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function .length : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call _DT_length_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc9b5
	jmp uuid_00000000000dc9b7
uuid_00000000000dc9b5:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc9a2
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db757
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc9a3
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<SourceLocation,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
uuid_00000000000dc9b2:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc9b3
	jmp uuid_00000000000dc9b4
uuid_00000000000dc9b3:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc9a4
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -368(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc9ab
	jmp uuid_00000000000dc9ad
uuid_00000000000dc9ab:
	push %RBP
	mov -360(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc9a8
	jmp uuid_00000000000dc9aa
uuid_00000000000dc9a8:
	push %RBP
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	jmp uuid_00000000000dc9a5
	jmp uuid_00000000000dc9a7
uuid_00000000000dc9a5:
	movb $1, -376(%rbp)
uuid_00000000000dc9a7:
	mov -440(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000dc9aa:
	mov -392(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000dc9ad:
	mov -384(%RBP),%RSP
	add $-464, %RSP
	mov -376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc9af
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc9ae
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc9b1
uuid_00000000000dc9af:
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -432(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -408(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -400(%rbp), %r15
	movq %r15, -248(%rbp)
uuid_00000000000dc9b1:
	mov -328(%RBP),%RSP
	add $-464, %RSP
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dc9b2
uuid_00000000000dc9b4:
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dc9b7:
	mov -240(%RBP),%RSP
	add $-280, %RSP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
uuid_00000000000dc9f1:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc9f2
	jmp uuid_00000000000dc9f3
uuid_00000000000dc9f2:
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc9be
	jmp uuid_00000000000dc9c0
uuid_00000000000dc9be:
	push %RBP
	mov -400(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc9bb
	jmp uuid_00000000000dc9bd
uuid_00000000000dc9bb:
	push %RBP
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	jmp uuid_00000000000dc9b8
	jmp uuid_00000000000dc9ba
uuid_00000000000dc9b8:
	movb $1, -416(%rbp)
uuid_00000000000dc9ba:
	mov -480(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000dc9bd:
	mov -432(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000dc9c0:
	mov -424(%RBP),%RSP
	add $-504, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc9ee
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc9ed
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc9f0
uuid_00000000000dc9ee:
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	push %RBP
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc9d9
	jmp uuid_00000000000dc9db
uuid_00000000000dc9d9:
	push %RBP
	mov -552(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc9d0
	jmp uuid_00000000000dc9d2
uuid_00000000000dc9d0:
	push %RBP
	mov -616(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -688(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc9c7
	jmp uuid_00000000000dc9c9
uuid_00000000000dc9c7:
	push %RBP
	mov -680(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc9c4
	jmp uuid_00000000000dc9c6
uuid_00000000000dc9c4:
	push %RBP
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	jmp uuid_00000000000dc9c1
	jmp uuid_00000000000dc9c3
uuid_00000000000dc9c1:
	movb $1, -696(%rbp)
uuid_00000000000dc9c3:
	mov -760(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000dc9c6:
	mov -712(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000dc9c9:
	mov -704(%RBP),%RSP
	add $-784, %RSP
	mov -696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc9cd
	jmp uuid_00000000000dc9cf
uuid_00000000000dc9cd:
	push %RBP
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	jmp uuid_00000000000dc9ca
	jmp uuid_00000000000dc9cc
uuid_00000000000dc9ca:
	movb $1, -632(%rbp)
uuid_00000000000dc9cc:
	mov -792(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000dc9cf:
	mov -648(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000dc9d2:
	mov -640(%RBP),%RSP
	add $-816, %RSP
	mov -632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc9d6
	jmp uuid_00000000000dc9d8
uuid_00000000000dc9d6:
	push %RBP
	mov -544(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -832(%rbp)
	pushq $uuid_00000000000db622
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc9d3
	jmp uuid_00000000000dc9d5
uuid_00000000000dc9d3:
	movb $1, -568(%rbp)
uuid_00000000000dc9d5:
	mov -824(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000dc9d8:
	mov -584(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000dc9db:
	mov -576(%RBP),%RSP
	add $-832, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc9ea
	push %RBP
	jmp uuid_00000000000dc9e7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dc9e6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc9e9
uuid_00000000000dc9e7:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc9e5
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dc9e9:
	mov -840(%RBP),%RSP
	add $-840, %RSP
	jmp uuid_00000000000dc9ec
uuid_00000000000dc9ea:
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function normalize : Arrow<TContext,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
	popq -912(%RBP)
	popq -904(%RBP)
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	movq -976(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -968(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -960(%rbp), %r15
	movq %r15, -16(%rbp)
#call function guess-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	mov %RBX, %RBP
	call guess_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -64(%RBP), %RAX
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc9e2
	jmp uuid_00000000000dc9e4
uuid_00000000000dc9e2:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc9df
	jmp uuid_00000000000dc9e1
uuid_00000000000dc9df:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc9dc
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc9dd
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db757
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc9de
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<SourceLocation,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dc9e1:
	mov -992(%RBP),%RSP
	add $-992, %RSP
#call function try-specialize : Arrow<Cons<Cons<Cons<String,Type>,TContext>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	mov %RBX, %RBP
	call try_SB_specialize_CL_ArrowNilConsTypeConsTContextConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dc9e4:
	mov -984(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000dc9ec:
	mov -536(%RBP),%RSP
	add $-992, %RSP
	movq -472(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -288(%rbp)
uuid_00000000000dc9f0:
	mov -368(%RBP),%RSP
	add $-992, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $120, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dc9f1
uuid_00000000000dc9f3:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	subq $56, %rsp
	pushq 56(%rsp)
	pushq 72(%rsp)
	pushq 88(%rsp)
	pushq 104(%rsp)
	pushq 120(%rsp)
	pushq 136(%rsp)
	pushq 152(%rsp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $152, %rsp
	ret
apply_CL_ArrowASTConsASTContext:
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dca71
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov -480(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dca6e
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc9fa
	jmp uuid_00000000000dc9fc
uuid_00000000000dc9fa:
	push %RBP
	jmp uuid_00000000000dc9f7
	jmp uuid_00000000000dc9f9
uuid_00000000000dc9f7:
	push %RBP
	jmp uuid_00000000000dc9f4
	jmp uuid_00000000000dc9f6
uuid_00000000000dc9f4:
	movb $1, -568(%rbp)
uuid_00000000000dc9f6:
	mov -592(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000dc9f9:
	mov -584(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000dc9fc:
	mov -576(%RBP),%RSP
	add $-592, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dca6b
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dca00
	jmp uuid_00000000000dca02
uuid_00000000000dca00:
	push %RBP
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	jmp uuid_00000000000dc9fd
	jmp uuid_00000000000dc9ff
uuid_00000000000dc9fd:
	movb $1, -680(%rbp)
uuid_00000000000dc9ff:
	mov -696(%RBP),%RSP
	add $-720, %RSP
uuid_00000000000dca02:
	mov -688(%RBP),%RSP
	add $-720, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dca68
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -800(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dca09
	jmp uuid_00000000000dca0b
uuid_00000000000dca09:
	push %RBP
	jmp uuid_00000000000dca06
	jmp uuid_00000000000dca08
uuid_00000000000dca06:
	push %RBP
	mov -736(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dca03
	jmp uuid_00000000000dca05
uuid_00000000000dca03:
	movb $1, -808(%rbp)
uuid_00000000000dca05:
	mov -832(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000dca08:
	mov -824(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000dca0b:
	mov -816(%RBP),%RSP
	add $-840, %RSP
	mov -808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dca65
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dca2b
	jmp uuid_00000000000dca2d
uuid_00000000000dca2b:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dca28
	jmp uuid_00000000000dca2a
uuid_00000000000dca28:
	push %RBP
	mov -904(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dca25
	jmp uuid_00000000000dca27
uuid_00000000000dca25:
	movb $1, -928(%rbp)
uuid_00000000000dca27:
	mov -1024(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000dca2a:
	mov -944(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000dca2d:
	mov -936(%RBP),%RSP
	add $-1096, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dca62
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1176(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dca37
	jmp uuid_00000000000dca39
uuid_00000000000dca37:
	push %RBP
	pushq -1152(%RBP)
	pushq -1160(%RBP)
	pushq -1168(%RBP)
	jmp uuid_00000000000dca34
	jmp uuid_00000000000dca36
uuid_00000000000dca34:
	push %RBP
	mov -1144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dca31
	jmp uuid_00000000000dca33
uuid_00000000000dca31:
	push %RBP
	mov -1136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dca2e
	jmp uuid_00000000000dca30
uuid_00000000000dca2e:
	movb $1, -1184(%rbp)
uuid_00000000000dca30:
	mov -1312(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000dca33:
	mov -1232(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000dca36:
	mov -1200(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000dca39:
	mov -1192(%RBP),%RSP
	add $-1384, %RSP
	mov -1184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dca5f
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1464(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dca40
	jmp uuid_00000000000dca42
uuid_00000000000dca40:
	push %RBP
	mov -1456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dca3d
	jmp uuid_00000000000dca3f
uuid_00000000000dca3d:
	push %RBP
	mov -1448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dca3a
	jmp uuid_00000000000dca3c
uuid_00000000000dca3a:
	movb $1, -1472(%rbp)
uuid_00000000000dca3c:
	mov -1568(%RBP),%RSP
	add $-1640, %RSP
uuid_00000000000dca3f:
	mov -1488(%RBP),%RSP
	add $-1640, %RSP
uuid_00000000000dca42:
	mov -1480(%RBP),%RSP
	add $-1640, %RSP
	mov -1472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dca5c
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1720(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dca49
	jmp uuid_00000000000dca4b
uuid_00000000000dca49:
	push %RBP
	mov -1712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dca46
	jmp uuid_00000000000dca48
uuid_00000000000dca46:
	push %RBP
	mov -1704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dca43
	jmp uuid_00000000000dca45
uuid_00000000000dca43:
	movb $1, -1728(%rbp)
uuid_00000000000dca45:
	mov -1824(%RBP),%RSP
	add $-1896, %RSP
uuid_00000000000dca48:
	mov -1744(%RBP),%RSP
	add $-1896, %RSP
uuid_00000000000dca4b:
	mov -1736(%RBP),%RSP
	add $-1896, %RSP
	mov -1728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dca59
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1976(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dca52
	jmp uuid_00000000000dca54
uuid_00000000000dca52:
	push %RBP
	mov -1968(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dca4f
	jmp uuid_00000000000dca51
uuid_00000000000dca4f:
	push %RBP
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	jmp uuid_00000000000dca4c
	jmp uuid_00000000000dca4e
uuid_00000000000dca4c:
	movb $1, -1984(%rbp)
uuid_00000000000dca4e:
	mov -2080(%RBP),%RSP
	add $-2136, %RSP
uuid_00000000000dca51:
	mov -2000(%RBP),%RSP
	add $-2136, %RSP
uuid_00000000000dca54:
	mov -1992(%RBP),%RSP
	add $-2136, %RSP
	mov -1984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dca56
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dca55
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dca58
uuid_00000000000dca56:
#call function substitute : Arrow<Cons<Context,Token>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTokenConsTokenContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -184(%RSP)
	push -184(%RSP)
	push -184(%RSP)
	push -184(%RSP)
	push -184(%RSP)
	push -184(%RSP)
	push -184(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000dca58:
	mov -1904(%RBP),%RSP
	add $-2136, %RSP
	jmp uuid_00000000000dca5b
uuid_00000000000dca59:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000dca5b:
	mov -1648(%RBP),%RSP
	add $-1896, %RSP
	jmp uuid_00000000000dca5e
uuid_00000000000dca5c:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000dca5e:
	mov -1392(%RBP),%RSP
	add $-1640, %RSP
	jmp uuid_00000000000dca61
uuid_00000000000dca5f:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq $5
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000dca61:
	mov -1104(%RBP),%RSP
	add $-1384, %RSP
	jmp uuid_00000000000dca64
uuid_00000000000dca62:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000dca64:
	mov -848(%RBP),%RSP
	add $-1096, %RSP
	jmp uuid_00000000000dca67
uuid_00000000000dca65:
uuid_00000000000dca22:
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dca23
	jmp uuid_00000000000dca24
uuid_00000000000dca23:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq $0
	push %RBP
	mov -1040(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dca15
	jmp uuid_00000000000dca17
uuid_00000000000dca15:
	push %RBP
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	jmp uuid_00000000000dca12
	jmp uuid_00000000000dca14
uuid_00000000000dca12:
	push %RBP
	mov -960(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dca0f
	jmp uuid_00000000000dca11
uuid_00000000000dca0f:
	push %RBP
	mov -952(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dca0c
	jmp uuid_00000000000dca0e
uuid_00000000000dca0c:
	movb $1, -1048(%rbp)
uuid_00000000000dca0e:
	mov -1160(%RBP),%RSP
	add $-1256, %RSP
uuid_00000000000dca11:
	mov -1144(%RBP),%RSP
	add $-1256, %RSP
uuid_00000000000dca14:
	mov -1064(%RBP),%RSP
	add $-1256, %RSP
uuid_00000000000dca17:
	mov -1056(%RBP),%RSP
	add $-1256, %RSP
	mov -1048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dca1f
	push %RBP
	jmp uuid_00000000000dca1c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dca1b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dca1e
uuid_00000000000dca1c:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dca1e:
	mov -1264(%RBP),%RSP
	add $-1264, %RSP
	jmp uuid_00000000000dca21
uuid_00000000000dca1f:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1152(%rbp)
	pushq -840(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dca18
	movq -1256(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dca1a
uuid_00000000000dca18:
	movq -1136(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -184(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dca1a:
	mov -1264(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000dca21:
	mov -944(%RBP),%RSP
	add $-1264, %RSP
	add $96, %rsp
	add $96, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $96, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dca22
uuid_00000000000dca24:
uuid_00000000000dca67:
	mov -728(%RBP),%RSP
	add $-840, %RSP
	jmp uuid_00000000000dca6a
uuid_00000000000dca68:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<Context,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	pushq $4
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000dca6a:
	mov -600(%RBP),%RSP
	add $-720, %RSP
	jmp uuid_00000000000dca6d
uuid_00000000000dca6b:
uuid_00000000000dca6d:
	mov -488(%RBP),%RSP
	add $-592, %RSP
	jmp uuid_00000000000dca70
uuid_00000000000dca6e:
uuid_00000000000dca70:
	mov -408(%RBP),%RSP
	add $-480, %RSP
	jmp uuid_00000000000dca73
uuid_00000000000dca71:
uuid_00000000000dca73:
	mov -328(%RBP),%RSP
	add $-400, %RSP
	subq $72, %rsp
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $176, %rsp
	ret
apply_SB_and_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString:
#call function apply : Arrow<Cons<Cons<Cons<Cons<String,Type>,Type>,U64>,AST>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $1
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowTupleTypeTypeConsASTConsU64ConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	subq $24, %rsp
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
apply_SB_plural_CL_ArrowListTypeConsASTConsTypeConsTypeString:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dca7e
	jmp uuid_00000000000dca80
uuid_00000000000dca7e:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dca7b
	jmp uuid_00000000000dca7d
uuid_00000000000dca7b:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dca78
	jmp uuid_00000000000dca7a
uuid_00000000000dca78:
	movb $1, -240(%rbp)
uuid_00000000000dca7a:
	mov -288(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000dca7d:
	mov -256(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000dca80:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcaa6
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dca99
	jmp uuid_00000000000dca9b
uuid_00000000000dca99:
	push %RBP
	mov -336(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dca90
	jmp uuid_00000000000dca92
uuid_00000000000dca90:
	push %RBP
	mov -400(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dca87
	jmp uuid_00000000000dca89
uuid_00000000000dca87:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dca84
	jmp uuid_00000000000dca86
uuid_00000000000dca84:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000dca81
	jmp uuid_00000000000dca83
uuid_00000000000dca81:
	movb $1, -480(%rbp)
uuid_00000000000dca83:
	mov -544(%RBP),%RSP
	add $-568, %RSP
uuid_00000000000dca86:
	mov -496(%RBP),%RSP
	add $-568, %RSP
uuid_00000000000dca89:
	mov -488(%RBP),%RSP
	add $-568, %RSP
	mov -480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dca8d
	jmp uuid_00000000000dca8f
uuid_00000000000dca8d:
	push %RBP
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	jmp uuid_00000000000dca8a
	jmp uuid_00000000000dca8c
uuid_00000000000dca8a:
	movb $1, -416(%rbp)
uuid_00000000000dca8c:
	mov -576(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000dca8f:
	mov -432(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000dca92:
	mov -424(%RBP),%RSP
	add $-600, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dca96
	jmp uuid_00000000000dca98
uuid_00000000000dca96:
	push %RBP
	mov -328(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -616(%rbp)
	pushq $uuid_00000000000db622
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dca93
	jmp uuid_00000000000dca95
uuid_00000000000dca93:
	movb $1, -352(%rbp)
uuid_00000000000dca95:
	mov -608(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000dca98:
	mov -368(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000dca9b:
	mov -360(%RBP),%RSP
	add $-616, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcaa3
	push %RBP
	jmp uuid_00000000000dcaa0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dca9f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcaa2
uuid_00000000000dcaa0:
uuid_00000000000dcaa2:
	mov -624(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000dcaa5
uuid_00000000000dcaa3:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dca9c
	jmp uuid_00000000000dca9e
uuid_00000000000dca9c:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
uuid_00000000000dca9e:
	mov -624(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000dcaa5:
	mov -320(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000dcaa8
uuid_00000000000dcaa6:
#call function + : Arrow<Cons<List<Type>,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply-plural : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call apply_SB_plural_CL_ArrowListTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
#call function apply-plural : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call apply_SB_plural_CL_ArrowListTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowListTypeConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
uuid_00000000000dcaa8:
	mov -208(%RBP),%RSP
	add $-312, %RSP
	subq $40, %rsp
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
reduce_SB_plural_CL_ArrowListTypeListType:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
uuid_00000000000dcac1:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcac2
	jmp uuid_00000000000dcac3
uuid_00000000000dcac2:
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $0
	push %RBP
	mov -216(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcab7
	jmp uuid_00000000000dcab9
uuid_00000000000dcab7:
	push %RBP
	mov -208(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcab4
	jmp uuid_00000000000dcab6
uuid_00000000000dcab4:
	push %RBP
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	jmp uuid_00000000000dcab1
	jmp uuid_00000000000dcab3
uuid_00000000000dcab1:
	movb $1, -224(%rbp)
uuid_00000000000dcab3:
	mov -288(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000dcab6:
	mov -240(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000dcab9:
	mov -232(%RBP),%RSP
	add $-312, %RSP
	mov -224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcabe
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dcabd
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcac0
uuid_00000000000dcabe:
	push %RBP
#call function is-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call is_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcaba
	jmp uuid_00000000000dcabc
uuid_00000000000dcaba:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000dcabc:
	mov -320(%RBP),%RSP
	add $-320, %RSP
	movq -280(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -264(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -256(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -248(%rbp), %r15
	movq %r15, -96(%rbp)
uuid_00000000000dcac0:
	mov -176(%RBP),%RSP
	add $-320, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dcac1
uuid_00000000000dcac3:
	push %RBP
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcac4
	jmp uuid_00000000000dcac6
uuid_00000000000dcac4:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dcac6:
	mov -136(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000dcaed:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcaee
	jmp uuid_00000000000dcaef
uuid_00000000000dcaee:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcacd
	jmp uuid_00000000000dcacf
uuid_00000000000dcacd:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcaca
	jmp uuid_00000000000dcacc
uuid_00000000000dcaca:
	push %RBP
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	jmp uuid_00000000000dcac7
	jmp uuid_00000000000dcac9
uuid_00000000000dcac7:
	movb $1, -232(%rbp)
uuid_00000000000dcac9:
	mov -296(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000dcacc:
	mov -248(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000dcacf:
	mov -240(%RBP),%RSP
	add $-320, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcaea
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dcae9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcaec
uuid_00000000000dcaea:
	movq -288(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -264(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -256(%rbp), %r15
	movq %r15, -8(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
uuid_00000000000dcae3:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcae4
	jmp uuid_00000000000dcae5
uuid_00000000000dcae4:
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	push %RBP
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcad6
	jmp uuid_00000000000dcad8
uuid_00000000000dcad6:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcad3
	jmp uuid_00000000000dcad5
uuid_00000000000dcad3:
	push %RBP
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	jmp uuid_00000000000dcad0
	jmp uuid_00000000000dcad2
uuid_00000000000dcad0:
	movb $1, -456(%rbp)
uuid_00000000000dcad2:
	mov -520(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000dcad5:
	mov -472(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000dcad8:
	mov -464(%RBP),%RSP
	add $-544, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcae0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dcadf
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcae2
uuid_00000000000dcae0:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcadc
	jmp uuid_00000000000dcade
uuid_00000000000dcadc:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcad9
	jmp uuid_00000000000dcadb
uuid_00000000000dcad9:
	pushq $0
	pushq $0
	pushq $3
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000dcadb:
	mov -560(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000dcade:
	mov -552(%RBP),%RSP
	add $-560, %RSP
	movq -512(%rbp), %r15
	movq %r15, -360(%rbp)
	movq -504(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -496(%rbp), %r15
	movq %r15, -344(%rbp)
	movq -488(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -328(%rbp)
uuid_00000000000dcae2:
	mov -408(%RBP),%RSP
	add $-560, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dcae3
uuid_00000000000dcae5:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcae6
	jmp uuid_00000000000dcae8
uuid_00000000000dcae6:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000dcae8:
	mov -368(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dcaec:
	mov -184(%RBP),%RSP
	add $-368, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $40, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dcaed
uuid_00000000000dcaef:
	movq -88(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -80(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -72(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -64(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -56(%rbp), %r15
	movq %r15, -8(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000dcb16:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcb17
	jmp uuid_00000000000dcb18
uuid_00000000000dcb17:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcaf6
	jmp uuid_00000000000dcaf8
uuid_00000000000dcaf6:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcaf3
	jmp uuid_00000000000dcaf5
uuid_00000000000dcaf3:
	push %RBP
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	jmp uuid_00000000000dcaf0
	jmp uuid_00000000000dcaf2
uuid_00000000000dcaf0:
	movb $1, -232(%rbp)
uuid_00000000000dcaf2:
	mov -296(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000dcaf5:
	mov -248(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000dcaf8:
	mov -240(%RBP),%RSP
	add $-320, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb13
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dcb12
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcb15
uuid_00000000000dcb13:
	movq -288(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -264(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -256(%rbp), %r15
	movq %r15, -8(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
uuid_00000000000dcb0c:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcb0d
	jmp uuid_00000000000dcb0e
uuid_00000000000dcb0d:
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	push %RBP
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcaff
	jmp uuid_00000000000dcb01
uuid_00000000000dcaff:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcafc
	jmp uuid_00000000000dcafe
uuid_00000000000dcafc:
	push %RBP
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	jmp uuid_00000000000dcaf9
	jmp uuid_00000000000dcafb
uuid_00000000000dcaf9:
	movb $1, -456(%rbp)
uuid_00000000000dcafb:
	mov -520(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000dcafe:
	mov -472(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000dcb01:
	mov -464(%RBP),%RSP
	add $-544, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb09
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dcb08
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcb0b
uuid_00000000000dcb09:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcb05
	jmp uuid_00000000000dcb07
uuid_00000000000dcb05:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcb02
	jmp uuid_00000000000dcb04
uuid_00000000000dcb02:
	pushq $0
	pushq $0
	pushq $3
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000dcb04:
	mov -560(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000dcb07:
	mov -552(%RBP),%RSP
	add $-560, %RSP
	movq -512(%rbp), %r15
	movq %r15, -360(%rbp)
	movq -504(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -496(%rbp), %r15
	movq %r15, -344(%rbp)
	movq -488(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -328(%rbp)
uuid_00000000000dcb0b:
	mov -408(%RBP),%RSP
	add $-560, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dcb0c
uuid_00000000000dcb0e:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcb0f
	jmp uuid_00000000000dcb11
uuid_00000000000dcb0f:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000dcb11:
	mov -368(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dcb15:
	mov -184(%RBP),%RSP
	add $-368, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $40, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dcb16
uuid_00000000000dcb18:
	subq $40, %rsp
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
apply_SB_or_SB_cons_SB_and_SB_specialize_CL_ArrowTupleTypeTypeConsASTConsTypeConsTypeString:
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcb1c
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb19
	jmp uuid_00000000000dcb1b
uuid_00000000000dcb19:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3a7
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $0
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
uuid_00000000000dcb1b:
	mov -208(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000dcb1e
uuid_00000000000dcb1c:
#call function apply : Arrow<Cons<Cons<Cons<Cons<String,Type>,Type>,U64>,AST>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $1
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowTupleTypeTypeConsASTConsU64ConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
uuid_00000000000dcb1e:
	mov -200(%RBP),%RSP
	add $-200, %RSP
	subq $56, %rsp
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
try_SB_specialize_CL_ArrowNilConsTypeConsTContextConsTypeString:
	mov $global_SB_type_SB_context_CL_TContextTContext, %r15
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000dcb65:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcb66
	jmp uuid_00000000000dcb67
uuid_00000000000dcb66:
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb62
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq $0
	push %RBP
	mov -680(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb2b
	jmp uuid_00000000000dcb2d
uuid_00000000000dcb2b:
	push %RBP
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	jmp uuid_00000000000dcb28
	jmp uuid_00000000000dcb2a
uuid_00000000000dcb28:
	push %RBP
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	jmp uuid_00000000000dcb25
	jmp uuid_00000000000dcb27
uuid_00000000000dcb25:
	push %RBP
	mov -576(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcb22
	jmp uuid_00000000000dcb24
uuid_00000000000dcb22:
	push %RBP
	mov -568(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcb1f
	jmp uuid_00000000000dcb21
uuid_00000000000dcb1f:
	movb $1, -688(%rbp)
uuid_00000000000dcb21:
	mov -832(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000dcb24:
	mov -816(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000dcb27:
	mov -784(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000dcb2a:
	mov -704(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000dcb2d:
	mov -696(%RBP),%RSP
	add $-952, %RSP
	mov -688(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb5f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dcb5e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcb61
uuid_00000000000dcb5f:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -824(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcb5b
	jmp uuid_00000000000dcb5d
uuid_00000000000dcb5b:
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcb2e
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -984(%RBP)
	popq -976(%RBP)
	popq -968(%RBP)
	jmp uuid_00000000000dcb30
uuid_00000000000dcb2e:
uuid_00000000000dcb30:
	mov -992(%RBP),%RSP
	add $-992, %RSP
	push %RBP
#call function is-special : Arrow<Cons<String,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	mov %RBX, %RBP
	call is_SB_special_CL_ArrowU64ConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcb58
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq $uuid_00000000000db622
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcb55
	jmp uuid_00000000000dcb57
uuid_00000000000dcb55:
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	push %RBP
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq $0
	push %RBP
	mov -1160(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb43
	jmp uuid_00000000000dcb45
uuid_00000000000dcb43:
	push %RBP
	mov -1152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1256(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb3a
	jmp uuid_00000000000dcb3c
uuid_00000000000dcb3a:
	push %RBP
	jmp uuid_00000000000dcb37
	jmp uuid_00000000000dcb39
uuid_00000000000dcb37:
	push %RBP
	jmp uuid_00000000000dcb34
	jmp uuid_00000000000dcb36
uuid_00000000000dcb34:
	push %RBP
	jmp uuid_00000000000dcb31
	jmp uuid_00000000000dcb33
uuid_00000000000dcb31:
	movb $1, -1264(%rbp)
uuid_00000000000dcb33:
	mov -1296(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000dcb36:
	mov -1288(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000dcb39:
	mov -1280(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000dcb3c:
	mov -1272(%RBP),%RSP
	add $-1296, %RSP
	mov -1264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb40
	jmp uuid_00000000000dcb42
uuid_00000000000dcb40:
	push %RBP
	jmp uuid_00000000000dcb3d
	jmp uuid_00000000000dcb3f
uuid_00000000000dcb3d:
	movb $1, -1168(%rbp)
uuid_00000000000dcb3f:
	mov -1304(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000dcb42:
	mov -1184(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000dcb45:
	mov -1176(%RBP),%RSP
	add $-1304, %RSP
	mov -1168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb52
	push %RBP
	jmp uuid_00000000000dcb4f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dcb4e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcb51
uuid_00000000000dcb4f:
uuid_00000000000dcb51:
	mov -1312(%RBP),%RSP
	add $-1312, %RSP
	jmp uuid_00000000000dcb54
uuid_00000000000dcb52:
#call function cons : Arrow<Cons<StackToSpecialize,List<StackToSpecialize>>,List<StackToSpecialize>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq $0
	mov $stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecialize, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call cons_CL_ArrowListStackToSpecializeConsListStackToSpecializeStackToSpecialize
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecialize, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
uuid_00000000000dcb54:
	mov -1088(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000dcb57:
	mov -1008(%RBP),%RSP
	add $-1304, %RSP
	jmp uuid_00000000000dcb5a
uuid_00000000000dcb58:
uuid_00000000000dcb5a:
	mov -1000(%RBP),%RSP
	add $-1000, %RSP
uuid_00000000000dcb5d:
	mov -960(%RBP),%RSP
	add $-1000, %RSP
	movq -952(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -944(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -936(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -928(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -920(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -912(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -904(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -896(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -888(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -880(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -872(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -864(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -856(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -848(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -840(%rbp), %r15
	movq %r15, -192(%rbp)
uuid_00000000000dcb61:
	mov -560(%RBP),%RSP
	add $-1000, %RSP
	jmp uuid_00000000000dcb64
uuid_00000000000dcb62:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000dcb64:
	mov -432(%RBP),%RSP
	add $-552, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000dcb65
uuid_00000000000dcb67:
	mov %rbp, %rsp
	sub $184, %rsp
	ret
unify_SB_hint_CL_ArrowTypeConsTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb80
	jmp uuid_00000000000dcb82
uuid_00000000000dcb80:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb6e
	jmp uuid_00000000000dcb70
uuid_00000000000dcb6e:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcb6b
	jmp uuid_00000000000dcb6d
uuid_00000000000dcb6b:
	push %RBP
	mov -208(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcb68
	jmp uuid_00000000000dcb6a
uuid_00000000000dcb68:
	movb $1, -232(%rbp)
uuid_00000000000dcb6a:
	mov -296(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000dcb6d:
	mov -248(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000dcb70:
	mov -240(%RBP),%RSP
	add $-304, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb7d
	jmp uuid_00000000000dcb7f
uuid_00000000000dcb7d:
	push %RBP
	pushq -128(%RBP)
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq $0
	push %RBP
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb77
	jmp uuid_00000000000dcb79
uuid_00000000000dcb77:
	push %RBP
	mov -328(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcb74
	jmp uuid_00000000000dcb76
uuid_00000000000dcb74:
	push %RBP
	mov -320(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcb71
	jmp uuid_00000000000dcb73
uuid_00000000000dcb71:
	movb $1, -344(%rbp)
uuid_00000000000dcb73:
	mov -408(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dcb76:
	mov -360(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dcb79:
	mov -352(%RBP),%RSP
	add $-416, %RSP
	mov -344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb7a
	jmp uuid_00000000000dcb7c
uuid_00000000000dcb7a:
	movb $1, -184(%rbp)
uuid_00000000000dcb7c:
	mov -312(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dcb7f:
	mov -200(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dcb82:
	mov -192(%RBP),%RSP
	add $-416, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb9f
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	push %RBP
	mov -480(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb95
	jmp uuid_00000000000dcb97
uuid_00000000000dcb95:
	push %RBP
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq $0
	push %RBP
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb8c
	jmp uuid_00000000000dcb8e
uuid_00000000000dcb8c:
	push %RBP
	mov -520(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcb89
	jmp uuid_00000000000dcb8b
uuid_00000000000dcb89:
	push %RBP
	mov -512(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcb86
	jmp uuid_00000000000dcb88
uuid_00000000000dcb86:
	movb $1, -536(%rbp)
uuid_00000000000dcb88:
	mov -584(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000dcb8b:
	mov -552(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000dcb8e:
	mov -544(%RBP),%RSP
	add $-608, %RSP
	mov -536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb92
	jmp uuid_00000000000dcb94
uuid_00000000000dcb92:
	push %RBP
	jmp uuid_00000000000dcb8f
	jmp uuid_00000000000dcb91
uuid_00000000000dcb8f:
	movb $1, -488(%rbp)
uuid_00000000000dcb91:
	mov -616(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000dcb94:
	mov -504(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000dcb97:
	mov -496(%RBP),%RSP
	add $-616, %RSP
	mov -488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb9c
	push %RBP
	jmp uuid_00000000000dcb99
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dcb98
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcb9b
uuid_00000000000dcb99:
uuid_00000000000dcb9b:
	mov -624(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000dcb9e
uuid_00000000000dcb9c:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-hint : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	mov %RBX, %RBP
	call unify_SB_hint_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-hint : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	mov %RBX, %RBP
	call unify_SB_hint_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
uuid_00000000000dcb9e:
	mov -424(%RBP),%RSP
	add $-616, %RSP
	jmp uuid_00000000000dcba1
uuid_00000000000dcb9f:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -416(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcb83
	pushq -304(%rbp)
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-hint : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call unify_SB_hint_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	jmp uuid_00000000000dcb85
uuid_00000000000dcb83:
	movq -24(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -32(%rbp)
uuid_00000000000dcb85:
	mov -424(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000dcba1:
	mov -120(%RBP),%RSP
	add $-424, %RSP
	subq $24, %rsp
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
unify_SB_hint_CL_ArrowListTypeConsListTypeType:
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcbb6
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcbac
	jmp uuid_00000000000dcbae
uuid_00000000000dcbac:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcba9
	jmp uuid_00000000000dcbab
uuid_00000000000dcba9:
	push %RBP
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	jmp uuid_00000000000dcba6
	jmp uuid_00000000000dcba8
uuid_00000000000dcba6:
	movb $1, -216(%rbp)
uuid_00000000000dcba8:
	mov -280(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000dcbab:
	mov -232(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000dcbae:
	mov -224(%RBP),%RSP
	add $-304, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcbb3
	push %RBP
	jmp uuid_00000000000dcbb0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dcbaf
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcbb2
uuid_00000000000dcbb0:
uuid_00000000000dcbb2:
	mov -312(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000dcbb5
uuid_00000000000dcbb3:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-hint : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call unify_SB_hint_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function unify-hint : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call unify_SB_hint_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
uuid_00000000000dcbb5:
	mov -168(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000dcbb8
uuid_00000000000dcbb6:
uuid_00000000000dcbb8:
	mov -120(%RBP),%RSP
	add $-160, %RSP
	subq $40, %rsp
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $72, %rsp
	ret
infer_SB_type_SB_definition_CL_ArrowU64ConsU64ConsASTType:
#call function mark-class-exists : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function tag-of : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call tag_SB_of_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call mark_SB_class_SB_exists_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function mark-is-lm-struct : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function tag-of : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call tag_SB_of_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call mark_SB_is_SB_lm_SB_struct_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcbd2
	jmp uuid_00000000000dcbd4
uuid_00000000000dcbd2:
	push %RBP
	mov -264(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcbcf
	jmp uuid_00000000000dcbd1
uuid_00000000000dcbcf:
	push %RBP
	mov -256(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcbc9
	jmp uuid_00000000000dcbcb
uuid_00000000000dcbc9:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcbc0
	jmp uuid_00000000000dcbc2
uuid_00000000000dcbc0:
	push %RBP
	jmp uuid_00000000000dcbbd
	jmp uuid_00000000000dcbbf
uuid_00000000000dcbbd:
	push %RBP
	mov -480(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -584(%rbp)
	pushq $uuid_00000000000dcbb9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcbba
	jmp uuid_00000000000dcbbc
uuid_00000000000dcbba:
	movb $1, -552(%rbp)
uuid_00000000000dcbbc:
	mov -576(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000dcbbf:
	mov -568(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000dcbc2:
	mov -560(%RBP),%RSP
	add $-584, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcbc6
	jmp uuid_00000000000dcbc8
uuid_00000000000dcbc6:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcbc3
	jmp uuid_00000000000dcbc5
uuid_00000000000dcbc3:
	movb $1, -456(%rbp)
uuid_00000000000dcbc5:
	mov -592(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000dcbc8:
	mov -472(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000dcbcb:
	mov -464(%RBP),%RSP
	add $-664, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcbcc
	jmp uuid_00000000000dcbce
uuid_00000000000dcbcc:
	movb $1, -280(%rbp)
uuid_00000000000dcbce:
	mov -376(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000dcbd1:
	mov -296(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000dcbd4:
	mov -288(%RBP),%RSP
	add $-664, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc11
	push %RBP
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	jmp uuid_00000000000dcc0e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dcc0d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcc10
uuid_00000000000dcc0e:
#call function infer-type-constructor : Arrow<Cons<Type,AST>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call infer_SB_type_SB_constructor_CL_ArrowU64ConsASTType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -120(%rbp)
	push %RBP
	mov -104(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc0a
	jmp uuid_00000000000dcc0c
uuid_00000000000dcc0a:
	pushq $uuid_00000000000daee6
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	push %RBP
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq $0
	push %RBP
	mov -912(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcbdb
	jmp uuid_00000000000dcbdd
uuid_00000000000dcbdb:
	push %RBP
	jmp uuid_00000000000dcbd8
	jmp uuid_00000000000dcbda
uuid_00000000000dcbd8:
	push %RBP
	mov -848(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcbd5
	jmp uuid_00000000000dcbd7
uuid_00000000000dcbd5:
	movb $1, -920(%rbp)
uuid_00000000000dcbd7:
	mov -944(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000dcbda:
	mov -936(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000dcbdd:
	mov -928(%RBP),%RSP
	add $-952, %RSP
	mov -920(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcbf7
	push %RBP
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq $0
	push %RBP
	mov -1032(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcbed
	jmp uuid_00000000000dcbef
uuid_00000000000dcbed:
	push %RBP
	mov -1024(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcbea
	jmp uuid_00000000000dcbec
uuid_00000000000dcbea:
	push %RBP
	mov -1016(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1208(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcbe4
	jmp uuid_00000000000dcbe6
uuid_00000000000dcbe4:
	push %RBP
	jmp uuid_00000000000dcbe1
	jmp uuid_00000000000dcbe3
uuid_00000000000dcbe1:
	push %RBP
	mov -1144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcbde
	jmp uuid_00000000000dcbe0
uuid_00000000000dcbde:
	movb $1, -1216(%rbp)
uuid_00000000000dcbe0:
	mov -1240(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000dcbe3:
	mov -1232(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000dcbe6:
	mov -1224(%RBP),%RSP
	add $-1248, %RSP
	mov -1216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcbe7
	jmp uuid_00000000000dcbe9
uuid_00000000000dcbe7:
	movb $1, -1040(%rbp)
uuid_00000000000dcbe9:
	mov -1136(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000dcbec:
	mov -1056(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000dcbef:
	mov -1048(%RBP),%RSP
	add $-1248, %RSP
	mov -1040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcbf4
	push %RBP
	jmp uuid_00000000000dcbf1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dcbf0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcbf3
uuid_00000000000dcbf1:
uuid_00000000000dcbf3:
	mov -1256(%RBP),%RSP
	add $-1256, %RSP
	jmp uuid_00000000000dcbf6
uuid_00000000000dcbf4:
	movq -1248(%rbp), %r15
	movq %r15, -760(%rbp)
	mov -1248(%rbp), %r15
	mov %r15, -760(%rbp)
uuid_00000000000dcbf6:
	mov -960(%RBP),%RSP
	add $-1248, %RSP
	jmp uuid_00000000000dcbf9
uuid_00000000000dcbf7:
	movq -952(%rbp), %r15
	movq %r15, -760(%rbp)
	mov -952(%rbp), %r15
	mov %r15, -760(%rbp)
uuid_00000000000dcbf9:
	mov -840(%RBP),%RSP
	add $-952, %RSP
	push %RBP
	mov -760(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000dcc07
	jmp uuid_00000000000dcc09
uuid_00000000000dcc07:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq $0
	push %RBP
	mov -1016(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc00
	jmp uuid_00000000000dcc02
uuid_00000000000dcc00:
	push %RBP
	jmp uuid_00000000000dcbfd
	jmp uuid_00000000000dcbff
uuid_00000000000dcbfd:
	push %RBP
	mov -1000(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcbfa
	jmp uuid_00000000000dcbfc
uuid_00000000000dcbfa:
	movb $1, -1024(%rbp)
uuid_00000000000dcbfc:
	mov -1048(%RBP),%RSP
	add $-1056, %RSP
uuid_00000000000dcbff:
	mov -1040(%RBP),%RSP
	add $-1056, %RSP
uuid_00000000000dcc02:
	mov -1032(%RBP),%RSP
	add $-1056, %RSP
	mov -1024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc04
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dcc03
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcc06
uuid_00000000000dcc04:
#call function has-only-child : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1056(%rbp)
	pushq -760(%rbp)
	mov %RBX, %RBP
	call has_SB_only_SB_child_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dcc06:
	mov -992(%RBP),%RSP
	add $-1056, %RSP
uuid_00000000000dcc09:
	mov -960(%RBP),%RSP
	add $-1056, %RSP
uuid_00000000000dcc0c:
	mov -752(%RBP),%RSP
	add $-1056, %RSP
uuid_00000000000dcc10:
	mov -672(%RBP),%RSP
	add $-1056, %RSP
	jmp uuid_00000000000dcc13
uuid_00000000000dcc11:
#call function infer-type-definition : Arrow<Cons<Cons<Type,AST>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov -104(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call infer_SB_type_SB_definition_CL_ArrowU64ConsU64ConsASTType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function infer-type-constructor : Arrow<Cons<Type,AST>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call infer_SB_type_SB_constructor_CL_ArrowU64ConsASTType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq -680(%rbp)
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -120(%rbp)
uuid_00000000000dcc13:
	mov -200(%RBP),%RSP
	add $-680, %RSP
	mov -120(%rbp), %RAX
	mov %rbp, %rsp
	sub $112, %rsp
	ret
arity_CL_ArrowU64ListType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc25
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc1e
	jmp uuid_00000000000dcc20
uuid_00000000000dcc1e:
	push %RBP
	mov -184(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcc1b
	jmp uuid_00000000000dcc1d
uuid_00000000000dcc1b:
	push %RBP
	jmp uuid_00000000000dcc18
	jmp uuid_00000000000dcc1a
uuid_00000000000dcc18:
	movb $1, -200(%rbp)
uuid_00000000000dcc1a:
	mov -264(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dcc1d:
	mov -216(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dcc20:
	mov -208(%RBP),%RSP
	add $-264, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc22
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dcc21
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcc24
uuid_00000000000dcc22:
#call function arity : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call arity_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
uuid_00000000000dcc24:
	mov -152(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000dcc27
uuid_00000000000dcc25:
uuid_00000000000dcc27:
	mov -104(%RBP),%RSP
	add $-144, %RSP
	mov -56(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
arity_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc2e
	jmp uuid_00000000000dcc30
uuid_00000000000dcc2e:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcc2b
	jmp uuid_00000000000dcc2d
uuid_00000000000dcc2b:
	push %RBP
	jmp uuid_00000000000dcc28
	jmp uuid_00000000000dcc2a
uuid_00000000000dcc28:
	movb $1, -104(%rbp)
uuid_00000000000dcc2a:
	mov -168(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dcc2d:
	mov -120(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dcc30:
	mov -112(%RBP),%RSP
	add $-168, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc35
	push %RBP
	jmp uuid_00000000000dcc32
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dcc31
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcc34
uuid_00000000000dcc32:
uuid_00000000000dcc34:
	mov -176(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000dcc37
uuid_00000000000dcc35:
#call function arity : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call arity_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000dcc37:
	mov -72(%RBP),%RSP
	add $-168, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
cons_SB_arity_CL_ArrowU64Type:
	pushq $1
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc50
	jmp uuid_00000000000dcc52
uuid_00000000000dcc50:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc47
	jmp uuid_00000000000dcc49
uuid_00000000000dcc47:
	push %RBP
	mov -152(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc3e
	jmp uuid_00000000000dcc40
uuid_00000000000dcc3e:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -288(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc3b
	jmp uuid_00000000000dcc3d
uuid_00000000000dcc3b:
	push %RBP
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	jmp uuid_00000000000dcc38
	jmp uuid_00000000000dcc3a
uuid_00000000000dcc38:
	movb $1, -232(%rbp)
uuid_00000000000dcc3a:
	mov -296(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000dcc3d:
	mov -248(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000dcc40:
	mov -240(%RBP),%RSP
	add $-320, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc44
	jmp uuid_00000000000dcc46
uuid_00000000000dcc44:
	push %RBP
	pushq -128(%RBP)
	pushq -136(%RBP)
	pushq -144(%RBP)
	jmp uuid_00000000000dcc41
	jmp uuid_00000000000dcc43
uuid_00000000000dcc41:
	movb $1, -168(%rbp)
uuid_00000000000dcc43:
	mov -328(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000dcc46:
	mov -184(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000dcc49:
	mov -176(%RBP),%RSP
	add $-352, %RSP
	mov -168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc4d
	jmp uuid_00000000000dcc4f
uuid_00000000000dcc4d:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -368(%rbp)
	pushq $uuid_00000000000db3a7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcc4a
	jmp uuid_00000000000dcc4c
uuid_00000000000dcc4a:
	movb $1, -104(%rbp)
uuid_00000000000dcc4c:
	mov -360(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dcc4f:
	mov -120(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dcc52:
	mov -112(%RBP),%RSP
	add $-368, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc57
	push %RBP
	jmp uuid_00000000000dcc54
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dcc53
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcc56
uuid_00000000000dcc54:
uuid_00000000000dcc56:
	mov -376(%RBP),%RSP
	add $-376, %RSP
	jmp uuid_00000000000dcc59
uuid_00000000000dcc57:
#call function cons-arity : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call cons_SB_arity_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dcc59:
	mov -72(%RBP),%RSP
	add $-368, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
parse_SB_field_SB_of_CL_ArrowTupleTypeStringString:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $uuid_00000000000daee6
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000dcc5d:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	setne %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc5e
	jmp uuid_00000000000dcc5f
uuid_00000000000dcc5e:
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc5a
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000dcc5c
uuid_00000000000dcc5a:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -48(%rbp)
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	inc %RAX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	movq $uuid_00000000000daee6, -8(%rbp)
uuid_00000000000dcc5c:
	mov -80(%RBP),%RSP
	add $-80, %RSP
	add $8, %RSP
	jmp uuid_00000000000dcc5d
uuid_00000000000dcc5f:
	pushq -48(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	subq $40, %rsp
	pushq 40(%rsp)
	pushq 56(%rsp)
	pushq 72(%rsp)
	pushq 88(%rsp)
	pushq 104(%rsp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
implicit_SB_tail_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc78
	jmp uuid_00000000000dcc7a
uuid_00000000000dcc78:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -152(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc6f
	jmp uuid_00000000000dcc71
uuid_00000000000dcc6f:
	push %RBP
	mov -144(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -216(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc66
	jmp uuid_00000000000dcc68
uuid_00000000000dcc66:
	push %RBP
	mov -208(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc63
	jmp uuid_00000000000dcc65
uuid_00000000000dcc63:
	push %RBP
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	jmp uuid_00000000000dcc60
	jmp uuid_00000000000dcc62
uuid_00000000000dcc60:
	movb $1, -224(%rbp)
uuid_00000000000dcc62:
	mov -288(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000dcc65:
	mov -240(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000dcc68:
	mov -232(%RBP),%RSP
	add $-312, %RSP
	mov -224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc6c
	jmp uuid_00000000000dcc6e
uuid_00000000000dcc6c:
	push %RBP
	pushq -120(%RBP)
	pushq -128(%RBP)
	pushq -136(%RBP)
	jmp uuid_00000000000dcc69
	jmp uuid_00000000000dcc6b
uuid_00000000000dcc69:
	movb $1, -160(%rbp)
uuid_00000000000dcc6b:
	mov -320(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000dcc6e:
	mov -176(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000dcc71:
	mov -168(%RBP),%RSP
	add $-344, %RSP
	mov -160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc75
	jmp uuid_00000000000dcc77
uuid_00000000000dcc75:
	push %RBP
	mov -72(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq $uuid_00000000000db3a7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcc72
	jmp uuid_00000000000dcc74
uuid_00000000000dcc72:
	movb $1, -96(%rbp)
uuid_00000000000dcc74:
	mov -352(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000dcc77:
	mov -112(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000dcc7a:
	mov -104(%RBP),%RSP
	add $-360, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc7f
	push %RBP
	jmp uuid_00000000000dcc7c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dcc7b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcc7e
uuid_00000000000dcc7c:
uuid_00000000000dcc7e:
	mov -368(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000dcc81
uuid_00000000000dcc7f:
	movq -344(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dcc81:
	mov -64(%RBP),%RSP
	add $-360, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
typeof_SB_var_CL_ArrowTypeConsStringConsTContextAST:
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcc83
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dcc82
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcc85
uuid_00000000000dcc83:
uuid_00000000000dcc85:
	mov -240(%RBP),%RSP
	add $-240, %RSP
	subq $24, %rsp
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $208, %rsp
	ret
typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST:
#call function find-alias-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	mov %RBX, %RBP
	call find_SB_alias_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
uuid_00000000000dcca8:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcca9
	jmp uuid_00000000000dccaa
uuid_00000000000dcca9:
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	mov -480(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcca5
	push %RBP
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq $0
	push %RBP
	mov -608(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc92
	jmp uuid_00000000000dcc94
uuid_00000000000dcc92:
	push %RBP
	jmp uuid_00000000000dcc8f
	jmp uuid_00000000000dcc91
uuid_00000000000dcc8f:
	push %RBP
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	jmp uuid_00000000000dcc8c
	jmp uuid_00000000000dcc8e
uuid_00000000000dcc8c:
	push %RBP
	mov -504(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcc89
	jmp uuid_00000000000dcc8b
uuid_00000000000dcc89:
	push %RBP
	mov -496(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcc86
	jmp uuid_00000000000dcc88
uuid_00000000000dcc86:
	movb $1, -616(%rbp)
uuid_00000000000dcc88:
	mov -688(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000dcc8b:
	mov -672(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000dcc8e:
	mov -640(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000dcc91:
	mov -632(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000dcc94:
	mov -624(%RBP),%RSP
	add $-808, %RSP
	mov -616(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcca2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dcca1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcca4
uuid_00000000000dcca2:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcc9e
	movq -808(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -800(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -792(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -784(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -776(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -768(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -696(%rbp), %r15
	movq %r15, -80(%rbp)
	jmp uuid_00000000000dcca0
uuid_00000000000dcc9e:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcc98
	movq -664(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -656(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -648(%rbp), %r15
	movq %r15, -216(%rbp)
	jmp uuid_00000000000dcc9a
uuid_00000000000dcc98:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcc95
	movq -664(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -656(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -648(%rbp), %r15
	movq %r15, -216(%rbp)
	jmp uuid_00000000000dcc97
uuid_00000000000dcc95:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
uuid_00000000000dcc97:
	mov -832(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000dcc9a:
	mov -824(%RBP),%RSP
	add $-832, %RSP
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcc9b
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	jmp uuid_00000000000dcc9d
uuid_00000000000dcc9b:
	movq -808(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -800(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -792(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -784(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -776(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -768(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -696(%rbp), %r15
	movq %r15, -80(%rbp)
uuid_00000000000dcc9d:
	mov -840(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000dcca0:
	mov -816(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000dcca4:
	mov -488(%RBP),%RSP
	add $-840, %RSP
	jmp uuid_00000000000dcca7
uuid_00000000000dcca5:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
uuid_00000000000dcca7:
	mov -360(%RBP),%RSP
	add $-480, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000dcca8
uuid_00000000000dccaa:
	subq $24, %rsp
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $208, %rsp
	ret
typecheck_CL_ArrowNilNil:
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
uuid_00000000000dccb8:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dccb9
	jmp uuid_00000000000dccba
uuid_00000000000dccb9:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dccb1
	jmp uuid_00000000000dccb3
uuid_00000000000dccb1:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dccae
	jmp uuid_00000000000dccb0
uuid_00000000000dccae:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dccab
	jmp uuid_00000000000dccad
uuid_00000000000dccab:
	movb $1, -312(%rbp)
uuid_00000000000dccad:
	mov -408(%RBP),%RSP
	add $-480, %RSP
uuid_00000000000dccb0:
	mov -328(%RBP),%RSP
	add $-480, %RSP
uuid_00000000000dccb3:
	mov -320(%RBP),%RSP
	add $-480, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dccb5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dccb4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dccb7
uuid_00000000000dccb5:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -480(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000dccb7:
	mov -232(%RBP),%RSP
	add $-480, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dccb8
uuid_00000000000dccba:
uuid_00000000000dccc8:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dccc9
	jmp uuid_00000000000dccca
uuid_00000000000dccc9:
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dccc1
	jmp uuid_00000000000dccc3
uuid_00000000000dccc1:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dccbe
	jmp uuid_00000000000dccc0
uuid_00000000000dccbe:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dccbb
	jmp uuid_00000000000dccbd
uuid_00000000000dccbb:
	movb $1, -312(%rbp)
uuid_00000000000dccbd:
	mov -408(%RBP),%RSP
	add $-480, %RSP
uuid_00000000000dccc0:
	mov -328(%RBP),%RSP
	add $-480, %RSP
uuid_00000000000dccc3:
	mov -320(%RBP),%RSP
	add $-480, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dccc5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dccc4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dccc7
uuid_00000000000dccc5:
#call function infer-global-context : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call infer_SB_global_SB_context_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -480(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000dccc7:
	mov -232(%RBP),%RSP
	add $-480, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dccc8
uuid_00000000000dccca:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_type_SB_context_CL_TContextTContext, %r15
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dccf7:
#call function non-zero : Arrow<List<StackToSpecialize>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecialize, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListStackToSpecialize
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dccf8
	jmp uuid_00000000000dccf9
uuid_00000000000dccf8:
	mov $stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecialize, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dccf0
	jmp uuid_00000000000dccf2
uuid_00000000000dccf0:
	push %RBP
	mov -552(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcced
	jmp uuid_00000000000dccef
uuid_00000000000dcced:
	push %RBP
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq $0
	push %RBP
	mov -976(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcce7
	jmp uuid_00000000000dcce9
uuid_00000000000dcce7:
	push %RBP
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	jmp uuid_00000000000dcce4
	jmp uuid_00000000000dcce6
uuid_00000000000dcce4:
	push %RBP
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	pushq -944(%RBP)
	jmp uuid_00000000000dcce1
	jmp uuid_00000000000dcce3
uuid_00000000000dcce1:
	push %RBP
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	jmp uuid_00000000000dccde
	jmp uuid_00000000000dcce0
uuid_00000000000dccde:
	push %RBP
	mov -800(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dccdb
	jmp uuid_00000000000dccdd
uuid_00000000000dccdb:
	movb $1, -984(%rbp)
uuid_00000000000dccdd:
	mov -1192(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000dcce0:
	mov -1160(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000dcce3:
	mov -1032(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000dcce6:
	mov -1000(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000dcce9:
	mov -992(%RBP),%RSP
	add $-1200, %RSP
	mov -984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dccea
	jmp uuid_00000000000dccec
uuid_00000000000dccea:
	movb $1, -568(%rbp)
uuid_00000000000dccec:
	mov -792(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000dccef:
	mov -584(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000dccf2:
	mov -576(%RBP),%RSP
	add $-1200, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dccf4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dccf3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dccf6
uuid_00000000000dccf4:
	mov $stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecialize, %r14
	movq -784(%rbp), %r15
	movq %r15, 0(%r14)
	movq -776(%rbp), %r15
	movq %r15, 8(%r14)
	movq -768(%rbp), %r15
	movq %r15, 16(%r14)
	movq -760(%rbp), %r15
	movq %r15, 24(%r14)
	movq -752(%rbp), %r15
	movq %r15, 32(%r14)
	movq -744(%rbp), %r15
	movq %r15, 40(%r14)
	movq -736(%rbp), %r15
	movq %r15, 48(%r14)
	movq -728(%rbp), %r15
	movq %r15, 56(%r14)
	movq -720(%rbp), %r15
	movq %r15, 64(%r14)
	movq -712(%rbp), %r15
	movq %r15, 72(%r14)
	movq -704(%rbp), %r15
	movq %r15, 80(%r14)
	movq -696(%rbp), %r15
	movq %r15, 88(%r14)
	movq -688(%rbp), %r15
	movq %r15, 96(%r14)
	movq -680(%rbp), %r15
	movq %r15, 104(%r14)
	movq -672(%rbp), %r15
	movq %r15, 112(%r14)
	movq -664(%rbp), %r15
	movq %r15, 120(%r14)
	movq -656(%rbp), %r15
	movq %r15, 128(%r14)
	movq -648(%rbp), %r15
	movq %r15, 136(%r14)
	movq -640(%rbp), %r15
	movq %r15, 144(%r14)
	movq -632(%rbp), %r15
	movq %r15, 152(%r14)
	movq -624(%rbp), %r15
	movq %r15, 160(%r14)
	movq -616(%rbp), %r15
	movq %r15, 168(%r14)
	movq -608(%rbp), %r15
	movq %r15, 176(%r14)
	movq -600(%rbp), %r15
	movq %r15, 184(%r14)
	movq -592(%rbp), %r15
	movq %r15, 192(%r14)
#call function specialize : Arrow<Cons<Cons<Cons<String,Type>,TContext>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1200(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov %RBX, %RBP
	call specialize_CL_ArrowNilConsTypeConsTContextConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dccf6:
	mov -360(%RBP),%RSP
	add $-1200, %RSP
	add $200, %rsp
	add $200, %rsp
	add $8, %rsp
	add $200, %rsp
	add $184, %rsp
	add $8, %rsp
	add $24, %rsp
	add $120, %rsp
	add $24, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dccf7
uuid_00000000000dccf9:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
substitute_CL_ArrowTokenConsTokenContext:
	mov -104(%RBP), %RAX
	push %RAX
uuid_00000000000dcd43:
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcd44
	jmp uuid_00000000000dcd45
uuid_00000000000dcd44:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov -368(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd40
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq $0
	push %RBP
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd0c
	jmp uuid_00000000000dcd0e
uuid_00000000000dcd0c:
	push %RBP
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq $0
	push %RBP
	mov -568(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd00
	jmp uuid_00000000000dcd02
uuid_00000000000dcd00:
	push %RBP
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	jmp uuid_00000000000dccfd
	jmp uuid_00000000000dccff
uuid_00000000000dccfd:
	push %RBP
	jmp uuid_00000000000dccfa
	jmp uuid_00000000000dccfc
uuid_00000000000dccfa:
	movb $1, -576(%rbp)
uuid_00000000000dccfc:
	mov -656(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000dccff:
	mov -592(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000dcd02:
	mov -584(%RBP),%RSP
	add $-656, %RSP
	mov -576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd09
	jmp uuid_00000000000dcd0b
uuid_00000000000dcd09:
	push %RBP
	mov -392(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcd06
	jmp uuid_00000000000dcd08
uuid_00000000000dcd06:
	push %RBP
	mov -384(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcd03
	jmp uuid_00000000000dcd05
uuid_00000000000dcd03:
	movb $1, -480(%rbp)
uuid_00000000000dcd05:
	mov -680(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000dcd08:
	mov -664(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000dcd0b:
	mov -496(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000dcd0e:
	mov -488(%RBP),%RSP
	add $-776, %RSP
	mov -480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd3d
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd24
	jmp uuid_00000000000dcd26
uuid_00000000000dcd24:
	push %RBP
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq $0
	push %RBP
	mov -976(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd18
	jmp uuid_00000000000dcd1a
uuid_00000000000dcd18:
	push %RBP
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	pushq -944(%RBP)
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	jmp uuid_00000000000dcd15
	jmp uuid_00000000000dcd17
uuid_00000000000dcd15:
	push %RBP
	jmp uuid_00000000000dcd12
	jmp uuid_00000000000dcd14
uuid_00000000000dcd12:
	movb $1, -984(%rbp)
uuid_00000000000dcd14:
	mov -1064(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000dcd17:
	mov -1000(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000dcd1a:
	mov -992(%RBP),%RSP
	add $-1064, %RSP
	mov -984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd21
	jmp uuid_00000000000dcd23
uuid_00000000000dcd21:
	push %RBP
	mov -800(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcd1e
	jmp uuid_00000000000dcd20
uuid_00000000000dcd1e:
	push %RBP
	mov -792(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcd1b
	jmp uuid_00000000000dcd1d
uuid_00000000000dcd1b:
	movb $1, -888(%rbp)
uuid_00000000000dcd1d:
	mov -1088(%RBP),%RSP
	add $-1184, %RSP
uuid_00000000000dcd20:
	mov -1072(%RBP),%RSP
	add $-1184, %RSP
uuid_00000000000dcd23:
	mov -904(%RBP),%RSP
	add $-1184, %RSP
uuid_00000000000dcd26:
	mov -896(%RBP),%RSP
	add $-1184, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd3a
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq $0
	push %RBP
	mov -1288(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd33
	jmp uuid_00000000000dcd35
uuid_00000000000dcd33:
	push %RBP
	pushq -1216(%RBP)
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	pushq -1256(%RBP)
	pushq -1264(%RBP)
	pushq -1272(%RBP)
	pushq -1280(%RBP)
	jmp uuid_00000000000dcd30
	jmp uuid_00000000000dcd32
uuid_00000000000dcd30:
	push %RBP
	mov -1208(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcd2d
	jmp uuid_00000000000dcd2f
uuid_00000000000dcd2d:
	push %RBP
	mov -1200(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcd2a
	jmp uuid_00000000000dcd2c
uuid_00000000000dcd2a:
	movb $1, -1296(%rbp)
uuid_00000000000dcd2c:
	mov -1408(%RBP),%RSP
	add $-1504, %RSP
uuid_00000000000dcd2f:
	mov -1392(%RBP),%RSP
	add $-1504, %RSP
uuid_00000000000dcd32:
	mov -1312(%RBP),%RSP
	add $-1504, %RSP
uuid_00000000000dcd35:
	mov -1304(%RBP),%RSP
	add $-1504, %RSP
	mov -1296(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd37
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dcd36
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcd39
uuid_00000000000dcd37:
	movq -1504(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dcd39:
	mov -1192(%RBP),%RSP
	add $-1504, %RSP
	jmp uuid_00000000000dcd3c
uuid_00000000000dcd3a:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcd27
	movq -1184(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dcd29
uuid_00000000000dcd27:
	movq -1056(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -104(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dcd29:
	mov -1192(%RBP),%RSP
	add $-1192, %RSP
uuid_00000000000dcd3c:
	mov -784(%RBP),%RSP
	add $-1192, %RSP
	jmp uuid_00000000000dcd3f
uuid_00000000000dcd3d:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcd0f
	movq -776(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -768(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -696(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -688(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dcd11
uuid_00000000000dcd0f:
	movq -648(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -640(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -632(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -624(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -616(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -608(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -600(%rbp), %r15
	movq %r15, -104(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dcd11:
	mov -784(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000dcd3f:
	mov -376(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000dcd42
uuid_00000000000dcd40:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dcd42:
	mov -272(%RBP),%RSP
	add $-368, %RSP
	add $96, %rsp
	add $96, %rsp
	add $8, %RSP
	jmp uuid_00000000000dcd43
uuid_00000000000dcd45:
	subq $56, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $160, %rsp
	ret
substitute_CL_ArrowListTypeConsListTypeTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd57
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd50
	jmp uuid_00000000000dcd52
uuid_00000000000dcd50:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcd4d
	jmp uuid_00000000000dcd4f
uuid_00000000000dcd4d:
	push %RBP
	pushq -272(%RBP)
	pushq -280(%RBP)
	pushq -288(%RBP)
	jmp uuid_00000000000dcd4a
	jmp uuid_00000000000dcd4c
uuid_00000000000dcd4a:
	movb $1, -312(%rbp)
uuid_00000000000dcd4c:
	mov -376(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000dcd4f:
	mov -328(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000dcd52:
	mov -320(%RBP),%RSP
	add $-400, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd54
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dcd53
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcd56
uuid_00000000000dcd54:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
#call function substitute : Arrow<Cons<TContext,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowListTypeConsListTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dcd56:
	mov -264(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000dcd59
uuid_00000000000dcd57:
uuid_00000000000dcd59:
	mov -216(%RBP),%RSP
	add $-256, %RSP
	subq $40, %rsp
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $168, %rsp
	ret
substitute_CL_ArrowTypeConsTypeTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd5d
	jmp uuid_00000000000dcd5f
uuid_00000000000dcd5d:
	push %RBP
	mov -200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcd5a
	jmp uuid_00000000000dcd5c
uuid_00000000000dcd5a:
	movb $1, -216(%rbp)
uuid_00000000000dcd5c:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000dcd5f:
	mov -224(%RBP),%RSP
	add $-240, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd98
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd82
	jmp uuid_00000000000dcd84
uuid_00000000000dcd82:
	push %RBP
	mov -264(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcd7f
	jmp uuid_00000000000dcd81
uuid_00000000000dcd7f:
	push %RBP
	mov -256(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcd7c
	jmp uuid_00000000000dcd7e
uuid_00000000000dcd7c:
	movb $1, -280(%rbp)
uuid_00000000000dcd7e:
	mov -344(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000dcd81:
	mov -296(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000dcd84:
	mov -288(%RBP),%RSP
	add $-352, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd95
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd8b
	jmp uuid_00000000000dcd8d
uuid_00000000000dcd8b:
	push %RBP
	mov -376(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcd88
	jmp uuid_00000000000dcd8a
uuid_00000000000dcd88:
	push %RBP
	mov -368(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcd85
	jmp uuid_00000000000dcd87
uuid_00000000000dcd85:
	movb $1, -392(%rbp)
uuid_00000000000dcd87:
	mov -440(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000dcd8a:
	mov -408(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000dcd8d:
	mov -400(%RBP),%RSP
	add $-464, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd92
	push %RBP
	jmp uuid_00000000000dcd8f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dcd8e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcd91
uuid_00000000000dcd8f:
uuid_00000000000dcd91:
	mov -472(%RBP),%RSP
	add $-472, %RSP
	jmp uuid_00000000000dcd94
uuid_00000000000dcd92:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dcd94:
	mov -360(%RBP),%RSP
	add $-464, %RSP
	jmp uuid_00000000000dcd97
uuid_00000000000dcd95:
	pushq -352(%rbp)
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowListTypeConsListTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dcd97:
	mov -248(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000dcd9a
uuid_00000000000dcd98:
uuid_00000000000dcd79:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcd7a
	jmp uuid_00000000000dcd7b
uuid_00000000000dcd7a:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd76
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd6c
	jmp uuid_00000000000dcd6e
uuid_00000000000dcd6c:
	push %RBP
	jmp uuid_00000000000dcd69
	jmp uuid_00000000000dcd6b
uuid_00000000000dcd69:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000dcd66
	jmp uuid_00000000000dcd68
uuid_00000000000dcd66:
	push %RBP
	mov -512(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcd63
	jmp uuid_00000000000dcd65
uuid_00000000000dcd63:
	push %RBP
	mov -504(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcd60
	jmp uuid_00000000000dcd62
uuid_00000000000dcd60:
	movb $1, -624(%rbp)
uuid_00000000000dcd62:
	mov -696(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000dcd65:
	mov -680(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000dcd68:
	mov -648(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000dcd6b:
	mov -640(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000dcd6e:
	mov -632(%RBP),%RSP
	add $-816, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd73
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dcd72
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcd75
uuid_00000000000dcd73:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcd6f
	movq -816(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -808(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -800(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -792(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -784(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -776(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -768(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dcd71
uuid_00000000000dcd6f:
	movq -672(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -664(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -656(%rbp), %r15
	movq %r15, -128(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dcd71:
	mov -824(%RBP),%RSP
	add $-824, %RSP
uuid_00000000000dcd75:
	mov -496(%RBP),%RSP
	add $-824, %RSP
	jmp uuid_00000000000dcd78
uuid_00000000000dcd76:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dcd78:
	mov -368(%RBP),%RSP
	add $-488, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000dcd79
uuid_00000000000dcd7b:
uuid_00000000000dcd9a:
	mov -184(%RBP),%RSP
	add $-240, %RSP
	subq $24, %rsp
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $152, %rsp
	ret
substitute_CL_ArrowListTypeConsListTypeContext:
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	push %RBP
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcdac
	push %RBP
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcda5
	jmp uuid_00000000000dcda7
uuid_00000000000dcda5:
	push %RBP
	mov -272(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcda2
	jmp uuid_00000000000dcda4
uuid_00000000000dcda2:
	push %RBP
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	jmp uuid_00000000000dcd9f
	jmp uuid_00000000000dcda1
uuid_00000000000dcd9f:
	movb $1, -288(%rbp)
uuid_00000000000dcda1:
	mov -352(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000dcda4:
	mov -304(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000dcda7:
	mov -296(%RBP),%RSP
	add $-376, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcda9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dcda8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcdab
uuid_00000000000dcda9:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<Context,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
#call function substitute : Arrow<Cons<Context,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowListTypeConsListTypeContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
uuid_00000000000dcdab:
	mov -240(%RBP),%RSP
	add $-376, %RSP
	jmp uuid_00000000000dcdae
uuid_00000000000dcdac:
uuid_00000000000dcdae:
	mov -192(%RBP),%RSP
	add $-232, %RSP
	subq $40, %rsp
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $144, %rsp
	ret
substitute_CL_ArrowTypeConsTypeContext:
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcdb2
	jmp uuid_00000000000dcdb4
uuid_00000000000dcdb2:
	push %RBP
	mov -176(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcdaf
	jmp uuid_00000000000dcdb1
uuid_00000000000dcdaf:
	movb $1, -192(%rbp)
uuid_00000000000dcdb1:
	mov -208(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000dcdb4:
	mov -200(%RBP),%RSP
	add $-216, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dce1d
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce07
	jmp uuid_00000000000dce09
uuid_00000000000dce07:
	push %RBP
	mov -240(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dce04
	jmp uuid_00000000000dce06
uuid_00000000000dce04:
	push %RBP
	mov -232(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dce01
	jmp uuid_00000000000dce03
uuid_00000000000dce01:
	movb $1, -256(%rbp)
uuid_00000000000dce03:
	mov -320(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000dce06:
	mov -272(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000dce09:
	mov -264(%RBP),%RSP
	add $-328, %RSP
	mov -256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dce1a
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -360(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce10
	jmp uuid_00000000000dce12
uuid_00000000000dce10:
	push %RBP
	mov -352(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dce0d
	jmp uuid_00000000000dce0f
uuid_00000000000dce0d:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dce0a
	jmp uuid_00000000000dce0c
uuid_00000000000dce0a:
	movb $1, -368(%rbp)
uuid_00000000000dce0c:
	mov -416(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000dce0f:
	mov -384(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000dce12:
	mov -376(%RBP),%RSP
	add $-440, %RSP
	mov -368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dce17
	push %RBP
	jmp uuid_00000000000dce14
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dce13
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dce16
uuid_00000000000dce14:
uuid_00000000000dce16:
	mov -448(%RBP),%RSP
	add $-448, %RSP
	jmp uuid_00000000000dce19
uuid_00000000000dce17:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<Context,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<Context,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
uuid_00000000000dce19:
	mov -336(%RBP),%RSP
	add $-440, %RSP
	jmp uuid_00000000000dce1c
uuid_00000000000dce1a:
	pushq -328(%rbp)
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<Context,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowListTypeConsListTypeContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
uuid_00000000000dce1c:
	mov -224(%RBP),%RSP
	add $-328, %RSP
	jmp uuid_00000000000dce1f
uuid_00000000000dce1d:
uuid_00000000000dcdfe:
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcdff
	jmp uuid_00000000000dce00
uuid_00000000000dcdff:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcdfb
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -520(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcdc7
	jmp uuid_00000000000dcdc9
uuid_00000000000dcdc7:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcdbb
	jmp uuid_00000000000dcdbd
uuid_00000000000dcdbb:
	push %RBP
	jmp uuid_00000000000dcdb8
	jmp uuid_00000000000dcdba
uuid_00000000000dcdb8:
	push %RBP
	mov -552(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcdb5
	jmp uuid_00000000000dcdb7
uuid_00000000000dcdb5:
	movb $1, -624(%rbp)
uuid_00000000000dcdb7:
	mov -648(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000dcdba:
	mov -640(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000dcdbd:
	mov -632(%RBP),%RSP
	add $-656, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcdc4
	jmp uuid_00000000000dcdc6
uuid_00000000000dcdc4:
	push %RBP
	mov -440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcdc1
	jmp uuid_00000000000dcdc3
uuid_00000000000dcdc1:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcdbe
	jmp uuid_00000000000dcdc0
uuid_00000000000dcdbe:
	movb $1, -528(%rbp)
uuid_00000000000dcdc0:
	mov -680(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000dcdc3:
	mov -664(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000dcdc6:
	mov -544(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000dcdc9:
	mov -536(%RBP),%RSP
	add $-776, %RSP
	mov -528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcdf8
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcddf
	jmp uuid_00000000000dcde1
uuid_00000000000dcddf:
	push %RBP
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq $0
	push %RBP
	mov -976(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcdd3
	jmp uuid_00000000000dcdd5
uuid_00000000000dcdd3:
	push %RBP
	jmp uuid_00000000000dcdd0
	jmp uuid_00000000000dcdd2
uuid_00000000000dcdd0:
	push %RBP
	mov -912(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcdcd
	jmp uuid_00000000000dcdcf
uuid_00000000000dcdcd:
	movb $1, -984(%rbp)
uuid_00000000000dcdcf:
	mov -1008(%RBP),%RSP
	add $-1016, %RSP
uuid_00000000000dcdd2:
	mov -1000(%RBP),%RSP
	add $-1016, %RSP
uuid_00000000000dcdd5:
	mov -992(%RBP),%RSP
	add $-1016, %RSP
	mov -984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcddc
	jmp uuid_00000000000dcdde
uuid_00000000000dcddc:
	push %RBP
	mov -800(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcdd9
	jmp uuid_00000000000dcddb
uuid_00000000000dcdd9:
	push %RBP
	mov -792(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcdd6
	jmp uuid_00000000000dcdd8
uuid_00000000000dcdd6:
	movb $1, -888(%rbp)
uuid_00000000000dcdd8:
	mov -1040(%RBP),%RSP
	add $-1136, %RSP
uuid_00000000000dcddb:
	mov -1024(%RBP),%RSP
	add $-1136, %RSP
uuid_00000000000dcdde:
	mov -904(%RBP),%RSP
	add $-1136, %RSP
uuid_00000000000dcde1:
	mov -896(%RBP),%RSP
	add $-1136, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcdf5
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -1240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcdee
	jmp uuid_00000000000dcdf0
uuid_00000000000dcdee:
	push %RBP
	pushq -1168(%RBP)
	pushq -1176(%RBP)
	pushq -1184(%RBP)
	pushq -1192(%RBP)
	pushq -1200(%RBP)
	pushq -1208(%RBP)
	pushq -1216(%RBP)
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	jmp uuid_00000000000dcdeb
	jmp uuid_00000000000dcded
uuid_00000000000dcdeb:
	push %RBP
	mov -1160(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcde8
	jmp uuid_00000000000dcdea
uuid_00000000000dcde8:
	push %RBP
	mov -1152(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcde5
	jmp uuid_00000000000dcde7
uuid_00000000000dcde5:
	movb $1, -1248(%rbp)
uuid_00000000000dcde7:
	mov -1360(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000dcdea:
	mov -1344(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000dcded:
	mov -1264(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000dcdf0:
	mov -1256(%RBP),%RSP
	add $-1456, %RSP
	mov -1248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcdf2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dcdf1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcdf4
uuid_00000000000dcdf2:
	movq -1456(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1408(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1400(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1392(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1384(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1376(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dcdf4:
	mov -1144(%RBP),%RSP
	add $-1456, %RSP
	jmp uuid_00000000000dcdf7
uuid_00000000000dcdf5:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1032(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcde2
	movq -1136(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dcde4
uuid_00000000000dcde2:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1016(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dcde4:
	mov -1144(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000dcdf7:
	mov -784(%RBP),%RSP
	add $-1144, %RSP
	jmp uuid_00000000000dcdfa
uuid_00000000000dcdf8:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcdca
	movq -776(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -768(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -696(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -688(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dcdcc
uuid_00000000000dcdca:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dcdcc:
	mov -784(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000dcdfa:
	mov -424(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000dcdfd
uuid_00000000000dcdfb:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dcdfd:
	mov -320(%RBP),%RSP
	add $-416, %RSP
	add $96, %rsp
	add $96, %rsp
	add $8, %RSP
	jmp uuid_00000000000dcdfe
uuid_00000000000dce00:
uuid_00000000000dce1f:
	mov -160(%RBP),%RSP
	add $-216, %RSP
	subq $24, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $128, %rsp
	ret
substitute_SB_lhs_CL_ArrowASTConsASTTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce50
	jmp uuid_00000000000dce52
uuid_00000000000dce50:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce47
	jmp uuid_00000000000dce49
uuid_00000000000dce47:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce35
	jmp uuid_00000000000dce37
uuid_00000000000dce35:
	push %RBP
	mov -536(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -640(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce23
	jmp uuid_00000000000dce25
uuid_00000000000dce23:
	push %RBP
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	jmp uuid_00000000000dce20
	jmp uuid_00000000000dce22
uuid_00000000000dce20:
	movb $1, -648(%rbp)
uuid_00000000000dce22:
	mov -664(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000dce25:
	mov -656(%RBP),%RSP
	add $-688, %RSP
	mov -648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dce32
	jmp uuid_00000000000dce34
uuid_00000000000dce32:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -768(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce2c
	jmp uuid_00000000000dce2e
uuid_00000000000dce2c:
	push %RBP
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq -752(%RBP)
	pushq -760(%RBP)
	jmp uuid_00000000000dce29
	jmp uuid_00000000000dce2b
uuid_00000000000dce29:
	push %RBP
	mov -704(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dce26
	jmp uuid_00000000000dce28
uuid_00000000000dce26:
	movb $1, -776(%rbp)
uuid_00000000000dce28:
	mov -856(%RBP),%RSP
	add $-864, %RSP
uuid_00000000000dce2b:
	mov -792(%RBP),%RSP
	add $-864, %RSP
uuid_00000000000dce2e:
	mov -784(%RBP),%RSP
	add $-864, %RSP
	mov -776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dce2f
	jmp uuid_00000000000dce31
uuid_00000000000dce2f:
	movb $1, -552(%rbp)
uuid_00000000000dce31:
	mov -696(%RBP),%RSP
	add $-864, %RSP
uuid_00000000000dce34:
	mov -568(%RBP),%RSP
	add $-864, %RSP
uuid_00000000000dce37:
	mov -560(%RBP),%RSP
	add $-864, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dce44
	jmp uuid_00000000000dce46
uuid_00000000000dce44:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -944(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce3e
	jmp uuid_00000000000dce40
uuid_00000000000dce3e:
	push %RBP
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	jmp uuid_00000000000dce3b
	jmp uuid_00000000000dce3d
uuid_00000000000dce3b:
	push %RBP
	mov -880(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dce38
	jmp uuid_00000000000dce3a
uuid_00000000000dce38:
	movb $1, -952(%rbp)
uuid_00000000000dce3a:
	mov -1032(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000dce3d:
	mov -968(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000dce40:
	mov -960(%RBP),%RSP
	add $-1040, %RSP
	mov -952(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dce41
	jmp uuid_00000000000dce43
uuid_00000000000dce41:
	movb $1, -456(%rbp)
uuid_00000000000dce43:
	mov -872(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000dce46:
	mov -472(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000dce49:
	mov -464(%RBP),%RSP
	add $-1040, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dce4d
	jmp uuid_00000000000dce4f
uuid_00000000000dce4d:
	push %RBP
	mov -336(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dce4a
	jmp uuid_00000000000dce4c
uuid_00000000000dce4a:
	movb $1, -360(%rbp)
uuid_00000000000dce4c:
	mov -1048(%RBP),%RSP
	add $-1120, %RSP
uuid_00000000000dce4f:
	mov -376(%RBP),%RSP
	add $-1120, %RSP
uuid_00000000000dce52:
	mov -368(%RBP),%RSP
	add $-1120, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcea9
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -1200(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce7a
	jmp uuid_00000000000dce7c
uuid_00000000000dce7a:
	push %RBP
	mov -1192(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1296(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce68
	jmp uuid_00000000000dce6a
uuid_00000000000dce68:
	push %RBP
	mov -1288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1392(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce56
	jmp uuid_00000000000dce58
uuid_00000000000dce56:
	push %RBP
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	jmp uuid_00000000000dce53
	jmp uuid_00000000000dce55
uuid_00000000000dce53:
	movb $1, -1400(%rbp)
uuid_00000000000dce55:
	mov -1416(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000dce58:
	mov -1408(%RBP),%RSP
	add $-1440, %RSP
	mov -1400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dce65
	jmp uuid_00000000000dce67
uuid_00000000000dce65:
	push %RBP
	mov -1280(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1520(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce5f
	jmp uuid_00000000000dce61
uuid_00000000000dce5f:
	push %RBP
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	jmp uuid_00000000000dce5c
	jmp uuid_00000000000dce5e
uuid_00000000000dce5c:
	push %RBP
	mov -1456(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dce59
	jmp uuid_00000000000dce5b
uuid_00000000000dce59:
	movb $1, -1528(%rbp)
uuid_00000000000dce5b:
	mov -1608(%RBP),%RSP
	add $-1616, %RSP
uuid_00000000000dce5e:
	mov -1544(%RBP),%RSP
	add $-1616, %RSP
uuid_00000000000dce61:
	mov -1536(%RBP),%RSP
	add $-1616, %RSP
	mov -1528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dce62
	jmp uuid_00000000000dce64
uuid_00000000000dce62:
	movb $1, -1304(%rbp)
uuid_00000000000dce64:
	mov -1448(%RBP),%RSP
	add $-1616, %RSP
uuid_00000000000dce67:
	mov -1320(%RBP),%RSP
	add $-1616, %RSP
uuid_00000000000dce6a:
	mov -1312(%RBP),%RSP
	add $-1616, %RSP
	mov -1304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dce77
	jmp uuid_00000000000dce79
uuid_00000000000dce77:
	push %RBP
	mov -1184(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1696(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce71
	jmp uuid_00000000000dce73
uuid_00000000000dce71:
	push %RBP
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	pushq -1656(%RBP)
	pushq -1664(%RBP)
	pushq -1672(%RBP)
	pushq -1680(%RBP)
	pushq -1688(%RBP)
	jmp uuid_00000000000dce6e
	jmp uuid_00000000000dce70
uuid_00000000000dce6e:
	push %RBP
	mov -1632(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1792(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dce6b
	jmp uuid_00000000000dce6d
uuid_00000000000dce6b:
	movb $1, -1704(%rbp)
uuid_00000000000dce6d:
	mov -1784(%RBP),%RSP
	add $-1792, %RSP
uuid_00000000000dce70:
	mov -1720(%RBP),%RSP
	add $-1792, %RSP
uuid_00000000000dce73:
	mov -1712(%RBP),%RSP
	add $-1792, %RSP
	mov -1704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dce74
	jmp uuid_00000000000dce76
uuid_00000000000dce74:
	movb $1, -1208(%rbp)
uuid_00000000000dce76:
	mov -1624(%RBP),%RSP
	add $-1792, %RSP
uuid_00000000000dce79:
	mov -1224(%RBP),%RSP
	add $-1792, %RSP
uuid_00000000000dce7c:
	mov -1216(%RBP),%RSP
	add $-1792, %RSP
	mov -1208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcea6
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -1872(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce8c
	jmp uuid_00000000000dce8e
uuid_00000000000dce8c:
	push %RBP
	mov -1864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1968(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce83
	jmp uuid_00000000000dce85
uuid_00000000000dce83:
	push %RBP
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	jmp uuid_00000000000dce80
	jmp uuid_00000000000dce82
uuid_00000000000dce80:
	push %RBP
	mov -1904(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dce7d
	jmp uuid_00000000000dce7f
uuid_00000000000dce7d:
	movb $1, -1976(%rbp)
uuid_00000000000dce7f:
	mov -2056(%RBP),%RSP
	add $-2064, %RSP
uuid_00000000000dce82:
	mov -1992(%RBP),%RSP
	add $-2064, %RSP
uuid_00000000000dce85:
	mov -1984(%RBP),%RSP
	add $-2064, %RSP
	mov -1976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dce89
	jmp uuid_00000000000dce8b
uuid_00000000000dce89:
	push %RBP
	mov -1856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dce86
	jmp uuid_00000000000dce88
uuid_00000000000dce86:
	movb $1, -1880(%rbp)
uuid_00000000000dce88:
	mov -2072(%RBP),%RSP
	add $-2144, %RSP
uuid_00000000000dce8b:
	mov -1896(%RBP),%RSP
	add $-2144, %RSP
uuid_00000000000dce8e:
	mov -1888(%RBP),%RSP
	add $-2144, %RSP
	mov -1880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcea3
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -2224(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce95
	jmp uuid_00000000000dce97
uuid_00000000000dce95:
	push %RBP
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	jmp uuid_00000000000dce92
	jmp uuid_00000000000dce94
uuid_00000000000dce92:
	push %RBP
	mov -2160(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dce8f
	jmp uuid_00000000000dce91
uuid_00000000000dce8f:
	movb $1, -2232(%rbp)
uuid_00000000000dce91:
	mov -2312(%RBP),%RSP
	add $-2320, %RSP
uuid_00000000000dce94:
	mov -2248(%RBP),%RSP
	add $-2320, %RSP
uuid_00000000000dce97:
	mov -2240(%RBP),%RSP
	add $-2320, %RSP
	mov -2232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcea0
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov -2400(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce9d
	push %RBP
	jmp uuid_00000000000dce9a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dce99
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dce9c
uuid_00000000000dce9a:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dce98
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dce9c:
	mov -2408(%RBP),%RSP
	add $-2408, %RSP
	jmp uuid_00000000000dce9f
uuid_00000000000dce9d:
uuid_00000000000dce9f:
	mov -2328(%RBP),%RSP
	add $-2400, %RSP
	jmp uuid_00000000000dcea2
uuid_00000000000dcea0:
	pushq -2320(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dcea2:
	mov -2152(%RBP),%RSP
	add $-2320, %RSP
	jmp uuid_00000000000dcea5
uuid_00000000000dcea3:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-lhs : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	mov %RBX, %RBP
	call substitute_SB_lhs_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2064(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dcea5:
	mov -1800(%RBP),%RSP
	add $-2144, %RSP
	jmp uuid_00000000000dcea8
uuid_00000000000dcea6:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3c6
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1616(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dcea8:
	mov -1128(%RBP),%RSP
	add $-1792, %RSP
	jmp uuid_00000000000dceab
uuid_00000000000dcea9:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-lhs : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	mov %RBX, %RBP
	call substitute_SB_lhs_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3c6
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dceab:
	mov -280(%RBP),%RSP
	add $-1120, %RSP
	subq $72, %rsp
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $200, %rsp
	ret
substitute_CL_ArrowASTConsASTTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcfa6
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov -432(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcfa3
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dced3
	jmp uuid_00000000000dced5
uuid_00000000000dced3:
	push %RBP
	mov -504(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -608(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcec1
	jmp uuid_00000000000dcec3
uuid_00000000000dcec1:
	push %RBP
	mov -600(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -704(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dceaf
	jmp uuid_00000000000dceb1
uuid_00000000000dceaf:
	push %RBP
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	jmp uuid_00000000000dceac
	jmp uuid_00000000000dceae
uuid_00000000000dceac:
	movb $1, -712(%rbp)
uuid_00000000000dceae:
	mov -728(%RBP),%RSP
	add $-752, %RSP
uuid_00000000000dceb1:
	mov -720(%RBP),%RSP
	add $-752, %RSP
	mov -712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcebe
	jmp uuid_00000000000dcec0
uuid_00000000000dcebe:
	push %RBP
	mov -592(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -832(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dceb8
	jmp uuid_00000000000dceba
uuid_00000000000dceb8:
	push %RBP
	pushq -776(%RBP)
	pushq -784(%RBP)
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	jmp uuid_00000000000dceb5
	jmp uuid_00000000000dceb7
uuid_00000000000dceb5:
	push %RBP
	mov -768(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dceb2
	jmp uuid_00000000000dceb4
uuid_00000000000dceb2:
	movb $1, -840(%rbp)
uuid_00000000000dceb4:
	mov -920(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000dceb7:
	mov -856(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000dceba:
	mov -848(%RBP),%RSP
	add $-928, %RSP
	mov -840(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcebb
	jmp uuid_00000000000dcebd
uuid_00000000000dcebb:
	movb $1, -616(%rbp)
uuid_00000000000dcebd:
	mov -760(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000dcec0:
	mov -632(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000dcec3:
	mov -624(%RBP),%RSP
	add $-928, %RSP
	mov -616(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dced0
	jmp uuid_00000000000dced2
uuid_00000000000dced0:
	push %RBP
	mov -496(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1008(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dceca
	jmp uuid_00000000000dcecc
uuid_00000000000dceca:
	push %RBP
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	jmp uuid_00000000000dcec7
	jmp uuid_00000000000dcec9
uuid_00000000000dcec7:
	push %RBP
	mov -944(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1104(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcec4
	jmp uuid_00000000000dcec6
uuid_00000000000dcec4:
	movb $1, -1016(%rbp)
uuid_00000000000dcec6:
	mov -1096(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000dcec9:
	mov -1032(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000dcecc:
	mov -1024(%RBP),%RSP
	add $-1104, %RSP
	mov -1016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcecd
	jmp uuid_00000000000dcecf
uuid_00000000000dcecd:
	movb $1, -520(%rbp)
uuid_00000000000dcecf:
	mov -936(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000dced2:
	mov -536(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000dced5:
	mov -528(%RBP),%RSP
	add $-1104, %RSP
	mov -520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcfa0
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -1184(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf19
	jmp uuid_00000000000dcf1b
uuid_00000000000dcf19:
	push %RBP
	mov -1176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1280(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf07
	jmp uuid_00000000000dcf09
uuid_00000000000dcf07:
	push %RBP
	mov -1272(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1376(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcef5
	jmp uuid_00000000000dcef7
uuid_00000000000dcef5:
	push %RBP
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	jmp uuid_00000000000dcef2
	jmp uuid_00000000000dcef4
uuid_00000000000dcef2:
	movb $1, -1384(%rbp)
uuid_00000000000dcef4:
	mov -1400(%RBP),%RSP
	add $-1424, %RSP
uuid_00000000000dcef7:
	mov -1392(%RBP),%RSP
	add $-1424, %RSP
	mov -1384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf04
	jmp uuid_00000000000dcf06
uuid_00000000000dcf04:
	push %RBP
	mov -1264(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1504(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcefe
	jmp uuid_00000000000dcf00
uuid_00000000000dcefe:
	push %RBP
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	jmp uuid_00000000000dcefb
	jmp uuid_00000000000dcefd
uuid_00000000000dcefb:
	push %RBP
	mov -1440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcef8
	jmp uuid_00000000000dcefa
uuid_00000000000dcef8:
	movb $1, -1512(%rbp)
uuid_00000000000dcefa:
	mov -1592(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000dcefd:
	mov -1528(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000dcf00:
	mov -1520(%RBP),%RSP
	add $-1600, %RSP
	mov -1512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf01
	jmp uuid_00000000000dcf03
uuid_00000000000dcf01:
	movb $1, -1288(%rbp)
uuid_00000000000dcf03:
	mov -1432(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000dcf06:
	mov -1304(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000dcf09:
	mov -1296(%RBP),%RSP
	add $-1600, %RSP
	mov -1288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf16
	jmp uuid_00000000000dcf18
uuid_00000000000dcf16:
	push %RBP
	mov -1168(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1680(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf10
	jmp uuid_00000000000dcf12
uuid_00000000000dcf10:
	push %RBP
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	pushq -1656(%RBP)
	pushq -1664(%RBP)
	pushq -1672(%RBP)
	jmp uuid_00000000000dcf0d
	jmp uuid_00000000000dcf0f
uuid_00000000000dcf0d:
	push %RBP
	mov -1616(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1776(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcf0a
	jmp uuid_00000000000dcf0c
uuid_00000000000dcf0a:
	movb $1, -1688(%rbp)
uuid_00000000000dcf0c:
	mov -1768(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000dcf0f:
	mov -1704(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000dcf12:
	mov -1696(%RBP),%RSP
	add $-1776, %RSP
	mov -1688(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf13
	jmp uuid_00000000000dcf15
uuid_00000000000dcf13:
	movb $1, -1192(%rbp)
uuid_00000000000dcf15:
	mov -1608(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000dcf18:
	mov -1208(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000dcf1b:
	mov -1200(%RBP),%RSP
	add $-1776, %RSP
	mov -1192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf9d
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -1856(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf3e
	jmp uuid_00000000000dcf40
uuid_00000000000dcf3e:
	push %RBP
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	pushq -1824(%RBP)
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	jmp uuid_00000000000dcf3b
	jmp uuid_00000000000dcf3d
uuid_00000000000dcf3b:
	push %RBP
	mov -1792(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcf38
	jmp uuid_00000000000dcf3a
uuid_00000000000dcf38:
	movb $1, -1864(%rbp)
uuid_00000000000dcf3a:
	mov -1944(%RBP),%RSP
	add $-1952, %RSP
uuid_00000000000dcf3d:
	mov -1880(%RBP),%RSP
	add $-1952, %RSP
uuid_00000000000dcf40:
	mov -1872(%RBP),%RSP
	add $-1952, %RSP
	mov -1864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf9a
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -2032(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf47
	jmp uuid_00000000000dcf49
uuid_00000000000dcf47:
	push %RBP
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	jmp uuid_00000000000dcf44
	jmp uuid_00000000000dcf46
uuid_00000000000dcf44:
	push %RBP
	mov -1968(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcf41
	jmp uuid_00000000000dcf43
uuid_00000000000dcf41:
	movb $1, -2040(%rbp)
uuid_00000000000dcf43:
	mov -2120(%RBP),%RSP
	add $-2128, %RSP
uuid_00000000000dcf46:
	mov -2056(%RBP),%RSP
	add $-2128, %RSP
uuid_00000000000dcf49:
	mov -2048(%RBP),%RSP
	add $-2128, %RSP
	mov -2040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf97
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -2208(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf53
	jmp uuid_00000000000dcf55
uuid_00000000000dcf53:
	push %RBP
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	jmp uuid_00000000000dcf50
	jmp uuid_00000000000dcf52
uuid_00000000000dcf50:
	push %RBP
	mov -2176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcf4d
	jmp uuid_00000000000dcf4f
uuid_00000000000dcf4d:
	push %RBP
	mov -2168(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcf4a
	jmp uuid_00000000000dcf4c
uuid_00000000000dcf4a:
	movb $1, -2216(%rbp)
uuid_00000000000dcf4c:
	mov -2344(%RBP),%RSP
	add $-2416, %RSP
uuid_00000000000dcf4f:
	mov -2264(%RBP),%RSP
	add $-2416, %RSP
uuid_00000000000dcf52:
	mov -2232(%RBP),%RSP
	add $-2416, %RSP
uuid_00000000000dcf55:
	mov -2224(%RBP),%RSP
	add $-2416, %RSP
	mov -2216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf94
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -2496(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf59
	jmp uuid_00000000000dcf5b
uuid_00000000000dcf59:
	push %RBP
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	jmp uuid_00000000000dcf56
	jmp uuid_00000000000dcf58
uuid_00000000000dcf56:
	movb $1, -2504(%rbp)
uuid_00000000000dcf58:
	mov -2520(%RBP),%RSP
	add $-2544, %RSP
uuid_00000000000dcf5b:
	mov -2512(%RBP),%RSP
	add $-2544, %RSP
	mov -2504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf91
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -2624(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf62
	jmp uuid_00000000000dcf64
uuid_00000000000dcf62:
	push %RBP
	mov -2616(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcf5f
	jmp uuid_00000000000dcf61
uuid_00000000000dcf5f:
	push %RBP
	mov -2608(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcf5c
	jmp uuid_00000000000dcf5e
uuid_00000000000dcf5c:
	movb $1, -2632(%rbp)
uuid_00000000000dcf5e:
	mov -2728(%RBP),%RSP
	add $-2800, %RSP
uuid_00000000000dcf61:
	mov -2648(%RBP),%RSP
	add $-2800, %RSP
uuid_00000000000dcf64:
	mov -2640(%RBP),%RSP
	add $-2800, %RSP
	mov -2632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf8e
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -2880(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf6b
	jmp uuid_00000000000dcf6d
uuid_00000000000dcf6b:
	push %RBP
	mov -2872(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcf68
	jmp uuid_00000000000dcf6a
uuid_00000000000dcf68:
	push %RBP
	mov -2864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcf65
	jmp uuid_00000000000dcf67
uuid_00000000000dcf65:
	movb $1, -2888(%rbp)
uuid_00000000000dcf67:
	mov -2984(%RBP),%RSP
	add $-3056, %RSP
uuid_00000000000dcf6a:
	mov -2904(%RBP),%RSP
	add $-3056, %RSP
uuid_00000000000dcf6d:
	mov -2896(%RBP),%RSP
	add $-3056, %RSP
	mov -2888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf8b
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -3136(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf74
	jmp uuid_00000000000dcf76
uuid_00000000000dcf74:
	push %RBP
	mov -3128(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcf71
	jmp uuid_00000000000dcf73
uuid_00000000000dcf71:
	push %RBP
	pushq -3072(%RBP)
	pushq -3080(%RBP)
	pushq -3088(%RBP)
	pushq -3096(%RBP)
	pushq -3104(%RBP)
	pushq -3112(%RBP)
	pushq -3120(%RBP)
	jmp uuid_00000000000dcf6e
	jmp uuid_00000000000dcf70
uuid_00000000000dcf6e:
	movb $1, -3144(%rbp)
uuid_00000000000dcf70:
	mov -3240(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000dcf73:
	mov -3160(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000dcf76:
	mov -3152(%RBP),%RSP
	add $-3296, %RSP
	mov -3144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf88
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -3376(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf7d
	jmp uuid_00000000000dcf7f
uuid_00000000000dcf7d:
	push %RBP
	mov -3368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcf7a
	jmp uuid_00000000000dcf7c
uuid_00000000000dcf7a:
	push %RBP
	mov -3360(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcf77
	jmp uuid_00000000000dcf79
uuid_00000000000dcf77:
	movb $1, -3384(%rbp)
uuid_00000000000dcf79:
	mov -3480(%RBP),%RSP
	add $-3552, %RSP
uuid_00000000000dcf7c:
	mov -3400(%RBP),%RSP
	add $-3552, %RSP
uuid_00000000000dcf7f:
	mov -3392(%RBP),%RSP
	add $-3552, %RSP
	mov -3384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf85
	push %RBP
	jmp uuid_00000000000dcf82
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dcf81
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcf84
uuid_00000000000dcf82:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dcf80
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dcf84:
	mov -3560(%RBP),%RSP
	add $-3560, %RSP
	jmp uuid_00000000000dcf87
uuid_00000000000dcf85:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3488(%rbp)
	pushq -3496(%rbp)
	pushq -3504(%rbp)
	pushq -3512(%rbp)
	pushq -3520(%rbp)
	pushq -3528(%rbp)
	pushq -3536(%rbp)
	pushq -3544(%rbp)
	pushq -3552(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3408(%rbp)
	pushq -3416(%rbp)
	pushq -3424(%rbp)
	pushq -3432(%rbp)
	pushq -3440(%rbp)
	pushq -3448(%rbp)
	pushq -3456(%rbp)
	pushq -3464(%rbp)
	pushq -3472(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dcf87:
	mov -3304(%RBP),%RSP
	add $-3552, %RSP
	jmp uuid_00000000000dcf8a
uuid_00000000000dcf88:
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3248(%rbp)
	pushq -3256(%rbp)
	pushq -3264(%rbp)
	pushq -3272(%rbp)
	pushq -3280(%rbp)
	pushq -3288(%rbp)
	pushq -3296(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3168(%rbp)
	pushq -3176(%rbp)
	pushq -3184(%rbp)
	pushq -3192(%rbp)
	pushq -3200(%rbp)
	pushq -3208(%rbp)
	pushq -3216(%rbp)
	pushq -3224(%rbp)
	pushq -3232(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dcf8a:
	mov -3064(%RBP),%RSP
	add $-3296, %RSP
	jmp uuid_00000000000dcf8d
uuid_00000000000dcf8b:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2992(%rbp)
	pushq -3000(%rbp)
	pushq -3008(%rbp)
	pushq -3016(%rbp)
	pushq -3024(%rbp)
	pushq -3032(%rbp)
	pushq -3040(%rbp)
	pushq -3048(%rbp)
	pushq -3056(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2912(%rbp)
	pushq -2920(%rbp)
	pushq -2928(%rbp)
	pushq -2936(%rbp)
	pushq -2944(%rbp)
	pushq -2952(%rbp)
	pushq -2960(%rbp)
	pushq -2968(%rbp)
	pushq -2976(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dcf8d:
	mov -2808(%RBP),%RSP
	add $-3056, %RSP
	jmp uuid_00000000000dcf90
uuid_00000000000dcf8e:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2736(%rbp)
	pushq -2744(%rbp)
	pushq -2752(%rbp)
	pushq -2760(%rbp)
	pushq -2768(%rbp)
	pushq -2776(%rbp)
	pushq -2784(%rbp)
	pushq -2792(%rbp)
	pushq -2800(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2656(%rbp)
	pushq -2664(%rbp)
	pushq -2672(%rbp)
	pushq -2680(%rbp)
	pushq -2688(%rbp)
	pushq -2696(%rbp)
	pushq -2704(%rbp)
	pushq -2712(%rbp)
	pushq -2720(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dcf90:
	mov -2552(%RBP),%RSP
	add $-2800, %RSP
	jmp uuid_00000000000dcf93
uuid_00000000000dcf91:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dcf93:
	mov -2424(%RBP),%RSP
	add $-2544, %RSP
	jmp uuid_00000000000dcf96
uuid_00000000000dcf94:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-lhs : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	pushq -2408(%rbp)
	pushq -2416(%rbp)
	mov %RBX, %RBP
	call substitute_SB_lhs_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
	pushq -2336(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $5
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dcf96:
	mov -2136(%RBP),%RSP
	add $-2416, %RSP
	jmp uuid_00000000000dcf99
uuid_00000000000dcf97:
	pushq -2128(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dcf99:
	mov -1960(%RBP),%RSP
	add $-2128, %RSP
	jmp uuid_00000000000dcf9c
uuid_00000000000dcf9a:
	pushq -1952(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dcf9c:
	mov -1784(%RBP),%RSP
	add $-1952, %RSP
	jmp uuid_00000000000dcf9f
uuid_00000000000dcf9d:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3c6
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1600(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dcf35:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcf36
	jmp uuid_00000000000dcf37
uuid_00000000000dcf36:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	mov -2024(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf32
	push %RBP
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq $0
	push %RBP
	mov -2152(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf28
	jmp uuid_00000000000dcf2a
uuid_00000000000dcf28:
	push %RBP
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	jmp uuid_00000000000dcf25
	jmp uuid_00000000000dcf27
uuid_00000000000dcf25:
	push %RBP
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	jmp uuid_00000000000dcf22
	jmp uuid_00000000000dcf24
uuid_00000000000dcf22:
	push %RBP
	mov -2048(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcf1f
	jmp uuid_00000000000dcf21
uuid_00000000000dcf1f:
	push %RBP
	mov -2040(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcf1c
	jmp uuid_00000000000dcf1e
uuid_00000000000dcf1c:
	movb $1, -2160(%rbp)
uuid_00000000000dcf1e:
	mov -2304(%RBP),%RSP
	add $-2424, %RSP
uuid_00000000000dcf21:
	mov -2288(%RBP),%RSP
	add $-2424, %RSP
uuid_00000000000dcf24:
	mov -2256(%RBP),%RSP
	add $-2424, %RSP
uuid_00000000000dcf27:
	mov -2176(%RBP),%RSP
	add $-2424, %RSP
uuid_00000000000dcf2a:
	mov -2168(%RBP),%RSP
	add $-2424, %RSP
	mov -2160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf2f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dcf2e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcf31
uuid_00000000000dcf2f:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2296(%rbp)
	pushq -1600(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcf2b
	movq -2424(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -2416(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -2408(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -2400(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -2392(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -2384(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -2376(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2368(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -2360(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -2352(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -2344(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -2336(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -2328(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -2320(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -2312(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dcf2d
uuid_00000000000dcf2b:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3c6
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dcf2d:
	mov -2432(%RBP),%RSP
	add $-2432, %RSP
uuid_00000000000dcf31:
	mov -2032(%RBP),%RSP
	add $-2432, %RSP
	jmp uuid_00000000000dcf34
uuid_00000000000dcf32:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dcf34:
	mov -1904(%RBP),%RSP
	add $-2024, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000dcf35
uuid_00000000000dcf37:
uuid_00000000000dcf9f:
	mov -1112(%RBP),%RSP
	add $-1776, %RSP
	jmp uuid_00000000000dcfa2
uuid_00000000000dcfa0:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3c6
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dceef:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcef0
	jmp uuid_00000000000dcef1
uuid_00000000000dcef0:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	mov -1352(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dceec
	push %RBP
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq $0
	push %RBP
	mov -1480(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcee2
	jmp uuid_00000000000dcee4
uuid_00000000000dcee2:
	push %RBP
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	jmp uuid_00000000000dcedf
	jmp uuid_00000000000dcee1
uuid_00000000000dcedf:
	push %RBP
	pushq -1384(%RBP)
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	jmp uuid_00000000000dcedc
	jmp uuid_00000000000dcede
uuid_00000000000dcedc:
	push %RBP
	mov -1376(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dced9
	jmp uuid_00000000000dcedb
uuid_00000000000dced9:
	push %RBP
	mov -1368(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dced6
	jmp uuid_00000000000dced8
uuid_00000000000dced6:
	movb $1, -1488(%rbp)
uuid_00000000000dced8:
	mov -1632(%RBP),%RSP
	add $-1752, %RSP
uuid_00000000000dcedb:
	mov -1616(%RBP),%RSP
	add $-1752, %RSP
uuid_00000000000dcede:
	mov -1584(%RBP),%RSP
	add $-1752, %RSP
uuid_00000000000dcee1:
	mov -1504(%RBP),%RSP
	add $-1752, %RSP
uuid_00000000000dcee4:
	mov -1496(%RBP),%RSP
	add $-1752, %RSP
	mov -1488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcee9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dcee8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dceeb
uuid_00000000000dcee9:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1624(%rbp)
	pushq -928(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcee5
	movq -1752(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1744(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1736(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1728(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1720(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1712(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1704(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1696(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1688(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1680(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1672(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1664(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1656(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1648(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1640(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dcee7
uuid_00000000000dcee5:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3c6
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dcee7:
	mov -1760(%RBP),%RSP
	add $-1760, %RSP
uuid_00000000000dceeb:
	mov -1360(%RBP),%RSP
	add $-1760, %RSP
	jmp uuid_00000000000dceee
uuid_00000000000dceec:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dceee:
	mov -1232(%RBP),%RSP
	add $-1352, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000dceef
uuid_00000000000dcef1:
uuid_00000000000dcfa2:
	mov -440(%RBP),%RSP
	add $-1104, %RSP
	jmp uuid_00000000000dcfa5
uuid_00000000000dcfa3:
uuid_00000000000dcfa5:
	mov -360(%RBP),%RSP
	add $-432, %RSP
	jmp uuid_00000000000dcfa8
uuid_00000000000dcfa6:
uuid_00000000000dcfa8:
	mov -280(%RBP),%RSP
	add $-352, %RSP
	subq $72, %rsp
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $200, %rsp
	ret
substitute_CL_ArrowSConsSStringSList:
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcfd5
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	push %RBP
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcfac
	jmp uuid_00000000000dcfae
uuid_00000000000dcfac:
	push %RBP
	mov -160(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcfa9
	jmp uuid_00000000000dcfab
uuid_00000000000dcfa9:
	movb $1, -176(%rbp)
uuid_00000000000dcfab:
	mov -192(%RBP),%RSP
	add $-200, %RSP
uuid_00000000000dcfae:
	mov -184(%RBP),%RSP
	add $-200, %RSP
	mov -176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcfd2
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcfcb
	jmp uuid_00000000000dcfcd
uuid_00000000000dcfcb:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcfc8
	jmp uuid_00000000000dcfca
uuid_00000000000dcfc8:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcfc5
	jmp uuid_00000000000dcfc7
uuid_00000000000dcfc5:
	movb $1, -240(%rbp)
uuid_00000000000dcfc7:
	mov -288(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000dcfca:
	mov -256(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000dcfcd:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcfcf
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dcfce
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcfd1
uuid_00000000000dcfcf:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<StringSList,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowSConsSStringSList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<StringSList,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowSConsSStringSList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000dcfd1:
	mov -208(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000dcfd4
uuid_00000000000dcfd2:
uuid_00000000000dcfc2:
#call function non-zero : Arrow<StringSList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64StringSList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcfc3
	jmp uuid_00000000000dcfc4
uuid_00000000000dcfc3:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcfb8
	jmp uuid_00000000000dcfba
uuid_00000000000dcfb8:
	push %RBP
	pushq -280(%RBP)
	pushq -288(%RBP)
	pushq -296(%RBP)
	jmp uuid_00000000000dcfb5
	jmp uuid_00000000000dcfb7
uuid_00000000000dcfb5:
	push %RBP
	mov -272(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcfb2
	jmp uuid_00000000000dcfb4
uuid_00000000000dcfb2:
	push %RBP
	mov -264(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcfaf
	jmp uuid_00000000000dcfb1
uuid_00000000000dcfaf:
	movb $1, -312(%rbp)
uuid_00000000000dcfb1:
	mov -376(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000dcfb4:
	mov -360(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000dcfb7:
	mov -328(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000dcfba:
	mov -320(%RBP),%RSP
	add $-424, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcfbf
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dcfbe
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcfc1
uuid_00000000000dcfbf:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcfbb
	jmp uuid_00000000000dcfbd
uuid_00000000000dcfbb:
	movq -352(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -56(%rbp)
uuid_00000000000dcfbd:
	mov -432(%RBP),%RSP
	add $-432, %RSP
	movq -424(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -408(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -400(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -392(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dcfc1:
	mov -256(%RBP),%RSP
	add $-432, %RSP
	add $48, %rsp
	add $48, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dcfc2
uuid_00000000000dcfc4:
uuid_00000000000dcfd4:
	mov -144(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000dcfd7
uuid_00000000000dcfd5:
	pushq $0
	pushq $0
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000dcfd7:
	mov -112(%RBP),%RSP
	add $-136, %RSP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	subq $24, %rsp
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
specialize_CL_ArrowNilConsTypeConsTContextConsTypeString:
	push %RBP
#call function is-special : Arrow<Cons<String,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_special_CL_ArrowU64ConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd016
#call function normalize : Arrow<TContext,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	mov $global_SB_type_SB_context_CL_TContextTContext, %r15
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000dd010:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd011
	jmp uuid_00000000000dd012
uuid_00000000000dd011:
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	push %RBP
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd00d
	push %RBP
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq $0
	push %RBP
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcfe4
	jmp uuid_00000000000dcfe6
uuid_00000000000dcfe4:
	push %RBP
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq -752(%RBP)
	jmp uuid_00000000000dcfe1
	jmp uuid_00000000000dcfe3
uuid_00000000000dcfe1:
	push %RBP
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	jmp uuid_00000000000dcfde
	jmp uuid_00000000000dcfe0
uuid_00000000000dcfde:
	push %RBP
	mov -656(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcfdb
	jmp uuid_00000000000dcfdd
uuid_00000000000dcfdb:
	push %RBP
	mov -648(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcfd8
	jmp uuid_00000000000dcfda
uuid_00000000000dcfd8:
	movb $1, -768(%rbp)
uuid_00000000000dcfda:
	mov -912(%RBP),%RSP
	add $-1032, %RSP
uuid_00000000000dcfdd:
	mov -896(%RBP),%RSP
	add $-1032, %RSP
uuid_00000000000dcfe0:
	mov -864(%RBP),%RSP
	add $-1032, %RSP
uuid_00000000000dcfe3:
	mov -784(%RBP),%RSP
	add $-1032, %RSP
uuid_00000000000dcfe6:
	mov -776(%RBP),%RSP
	add $-1032, %RSP
	mov -768(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd00a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd009
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd00c
uuid_00000000000dd00a:
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq $uuid_00000000000db622
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	popq -888(%RBP)
	popq -880(%RBP)
	popq -872(%RBP)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -904(%rbp)
	pushq -8(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd006
	jmp uuid_00000000000dd008
uuid_00000000000dd006:
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd003
	jmp uuid_00000000000dd005
uuid_00000000000dd003:
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	push %RBP
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq $0
	push %RBP
	mov -1200(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcff9
	jmp uuid_00000000000dcffb
uuid_00000000000dcff9:
	push %RBP
	mov -1192(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1296(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcff0
	jmp uuid_00000000000dcff2
uuid_00000000000dcff0:
	push %RBP
	jmp uuid_00000000000dcfed
	jmp uuid_00000000000dcfef
uuid_00000000000dcfed:
	push %RBP
	jmp uuid_00000000000dcfea
	jmp uuid_00000000000dcfec
uuid_00000000000dcfea:
	push %RBP
	jmp uuid_00000000000dcfe7
	jmp uuid_00000000000dcfe9
uuid_00000000000dcfe7:
	movb $1, -1304(%rbp)
uuid_00000000000dcfe9:
	mov -1336(%RBP),%RSP
	add $-1336, %RSP
uuid_00000000000dcfec:
	mov -1328(%RBP),%RSP
	add $-1336, %RSP
uuid_00000000000dcfef:
	mov -1320(%RBP),%RSP
	add $-1336, %RSP
uuid_00000000000dcff2:
	mov -1312(%RBP),%RSP
	add $-1336, %RSP
	mov -1304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcff6
	jmp uuid_00000000000dcff8
uuid_00000000000dcff6:
	push %RBP
	jmp uuid_00000000000dcff3
	jmp uuid_00000000000dcff5
uuid_00000000000dcff3:
	movb $1, -1208(%rbp)
uuid_00000000000dcff5:
	mov -1344(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000dcff8:
	mov -1224(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000dcffb:
	mov -1216(%RBP),%RSP
	add $-1344, %RSP
	mov -1208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd000
	push %RBP
	jmp uuid_00000000000dcffd
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dcffc
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcfff
uuid_00000000000dcffd:
uuid_00000000000dcfff:
	mov -1352(%RBP),%RSP
	add $-1352, %RSP
	jmp uuid_00000000000dd002
uuid_00000000000dd000:
	movq -856(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -848(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -840(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -832(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -824(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -816(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -808(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -800(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -792(%rbp), %r15
	movq %r15, -200(%rbp)
uuid_00000000000dd002:
	mov -1128(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000dd005:
	mov -1048(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000dd008:
	mov -1040(%RBP),%RSP
	add $-1344, %RSP
	movq -1032(%rbp), %r15
	movq %r15, -384(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -376(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -368(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -360(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -344(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -976(%rbp), %r15
	movq %r15, -328(%rbp)
	movq -968(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -960(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -952(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -944(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -936(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -928(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -920(%rbp), %r15
	movq %r15, -272(%rbp)
uuid_00000000000dd00c:
	mov -640(%RBP),%RSP
	add $-1344, %RSP
	jmp uuid_00000000000dd00f
uuid_00000000000dd00d:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
uuid_00000000000dd00f:
	mov -512(%RBP),%RSP
	add $-632, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000dd010
uuid_00000000000dd012:
#call function mark-as-special : Arrow<Cons<String,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call mark_SB_as_SB_special_CL_ArrowNilConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd013
	jmp uuid_00000000000dd015
uuid_00000000000dd013:
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
#call function infer-global-context : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call infer_SB_global_SB_context_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_type_SB_context_CL_TContextTContext, %r15
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
uuid_00000000000dd015:
	mov -392(%RBP),%RSP
	add $-464, %RSP
	jmp uuid_00000000000dd018
uuid_00000000000dd016:
uuid_00000000000dd018:
	mov -192(%RBP),%RSP
	add $-192, %RSP
	mov %rbp, %rsp
	sub $184, %rsp
	ret
mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsU64ConsListTypeConsU64ConsStringType:
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd02e
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd024
	jmp uuid_00000000000dd026
uuid_00000000000dd024:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd021
	jmp uuid_00000000000dd023
uuid_00000000000dd021:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	jmp uuid_00000000000dd01e
	jmp uuid_00000000000dd020
uuid_00000000000dd01e:
	movb $1, -240(%rbp)
uuid_00000000000dd020:
	mov -304(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000dd023:
	mov -256(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000dd026:
	mov -248(%RBP),%RSP
	add $-328, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd02b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd02a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd02d
uuid_00000000000dd02b:
	push %RBP
#call function is-parameter-flat : Arrow<Cons<Cons<String,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call is_SB_parameter_SB_flat_CL_ArrowU64ConsU64ConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd027
	jmp uuid_00000000000dd029
uuid_00000000000dd027:
#call function mark-constructor-flat-parameters : Arrow<Cons<Type,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd029:
	mov -336(%RBP),%RSP
	add $-336, %RSP
#call function mark-constructor-flat-parameters : Arrow<Cons<Cons<Cons<Cons<Type,String>,U64>,List<Type>>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	mov -88(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsU64ConsListTypeConsU64ConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd02d:
	mov -192(%RBP),%RSP
	add $-336, %RSP
	jmp uuid_00000000000dd030
uuid_00000000000dd02e:
uuid_00000000000dd030:
	mov -144(%RBP),%RSP
	add $-184, %RSP
	mov %rbp, %rsp
	sub $96, %rsp
	ret
mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsTypeType:
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd049
	jmp uuid_00000000000dd04b
uuid_00000000000dd049:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd040
	jmp uuid_00000000000dd042
uuid_00000000000dd040:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd037
	jmp uuid_00000000000dd039
uuid_00000000000dd037:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd034
	jmp uuid_00000000000dd036
uuid_00000000000dd034:
	push %RBP
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	jmp uuid_00000000000dd031
	jmp uuid_00000000000dd033
uuid_00000000000dd031:
	movb $1, -248(%rbp)
uuid_00000000000dd033:
	mov -312(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000dd036:
	mov -264(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000dd039:
	mov -256(%RBP),%RSP
	add $-336, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd03d
	jmp uuid_00000000000dd03f
uuid_00000000000dd03d:
	push %RBP
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	jmp uuid_00000000000dd03a
	jmp uuid_00000000000dd03c
uuid_00000000000dd03a:
	movb $1, -184(%rbp)
uuid_00000000000dd03c:
	mov -344(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dd03f:
	mov -200(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dd042:
	mov -192(%RBP),%RSP
	add $-368, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd046
	jmp uuid_00000000000dd048
uuid_00000000000dd046:
	push %RBP
	mov -96(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000db3a7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd043
	jmp uuid_00000000000dd045
uuid_00000000000dd043:
	movb $1, -120(%rbp)
uuid_00000000000dd045:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000dd048:
	mov -136(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000dd04b:
	mov -128(%RBP),%RSP
	add $-384, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd065
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd052
	jmp uuid_00000000000dd054
uuid_00000000000dd052:
	push %RBP
	mov -408(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd04f
	jmp uuid_00000000000dd051
uuid_00000000000dd04f:
	push %RBP
	mov -400(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd04c
	jmp uuid_00000000000dd04e
uuid_00000000000dd04c:
	movb $1, -424(%rbp)
uuid_00000000000dd04e:
	mov -488(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000dd051:
	mov -440(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000dd054:
	mov -432(%RBP),%RSP
	add $-496, %RSP
	mov -424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd062
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd058
	jmp uuid_00000000000dd05a
uuid_00000000000dd058:
	push %RBP
	mov -520(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd055
	jmp uuid_00000000000dd057
uuid_00000000000dd055:
	movb $1, -536(%rbp)
uuid_00000000000dd057:
	mov -552(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000dd05a:
	mov -544(%RBP),%RSP
	add $-560, %RSP
	mov -536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd05f
	push %RBP
	jmp uuid_00000000000dd05c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd05b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd05e
uuid_00000000000dd05c:
uuid_00000000000dd05e:
	mov -568(%RBP),%RSP
	add $-568, %RSP
	jmp uuid_00000000000dd061
uuid_00000000000dd05f:
#call function mark-parameter-flat : Arrow<Cons<Cons<String,U64>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function tag-of : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call tag_SB_of_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function arity : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call arity_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function parameter-number : Arrow<Cons<Type,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -560(%rbp)
	mov %RBX, %RBP
	call parameter_SB_number_CL_ArrowU64ConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call mark_SB_parameter_SB_flat_CL_ArrowNilConsU64ConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd061:
	mov -504(%RBP),%RSP
	add $-560, %RSP
	jmp uuid_00000000000dd064
uuid_00000000000dd062:
#call function mark-constructor-flat-parameters : Arrow<Cons<Cons<Cons<Cons<Type,String>,U64>,List<Type>>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -496(%rbp)
#call function arity : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call arity_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq $1
	mov %RBX, %RBP
	call mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsU64ConsListTypeConsU64ConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd064:
	mov -392(%RBP),%RSP
	add $-496, %RSP
	jmp uuid_00000000000dd067
uuid_00000000000dd065:
#call function mark-constructor-flat-parameters : Arrow<Cons<Type,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	mov %RBX, %RBP
	call mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function mark-constructor-flat-parameters : Arrow<Cons<Type,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd067:
	mov -88(%RBP),%RSP
	add $-384, %RSP
	mov %rbp, %rsp
	sub $56, %rsp
	ret
infer_SB_type_SB_constructor_CL_ArrowU64ConsASTType:
	pushq $0
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd06e
	jmp uuid_00000000000dd070
uuid_00000000000dd06e:
	push %RBP
	jmp uuid_00000000000dd06b
	jmp uuid_00000000000dd06d
uuid_00000000000dd06b:
	push %RBP
	mov -200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd068
	jmp uuid_00000000000dd06a
uuid_00000000000dd068:
	movb $1, -272(%rbp)
uuid_00000000000dd06a:
	mov -296(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000dd06d:
	mov -288(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000dd070:
	mov -280(%RBP),%RSP
	add $-304, %RSP
	mov -272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd092
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd080
	jmp uuid_00000000000dd082
uuid_00000000000dd080:
	push %RBP
	mov -376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd07d
	jmp uuid_00000000000dd07f
uuid_00000000000dd07d:
	push %RBP
	mov -368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd077
	jmp uuid_00000000000dd079
uuid_00000000000dd077:
	push %RBP
	jmp uuid_00000000000dd074
	jmp uuid_00000000000dd076
uuid_00000000000dd074:
	push %RBP
	mov -496(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd071
	jmp uuid_00000000000dd073
uuid_00000000000dd071:
	movb $1, -568(%rbp)
uuid_00000000000dd073:
	mov -592(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000dd076:
	mov -584(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000dd079:
	mov -576(%RBP),%RSP
	add $-600, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd07a
	jmp uuid_00000000000dd07c
uuid_00000000000dd07a:
	movb $1, -392(%rbp)
uuid_00000000000dd07c:
	mov -488(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000dd07f:
	mov -408(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000dd082:
	mov -400(%RBP),%RSP
	add $-600, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd08f
	push %RBP
	jmp uuid_00000000000dd08c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd08b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd08e
uuid_00000000000dd08c:
uuid_00000000000dd08e:
	mov -608(%RBP),%RSP
	add $-608, %RSP
	jmp uuid_00000000000dd091
uuid_00000000000dd08f:
#call function type-of-s-with-fields : Arrow<Cons<Cons<Cons<Type,String>,AST>,U64>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -600(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq $1
	mov %RBX, %RBP
	call type_SB_of_SB_s_SB_with_SB_fields_CL_ArrowTypeConsU64ConsASTConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -144(%RSP)
	push -144(%RSP)
	push -144(%RSP)
#call function add-concrete-type-instance : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call add_SB_concrete_SB_type_SB_instance_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function mark-constructor-flat-parameters : Arrow<Cons<Type,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
#call function has-forward : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd084
	jmp uuid_00000000000dd086
uuid_00000000000dd084:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd083
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -600(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd086:
	mov -632(%RBP),%RSP
	add $-632, %RSP
	push %RBP
#call function has-infinite : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd088
	jmp uuid_00000000000dd08a
uuid_00000000000dd088:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd087
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -600(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd08a:
	mov -640(%RBP),%RSP
	add $-640, %RSP
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db796
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -600(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function set-type-fields : Arrow<Cons<Type,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call set_SB_type_SB_fields_CL_ArrowNilConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-class-of-tag : Arrow<Cons<String,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -600(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call index_SB_class_SB_of_SB_tag_CL_ArrowNilConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-fields-of-tag : Arrow<Cons<Cons<String,Type>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -600(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call index_SB_fields_SB_of_SB_tag_CL_ArrowNilConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,Type>,String>,Type>,HashtableEq<String,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $type_SB_constructors_SB_index_CL_HashtableEqTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -600(%rbp)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db622
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqTypeStringConsTypeConsStringHashtableEqTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov $type_SB_constructors_SB_index_CL_HashtableEqTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -112(%rbp)
	mov -112(%RBP), %RAX
	mov $8, %R14
	addq %R14,%RAX
	movq %RAX, -112(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db5df
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -600(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
uuid_00000000000dd091:
	mov -312(%RBP),%RSP
	add $-688, %RSP
	jmp uuid_00000000000dd094
uuid_00000000000dd092:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db796
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db996
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db5df
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db5e0
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db5e2
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae6a
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function index-class-of-tag : Arrow<Cons<String,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call index_SB_class_SB_of_SB_tag_CL_ArrowNilConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-fields-of-tag : Arrow<Cons<Cons<String,Type>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq $0
	pushq $0
	pushq $3
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daff0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call index_SB_fields_SB_of_SB_tag_CL_ArrowNilConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,Type>,String>,Type>,HashtableEq<String,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $type_SB_constructors_SB_index_CL_HashtableEqTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqTypeStringConsTypeConsStringHashtableEqTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov $type_SB_constructors_SB_index_CL_HashtableEqTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	movq $8, -112(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db5df
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
uuid_00000000000dd094:
	mov -192(%RBP),%RSP
	add $-352, %RSP
	mov -112(%rbp), %RAX
	mov %rbp, %rsp
	sub $104, %rsp
	ret
infer_SB_global_SB_context_CL_ArrowNilAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0a4
	jmp uuid_00000000000dd0a6
uuid_00000000000dd0a4:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd0a1
	jmp uuid_00000000000dd0a3
uuid_00000000000dd0a1:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd09b
	jmp uuid_00000000000dd09d
uuid_00000000000dd09b:
	push %RBP
	jmp uuid_00000000000dd098
	jmp uuid_00000000000dd09a
uuid_00000000000dd098:
	push %RBP
	mov -344(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd095
	jmp uuid_00000000000dd097
uuid_00000000000dd095:
	movb $1, -416(%rbp)
uuid_00000000000dd097:
	mov -440(%RBP),%RSP
	add $-448, %RSP
uuid_00000000000dd09a:
	mov -432(%RBP),%RSP
	add $-448, %RSP
uuid_00000000000dd09d:
	mov -424(%RBP),%RSP
	add $-448, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd09e
	jmp uuid_00000000000dd0a0
uuid_00000000000dd09e:
	movb $1, -240(%rbp)
uuid_00000000000dd0a0:
	mov -336(%RBP),%RSP
	add $-448, %RSP
uuid_00000000000dd0a3:
	mov -256(%RBP),%RSP
	add $-448, %RSP
uuid_00000000000dd0a6:
	mov -248(%RBP),%RSP
	add $-448, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd14d
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0f6
	jmp uuid_00000000000dd0f8
uuid_00000000000dd0f6:
	push %RBP
	mov -520(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0e1
	jmp uuid_00000000000dd0e3
uuid_00000000000dd0e1:
	push %RBP
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq -688(%RBP)
	jmp uuid_00000000000dd0de
	jmp uuid_00000000000dd0e0
uuid_00000000000dd0de:
	push %RBP
	mov -664(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -824(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0d5
	jmp uuid_00000000000dd0d7
uuid_00000000000dd0d5:
	push %RBP
	mov -816(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0c3
	jmp uuid_00000000000dd0c5
uuid_00000000000dd0c3:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1016(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0ba
	jmp uuid_00000000000dd0bc
uuid_00000000000dd0ba:
	push %RBP
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	jmp uuid_00000000000dd0b7
	jmp uuid_00000000000dd0b9
uuid_00000000000dd0b7:
	movb $1, -1024(%rbp)
uuid_00000000000dd0b9:
	mov -1040(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000dd0bc:
	mov -1032(%RBP),%RSP
	add $-1064, %RSP
	mov -1024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0c0
	jmp uuid_00000000000dd0c2
uuid_00000000000dd0c0:
	push %RBP
	mov -904(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd0bd
	jmp uuid_00000000000dd0bf
uuid_00000000000dd0bd:
	movb $1, -928(%rbp)
uuid_00000000000dd0bf:
	mov -1072(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000dd0c2:
	mov -944(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000dd0c5:
	mov -936(%RBP),%RSP
	add $-1144, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0d2
	jmp uuid_00000000000dd0d4
uuid_00000000000dd0d2:
	push %RBP
	mov -808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1224(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0cc
	jmp uuid_00000000000dd0ce
uuid_00000000000dd0cc:
	push %RBP
	jmp uuid_00000000000dd0c9
	jmp uuid_00000000000dd0cb
uuid_00000000000dd0c9:
	push %RBP
	mov -1160(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1264(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd0c6
	jmp uuid_00000000000dd0c8
uuid_00000000000dd0c6:
	movb $1, -1232(%rbp)
uuid_00000000000dd0c8:
	mov -1256(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000dd0cb:
	mov -1248(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000dd0ce:
	mov -1240(%RBP),%RSP
	add $-1264, %RSP
	mov -1232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0cf
	jmp uuid_00000000000dd0d1
uuid_00000000000dd0cf:
	movb $1, -832(%rbp)
uuid_00000000000dd0d1:
	mov -1152(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000dd0d4:
	mov -848(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000dd0d7:
	mov -840(%RBP),%RSP
	add $-1264, %RSP
	mov -832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0db
	jmp uuid_00000000000dd0dd
uuid_00000000000dd0db:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd0d8
	jmp uuid_00000000000dd0da
uuid_00000000000dd0d8:
	movb $1, -704(%rbp)
uuid_00000000000dd0da:
	mov -1272(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000dd0dd:
	mov -752(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000dd0e0:
	mov -720(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000dd0e3:
	mov -712(%RBP),%RSP
	add $-1344, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0f3
	jmp uuid_00000000000dd0f5
uuid_00000000000dd0f3:
	push %RBP
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq $0
	push %RBP
	mov -1408(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0ed
	jmp uuid_00000000000dd0ef
uuid_00000000000dd0ed:
	push %RBP
	jmp uuid_00000000000dd0ea
	jmp uuid_00000000000dd0ec
uuid_00000000000dd0ea:
	push %RBP
	jmp uuid_00000000000dd0e7
	jmp uuid_00000000000dd0e9
uuid_00000000000dd0e7:
	push %RBP
	mov -1360(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd0e4
	jmp uuid_00000000000dd0e6
uuid_00000000000dd0e4:
	movb $1, -1416(%rbp)
uuid_00000000000dd0e6:
	mov -1448(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000dd0e9:
	mov -1440(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000dd0ec:
	mov -1432(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000dd0ef:
	mov -1424(%RBP),%RSP
	add $-1456, %RSP
	mov -1416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0f0
	jmp uuid_00000000000dd0f2
uuid_00000000000dd0f0:
	movb $1, -536(%rbp)
uuid_00000000000dd0f2:
	mov -1352(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000dd0f5:
	mov -552(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000dd0f8:
	mov -544(%RBP),%RSP
	add $-1456, %RSP
	mov -536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd14a
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1536(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd133
	jmp uuid_00000000000dd135
uuid_00000000000dd133:
	push %RBP
	mov -1528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1632(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd11e
	jmp uuid_00000000000dd120
uuid_00000000000dd11e:
	push %RBP
	mov -1624(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1728(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd10c
	jmp uuid_00000000000dd10e
uuid_00000000000dd10c:
	push %RBP
	mov -1720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1824(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd103
	jmp uuid_00000000000dd105
uuid_00000000000dd103:
	push %RBP
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	jmp uuid_00000000000dd100
	jmp uuid_00000000000dd102
uuid_00000000000dd100:
	movb $1, -1832(%rbp)
uuid_00000000000dd102:
	mov -1848(%RBP),%RSP
	add $-1872, %RSP
uuid_00000000000dd105:
	mov -1840(%RBP),%RSP
	add $-1872, %RSP
	mov -1832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd109
	jmp uuid_00000000000dd10b
uuid_00000000000dd109:
	push %RBP
	mov -1712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd106
	jmp uuid_00000000000dd108
uuid_00000000000dd106:
	movb $1, -1736(%rbp)
uuid_00000000000dd108:
	mov -1880(%RBP),%RSP
	add $-1952, %RSP
uuid_00000000000dd10b:
	mov -1752(%RBP),%RSP
	add $-1952, %RSP
uuid_00000000000dd10e:
	mov -1744(%RBP),%RSP
	add $-1952, %RSP
	mov -1736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd11b
	jmp uuid_00000000000dd11d
uuid_00000000000dd11b:
	push %RBP
	mov -1616(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2032(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd115
	jmp uuid_00000000000dd117
uuid_00000000000dd115:
	push %RBP
	jmp uuid_00000000000dd112
	jmp uuid_00000000000dd114
uuid_00000000000dd112:
	push %RBP
	mov -1968(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2072(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd10f
	jmp uuid_00000000000dd111
uuid_00000000000dd10f:
	movb $1, -2040(%rbp)
uuid_00000000000dd111:
	mov -2064(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000dd114:
	mov -2056(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000dd117:
	mov -2048(%RBP),%RSP
	add $-2072, %RSP
	mov -2040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd118
	jmp uuid_00000000000dd11a
uuid_00000000000dd118:
	movb $1, -1640(%rbp)
uuid_00000000000dd11a:
	mov -1960(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000dd11d:
	mov -1656(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000dd120:
	mov -1648(%RBP),%RSP
	add $-2072, %RSP
	mov -1640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd130
	jmp uuid_00000000000dd132
uuid_00000000000dd130:
	push %RBP
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	pushq $0
	push %RBP
	mov -2136(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd12a
	jmp uuid_00000000000dd12c
uuid_00000000000dd12a:
	push %RBP
	jmp uuid_00000000000dd127
	jmp uuid_00000000000dd129
uuid_00000000000dd127:
	push %RBP
	jmp uuid_00000000000dd124
	jmp uuid_00000000000dd126
uuid_00000000000dd124:
	push %RBP
	mov -2088(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd121
	jmp uuid_00000000000dd123
uuid_00000000000dd121:
	movb $1, -2144(%rbp)
uuid_00000000000dd123:
	mov -2176(%RBP),%RSP
	add $-2184, %RSP
uuid_00000000000dd126:
	mov -2168(%RBP),%RSP
	add $-2184, %RSP
uuid_00000000000dd129:
	mov -2160(%RBP),%RSP
	add $-2184, %RSP
uuid_00000000000dd12c:
	mov -2152(%RBP),%RSP
	add $-2184, %RSP
	mov -2144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd12d
	jmp uuid_00000000000dd12f
uuid_00000000000dd12d:
	movb $1, -1544(%rbp)
uuid_00000000000dd12f:
	mov -2080(%RBP),%RSP
	add $-2184, %RSP
uuid_00000000000dd132:
	mov -1560(%RBP),%RSP
	add $-2184, %RSP
uuid_00000000000dd135:
	mov -1552(%RBP),%RSP
	add $-2184, %RSP
	mov -1544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd147
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -2264(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd13c
	jmp uuid_00000000000dd13e
uuid_00000000000dd13c:
	push %RBP
	jmp uuid_00000000000dd139
	jmp uuid_00000000000dd13b
uuid_00000000000dd139:
	push %RBP
	jmp uuid_00000000000dd136
	jmp uuid_00000000000dd138
uuid_00000000000dd136:
	movb $1, -2272(%rbp)
uuid_00000000000dd138:
	mov -2296(%RBP),%RSP
	add $-2296, %RSP
uuid_00000000000dd13b:
	mov -2288(%RBP),%RSP
	add $-2296, %RSP
uuid_00000000000dd13e:
	mov -2280(%RBP),%RSP
	add $-2296, %RSP
	mov -2272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd144
	push %RBP
	jmp uuid_00000000000dd141
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd140
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd143
uuid_00000000000dd141:
uuid_00000000000dd143:
	mov -2304(%RBP),%RSP
	add $-2304, %RSP
	jmp uuid_00000000000dd146
uuid_00000000000dd144:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd13f
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd146:
	mov -2192(%RBP),%RSP
	add $-2296, %RSP
	jmp uuid_00000000000dd149
uuid_00000000000dd147:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3a5
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_type_SB_context_CL_TContextTContext, %r15
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	mov $global_SB_type_SB_context_CL_TContextTContext, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
#call function mark-global-as-seen : Arrow<Cons<Cons<String,Type>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call mark_SB_global_SB_as_SB_seen_CL_ArrowNilConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd149:
	mov -1464(%RBP),%RSP
	add $-2208, %RSP
	jmp uuid_00000000000dd14c
uuid_00000000000dd14a:
#call function typeof-lhs : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	mov %RBX, %RBP
	call typeof_SB_lhs_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd0f9
#call function guess-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call guess_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1504(%RBP)
	popq -1496(%RBP)
	popq -1488(%RBP)
	jmp uuid_00000000000dd0fb
uuid_00000000000dd0f9:
uuid_00000000000dd0fb:
	mov -1512(%RBP),%RSP
	add $-1512, %RSP
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db622
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function enrich : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call enrich_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -1536(%RBP)
	popq -1528(%RBP)
	popq -1520(%RBP)
	push %RBP
#call function is-nil : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	mov %RBX, %RBP
	call is_SB_nil_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0fd
	jmp uuid_00000000000dd0ff
uuid_00000000000dd0fd:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd0fc
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd0ff:
	mov -1544(%RBP),%RSP
	add $-1544, %RSP
#call function mark-global-as-seen : Arrow<Cons<Cons<String,Type>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1456(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call mark_SB_global_SB_as_SB_seen_CL_ArrowNilConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_type_SB_context_CL_TContextTContext, %r15
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1456(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	mov $global_SB_type_SB_context_CL_TContextTContext, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
uuid_00000000000dd14c:
	mov -456(%RBP),%RSP
	add $-1544, %RSP
	jmp uuid_00000000000dd14f
uuid_00000000000dd14d:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -448(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
#call function infer-type-definition : Arrow<Cons<Cons<Type,AST>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq $0
	mov %RBX, %RBP
	call infer_SB_type_SB_definition_CL_ArrowU64ConsU64ConsASTType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	push %RBP
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0ad
	jmp uuid_00000000000dd0af
uuid_00000000000dd0ad:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0aa
	jmp uuid_00000000000dd0ac
uuid_00000000000dd0aa:
	push %RBP
	mov -520(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd0a7
	jmp uuid_00000000000dd0a9
uuid_00000000000dd0a7:
	movb $1, -544(%rbp)
uuid_00000000000dd0a9:
	mov -608(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000dd0ac:
	mov -560(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000dd0af:
	mov -552(%RBP),%RSP
	add $-616, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0b4
	push %RBP
	jmp uuid_00000000000dd0b1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd0b0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd0b3
uuid_00000000000dd0b1:
uuid_00000000000dd0b3:
	mov -624(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000dd0b6
uuid_00000000000dd0b4:
#call function index-size-of-class : Arrow<Cons<String,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -616(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call index_SB_size_SB_of_SB_class_CL_ArrowNilConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd0b6:
	mov -512(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000dd14f:
	mov -160(%RBP),%RSP
	add $-616, %RSP
	mov %rbp, %rsp
	sub $80, %rsp
	ret
assert_SB_well_SB_typed_CL_ArrowNilAST:
uuid_00000000000dd15d:
#call function is-seq : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call is_SB_seq_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd15e
	jmp uuid_00000000000dd15f
uuid_00000000000dd15e:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd156
	jmp uuid_00000000000dd158
uuid_00000000000dd156:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd153
	jmp uuid_00000000000dd155
uuid_00000000000dd153:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd150
	jmp uuid_00000000000dd152
uuid_00000000000dd150:
	movb $1, -240(%rbp)
uuid_00000000000dd152:
	mov -336(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000dd155:
	mov -256(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000dd158:
	mov -248(%RBP),%RSP
	add $-408, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd15a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd159
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd15c
uuid_00000000000dd15a:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -408(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -400(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -392(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dd15c:
	mov -160(%RBP),%RSP
	add $-408, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dd15d
uuid_00000000000dd15f:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2e0
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2dd
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd166
	jmp uuid_00000000000dd168
uuid_00000000000dd166:
	push %RBP
	mov -384(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd163
	jmp uuid_00000000000dd165
uuid_00000000000dd163:
	push %RBP
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	jmp uuid_00000000000dd160
	jmp uuid_00000000000dd162
uuid_00000000000dd160:
	movb $1, -400(%rbp)
uuid_00000000000dd162:
	mov -496(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000dd165:
	mov -416(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000dd168:
	mov -408(%RBP),%RSP
	add $-552, %RSP
	mov -400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2da
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd172
	jmp uuid_00000000000dd174
uuid_00000000000dd172:
	push %RBP
	jmp uuid_00000000000dd16f
	jmp uuid_00000000000dd171
uuid_00000000000dd16f:
	push %RBP
	jmp uuid_00000000000dd16c
	jmp uuid_00000000000dd16e
uuid_00000000000dd16c:
	movb $1, -640(%rbp)
uuid_00000000000dd16e:
	mov -664(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000dd171:
	mov -656(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000dd174:
	mov -648(%RBP),%RSP
	add $-664, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2d7
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -744(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd190
	jmp uuid_00000000000dd192
uuid_00000000000dd190:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd18d
	jmp uuid_00000000000dd18f
uuid_00000000000dd18d:
	push %RBP
	mov -728(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd187
	jmp uuid_00000000000dd189
uuid_00000000000dd187:
	push %RBP
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	jmp uuid_00000000000dd184
	jmp uuid_00000000000dd186
uuid_00000000000dd184:
	push %RBP
	mov -888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1048(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd181
	jmp uuid_00000000000dd183
uuid_00000000000dd181:
	push %RBP
	mov -880(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1128(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd17b
	jmp uuid_00000000000dd17d
uuid_00000000000dd17b:
	push %RBP
	jmp uuid_00000000000dd178
	jmp uuid_00000000000dd17a
uuid_00000000000dd178:
	push %RBP
	mov -1064(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd175
	jmp uuid_00000000000dd177
uuid_00000000000dd175:
	movb $1, -1136(%rbp)
uuid_00000000000dd177:
	mov -1160(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000dd17a:
	mov -1152(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000dd17d:
	mov -1144(%RBP),%RSP
	add $-1168, %RSP
	mov -1136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd17e
	jmp uuid_00000000000dd180
uuid_00000000000dd17e:
	movb $1, -928(%rbp)
uuid_00000000000dd180:
	mov -1056(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000dd183:
	mov -976(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000dd186:
	mov -944(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000dd189:
	mov -936(%RBP),%RSP
	add $-1168, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd18a
	jmp uuid_00000000000dd18c
uuid_00000000000dd18a:
	movb $1, -752(%rbp)
uuid_00000000000dd18c:
	mov -848(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000dd18f:
	mov -768(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000dd192:
	mov -760(%RBP),%RSP
	add $-1168, %RSP
	mov -752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2d4
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1248(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1a2
	jmp uuid_00000000000dd1a4
uuid_00000000000dd1a2:
	push %RBP
	jmp uuid_00000000000dd19f
	jmp uuid_00000000000dd1a1
uuid_00000000000dd19f:
	push %RBP
	mov -1232(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1352(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd199
	jmp uuid_00000000000dd19b
uuid_00000000000dd199:
	push %RBP
	jmp uuid_00000000000dd196
	jmp uuid_00000000000dd198
uuid_00000000000dd196:
	push %RBP
	mov -1288(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1392(%rbp)
	pushq $uuid_00000000000db432
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd193
	jmp uuid_00000000000dd195
uuid_00000000000dd193:
	movb $1, -1360(%rbp)
uuid_00000000000dd195:
	mov -1384(%RBP),%RSP
	add $-1392, %RSP
uuid_00000000000dd198:
	mov -1376(%RBP),%RSP
	add $-1392, %RSP
uuid_00000000000dd19b:
	mov -1368(%RBP),%RSP
	add $-1392, %RSP
	mov -1360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd19c
	jmp uuid_00000000000dd19e
uuid_00000000000dd19c:
	movb $1, -1256(%rbp)
uuid_00000000000dd19e:
	mov -1280(%RBP),%RSP
	add $-1392, %RSP
uuid_00000000000dd1a1:
	mov -1272(%RBP),%RSP
	add $-1392, %RSP
uuid_00000000000dd1a4:
	mov -1264(%RBP),%RSP
	add $-1392, %RSP
	mov -1256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2d1
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1472(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1bd
	jmp uuid_00000000000dd1bf
uuid_00000000000dd1bd:
	push %RBP
	mov -1464(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1568(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1ab
	jmp uuid_00000000000dd1ad
uuid_00000000000dd1ab:
	push %RBP
	jmp uuid_00000000000dd1a8
	jmp uuid_00000000000dd1aa
uuid_00000000000dd1a8:
	push %RBP
	jmp uuid_00000000000dd1a5
	jmp uuid_00000000000dd1a7
uuid_00000000000dd1a5:
	movb $1, -1576(%rbp)
uuid_00000000000dd1a7:
	mov -1600(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000dd1aa:
	mov -1592(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000dd1ad:
	mov -1584(%RBP),%RSP
	add $-1600, %RSP
	mov -1576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1ba
	jmp uuid_00000000000dd1bc
uuid_00000000000dd1ba:
	push %RBP
	mov -1456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1680(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1b4
	jmp uuid_00000000000dd1b6
uuid_00000000000dd1b4:
	push %RBP
	jmp uuid_00000000000dd1b1
	jmp uuid_00000000000dd1b3
uuid_00000000000dd1b1:
	push %RBP
	mov -1616(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1720(%rbp)
	pushq $uuid_00000000000db44f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd1ae
	jmp uuid_00000000000dd1b0
uuid_00000000000dd1ae:
	movb $1, -1688(%rbp)
uuid_00000000000dd1b0:
	mov -1712(%RBP),%RSP
	add $-1720, %RSP
uuid_00000000000dd1b3:
	mov -1704(%RBP),%RSP
	add $-1720, %RSP
uuid_00000000000dd1b6:
	mov -1696(%RBP),%RSP
	add $-1720, %RSP
	mov -1688(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1b7
	jmp uuid_00000000000dd1b9
uuid_00000000000dd1b7:
	movb $1, -1480(%rbp)
uuid_00000000000dd1b9:
	mov -1608(%RBP),%RSP
	add $-1720, %RSP
uuid_00000000000dd1bc:
	mov -1496(%RBP),%RSP
	add $-1720, %RSP
uuid_00000000000dd1bf:
	mov -1488(%RBP),%RSP
	add $-1720, %RSP
	mov -1480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2ce
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1800(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1de
	jmp uuid_00000000000dd1e0
uuid_00000000000dd1de:
	push %RBP
	mov -1792(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1896(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1cc
	jmp uuid_00000000000dd1ce
uuid_00000000000dd1cc:
	push %RBP
	mov -1888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1992(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1c3
	jmp uuid_00000000000dd1c5
uuid_00000000000dd1c3:
	push %RBP
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	jmp uuid_00000000000dd1c0
	jmp uuid_00000000000dd1c2
uuid_00000000000dd1c0:
	movb $1, -2000(%rbp)
uuid_00000000000dd1c2:
	mov -2016(%RBP),%RSP
	add $-2040, %RSP
uuid_00000000000dd1c5:
	mov -2008(%RBP),%RSP
	add $-2040, %RSP
	mov -2000(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1c9
	jmp uuid_00000000000dd1cb
uuid_00000000000dd1c9:
	push %RBP
	mov -1880(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd1c6
	jmp uuid_00000000000dd1c8
uuid_00000000000dd1c6:
	movb $1, -1904(%rbp)
uuid_00000000000dd1c8:
	mov -2048(%RBP),%RSP
	add $-2120, %RSP
uuid_00000000000dd1cb:
	mov -1920(%RBP),%RSP
	add $-2120, %RSP
uuid_00000000000dd1ce:
	mov -1912(%RBP),%RSP
	add $-2120, %RSP
	mov -1904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1db
	jmp uuid_00000000000dd1dd
uuid_00000000000dd1db:
	push %RBP
	mov -1784(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2200(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1d5
	jmp uuid_00000000000dd1d7
uuid_00000000000dd1d5:
	push %RBP
	jmp uuid_00000000000dd1d2
	jmp uuid_00000000000dd1d4
uuid_00000000000dd1d2:
	push %RBP
	mov -2136(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2240(%rbp)
	pushq $uuid_00000000000db15f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd1cf
	jmp uuid_00000000000dd1d1
uuid_00000000000dd1cf:
	movb $1, -2208(%rbp)
uuid_00000000000dd1d1:
	mov -2232(%RBP),%RSP
	add $-2240, %RSP
uuid_00000000000dd1d4:
	mov -2224(%RBP),%RSP
	add $-2240, %RSP
uuid_00000000000dd1d7:
	mov -2216(%RBP),%RSP
	add $-2240, %RSP
	mov -2208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1d8
	jmp uuid_00000000000dd1da
uuid_00000000000dd1d8:
	movb $1, -1808(%rbp)
uuid_00000000000dd1da:
	mov -2128(%RBP),%RSP
	add $-2240, %RSP
uuid_00000000000dd1dd:
	mov -1824(%RBP),%RSP
	add $-2240, %RSP
uuid_00000000000dd1e0:
	mov -1816(%RBP),%RSP
	add $-2240, %RSP
	mov -1808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2cb
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -2320(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1ff
	jmp uuid_00000000000dd201
uuid_00000000000dd1ff:
	push %RBP
	mov -2312(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2416(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1ed
	jmp uuid_00000000000dd1ef
uuid_00000000000dd1ed:
	push %RBP
	mov -2408(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2512(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1e4
	jmp uuid_00000000000dd1e6
uuid_00000000000dd1e4:
	push %RBP
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	jmp uuid_00000000000dd1e1
	jmp uuid_00000000000dd1e3
uuid_00000000000dd1e1:
	movb $1, -2520(%rbp)
uuid_00000000000dd1e3:
	mov -2536(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000dd1e6:
	mov -2528(%RBP),%RSP
	add $-2560, %RSP
	mov -2520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1ea
	jmp uuid_00000000000dd1ec
uuid_00000000000dd1ea:
	push %RBP
	mov -2400(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd1e7
	jmp uuid_00000000000dd1e9
uuid_00000000000dd1e7:
	movb $1, -2424(%rbp)
uuid_00000000000dd1e9:
	mov -2568(%RBP),%RSP
	add $-2640, %RSP
uuid_00000000000dd1ec:
	mov -2440(%RBP),%RSP
	add $-2640, %RSP
uuid_00000000000dd1ef:
	mov -2432(%RBP),%RSP
	add $-2640, %RSP
	mov -2424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1fc
	jmp uuid_00000000000dd1fe
uuid_00000000000dd1fc:
	push %RBP
	mov -2304(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2720(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1f6
	jmp uuid_00000000000dd1f8
uuid_00000000000dd1f6:
	push %RBP
	jmp uuid_00000000000dd1f3
	jmp uuid_00000000000dd1f5
uuid_00000000000dd1f3:
	push %RBP
	mov -2656(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2760(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd1f0
	jmp uuid_00000000000dd1f2
uuid_00000000000dd1f0:
	movb $1, -2728(%rbp)
uuid_00000000000dd1f2:
	mov -2752(%RBP),%RSP
	add $-2760, %RSP
uuid_00000000000dd1f5:
	mov -2744(%RBP),%RSP
	add $-2760, %RSP
uuid_00000000000dd1f8:
	mov -2736(%RBP),%RSP
	add $-2760, %RSP
	mov -2728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1f9
	jmp uuid_00000000000dd1fb
uuid_00000000000dd1f9:
	movb $1, -2328(%rbp)
uuid_00000000000dd1fb:
	mov -2648(%RBP),%RSP
	add $-2760, %RSP
uuid_00000000000dd1fe:
	mov -2344(%RBP),%RSP
	add $-2760, %RSP
uuid_00000000000dd201:
	mov -2336(%RBP),%RSP
	add $-2760, %RSP
	mov -2328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2c8
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -2840(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd223
	jmp uuid_00000000000dd225
uuid_00000000000dd223:
	push %RBP
	mov -2832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd220
	jmp uuid_00000000000dd222
uuid_00000000000dd220:
	push %RBP
	mov -2824(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3016(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd21a
	jmp uuid_00000000000dd21c
uuid_00000000000dd21a:
	push %RBP
	mov -3008(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd217
	jmp uuid_00000000000dd219
uuid_00000000000dd217:
	push %RBP
	mov -3000(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3192(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd211
	jmp uuid_00000000000dd213
uuid_00000000000dd211:
	push %RBP
	mov -3184(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd20e
	jmp uuid_00000000000dd210
uuid_00000000000dd20e:
	push %RBP
	mov -3176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3368(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd208
	jmp uuid_00000000000dd20a
uuid_00000000000dd208:
	push %RBP
	jmp uuid_00000000000dd205
	jmp uuid_00000000000dd207
uuid_00000000000dd205:
	push %RBP
	mov -3304(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3408(%rbp)
	pushq $uuid_00000000000db462
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd202
	jmp uuid_00000000000dd204
uuid_00000000000dd202:
	movb $1, -3376(%rbp)
uuid_00000000000dd204:
	mov -3400(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000dd207:
	mov -3392(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000dd20a:
	mov -3384(%RBP),%RSP
	add $-3408, %RSP
	mov -3376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd20b
	jmp uuid_00000000000dd20d
uuid_00000000000dd20b:
	movb $1, -3200(%rbp)
uuid_00000000000dd20d:
	mov -3296(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000dd210:
	mov -3216(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000dd213:
	mov -3208(%RBP),%RSP
	add $-3408, %RSP
	mov -3200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd214
	jmp uuid_00000000000dd216
uuid_00000000000dd214:
	movb $1, -3024(%rbp)
uuid_00000000000dd216:
	mov -3120(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000dd219:
	mov -3040(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000dd21c:
	mov -3032(%RBP),%RSP
	add $-3408, %RSP
	mov -3024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd21d
	jmp uuid_00000000000dd21f
uuid_00000000000dd21d:
	movb $1, -2848(%rbp)
uuid_00000000000dd21f:
	mov -2944(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000dd222:
	mov -2864(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000dd225:
	mov -2856(%RBP),%RSP
	add $-3408, %RSP
	mov -2848(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2c5
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -3488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd23f
	jmp uuid_00000000000dd241
uuid_00000000000dd23f:
	push %RBP
	mov -3480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd23c
	jmp uuid_00000000000dd23e
uuid_00000000000dd23c:
	push %RBP
	mov -3472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3664(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd236
	jmp uuid_00000000000dd238
uuid_00000000000dd236:
	push %RBP
	mov -3656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd233
	jmp uuid_00000000000dd235
uuid_00000000000dd233:
	push %RBP
	mov -3648(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3840(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd22d
	jmp uuid_00000000000dd22f
uuid_00000000000dd22d:
	push %RBP
	jmp uuid_00000000000dd22a
	jmp uuid_00000000000dd22c
uuid_00000000000dd22a:
	push %RBP
	mov -3776(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3880(%rbp)
	pushq $uuid_00000000000dd226
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd227
	jmp uuid_00000000000dd229
uuid_00000000000dd227:
	movb $1, -3848(%rbp)
uuid_00000000000dd229:
	mov -3872(%RBP),%RSP
	add $-3880, %RSP
uuid_00000000000dd22c:
	mov -3864(%RBP),%RSP
	add $-3880, %RSP
uuid_00000000000dd22f:
	mov -3856(%RBP),%RSP
	add $-3880, %RSP
	mov -3848(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd230
	jmp uuid_00000000000dd232
uuid_00000000000dd230:
	movb $1, -3672(%rbp)
uuid_00000000000dd232:
	mov -3768(%RBP),%RSP
	add $-3880, %RSP
uuid_00000000000dd235:
	mov -3688(%RBP),%RSP
	add $-3880, %RSP
uuid_00000000000dd238:
	mov -3680(%RBP),%RSP
	add $-3880, %RSP
	mov -3672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd239
	jmp uuid_00000000000dd23b
uuid_00000000000dd239:
	movb $1, -3496(%rbp)
uuid_00000000000dd23b:
	mov -3592(%RBP),%RSP
	add $-3880, %RSP
uuid_00000000000dd23e:
	mov -3512(%RBP),%RSP
	add $-3880, %RSP
uuid_00000000000dd241:
	mov -3504(%RBP),%RSP
	add $-3880, %RSP
	mov -3496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2c2
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -3960(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd245
	jmp uuid_00000000000dd247
uuid_00000000000dd245:
	push %RBP
	jmp uuid_00000000000dd242
	jmp uuid_00000000000dd244
uuid_00000000000dd242:
	movb $1, -3968(%rbp)
uuid_00000000000dd244:
	mov -3984(%RBP),%RSP
	add $-3984, %RSP
uuid_00000000000dd247:
	mov -3976(%RBP),%RSP
	add $-3984, %RSP
	mov -3968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2bf
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -4064(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd257
	jmp uuid_00000000000dd259
uuid_00000000000dd257:
	push %RBP
	mov -4056(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd254
	jmp uuid_00000000000dd256
uuid_00000000000dd254:
	push %RBP
	mov -4048(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4240(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd24e
	jmp uuid_00000000000dd250
uuid_00000000000dd24e:
	push %RBP
	jmp uuid_00000000000dd24b
	jmp uuid_00000000000dd24d
uuid_00000000000dd24b:
	push %RBP
	mov -4176(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4280(%rbp)
	pushq $uuid_00000000000db50d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd248
	jmp uuid_00000000000dd24a
uuid_00000000000dd248:
	movb $1, -4248(%rbp)
uuid_00000000000dd24a:
	mov -4272(%RBP),%RSP
	add $-4280, %RSP
uuid_00000000000dd24d:
	mov -4264(%RBP),%RSP
	add $-4280, %RSP
uuid_00000000000dd250:
	mov -4256(%RBP),%RSP
	add $-4280, %RSP
	mov -4248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd251
	jmp uuid_00000000000dd253
uuid_00000000000dd251:
	movb $1, -4072(%rbp)
uuid_00000000000dd253:
	mov -4168(%RBP),%RSP
	add $-4280, %RSP
uuid_00000000000dd256:
	mov -4088(%RBP),%RSP
	add $-4280, %RSP
uuid_00000000000dd259:
	mov -4080(%RBP),%RSP
	add $-4280, %RSP
	mov -4072(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2bc
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -4360(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd269
	jmp uuid_00000000000dd26b
uuid_00000000000dd269:
	push %RBP
	mov -4352(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd266
	jmp uuid_00000000000dd268
uuid_00000000000dd266:
	push %RBP
	mov -4344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4536(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd260
	jmp uuid_00000000000dd262
uuid_00000000000dd260:
	push %RBP
	jmp uuid_00000000000dd25d
	jmp uuid_00000000000dd25f
uuid_00000000000dd25d:
	push %RBP
	mov -4472(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4576(%rbp)
	pushq $uuid_00000000000db4fa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd25a
	jmp uuid_00000000000dd25c
uuid_00000000000dd25a:
	movb $1, -4544(%rbp)
uuid_00000000000dd25c:
	mov -4568(%RBP),%RSP
	add $-4576, %RSP
uuid_00000000000dd25f:
	mov -4560(%RBP),%RSP
	add $-4576, %RSP
uuid_00000000000dd262:
	mov -4552(%RBP),%RSP
	add $-4576, %RSP
	mov -4544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd263
	jmp uuid_00000000000dd265
uuid_00000000000dd263:
	movb $1, -4368(%rbp)
uuid_00000000000dd265:
	mov -4464(%RBP),%RSP
	add $-4576, %RSP
uuid_00000000000dd268:
	mov -4384(%RBP),%RSP
	add $-4576, %RSP
uuid_00000000000dd26b:
	mov -4376(%RBP),%RSP
	add $-4576, %RSP
	mov -4368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2b9
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -4656(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd272
	jmp uuid_00000000000dd274
uuid_00000000000dd272:
	push %RBP
	jmp uuid_00000000000dd26f
	jmp uuid_00000000000dd271
uuid_00000000000dd26f:
	push %RBP
	mov -4592(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd26c
	jmp uuid_00000000000dd26e
uuid_00000000000dd26c:
	movb $1, -4664(%rbp)
uuid_00000000000dd26e:
	mov -4688(%RBP),%RSP
	add $-4696, %RSP
uuid_00000000000dd271:
	mov -4680(%RBP),%RSP
	add $-4696, %RSP
uuid_00000000000dd274:
	mov -4672(%RBP),%RSP
	add $-4696, %RSP
	mov -4664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2b6
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -4776(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd27b
	jmp uuid_00000000000dd27d
uuid_00000000000dd27b:
	push %RBP
	jmp uuid_00000000000dd278
	jmp uuid_00000000000dd27a
uuid_00000000000dd278:
	push %RBP
	mov -4712(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd275
	jmp uuid_00000000000dd277
uuid_00000000000dd275:
	movb $1, -4784(%rbp)
uuid_00000000000dd277:
	mov -4808(%RBP),%RSP
	add $-4816, %RSP
uuid_00000000000dd27a:
	mov -4800(%RBP),%RSP
	add $-4816, %RSP
uuid_00000000000dd27d:
	mov -4792(%RBP),%RSP
	add $-4816, %RSP
	mov -4784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2b3
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -4896(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd287
	jmp uuid_00000000000dd289
uuid_00000000000dd287:
	push %RBP
	pushq -4872(%RBP)
	pushq -4880(%RBP)
	pushq -4888(%RBP)
	jmp uuid_00000000000dd284
	jmp uuid_00000000000dd286
uuid_00000000000dd284:
	push %RBP
	mov -4864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd281
	jmp uuid_00000000000dd283
uuid_00000000000dd281:
	push %RBP
	mov -4856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd27e
	jmp uuid_00000000000dd280
uuid_00000000000dd27e:
	movb $1, -4904(%rbp)
uuid_00000000000dd280:
	mov -5032(%RBP),%RSP
	add $-5104, %RSP
uuid_00000000000dd283:
	mov -4952(%RBP),%RSP
	add $-5104, %RSP
uuid_00000000000dd286:
	mov -4920(%RBP),%RSP
	add $-5104, %RSP
uuid_00000000000dd289:
	mov -4912(%RBP),%RSP
	add $-5104, %RSP
	mov -4904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2b0
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -5184(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd290
	jmp uuid_00000000000dd292
uuid_00000000000dd290:
	push %RBP
	mov -5176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd28d
	jmp uuid_00000000000dd28f
uuid_00000000000dd28d:
	push %RBP
	mov -5168(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd28a
	jmp uuid_00000000000dd28c
uuid_00000000000dd28a:
	movb $1, -5192(%rbp)
uuid_00000000000dd28c:
	mov -5288(%RBP),%RSP
	add $-5360, %RSP
uuid_00000000000dd28f:
	mov -5208(%RBP),%RSP
	add $-5360, %RSP
uuid_00000000000dd292:
	mov -5200(%RBP),%RSP
	add $-5360, %RSP
	mov -5192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2ad
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -5440(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd299
	jmp uuid_00000000000dd29b
uuid_00000000000dd299:
	push %RBP
	mov -5432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd296
	jmp uuid_00000000000dd298
uuid_00000000000dd296:
	push %RBP
	mov -5424(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd293
	jmp uuid_00000000000dd295
uuid_00000000000dd293:
	movb $1, -5448(%rbp)
uuid_00000000000dd295:
	mov -5544(%RBP),%RSP
	add $-5616, %RSP
uuid_00000000000dd298:
	mov -5464(%RBP),%RSP
	add $-5616, %RSP
uuid_00000000000dd29b:
	mov -5456(%RBP),%RSP
	add $-5616, %RSP
	mov -5448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2aa
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -5696(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd29f
	jmp uuid_00000000000dd2a1
uuid_00000000000dd29f:
	push %RBP
	jmp uuid_00000000000dd29c
	jmp uuid_00000000000dd29e
uuid_00000000000dd29c:
	movb $1, -5704(%rbp)
uuid_00000000000dd29e:
	mov -5720(%RBP),%RSP
	add $-5720, %RSP
uuid_00000000000dd2a1:
	mov -5712(%RBP),%RSP
	add $-5720, %RSP
	mov -5704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2a7
	push %RBP
	jmp uuid_00000000000dd2a4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd2a3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd2a6
uuid_00000000000dd2a4:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd2a2
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd2a6:
	mov -5728(%RBP),%RSP
	add $-5728, %RSP
	jmp uuid_00000000000dd2a9
uuid_00000000000dd2a7:
uuid_00000000000dd2a9:
	mov -5624(%RBP),%RSP
	add $-5720, %RSP
	jmp uuid_00000000000dd2ac
uuid_00000000000dd2aa:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	pushq -5592(%rbp)
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5472(%rbp)
	pushq -5480(%rbp)
	pushq -5488(%rbp)
	pushq -5496(%rbp)
	pushq -5504(%rbp)
	pushq -5512(%rbp)
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd2ac:
	mov -5368(%RBP),%RSP
	add $-5616, %RSP
	jmp uuid_00000000000dd2af
uuid_00000000000dd2ad:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5296(%rbp)
	pushq -5304(%rbp)
	pushq -5312(%rbp)
	pushq -5320(%rbp)
	pushq -5328(%rbp)
	pushq -5336(%rbp)
	pushq -5344(%rbp)
	pushq -5352(%rbp)
	pushq -5360(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	pushq -5264(%rbp)
	pushq -5272(%rbp)
	pushq -5280(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd2af:
	mov -5112(%RBP),%RSP
	add $-5360, %RSP
	jmp uuid_00000000000dd2b2
uuid_00000000000dd2b0:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -4976(%rbp)
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd2b2:
	mov -4824(%RBP),%RSP
	add $-5104, %RSP
	jmp uuid_00000000000dd2b5
uuid_00000000000dd2b3:
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd2b5:
	mov -4704(%RBP),%RSP
	add $-4816, %RSP
	jmp uuid_00000000000dd2b8
uuid_00000000000dd2b6:
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd2b8:
	mov -4584(%RBP),%RSP
	add $-4696, %RSP
	jmp uuid_00000000000dd2bb
uuid_00000000000dd2b9:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	pushq -4408(%rbp)
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd2bb:
	mov -4288(%RBP),%RSP
	add $-4576, %RSP
	jmp uuid_00000000000dd2be
uuid_00000000000dd2bc:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4096(%rbp)
	pushq -4104(%rbp)
	pushq -4112(%rbp)
	pushq -4120(%rbp)
	pushq -4128(%rbp)
	pushq -4136(%rbp)
	pushq -4144(%rbp)
	pushq -4152(%rbp)
	pushq -4160(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd2be:
	mov -3992(%RBP),%RSP
	add $-4280, %RSP
	jmp uuid_00000000000dd2c1
uuid_00000000000dd2bf:
uuid_00000000000dd2c1:
	mov -3888(%RBP),%RSP
	add $-3984, %RSP
	jmp uuid_00000000000dd2c4
uuid_00000000000dd2c2:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3520(%rbp)
	pushq -3528(%rbp)
	pushq -3536(%rbp)
	pushq -3544(%rbp)
	pushq -3552(%rbp)
	pushq -3560(%rbp)
	pushq -3568(%rbp)
	pushq -3576(%rbp)
	pushq -3584(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd2c4:
	mov -3416(%RBP),%RSP
	add $-3880, %RSP
	jmp uuid_00000000000dd2c7
uuid_00000000000dd2c5:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3224(%rbp)
	pushq -3232(%rbp)
	pushq -3240(%rbp)
	pushq -3248(%rbp)
	pushq -3256(%rbp)
	pushq -3264(%rbp)
	pushq -3272(%rbp)
	pushq -3280(%rbp)
	pushq -3288(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3048(%rbp)
	pushq -3056(%rbp)
	pushq -3064(%rbp)
	pushq -3072(%rbp)
	pushq -3080(%rbp)
	pushq -3088(%rbp)
	pushq -3096(%rbp)
	pushq -3104(%rbp)
	pushq -3112(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2872(%rbp)
	pushq -2880(%rbp)
	pushq -2888(%rbp)
	pushq -2896(%rbp)
	pushq -2904(%rbp)
	pushq -2912(%rbp)
	pushq -2920(%rbp)
	pushq -2928(%rbp)
	pushq -2936(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd2c7:
	mov -2768(%RBP),%RSP
	add $-3408, %RSP
	jmp uuid_00000000000dd2ca
uuid_00000000000dd2c8:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	pushq -2592(%rbp)
	pushq -2600(%rbp)
	pushq -2608(%rbp)
	pushq -2616(%rbp)
	pushq -2624(%rbp)
	pushq -2632(%rbp)
	pushq -2640(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd2ca:
	mov -2248(%RBP),%RSP
	add $-2760, %RSP
	jmp uuid_00000000000dd2cd
uuid_00000000000dd2cb:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd2cd:
	mov -1728(%RBP),%RSP
	add $-2240, %RSP
	jmp uuid_00000000000dd2d0
uuid_00000000000dd2ce:
uuid_00000000000dd2d0:
	mov -1400(%RBP),%RSP
	add $-1720, %RSP
	jmp uuid_00000000000dd2d3
uuid_00000000000dd2d1:
uuid_00000000000dd2d3:
	mov -1176(%RBP),%RSP
	add $-1392, %RSP
	jmp uuid_00000000000dd2d6
uuid_00000000000dd2d4:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd2d6:
	mov -672(%RBP),%RSP
	add $-1168, %RSP
	jmp uuid_00000000000dd2d9
uuid_00000000000dd2d7:
uuid_00000000000dd2d9:
	mov -560(%RBP),%RSP
	add $-664, %RSP
	jmp uuid_00000000000dd2dc
uuid_00000000000dd2da:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd169
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd16b
uuid_00000000000dd169:
uuid_00000000000dd16b:
	mov -560(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000dd2dc:
	mov -320(%RBP),%RSP
	add $-560, %RSP
	jmp uuid_00000000000dd2df
uuid_00000000000dd2dd:
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd2df:
	mov -240(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000dd2e2
uuid_00000000000dd2e0:
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd2e2:
	mov -160(%RBP),%RSP
	add $-232, %RSP
	mov %rbp, %rsp
	sub $80, %rsp
	ret
assert_SB_one_SB_typed_CL_ArrowNilAST:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd2e3
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db587
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd2e5
uuid_00000000000dd2e3:
uuid_00000000000dd2e5:
	mov -88(%RBP),%RSP
	add $-88, %RSP
	mov %rbp, %rsp
	sub $80, %rsp
	ret
infer_SB_ctx_CL_ArrowTContextConsASTTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd30d
	jmp uuid_00000000000dd30f
uuid_00000000000dd30d:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2fb
	jmp uuid_00000000000dd2fd
uuid_00000000000dd2fb:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2e9
	jmp uuid_00000000000dd2eb
uuid_00000000000dd2e9:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000dd2e6
	jmp uuid_00000000000dd2e8
uuid_00000000000dd2e6:
	movb $1, -552(%rbp)
uuid_00000000000dd2e8:
	mov -568(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000dd2eb:
	mov -560(%RBP),%RSP
	add $-592, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2f8
	jmp uuid_00000000000dd2fa
uuid_00000000000dd2f8:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2f2
	jmp uuid_00000000000dd2f4
uuid_00000000000dd2f2:
	push %RBP
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	jmp uuid_00000000000dd2ef
	jmp uuid_00000000000dd2f1
uuid_00000000000dd2ef:
	push %RBP
	mov -608(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd2ec
	jmp uuid_00000000000dd2ee
uuid_00000000000dd2ec:
	movb $1, -680(%rbp)
uuid_00000000000dd2ee:
	mov -760(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000dd2f1:
	mov -696(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000dd2f4:
	mov -688(%RBP),%RSP
	add $-768, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2f5
	jmp uuid_00000000000dd2f7
uuid_00000000000dd2f5:
	movb $1, -456(%rbp)
uuid_00000000000dd2f7:
	mov -600(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000dd2fa:
	mov -472(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000dd2fd:
	mov -464(%RBP),%RSP
	add $-768, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd30a
	jmp uuid_00000000000dd30c
uuid_00000000000dd30a:
	push %RBP
	mov -336(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd304
	jmp uuid_00000000000dd306
uuid_00000000000dd304:
	push %RBP
	jmp uuid_00000000000dd301
	jmp uuid_00000000000dd303
uuid_00000000000dd301:
	push %RBP
	mov -784(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -888(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd2fe
	jmp uuid_00000000000dd300
uuid_00000000000dd2fe:
	movb $1, -856(%rbp)
uuid_00000000000dd300:
	mov -880(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000dd303:
	mov -872(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000dd306:
	mov -864(%RBP),%RSP
	add $-888, %RSP
	mov -856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd307
	jmp uuid_00000000000dd309
uuid_00000000000dd307:
	movb $1, -360(%rbp)
uuid_00000000000dd309:
	mov -776(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000dd30c:
	mov -376(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000dd30f:
	mov -368(%RBP),%RSP
	add $-888, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd34e
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -968(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd340
	jmp uuid_00000000000dd342
uuid_00000000000dd340:
	push %RBP
	mov -960(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1064(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd337
	jmp uuid_00000000000dd339
uuid_00000000000dd337:
	push %RBP
	mov -1056(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1160(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd325
	jmp uuid_00000000000dd327
uuid_00000000000dd325:
	push %RBP
	mov -1152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1256(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd313
	jmp uuid_00000000000dd315
uuid_00000000000dd313:
	push %RBP
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	jmp uuid_00000000000dd310
	jmp uuid_00000000000dd312
uuid_00000000000dd310:
	movb $1, -1264(%rbp)
uuid_00000000000dd312:
	mov -1280(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000dd315:
	mov -1272(%RBP),%RSP
	add $-1304, %RSP
	mov -1264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd322
	jmp uuid_00000000000dd324
uuid_00000000000dd322:
	push %RBP
	mov -1144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1384(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd31c
	jmp uuid_00000000000dd31e
uuid_00000000000dd31c:
	push %RBP
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	jmp uuid_00000000000dd319
	jmp uuid_00000000000dd31b
uuid_00000000000dd319:
	push %RBP
	mov -1320(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd316
	jmp uuid_00000000000dd318
uuid_00000000000dd316:
	movb $1, -1392(%rbp)
uuid_00000000000dd318:
	mov -1472(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000dd31b:
	mov -1408(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000dd31e:
	mov -1400(%RBP),%RSP
	add $-1480, %RSP
	mov -1392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd31f
	jmp uuid_00000000000dd321
uuid_00000000000dd31f:
	movb $1, -1168(%rbp)
uuid_00000000000dd321:
	mov -1312(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000dd324:
	mov -1184(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000dd327:
	mov -1176(%RBP),%RSP
	add $-1480, %RSP
	mov -1168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd334
	jmp uuid_00000000000dd336
uuid_00000000000dd334:
	push %RBP
	mov -1048(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1560(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd32e
	jmp uuid_00000000000dd330
uuid_00000000000dd32e:
	push %RBP
	jmp uuid_00000000000dd32b
	jmp uuid_00000000000dd32d
uuid_00000000000dd32b:
	push %RBP
	mov -1496(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1600(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd328
	jmp uuid_00000000000dd32a
uuid_00000000000dd328:
	movb $1, -1568(%rbp)
uuid_00000000000dd32a:
	mov -1592(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000dd32d:
	mov -1584(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000dd330:
	mov -1576(%RBP),%RSP
	add $-1600, %RSP
	mov -1568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd331
	jmp uuid_00000000000dd333
uuid_00000000000dd331:
	movb $1, -1072(%rbp)
uuid_00000000000dd333:
	mov -1488(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000dd336:
	mov -1088(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000dd339:
	mov -1080(%RBP),%RSP
	add $-1600, %RSP
	mov -1072(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd33d
	jmp uuid_00000000000dd33f
uuid_00000000000dd33d:
	push %RBP
	mov -952(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd33a
	jmp uuid_00000000000dd33c
uuid_00000000000dd33a:
	movb $1, -976(%rbp)
uuid_00000000000dd33c:
	mov -1608(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000dd33f:
	mov -992(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000dd342:
	mov -984(%RBP),%RSP
	add $-1680, %RSP
	mov -976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd34b
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov -1760(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd348
	push %RBP
	jmp uuid_00000000000dd345
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd344
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd347
uuid_00000000000dd345:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd343
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd347:
	mov -1768(%RBP),%RSP
	add $-1768, %RSP
	jmp uuid_00000000000dd34a
uuid_00000000000dd348:
uuid_00000000000dd34a:
	mov -1688(%RBP),%RSP
	add $-1760, %RSP
	jmp uuid_00000000000dd34d
uuid_00000000000dd34b:
#call function maybe-local-variable : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call maybe_SB_local_SB_variable_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1304(%RBP)
	popq -1296(%RBP)
	popq -1288(%RBP)
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1480(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1480(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq $7
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function infer-ctx : Arrow<Cons<TContext,AST>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	mov %RBX, %RBP
	call infer_SB_ctx_CL_ArrowTContextConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function infer-tctx : Arrow<Cons<TContext,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dd34d:
	mov -896(%RBP),%RSP
	add $-1680, %RSP
	jmp uuid_00000000000dd350
uuid_00000000000dd34e:
#call function maybe-local-variable : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call maybe_SB_local_SB_variable_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -768(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -768(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq $7
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function infer-tctx : Arrow<Cons<TContext,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dd350:
	mov -280(%RBP),%RSP
	add $-888, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $200, %rsp
	ret
infer_SB_tctx_CL_ArrowTContextConsListTypeTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd362
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd35b
	jmp uuid_00000000000dd35d
uuid_00000000000dd35b:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd358
	jmp uuid_00000000000dd35a
uuid_00000000000dd358:
	push %RBP
	pushq -272(%RBP)
	pushq -280(%RBP)
	pushq -288(%RBP)
	jmp uuid_00000000000dd355
	jmp uuid_00000000000dd357
uuid_00000000000dd355:
	movb $1, -312(%rbp)
uuid_00000000000dd357:
	mov -376(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000dd35a:
	mov -328(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000dd35d:
	mov -320(%RBP),%RSP
	add $-400, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd35f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd35e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd361
uuid_00000000000dd35f:
#call function infer-tctx : Arrow<Cons<TContext,List<Type>>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsListTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function infer-tctx : Arrow<Cons<TContext,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dd361:
	mov -264(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000dd364
uuid_00000000000dd362:
uuid_00000000000dd364:
	mov -216(%RBP),%RSP
	add $-256, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $168, %rsp
	ret
infer_SB_tctx_CL_ArrowTContextConsTypeTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd36b
	jmp uuid_00000000000dd36d
uuid_00000000000dd36b:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd368
	jmp uuid_00000000000dd36a
uuid_00000000000dd368:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd365
	jmp uuid_00000000000dd367
uuid_00000000000dd365:
	movb $1, -216(%rbp)
uuid_00000000000dd367:
	mov -264(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000dd36a:
	mov -232(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000dd36d:
	mov -224(%RBP),%RSP
	add $-288, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd387
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -320(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd371
	jmp uuid_00000000000dd373
uuid_00000000000dd371:
	push %RBP
	mov -312(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd36e
	jmp uuid_00000000000dd370
uuid_00000000000dd36e:
	movb $1, -328(%rbp)
uuid_00000000000dd370:
	mov -344(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000dd373:
	mov -336(%RBP),%RSP
	add $-352, %RSP
	mov -328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd384
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd37a
	jmp uuid_00000000000dd37c
uuid_00000000000dd37a:
	push %RBP
	mov -376(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd377
	jmp uuid_00000000000dd379
uuid_00000000000dd377:
	push %RBP
	jmp uuid_00000000000dd374
	jmp uuid_00000000000dd376
uuid_00000000000dd374:
	movb $1, -392(%rbp)
uuid_00000000000dd376:
	mov -456(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000dd379:
	mov -408(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000dd37c:
	mov -400(%RBP),%RSP
	add $-456, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd381
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd37e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd37d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd380
uuid_00000000000dd37e:
uuid_00000000000dd380:
	mov -464(%RBP),%RSP
	add $-488, %RSP
	jmp uuid_00000000000dd383
uuid_00000000000dd381:
#call function infer-tctx : Arrow<Cons<TContext,List<Type>>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsListTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dd383:
	mov -360(%RBP),%RSP
	add $-456, %RSP
	jmp uuid_00000000000dd386
uuid_00000000000dd384:
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -352(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db996
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dd386:
	mov -296(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000dd389
uuid_00000000000dd387:
#call function infer-tctx : Arrow<Cons<TContext,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function infer-tctx : Arrow<Cons<TContext,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dd389:
	mov -184(%RBP),%RSP
	add $-288, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $152, %rsp
	ret
compile_SB_exit_SB_cleanup_CL_ArrowSNil:
	pushq $0
	pushq $0
	pushq $3
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd38a
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd38b
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd38c
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	subq $24, %rsp
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_data_SB_header_CL_ArrowSNil:
	pushq $0
	pushq $0
	pushq $3
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd38d
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	subq $24, %rsp
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_text_SB_header_CL_ArrowSNil:
	pushq $0
	pushq $0
	pushq $3
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd38e
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd38f
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd390
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_init_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd393
	jmp uuid_00000000000dd395
uuid_00000000000dd393:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd391
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_init_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd392
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
uuid_00000000000dd395:
	mov -40(%RBP),%RSP
	add $-40, %RSP
	push %RBP
	mov $main_SB_with_SB_argv_CL_U8, %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000dd398
	jmp uuid_00000000000dd39a
uuid_00000000000dd398:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd396
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd397
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
uuid_00000000000dd39a:
	mov -48(%RBP),%RSP
	add $-48, %RSP
	push %RBP
	mov $main_SB_with_CL_U8, %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000dd3a5
	jmp uuid_00000000000dd3a7
uuid_00000000000dd3a5:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd39b
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd39c
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	push %RBP
	mov $main_SB_with_SB_argv_CL_U8, %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000dd39f
	jmp uuid_00000000000dd3a1
uuid_00000000000dd39f:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd39d
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd39e
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
uuid_00000000000dd3a1:
	mov -64(%RBP),%RSP
	add $-64, %RSP
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd3a2
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd3a3
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd3a4
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
uuid_00000000000dd3a7:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	subq $24, %rsp
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_CL_ArrowNilNil:
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	push %RBP
	pushq -16(%rbp)
	mov -32(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd3af
	push %RBP
	pushq -16(%rbp)
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd3ac
	push %RBP
	pushq -16(%rbp)
	mov -64(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd3a9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd3a8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd3ab
uuid_00000000000dd3a9:
#call function compile-c : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_c_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd3ab:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000dd3ae
uuid_00000000000dd3ac:
#call function compile-blob : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_blob_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd3ae:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	jmp uuid_00000000000dd3b1
uuid_00000000000dd3af:
#call function compile-gnu : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_gnu_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd3b1:
	mov -24(%RBP),%RSP
	add $-32, %RSP
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_c_CL_ArrowNilNil:
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
uuid_00000000000dd3fc:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd3fd
	jmp uuid_00000000000dd3fe
uuid_00000000000dd3fd:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd3cd
	jmp uuid_00000000000dd3cf
uuid_00000000000dd3cd:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd3c4
	jmp uuid_00000000000dd3c6
uuid_00000000000dd3c4:
	push %RBP
	mov -392(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd3c1
	jmp uuid_00000000000dd3c3
uuid_00000000000dd3c1:
	push %RBP
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd3bb
	jmp uuid_00000000000dd3bd
uuid_00000000000dd3bb:
	push %RBP
	jmp uuid_00000000000dd3b8
	jmp uuid_00000000000dd3ba
uuid_00000000000dd3b8:
	push %RBP
	jmp uuid_00000000000dd3b5
	jmp uuid_00000000000dd3b7
uuid_00000000000dd3b5:
	push %RBP
	mov -512(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd3b2
	jmp uuid_00000000000dd3b4
uuid_00000000000dd3b2:
	movb $1, -568(%rbp)
uuid_00000000000dd3b4:
	mov -600(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000dd3b7:
	mov -592(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000dd3ba:
	mov -584(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000dd3bd:
	mov -576(%RBP),%RSP
	add $-608, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd3be
	jmp uuid_00000000000dd3c0
uuid_00000000000dd3be:
	movb $1, -408(%rbp)
uuid_00000000000dd3c0:
	mov -504(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000dd3c3:
	mov -424(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000dd3c6:
	mov -416(%RBP),%RSP
	add $-608, %RSP
	mov -408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd3ca
	jmp uuid_00000000000dd3cc
uuid_00000000000dd3ca:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd3c7
	jmp uuid_00000000000dd3c9
uuid_00000000000dd3c7:
	movb $1, -312(%rbp)
uuid_00000000000dd3c9:
	mov -616(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000dd3cc:
	mov -328(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000dd3cf:
	mov -320(%RBP),%RSP
	add $-688, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd3f9
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -768(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd3e6
	jmp uuid_00000000000dd3e8
uuid_00000000000dd3e6:
	push %RBP
	mov -760(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd3e3
	jmp uuid_00000000000dd3e5
uuid_00000000000dd3e3:
	push %RBP
	mov -752(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd3e0
	jmp uuid_00000000000dd3e2
uuid_00000000000dd3e0:
	movb $1, -776(%rbp)
uuid_00000000000dd3e2:
	mov -872(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000dd3e5:
	mov -792(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000dd3e8:
	mov -784(%RBP),%RSP
	add $-944, %RSP
	mov -776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd3f6
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1024(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd3ef
	jmp uuid_00000000000dd3f1
uuid_00000000000dd3ef:
	push %RBP
	jmp uuid_00000000000dd3ec
	jmp uuid_00000000000dd3ee
uuid_00000000000dd3ec:
	push %RBP
	mov -1008(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd3e9
	jmp uuid_00000000000dd3eb
uuid_00000000000dd3e9:
	movb $1, -1032(%rbp)
uuid_00000000000dd3eb:
	mov -1056(%RBP),%RSP
	add $-1128, %RSP
uuid_00000000000dd3ee:
	mov -1048(%RBP),%RSP
	add $-1128, %RSP
uuid_00000000000dd3f1:
	mov -1040(%RBP),%RSP
	add $-1128, %RSP
	mov -1032(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd3f3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd3f2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd3f5
uuid_00000000000dd3f3:
	movq -1128(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000dd3f5:
	mov -952(%RBP),%RSP
	add $-1128, %RSP
	jmp uuid_00000000000dd3f8
uuid_00000000000dd3f6:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -944(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -936(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -928(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -920(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -912(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -904(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -896(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -888(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -880(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000dd3f8:
	mov -696(%RBP),%RSP
	add $-944, %RSP
	jmp uuid_00000000000dd3fb
uuid_00000000000dd3f9:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq $uuid_00000000000dd3d0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd3d1
	jmp uuid_00000000000dd3d3
uuid_00000000000dd3d1:
	mov $assemble_SB_argv_SB_referenced_CL_U8, %r15
	movb $1, 0(%r15)
uuid_00000000000dd3d3:
	mov -696(%RBP),%RSP
	add $-696, %RSP
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd3dd
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd3da
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq $uuid_00000000000dd3d4
	pushq $0
	pushq $uuid_00000000000dd3d5
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd3d7
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3a5
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
#call function without-constructor : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call without_SB_constructor_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq $uuid_00000000000dd3d6
	pushq $0
	pushq -952(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContext, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -608(%rbp)
#call function without-constructor : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call without_SB_constructor_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $global_SB_ctx_CL_FContextFContext, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
	jmp uuid_00000000000dd3d9
uuid_00000000000dd3d7:
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContext, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -608(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $global_SB_ctx_CL_FContextFContext, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
uuid_00000000000dd3d9:
	mov -896(%RBP),%RSP
	add $-896, %RSP
	jmp uuid_00000000000dd3dc
uuid_00000000000dd3da:
#call function fragment::set-term : Arrow<Cons<Fragment,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_term_CL_ArrowFragmentConsASTFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContext, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -608(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $global_SB_ctx_CL_FContextFContext, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
uuid_00000000000dd3dc:
	mov -888(%RBP),%RSP
	add $-888, %RSP
	jmp uuid_00000000000dd3df
uuid_00000000000dd3dd:
uuid_00000000000dd3df:
	mov -880(%RBP),%RSP
	add $-880, %RSP
	movq -688(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -680(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -672(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -664(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -656(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -648(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -640(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -632(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -624(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000dd3fb:
	mov -232(%RBP),%RSP
	add $-880, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $152, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dd3fc
uuid_00000000000dd3fe:
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
uuid_00000000000dd41e:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd41f
	jmp uuid_00000000000dd420
uuid_00000000000dd41f:
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd417
	jmp uuid_00000000000dd419
uuid_00000000000dd417:
	push %RBP
	mov -368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd40e
	jmp uuid_00000000000dd410
uuid_00000000000dd40e:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd40b
	jmp uuid_00000000000dd40d
uuid_00000000000dd40b:
	push %RBP
	mov -456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -648(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd405
	jmp uuid_00000000000dd407
uuid_00000000000dd405:
	push %RBP
	jmp uuid_00000000000dd402
	jmp uuid_00000000000dd404
uuid_00000000000dd402:
	push %RBP
	mov -584(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd3ff
	jmp uuid_00000000000dd401
uuid_00000000000dd3ff:
	movb $1, -656(%rbp)
uuid_00000000000dd401:
	mov -680(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000dd404:
	mov -672(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000dd407:
	mov -664(%RBP),%RSP
	add $-688, %RSP
	mov -656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd408
	jmp uuid_00000000000dd40a
uuid_00000000000dd408:
	movb $1, -480(%rbp)
uuid_00000000000dd40a:
	mov -576(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000dd40d:
	mov -496(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000dd410:
	mov -488(%RBP),%RSP
	add $-688, %RSP
	mov -480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd414
	jmp uuid_00000000000dd416
uuid_00000000000dd414:
	push %RBP
	mov -360(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd411
	jmp uuid_00000000000dd413
uuid_00000000000dd411:
	movb $1, -384(%rbp)
uuid_00000000000dd413:
	mov -696(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000dd416:
	mov -400(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000dd419:
	mov -392(%RBP),%RSP
	add $-768, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd41b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd41a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd41d
uuid_00000000000dd41b:
#call function compile-c-typedef-ordinal : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call compile_SB_c_SB_typedef_SB_ordinal_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -768(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -160(%rbp)
uuid_00000000000dd41d:
	mov -304(%RBP),%RSP
	add $-768, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dd41e
uuid_00000000000dd420:
uuid_00000000000dd440:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd441
	jmp uuid_00000000000dd442
uuid_00000000000dd441:
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd439
	jmp uuid_00000000000dd43b
uuid_00000000000dd439:
	push %RBP
	mov -368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd430
	jmp uuid_00000000000dd432
uuid_00000000000dd430:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd42d
	jmp uuid_00000000000dd42f
uuid_00000000000dd42d:
	push %RBP
	mov -456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -648(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd427
	jmp uuid_00000000000dd429
uuid_00000000000dd427:
	push %RBP
	jmp uuid_00000000000dd424
	jmp uuid_00000000000dd426
uuid_00000000000dd424:
	push %RBP
	mov -584(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd421
	jmp uuid_00000000000dd423
uuid_00000000000dd421:
	movb $1, -656(%rbp)
uuid_00000000000dd423:
	mov -680(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000dd426:
	mov -672(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000dd429:
	mov -664(%RBP),%RSP
	add $-688, %RSP
	mov -656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd42a
	jmp uuid_00000000000dd42c
uuid_00000000000dd42a:
	movb $1, -480(%rbp)
uuid_00000000000dd42c:
	mov -576(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000dd42f:
	mov -496(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000dd432:
	mov -488(%RBP),%RSP
	add $-688, %RSP
	mov -480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd436
	jmp uuid_00000000000dd438
uuid_00000000000dd436:
	push %RBP
	mov -360(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd433
	jmp uuid_00000000000dd435
uuid_00000000000dd433:
	movb $1, -384(%rbp)
uuid_00000000000dd435:
	mov -696(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000dd438:
	mov -400(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000dd43b:
	mov -392(%RBP),%RSP
	add $-768, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd43d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd43c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd43f
uuid_00000000000dd43d:
#call function compile-c-typedef : Arrow<Cons<Type,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	mov %RBX, %RBP
	call compile_SB_c_SB_typedef_CL_ArrowNilConsASTType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -768(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000dd43f:
	mov -304(%RBP),%RSP
	add $-768, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dd440
uuid_00000000000dd442:
#call function try-continue-compile-c-typedefs : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call try_SB_continue_SB_compile_SB_c_SB_typedefs_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function compile-program-ordered : Arrow<Cons<FContext,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContext, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call compile_SB_program_SB_ordered_CL_ArrowNilConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function compile-finish : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_finish_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function compile-write : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_write_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_blob_CL_ArrowNilNil:
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000dd49a:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd49b
	jmp uuid_00000000000dd49c
uuid_00000000000dd49b:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd452
	jmp uuid_00000000000dd454
uuid_00000000000dd452:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd449
	jmp uuid_00000000000dd44b
uuid_00000000000dd449:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd446
	jmp uuid_00000000000dd448
uuid_00000000000dd446:
	push %RBP
	mov -312(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd443
	jmp uuid_00000000000dd445
uuid_00000000000dd443:
	movb $1, -336(%rbp)
uuid_00000000000dd445:
	mov -432(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000dd448:
	mov -352(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000dd44b:
	mov -344(%RBP),%RSP
	add $-504, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd44f
	jmp uuid_00000000000dd451
uuid_00000000000dd44f:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd44c
	jmp uuid_00000000000dd44e
uuid_00000000000dd44c:
	movb $1, -240(%rbp)
uuid_00000000000dd44e:
	mov -512(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000dd451:
	mov -256(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000dd454:
	mov -248(%RBP),%RSP
	add $-584, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd497
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd470
	jmp uuid_00000000000dd472
uuid_00000000000dd470:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd467
	jmp uuid_00000000000dd469
uuid_00000000000dd467:
	push %RBP
	mov -752(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd464
	jmp uuid_00000000000dd466
uuid_00000000000dd464:
	push %RBP
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd45e
	jmp uuid_00000000000dd460
uuid_00000000000dd45e:
	push %RBP
	jmp uuid_00000000000dd45b
	jmp uuid_00000000000dd45d
uuid_00000000000dd45b:
	push %RBP
	jmp uuid_00000000000dd458
	jmp uuid_00000000000dd45a
uuid_00000000000dd458:
	push %RBP
	mov -872(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd455
	jmp uuid_00000000000dd457
uuid_00000000000dd455:
	movb $1, -928(%rbp)
uuid_00000000000dd457:
	mov -960(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000dd45a:
	mov -952(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000dd45d:
	mov -944(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000dd460:
	mov -936(%RBP),%RSP
	add $-968, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd461
	jmp uuid_00000000000dd463
uuid_00000000000dd461:
	movb $1, -768(%rbp)
uuid_00000000000dd463:
	mov -864(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000dd466:
	mov -784(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000dd469:
	mov -776(%RBP),%RSP
	add $-968, %RSP
	mov -768(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd46d
	jmp uuid_00000000000dd46f
uuid_00000000000dd46d:
	push %RBP
	mov -648(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd46a
	jmp uuid_00000000000dd46c
uuid_00000000000dd46a:
	movb $1, -672(%rbp)
uuid_00000000000dd46c:
	mov -976(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000dd46f:
	mov -688(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000dd472:
	mov -680(%RBP),%RSP
	add $-1048, %RSP
	mov -672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd494
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1128(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd48d
	jmp uuid_00000000000dd48f
uuid_00000000000dd48d:
	push %RBP
	mov -1120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd48a
	jmp uuid_00000000000dd48c
uuid_00000000000dd48a:
	push %RBP
	mov -1112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd487
	jmp uuid_00000000000dd489
uuid_00000000000dd487:
	movb $1, -1136(%rbp)
uuid_00000000000dd489:
	mov -1232(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000dd48c:
	mov -1152(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000dd48f:
	mov -1144(%RBP),%RSP
	add $-1304, %RSP
	mov -1136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd491
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd490
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd493
uuid_00000000000dd491:
	movq -1304(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1296(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1288(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000dd493:
	mov -1056(%RBP),%RSP
	add $-1304, %RSP
	jmp uuid_00000000000dd496
uuid_00000000000dd494:
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	push %RBP
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq $0
	push %RBP
	mov -1200(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd47c
	jmp uuid_00000000000dd47e
uuid_00000000000dd47c:
	push %RBP
	jmp uuid_00000000000dd479
	jmp uuid_00000000000dd47b
uuid_00000000000dd479:
	push %RBP
	jmp uuid_00000000000dd476
	jmp uuid_00000000000dd478
uuid_00000000000dd476:
	push %RBP
	jmp uuid_00000000000dd473
	jmp uuid_00000000000dd475
uuid_00000000000dd473:
	movb $1, -1208(%rbp)
uuid_00000000000dd475:
	mov -1240(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000dd478:
	mov -1232(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000dd47b:
	mov -1224(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000dd47e:
	mov -1216(%RBP),%RSP
	add $-1240, %RSP
	mov -1208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd484
	push %RBP
	jmp uuid_00000000000dd481
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd480
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd483
uuid_00000000000dd481:
uuid_00000000000dd483:
	mov -1248(%RBP),%RSP
	add $-1248, %RSP
	jmp uuid_00000000000dd486
uuid_00000000000dd484:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq $uuid_00000000000dd3d4
	pushq $0
	pushq $uuid_00000000000dd47f
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1392(%RBP)
	popq -1384(%RBP)
	popq -1376(%RBP)
	popq -1368(%RBP)
	popq -1360(%RBP)
	popq -1352(%RBP)
	popq -1344(%RBP)
	popq -1336(%RBP)
	popq -1328(%RBP)
	popq -1320(%RBP)
	popq -1312(%RBP)
	popq -1304(%RBP)
	popq -1296(%RBP)
	popq -1288(%RBP)
	popq -1280(%RBP)
	popq -1272(%RBP)
	popq -1264(%RBP)
	popq -1256(%RBP)
	popq -1248(%RBP)
#call function fragment::set-term : Arrow<Cons<Fragment,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_term_CL_ArrowFragmentConsASTFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	popq -1392(%RBP)
	popq -1384(%RBP)
	popq -1376(%RBP)
	popq -1368(%RBP)
	popq -1360(%RBP)
	popq -1352(%RBP)
	popq -1344(%RBP)
	popq -1336(%RBP)
	popq -1328(%RBP)
	popq -1320(%RBP)
	popq -1312(%RBP)
	popq -1304(%RBP)
	popq -1296(%RBP)
	popq -1288(%RBP)
	popq -1280(%RBP)
	popq -1272(%RBP)
	popq -1264(%RBP)
	popq -1256(%RBP)
	popq -1248(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -1392(%RBP)
	popq -1384(%RBP)
	popq -1376(%RBP)
	popq -1368(%RBP)
	popq -1360(%RBP)
	popq -1352(%RBP)
	popq -1344(%RBP)
	popq -1336(%RBP)
	popq -1328(%RBP)
	popq -1320(%RBP)
	popq -1312(%RBP)
	popq -1304(%RBP)
	popq -1296(%RBP)
	popq -1288(%RBP)
	popq -1280(%RBP)
	popq -1272(%RBP)
	popq -1264(%RBP)
	popq -1256(%RBP)
	popq -1248(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContext, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -968(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $global_SB_ctx_CL_FContextFContext, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
uuid_00000000000dd486:
	mov -1128(%RBP),%RSP
	add $-1392, %RSP
	movq -1048(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000dd496:
	mov -592(%RBP),%RSP
	add $-1392, %RSP
	jmp uuid_00000000000dd499
uuid_00000000000dd497:
	movq -584(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -576(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -568(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -560(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -552(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -544(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -536(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -528(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -520(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000dd499:
	mov -160(%RBP),%RSP
	add $-584, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dd49a
uuid_00000000000dd49c:
	pushq $0
	pushq $0
	pushq $3
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r14
	movq 0(%r14), %r15
	movq %r15, -80(%rbp)
	movq 8(%r14), %r15
	movq %r15, -72(%rbp)
	movq 16(%r14), %r15
	movq %r15, -64(%rbp)
	movq 24(%r14), %r15
	movq %r15, -56(%rbp)
	movq 32(%r14), %r15
	movq %r15, -48(%rbp)
	movq 40(%r14), %r15
	movq %r15, -40(%rbp)
	movq 48(%r14), %r15
	movq %r15, -32(%rbp)
	movq 56(%r14), %r15
	movq %r15, -24(%rbp)
	movq 64(%r14), %r15
	movq %r15, -16(%rbp)
uuid_00000000000dd4f2:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd4f3
	jmp uuid_00000000000dd4f4
uuid_00000000000dd4f3:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd4b8
	jmp uuid_00000000000dd4ba
uuid_00000000000dd4b8:
	push %RBP
	mov -248(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd4af
	jmp uuid_00000000000dd4b1
uuid_00000000000dd4af:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd4ac
	jmp uuid_00000000000dd4ae
uuid_00000000000dd4ac:
	push %RBP
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq $0
	push %RBP
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd4a6
	jmp uuid_00000000000dd4a8
uuid_00000000000dd4a6:
	push %RBP
	jmp uuid_00000000000dd4a3
	jmp uuid_00000000000dd4a5
uuid_00000000000dd4a3:
	push %RBP
	jmp uuid_00000000000dd4a0
	jmp uuid_00000000000dd4a2
uuid_00000000000dd4a0:
	push %RBP
	mov -464(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd49d
	jmp uuid_00000000000dd49f
uuid_00000000000dd49d:
	movb $1, -520(%rbp)
uuid_00000000000dd49f:
	mov -552(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000dd4a2:
	mov -544(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000dd4a5:
	mov -536(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000dd4a8:
	mov -528(%RBP),%RSP
	add $-560, %RSP
	mov -520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd4a9
	jmp uuid_00000000000dd4ab
uuid_00000000000dd4a9:
	movb $1, -360(%rbp)
uuid_00000000000dd4ab:
	mov -456(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000dd4ae:
	mov -376(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000dd4b1:
	mov -368(%RBP),%RSP
	add $-560, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd4b5
	jmp uuid_00000000000dd4b7
uuid_00000000000dd4b5:
	push %RBP
	mov -240(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd4b2
	jmp uuid_00000000000dd4b4
uuid_00000000000dd4b2:
	movb $1, -264(%rbp)
uuid_00000000000dd4b4:
	mov -568(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000dd4b7:
	mov -280(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000dd4ba:
	mov -272(%RBP),%RSP
	add $-640, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd4ef
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -720(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd4ca
	jmp uuid_00000000000dd4cc
uuid_00000000000dd4ca:
	push %RBP
	mov -712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -816(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd4c1
	jmp uuid_00000000000dd4c3
uuid_00000000000dd4c1:
	push %RBP
	mov -808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd4be
	jmp uuid_00000000000dd4c0
uuid_00000000000dd4be:
	push %RBP
	mov -800(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd4bb
	jmp uuid_00000000000dd4bd
uuid_00000000000dd4bb:
	movb $1, -824(%rbp)
uuid_00000000000dd4bd:
	mov -920(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000dd4c0:
	mov -840(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000dd4c3:
	mov -832(%RBP),%RSP
	add $-992, %RSP
	mov -824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd4c7
	jmp uuid_00000000000dd4c9
uuid_00000000000dd4c7:
	push %RBP
	mov -704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd4c4
	jmp uuid_00000000000dd4c6
uuid_00000000000dd4c4:
	movb $1, -728(%rbp)
uuid_00000000000dd4c6:
	mov -1000(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000dd4c9:
	mov -744(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000dd4cc:
	mov -736(%RBP),%RSP
	add $-1072, %RSP
	mov -728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd4ec
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -1152(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd4d9
	jmp uuid_00000000000dd4db
uuid_00000000000dd4d9:
	push %RBP
	mov -1144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1248(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd4d0
	jmp uuid_00000000000dd4d2
uuid_00000000000dd4d0:
	push %RBP
	jmp uuid_00000000000dd4cd
	jmp uuid_00000000000dd4cf
uuid_00000000000dd4cd:
	movb $1, -1256(%rbp)
uuid_00000000000dd4cf:
	mov -1272(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000dd4d2:
	mov -1264(%RBP),%RSP
	add $-1272, %RSP
	mov -1256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd4d6
	jmp uuid_00000000000dd4d8
uuid_00000000000dd4d6:
	push %RBP
	mov -1136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd4d3
	jmp uuid_00000000000dd4d5
uuid_00000000000dd4d3:
	movb $1, -1160(%rbp)
uuid_00000000000dd4d5:
	mov -1280(%RBP),%RSP
	add $-1352, %RSP
uuid_00000000000dd4d8:
	mov -1176(%RBP),%RSP
	add $-1352, %RSP
uuid_00000000000dd4db:
	mov -1168(%RBP),%RSP
	add $-1352, %RSP
	mov -1160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd4e9
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -1432(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd4e2
	jmp uuid_00000000000dd4e4
uuid_00000000000dd4e2:
	push %RBP
	mov -1424(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd4df
	jmp uuid_00000000000dd4e1
uuid_00000000000dd4df:
	push %RBP
	mov -1416(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd4dc
	jmp uuid_00000000000dd4de
uuid_00000000000dd4dc:
	movb $1, -1440(%rbp)
uuid_00000000000dd4de:
	mov -1536(%RBP),%RSP
	add $-1608, %RSP
uuid_00000000000dd4e1:
	mov -1456(%RBP),%RSP
	add $-1608, %RSP
uuid_00000000000dd4e4:
	mov -1448(%RBP),%RSP
	add $-1608, %RSP
	mov -1440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd4e6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd4e5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd4e8
uuid_00000000000dd4e6:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContext, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $uuid_00000000000dd3d6
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq $0
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1816(%RBP)
	pushq -1824(%RBP)
	pushq -1832(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -1608(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1600(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1592(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1584(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1576(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1568(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1560(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1552(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1544(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000dd4e8:
	mov -1360(%RBP),%RSP
	add $-1864, %RSP
	jmp uuid_00000000000dd4eb
uuid_00000000000dd4e9:
	movq -1352(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1344(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1336(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1328(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1320(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1312(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1304(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1296(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1288(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000dd4eb:
	mov -1080(%RBP),%RSP
	add $-1352, %RSP
	jmp uuid_00000000000dd4ee
uuid_00000000000dd4ec:
	movq -1072(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000dd4ee:
	mov -648(%RBP),%RSP
	add $-1072, %RSP
	jmp uuid_00000000000dd4f1
uuid_00000000000dd4ef:
	movq -640(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -632(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -624(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -616(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -608(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -600(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -592(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -584(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -576(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000dd4f1:
	mov -184(%RBP),%RSP
	add $-640, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dd4f2
uuid_00000000000dd4f4:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function escape-string : Arrow<S,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call escape_SB_string_CL_ArrowSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, %r15
	movq $assemble_SB_final_CL_String, %r14
	movq %r15, 0(%r14)
#call function compile-write : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_write_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_gnu_CL_ArrowNilNil:
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000dd544:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd545
	jmp uuid_00000000000dd546
uuid_00000000000dd545:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd510
	jmp uuid_00000000000dd512
uuid_00000000000dd510:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd507
	jmp uuid_00000000000dd509
uuid_00000000000dd507:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd504
	jmp uuid_00000000000dd506
uuid_00000000000dd504:
	push %RBP
	pushq -264(%RBP)
	pushq -272(%RBP)
	pushq -280(%RBP)
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq $0
	push %RBP
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd4fe
	jmp uuid_00000000000dd500
uuid_00000000000dd4fe:
	push %RBP
	jmp uuid_00000000000dd4fb
	jmp uuid_00000000000dd4fd
uuid_00000000000dd4fb:
	push %RBP
	jmp uuid_00000000000dd4f8
	jmp uuid_00000000000dd4fa
uuid_00000000000dd4f8:
	push %RBP
	mov -440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd4f5
	jmp uuid_00000000000dd4f7
uuid_00000000000dd4f5:
	movb $1, -496(%rbp)
uuid_00000000000dd4f7:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000dd4fa:
	mov -520(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000dd4fd:
	mov -512(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000dd500:
	mov -504(%RBP),%RSP
	add $-536, %RSP
	mov -496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd501
	jmp uuid_00000000000dd503
uuid_00000000000dd501:
	movb $1, -336(%rbp)
uuid_00000000000dd503:
	mov -432(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000dd506:
	mov -352(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000dd509:
	mov -344(%RBP),%RSP
	add $-536, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd50d
	jmp uuid_00000000000dd50f
uuid_00000000000dd50d:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd50a
	jmp uuid_00000000000dd50c
uuid_00000000000dd50a:
	movb $1, -240(%rbp)
uuid_00000000000dd50c:
	mov -544(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000dd50f:
	mov -256(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000dd512:
	mov -248(%RBP),%RSP
	add $-616, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd541
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd52e
	jmp uuid_00000000000dd530
uuid_00000000000dd52e:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -792(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd525
	jmp uuid_00000000000dd527
uuid_00000000000dd525:
	push %RBP
	mov -784(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd522
	jmp uuid_00000000000dd524
uuid_00000000000dd522:
	push %RBP
	mov -776(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd51f
	jmp uuid_00000000000dd521
uuid_00000000000dd51f:
	movb $1, -800(%rbp)
uuid_00000000000dd521:
	mov -896(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000dd524:
	mov -816(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000dd527:
	mov -808(%RBP),%RSP
	add $-968, %RSP
	mov -800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd52b
	jmp uuid_00000000000dd52d
uuid_00000000000dd52b:
	push %RBP
	mov -680(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd528
	jmp uuid_00000000000dd52a
uuid_00000000000dd528:
	movb $1, -704(%rbp)
uuid_00000000000dd52a:
	mov -976(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000dd52d:
	mov -720(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000dd530:
	mov -712(%RBP),%RSP
	add $-1048, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd53e
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1128(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd537
	jmp uuid_00000000000dd539
uuid_00000000000dd537:
	push %RBP
	jmp uuid_00000000000dd534
	jmp uuid_00000000000dd536
uuid_00000000000dd534:
	push %RBP
	mov -1112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd531
	jmp uuid_00000000000dd533
uuid_00000000000dd531:
	movb $1, -1136(%rbp)
uuid_00000000000dd533:
	mov -1160(%RBP),%RSP
	add $-1232, %RSP
uuid_00000000000dd536:
	mov -1152(%RBP),%RSP
	add $-1232, %RSP
uuid_00000000000dd539:
	mov -1144(%RBP),%RSP
	add $-1232, %RSP
	mov -1136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd53b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd53a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd53d
uuid_00000000000dd53b:
	movq -1232(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000dd53d:
	mov -1056(%RBP),%RSP
	add $-1232, %RSP
	jmp uuid_00000000000dd540
uuid_00000000000dd53e:
	movq -1048(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000dd540:
	mov -624(%RBP),%RSP
	add $-1048, %RSP
	jmp uuid_00000000000dd543
uuid_00000000000dd541:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	pushq $uuid_00000000000dd3d0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd513
	jmp uuid_00000000000dd515
uuid_00000000000dd513:
	mov $assemble_SB_argv_SB_referenced_CL_U8, %r15
	movb $1, 0(%r15)
uuid_00000000000dd515:
	mov -624(%RBP),%RSP
	add $-624, %RSP
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd51c
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd519
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq $uuid_00000000000dd3d4
	pushq $0
	pushq $uuid_00000000000dd3d5
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd516
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3a5
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
#call function without-constructor : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	mov %RBX, %RBP
	call without_SB_constructor_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq $uuid_00000000000dd3d6
	pushq $0
	pushq -880(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContext, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -536(%rbp)
#call function without-constructor : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	mov %RBX, %RBP
	call without_SB_constructor_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $global_SB_ctx_CL_FContextFContext, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
	jmp uuid_00000000000dd518
uuid_00000000000dd516:
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContext, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -536(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $global_SB_ctx_CL_FContextFContext, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
uuid_00000000000dd518:
	mov -824(%RBP),%RSP
	add $-824, %RSP
	jmp uuid_00000000000dd51b
uuid_00000000000dd519:
#call function fragment::set-term : Arrow<Cons<Fragment,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_term_CL_ArrowFragmentConsASTFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContext, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -536(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $global_SB_ctx_CL_FContextFContext, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
uuid_00000000000dd51b:
	mov -816(%RBP),%RSP
	add $-816, %RSP
	jmp uuid_00000000000dd51e
uuid_00000000000dd51c:
uuid_00000000000dd51e:
	mov -808(%RBP),%RSP
	add $-808, %RSP
	movq -616(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -608(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -600(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -592(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -584(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -576(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -568(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -560(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -552(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000dd543:
	mov -160(%RBP),%RSP
	add $-808, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $152, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dd544
uuid_00000000000dd546:
#call function compile-program-ordered : Arrow<Cons<FContext,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContext, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call compile_SB_program_SB_ordered_CL_ArrowNilConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function compile-finish : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_finish_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function compile-write : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_write_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_finish_CL_ArrowNilNil:
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	push %RBP
	pushq -16(%rbp)
	mov -32(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd54e
	push %RBP
	pushq -16(%rbp)
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd54b
	push %RBP
	pushq -16(%rbp)
	mov -64(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd548
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd547
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd54a
uuid_00000000000dd548:
#call function compile-finish-gnu : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_finish_SB_gnu_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd54a:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000dd54d
uuid_00000000000dd54b:
#call function compile-finish-blob : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_finish_SB_blob_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd54d:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	jmp uuid_00000000000dd550
uuid_00000000000dd54e:
#call function compile-finish-c : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_finish_SB_c_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd550:
	mov -24(%RBP),%RSP
	add $-32, %RSP
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_finish_SB_c_CL_ArrowNilNil:
	pushq $0
	pushq $0
	pushq $3
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function compile-c-text-header : Arrow<Nil,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_c_SB_text_SB_header_CL_ArrowSNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_text_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function escape-string : Arrow<S,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call escape_SB_string_CL_ArrowSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, %r15
	movq $assemble_SB_final_CL_String, %r14
	movq %r15, 0(%r14)
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_finish_SB_gnu_CL_ArrowNilNil:
	pushq $0
	pushq $0
	pushq $3
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function compile-text-header : Arrow<Nil,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_text_SB_header_CL_ArrowSNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_profile_SB_onexit_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function compile-exit-cleanup : Arrow<Nil,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_exit_SB_cleanup_CL_ArrowSNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_text_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd551
	jmp uuid_00000000000dd553
uuid_00000000000dd551:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function compile-data-header : Arrow<Nil,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_data_SB_header_CL_ArrowSNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
uuid_00000000000dd553:
	mov -40(%RBP),%RSP
	add $-40, %RSP
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function escape-string : Arrow<S,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call escape_SB_string_CL_ArrowSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, %r15
	movq $assemble_SB_final_CL_String, %r14
	movq %r15, 0(%r14)
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_finish_SB_blob_CL_ArrowNilNil:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd554
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_program_SB_ordered_CL_ArrowNilConsASTFContext:
	pushq $0
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq $0
	push %RBP
	mov -440(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd55b
	jmp uuid_00000000000dd55d
uuid_00000000000dd55b:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd558
	jmp uuid_00000000000dd55a
uuid_00000000000dd558:
	push %RBP
	jmp uuid_00000000000dd555
	jmp uuid_00000000000dd557
uuid_00000000000dd555:
	movb $1, -448(%rbp)
uuid_00000000000dd557:
	mov -544(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000dd55a:
	mov -464(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000dd55d:
	mov -456(%RBP),%RSP
	add $-544, %RSP
	mov -448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd565
	push %RBP
	jmp uuid_00000000000dd562
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd561
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd564
uuid_00000000000dd562:
uuid_00000000000dd564:
	mov -552(%RBP),%RSP
	add $-552, %RSP
	jmp uuid_00000000000dd567
uuid_00000000000dd565:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd55e
	jmp uuid_00000000000dd560
uuid_00000000000dd55e:
	movq $1, -288(%rbp)
uuid_00000000000dd560:
	mov -552(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000dd567:
	mov -368(%RBP),%RSP
	add $-552, %RSP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq $0
	push %RBP
	mov -704(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd583
	jmp uuid_00000000000dd585
uuid_00000000000dd583:
	push %RBP
	mov -696(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -800(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd57a
	jmp uuid_00000000000dd57c
uuid_00000000000dd57a:
	push %RBP
	mov -792(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd577
	jmp uuid_00000000000dd579
uuid_00000000000dd577:
	push %RBP
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq -752(%RBP)
	pushq -760(%RBP)
	pushq -768(%RBP)
	pushq -776(%RBP)
	pushq -784(%RBP)
	pushq $0
	push %RBP
	mov -960(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd571
	jmp uuid_00000000000dd573
uuid_00000000000dd571:
	push %RBP
	jmp uuid_00000000000dd56e
	jmp uuid_00000000000dd570
uuid_00000000000dd56e:
	push %RBP
	jmp uuid_00000000000dd56b
	jmp uuid_00000000000dd56d
uuid_00000000000dd56b:
	push %RBP
	mov -912(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd568
	jmp uuid_00000000000dd56a
uuid_00000000000dd568:
	movb $1, -968(%rbp)
uuid_00000000000dd56a:
	mov -1000(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000dd56d:
	mov -992(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000dd570:
	mov -984(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000dd573:
	mov -976(%RBP),%RSP
	add $-1008, %RSP
	mov -968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd574
	jmp uuid_00000000000dd576
uuid_00000000000dd574:
	movb $1, -808(%rbp)
uuid_00000000000dd576:
	mov -904(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000dd579:
	mov -824(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000dd57c:
	mov -816(%RBP),%RSP
	add $-1008, %RSP
	mov -808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd580
	jmp uuid_00000000000dd582
uuid_00000000000dd580:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd57d
	jmp uuid_00000000000dd57f
uuid_00000000000dd57d:
	movb $1, -712(%rbp)
uuid_00000000000dd57f:
	mov -1016(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000dd582:
	mov -728(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000dd585:
	mov -720(%RBP),%RSP
	add $-1088, %RSP
	mov -712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd599
	push %RBP
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq $0
	push %RBP
	mov -1168(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd58f
	jmp uuid_00000000000dd591
uuid_00000000000dd58f:
	push %RBP
	jmp uuid_00000000000dd58c
	jmp uuid_00000000000dd58e
uuid_00000000000dd58c:
	push %RBP
	mov -1152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd589
	jmp uuid_00000000000dd58b
uuid_00000000000dd589:
	movb $1, -1176(%rbp)
uuid_00000000000dd58b:
	mov -1200(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000dd58e:
	mov -1192(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000dd591:
	mov -1184(%RBP),%RSP
	add $-1272, %RSP
	mov -1176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd596
	push %RBP
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov -1352(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd593
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd592
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd595
uuid_00000000000dd593:
uuid_00000000000dd595:
	mov -1280(%RBP),%RSP
	add $-1352, %RSP
	jmp uuid_00000000000dd598
uuid_00000000000dd596:
#call function compile-program-ordered : Arrow<Cons<FContext,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	mov %RBX, %RBP
	call compile_SB_program_SB_ordered_CL_ArrowNilConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd598:
	mov -1096(%RBP),%RSP
	add $-1272, %RSP
	jmp uuid_00000000000dd59b
uuid_00000000000dd599:
#call function compile-program-ordered : Arrow<Cons<FContext,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	mov %RBX, %RBP
	call compile_SB_program_SB_ordered_CL_ArrowNilConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
	mov -288(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd586
#call function compile-global : Arrow<Cons<Cons<FContext,String>,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1008(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call compile_SB_global_CL_ArrowNilConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd588
uuid_00000000000dd586:
uuid_00000000000dd588:
	mov -1096(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000dd59b:
	mov -632(%RBP),%RSP
	add $-1096, %RSP
	mov %rbp, %rsp
	sub $280, %rsp
	ret
compile_SB_write_CL_ArrowNilNil:
#call function write-file : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_target_CL_String, %r15
	pushq 0(%r15)
	mov $assemble_SB_final_CL_String, %r15
	pushq 0(%r15)
	mov %RBX, %RBP
	call write_SB_file_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_c_SB_function_SB_args_CL_ArrowSConsASTFContext:
	pushq $0
	pushq $0
	pushq $3
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5cc
	jmp uuid_00000000000dd5ce
uuid_00000000000dd5cc:
	push %RBP
	mov -448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5c3
	jmp uuid_00000000000dd5c5
uuid_00000000000dd5c3:
	push %RBP
	mov -544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -648(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5b1
	jmp uuid_00000000000dd5b3
uuid_00000000000dd5b1:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -744(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd59f
	jmp uuid_00000000000dd5a1
uuid_00000000000dd59f:
	push %RBP
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	jmp uuid_00000000000dd59c
	jmp uuid_00000000000dd59e
uuid_00000000000dd59c:
	movb $1, -752(%rbp)
uuid_00000000000dd59e:
	mov -768(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000dd5a1:
	mov -760(%RBP),%RSP
	add $-792, %RSP
	mov -752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5ae
	jmp uuid_00000000000dd5b0
uuid_00000000000dd5ae:
	push %RBP
	mov -632(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -872(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5a8
	jmp uuid_00000000000dd5aa
uuid_00000000000dd5a8:
	push %RBP
	jmp uuid_00000000000dd5a5
	jmp uuid_00000000000dd5a7
uuid_00000000000dd5a5:
	push %RBP
	mov -808(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd5a2
	jmp uuid_00000000000dd5a4
uuid_00000000000dd5a2:
	movb $1, -880(%rbp)
uuid_00000000000dd5a4:
	mov -904(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000dd5a7:
	mov -896(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000dd5aa:
	mov -888(%RBP),%RSP
	add $-912, %RSP
	mov -880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5ab
	jmp uuid_00000000000dd5ad
uuid_00000000000dd5ab:
	movb $1, -656(%rbp)
uuid_00000000000dd5ad:
	mov -800(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000dd5b0:
	mov -672(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000dd5b3:
	mov -664(%RBP),%RSP
	add $-912, %RSP
	mov -656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5c0
	jmp uuid_00000000000dd5c2
uuid_00000000000dd5c0:
	push %RBP
	mov -536(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -992(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5ba
	jmp uuid_00000000000dd5bc
uuid_00000000000dd5ba:
	push %RBP
	jmp uuid_00000000000dd5b7
	jmp uuid_00000000000dd5b9
uuid_00000000000dd5b7:
	push %RBP
	mov -928(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1032(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd5b4
	jmp uuid_00000000000dd5b6
uuid_00000000000dd5b4:
	movb $1, -1000(%rbp)
uuid_00000000000dd5b6:
	mov -1024(%RBP),%RSP
	add $-1032, %RSP
uuid_00000000000dd5b9:
	mov -1016(%RBP),%RSP
	add $-1032, %RSP
uuid_00000000000dd5bc:
	mov -1008(%RBP),%RSP
	add $-1032, %RSP
	mov -1000(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5bd
	jmp uuid_00000000000dd5bf
uuid_00000000000dd5bd:
	movb $1, -560(%rbp)
uuid_00000000000dd5bf:
	mov -920(%RBP),%RSP
	add $-1032, %RSP
uuid_00000000000dd5c2:
	mov -576(%RBP),%RSP
	add $-1032, %RSP
uuid_00000000000dd5c5:
	mov -568(%RBP),%RSP
	add $-1032, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5c9
	jmp uuid_00000000000dd5cb
uuid_00000000000dd5c9:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd5c6
	jmp uuid_00000000000dd5c8
uuid_00000000000dd5c6:
	movb $1, -464(%rbp)
uuid_00000000000dd5c8:
	mov -1040(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000dd5cb:
	mov -480(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000dd5ce:
	mov -472(%RBP),%RSP
	add $-1112, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd600
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -1192(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5f6
	jmp uuid_00000000000dd5f8
uuid_00000000000dd5f6:
	push %RBP
	mov -1184(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1288(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5e4
	jmp uuid_00000000000dd5e6
uuid_00000000000dd5e4:
	push %RBP
	mov -1280(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1384(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5d2
	jmp uuid_00000000000dd5d4
uuid_00000000000dd5d2:
	push %RBP
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	jmp uuid_00000000000dd5cf
	jmp uuid_00000000000dd5d1
uuid_00000000000dd5cf:
	movb $1, -1392(%rbp)
uuid_00000000000dd5d1:
	mov -1408(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000dd5d4:
	mov -1400(%RBP),%RSP
	add $-1432, %RSP
	mov -1392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5e1
	jmp uuid_00000000000dd5e3
uuid_00000000000dd5e1:
	push %RBP
	mov -1272(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1512(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5db
	jmp uuid_00000000000dd5dd
uuid_00000000000dd5db:
	push %RBP
	jmp uuid_00000000000dd5d8
	jmp uuid_00000000000dd5da
uuid_00000000000dd5d8:
	push %RBP
	mov -1448(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd5d5
	jmp uuid_00000000000dd5d7
uuid_00000000000dd5d5:
	movb $1, -1520(%rbp)
uuid_00000000000dd5d7:
	mov -1544(%RBP),%RSP
	add $-1552, %RSP
uuid_00000000000dd5da:
	mov -1536(%RBP),%RSP
	add $-1552, %RSP
uuid_00000000000dd5dd:
	mov -1528(%RBP),%RSP
	add $-1552, %RSP
	mov -1520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5de
	jmp uuid_00000000000dd5e0
uuid_00000000000dd5de:
	movb $1, -1296(%rbp)
uuid_00000000000dd5e0:
	mov -1440(%RBP),%RSP
	add $-1552, %RSP
uuid_00000000000dd5e3:
	mov -1312(%RBP),%RSP
	add $-1552, %RSP
uuid_00000000000dd5e6:
	mov -1304(%RBP),%RSP
	add $-1552, %RSP
	mov -1296(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5f3
	jmp uuid_00000000000dd5f5
uuid_00000000000dd5f3:
	push %RBP
	mov -1176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1632(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5ed
	jmp uuid_00000000000dd5ef
uuid_00000000000dd5ed:
	push %RBP
	jmp uuid_00000000000dd5ea
	jmp uuid_00000000000dd5ec
uuid_00000000000dd5ea:
	push %RBP
	mov -1568(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1672(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd5e7
	jmp uuid_00000000000dd5e9
uuid_00000000000dd5e7:
	movb $1, -1640(%rbp)
uuid_00000000000dd5e9:
	mov -1664(%RBP),%RSP
	add $-1672, %RSP
uuid_00000000000dd5ec:
	mov -1656(%RBP),%RSP
	add $-1672, %RSP
uuid_00000000000dd5ef:
	mov -1648(%RBP),%RSP
	add $-1672, %RSP
	mov -1640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5f0
	jmp uuid_00000000000dd5f2
uuid_00000000000dd5f0:
	movb $1, -1200(%rbp)
uuid_00000000000dd5f2:
	mov -1560(%RBP),%RSP
	add $-1672, %RSP
uuid_00000000000dd5f5:
	mov -1216(%RBP),%RSP
	add $-1672, %RSP
uuid_00000000000dd5f8:
	mov -1208(%RBP),%RSP
	add $-1672, %RSP
	mov -1200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5fd
	push %RBP
	jmp uuid_00000000000dd5fa
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd5f9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd5fc
uuid_00000000000dd5fa:
uuid_00000000000dd5fc:
	mov -1680(%RBP),%RSP
	add $-1680, %RSP
	jmp uuid_00000000000dd5ff
uuid_00000000000dd5fd:
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $0
	pushq $uuid_00000000000dae18
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1552(%rbp)
	pushq $0
	pushq $0
	pushq $3
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq $uuid_00000000000dd3d6
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
uuid_00000000000dd5ff:
	mov -1120(%RBP),%RSP
	add $-1824, %RSP
	jmp uuid_00000000000dd602
uuid_00000000000dd600:
#call function compile-c-function-args : Arrow<Cons<FContext,AST>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call compile_SB_c_SB_function_SB_args_CL_ArrowSConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -304(%RSP)
	push -304(%RSP)
	push -304(%RSP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $0
	pushq $uuid_00000000000db257
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $0
	pushq $uuid_00000000000dae18
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -912(%rbp)
	pushq $0
	pushq $0
	pushq $3
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq $uuid_00000000000dd3d6
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
uuid_00000000000dd602:
	mov -384(%RBP),%RSP
	add $-1264, %RSP
	subq $24, %rsp
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $280, %rsp
	ret
compile_SB_c_SB_text_SB_header_CL_ArrowSNil:
	pushq $0
	pushq $uuid_00000000000dd603
	pushq $2
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_c_SB_typedef_SB_concrete_SB_ordinal_CL_ArrowNilType:
#call function uuid : Arrow<Nil,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call uuid_CL_ArrowStringNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function .bind : Arrow<Cons<Cons<HashtableEq<Type,String>,Type>,String>,HashtableEq<Type,String>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $index_SB_c_SB_type_SB_ordinal_CL_HashtableEqStringType, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqStringTypeConsStringConsTypeHashtableEqStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov $index_SB_c_SB_type_SB_ordinal_CL_HashtableEqStringType, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd604
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd605
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -40(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dae18
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -40(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd606
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	mov %rbp, %rsp
	sub $32, %rsp
	ret
compile_SB_c_SB_typedef_SB_ordinal_CL_ArrowNilType:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd607
#call function compile-c-typedef-concrete-ordinal : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call compile_SB_c_SB_typedef_SB_concrete_SB_ordinal_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd609
uuid_00000000000dd607:
uuid_00000000000dd609:
	mov -40(%RBP),%RSP
	add $-40, %RSP
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd610
	jmp uuid_00000000000dd612
uuid_00000000000dd610:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd60d
	jmp uuid_00000000000dd60f
uuid_00000000000dd60d:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd60a
	jmp uuid_00000000000dd60c
uuid_00000000000dd60a:
	movb $1, -104(%rbp)
uuid_00000000000dd60c:
	mov -168(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd60f:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd612:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd62c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd62b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd62e
uuid_00000000000dd62c:
	pushq -176(%rbp)
#call function .length : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call _DT_length_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function .lookup : Arrow<Cons<Cons<HashtableEq<Tuple<String,U64>,List<Type>>,Tuple<String,U64>>,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $concrete_SB_type_SB_instances_SB_index_CL_HashtableEqListTypeTupleU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowListTypeConsListTypeConsTupleU64StringHashtableEqListTypeTupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
uuid_00000000000dd628:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd629
	jmp uuid_00000000000dd62a
uuid_00000000000dd629:
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd621
	jmp uuid_00000000000dd623
uuid_00000000000dd621:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd61e
	jmp uuid_00000000000dd620
uuid_00000000000dd61e:
	push %RBP
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	jmp uuid_00000000000dd61b
	jmp uuid_00000000000dd61d
uuid_00000000000dd61b:
	movb $1, -336(%rbp)
uuid_00000000000dd61d:
	mov -400(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000dd620:
	mov -352(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000dd623:
	mov -344(%RBP),%RSP
	add $-424, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd625
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd624
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd627
uuid_00000000000dd625:
#call function compile-c-typedef-concrete-ordinal : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov %RBX, %RBP
	call compile_SB_c_SB_typedef_SB_concrete_SB_ordinal_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -392(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -208(%rbp)
uuid_00000000000dd627:
	mov -288(%RBP),%RSP
	add $-424, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dd628
uuid_00000000000dd62a:
uuid_00000000000dd62e:
	mov -72(%RBP),%RSP
	add $-240, %RSP
	mov %rbp, %rsp
	sub $32, %rsp
	ret
try_SB_continue_SB_compile_SB_c_SB_typedefs_CL_ArrowNilNil:
	mov $continue_SB_compile_SB_c_SB_typedefs_SB_concrete_CL_ListTupleASTTupleTypeTContextListTupleASTTupleTypeTContext, %r15
	pushq 240(%r15)
	pushq 232(%r15)
	pushq 224(%r15)
	pushq 216(%r15)
	pushq 208(%r15)
	pushq 200(%r15)
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $continue_SB_compile_SB_c_SB_typedefs_SB_concrete_CL_ListTupleASTTupleTypeTContextListTupleASTTupleTypeTContext, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	popq 80(%R15)
	popq 88(%R15)
	popq 96(%R15)
	popq 104(%R15)
	popq 112(%R15)
	popq 120(%R15)
	popq 128(%R15)
	popq 136(%R15)
	popq 144(%R15)
	popq 152(%R15)
	popq 160(%R15)
	popq 168(%R15)
	popq 176(%R15)
	popq 184(%R15)
	popq 192(%R15)
	popq 200(%R15)
	popq 208(%R15)
	popq 216(%R15)
	popq 224(%R15)
	popq 232(%R15)
	popq 240(%R15)
uuid_00000000000dd679:
#call function non-zero : Arrow<List<Tuple<Tuple<TContext,Type>,AST>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListTupleASTTupleTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd67a
	jmp uuid_00000000000dd67b
uuid_00000000000dd67a:
	mov $continue_SB_compile_SB_c_SB_typedefs_SB_count_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, %r15
	movq $continue_SB_compile_SB_c_SB_typedefs_SB_count_CL_U64, %r14
	movq %r15, 0(%r14)
	push %RBP
	mov $continue_SB_compile_SB_c_SB_typedefs_SB_count_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov $100, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd654
	jmp uuid_00000000000dd656
uuid_00000000000dd654:
#call function fail : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd653
	mov %RBX, %RBP
	call fail_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd656:
	mov -264(%RBP),%RSP
	add $-264, %RSP
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
uuid_00000000000dd676:
#call function non-zero : Arrow<List<Tuple<Tuple<TContext,Type>,AST>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListTupleASTTupleTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd677
	jmp uuid_00000000000dd678
uuid_00000000000dd677:
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	push %RBP
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq $0
	push %RBP
	mov -1016(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd66f
	jmp uuid_00000000000dd671
uuid_00000000000dd66f:
	push %RBP
	mov -1008(%RBP), %RAX
	pushq 240(%RAX)
	pushq 232(%RAX)
	pushq 224(%RAX)
	pushq 216(%RAX)
	pushq 208(%RAX)
	pushq 200(%RAX)
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd66c
	jmp uuid_00000000000dd66e
uuid_00000000000dd66c:
	push %RBP
	pushq -776(%RBP)
	pushq -784(%RBP)
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	pushq -944(%RBP)
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq $0
	push %RBP
	mov -1528(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd666
	jmp uuid_00000000000dd668
uuid_00000000000dd666:
	push %RBP
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	jmp uuid_00000000000dd663
	jmp uuid_00000000000dd665
uuid_00000000000dd663:
	push %RBP
	pushq -1304(%RBP)
	pushq -1312(%RBP)
	pushq -1320(%RBP)
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	pushq -1448(%RBP)
	pushq $0
	push %RBP
	mov -1784(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd65d
	jmp uuid_00000000000dd65f
uuid_00000000000dd65d:
	push %RBP
	pushq -1760(%RBP)
	pushq -1768(%RBP)
	pushq -1776(%RBP)
	jmp uuid_00000000000dd65a
	jmp uuid_00000000000dd65c
uuid_00000000000dd65a:
	push %RBP
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	pushq -1656(%RBP)
	pushq -1664(%RBP)
	pushq -1672(%RBP)
	pushq -1680(%RBP)
	pushq -1688(%RBP)
	pushq -1696(%RBP)
	pushq -1704(%RBP)
	pushq -1712(%RBP)
	pushq -1720(%RBP)
	pushq -1728(%RBP)
	pushq -1736(%RBP)
	pushq -1744(%RBP)
	pushq -1752(%RBP)
	jmp uuid_00000000000dd657
	jmp uuid_00000000000dd659
uuid_00000000000dd657:
	movb $1, -1792(%rbp)
uuid_00000000000dd659:
	mov -1840(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000dd65c:
	mov -1808(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000dd65f:
	mov -1800(%RBP),%RSP
	add $-1960, %RSP
	mov -1792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd660
	jmp uuid_00000000000dd662
uuid_00000000000dd660:
	movb $1, -1536(%rbp)
uuid_00000000000dd662:
	mov -1632(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000dd665:
	mov -1552(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000dd668:
	mov -1544(%RBP),%RSP
	add $-1960, %RSP
	mov -1536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd669
	jmp uuid_00000000000dd66b
uuid_00000000000dd669:
	movb $1, -1024(%rbp)
uuid_00000000000dd66b:
	mov -1296(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000dd66e:
	mov -1040(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000dd671:
	mov -1032(%RBP),%RSP
	add $-1960, %RSP
	mov -1024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd673
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd672
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd675
uuid_00000000000dd673:
#call function compile-c-typedef-concrete : Arrow<Cons<Cons<TContext,Type>,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	mov %RBX, %RBP
	call compile_SB_c_SB_typedef_SB_concrete_CL_ArrowNilConsASTConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -1288(%rbp), %r15
	movq %r15, -512(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -504(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -496(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -488(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -480(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -472(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -464(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -456(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -448(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -440(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -432(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -424(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -416(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -408(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -400(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -392(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -384(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -376(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -368(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -360(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -344(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -328(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -272(%rbp)
uuid_00000000000dd675:
	mov -768(%RBP),%RSP
	add $-1960, %RSP
	add $248, %rsp
	add $248, %rsp
	add $8, %rsp
	add $248, %rsp
	add $232, %rsp
	add $8, %rsp
	add $72, %rsp
	add $152, %rsp
	add $8, %rsp
	add $24, %rsp
	add $120, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dd676
uuid_00000000000dd678:
	mov $continue_SB_compile_SB_c_SB_typedefs_SB_concrete_CL_ListTupleASTTupleTypeTContextListTupleASTTupleTypeTContext, %r14
	movq 0(%r14), %r15
	movq %r15, -256(%rbp)
	movq 8(%r14), %r15
	movq %r15, -248(%rbp)
	movq 16(%r14), %r15
	movq %r15, -240(%rbp)
	movq 24(%r14), %r15
	movq %r15, -232(%rbp)
	movq 32(%r14), %r15
	movq %r15, -224(%rbp)
	movq 40(%r14), %r15
	movq %r15, -216(%rbp)
	movq 48(%r14), %r15
	movq %r15, -208(%rbp)
	movq 56(%r14), %r15
	movq %r15, -200(%rbp)
	movq 64(%r14), %r15
	movq %r15, -192(%rbp)
	movq 72(%r14), %r15
	movq %r15, -184(%rbp)
	movq 80(%r14), %r15
	movq %r15, -176(%rbp)
	movq 88(%r14), %r15
	movq %r15, -168(%rbp)
	movq 96(%r14), %r15
	movq %r15, -160(%rbp)
	movq 104(%r14), %r15
	movq %r15, -152(%rbp)
	movq 112(%r14), %r15
	movq %r15, -144(%rbp)
	movq 120(%r14), %r15
	movq %r15, -136(%rbp)
	movq 128(%r14), %r15
	movq %r15, -128(%rbp)
	movq 136(%r14), %r15
	movq %r15, -120(%rbp)
	movq 144(%r14), %r15
	movq %r15, -112(%rbp)
	movq 152(%r14), %r15
	movq %r15, -104(%rbp)
	movq 160(%r14), %r15
	movq %r15, -96(%rbp)
	movq 168(%r14), %r15
	movq %r15, -88(%rbp)
	movq 176(%r14), %r15
	movq %r15, -80(%rbp)
	movq 184(%r14), %r15
	movq %r15, -72(%rbp)
	movq 192(%r14), %r15
	movq %r15, -64(%rbp)
	movq 200(%r14), %r15
	movq %r15, -56(%rbp)
	movq 208(%r14), %r15
	movq %r15, -48(%rbp)
	movq 216(%r14), %r15
	movq %r15, -40(%rbp)
	movq 224(%r14), %r15
	movq %r15, -32(%rbp)
	movq 232(%r14), %r15
	movq %r15, -24(%rbp)
	movq 240(%r14), %r15
	movq %r15, -16(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $continue_SB_compile_SB_c_SB_typedefs_SB_concrete_CL_ListTupleASTTupleTypeTContextListTupleASTTupleTypeTContext, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	popq 80(%R15)
	popq 88(%R15)
	popq 96(%R15)
	popq 104(%R15)
	popq 112(%R15)
	popq 120(%R15)
	popq 128(%R15)
	popq 136(%R15)
	popq 144(%R15)
	popq 152(%R15)
	popq 160(%R15)
	popq 168(%R15)
	popq 176(%R15)
	popq 184(%R15)
	popq 192(%R15)
	popq 200(%R15)
	popq 208(%R15)
	popq 216(%R15)
	popq 224(%R15)
	popq 232(%R15)
	popq 240(%R15)
	add $8, %RSP
	add $248, %rsp
	jmp uuid_00000000000dd679
uuid_00000000000dd67b:
	mov %rbp, %rsp
	sub $8, %rsp
	ret
is_SB_incomplete_SB_typedef_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd694
	jmp uuid_00000000000dd696
uuid_00000000000dd694:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd68b
	jmp uuid_00000000000dd68d
uuid_00000000000dd68b:
	push %RBP
	mov -152(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd682
	jmp uuid_00000000000dd684
uuid_00000000000dd682:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -288(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd67f
	jmp uuid_00000000000dd681
uuid_00000000000dd67f:
	push %RBP
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	jmp uuid_00000000000dd67c
	jmp uuid_00000000000dd67e
uuid_00000000000dd67c:
	movb $1, -232(%rbp)
uuid_00000000000dd67e:
	mov -296(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000dd681:
	mov -248(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000dd684:
	mov -240(%RBP),%RSP
	add $-320, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd688
	jmp uuid_00000000000dd68a
uuid_00000000000dd688:
	push %RBP
	pushq -128(%RBP)
	pushq -136(%RBP)
	pushq -144(%RBP)
	jmp uuid_00000000000dd685
	jmp uuid_00000000000dd687
uuid_00000000000dd685:
	movb $1, -168(%rbp)
uuid_00000000000dd687:
	mov -328(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000dd68a:
	mov -184(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000dd68d:
	mov -176(%RBP),%RSP
	add $-352, %RSP
	mov -168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd691
	jmp uuid_00000000000dd693
uuid_00000000000dd691:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -368(%rbp)
	pushq $uuid_00000000000db3a7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd68e
	jmp uuid_00000000000dd690
uuid_00000000000dd68e:
	movb $1, -104(%rbp)
uuid_00000000000dd690:
	mov -360(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dd693:
	mov -120(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dd696:
	mov -112(%RBP),%RSP
	add $-368, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd75b
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd69d
	jmp uuid_00000000000dd69f
uuid_00000000000dd69d:
	push %RBP
	mov -392(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd69a
	jmp uuid_00000000000dd69c
uuid_00000000000dd69a:
	push %RBP
	mov -384(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd697
	jmp uuid_00000000000dd699
uuid_00000000000dd697:
	movb $1, -408(%rbp)
uuid_00000000000dd699:
	mov -456(%RBP),%RSP
	add $-480, %RSP
uuid_00000000000dd69c:
	mov -424(%RBP),%RSP
	add $-480, %RSP
uuid_00000000000dd69f:
	mov -416(%RBP),%RSP
	add $-480, %RSP
	mov -408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd758
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd755
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd6a3
	jmp uuid_00000000000dd6a5
uuid_00000000000dd6a3:
	push %RBP
	jmp uuid_00000000000dd6a0
	jmp uuid_00000000000dd6a2
uuid_00000000000dd6a0:
	movb $1, -552(%rbp)
uuid_00000000000dd6a2:
	mov -568(%RBP),%RSP
	add $-568, %RSP
uuid_00000000000dd6a5:
	mov -560(%RBP),%RSP
	add $-568, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd752
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd6ac
	jmp uuid_00000000000dd6ae
uuid_00000000000dd6ac:
	push %RBP
	jmp uuid_00000000000dd6a9
	jmp uuid_00000000000dd6ab
uuid_00000000000dd6a9:
	push %RBP
	mov -584(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -640(%rbp)
	pushq $uuid_00000000000daff0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd6a6
	jmp uuid_00000000000dd6a8
uuid_00000000000dd6a6:
	movb $1, -608(%rbp)
uuid_00000000000dd6a8:
	mov -632(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000dd6ab:
	mov -624(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000dd6ae:
	mov -616(%RBP),%RSP
	add $-640, %RSP
	mov -608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd74f
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd6b5
	jmp uuid_00000000000dd6b7
uuid_00000000000dd6b5:
	push %RBP
	jmp uuid_00000000000dd6b2
	jmp uuid_00000000000dd6b4
uuid_00000000000dd6b2:
	push %RBP
	mov -656(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq $uuid_00000000000daffa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd6af
	jmp uuid_00000000000dd6b1
uuid_00000000000dd6af:
	movb $1, -680(%rbp)
uuid_00000000000dd6b1:
	mov -704(%RBP),%RSP
	add $-712, %RSP
uuid_00000000000dd6b4:
	mov -696(%RBP),%RSP
	add $-712, %RSP
uuid_00000000000dd6b7:
	mov -688(%RBP),%RSP
	add $-712, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd74c
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -744(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd6be
	jmp uuid_00000000000dd6c0
uuid_00000000000dd6be:
	push %RBP
	jmp uuid_00000000000dd6bb
	jmp uuid_00000000000dd6bd
uuid_00000000000dd6bb:
	push %RBP
	mov -728(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -784(%rbp)
	pushq $uuid_00000000000db004
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd6b8
	jmp uuid_00000000000dd6ba
uuid_00000000000dd6b8:
	movb $1, -752(%rbp)
uuid_00000000000dd6ba:
	mov -776(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000dd6bd:
	mov -768(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000dd6c0:
	mov -760(%RBP),%RSP
	add $-784, %RSP
	mov -752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd749
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -816(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd6c7
	jmp uuid_00000000000dd6c9
uuid_00000000000dd6c7:
	push %RBP
	jmp uuid_00000000000dd6c4
	jmp uuid_00000000000dd6c6
uuid_00000000000dd6c4:
	push %RBP
	mov -800(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -856(%rbp)
	pushq $uuid_00000000000db00f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd6c1
	jmp uuid_00000000000dd6c3
uuid_00000000000dd6c1:
	movb $1, -824(%rbp)
uuid_00000000000dd6c3:
	mov -848(%RBP),%RSP
	add $-856, %RSP
uuid_00000000000dd6c6:
	mov -840(%RBP),%RSP
	add $-856, %RSP
uuid_00000000000dd6c9:
	mov -832(%RBP),%RSP
	add $-856, %RSP
	mov -824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd746
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -888(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd6d0
	jmp uuid_00000000000dd6d2
uuid_00000000000dd6d0:
	push %RBP
	jmp uuid_00000000000dd6cd
	jmp uuid_00000000000dd6cf
uuid_00000000000dd6cd:
	push %RBP
	mov -872(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq $uuid_00000000000db01a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd6ca
	jmp uuid_00000000000dd6cc
uuid_00000000000dd6ca:
	movb $1, -896(%rbp)
uuid_00000000000dd6cc:
	mov -920(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000dd6cf:
	mov -912(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000dd6d2:
	mov -904(%RBP),%RSP
	add $-928, %RSP
	mov -896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd743
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -960(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd6d9
	jmp uuid_00000000000dd6db
uuid_00000000000dd6d9:
	push %RBP
	jmp uuid_00000000000dd6d6
	jmp uuid_00000000000dd6d8
uuid_00000000000dd6d6:
	push %RBP
	mov -944(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1000(%rbp)
	pushq $uuid_00000000000db025
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd6d3
	jmp uuid_00000000000dd6d5
uuid_00000000000dd6d3:
	movb $1, -968(%rbp)
uuid_00000000000dd6d5:
	mov -992(%RBP),%RSP
	add $-1000, %RSP
uuid_00000000000dd6d8:
	mov -984(%RBP),%RSP
	add $-1000, %RSP
uuid_00000000000dd6db:
	mov -976(%RBP),%RSP
	add $-1000, %RSP
	mov -968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd740
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1032(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd6e2
	jmp uuid_00000000000dd6e4
uuid_00000000000dd6e2:
	push %RBP
	jmp uuid_00000000000dd6df
	jmp uuid_00000000000dd6e1
uuid_00000000000dd6df:
	push %RBP
	mov -1016(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq $uuid_00000000000db030
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd6dc
	jmp uuid_00000000000dd6de
uuid_00000000000dd6dc:
	movb $1, -1040(%rbp)
uuid_00000000000dd6de:
	mov -1064(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000dd6e1:
	mov -1056(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000dd6e4:
	mov -1048(%RBP),%RSP
	add $-1072, %RSP
	mov -1040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd73d
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1104(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd6eb
	jmp uuid_00000000000dd6ed
uuid_00000000000dd6eb:
	push %RBP
	jmp uuid_00000000000dd6e8
	jmp uuid_00000000000dd6ea
uuid_00000000000dd6e8:
	push %RBP
	mov -1088(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1144(%rbp)
	pushq $uuid_00000000000db03b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd6e5
	jmp uuid_00000000000dd6e7
uuid_00000000000dd6e5:
	movb $1, -1112(%rbp)
uuid_00000000000dd6e7:
	mov -1136(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000dd6ea:
	mov -1128(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000dd6ed:
	mov -1120(%RBP),%RSP
	add $-1144, %RSP
	mov -1112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd73a
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1176(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd6f4
	jmp uuid_00000000000dd6f6
uuid_00000000000dd6f4:
	push %RBP
	jmp uuid_00000000000dd6f1
	jmp uuid_00000000000dd6f3
uuid_00000000000dd6f1:
	push %RBP
	mov -1160(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1216(%rbp)
	pushq $uuid_00000000000db046
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd6ee
	jmp uuid_00000000000dd6f0
uuid_00000000000dd6ee:
	movb $1, -1184(%rbp)
uuid_00000000000dd6f0:
	mov -1208(%RBP),%RSP
	add $-1216, %RSP
uuid_00000000000dd6f3:
	mov -1200(%RBP),%RSP
	add $-1216, %RSP
uuid_00000000000dd6f6:
	mov -1192(%RBP),%RSP
	add $-1216, %RSP
	mov -1184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd737
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd6fd
	jmp uuid_00000000000dd6ff
uuid_00000000000dd6fd:
	push %RBP
	jmp uuid_00000000000dd6fa
	jmp uuid_00000000000dd6fc
uuid_00000000000dd6fa:
	push %RBP
	mov -1232(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1288(%rbp)
	pushq $uuid_00000000000db051
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd6f7
	jmp uuid_00000000000dd6f9
uuid_00000000000dd6f7:
	movb $1, -1256(%rbp)
uuid_00000000000dd6f9:
	mov -1280(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000dd6fc:
	mov -1272(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000dd6ff:
	mov -1264(%RBP),%RSP
	add $-1288, %RSP
	mov -1256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd734
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1320(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd706
	jmp uuid_00000000000dd708
uuid_00000000000dd706:
	push %RBP
	jmp uuid_00000000000dd703
	jmp uuid_00000000000dd705
uuid_00000000000dd703:
	push %RBP
	mov -1304(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1360(%rbp)
	pushq $uuid_00000000000db05c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd700
	jmp uuid_00000000000dd702
uuid_00000000000dd700:
	movb $1, -1328(%rbp)
uuid_00000000000dd702:
	mov -1352(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000dd705:
	mov -1344(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000dd708:
	mov -1336(%RBP),%RSP
	add $-1360, %RSP
	mov -1328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd731
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1392(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd70f
	jmp uuid_00000000000dd711
uuid_00000000000dd70f:
	push %RBP
	jmp uuid_00000000000dd70c
	jmp uuid_00000000000dd70e
uuid_00000000000dd70c:
	push %RBP
	mov -1376(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1432(%rbp)
	pushq $uuid_00000000000db067
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd709
	jmp uuid_00000000000dd70b
uuid_00000000000dd709:
	movb $1, -1400(%rbp)
uuid_00000000000dd70b:
	mov -1424(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000dd70e:
	mov -1416(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000dd711:
	mov -1408(%RBP),%RSP
	add $-1432, %RSP
	mov -1400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd72e
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1464(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd718
	jmp uuid_00000000000dd71a
uuid_00000000000dd718:
	push %RBP
	jmp uuid_00000000000dd715
	jmp uuid_00000000000dd717
uuid_00000000000dd715:
	push %RBP
	mov -1448(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1504(%rbp)
	pushq $uuid_00000000000db084
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd712
	jmp uuid_00000000000dd714
uuid_00000000000dd712:
	movb $1, -1472(%rbp)
uuid_00000000000dd714:
	mov -1496(%RBP),%RSP
	add $-1504, %RSP
uuid_00000000000dd717:
	mov -1488(%RBP),%RSP
	add $-1504, %RSP
uuid_00000000000dd71a:
	mov -1480(%RBP),%RSP
	add $-1504, %RSP
	mov -1472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd72b
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1536(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd721
	jmp uuid_00000000000dd723
uuid_00000000000dd721:
	push %RBP
	jmp uuid_00000000000dd71e
	jmp uuid_00000000000dd720
uuid_00000000000dd71e:
	push %RBP
	jmp uuid_00000000000dd71b
	jmp uuid_00000000000dd71d
uuid_00000000000dd71b:
	movb $1, -1544(%rbp)
uuid_00000000000dd71d:
	mov -1568(%RBP),%RSP
	add $-1568, %RSP
uuid_00000000000dd720:
	mov -1560(%RBP),%RSP
	add $-1568, %RSP
uuid_00000000000dd723:
	mov -1552(%RBP),%RSP
	add $-1568, %RSP
	mov -1544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd728
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd727
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd72a
uuid_00000000000dd728:
	push %RBP
#call function .lookup : Arrow<Cons<Cons<HashtableEq<Type,U64>,Type>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $is_SB_cstruct_SB_hard_SB_compiled_SB_index_CL_HashtableEqU64Type, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsTypeHashtableEqU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd724
	movq $1, -40(%rbp)
	jmp uuid_00000000000dd726
uuid_00000000000dd724:
uuid_00000000000dd726:
	mov -1576(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000dd72a:
	mov -1512(%RBP),%RSP
	add $-1576, %RSP
	jmp uuid_00000000000dd72d
uuid_00000000000dd72b:
uuid_00000000000dd72d:
	mov -1440(%RBP),%RSP
	add $-1504, %RSP
	jmp uuid_00000000000dd730
uuid_00000000000dd72e:
uuid_00000000000dd730:
	mov -1368(%RBP),%RSP
	add $-1432, %RSP
	jmp uuid_00000000000dd733
uuid_00000000000dd731:
uuid_00000000000dd733:
	mov -1296(%RBP),%RSP
	add $-1360, %RSP
	jmp uuid_00000000000dd736
uuid_00000000000dd734:
uuid_00000000000dd736:
	mov -1224(%RBP),%RSP
	add $-1288, %RSP
	jmp uuid_00000000000dd739
uuid_00000000000dd737:
uuid_00000000000dd739:
	mov -1152(%RBP),%RSP
	add $-1216, %RSP
	jmp uuid_00000000000dd73c
uuid_00000000000dd73a:
uuid_00000000000dd73c:
	mov -1080(%RBP),%RSP
	add $-1144, %RSP
	jmp uuid_00000000000dd73f
uuid_00000000000dd73d:
uuid_00000000000dd73f:
	mov -1008(%RBP),%RSP
	add $-1072, %RSP
	jmp uuid_00000000000dd742
uuid_00000000000dd740:
uuid_00000000000dd742:
	mov -936(%RBP),%RSP
	add $-1000, %RSP
	jmp uuid_00000000000dd745
uuid_00000000000dd743:
uuid_00000000000dd745:
	mov -864(%RBP),%RSP
	add $-928, %RSP
	jmp uuid_00000000000dd748
uuid_00000000000dd746:
uuid_00000000000dd748:
	mov -792(%RBP),%RSP
	add $-856, %RSP
	jmp uuid_00000000000dd74b
uuid_00000000000dd749:
uuid_00000000000dd74b:
	mov -720(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000dd74e
uuid_00000000000dd74c:
uuid_00000000000dd74e:
	mov -648(%RBP),%RSP
	add $-712, %RSP
	jmp uuid_00000000000dd751
uuid_00000000000dd74f:
uuid_00000000000dd751:
	mov -576(%RBP),%RSP
	add $-640, %RSP
	jmp uuid_00000000000dd754
uuid_00000000000dd752:
uuid_00000000000dd754:
	mov -520(%RBP),%RSP
	add $-568, %RSP
	jmp uuid_00000000000dd757
uuid_00000000000dd755:
uuid_00000000000dd757:
	mov -488(%RBP),%RSP
	add $-512, %RSP
	jmp uuid_00000000000dd75a
uuid_00000000000dd758:
#call function is-incomplete-typedef : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	mov %RBX, %RBP
	call is_SB_incomplete_SB_typedef_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-incomplete-typedef : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call is_SB_incomplete_SB_typedef_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dd75a:
	mov -376(%RBP),%RSP
	add $-480, %RSP
	jmp uuid_00000000000dd75d
uuid_00000000000dd75b:
#call function is-incomplete-typedef : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call is_SB_incomplete_SB_typedef_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-incomplete-typedef : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	mov %RBX, %RBP
	call is_SB_incomplete_SB_typedef_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dd75d:
	mov -72(%RBP),%RSP
	add $-368, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
compile_SB_c_SB_typedef_SB_concrete_CL_ArrowNilConsASTConsTypeTContext:
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
#call function .lookup : Arrow<Cons<Cons<HashtableEq<Type,String>,Type>,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $index_SB_c_SB_type_SB_ordinal_CL_HashtableEqStringType, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq $uuid_00000000000db098
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowStringConsStringConsTypeHashtableEqStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $0
uuid_00000000000dd780:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd781
	jmp uuid_00000000000dd782
uuid_00000000000dd781:
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	push %RBP
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd776
	jmp uuid_00000000000dd778
uuid_00000000000dd776:
	push %RBP
	mov -488(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd773
	jmp uuid_00000000000dd775
uuid_00000000000dd773:
	push %RBP
	mov -480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd76d
	jmp uuid_00000000000dd76f
uuid_00000000000dd76d:
	push %RBP
	mov -664(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -768(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd764
	jmp uuid_00000000000dd766
uuid_00000000000dd764:
	push %RBP
	jmp uuid_00000000000dd761
	jmp uuid_00000000000dd763
uuid_00000000000dd761:
	push %RBP
	mov -704(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -808(%rbp)
	pushq $uuid_00000000000dcbb9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd75e
	jmp uuid_00000000000dd760
uuid_00000000000dd75e:
	movb $1, -776(%rbp)
uuid_00000000000dd760:
	mov -800(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000dd763:
	mov -792(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000dd766:
	mov -784(%RBP),%RSP
	add $-808, %RSP
	mov -776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd76a
	jmp uuid_00000000000dd76c
uuid_00000000000dd76a:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd767
	jmp uuid_00000000000dd769
uuid_00000000000dd767:
	movb $1, -680(%rbp)
uuid_00000000000dd769:
	mov -816(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000dd76c:
	mov -696(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000dd76f:
	mov -688(%RBP),%RSP
	add $-888, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd770
	jmp uuid_00000000000dd772
uuid_00000000000dd770:
	movb $1, -504(%rbp)
uuid_00000000000dd772:
	mov -600(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000dd775:
	mov -520(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000dd778:
	mov -512(%RBP),%RSP
	add $-888, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd77d
	push %RBP
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	jmp uuid_00000000000dd77a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd779
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd77c
uuid_00000000000dd77a:
#call function compile-c-fields-of-case : Arrow<Cons<Cons<Type,AST>,U64>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call compile_SB_c_SB_fields_SB_of_SB_case_CL_ArrowTypeConsU64ConsASTType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -992(%RBP)
	popq -984(%RBP)
	popq -976(%RBP)
#call function is-incomplete-typedef : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	mov %RBX, %RBP
	call is_SB_incomplete_SB_typedef_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -344(%RBP), %RAX
	orq %R14,%RAX
	movq %RAX, -344(%rbp)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
#call function compile-c-casedef : Arrow<Cons<Type,U64>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call compile_SB_c_SB_casedef_CL_ArrowSConsU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
uuid_00000000000dd77c:
	mov -896(%RBP),%RSP
	add $-992, %RSP
	jmp uuid_00000000000dd77f
uuid_00000000000dd77d:
#call function compile-c-fields-of-case : Arrow<Cons<Cons<Type,AST>,U64>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call compile_SB_c_SB_fields_SB_of_SB_case_CL_ArrowTypeConsU64ConsASTType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -912(%RBP)
	popq -904(%RBP)
	popq -896(%RBP)
#call function is-incomplete-typedef : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	mov %RBX, %RBP
	call is_SB_incomplete_SB_typedef_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -344(%RBP), %RAX
	orq %R14,%RAX
	movq %RAX, -344(%rbp)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
#call function compile-c-casedef : Arrow<Cons<Type,U64>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call compile_SB_c_SB_casedef_CL_ArrowSConsU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	mov -312(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -312(%rbp)
	movq -888(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -880(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -872(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -864(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -856(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -848(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -840(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -832(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -824(%rbp), %r15
	movq %r15, -152(%rbp)
uuid_00000000000dd77f:
	mov -424(%RBP),%RSP
	add $-912, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $8, %RSP
	jmp uuid_00000000000dd780
uuid_00000000000dd782:
	push %RBP
	mov -344(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd7a1
#call function .bind : Arrow<Cons<Cons<HashtableEq<Type,U64>,Type>,U64>,HashtableEq<Type,U64>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $is_SB_cstruct_SB_hard_SB_compiled_SB_index_CL_HashtableEqU64Type, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqU64TypeConsU64ConsTypeHashtableEqU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov $is_SB_cstruct_SB_hard_SB_compiled_SB_index_CL_HashtableEqU64Type, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd79b
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd79c
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -304(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd79d
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd79e
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd79f
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd7a0
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	jmp uuid_00000000000dd7a3
uuid_00000000000dd7a1:
#call function cons : Arrow<Cons<Tuple<Tuple<TContext,Type>,AST>,List<Tuple<Tuple<TContext,Type>,AST>>>,List<Tuple<Tuple<TContext,Type>,AST>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq $0
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	mov $continue_SB_compile_SB_c_SB_typedefs_SB_concrete_CL_ListTupleASTTupleTypeTContextListTupleASTTupleTypeTContext, %r15
	pushq 240(%r15)
	pushq 232(%r15)
	pushq 224(%r15)
	pushq 216(%r15)
	pushq 208(%r15)
	pushq 200(%r15)
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call cons_CL_ArrowListTupleASTTupleTypeTContextConsListTupleASTTupleTypeTContextTupleASTTupleTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used248
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	mov $continue_SB_compile_SB_c_SB_typedefs_SB_concrete_CL_ListTupleASTTupleTypeTContextListTupleASTTupleTypeTContext, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
	popq 200(%r15)
	popq 208(%r15)
	popq 216(%r15)
	popq 224(%r15)
	popq 232(%r15)
	popq 240(%r15)
uuid_00000000000dd7a3:
	mov -352(%RBP),%RSP
	add $-352, %RSP
	mov %rbp, %rsp
	sub $224, %rsp
	ret
compile_SB_c_SB_typedef_CL_ArrowNilConsASTType:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd7a4
#call function compile-c-typedef-concrete : Arrow<Cons<Cons<TContext,Type>,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call compile_SB_c_SB_typedef_SB_concrete_CL_ArrowNilConsASTConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd7a6
uuid_00000000000dd7a4:
uuid_00000000000dd7a6:
	mov -112(%RBP),%RSP
	add $-112, %RSP
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq $0
	push %RBP
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd7ad
	jmp uuid_00000000000dd7af
uuid_00000000000dd7ad:
	push %RBP
	mov -160(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd7aa
	jmp uuid_00000000000dd7ac
uuid_00000000000dd7aa:
	push %RBP
	mov -152(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd7a7
	jmp uuid_00000000000dd7a9
uuid_00000000000dd7a7:
	movb $1, -176(%rbp)
uuid_00000000000dd7a9:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dd7ac:
	mov -192(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dd7af:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	mov -176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd7c9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd7c8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd7cb
uuid_00000000000dd7c9:
	pushq -248(%rbp)
#call function .length : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call _DT_length_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function .lookup : Arrow<Cons<Cons<HashtableEq<Tuple<String,U64>,List<Type>>,Tuple<String,U64>>,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $concrete_SB_type_SB_instances_SB_index_CL_HashtableEqListTypeTupleU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowListTypeConsListTypeConsTupleU64StringHashtableEqListTypeTupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
uuid_00000000000dd7c5:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd7c6
	jmp uuid_00000000000dd7c7
uuid_00000000000dd7c6:
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq $0
	push %RBP
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd7be
	jmp uuid_00000000000dd7c0
uuid_00000000000dd7be:
	push %RBP
	mov -392(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd7bb
	jmp uuid_00000000000dd7bd
uuid_00000000000dd7bb:
	push %RBP
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	jmp uuid_00000000000dd7b8
	jmp uuid_00000000000dd7ba
uuid_00000000000dd7b8:
	movb $1, -408(%rbp)
uuid_00000000000dd7ba:
	mov -472(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000dd7bd:
	mov -424(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000dd7c0:
	mov -416(%RBP),%RSP
	add $-496, %RSP
	mov -408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd7c2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd7c1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd7c4
uuid_00000000000dd7c2:
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function compile-c-typedef-concrete : Arrow<Cons<Cons<TContext,Type>,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call compile_SB_c_SB_typedef_SB_concrete_CL_ArrowNilConsASTConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -464(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -280(%rbp)
uuid_00000000000dd7c4:
	mov -360(%RBP),%RSP
	add $-616, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000dd7c5
uuid_00000000000dd7c7:
uuid_00000000000dd7cb:
	mov -144(%RBP),%RSP
	add $-312, %RSP
	mov %rbp, %rsp
	sub $104, %rsp
	ret
compile_SB_c_SB_fields_SB_of_SB_case_CL_ArrowTypeConsU64ConsASTType:
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daff0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq $0
	push %RBP
	mov -288(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd7db
	jmp uuid_00000000000dd7dd
uuid_00000000000dd7db:
	push %RBP
	mov -280(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd7d8
	jmp uuid_00000000000dd7da
uuid_00000000000dd7d8:
	push %RBP
	mov -272(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -464(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd7d2
	jmp uuid_00000000000dd7d4
uuid_00000000000dd7d2:
	push %RBP
	jmp uuid_00000000000dd7cf
	jmp uuid_00000000000dd7d1
uuid_00000000000dd7cf:
	push %RBP
	mov -400(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd7cc
	jmp uuid_00000000000dd7ce
uuid_00000000000dd7cc:
	movb $1, -472(%rbp)
uuid_00000000000dd7ce:
	mov -496(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000dd7d1:
	mov -488(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000dd7d4:
	mov -480(%RBP),%RSP
	add $-504, %RSP
	mov -472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd7d5
	jmp uuid_00000000000dd7d7
uuid_00000000000dd7d5:
	movb $1, -296(%rbp)
uuid_00000000000dd7d7:
	mov -392(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000dd7da:
	mov -312(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000dd7dd:
	mov -304(%RBP),%RSP
	add $-504, %RSP
	mov -296(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd7e2
	push %RBP
	jmp uuid_00000000000dd7df
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd7de
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd7e1
uuid_00000000000dd7df:
uuid_00000000000dd7e1:
	mov -512(%RBP),%RSP
	add $-512, %RSP
	jmp uuid_00000000000dd7e4
uuid_00000000000dd7e2:
#call function type-of-s-with-fields : Arrow<Cons<Cons<Cons<Type,String>,AST>,U64>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -504(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call type_SB_of_SB_s_SB_with_SB_fields_CL_ArrowTypeConsU64ConsASTConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -144(%RSP)
	push -144(%RSP)
	push -144(%RSP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
uuid_00000000000dd7e4:
	mov -216(%RBP),%RSP
	add $-504, %RSP
	subq $24, %rsp
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $112, %rsp
	ret
compile_SB_c_SB_casedef_CL_ArrowSConsU64Type:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd7e5
	pushq $2
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function compile-c-casedef-fields : Arrow<Cons<Cons<Type,U64>,U64>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $1
	mov %RBX, %RBP
	call compile_SB_c_SB_casedef_SB_fields_CL_ArrowSConsU64ConsU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	pushq $0
	pushq $uuid_00000000000dd7e6
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	subq $24, %rsp
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $40, %rsp
	ret
compile_SB_c_SB_casedef_SB_fields_CL_ArrowSConsU64ConsU64Type:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -128(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd7ed
	jmp uuid_00000000000dd7ef
uuid_00000000000dd7ed:
	push %RBP
	jmp uuid_00000000000dd7ea
	jmp uuid_00000000000dd7ec
uuid_00000000000dd7ea:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq $uuid_00000000000daff0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd7e7
	jmp uuid_00000000000dd7e9
uuid_00000000000dd7e7:
	movb $1, -136(%rbp)
uuid_00000000000dd7e9:
	mov -160(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dd7ec:
	mov -152(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dd7ef:
	mov -144(%RBP),%RSP
	add $-168, %RSP
	mov -136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd813
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd808
	jmp uuid_00000000000dd80a
uuid_00000000000dd808:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd7ff
	jmp uuid_00000000000dd801
uuid_00000000000dd7ff:
	push %RBP
	mov -256(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd7f6
	jmp uuid_00000000000dd7f8
uuid_00000000000dd7f6:
	push %RBP
	jmp uuid_00000000000dd7f3
	jmp uuid_00000000000dd7f5
uuid_00000000000dd7f3:
	push %RBP
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	jmp uuid_00000000000dd7f0
	jmp uuid_00000000000dd7f2
uuid_00000000000dd7f0:
	movb $1, -336(%rbp)
uuid_00000000000dd7f2:
	mov -360(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000dd7f5:
	mov -352(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000dd7f8:
	mov -344(%RBP),%RSP
	add $-384, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd7fc
	jmp uuid_00000000000dd7fe
uuid_00000000000dd7fc:
	push %RBP
	pushq -232(%RBP)
	pushq -240(%RBP)
	pushq -248(%RBP)
	jmp uuid_00000000000dd7f9
	jmp uuid_00000000000dd7fb
uuid_00000000000dd7f9:
	movb $1, -272(%rbp)
uuid_00000000000dd7fb:
	mov -392(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dd7fe:
	mov -288(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dd801:
	mov -280(%RBP),%RSP
	add $-416, %RSP
	mov -272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd805
	jmp uuid_00000000000dd807
uuid_00000000000dd805:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -432(%rbp)
	pushq $uuid_00000000000db3a7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd802
	jmp uuid_00000000000dd804
uuid_00000000000dd802:
	movb $1, -208(%rbp)
uuid_00000000000dd804:
	mov -424(%RBP),%RSP
	add $-432, %RSP
uuid_00000000000dd807:
	mov -224(%RBP),%RSP
	add $-432, %RSP
uuid_00000000000dd80a:
	mov -216(%RBP),%RSP
	add $-432, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd810
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	jmp uuid_00000000000dd80d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd80c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd80f
uuid_00000000000dd80d:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $0
	pushq $uuid_00000000000dd80b
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -32(%RBP), %RAX
	mov $1000, %R14
	mul %R14
	mov %RAX, %RAX
	mov -40(%RBP), %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	pushq $0
	pushq $uuid_00000000000db0f9
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000dd80f:
	mov -440(%RBP),%RSP
	add $-464, %RSP
	jmp uuid_00000000000dd812
uuid_00000000000dd810:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $0
	pushq $uuid_00000000000dd80b
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -32(%RBP), %RAX
	mov $1000, %R14
	mul %R14
	mov %RAX, %RAX
	mov -40(%RBP), %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	pushq $0
	pushq $uuid_00000000000db0f9
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
#call function compile-c-casedef-fields : Arrow<Cons<Cons<Type,U64>,U64>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -32(%rbp)
	mov -40(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call compile_SB_c_SB_casedef_SB_fields_CL_ArrowSConsU64ConsU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000dd812:
	mov -176(%RBP),%RSP
	add $-432, %RSP
	jmp uuid_00000000000dd815
uuid_00000000000dd813:
uuid_00000000000dd815:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	subq $24, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
fragment_SB_context_CL__CL_new_CL_ArrowFContextNil:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	subq $200, %rsp
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,AST>,U8>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $1
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsU8ConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	subq $152, %rsp
	pushq 152(%rsp)
	pushq 168(%rsp)
	pushq 184(%rsp)
	pushq 200(%rsp)
	pushq 216(%rsp)
	pushq 232(%rsp)
	pushq 248(%rsp)
	pushq 264(%rsp)
	pushq 280(%rsp)
	pushq 296(%rsp)
	pushq 312(%rsp)
	pushq 328(%rsp)
	pushq 344(%rsp)
	pushq 360(%rsp)
	pushq 376(%rsp)
	pushq 392(%rsp)
	pushq 408(%rsp)
	pushq 424(%rsp)
	pushq 440(%rsp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsU8ConsASTConsTypeConsStringFContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function find-alias : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call find_SB_alias_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -208(%rbp)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000dd838:
#call function non-zero : Arrow<FContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd839
	jmp uuid_00000000000dd83a
uuid_00000000000dd839:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq $0
	push %RBP
	mov -1104(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd822
	jmp uuid_00000000000dd824
uuid_00000000000dd822:
	push %RBP
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	jmp uuid_00000000000dd81f
	jmp uuid_00000000000dd821
uuid_00000000000dd81f:
	push %RBP
	pushq -928(%RBP)
	pushq -936(%RBP)
	pushq -944(%RBP)
	jmp uuid_00000000000dd81c
	jmp uuid_00000000000dd81e
uuid_00000000000dd81c:
	push %RBP
	mov -920(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd819
	jmp uuid_00000000000dd81b
uuid_00000000000dd819:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd816
	jmp uuid_00000000000dd818
uuid_00000000000dd816:
	movb $1, -1112(%rbp)
uuid_00000000000dd818:
	mov -1336(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000dd81b:
	mov -1320(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000dd81e:
	mov -1288(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000dd821:
	mov -1128(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000dd824:
	mov -1120(%RBP),%RSP
	add $-1536, %RSP
	mov -1112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd835
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd834
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd837
uuid_00000000000dd835:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -1328(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd831
	movq -1536(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1528(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1520(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1512(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1504(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1408(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1400(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1392(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1384(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1376(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1360(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1352(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1344(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dd833
uuid_00000000000dd831:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd82e
	movq -1280(%rbp), %r15
	movq %r15, -672(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -664(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -656(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -648(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -640(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -632(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -624(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -616(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -608(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -600(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -592(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -584(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -576(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -568(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -560(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -552(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -544(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -536(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -528(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db806
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000dd830
uuid_00000000000dd82e:
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function range : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	mov %RBX, %RBP
	call range_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd82b
	jmp uuid_00000000000dd82d
uuid_00000000000dd82b:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd828
	movq -1280(%rbp), %r15
	movq %r15, -672(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -664(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -656(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -648(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -640(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -632(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -624(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -616(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -608(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -600(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -592(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -584(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -576(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -568(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -560(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -552(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -544(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -536(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -528(%rbp)
	movq -1576(%rbp), %r15
	movq %r15, -696(%rbp)
	movq -1568(%rbp), %r15
	movq %r15, -688(%rbp)
	movq -1560(%rbp), %r15
	movq %r15, -680(%rbp)
	jmp uuid_00000000000dd82a
uuid_00000000000dd828:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd825
	jmp uuid_00000000000dd827
uuid_00000000000dd825:
	movq -1280(%rbp), %r15
	movq %r15, -672(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -664(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -656(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -648(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -640(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -632(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -624(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -616(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -608(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -600(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -592(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -584(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -576(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -568(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -560(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -552(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -544(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -536(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -528(%rbp)
	movq -1576(%rbp), %r15
	movq %r15, -696(%rbp)
	movq -1568(%rbp), %r15
	movq %r15, -688(%rbp)
	movq -1560(%rbp), %r15
	movq %r15, -680(%rbp)
uuid_00000000000dd827:
	mov -1624(%RBP),%RSP
	add $-1624, %RSP
uuid_00000000000dd82a:
	mov -1616(%RBP),%RSP
	add $-1624, %RSP
uuid_00000000000dd82d:
	mov -1608(%RBP),%RSP
	add $-1624, %RSP
	movq -1536(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1528(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1520(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1512(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1504(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1408(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1400(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1392(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1384(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1376(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1360(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1352(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1344(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dd830:
	mov -1552(%RBP),%RSP
	add $-1624, %RSP
uuid_00000000000dd833:
	mov -1544(%RBP),%RSP
	add $-1624, %RSP
uuid_00000000000dd837:
	mov -904(%RBP),%RSP
	add $-1624, %RSP
	add $200, %rsp
	add $200, %rsp
	add $8, %rsp
	add $152, %rsp
	add $24, %rsp
	add $8, %rsp
	add $200, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dd838
uuid_00000000000dd83a:
	push %RBP
	mov -312(%RBP), %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	push %RAX
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd857
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd83b
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db757
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd83c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -520(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -512(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -504(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -496(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -488(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -408(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -400(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -392(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dd853:
#call function non-zero : Arrow<FContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd854
	jmp uuid_00000000000dd855
uuid_00000000000dd854:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq $0
	push %RBP
	mov -1112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd849
	jmp uuid_00000000000dd84b
uuid_00000000000dd849:
	push %RBP
	pushq -960(%RBP)
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	jmp uuid_00000000000dd846
	jmp uuid_00000000000dd848
uuid_00000000000dd846:
	push %RBP
	pushq -936(%RBP)
	pushq -944(%RBP)
	pushq -952(%RBP)
	jmp uuid_00000000000dd843
	jmp uuid_00000000000dd845
uuid_00000000000dd843:
	push %RBP
	mov -928(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd840
	jmp uuid_00000000000dd842
uuid_00000000000dd840:
	push %RBP
	mov -920(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd83d
	jmp uuid_00000000000dd83f
uuid_00000000000dd83d:
	movb $1, -1120(%rbp)
uuid_00000000000dd83f:
	mov -1344(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000dd842:
	mov -1328(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000dd845:
	mov -1296(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000dd848:
	mov -1136(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000dd84b:
	mov -1128(%RBP),%RSP
	add $-1544, %RSP
	mov -1120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd850
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd84f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd852
uuid_00000000000dd850:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -1336(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd84c
	jmp uuid_00000000000dd84e
uuid_00000000000dd84c:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db757
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd84e:
	mov -1552(%RBP),%RSP
	add $-1552, %RSP
	movq -1544(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1536(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1528(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1520(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1512(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1504(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1408(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1400(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1392(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1384(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1376(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1360(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1352(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dd852:
	mov -912(%RBP),%RSP
	add $-1552, %RSP
	add $200, %rsp
	add $200, %rsp
	add $8, %rsp
	add $152, %rsp
	add $24, %rsp
	add $8, %rsp
	add $200, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dd853
uuid_00000000000dd855:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd856
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd859
uuid_00000000000dd857:
uuid_00000000000dd859:
	mov -704(%RBP),%RSP
	add $-704, %RSP
	subq $152, %rsp
	pushq -672(%rbp)
	pushq -664(%rbp)
	pushq -656(%rbp)
	pushq -648(%rbp)
	pushq -640(%rbp)
	pushq -632(%rbp)
	pushq -624(%rbp)
	pushq -616(%rbp)
	pushq -608(%rbp)
	pushq -600(%rbp)
	pushq -592(%rbp)
	pushq -584(%rbp)
	pushq -576(%rbp)
	pushq -568(%rbp)
	pushq -560(%rbp)
	pushq -552(%rbp)
	pushq -544(%rbp)
	pushq -536(%rbp)
	pushq -528(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $320, %rsp
	ret
fragment_SB_context_CL__CL_lookup_SB_soft_CL_ArrowFragmentConsASTConsTypeConsStringFContext:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,AST>,U8>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $0
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsU8ConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	subq $152, %rsp
	pushq 152(%rsp)
	pushq 168(%rsp)
	pushq 184(%rsp)
	pushq 200(%rsp)
	pushq 216(%rsp)
	pushq 232(%rsp)
	pushq 248(%rsp)
	pushq 264(%rsp)
	pushq 280(%rsp)
	pushq 296(%rsp)
	pushq 312(%rsp)
	pushq 328(%rsp)
	pushq 344(%rsp)
	pushq 360(%rsp)
	pushq 376(%rsp)
	pushq 392(%rsp)
	pushq 408(%rsp)
	pushq 424(%rsp)
	pushq 440(%rsp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
fragment_SB_context_CL__CL_lookups_CL_ArrowListFragmentConsASTConsTypeConsTypeConsStringFContext:
#call function fragment-context::lookups : Arrow<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,U8>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq $1
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookups_CL_ArrowListFragmentConsU8ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	subq $168, %rsp
	pushq 168(%rsp)
	pushq 184(%rsp)
	pushq 200(%rsp)
	pushq 216(%rsp)
	pushq 232(%rsp)
	pushq 248(%rsp)
	pushq 264(%rsp)
	pushq 280(%rsp)
	pushq 296(%rsp)
	pushq 312(%rsp)
	pushq 328(%rsp)
	pushq 344(%rsp)
	pushq 360(%rsp)
	pushq 376(%rsp)
	pushq 392(%rsp)
	pushq 408(%rsp)
	pushq 424(%rsp)
	pushq 440(%rsp)
	pushq 456(%rsp)
	pushq 472(%rsp)
	pushq 488(%rsp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	addq $168, %rsp
	mov %rbp, %rsp
	sub $336, %rsp
	ret
fragment_SB_context_CL__CL_lookups_CL_ArrowListFragmentConsU8ConsASTConsTypeConsTypeConsStringFContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function find-alias : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call find_SB_alias_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -208(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000dd8ac:
#call function non-zero : Arrow<FContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd8ad
	jmp uuid_00000000000dd8ae
uuid_00000000000dd8ad:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq $0
	push %RBP
	mov -1144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd86a
	jmp uuid_00000000000dd86c
uuid_00000000000dd86a:
	push %RBP
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	jmp uuid_00000000000dd867
	jmp uuid_00000000000dd869
uuid_00000000000dd867:
	push %RBP
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	jmp uuid_00000000000dd864
	jmp uuid_00000000000dd866
uuid_00000000000dd864:
	push %RBP
	mov -960(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd861
	jmp uuid_00000000000dd863
uuid_00000000000dd861:
	push %RBP
	mov -952(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd85e
	jmp uuid_00000000000dd860
uuid_00000000000dd85e:
	movb $1, -1152(%rbp)
uuid_00000000000dd860:
	mov -1376(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000dd863:
	mov -1360(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000dd866:
	mov -1328(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000dd869:
	mov -1168(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000dd86c:
	mov -1160(%RBP),%RSP
	add $-1576, %RSP
	mov -1152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd8a9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd8a8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd8ab
uuid_00000000000dd8a9:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -1368(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd8a5
	movq -1576(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1568(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1560(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1552(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1544(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1536(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1528(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1520(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1512(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1504(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1408(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1400(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1392(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1384(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dd8a7
uuid_00000000000dd8a5:
	push %RBP
#call function is : Arrow<Cons<Sized<24>,Sized<24>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized24Sized24
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd8a2
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd89f
	push %RBP
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd89c
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
	popq -648(%RBP)
	popq -640(%RBP)
	popq -632(%RBP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db806
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	jmp uuid_00000000000dd89e
uuid_00000000000dd89c:
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
	popq -648(%RBP)
	popq -640(%RBP)
	popq -632(%RBP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
uuid_00000000000dd89e:
	mov -1608(%RBP),%RSP
	add $-1608, %RSP
	jmp uuid_00000000000dd8a1
uuid_00000000000dd89f:
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function range : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	mov %RBX, %RBP
	call range_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd891
	jmp uuid_00000000000dd893
uuid_00000000000dd891:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd88e
	push %RBP
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd88b
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
	popq -648(%RBP)
	popq -640(%RBP)
	popq -632(%RBP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	movq -1624(%rbp), %r15
	movq %r15, -736(%rbp)
	movq -1616(%rbp), %r15
	movq %r15, -728(%rbp)
	movq -1608(%rbp), %r15
	movq %r15, -720(%rbp)
	jmp uuid_00000000000dd88d
uuid_00000000000dd88b:
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
	popq -648(%RBP)
	popq -640(%RBP)
	popq -632(%RBP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
uuid_00000000000dd88d:
	mov -1672(%RBP),%RSP
	add $-1672, %RSP
	jmp uuid_00000000000dd890
uuid_00000000000dd88e:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd880
	jmp uuid_00000000000dd882
uuid_00000000000dd880:
	push %RBP
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd87d
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
	popq -648(%RBP)
	popq -640(%RBP)
	popq -632(%RBP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	movq -1624(%rbp), %r15
	movq %r15, -736(%rbp)
	movq -1616(%rbp), %r15
	movq %r15, -728(%rbp)
	movq -1608(%rbp), %r15
	movq %r15, -720(%rbp)
	jmp uuid_00000000000dd87f
uuid_00000000000dd87d:
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
	popq -648(%RBP)
	popq -640(%RBP)
	popq -632(%RBP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
uuid_00000000000dd87f:
	mov -1680(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000dd882:
	mov -1672(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000dd890:
	mov -1664(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000dd893:
	mov -1656(%RBP),%RSP
	add $-1680, %RSP
	movq -1576(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1568(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1560(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1552(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1544(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1536(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1528(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1520(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1512(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1504(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1408(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1400(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1392(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1384(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dd8a1:
	mov -1600(%RBP),%RSP
	add $-1680, %RSP
	jmp uuid_00000000000dd8a4
uuid_00000000000dd8a2:
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
	popq -648(%RBP)
	popq -640(%RBP)
	popq -632(%RBP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dd8a4:
	mov -1592(%RBP),%RSP
	add $-1592, %RSP
uuid_00000000000dd8a7:
	mov -1584(%RBP),%RSP
	add $-1592, %RSP
uuid_00000000000dd8ab:
	mov -944(%RBP),%RSP
	add $-1592, %RSP
	add $200, %rsp
	add $200, %rsp
	add $8, %rsp
	add $152, %rsp
	add $24, %rsp
	add $8, %rsp
	add $200, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dd8ac
uuid_00000000000dd8ae:
	push %RBP
	mov -336(%RBP), %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	push %RAX
#call function .length : Arrow<List<Fragment>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	mov %RBX, %RBP
	call _DT_length_CL_ArrowU64ListFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd8ca
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd8af
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db757
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd83c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -544(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -536(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -528(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -520(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -512(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -504(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -496(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -488(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -408(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -400(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -392(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dd8c6:
#call function non-zero : Arrow<FContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd8c7
	jmp uuid_00000000000dd8c8
uuid_00000000000dd8c7:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq $0
	push %RBP
	mov -1152(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd8bc
	jmp uuid_00000000000dd8be
uuid_00000000000dd8bc:
	push %RBP
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	jmp uuid_00000000000dd8b9
	jmp uuid_00000000000dd8bb
uuid_00000000000dd8b9:
	push %RBP
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	jmp uuid_00000000000dd8b6
	jmp uuid_00000000000dd8b8
uuid_00000000000dd8b6:
	push %RBP
	mov -968(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd8b3
	jmp uuid_00000000000dd8b5
uuid_00000000000dd8b3:
	push %RBP
	mov -960(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd8b0
	jmp uuid_00000000000dd8b2
uuid_00000000000dd8b0:
	movb $1, -1160(%rbp)
uuid_00000000000dd8b2:
	mov -1384(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000dd8b5:
	mov -1368(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000dd8b8:
	mov -1336(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000dd8bb:
	mov -1176(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000dd8be:
	mov -1168(%RBP),%RSP
	add $-1584, %RSP
	mov -1160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd8c3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd8c2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd8c5
uuid_00000000000dd8c3:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -1376(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd8bf
	jmp uuid_00000000000dd8c1
uuid_00000000000dd8bf:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db757
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd8c1:
	mov -1592(%RBP),%RSP
	add $-1592, %RSP
	movq -1584(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1576(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1568(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1560(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1552(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1544(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1536(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1528(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1520(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1512(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1504(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1408(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1400(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1392(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dd8c5:
	mov -952(%RBP),%RSP
	add $-1592, %RSP
	add $200, %rsp
	add $200, %rsp
	add $8, %rsp
	add $152, %rsp
	add $24, %rsp
	add $8, %rsp
	add $200, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dd8c6
uuid_00000000000dd8c8:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd8c9
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd8cc
uuid_00000000000dd8ca:
uuid_00000000000dd8cc:
	mov -744(%RBP),%RSP
	add $-744, %RSP
	subq $168, %rsp
	pushq -712(%rbp)
	pushq -704(%rbp)
	pushq -696(%rbp)
	pushq -688(%rbp)
	pushq -680(%rbp)
	pushq -672(%rbp)
	pushq -664(%rbp)
	pushq -656(%rbp)
	pushq -648(%rbp)
	pushq -640(%rbp)
	pushq -632(%rbp)
	pushq -624(%rbp)
	pushq -616(%rbp)
	pushq -608(%rbp)
	pushq -600(%rbp)
	pushq -592(%rbp)
	pushq -584(%rbp)
	pushq -576(%rbp)
	pushq -568(%rbp)
	pushq -560(%rbp)
	pushq -552(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	addq $168, %rsp
	mov %rbp, %rsp
	sub $344, %rsp
	ret
fragment_SB_context_CL__CL_lookup_SB_vararg_CL_ArrowFragmentListConsASTConsTypeConsStringFContext:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000dd8e3:
#call function non-zero : Arrow<FContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd8e4
	jmp uuid_00000000000dd8e5
uuid_00000000000dd8e4:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq $0
	push %RBP
	mov -888(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd8d9
	jmp uuid_00000000000dd8db
uuid_00000000000dd8d9:
	push %RBP
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq -752(%RBP)
	pushq -760(%RBP)
	pushq -768(%RBP)
	pushq -776(%RBP)
	pushq -784(%RBP)
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	jmp uuid_00000000000dd8d6
	jmp uuid_00000000000dd8d8
uuid_00000000000dd8d6:
	push %RBP
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	jmp uuid_00000000000dd8d3
	jmp uuid_00000000000dd8d5
uuid_00000000000dd8d3:
	push %RBP
	mov -704(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd8d0
	jmp uuid_00000000000dd8d2
uuid_00000000000dd8d0:
	push %RBP
	mov -696(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd8cd
	jmp uuid_00000000000dd8cf
uuid_00000000000dd8cd:
	movb $1, -896(%rbp)
uuid_00000000000dd8cf:
	mov -1120(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000dd8d2:
	mov -1104(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000dd8d5:
	mov -1072(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000dd8d8:
	mov -912(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000dd8db:
	mov -904(%RBP),%RSP
	add $-1320, %RSP
	mov -896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd8e0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd8df
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd8e2
uuid_00000000000dd8e0:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd8dc
	jmp uuid_00000000000dd8de
uuid_00000000000dd8dc:
#call function close : Arrow<FragmentList,Array<FragmentList,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentListFragmentList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq $0
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
uuid_00000000000dd8de:
	mov -1328(%RBP),%RSP
	add $-1328, %RSP
	movq -1320(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1312(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1304(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1296(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1288(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dd8e2:
	mov -688(%RBP),%RSP
	add $-1328, %RSP
	add $200, %rsp
	add $200, %rsp
	add $8, %rsp
	add $152, %rsp
	add $24, %rsp
	add $8, %rsp
	add $200, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dd8e3
uuid_00000000000dd8e5:
	subq $168, %rsp
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	addq $168, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext:
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	subq $200, %rsp
	pushq -592(%rbp)
	pushq -584(%rbp)
	pushq -576(%rbp)
	pushq -568(%rbp)
	pushq -560(%rbp)
	pushq -552(%rbp)
	pushq -544(%rbp)
	pushq -536(%rbp)
	pushq -528(%rbp)
	pushq -520(%rbp)
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $392, %rsp
	ret
bind_SB_vararg_CL_ArrowFContextConsFragmentConsTypeConsStringFContext:
#call function fragment-context::lookup-soft : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_SB_soft_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function fragment::set-vararg : Arrow<Cons<Fragment,List<Array<Fragment,?>>>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
#call function cons : Arrow<Cons<Array<Fragment,?>,List<Array<Fragment,?>>>,List<Array<Fragment,?>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<Fragment,Array<Fragment,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	mov %RBX, %RBP
	call cons_CL_ArrowListArray_QM_FragmentConsListArray_QM_FragmentArray_QM_Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_vararg_CL_ArrowFragmentConsListArray_QM_FragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	subq $200, %rsp
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $392, %rsp
	ret
with_SB_location_CL_ArrowASTConsSourceLocationAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd953
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd950
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd8ec
	jmp uuid_00000000000dd8ee
uuid_00000000000dd8ec:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	jmp uuid_00000000000dd8e9
	jmp uuid_00000000000dd8eb
uuid_00000000000dd8e9:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd8e6
	jmp uuid_00000000000dd8e8
uuid_00000000000dd8e6:
	movb $1, -504(%rbp)
uuid_00000000000dd8e8:
	mov -584(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000dd8eb:
	mov -520(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000dd8ee:
	mov -512(%RBP),%RSP
	add $-592, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd94d
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd8f8
	jmp uuid_00000000000dd8fa
uuid_00000000000dd8f8:
	push %RBP
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	jmp uuid_00000000000dd8f5
	jmp uuid_00000000000dd8f7
uuid_00000000000dd8f5:
	push %RBP
	mov -608(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd8f2
	jmp uuid_00000000000dd8f4
uuid_00000000000dd8f2:
	movb $1, -680(%rbp)
uuid_00000000000dd8f4:
	mov -760(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000dd8f7:
	mov -696(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000dd8fa:
	mov -688(%RBP),%RSP
	add $-768, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd94a
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd901
	jmp uuid_00000000000dd903
uuid_00000000000dd901:
	push %RBP
	jmp uuid_00000000000dd8fe
	jmp uuid_00000000000dd900
uuid_00000000000dd8fe:
	movb $1, -856(%rbp)
uuid_00000000000dd900:
	mov -872(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000dd903:
	mov -864(%RBP),%RSP
	add $-872, %RSP
	mov -856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd947
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -952(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd90a
	jmp uuid_00000000000dd90c
uuid_00000000000dd90a:
	push %RBP
	mov -944(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd907
	jmp uuid_00000000000dd909
uuid_00000000000dd907:
	push %RBP
	mov -936(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd904
	jmp uuid_00000000000dd906
uuid_00000000000dd904:
	movb $1, -960(%rbp)
uuid_00000000000dd906:
	mov -1056(%RBP),%RSP
	add $-1128, %RSP
uuid_00000000000dd909:
	mov -976(%RBP),%RSP
	add $-1128, %RSP
uuid_00000000000dd90c:
	mov -968(%RBP),%RSP
	add $-1128, %RSP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd944
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -1208(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd916
	jmp uuid_00000000000dd918
uuid_00000000000dd916:
	push %RBP
	pushq -1184(%RBP)
	pushq -1192(%RBP)
	pushq -1200(%RBP)
	jmp uuid_00000000000dd913
	jmp uuid_00000000000dd915
uuid_00000000000dd913:
	push %RBP
	mov -1176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd910
	jmp uuid_00000000000dd912
uuid_00000000000dd910:
	push %RBP
	mov -1168(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd90d
	jmp uuid_00000000000dd90f
uuid_00000000000dd90d:
	movb $1, -1216(%rbp)
uuid_00000000000dd90f:
	mov -1344(%RBP),%RSP
	add $-1416, %RSP
uuid_00000000000dd912:
	mov -1264(%RBP),%RSP
	add $-1416, %RSP
uuid_00000000000dd915:
	mov -1232(%RBP),%RSP
	add $-1416, %RSP
uuid_00000000000dd918:
	mov -1224(%RBP),%RSP
	add $-1416, %RSP
	mov -1216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd941
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -1496(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd91f
	jmp uuid_00000000000dd921
uuid_00000000000dd91f:
	push %RBP
	mov -1488(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd91c
	jmp uuid_00000000000dd91e
uuid_00000000000dd91c:
	push %RBP
	mov -1480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd919
	jmp uuid_00000000000dd91b
uuid_00000000000dd919:
	movb $1, -1504(%rbp)
uuid_00000000000dd91b:
	mov -1600(%RBP),%RSP
	add $-1672, %RSP
uuid_00000000000dd91e:
	mov -1520(%RBP),%RSP
	add $-1672, %RSP
uuid_00000000000dd921:
	mov -1512(%RBP),%RSP
	add $-1672, %RSP
	mov -1504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd93e
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -1752(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd928
	jmp uuid_00000000000dd92a
uuid_00000000000dd928:
	push %RBP
	mov -1744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd925
	jmp uuid_00000000000dd927
uuid_00000000000dd925:
	push %RBP
	mov -1736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd922
	jmp uuid_00000000000dd924
uuid_00000000000dd922:
	movb $1, -1760(%rbp)
uuid_00000000000dd924:
	mov -1856(%RBP),%RSP
	add $-1928, %RSP
uuid_00000000000dd927:
	mov -1776(%RBP),%RSP
	add $-1928, %RSP
uuid_00000000000dd92a:
	mov -1768(%RBP),%RSP
	add $-1928, %RSP
	mov -1760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd93b
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -2008(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd931
	jmp uuid_00000000000dd933
uuid_00000000000dd931:
	push %RBP
	mov -2000(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd92e
	jmp uuid_00000000000dd930
uuid_00000000000dd92e:
	push %RBP
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	jmp uuid_00000000000dd92b
	jmp uuid_00000000000dd92d
uuid_00000000000dd92b:
	movb $1, -2016(%rbp)
uuid_00000000000dd92d:
	mov -2112(%RBP),%RSP
	add $-2168, %RSP
uuid_00000000000dd930:
	mov -2032(%RBP),%RSP
	add $-2168, %RSP
uuid_00000000000dd933:
	mov -2024(%RBP),%RSP
	add $-2168, %RSP
	mov -2016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd938
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd937
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd93a
uuid_00000000000dd938:
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd934
#call function with-location : Arrow<Cons<Token,SourceLocation>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowTokenConsSourceLocationToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	popq -2168(%RBP)
	popq -2160(%RBP)
	popq -2152(%RBP)
	popq -2144(%RBP)
	popq -2136(%RBP)
	popq -2128(%RBP)
	popq -2120(%RBP)
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	popq -2104(%RBP)
	popq -2096(%RBP)
	popq -2088(%RBP)
	popq -2080(%RBP)
	popq -2072(%RBP)
	popq -2064(%RBP)
	popq -2056(%RBP)
	popq -2048(%RBP)
	popq -2040(%RBP)
	jmp uuid_00000000000dd936
uuid_00000000000dd934:
uuid_00000000000dd936:
	mov -2176(%RBP),%RSP
	add $-2176, %RSP
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
uuid_00000000000dd93a:
	mov -1936(%RBP),%RSP
	add $-2176, %RSP
	jmp uuid_00000000000dd93d
uuid_00000000000dd93b:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
uuid_00000000000dd93d:
	mov -1680(%RBP),%RSP
	add $-1928, %RSP
	jmp uuid_00000000000dd940
uuid_00000000000dd93e:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
uuid_00000000000dd940:
	mov -1424(%RBP),%RSP
	add $-1672, %RSP
	jmp uuid_00000000000dd943
uuid_00000000000dd941:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq $5
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
uuid_00000000000dd943:
	mov -1136(%RBP),%RSP
	add $-1416, %RSP
	jmp uuid_00000000000dd946
uuid_00000000000dd944:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
uuid_00000000000dd946:
	mov -880(%RBP),%RSP
	add $-1128, %RSP
	jmp uuid_00000000000dd949
uuid_00000000000dd947:
uuid_00000000000dd949:
	mov -776(%RBP),%RSP
	add $-872, %RSP
	jmp uuid_00000000000dd94c
uuid_00000000000dd94a:
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd8fb
	pushq -768(%rbp)
#call function with-location : Arrow<Cons<Token,SourceLocation>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowTokenConsSourceLocationToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	pushq $6
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	jmp uuid_00000000000dd8fd
uuid_00000000000dd8fb:
uuid_00000000000dd8fd:
	mov -776(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000dd94c:
	mov -600(%RBP),%RSP
	add $-776, %RSP
	jmp uuid_00000000000dd94f
uuid_00000000000dd94d:
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd8ef
	pushq -592(%rbp)
#call function with-location : Arrow<Cons<Token,SourceLocation>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowTokenConsSourceLocationToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	pushq $7
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	jmp uuid_00000000000dd8f1
uuid_00000000000dd8ef:
uuid_00000000000dd8f1:
	mov -600(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000dd94f:
	mov -424(%RBP),%RSP
	add $-600, %RSP
	jmp uuid_00000000000dd952
uuid_00000000000dd950:
uuid_00000000000dd952:
	mov -344(%RBP),%RSP
	add $-416, %RSP
	jmp uuid_00000000000dd955
uuid_00000000000dd953:
uuid_00000000000dd955:
	mov -264(%RBP),%RSP
	add $-336, %RSP
	subq $72, %rsp
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $112, %rsp
	ret
with_SB_location_CL_ArrowTokenConsSourceLocationToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -216(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd95f
	jmp uuid_00000000000dd961
uuid_00000000000dd95f:
	push %RBP
	jmp uuid_00000000000dd95c
	jmp uuid_00000000000dd95e
uuid_00000000000dd95c:
	push %RBP
	jmp uuid_00000000000dd959
	jmp uuid_00000000000dd95b
uuid_00000000000dd959:
	push %RBP
	mov -168(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd956
	jmp uuid_00000000000dd958
uuid_00000000000dd956:
	movb $1, -224(%rbp)
uuid_00000000000dd958:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dd95b:
	mov -248(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dd95e:
	mov -240(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dd961:
	mov -232(%RBP),%RSP
	add $-264, %RSP
	mov -224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd963
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd962
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd965
uuid_00000000000dd963:
	pushq -264(%rbp)
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dd965:
	mov -160(%RBP),%RSP
	add $-264, %RSP
	subq $56, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $96, %rsp
	ret
without_SB_location_CL_ArrowASTAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd9ca
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd9c7
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -464(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd96c
	jmp uuid_00000000000dd96e
uuid_00000000000dd96c:
	push %RBP
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000dd969
	jmp uuid_00000000000dd96b
uuid_00000000000dd969:
	push %RBP
	mov -400(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd966
	jmp uuid_00000000000dd968
uuid_00000000000dd966:
	movb $1, -472(%rbp)
uuid_00000000000dd968:
	mov -552(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000dd96b:
	mov -488(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000dd96e:
	mov -480(%RBP),%RSP
	add $-560, %RSP
	mov -472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd9c4
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -640(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd975
	jmp uuid_00000000000dd977
uuid_00000000000dd975:
	push %RBP
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	jmp uuid_00000000000dd972
	jmp uuid_00000000000dd974
uuid_00000000000dd972:
	push %RBP
	mov -576(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd96f
	jmp uuid_00000000000dd971
uuid_00000000000dd96f:
	movb $1, -648(%rbp)
uuid_00000000000dd971:
	mov -728(%RBP),%RSP
	add $-736, %RSP
uuid_00000000000dd974:
	mov -664(%RBP),%RSP
	add $-736, %RSP
uuid_00000000000dd977:
	mov -656(%RBP),%RSP
	add $-736, %RSP
	mov -648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd9c1
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -816(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd97b
	jmp uuid_00000000000dd97d
uuid_00000000000dd97b:
	push %RBP
	jmp uuid_00000000000dd978
	jmp uuid_00000000000dd97a
uuid_00000000000dd978:
	movb $1, -824(%rbp)
uuid_00000000000dd97a:
	mov -840(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000dd97d:
	mov -832(%RBP),%RSP
	add $-840, %RSP
	mov -824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd9be
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd984
	jmp uuid_00000000000dd986
uuid_00000000000dd984:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd981
	jmp uuid_00000000000dd983
uuid_00000000000dd981:
	push %RBP
	mov -904(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd97e
	jmp uuid_00000000000dd980
uuid_00000000000dd97e:
	movb $1, -928(%rbp)
uuid_00000000000dd980:
	mov -1024(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000dd983:
	mov -944(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000dd986:
	mov -936(%RBP),%RSP
	add $-1096, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd9bb
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1176(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd990
	jmp uuid_00000000000dd992
uuid_00000000000dd990:
	push %RBP
	pushq -1152(%RBP)
	pushq -1160(%RBP)
	pushq -1168(%RBP)
	jmp uuid_00000000000dd98d
	jmp uuid_00000000000dd98f
uuid_00000000000dd98d:
	push %RBP
	mov -1144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd98a
	jmp uuid_00000000000dd98c
uuid_00000000000dd98a:
	push %RBP
	mov -1136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd987
	jmp uuid_00000000000dd989
uuid_00000000000dd987:
	movb $1, -1184(%rbp)
uuid_00000000000dd989:
	mov -1312(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000dd98c:
	mov -1232(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000dd98f:
	mov -1200(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000dd992:
	mov -1192(%RBP),%RSP
	add $-1384, %RSP
	mov -1184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd9b8
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1464(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd999
	jmp uuid_00000000000dd99b
uuid_00000000000dd999:
	push %RBP
	mov -1456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd996
	jmp uuid_00000000000dd998
uuid_00000000000dd996:
	push %RBP
	mov -1448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd993
	jmp uuid_00000000000dd995
uuid_00000000000dd993:
	movb $1, -1472(%rbp)
uuid_00000000000dd995:
	mov -1568(%RBP),%RSP
	add $-1640, %RSP
uuid_00000000000dd998:
	mov -1488(%RBP),%RSP
	add $-1640, %RSP
uuid_00000000000dd99b:
	mov -1480(%RBP),%RSP
	add $-1640, %RSP
	mov -1472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd9b5
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1720(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd9a2
	jmp uuid_00000000000dd9a4
uuid_00000000000dd9a2:
	push %RBP
	mov -1712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd99f
	jmp uuid_00000000000dd9a1
uuid_00000000000dd99f:
	push %RBP
	mov -1704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd99c
	jmp uuid_00000000000dd99e
uuid_00000000000dd99c:
	movb $1, -1728(%rbp)
uuid_00000000000dd99e:
	mov -1824(%RBP),%RSP
	add $-1896, %RSP
uuid_00000000000dd9a1:
	mov -1744(%RBP),%RSP
	add $-1896, %RSP
uuid_00000000000dd9a4:
	mov -1736(%RBP),%RSP
	add $-1896, %RSP
	mov -1728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd9b2
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1976(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd9ab
	jmp uuid_00000000000dd9ad
uuid_00000000000dd9ab:
	push %RBP
	mov -1968(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd9a8
	jmp uuid_00000000000dd9aa
uuid_00000000000dd9a8:
	push %RBP
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	jmp uuid_00000000000dd9a5
	jmp uuid_00000000000dd9a7
uuid_00000000000dd9a5:
	movb $1, -1984(%rbp)
uuid_00000000000dd9a7:
	mov -2080(%RBP),%RSP
	add $-2136, %RSP
uuid_00000000000dd9aa:
	mov -2000(%RBP),%RSP
	add $-2136, %RSP
uuid_00000000000dd9ad:
	mov -1992(%RBP),%RSP
	add $-2136, %RSP
	mov -1984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd9af
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd9ae
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd9b1
uuid_00000000000dd9af:
#call function without-location : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dd9b1:
	mov -1904(%RBP),%RSP
	add $-2136, %RSP
	jmp uuid_00000000000dd9b4
uuid_00000000000dd9b2:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dd9b4:
	mov -1648(%RBP),%RSP
	add $-1896, %RSP
	jmp uuid_00000000000dd9b7
uuid_00000000000dd9b5:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dd9b7:
	mov -1392(%RBP),%RSP
	add $-1640, %RSP
	jmp uuid_00000000000dd9ba
uuid_00000000000dd9b8:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq $5
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dd9ba:
	mov -1104(%RBP),%RSP
	add $-1384, %RSP
	jmp uuid_00000000000dd9bd
uuid_00000000000dd9bb:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dd9bd:
	mov -848(%RBP),%RSP
	add $-1096, %RSP
	jmp uuid_00000000000dd9c0
uuid_00000000000dd9be:
uuid_00000000000dd9c0:
	mov -744(%RBP),%RSP
	add $-840, %RSP
	jmp uuid_00000000000dd9c3
uuid_00000000000dd9c1:
	pushq -736(%rbp)
#call function without-location : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dd9c3:
	mov -568(%RBP),%RSP
	add $-736, %RSP
	jmp uuid_00000000000dd9c6
uuid_00000000000dd9c4:
	pushq -560(%rbp)
#call function without-location : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dd9c6:
	mov -392(%RBP),%RSP
	add $-560, %RSP
	jmp uuid_00000000000dd9c9
uuid_00000000000dd9c7:
uuid_00000000000dd9c9:
	mov -312(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000dd9cc
uuid_00000000000dd9ca:
uuid_00000000000dd9cc:
	mov -232(%RBP),%RSP
	add $-304, %RSP
	subq $72, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
without_SB_location_CL_ArrowTokenToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd9d6
	jmp uuid_00000000000dd9d8
uuid_00000000000dd9d6:
	push %RBP
	jmp uuid_00000000000dd9d3
	jmp uuid_00000000000dd9d5
uuid_00000000000dd9d3:
	push %RBP
	mov -144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd9d0
	jmp uuid_00000000000dd9d2
uuid_00000000000dd9d0:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd9cd
	jmp uuid_00000000000dd9cf
uuid_00000000000dd9cd:
	movb $1, -192(%rbp)
uuid_00000000000dd9cf:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000dd9d2:
	mov -216(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000dd9d5:
	mov -208(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000dd9d8:
	mov -200(%RBP),%RSP
	add $-240, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd9da
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd9d9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd9dc
uuid_00000000000dd9da:
	pushq -240(%rbp)
	pushq -224(%rbp)
	pushq $uuid_00000000000daee6
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dd9dc:
	mov -128(%RBP),%RSP
	add $-240, %RSP
	subq $56, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $64, %rsp
	ret
with_SB_key_CL_ArrowTokenConsStringToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd9e6
	jmp uuid_00000000000dd9e8
uuid_00000000000dd9e6:
	push %RBP
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	pushq -184(%RBP)
	jmp uuid_00000000000dd9e3
	jmp uuid_00000000000dd9e5
uuid_00000000000dd9e3:
	push %RBP
	jmp uuid_00000000000dd9e0
	jmp uuid_00000000000dd9e2
uuid_00000000000dd9e0:
	push %RBP
	jmp uuid_00000000000dd9dd
	jmp uuid_00000000000dd9df
uuid_00000000000dd9dd:
	movb $1, -200(%rbp)
uuid_00000000000dd9df:
	mov -264(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dd9e2:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dd9e5:
	mov -216(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dd9e8:
	mov -208(%RBP),%RSP
	add $-264, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd9ea
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dd9e9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd9ec
uuid_00000000000dd9ea:
	pushq -64(%rbp)
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq $0
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dd9ec:
	mov -136(%RBP),%RSP
	add $-264, %RSP
	subq $56, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $72, %rsp
	ret
location_SB_of_CL_ArrowSourceLocationAST:
	pushq $uuid_00000000000dd9ed
	pushq $0
	pushq $0
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd9f4
	jmp uuid_00000000000dd9f6
uuid_00000000000dd9f4:
	push %RBP
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	jmp uuid_00000000000dd9f1
	jmp uuid_00000000000dd9f3
uuid_00000000000dd9f1:
	push %RBP
	jmp uuid_00000000000dd9ee
	jmp uuid_00000000000dd9f0
uuid_00000000000dd9ee:
	movb $1, -272(%rbp)
uuid_00000000000dd9f0:
	mov -352(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000dd9f3:
	mov -288(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000dd9f6:
	mov -280(%RBP),%RSP
	add $-352, %RSP
	mov -272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dda55
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -432(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd9fd
	jmp uuid_00000000000dd9ff
uuid_00000000000dd9fd:
	push %RBP
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	jmp uuid_00000000000dd9fa
	jmp uuid_00000000000dd9fc
uuid_00000000000dd9fa:
	push %RBP
	jmp uuid_00000000000dd9f7
	jmp uuid_00000000000dd9f9
uuid_00000000000dd9f7:
	movb $1, -440(%rbp)
uuid_00000000000dd9f9:
	mov -520(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000dd9fc:
	mov -456(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000dd9ff:
	mov -448(%RBP),%RSP
	add $-520, %RSP
	mov -440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dda52
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dda06
	jmp uuid_00000000000dda08
uuid_00000000000dda06:
	push %RBP
	mov -592(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dda03
	jmp uuid_00000000000dda05
uuid_00000000000dda03:
	push %RBP
	mov -584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dda00
	jmp uuid_00000000000dda02
uuid_00000000000dda00:
	movb $1, -608(%rbp)
uuid_00000000000dda02:
	mov -704(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000dda05:
	mov -624(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000dda08:
	mov -616(%RBP),%RSP
	add $-776, %RSP
	mov -608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dda4f
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -856(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dda15
	jmp uuid_00000000000dda17
uuid_00000000000dda15:
	push %RBP
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	jmp uuid_00000000000dda12
	jmp uuid_00000000000dda14
uuid_00000000000dda12:
	push %RBP
	mov -824(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dda0f
	jmp uuid_00000000000dda11
uuid_00000000000dda0f:
	push %RBP
	mov -816(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dda0c
	jmp uuid_00000000000dda0e
uuid_00000000000dda0c:
	movb $1, -864(%rbp)
uuid_00000000000dda0e:
	mov -992(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000dda11:
	mov -912(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000dda14:
	mov -880(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000dda17:
	mov -872(%RBP),%RSP
	add $-1064, %RSP
	mov -864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dda4c
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -1144(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dda21
	jmp uuid_00000000000dda23
uuid_00000000000dda21:
	push %RBP
	mov -1136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dda1e
	jmp uuid_00000000000dda20
uuid_00000000000dda1e:
	push %RBP
	mov -1128(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dda1b
	jmp uuid_00000000000dda1d
uuid_00000000000dda1b:
	movb $1, -1152(%rbp)
uuid_00000000000dda1d:
	mov -1248(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000dda20:
	mov -1168(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000dda23:
	mov -1160(%RBP),%RSP
	add $-1320, %RSP
	mov -1152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dda49
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -1400(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dda2d
	jmp uuid_00000000000dda2f
uuid_00000000000dda2d:
	push %RBP
	mov -1392(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dda2a
	jmp uuid_00000000000dda2c
uuid_00000000000dda2a:
	push %RBP
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	jmp uuid_00000000000dda27
	jmp uuid_00000000000dda29
uuid_00000000000dda27:
	movb $1, -1408(%rbp)
uuid_00000000000dda29:
	mov -1504(%RBP),%RSP
	add $-1560, %RSP
uuid_00000000000dda2c:
	mov -1424(%RBP),%RSP
	add $-1560, %RSP
uuid_00000000000dda2f:
	mov -1416(%RBP),%RSP
	add $-1560, %RSP
	mov -1408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dda46
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -1640(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dda39
	jmp uuid_00000000000dda3b
uuid_00000000000dda39:
	push %RBP
	mov -1632(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dda36
	jmp uuid_00000000000dda38
uuid_00000000000dda36:
	push %RBP
	mov -1624(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dda33
	jmp uuid_00000000000dda35
uuid_00000000000dda33:
	movb $1, -1648(%rbp)
uuid_00000000000dda35:
	mov -1744(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000dda38:
	mov -1664(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000dda3b:
	mov -1656(%RBP),%RSP
	add $-1816, %RSP
	mov -1648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dda43
	push %RBP
	jmp uuid_00000000000dda40
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dda3f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dda42
uuid_00000000000dda40:
uuid_00000000000dda42:
	mov -1824(%RBP),%RSP
	add $-1824, %RSP
	jmp uuid_00000000000dda45
uuid_00000000000dda43:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dda3c
	jmp uuid_00000000000dda3e
uuid_00000000000dda3c:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dda3e:
	mov -1824(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000dda45:
	mov -1568(%RBP),%RSP
	add $-1824, %RSP
	jmp uuid_00000000000dda48
uuid_00000000000dda46:
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dda30
	jmp uuid_00000000000dda32
uuid_00000000000dda30:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dda32:
	mov -1568(%RBP),%RSP
	add $-1568, %RSP
uuid_00000000000dda48:
	mov -1328(%RBP),%RSP
	add $-1568, %RSP
	jmp uuid_00000000000dda4b
uuid_00000000000dda49:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dda24
	jmp uuid_00000000000dda26
uuid_00000000000dda24:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dda26:
	mov -1328(%RBP),%RSP
	add $-1328, %RSP
uuid_00000000000dda4b:
	mov -1072(%RBP),%RSP
	add $-1328, %RSP
	jmp uuid_00000000000dda4e
uuid_00000000000dda4c:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dda18
	jmp uuid_00000000000dda1a
uuid_00000000000dda18:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dda1a:
	mov -1072(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000dda4e:
	mov -784(%RBP),%RSP
	add $-1072, %RSP
	jmp uuid_00000000000dda51
uuid_00000000000dda4f:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dda09
	jmp uuid_00000000000dda0b
uuid_00000000000dda09:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dda0b:
	mov -784(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000dda51:
	mov -528(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000dda54
uuid_00000000000dda52:
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dda54:
	mov -360(%RBP),%RSP
	add $-520, %RSP
	jmp uuid_00000000000dda57
uuid_00000000000dda55:
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dda57:
	mov -192(%RBP),%RSP
	add $-352, %RSP
	subq $32, %rsp
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
unique_CL_ArrowTokenToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dda61
	jmp uuid_00000000000dda63
uuid_00000000000dda61:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	jmp uuid_00000000000dda5e
	jmp uuid_00000000000dda60
uuid_00000000000dda5e:
	push %RBP
	mov -144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dda5b
	jmp uuid_00000000000dda5d
uuid_00000000000dda5b:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dda58
	jmp uuid_00000000000dda5a
uuid_00000000000dda58:
	movb $1, -192(%rbp)
uuid_00000000000dda5a:
	mov -264(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000dda5d:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000dda60:
	mov -208(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000dda63:
	mov -200(%RBP),%RSP
	add $-272, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dda65
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dda64
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dda67
uuid_00000000000dda65:
	pushq -272(%rbp)
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq $0
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dda67:
	mov -128(%RBP),%RSP
	add $-272, %RSP
	subq $56, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $64, %rsp
	ret
print_SB_verbose_CL_ArrowNilToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dda71
	jmp uuid_00000000000dda73
uuid_00000000000dda71:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	jmp uuid_00000000000dda6e
	jmp uuid_00000000000dda70
uuid_00000000000dda6e:
	push %RBP
	mov -144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dda6b
	jmp uuid_00000000000dda6d
uuid_00000000000dda6b:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dda68
	jmp uuid_00000000000dda6a
uuid_00000000000dda68:
	movb $1, -192(%rbp)
uuid_00000000000dda6a:
	mov -264(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000dda6d:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000dda70:
	mov -208(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000dda73:
	mov -200(%RBP),%RSP
	add $-272, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dda75
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dda74
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dda77
uuid_00000000000dda75:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db0fe
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dda77:
	mov -128(%RBP),%RSP
	add $-272, %RSP
	mov %rbp, %rsp
	sub $64, %rsp
	ret
token_CL__CL_new_CL_ArrowTokenString:
	pushq -8(%rbp)
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function location::new : Arrow<Nil,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call location_CL__CL_new_CL_ArrowSourceLocationNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq $0
	subq $56, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
location_CL__CL_new_CL_ArrowSourceLocationNil:
	pushq $uuid_00000000000dd9ed
	pushq $0
	pushq $0
	pushq $0
	subq $32, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
non_SB_zero_CL_ArrowU64SourceLocation:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dda81
	jmp uuid_00000000000dda83
uuid_00000000000dda81:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dda7e
	jmp uuid_00000000000dda80
uuid_00000000000dda7e:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dda7b
	jmp uuid_00000000000dda7d
uuid_00000000000dda7b:
	push %RBP
	mov -96(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dda78
	jmp uuid_00000000000dda7a
uuid_00000000000dda78:
	movb $1, -128(%rbp)
uuid_00000000000dda7a:
	mov -176(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000dda7d:
	mov -160(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000dda80:
	mov -144(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000dda83:
	mov -136(%RBP),%RSP
	add $-184, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dda88
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dda87
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dda8a
uuid_00000000000dda88:
	push %RBP
	mov -168(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dda84
	jmp uuid_00000000000dda86
uuid_00000000000dda84:
	movq $1, -48(%rbp)
uuid_00000000000dda86:
	mov -192(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000dda8a:
	mov -88(%RBP),%RSP
	add $-192, %RSP
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
is_SB_already_SB_tokenized_CL_ArrowU64String:
	pushq $0
	mov $already_SB_tokenized_CL_ListStringListString, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000ddaa7:
#call function non-zero : Arrow<List<String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddaa8
	jmp uuid_00000000000ddaa9
uuid_00000000000ddaa8:
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -104(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dda9d
	jmp uuid_00000000000dda9f
uuid_00000000000dda9d:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dda9a
	jmp uuid_00000000000dda9c
uuid_00000000000dda9a:
	push %RBP
	mov -88(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dda97
	jmp uuid_00000000000dda99
uuid_00000000000dda97:
	movb $1, -112(%rbp)
uuid_00000000000dda99:
	mov -160(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dda9c:
	mov -128(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dda9f:
	mov -120(%RBP),%RSP
	add $-168, %RSP
	mov -112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddaa4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000ddaa3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddaa6
uuid_00000000000ddaa4:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddaa0
	jmp uuid_00000000000ddaa2
uuid_00000000000ddaa0:
	movq $1, -24(%rbp)
uuid_00000000000ddaa2:
	mov -176(%RBP),%RSP
	add $-176, %RSP
	movq -152(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -144(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -136(%rbp), %r15
	movq %r15, -32(%rbp)
uuid_00000000000ddaa6:
	mov -80(%RBP),%RSP
	add $-176, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000ddaa7
uuid_00000000000ddaa9:
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
tokenize_CL_ArrowNilString:
	push %RBP
#call function has-prefix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq $uuid_00000000000ddaaa
	mov %RBX, %RBP
	call has_SB_prefix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddaab
	jmp uuid_00000000000ddaad
uuid_00000000000ddaab:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	mov $config_SB_platform_SB_prefix_CL_String, %r15
	pushq 0(%r15)
	pushq $2
	pushq $0
	pushq -8(%rbp)
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -8(%rbp)
uuid_00000000000ddaad:
	mov -24(%RBP),%RSP
	add $-24, %RSP
	pushq $uuid_00000000000daee6
	push %RBP
#call function is-already-tokenized : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call is_SB_already_SB_tokenized_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddab6
#call function read-file : Arrow<String,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call read_SB_file_CL_ArrowStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -32(%rbp)
#call function cons : Arrow<Cons<String,List<String>>,List<String>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov $already_SB_tokenized_CL_ListStringListString, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call cons_CL_ArrowListStringConsListStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov $already_SB_tokenized_CL_ListStringListString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	jmp uuid_00000000000ddab8
uuid_00000000000ddab6:
uuid_00000000000ddab8:
	mov -40(%RBP),%RSP
	add $-40, %RSP
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $1
	pushq $1
	pushq $1
	pushq $1
	pushq $0
uuid_00000000000ddb6e:
	mov -32(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000ddb6f
	jmp uuid_00000000000ddb70
uuid_00000000000ddb6f:
	mov -32(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -120(%rbp)
	mov -136(%RBP), %AL
	mov $10, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddabd
	push %RBP
	jmp uuid_00000000000ddaba
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000ddab9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddabc
uuid_00000000000ddaba:
	mov -88(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -88(%rbp)
uuid_00000000000ddabc:
	mov -144(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000ddabf
uuid_00000000000ddabd:
	mov -80(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -80(%rbp)
	movq $1, -88(%rbp)
uuid_00000000000ddabf:
	mov -128(%RBP),%RSP
	add $-136, %RSP
	mov -32(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -144(%rbp)
	mov -160(%RBP), %AL
	mov $35, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb6b
	push %RBP
	pushq -144(%rbp)
	mov -176(%RBP), %AL
	mov $10, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb68
	push %RBP
	pushq -144(%rbp)
	mov -192(%RBP), %AL
	mov $9, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb65
	push %RBP
	pushq -144(%rbp)
	mov -208(%RBP), %AL
	mov $32, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb62
	push %RBP
	pushq -144(%rbp)
	mov -224(%RBP), %AL
	mov $40, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb5f
	push %RBP
	pushq -144(%rbp)
	mov -240(%RBP), %AL
	mov $41, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb5c
	push %RBP
	pushq -144(%rbp)
	mov -256(%RBP), %AL
	mov $39, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb59
	push %RBP
	pushq -144(%rbp)
	mov -272(%RBP), %AL
	mov $59, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb56
	push %RBP
	pushq -144(%rbp)
	jmp uuid_00000000000ddb53
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000ddb52
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddb55
uuid_00000000000ddb53:
	push %RBP
	mov -48(%RBP), %AL
	cmp $0, %AL
	jne uuid_00000000000ddb4f
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db0fc
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddb4c
	jmp uuid_00000000000ddb4e
uuid_00000000000ddb4c:
	pushq $uuid_00000000000db0fc
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000ddb4e:
	mov -304(%RBP),%RSP
	add $-360, %RSP
	jmp uuid_00000000000ddb51
uuid_00000000000ddb4f:
uuid_00000000000ddb51:
	mov -296(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000ddb55:
	mov -280(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000ddb58
uuid_00000000000ddb56:
	push %RBP
	mov -48(%RBP), %AL
	cmp $0, %AL
	jne uuid_00000000000ddb41
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddb36
	jmp uuid_00000000000ddb38
uuid_00000000000ddb36:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000ddb38:
	mov -288(%RBP),%RSP
	add $-344, %RSP
	pushq $uuid_00000000000db0f9
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	jmp uuid_00000000000ddb43
uuid_00000000000ddb41:
uuid_00000000000ddb43:
	mov -280(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000ddb58:
	mov -264(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000ddb5b
uuid_00000000000ddb59:
	push %RBP
	mov -48(%RBP), %AL
	cmp $0, %AL
	jne uuid_00000000000ddb2b
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddb20
	jmp uuid_00000000000ddb22
uuid_00000000000ddb20:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000ddb22:
	mov -272(%RBP),%RSP
	add $-328, %RSP
	pushq $uuid_00000000000db0fb
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	jmp uuid_00000000000ddb2d
uuid_00000000000ddb2b:
uuid_00000000000ddb2d:
	mov -264(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000ddb5b:
	mov -248(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000ddb5e
uuid_00000000000ddb5c:
	push %RBP
	mov -48(%RBP), %AL
	cmp $0, %AL
	jne uuid_00000000000ddb15
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddb0a
	jmp uuid_00000000000ddb0c
uuid_00000000000ddb0a:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000ddb0c:
	mov -256(%RBP),%RSP
	add $-312, %RSP
	mov -112(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -112(%rbp)
	pushq $uuid_00000000000dae19
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	jmp uuid_00000000000ddb17
uuid_00000000000ddb15:
uuid_00000000000ddb17:
	mov -248(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000ddb5e:
	mov -232(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000ddb61
uuid_00000000000ddb5f:
	push %RBP
	mov -48(%RBP), %AL
	cmp $0, %AL
	jne uuid_00000000000ddaff
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddaf4
	jmp uuid_00000000000ddaf6
uuid_00000000000ddaf4:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000ddaf6:
	mov -240(%RBP),%RSP
	add $-296, %RSP
	mov -112(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -112(%rbp)
	pushq $uuid_00000000000dae17
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	movq -80(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -80(%rbp), %r15
	mov %r15, -96(%rbp)
	movq -88(%rbp), %r15
	movq %r15, -104(%rbp)
	mov -88(%rbp), %r15
	mov %r15, -104(%rbp)
	jmp uuid_00000000000ddb01
uuid_00000000000ddaff:
uuid_00000000000ddb01:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000ddb61:
	mov -216(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000ddb64
uuid_00000000000ddb62:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddae9
	jmp uuid_00000000000ddaeb
uuid_00000000000ddae9:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000ddaeb:
	mov -216(%RBP),%RSP
	add $-272, %RSP
	movq -80(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -80(%rbp), %r15
	mov %r15, -96(%rbp)
	movq -88(%rbp), %r15
	movq %r15, -104(%rbp)
	mov -88(%rbp), %r15
	mov %r15, -104(%rbp)
uuid_00000000000ddb64:
	mov -200(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000ddb67
uuid_00000000000ddb65:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddade
	jmp uuid_00000000000ddae0
uuid_00000000000ddade:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000ddae0:
	mov -200(%RBP),%RSP
	add $-256, %RSP
	movq -80(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -80(%rbp), %r15
	mov %r15, -96(%rbp)
	movq -88(%rbp), %r15
	movq %r15, -104(%rbp)
	mov -88(%rbp), %r15
	mov %r15, -104(%rbp)
uuid_00000000000ddb67:
	mov -184(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000ddb6a
uuid_00000000000ddb68:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddad3
	jmp uuid_00000000000ddad5
uuid_00000000000ddad3:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000ddad5:
	mov -184(%RBP),%RSP
	add $-240, %RSP
	movq -80(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -80(%rbp), %r15
	mov %r15, -96(%rbp)
	movq -88(%rbp), %r15
	movq %r15, -104(%rbp)
	mov -88(%rbp), %r15
	mov %r15, -104(%rbp)
	movb $0, -48(%rbp)
uuid_00000000000ddb6a:
	mov -168(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000ddb6d
uuid_00000000000ddb6b:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddac8
	jmp uuid_00000000000ddaca
uuid_00000000000ddac8:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000ddaca:
	mov -168(%RBP),%RSP
	add $-224, %RSP
	movq -80(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -80(%rbp), %r15
	mov %r15, -96(%rbp)
	movq -88(%rbp), %r15
	movq %r15, -104(%rbp)
	mov -88(%rbp), %r15
	mov %r15, -104(%rbp)
	movb $1, -48(%rbp)
uuid_00000000000ddb6d:
	mov -152(%RBP),%RSP
	add $-224, %RSP
	mov -32(%RBP), %RAX
	inc %RAX
	movq %RAX, -32(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %rsp
	add $8, %rsp
	add $56, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000ddb6e
uuid_00000000000ddb70:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddb79
	jmp uuid_00000000000ddb7b
uuid_00000000000ddb79:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
uuid_00000000000ddb7b:
	mov -120(%RBP),%RSP
	add $-176, %RSP
#call function reverse : Arrow<List<Token>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call reverse_CL_ArrowListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	push %RBP
	mov -112(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb86
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddb84
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddb85
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<I64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddb88
uuid_00000000000ddb86:
uuid_00000000000ddb88:
	mov -184(%RBP),%RSP
	add $-184, %RSP
	mov %rbp, %rsp
	sub $16, %rsp
	ret
align_CL_ArrowI64I64:
#call function max : Arrow<Cons<I64,I64>,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq $8
	mov %RBX, %RBP
	call max_CL_ArrowI64ConsI64I64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_ffi_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb8f
	jmp uuid_00000000000ddb91
uuid_00000000000ddb8f:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddb8c
	jmp uuid_00000000000ddb8e
uuid_00000000000ddb8c:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddb89
	jmp uuid_00000000000ddb8b
uuid_00000000000ddb89:
	movb $1, -104(%rbp)
uuid_00000000000ddb8b:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddb8e:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddb91:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddba3
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb99
	jmp uuid_00000000000ddb9b
uuid_00000000000ddb99:
	push %RBP
	jmp uuid_00000000000ddb96
	jmp uuid_00000000000ddb98
uuid_00000000000ddb96:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000ddb92
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddb93
	jmp uuid_00000000000ddb95
uuid_00000000000ddb93:
	movb $1, -216(%rbp)
uuid_00000000000ddb95:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000ddb98:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000ddb9b:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddba0
	push %RBP
	jmp uuid_00000000000ddb9d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000ddb9c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddb9f
uuid_00000000000ddb9d:
uuid_00000000000ddb9f:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000ddba2
uuid_00000000000ddba0:
	movq $1, -40(%rbp)
uuid_00000000000ddba2:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000ddba5
uuid_00000000000ddba3:
#call function is-ffi : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_ffi_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-ffi : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_ffi_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000ddba5:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_nil_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddbac
	jmp uuid_00000000000ddbae
uuid_00000000000ddbac:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddba9
	jmp uuid_00000000000ddbab
uuid_00000000000ddba9:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddba6
	jmp uuid_00000000000ddba8
uuid_00000000000ddba6:
	movb $1, -104(%rbp)
uuid_00000000000ddba8:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddbab:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddbae:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddbbf
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddbb5
	jmp uuid_00000000000ddbb7
uuid_00000000000ddbb5:
	push %RBP
	jmp uuid_00000000000ddbb2
	jmp uuid_00000000000ddbb4
uuid_00000000000ddbb2:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000daff0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddbaf
	jmp uuid_00000000000ddbb1
uuid_00000000000ddbaf:
	movb $1, -216(%rbp)
uuid_00000000000ddbb1:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000ddbb4:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000ddbb7:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddbbc
	push %RBP
	jmp uuid_00000000000ddbb9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000ddbb8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddbbb
uuid_00000000000ddbb9:
uuid_00000000000ddbbb:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000ddbbe
uuid_00000000000ddbbc:
	movq $1, -40(%rbp)
uuid_00000000000ddbbe:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000ddbc1
uuid_00000000000ddbbf:
#call function is-nil : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_nil_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-nil : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_nil_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000ddbc1:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_never_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddbc8
	jmp uuid_00000000000ddbca
uuid_00000000000ddbc8:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddbc5
	jmp uuid_00000000000ddbc7
uuid_00000000000ddbc5:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddbc2
	jmp uuid_00000000000ddbc4
uuid_00000000000ddbc2:
	movb $1, -104(%rbp)
uuid_00000000000ddbc4:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddbc7:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddbca:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddbdb
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddbd1
	jmp uuid_00000000000ddbd3
uuid_00000000000ddbd1:
	push %RBP
	jmp uuid_00000000000ddbce
	jmp uuid_00000000000ddbd0
uuid_00000000000ddbce:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000daffa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddbcb
	jmp uuid_00000000000ddbcd
uuid_00000000000ddbcb:
	movb $1, -216(%rbp)
uuid_00000000000ddbcd:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000ddbd0:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000ddbd3:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddbd8
	push %RBP
	jmp uuid_00000000000ddbd5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000ddbd4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddbd7
uuid_00000000000ddbd5:
uuid_00000000000ddbd7:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000ddbda
uuid_00000000000ddbd8:
	movq $1, -40(%rbp)
uuid_00000000000ddbda:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000ddbdd
uuid_00000000000ddbdb:
#call function is-never : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_never_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-never : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_never_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000ddbdd:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_seq_CL_ArrowU64AST:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddbe4
	jmp uuid_00000000000ddbe6
uuid_00000000000ddbe4:
	push %RBP
	jmp uuid_00000000000ddbe1
	jmp uuid_00000000000ddbe3
uuid_00000000000ddbe1:
	push %RBP
	jmp uuid_00000000000ddbde
	jmp uuid_00000000000ddbe0
uuid_00000000000ddbde:
	movb $1, -248(%rbp)
uuid_00000000000ddbe0:
	mov -272(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000ddbe3:
	mov -264(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000ddbe6:
	mov -256(%RBP),%RSP
	add $-272, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddbeb
	push %RBP
	jmp uuid_00000000000ddbe8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000ddbe7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddbea
uuid_00000000000ddbe8:
uuid_00000000000ddbea:
	mov -280(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000ddbed
uuid_00000000000ddbeb:
	movq $1, -88(%rbp)
uuid_00000000000ddbed:
	mov -168(%RBP),%RSP
	add $-272, %RSP
	mov -88(%rbp), %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
is_SB_arrow_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddbf4
	jmp uuid_00000000000ddbf6
uuid_00000000000ddbf4:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddbf1
	jmp uuid_00000000000ddbf3
uuid_00000000000ddbf1:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddbee
	jmp uuid_00000000000ddbf0
uuid_00000000000ddbee:
	movb $1, -104(%rbp)
uuid_00000000000ddbf0:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddbf3:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddbf6:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc07
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddbfd
	jmp uuid_00000000000ddbff
uuid_00000000000ddbfd:
	push %RBP
	jmp uuid_00000000000ddbfa
	jmp uuid_00000000000ddbfc
uuid_00000000000ddbfa:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000db622
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddbf7
	jmp uuid_00000000000ddbf9
uuid_00000000000ddbf7:
	movb $1, -216(%rbp)
uuid_00000000000ddbf9:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000ddbfc:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000ddbff:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc04
	push %RBP
	jmp uuid_00000000000ddc01
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000ddc00
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddc03
uuid_00000000000ddc01:
uuid_00000000000ddc03:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000ddc06
uuid_00000000000ddc04:
	movq $1, -40(%rbp)
uuid_00000000000ddc06:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000ddc09
uuid_00000000000ddc07:
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000ddc09:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_array_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc10
	jmp uuid_00000000000ddc12
uuid_00000000000ddc10:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddc0d
	jmp uuid_00000000000ddc0f
uuid_00000000000ddc0d:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddc0a
	jmp uuid_00000000000ddc0c
uuid_00000000000ddc0a:
	movb $1, -104(%rbp)
uuid_00000000000ddc0c:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddc0f:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddc12:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc23
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc19
	jmp uuid_00000000000ddc1b
uuid_00000000000ddc19:
	push %RBP
	jmp uuid_00000000000ddc16
	jmp uuid_00000000000ddc18
uuid_00000000000ddc16:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000db084
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddc13
	jmp uuid_00000000000ddc15
uuid_00000000000ddc13:
	movb $1, -216(%rbp)
uuid_00000000000ddc15:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000ddc18:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000ddc1b:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc20
	push %RBP
	jmp uuid_00000000000ddc1d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000ddc1c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddc1f
uuid_00000000000ddc1d:
uuid_00000000000ddc1f:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000ddc22
uuid_00000000000ddc20:
	movq $1, -40(%rbp)
uuid_00000000000ddc22:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000ddc25
uuid_00000000000ddc23:
#call function is-array : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_array_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-array : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_array_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000ddc25:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_hook_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc2c
	jmp uuid_00000000000ddc2e
uuid_00000000000ddc2c:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddc29
	jmp uuid_00000000000ddc2b
uuid_00000000000ddc29:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddc26
	jmp uuid_00000000000ddc28
uuid_00000000000ddc26:
	movb $1, -104(%rbp)
uuid_00000000000ddc28:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddc2b:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddc2e:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc40
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc36
	jmp uuid_00000000000ddc38
uuid_00000000000ddc36:
	push %RBP
	jmp uuid_00000000000ddc33
	jmp uuid_00000000000ddc35
uuid_00000000000ddc33:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000ddc2f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddc30
	jmp uuid_00000000000ddc32
uuid_00000000000ddc30:
	movb $1, -216(%rbp)
uuid_00000000000ddc32:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000ddc35:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000ddc38:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc3d
	push %RBP
	jmp uuid_00000000000ddc3a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000ddc39
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddc3c
uuid_00000000000ddc3a:
uuid_00000000000ddc3c:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000ddc3f
uuid_00000000000ddc3d:
	movq $1, -40(%rbp)
uuid_00000000000ddc3f:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000ddc42
uuid_00000000000ddc40:
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000ddc42:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_blob_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc49
	jmp uuid_00000000000ddc4b
uuid_00000000000ddc49:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddc46
	jmp uuid_00000000000ddc48
uuid_00000000000ddc46:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddc43
	jmp uuid_00000000000ddc45
uuid_00000000000ddc43:
	movb $1, -104(%rbp)
uuid_00000000000ddc45:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddc48:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddc4b:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc5d
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc53
	jmp uuid_00000000000ddc55
uuid_00000000000ddc53:
	push %RBP
	jmp uuid_00000000000ddc50
	jmp uuid_00000000000ddc52
uuid_00000000000ddc50:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000ddc4c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddc4d
	jmp uuid_00000000000ddc4f
uuid_00000000000ddc4d:
	movb $1, -216(%rbp)
uuid_00000000000ddc4f:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000ddc52:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000ddc55:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc5a
	push %RBP
	jmp uuid_00000000000ddc57
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000ddc56
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddc59
uuid_00000000000ddc57:
uuid_00000000000ddc59:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000ddc5c
uuid_00000000000ddc5a:
	movq $1, -40(%rbp)
uuid_00000000000ddc5c:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000ddc5f
uuid_00000000000ddc5d:
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000ddc5f:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_stack_SB_variable_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc66
	jmp uuid_00000000000ddc68
uuid_00000000000ddc66:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddc63
	jmp uuid_00000000000ddc65
uuid_00000000000ddc63:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddc60
	jmp uuid_00000000000ddc62
uuid_00000000000ddc60:
	movb $1, -104(%rbp)
uuid_00000000000ddc62:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddc65:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddc68:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc79
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc6f
	jmp uuid_00000000000ddc71
uuid_00000000000ddc6f:
	push %RBP
	jmp uuid_00000000000ddc6c
	jmp uuid_00000000000ddc6e
uuid_00000000000ddc6c:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000db557
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddc69
	jmp uuid_00000000000ddc6b
uuid_00000000000ddc69:
	movb $1, -216(%rbp)
uuid_00000000000ddc6b:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000ddc6e:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000ddc71:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc76
	push %RBP
	jmp uuid_00000000000ddc73
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000ddc72
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddc75
uuid_00000000000ddc73:
uuid_00000000000ddc75:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000ddc78
uuid_00000000000ddc76:
	movq $1, -40(%rbp)
uuid_00000000000ddc78:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000ddc7b
uuid_00000000000ddc79:
#call function is-stack-variable : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_stack_SB_variable_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-stack-variable : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_stack_SB_variable_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000ddc7b:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_cons_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc82
	jmp uuid_00000000000ddc84
uuid_00000000000ddc82:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddc7f
	jmp uuid_00000000000ddc81
uuid_00000000000ddc7f:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddc7c
	jmp uuid_00000000000ddc7e
uuid_00000000000ddc7c:
	movb $1, -104(%rbp)
uuid_00000000000ddc7e:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddc81:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddc84:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc95
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc8b
	jmp uuid_00000000000ddc8d
uuid_00000000000ddc8b:
	push %RBP
	jmp uuid_00000000000ddc88
	jmp uuid_00000000000ddc8a
uuid_00000000000ddc88:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000db3a7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddc85
	jmp uuid_00000000000ddc87
uuid_00000000000ddc85:
	movb $1, -216(%rbp)
uuid_00000000000ddc87:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000ddc8a:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000ddc8d:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc92
	push %RBP
	jmp uuid_00000000000ddc8f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000ddc8e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddc91
uuid_00000000000ddc8f:
uuid_00000000000ddc91:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000ddc94
uuid_00000000000ddc92:
	movq $1, -40(%rbp)
uuid_00000000000ddc94:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000ddc97
uuid_00000000000ddc95:
#call function is-cons : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_cons_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-cons : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_cons_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000ddc97:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_impure_SB_ctx_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc9e
	jmp uuid_00000000000ddca0
uuid_00000000000ddc9e:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddc9b
	jmp uuid_00000000000ddc9d
uuid_00000000000ddc9b:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddc98
	jmp uuid_00000000000ddc9a
uuid_00000000000ddc98:
	movb $1, -104(%rbp)
uuid_00000000000ddc9a:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddc9d:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddca0:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddcb2
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddca8
	jmp uuid_00000000000ddcaa
uuid_00000000000ddca8:
	push %RBP
	jmp uuid_00000000000ddca5
	jmp uuid_00000000000ddca7
uuid_00000000000ddca5:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000ddca1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddca2
	jmp uuid_00000000000ddca4
uuid_00000000000ddca2:
	movb $1, -216(%rbp)
uuid_00000000000ddca4:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000ddca7:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000ddcaa:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddcaf
	push %RBP
	jmp uuid_00000000000ddcac
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000ddcab
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddcae
uuid_00000000000ddcac:
uuid_00000000000ddcae:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000ddcb1
uuid_00000000000ddcaf:
	movq $1, -40(%rbp)
uuid_00000000000ddcb1:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000ddcb4
uuid_00000000000ddcb2:
#call function is-impure-ctx : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_impure_SB_ctx_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-impure-ctx : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_impure_SB_ctx_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000ddcb4:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_string_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddcbb
	jmp uuid_00000000000ddcbd
uuid_00000000000ddcbb:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddcb8
	jmp uuid_00000000000ddcba
uuid_00000000000ddcb8:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddcb5
	jmp uuid_00000000000ddcb7
uuid_00000000000ddcb5:
	movb $1, -104(%rbp)
uuid_00000000000ddcb7:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddcba:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddcbd:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddcce
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddcc4
	jmp uuid_00000000000ddcc6
uuid_00000000000ddcc4:
	push %RBP
	jmp uuid_00000000000ddcc1
	jmp uuid_00000000000ddcc3
uuid_00000000000ddcc1:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000db05c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddcbe
	jmp uuid_00000000000ddcc0
uuid_00000000000ddcbe:
	movb $1, -216(%rbp)
uuid_00000000000ddcc0:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000ddcc3:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000ddcc6:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddccb
	push %RBP
	jmp uuid_00000000000ddcc8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000ddcc7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddcca
uuid_00000000000ddcc8:
uuid_00000000000ddcca:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000ddccd
uuid_00000000000ddccb:
	movq $1, -40(%rbp)
uuid_00000000000ddccd:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000ddcd0
uuid_00000000000ddcce:
#call function is-string : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_string_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-string : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_string_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000ddcd0:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_rc_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddcd7
	jmp uuid_00000000000ddcd9
uuid_00000000000ddcd7:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddcd4
	jmp uuid_00000000000ddcd6
uuid_00000000000ddcd4:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddcd1
	jmp uuid_00000000000ddcd3
uuid_00000000000ddcd1:
	movb $1, -104(%rbp)
uuid_00000000000ddcd3:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddcd6:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddcd9:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddcea
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddce0
	jmp uuid_00000000000ddce2
uuid_00000000000ddce0:
	push %RBP
	jmp uuid_00000000000ddcdd
	jmp uuid_00000000000ddcdf
uuid_00000000000ddcdd:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000db5d0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddcda
	jmp uuid_00000000000ddcdc
uuid_00000000000ddcda:
	movb $1, -216(%rbp)
uuid_00000000000ddcdc:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000ddcdf:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000ddce2:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddce7
	push %RBP
	jmp uuid_00000000000ddce4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000ddce3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddce6
uuid_00000000000ddce4:
uuid_00000000000ddce6:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000ddce9
uuid_00000000000ddce7:
	movq $1, -40(%rbp)
uuid_00000000000ddce9:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000ddcec
uuid_00000000000ddcea:
#call function is-rc : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_rc_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-rc : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_rc_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000ddcec:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_onto_SB_stack_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddcf3
	jmp uuid_00000000000ddcf5
uuid_00000000000ddcf3:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddcf0
	jmp uuid_00000000000ddcf2
uuid_00000000000ddcf0:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddced
	jmp uuid_00000000000ddcef
uuid_00000000000ddced:
	movb $1, -104(%rbp)
uuid_00000000000ddcef:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddcf2:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddcf5:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd19
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd0f
	jmp uuid_00000000000ddd11
uuid_00000000000ddd0f:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd06
	jmp uuid_00000000000ddd08
uuid_00000000000ddd06:
	push %RBP
	jmp uuid_00000000000ddd03
	jmp uuid_00000000000ddd05
uuid_00000000000ddd03:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddcfd
	jmp uuid_00000000000ddcff
uuid_00000000000ddcfd:
	push %RBP
	jmp uuid_00000000000ddcfa
	jmp uuid_00000000000ddcfc
uuid_00000000000ddcfa:
	push %RBP
	mov -312(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -368(%rbp)
	pushq $uuid_00000000000ddcf6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddcf7
	jmp uuid_00000000000ddcf9
uuid_00000000000ddcf7:
	movb $1, -336(%rbp)
uuid_00000000000ddcf9:
	mov -360(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000ddcfc:
	mov -352(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000ddcff:
	mov -344(%RBP),%RSP
	add $-368, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd00
	jmp uuid_00000000000ddd02
uuid_00000000000ddd00:
	movb $1, -280(%rbp)
uuid_00000000000ddd02:
	mov -304(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000ddd05:
	mov -296(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000ddd08:
	mov -288(%RBP),%RSP
	add $-368, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd0c
	jmp uuid_00000000000ddd0e
uuid_00000000000ddd0c:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000dbbcb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddd09
	jmp uuid_00000000000ddd0b
uuid_00000000000ddd09:
	movb $1, -216(%rbp)
uuid_00000000000ddd0b:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000ddd0e:
	mov -232(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000ddd11:
	mov -224(%RBP),%RSP
	add $-384, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd16
	push %RBP
	jmp uuid_00000000000ddd13
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000ddd12
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddd15
uuid_00000000000ddd13:
uuid_00000000000ddd15:
	mov -392(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000ddd18
uuid_00000000000ddd16:
	movq $1, -40(%rbp)
uuid_00000000000ddd18:
	mov -184(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000ddd1b
uuid_00000000000ddd19:
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000ddd1b:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_impure_SB_offset_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd22
	jmp uuid_00000000000ddd24
uuid_00000000000ddd22:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddd1f
	jmp uuid_00000000000ddd21
uuid_00000000000ddd1f:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddd1c
	jmp uuid_00000000000ddd1e
uuid_00000000000ddd1c:
	movb $1, -104(%rbp)
uuid_00000000000ddd1e:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddd21:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddd24:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd48
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd3e
	jmp uuid_00000000000ddd40
uuid_00000000000ddd3e:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd35
	jmp uuid_00000000000ddd37
uuid_00000000000ddd35:
	push %RBP
	jmp uuid_00000000000ddd32
	jmp uuid_00000000000ddd34
uuid_00000000000ddd32:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd2c
	jmp uuid_00000000000ddd2e
uuid_00000000000ddd2c:
	push %RBP
	jmp uuid_00000000000ddd29
	jmp uuid_00000000000ddd2b
uuid_00000000000ddd29:
	push %RBP
	mov -312(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -368(%rbp)
	pushq $uuid_00000000000ddd25
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddd26
	jmp uuid_00000000000ddd28
uuid_00000000000ddd26:
	movb $1, -336(%rbp)
uuid_00000000000ddd28:
	mov -360(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000ddd2b:
	mov -352(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000ddd2e:
	mov -344(%RBP),%RSP
	add $-368, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd2f
	jmp uuid_00000000000ddd31
uuid_00000000000ddd2f:
	movb $1, -280(%rbp)
uuid_00000000000ddd31:
	mov -304(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000ddd34:
	mov -296(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000ddd37:
	mov -288(%RBP),%RSP
	add $-368, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd3b
	jmp uuid_00000000000ddd3d
uuid_00000000000ddd3b:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000dbbcb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddd38
	jmp uuid_00000000000ddd3a
uuid_00000000000ddd38:
	movb $1, -216(%rbp)
uuid_00000000000ddd3a:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000ddd3d:
	mov -232(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000ddd40:
	mov -224(%RBP),%RSP
	add $-384, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd45
	push %RBP
	jmp uuid_00000000000ddd42
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000ddd41
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddd44
uuid_00000000000ddd42:
uuid_00000000000ddd44:
	mov -392(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000ddd47
uuid_00000000000ddd45:
	movq $1, -40(%rbp)
uuid_00000000000ddd47:
	mov -184(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000ddd4a
uuid_00000000000ddd48:
#call function is-impure-offset : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_impure_SB_offset_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-impure-offset : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_impure_SB_offset_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000ddd4a:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_branchconditional_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd51
	jmp uuid_00000000000ddd53
uuid_00000000000ddd51:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddd4e
	jmp uuid_00000000000ddd50
uuid_00000000000ddd4e:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddd4b
	jmp uuid_00000000000ddd4d
uuid_00000000000ddd4b:
	movb $1, -104(%rbp)
uuid_00000000000ddd4d:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddd50:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddd53:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd65
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd5b
	jmp uuid_00000000000ddd5d
uuid_00000000000ddd5b:
	push %RBP
	jmp uuid_00000000000ddd58
	jmp uuid_00000000000ddd5a
uuid_00000000000ddd58:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000ddd54
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddd55
	jmp uuid_00000000000ddd57
uuid_00000000000ddd55:
	movb $1, -216(%rbp)
uuid_00000000000ddd57:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000ddd5a:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000ddd5d:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd62
	push %RBP
	jmp uuid_00000000000ddd5f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000ddd5e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddd61
uuid_00000000000ddd5f:
uuid_00000000000ddd61:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000ddd64
uuid_00000000000ddd62:
	movq $1, -40(%rbp)
uuid_00000000000ddd64:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000ddd67
uuid_00000000000ddd65:
#call function is-branchconditional : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_branchconditional_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-branchconditional : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_branchconditional_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000ddd67:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
mark_SB_is_SB_lm_SB_struct_CL_ArrowNilString:
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,HashtableEq<String,U64>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_exists_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqU64StringConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $is_SB_lm_SB_struct_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_lm_SB_struct_CL_ArrowU64String:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $is_SB_lm_SB_struct_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_AD__CL_ArrowASTConsASTAST:
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd78
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd6e
	jmp uuid_00000000000ddd70
uuid_00000000000ddd6e:
	push %RBP
	mov -376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddd6b
	jmp uuid_00000000000ddd6d
uuid_00000000000ddd6b:
	push %RBP
	mov -368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddd68
	jmp uuid_00000000000ddd6a
uuid_00000000000ddd68:
	movb $1, -392(%rbp)
uuid_00000000000ddd6a:
	mov -488(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000ddd6d:
	mov -408(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000ddd70:
	mov -400(%RBP),%RSP
	add $-560, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd75
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	jmp uuid_00000000000ddd72
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000ddd71
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddd74
uuid_00000000000ddd72:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000ddd74:
	mov -568(%RBP),%RSP
	add $-640, %RSP
	jmp uuid_00000000000ddd77
uuid_00000000000ddd75:
#call function + : Arrow<Cons<AST,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	mov %RBX, %RBP
	call _AD__CL_ArrowASTConsASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function + : Arrow<Cons<AST,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call _AD__CL_ArrowASTConsASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000ddd77:
	mov -312(%RBP),%RSP
	add $-560, %RSP
	jmp uuid_00000000000ddd7a
uuid_00000000000ddd78:
uuid_00000000000ddd7a:
	mov -232(%RBP),%RSP
	add $-304, %RSP
	subq $72, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $152, %rsp
	ret
print_CL_ArrowNilToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd84
	jmp uuid_00000000000ddd86
uuid_00000000000ddd84:
	push %RBP
	jmp uuid_00000000000ddd81
	jmp uuid_00000000000ddd83
uuid_00000000000ddd81:
	push %RBP
	jmp uuid_00000000000ddd7e
	jmp uuid_00000000000ddd80
uuid_00000000000ddd7e:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddd7b
	jmp uuid_00000000000ddd7d
uuid_00000000000ddd7b:
	movb $1, -192(%rbp)
uuid_00000000000ddd7d:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000ddd80:
	mov -216(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000ddd83:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000ddd86:
	mov -200(%RBP),%RSP
	add $-232, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd88
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000ddd87
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddd8a
uuid_00000000000ddd88:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddd8a:
	mov -128(%RBP),%RSP
	add $-232, %RSP
	mov %rbp, %rsp
	sub $64, %rsp
	ret
print_CL_ArrowNilContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd9f
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd9c
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $0
	push %RBP
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd94
	jmp uuid_00000000000ddd96
uuid_00000000000ddd94:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	jmp uuid_00000000000ddd91
	jmp uuid_00000000000ddd93
uuid_00000000000ddd91:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddd8e
	jmp uuid_00000000000ddd90
uuid_00000000000ddd8e:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddd8b
	jmp uuid_00000000000ddd8d
uuid_00000000000ddd8b:
	movb $1, -520(%rbp)
uuid_00000000000ddd8d:
	mov -632(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000ddd90:
	mov -616(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000ddd93:
	mov -536(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000ddd96:
	mov -528(%RBP),%RSP
	add $-728, %RSP
	mov -520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd99
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000ddd98
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddd9b
uuid_00000000000ddd99:
#call function print : Arrow<Context,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -624(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddd97
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd606
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddd9b:
	mov -416(%RBP),%RSP
	add $-728, %RSP
	jmp uuid_00000000000ddd9e
uuid_00000000000ddd9c:
uuid_00000000000ddd9e:
	mov -312(%RBP),%RSP
	add $-408, %RSP
	jmp uuid_00000000000ddda1
uuid_00000000000ddd9f:
uuid_00000000000ddda1:
	mov -208(%RBP),%RSP
	add $-304, %RSP
	mov %rbp, %rsp
	sub $104, %rsp
	ret
print_CL_ArrowNilTContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dddb8
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov -504(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dddb5
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dddae
	jmp uuid_00000000000dddb0
uuid_00000000000dddae:
	push %RBP
	jmp uuid_00000000000dddab
	jmp uuid_00000000000dddad
uuid_00000000000dddab:
	push %RBP
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	jmp uuid_00000000000ddda8
	jmp uuid_00000000000dddaa
uuid_00000000000ddda8:
	push %RBP
	mov -528(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddda5
	jmp uuid_00000000000ddda7
uuid_00000000000ddda5:
	push %RBP
	mov -520(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddda2
	jmp uuid_00000000000ddda4
uuid_00000000000ddda2:
	movb $1, -640(%rbp)
uuid_00000000000ddda4:
	mov -712(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000ddda7:
	mov -696(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000dddaa:
	mov -664(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000dddad:
	mov -656(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000dddb0:
	mov -648(%RBP),%RSP
	add $-832, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dddb2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dddb1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dddb4
uuid_00000000000dddb2:
#call function print : Arrow<TContext,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -704(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db757
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd606
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dddb4:
	mov -512(%RBP),%RSP
	add $-832, %RSP
	jmp uuid_00000000000dddb7
uuid_00000000000dddb5:
uuid_00000000000dddb7:
	mov -384(%RBP),%RSP
	add $-504, %RSP
	jmp uuid_00000000000dddba
uuid_00000000000dddb8:
uuid_00000000000dddba:
	mov -256(%RBP),%RSP
	add $-376, %RSP
	mov %rbp, %rsp
	sub $128, %rsp
	ret
print_CL_ArrowNilAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dde2b
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dde28
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dddc2
	jmp uuid_00000000000dddc4
uuid_00000000000dddc2:
	push %RBP
	jmp uuid_00000000000dddbf
	jmp uuid_00000000000dddc1
uuid_00000000000dddbf:
	push %RBP
	mov -328(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dddbc
	jmp uuid_00000000000dddbe
uuid_00000000000dddbc:
	movb $1, -400(%rbp)
uuid_00000000000dddbe:
	mov -424(%RBP),%RSP
	add $-432, %RSP
uuid_00000000000dddc1:
	mov -416(%RBP),%RSP
	add $-432, %RSP
uuid_00000000000dddc4:
	mov -408(%RBP),%RSP
	add $-432, %RSP
	mov -400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dde25
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dddcb
	jmp uuid_00000000000dddcd
uuid_00000000000dddcb:
	push %RBP
	jmp uuid_00000000000dddc8
	jmp uuid_00000000000dddca
uuid_00000000000dddc8:
	push %RBP
	mov -448(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dddc5
	jmp uuid_00000000000dddc7
uuid_00000000000dddc5:
	movb $1, -520(%rbp)
uuid_00000000000dddc7:
	mov -544(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000dddca:
	mov -536(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000dddcd:
	mov -528(%RBP),%RSP
	add $-552, %RSP
	mov -520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dde22
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dddd1
	jmp uuid_00000000000dddd3
uuid_00000000000dddd1:
	push %RBP
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	jmp uuid_00000000000dddce
	jmp uuid_00000000000dddd0
uuid_00000000000dddce:
	movb $1, -640(%rbp)
uuid_00000000000dddd0:
	mov -656(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000dddd3:
	mov -648(%RBP),%RSP
	add $-680, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dde1f
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dddd7
	jmp uuid_00000000000dddd9
uuid_00000000000dddd7:
	push %RBP
	jmp uuid_00000000000dddd4
	jmp uuid_00000000000dddd6
uuid_00000000000dddd4:
	movb $1, -768(%rbp)
uuid_00000000000dddd6:
	mov -784(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000dddd9:
	mov -776(%RBP),%RSP
	add $-784, %RSP
	mov -768(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dde1c
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -864(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddde0
	jmp uuid_00000000000ddde2
uuid_00000000000ddde0:
	push %RBP
	mov -856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddddd
	jmp uuid_00000000000ddddf
uuid_00000000000ddddd:
	push %RBP
	mov -848(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dddda
	jmp uuid_00000000000ddddc
uuid_00000000000dddda:
	movb $1, -872(%rbp)
uuid_00000000000ddddc:
	mov -968(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000ddddf:
	mov -888(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000ddde2:
	mov -880(%RBP),%RSP
	add $-1040, %RSP
	mov -872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dde19
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1120(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dddea
	jmp uuid_00000000000dddec
uuid_00000000000dddea:
	push %RBP
	mov -1112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddde7
	jmp uuid_00000000000ddde9
uuid_00000000000ddde7:
	push %RBP
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	jmp uuid_00000000000ddde4
	jmp uuid_00000000000ddde6
uuid_00000000000ddde4:
	movb $1, -1128(%rbp)
uuid_00000000000ddde6:
	mov -1224(%RBP),%RSP
	add $-1280, %RSP
uuid_00000000000ddde9:
	mov -1144(%RBP),%RSP
	add $-1280, %RSP
uuid_00000000000dddec:
	mov -1136(%RBP),%RSP
	add $-1280, %RSP
	mov -1128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dde16
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1360(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dddf4
	jmp uuid_00000000000dddf6
uuid_00000000000dddf4:
	push %RBP
	mov -1352(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dddf1
	jmp uuid_00000000000dddf3
uuid_00000000000dddf1:
	push %RBP
	mov -1344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dddee
	jmp uuid_00000000000dddf0
uuid_00000000000dddee:
	movb $1, -1368(%rbp)
uuid_00000000000dddf0:
	mov -1464(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000dddf3:
	mov -1384(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000dddf6:
	mov -1376(%RBP),%RSP
	add $-1536, %RSP
	mov -1368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dde13
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1616(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dde00
	jmp uuid_00000000000dde02
uuid_00000000000dde00:
	push %RBP
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	jmp uuid_00000000000dddfd
	jmp uuid_00000000000dddff
uuid_00000000000dddfd:
	push %RBP
	mov -1584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dddfa
	jmp uuid_00000000000dddfc
uuid_00000000000dddfa:
	push %RBP
	mov -1576(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dddf7
	jmp uuid_00000000000dddf9
uuid_00000000000dddf7:
	movb $1, -1624(%rbp)
uuid_00000000000dddf9:
	mov -1752(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000dddfc:
	mov -1672(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000dddff:
	mov -1640(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000dde02:
	mov -1632(%RBP),%RSP
	add $-1824, %RSP
	mov -1624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dde10
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1904(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dde09
	jmp uuid_00000000000dde0b
uuid_00000000000dde09:
	push %RBP
	mov -1896(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dde06
	jmp uuid_00000000000dde08
uuid_00000000000dde06:
	push %RBP
	mov -1888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dde03
	jmp uuid_00000000000dde05
uuid_00000000000dde03:
	movb $1, -1912(%rbp)
uuid_00000000000dde05:
	mov -2008(%RBP),%RSP
	add $-2080, %RSP
uuid_00000000000dde08:
	mov -1928(%RBP),%RSP
	add $-2080, %RSP
uuid_00000000000dde0b:
	mov -1920(%RBP),%RSP
	add $-2080, %RSP
	mov -1912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dde0d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dde0c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dde0f
uuid_00000000000dde0d:
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd606
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dde0f:
	mov -1832(%RBP),%RSP
	add $-2080, %RSP
	jmp uuid_00000000000dde12
uuid_00000000000dde10:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae17
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db0fc
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db18a
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae19
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dde12:
	mov -1544(%RBP),%RSP
	add $-1824, %RSP
	jmp uuid_00000000000dde15
uuid_00000000000dde13:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae17
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae18
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae19
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dde15:
	mov -1288(%RBP),%RSP
	add $-1536, %RSP
	jmp uuid_00000000000dde18
uuid_00000000000dde16:
#call function print : Arrow<Token,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddded
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dde18:
	mov -1048(%RBP),%RSP
	add $-1280, %RSP
	jmp uuid_00000000000dde1b
uuid_00000000000dde19:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddde3
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddd97
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dde1b:
	mov -792(%RBP),%RSP
	add $-1040, %RSP
	jmp uuid_00000000000dde1e
uuid_00000000000dde1c:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dbbcb
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dde1e:
	mov -688(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000dde21
uuid_00000000000dde1f:
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dde21:
	mov -560(%RBP),%RSP
	add $-680, %RSP
	jmp uuid_00000000000dde24
uuid_00000000000dde22:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db0fb
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -552(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dde24:
	mov -440(%RBP),%RSP
	add $-552, %RSP
	jmp uuid_00000000000dde27
uuid_00000000000dde25:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -432(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dde27:
	mov -320(%RBP),%RSP
	add $-432, %RSP
	jmp uuid_00000000000dde2a
uuid_00000000000dde28:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae07
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dde2a:
	mov -240(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000dde2d
uuid_00000000000dde2b:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dddbb
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dde2d:
	mov -160(%RBP),%RSP
	add $-232, %RSP
	mov %rbp, %rsp
	sub $80, %rsp
	ret
print_CL_ArrowNilFContext:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dde2e
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dde42:
#call function non-zero : Arrow<FContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dde43
	jmp uuid_00000000000dde44
uuid_00000000000dde43:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dde3b
	jmp uuid_00000000000dde3d
uuid_00000000000dde3b:
	push %RBP
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	jmp uuid_00000000000dde38
	jmp uuid_00000000000dde3a
uuid_00000000000dde38:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000dde35
	jmp uuid_00000000000dde37
uuid_00000000000dde35:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dde32
	jmp uuid_00000000000dde34
uuid_00000000000dde32:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dde2f
	jmp uuid_00000000000dde31
uuid_00000000000dde2f:
	movb $1, -624(%rbp)
uuid_00000000000dde31:
	mov -848(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000dde34:
	mov -832(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000dde37:
	mov -800(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000dde3a:
	mov -640(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000dde3d:
	mov -632(%RBP),%RSP
	add $-1048, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dde3f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dde3e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dde41
uuid_00000000000dde3f:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -840(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db757
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Fragment,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -1048(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -976(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -968(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -960(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -952(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -944(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -936(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -928(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -920(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -912(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -904(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -896(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -888(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -880(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -872(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -864(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -856(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dde41:
	mov -416(%RBP),%RSP
	add $-1048, %RSP
	add $200, %rsp
	add $200, %rsp
	add $8, %rsp
	add $152, %rsp
	add $24, %rsp
	add $8, %rsp
	add $200, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dde42
uuid_00000000000dde44:
	mov %rbp, %rsp
	sub $208, %rsp
	ret
print_CL_ArrowNilFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dde57
	jmp uuid_00000000000dde59
uuid_00000000000dde57:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	jmp uuid_00000000000dde54
	jmp uuid_00000000000dde56
uuid_00000000000dde54:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dde51
	jmp uuid_00000000000dde53
uuid_00000000000dde51:
	push %RBP
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	jmp uuid_00000000000dde4e
	jmp uuid_00000000000dde50
uuid_00000000000dde4e:
	push %RBP
	mov -408(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dde4b
	jmp uuid_00000000000dde4d
uuid_00000000000dde4b:
	push %RBP
	mov -400(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dde48
	jmp uuid_00000000000dde4a
uuid_00000000000dde48:
	push %RBP
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	jmp uuid_00000000000dde45
	jmp uuid_00000000000dde47
uuid_00000000000dde45:
	movb $1, -480(%rbp)
uuid_00000000000dde47:
	mov -840(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000dde4a:
	mov -784(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000dde4d:
	mov -768(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000dde50:
	mov -736(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000dde53:
	mov -528(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000dde56:
	mov -496(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000dde59:
	mov -488(%RBP),%RSP
	add $-912, %RSP
	mov -480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dde70
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dde6f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dde72
uuid_00000000000dde70:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dde5a
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dde5b
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<I64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -776(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dde6c:
#call function non-zero : Arrow<FragmentKV,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dde6d
	jmp uuid_00000000000dde6e
uuid_00000000000dde6d:
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	push %RBP
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq $0
	push %RBP
	mov -1016(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dde65
	jmp uuid_00000000000dde67
uuid_00000000000dde65:
	push %RBP
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	jmp uuid_00000000000dde62
	jmp uuid_00000000000dde64
uuid_00000000000dde62:
	push %RBP
	mov -984(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dde5f
	jmp uuid_00000000000dde61
uuid_00000000000dde5f:
	push %RBP
	mov -976(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dde5c
	jmp uuid_00000000000dde5e
uuid_00000000000dde5c:
	movb $1, -1024(%rbp)
uuid_00000000000dde5e:
	mov -1088(%RBP),%RSP
	add $-1136, %RSP
uuid_00000000000dde61:
	mov -1072(%RBP),%RSP
	add $-1136, %RSP
uuid_00000000000dde64:
	mov -1040(%RBP),%RSP
	add $-1136, %RSP
uuid_00000000000dde67:
	mov -1032(%RBP),%RSP
	add $-1136, %RSP
	mov -1024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dde69
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dde68
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dde6b
uuid_00000000000dde69:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db0ff
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddd97
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<S,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -1136(%rbp), %r15
	movq %r15, -832(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -824(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -816(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -808(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -800(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -792(%rbp)
uuid_00000000000dde6b:
	mov -968(%RBP),%RSP
	add $-1136, %RSP
	add $48, %rsp
	add $48, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dde6c
uuid_00000000000dde6e:
uuid_00000000000dde72:
	mov -320(%RBP),%RSP
	add $-912, %RSP
	mov %rbp, %rsp
	sub $160, %rsp
	ret
print_CL_ArrowNilFragmentList:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq $0
	push %RBP
	mov -520(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dde79
	jmp uuid_00000000000dde7b
uuid_00000000000dde79:
	push %RBP
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	jmp uuid_00000000000dde76
	jmp uuid_00000000000dde78
uuid_00000000000dde76:
	push %RBP
	mov -360(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dde73
	jmp uuid_00000000000dde75
uuid_00000000000dde73:
	movb $1, -528(%rbp)
uuid_00000000000dde75:
	mov -704(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000dde78:
	mov -544(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000dde7b:
	mov -536(%RBP),%RSP
	add $-872, %RSP
	mov -528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dde80
	push %RBP
	jmp uuid_00000000000dde7d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dde7c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dde7f
uuid_00000000000dde7d:
uuid_00000000000dde7f:
	mov -880(%RBP),%RSP
	add $-880, %RSP
	jmp uuid_00000000000dde82
uuid_00000000000dde80:
#call function print : Arrow<FragmentList,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilFragmentList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Fragment,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dde82:
	mov -352(%RBP),%RSP
	add $-872, %RSP
	mov %rbp, %rsp
	sub $176, %rsp
	ret
print_CL_ArrowNilSourceLocation:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dde8c
	jmp uuid_00000000000dde8e
uuid_00000000000dde8c:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dde89
	jmp uuid_00000000000dde8b
uuid_00000000000dde89:
	push %RBP
	mov -96(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dde86
	jmp uuid_00000000000dde88
uuid_00000000000dde86:
	push %RBP
	mov -88(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dde83
	jmp uuid_00000000000dde85
uuid_00000000000dde83:
	movb $1, -120(%rbp)
uuid_00000000000dde85:
	mov -168(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dde88:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dde8b:
	mov -136(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dde8e:
	mov -128(%RBP),%RSP
	add $-176, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dde93
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dde92
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dde95
uuid_00000000000dde93:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dde8f
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dde90
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dde91
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dde95:
	mov -80(%RBP),%RSP
	add $-176, %RSP
	mov %rbp, %rsp
	sub $40, %rsp
	ret
print_CL_ArrowNilType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddec9
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dde99
	jmp uuid_00000000000dde9b
uuid_00000000000dde99:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dde96
	jmp uuid_00000000000dde98
uuid_00000000000dde96:
	movb $1, -128(%rbp)
uuid_00000000000dde98:
	mov -144(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000dde9b:
	mov -136(%RBP),%RSP
	add $-152, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddec6
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddea2
	jmp uuid_00000000000ddea4
uuid_00000000000ddea2:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dde9f
	jmp uuid_00000000000ddea1
uuid_00000000000dde9f:
	push %RBP
	mov -168(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dde9c
	jmp uuid_00000000000dde9e
uuid_00000000000dde9c:
	movb $1, -192(%rbp)
uuid_00000000000dde9e:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000ddea1:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000ddea4:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddec3
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddeab
	jmp uuid_00000000000ddead
uuid_00000000000ddeab:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddea8
	jmp uuid_00000000000ddeaa
uuid_00000000000ddea8:
	push %RBP
	mov -280(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddea5
	jmp uuid_00000000000ddea7
uuid_00000000000ddea5:
	movb $1, -304(%rbp)
uuid_00000000000ddea7:
	mov -352(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000ddeaa:
	mov -320(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000ddead:
	mov -312(%RBP),%RSP
	add $-376, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddec0
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddeb9
	jmp uuid_00000000000ddebb
uuid_00000000000ddeb9:
	push %RBP
	mov -400(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddeb6
	jmp uuid_00000000000ddeb8
uuid_00000000000ddeb6:
	push %RBP
	mov -392(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddeb3
	jmp uuid_00000000000ddeb5
uuid_00000000000ddeb3:
	movb $1, -416(%rbp)
uuid_00000000000ddeb5:
	mov -480(%RBP),%RSP
	add $-488, %RSP
uuid_00000000000ddeb8:
	mov -432(%RBP),%RSP
	add $-488, %RSP
uuid_00000000000ddebb:
	mov -424(%RBP),%RSP
	add $-488, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddebd
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000ddebc
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddebf
uuid_00000000000ddebd:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db297
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<List<Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db298
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddebf:
	mov -384(%RBP),%RSP
	add $-488, %RSP
	jmp uuid_00000000000ddec2
uuid_00000000000ddec0:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddeb0
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddeaf
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddeb2
uuid_00000000000ddeb0:
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddeae
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddeb2:
	mov -384(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000ddec2:
	mov -272(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000ddec5
uuid_00000000000ddec3:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddec5:
	mov -160(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000ddec8
uuid_00000000000ddec6:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddec8:
	mov -96(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000ddecb
uuid_00000000000ddec9:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dafa7
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddecb:
	mov -64(%RBP),%RSP
	add $-88, %RSP
	mov %rbp, %rsp
	sub $32, %rsp
	ret
print_CL_ArrowNilListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddee9
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dded6
	jmp uuid_00000000000dded8
uuid_00000000000dded6:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dded3
	jmp uuid_00000000000dded5
uuid_00000000000dded3:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	jmp uuid_00000000000dded0
	jmp uuid_00000000000dded2
uuid_00000000000dded0:
	movb $1, -192(%rbp)
uuid_00000000000dded2:
	mov -256(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000dded5:
	mov -208(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000dded8:
	mov -200(%RBP),%RSP
	add $-280, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddee6
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddedf
	jmp uuid_00000000000ddee1
uuid_00000000000ddedf:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddedc
	jmp uuid_00000000000ddede
uuid_00000000000ddedc:
	push %RBP
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	jmp uuid_00000000000dded9
	jmp uuid_00000000000ddedb
uuid_00000000000dded9:
	movb $1, -336(%rbp)
uuid_00000000000ddedb:
	mov -400(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000ddede:
	mov -352(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000ddee1:
	mov -344(%RBP),%RSP
	add $-424, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddee3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000ddee2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddee5
uuid_00000000000ddee3:
#call function print : Arrow<List<Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db257
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddee5:
	mov -288(%RBP),%RSP
	add $-424, %RSP
	jmp uuid_00000000000ddee8
uuid_00000000000ddee6:
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddee8:
	mov -144(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000ddeeb
uuid_00000000000ddee9:
uuid_00000000000ddeeb:
	mov -96(%RBP),%RSP
	add $-136, %RSP
	mov %rbp, %rsp
	sub $48, %rsp
	ret
reverse_CL_ArrowFragmentListFragmentList:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000ddef9:
#call function non-zero : Arrow<FragmentList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FragmentList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddefa
	jmp uuid_00000000000ddefb
uuid_00000000000ddefa:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	push %RBP
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq $0
	push %RBP
	mov -688(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddef2
	jmp uuid_00000000000ddef4
uuid_00000000000ddef2:
	push %RBP
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	jmp uuid_00000000000ddeef
	jmp uuid_00000000000ddef1
uuid_00000000000ddeef:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddeec
	jmp uuid_00000000000ddeee
uuid_00000000000ddeec:
	movb $1, -696(%rbp)
uuid_00000000000ddeee:
	mov -872(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000ddef1:
	mov -712(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000ddef4:
	mov -704(%RBP),%RSP
	add $-1040, %RSP
	mov -696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddef6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000ddef5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddef8
uuid_00000000000ddef6:
#call function close : Arrow<FragmentList,Array<FragmentList,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentListFragmentList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq $0
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	movq -1040(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -976(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -968(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -960(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -952(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -944(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -936(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -928(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -920(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -912(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -904(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -896(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -888(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -880(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000ddef8:
	mov -520(%RBP),%RSP
	add $-1040, %RSP
	add $168, %rsp
	add $168, %rsp
	add $8, %rsp
	add $152, %rsp
	add $168, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000ddef9
uuid_00000000000ddefb:
	subq $168, %rsp
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	addq $168, %rsp
	mov %rbp, %rsp
	sub $176, %rsp
	ret
serialize_SB_ast_CL_ArrowNilAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf7c
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf79
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddeff
	jmp uuid_00000000000ddf01
uuid_00000000000ddeff:
	push %RBP
	jmp uuid_00000000000ddefc
	jmp uuid_00000000000ddefe
uuid_00000000000ddefc:
	movb $1, -400(%rbp)
uuid_00000000000ddefe:
	mov -416(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000ddf01:
	mov -408(%RBP),%RSP
	add $-416, %RSP
	mov -400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf76
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf08
	jmp uuid_00000000000ddf0a
uuid_00000000000ddf08:
	push %RBP
	jmp uuid_00000000000ddf05
	jmp uuid_00000000000ddf07
uuid_00000000000ddf05:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddf02
	jmp uuid_00000000000ddf04
uuid_00000000000ddf02:
	movb $1, -504(%rbp)
uuid_00000000000ddf04:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000ddf07:
	mov -520(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000ddf0a:
	mov -512(%RBP),%RSP
	add $-536, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf73
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf12
	jmp uuid_00000000000ddf14
uuid_00000000000ddf12:
	push %RBP
	jmp uuid_00000000000ddf0f
	jmp uuid_00000000000ddf11
uuid_00000000000ddf0f:
	push %RBP
	mov -552(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddf0c
	jmp uuid_00000000000ddf0e
uuid_00000000000ddf0c:
	movb $1, -624(%rbp)
uuid_00000000000ddf0e:
	mov -648(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000ddf11:
	mov -640(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000ddf14:
	mov -632(%RBP),%RSP
	add $-656, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf70
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -736(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf19
	jmp uuid_00000000000ddf1b
uuid_00000000000ddf19:
	push %RBP
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	jmp uuid_00000000000ddf16
	jmp uuid_00000000000ddf18
uuid_00000000000ddf16:
	movb $1, -744(%rbp)
uuid_00000000000ddf18:
	mov -760(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000ddf1b:
	mov -752(%RBP),%RSP
	add $-784, %RSP
	mov -744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf6d
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -864(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf22
	jmp uuid_00000000000ddf24
uuid_00000000000ddf22:
	push %RBP
	mov -856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddf1f
	jmp uuid_00000000000ddf21
uuid_00000000000ddf1f:
	push %RBP
	mov -848(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddf1c
	jmp uuid_00000000000ddf1e
uuid_00000000000ddf1c:
	movb $1, -872(%rbp)
uuid_00000000000ddf1e:
	mov -968(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000ddf21:
	mov -888(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000ddf24:
	mov -880(%RBP),%RSP
	add $-1040, %RSP
	mov -872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf6a
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1120(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf2d
	jmp uuid_00000000000ddf2f
uuid_00000000000ddf2d:
	push %RBP
	mov -1112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddf2a
	jmp uuid_00000000000ddf2c
uuid_00000000000ddf2a:
	push %RBP
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	jmp uuid_00000000000ddf27
	jmp uuid_00000000000ddf29
uuid_00000000000ddf27:
	movb $1, -1128(%rbp)
uuid_00000000000ddf29:
	mov -1224(%RBP),%RSP
	add $-1280, %RSP
uuid_00000000000ddf2c:
	mov -1144(%RBP),%RSP
	add $-1280, %RSP
uuid_00000000000ddf2f:
	mov -1136(%RBP),%RSP
	add $-1280, %RSP
	mov -1128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf67
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1360(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf37
	jmp uuid_00000000000ddf39
uuid_00000000000ddf37:
	push %RBP
	mov -1352(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddf34
	jmp uuid_00000000000ddf36
uuid_00000000000ddf34:
	push %RBP
	mov -1344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddf31
	jmp uuid_00000000000ddf33
uuid_00000000000ddf31:
	movb $1, -1368(%rbp)
uuid_00000000000ddf33:
	mov -1464(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000ddf36:
	mov -1384(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000ddf39:
	mov -1376(%RBP),%RSP
	add $-1536, %RSP
	mov -1368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf64
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1616(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf44
	jmp uuid_00000000000ddf46
uuid_00000000000ddf44:
	push %RBP
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	jmp uuid_00000000000ddf41
	jmp uuid_00000000000ddf43
uuid_00000000000ddf41:
	push %RBP
	mov -1584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddf3e
	jmp uuid_00000000000ddf40
uuid_00000000000ddf3e:
	push %RBP
	mov -1576(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddf3b
	jmp uuid_00000000000ddf3d
uuid_00000000000ddf3b:
	movb $1, -1624(%rbp)
uuid_00000000000ddf3d:
	mov -1752(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000ddf40:
	mov -1672(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000ddf43:
	mov -1640(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000ddf46:
	mov -1632(%RBP),%RSP
	add $-1824, %RSP
	mov -1624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf61
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1904(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf4e
	jmp uuid_00000000000ddf50
uuid_00000000000ddf4e:
	push %RBP
	mov -1896(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddf4b
	jmp uuid_00000000000ddf4d
uuid_00000000000ddf4b:
	push %RBP
	mov -1888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2080(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf48
	jmp uuid_00000000000ddf4a
uuid_00000000000ddf48:
	movb $1, -1912(%rbp)
uuid_00000000000ddf4a:
	mov -2008(%RBP),%RSP
	add $-2080, %RSP
uuid_00000000000ddf4d:
	mov -1928(%RBP),%RSP
	add $-2080, %RSP
uuid_00000000000ddf50:
	mov -1920(%RBP),%RSP
	add $-2080, %RSP
	mov -1912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf5e
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -2160(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf57
	jmp uuid_00000000000ddf59
uuid_00000000000ddf57:
	push %RBP
	mov -2152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddf54
	jmp uuid_00000000000ddf56
uuid_00000000000ddf54:
	push %RBP
	mov -2144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddf51
	jmp uuid_00000000000ddf53
uuid_00000000000ddf51:
	movb $1, -2168(%rbp)
uuid_00000000000ddf53:
	mov -2264(%RBP),%RSP
	add $-2336, %RSP
uuid_00000000000ddf56:
	mov -2184(%RBP),%RSP
	add $-2336, %RSP
uuid_00000000000ddf59:
	mov -2176(%RBP),%RSP
	add $-2336, %RSP
	mov -2168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf5b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000ddf5a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddf5d
uuid_00000000000ddf5b:
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
	pushq -2336(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddf5d:
	mov -2088(%RBP),%RSP
	add $-2336, %RSP
	jmp uuid_00000000000ddf60
uuid_00000000000ddf5e:
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddf60:
	mov -1832(%RBP),%RSP
	add $-2080, %RSP
	jmp uuid_00000000000ddf63
uuid_00000000000ddf61:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddf47
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae18
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddf26
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddf63:
	mov -1544(%RBP),%RSP
	add $-1824, %RSP
	jmp uuid_00000000000ddf66
uuid_00000000000ddf64:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddf3a
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae18
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddf26
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddf66:
	mov -1288(%RBP),%RSP
	add $-1536, %RSP
	jmp uuid_00000000000ddf69
uuid_00000000000ddf67:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddf30
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Token,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae18
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddf26
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddf69:
	mov -1048(%RBP),%RSP
	add $-1280, %RSP
	jmp uuid_00000000000ddf6c
uuid_00000000000ddf6a:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddf25
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae18
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddf26
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddf6c:
	mov -792(%RBP),%RSP
	add $-1040, %RSP
	jmp uuid_00000000000ddf6f
uuid_00000000000ddf6d:
#call function serialize-ast : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddf6f:
	mov -664(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000ddf72
uuid_00000000000ddf70:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddf15
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae19
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddf72:
	mov -544(%RBP),%RSP
	add $-656, %RSP
	jmp uuid_00000000000ddf75
uuid_00000000000ddf73:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddf0b
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae19
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddf75:
	mov -424(%RBP),%RSP
	add $-536, %RSP
	jmp uuid_00000000000ddf78
uuid_00000000000ddf76:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dbbcb
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddf78:
	mov -320(%RBP),%RSP
	add $-416, %RSP
	jmp uuid_00000000000ddf7b
uuid_00000000000ddf79:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daff0
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddf7b:
	mov -240(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000ddf7e
uuid_00000000000ddf7c:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae07
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddf7e:
	mov -160(%RBP),%RSP
	add $-232, %RSP
	mov %rbp, %rsp
	sub $80, %rsp
	ret
serialize_SB_ast_CL_ArrowNilListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf9c
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf89
	jmp uuid_00000000000ddf8b
uuid_00000000000ddf89:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf86
	jmp uuid_00000000000ddf88
uuid_00000000000ddf86:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	jmp uuid_00000000000ddf83
	jmp uuid_00000000000ddf85
uuid_00000000000ddf83:
	movb $1, -192(%rbp)
uuid_00000000000ddf85:
	mov -256(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000ddf88:
	mov -208(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000ddf8b:
	mov -200(%RBP),%RSP
	add $-280, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf99
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf92
	jmp uuid_00000000000ddf94
uuid_00000000000ddf92:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddf8f
	jmp uuid_00000000000ddf91
uuid_00000000000ddf8f:
	push %RBP
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	jmp uuid_00000000000ddf8c
	jmp uuid_00000000000ddf8e
uuid_00000000000ddf8c:
	movb $1, -336(%rbp)
uuid_00000000000ddf8e:
	mov -400(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000ddf91:
	mov -352(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000ddf94:
	mov -344(%RBP),%RSP
	add $-424, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf96
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000ddf95
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddf98
uuid_00000000000ddf96:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddf3a
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<List<Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae18
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddf26
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddf98:
	mov -288(%RBP),%RSP
	add $-424, %RSP
	jmp uuid_00000000000ddf9b
uuid_00000000000ddf99:
#call function serialize-ast : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddf9b:
	mov -144(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000ddf9e
uuid_00000000000ddf9c:
uuid_00000000000ddf9e:
	mov -96(%RBP),%RSP
	add $-136, %RSP
	mov %rbp, %rsp
	sub $48, %rsp
	ret
serialize_SB_ast_CL_ArrowNilType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddfd0
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddfa3
	jmp uuid_00000000000ddfa5
uuid_00000000000ddfa3:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddfa0
	jmp uuid_00000000000ddfa2
uuid_00000000000ddfa0:
	movb $1, -128(%rbp)
uuid_00000000000ddfa2:
	mov -144(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000ddfa5:
	mov -136(%RBP),%RSP
	add $-152, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddfcd
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddfac
	jmp uuid_00000000000ddfae
uuid_00000000000ddfac:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddfa9
	jmp uuid_00000000000ddfab
uuid_00000000000ddfa9:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddfa6
	jmp uuid_00000000000ddfa8
uuid_00000000000ddfa6:
	movb $1, -192(%rbp)
uuid_00000000000ddfa8:
	mov -240(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000ddfab:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000ddfae:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddfca
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddfb6
	jmp uuid_00000000000ddfb8
uuid_00000000000ddfb6:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -360(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddfb3
	jmp uuid_00000000000ddfb5
uuid_00000000000ddfb3:
	push %RBP
	mov -280(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddfb0
	jmp uuid_00000000000ddfb2
uuid_00000000000ddfb0:
	movb $1, -304(%rbp)
uuid_00000000000ddfb2:
	mov -368(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000ddfb5:
	mov -320(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000ddfb8:
	mov -312(%RBP),%RSP
	add $-376, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddfc7
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddfbf
	jmp uuid_00000000000ddfc1
uuid_00000000000ddfbf:
	push %RBP
	mov -400(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddfbc
	jmp uuid_00000000000ddfbe
uuid_00000000000ddfbc:
	push %RBP
	mov -392(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddfb9
	jmp uuid_00000000000ddfbb
uuid_00000000000ddfb9:
	movb $1, -416(%rbp)
uuid_00000000000ddfbb:
	mov -480(%RBP),%RSP
	add $-488, %RSP
uuid_00000000000ddfbe:
	mov -432(%RBP),%RSP
	add $-488, %RSP
uuid_00000000000ddfc1:
	mov -424(%RBP),%RSP
	add $-488, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddfc4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000ddfc3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddfc6
uuid_00000000000ddfc4:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddf3a
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddf15
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddfc2
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<List<Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddf26
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddfc6:
	mov -384(%RBP),%RSP
	add $-488, %RSP
	jmp uuid_00000000000ddfc9
uuid_00000000000ddfc7:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddf15
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -376(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae19
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddfc9:
	mov -272(%RBP),%RSP
	add $-376, %RSP
	jmp uuid_00000000000ddfcc
uuid_00000000000ddfca:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddf3a
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddfaf
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddf3a
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae18
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddf26
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddf26
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddfcc:
	mov -160(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000ddfcf
uuid_00000000000ddfcd:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddf0b
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae19
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddfcf:
	mov -96(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000ddfd2
uuid_00000000000ddfd0:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddf9f
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddfd2:
	mov -64(%RBP),%RSP
	add $-88, %RSP
	mov %rbp, %rsp
	sub $32, %rsp
	ret
slot_CL_ArrowTypeConsStringType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddfd9
	jmp uuid_00000000000ddfdb
uuid_00000000000ddfd9:
	push %RBP
	jmp uuid_00000000000ddfd6
	jmp uuid_00000000000ddfd8
uuid_00000000000ddfd6:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddfd3
	jmp uuid_00000000000ddfd5
uuid_00000000000ddfd3:
	movb $1, -128(%rbp)
uuid_00000000000ddfd5:
	mov -152(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000ddfd8:
	mov -144(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000ddfdb:
	mov -136(%RBP),%RSP
	add $-160, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddff2
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddfe5
	jmp uuid_00000000000ddfe7
uuid_00000000000ddfe5:
	push %RBP
	mov -184(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddfe2
	jmp uuid_00000000000ddfe4
uuid_00000000000ddfe2:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddfdf
	jmp uuid_00000000000ddfe1
uuid_00000000000ddfdf:
	movb $1, -200(%rbp)
uuid_00000000000ddfe1:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000ddfe4:
	mov -216(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000ddfe7:
	mov -208(%RBP),%RSP
	add $-272, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddfef
	push %RBP
	jmp uuid_00000000000ddfec
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000ddfeb
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddfee
uuid_00000000000ddfec:
uuid_00000000000ddfee:
	mov -280(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000ddff1
uuid_00000000000ddfef:
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddfe8
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	movq -328(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -320(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -312(%rbp), %r15
	movq %r15, -48(%rbp)
	jmp uuid_00000000000ddfea
uuid_00000000000ddfe8:
	movq -296(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -288(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -48(%rbp)
uuid_00000000000ddfea:
	mov -304(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000ddff1:
	mov -168(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000ddff4
uuid_00000000000ddff2:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddfdc
	jmp uuid_00000000000ddfde
uuid_00000000000ddfdc:
	movq -24(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -48(%rbp)
uuid_00000000000ddfde:
	mov -168(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000ddff4:
	mov -96(%RBP),%RSP
	add $-168, %RSP
	subq $24, %rsp
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $40, %rsp
	ret
slot_CL_ArrowTypeConsStringConsStringType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -128(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddffb
	jmp uuid_00000000000ddffd
uuid_00000000000ddffb:
	push %RBP
	mov -120(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddff8
	jmp uuid_00000000000ddffa
uuid_00000000000ddff8:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddff5
	jmp uuid_00000000000ddff7
uuid_00000000000ddff5:
	movb $1, -136(%rbp)
uuid_00000000000ddff7:
	mov -200(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000ddffa:
	mov -152(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000ddffd:
	mov -144(%RBP),%RSP
	add $-208, %RSP
	mov -136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de027
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de01a
	jmp uuid_00000000000de01c
uuid_00000000000de01a:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de017
	jmp uuid_00000000000de019
uuid_00000000000de017:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de014
	jmp uuid_00000000000de016
uuid_00000000000de014:
	movb $1, -248(%rbp)
uuid_00000000000de016:
	mov -296(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000de019:
	mov -264(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000de01c:
	mov -256(%RBP),%RSP
	add $-320, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de024
	push %RBP
	jmp uuid_00000000000de021
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de020
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de023
uuid_00000000000de021:
uuid_00000000000de023:
	mov -328(%RBP),%RSP
	add $-328, %RSP
	jmp uuid_00000000000de026
uuid_00000000000de024:
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de01d
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	movq -376(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -56(%rbp)
	jmp uuid_00000000000de01f
uuid_00000000000de01d:
	movq -344(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -56(%rbp)
uuid_00000000000de01f:
	mov -352(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000de026:
	mov -216(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000de029
uuid_00000000000de027:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de011
	jmp uuid_00000000000de013
uuid_00000000000de011:
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de004
	jmp uuid_00000000000de006
uuid_00000000000de004:
	push %RBP
	jmp uuid_00000000000de001
	jmp uuid_00000000000de003
uuid_00000000000de001:
	push %RBP
	mov -288(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddffe
	jmp uuid_00000000000de000
uuid_00000000000ddffe:
	movb $1, -312(%rbp)
uuid_00000000000de000:
	mov -336(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000de003:
	mov -328(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000de006:
	mov -320(%RBP),%RSP
	add $-344, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de00e
	push %RBP
	jmp uuid_00000000000de00b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de00a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de00d
uuid_00000000000de00b:
uuid_00000000000de00d:
	mov -352(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000de010
uuid_00000000000de00e:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -344(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de007
	jmp uuid_00000000000de009
uuid_00000000000de007:
	movq -24(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -56(%rbp)
uuid_00000000000de009:
	mov -352(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000de010:
	mov -264(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000de013:
	mov -216(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000de029:
	mov -104(%RBP),%RSP
	add $-352, %RSP
	subq $24, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
uuid_CL_ArrowStringNil:
	mov $uuid_SB_counter_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, %r15
	movq $uuid_SB_counter_CL_U64, %r14
	movq %r15, 0(%r14)
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de02a
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-hex : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $uuid_SB_counter_CL_U64, %r15
	pushq 0(%r15)
	mov %RBX, %RBP
	call to_SB_hex_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
iuid_CL_ArrowU64Nil:
	mov $uuid_SB_counter_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, %r15
	movq $uuid_SB_counter_CL_U64, %r14
	movq %r15, 0(%r14)
	mov $uuid_SB_counter_CL_U64, %r15
	pushq 0(%r15)
	mov -16(%rbp), %RAX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
var_SB_name_SB_if_SB_var_CL_ArrowStringAST:
	pushq $uuid_00000000000daee6
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de031
	jmp uuid_00000000000de033
uuid_00000000000de031:
	push %RBP
	jmp uuid_00000000000de02e
	jmp uuid_00000000000de030
uuid_00000000000de02e:
	push %RBP
	mov -176(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de02b
	jmp uuid_00000000000de02d
uuid_00000000000de02b:
	movb $1, -248(%rbp)
uuid_00000000000de02d:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000de030:
	mov -264(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000de033:
	mov -256(%RBP),%RSP
	add $-280, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de044
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -360(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de03a
	jmp uuid_00000000000de03c
uuid_00000000000de03a:
	push %RBP
	jmp uuid_00000000000de037
	jmp uuid_00000000000de039
uuid_00000000000de037:
	push %RBP
	mov -296(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de034
	jmp uuid_00000000000de036
uuid_00000000000de034:
	movb $1, -368(%rbp)
uuid_00000000000de036:
	mov -392(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000de039:
	mov -384(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000de03c:
	mov -376(%RBP),%RSP
	add $-400, %RSP
	mov -368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de041
	push %RBP
	jmp uuid_00000000000de03e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de03d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de040
uuid_00000000000de03e:
uuid_00000000000de040:
	mov -408(%RBP),%RSP
	add $-408, %RSP
	jmp uuid_00000000000de043
uuid_00000000000de041:
	movq -400(%rbp), %r15
	movq %r15, -88(%rbp)
	mov -400(%rbp), %r15
	mov %r15, -88(%rbp)
uuid_00000000000de043:
	mov -288(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000de046
uuid_00000000000de044:
	movq -280(%rbp), %r15
	movq %r15, -88(%rbp)
	mov -280(%rbp), %r15
	mov %r15, -88(%rbp)
uuid_00000000000de046:
	mov -168(%RBP),%RSP
	add $-280, %RSP
	mov -88(%rbp), %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
remove_SB_parens_CL_ArrowListTokenListToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de05d
	jmp uuid_00000000000de05f
uuid_00000000000de05d:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de05a
	jmp uuid_00000000000de05c
uuid_00000000000de05a:
	push %RBP
	pushq -168(%RBP)
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq $0
	push %RBP
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de054
	jmp uuid_00000000000de056
uuid_00000000000de054:
	push %RBP
	jmp uuid_00000000000de051
	jmp uuid_00000000000de053
uuid_00000000000de051:
	push %RBP
	jmp uuid_00000000000de04e
	jmp uuid_00000000000de050
uuid_00000000000de04e:
	push %RBP
	mov -344(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -440(%rbp)
	pushq $uuid_00000000000dae17
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de04b
	jmp uuid_00000000000de04d
uuid_00000000000de04b:
	movb $1, -400(%rbp)
uuid_00000000000de04d:
	mov -432(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000de050:
	mov -424(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000de053:
	mov -416(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000de056:
	mov -408(%RBP),%RSP
	add $-440, %RSP
	mov -400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de057
	jmp uuid_00000000000de059
uuid_00000000000de057:
	movb $1, -240(%rbp)
uuid_00000000000de059:
	mov -336(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000de05c:
	mov -256(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000de05f:
	mov -248(%RBP),%RSP
	add $-440, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de08d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de08c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de08f
uuid_00000000000de08d:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000de089:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de08a
	jmp uuid_00000000000de08b
uuid_00000000000de08a:
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	push %RBP
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq $0
	push %RBP
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de076
	jmp uuid_00000000000de078
uuid_00000000000de076:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de073
	jmp uuid_00000000000de075
uuid_00000000000de073:
	push %RBP
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq $0
	push %RBP
	mov -824(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de06d
	jmp uuid_00000000000de06f
uuid_00000000000de06d:
	push %RBP
	jmp uuid_00000000000de06a
	jmp uuid_00000000000de06c
uuid_00000000000de06a:
	push %RBP
	jmp uuid_00000000000de067
	jmp uuid_00000000000de069
uuid_00000000000de067:
	push %RBP
	mov -776(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -872(%rbp)
	pushq $uuid_00000000000dae19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de064
	jmp uuid_00000000000de066
uuid_00000000000de064:
	movb $1, -832(%rbp)
uuid_00000000000de066:
	mov -864(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000de069:
	mov -856(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000de06c:
	mov -848(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000de06f:
	mov -840(%RBP),%RSP
	add $-872, %RSP
	mov -832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de070
	jmp uuid_00000000000de072
uuid_00000000000de070:
	movb $1, -672(%rbp)
uuid_00000000000de072:
	mov -768(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000de075:
	mov -688(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000de078:
	mov -680(%RBP),%RSP
	add $-872, %RSP
	mov -672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de086
	push %RBP
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq $0
	push %RBP
	mov -952(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de07f
	jmp uuid_00000000000de081
uuid_00000000000de07f:
	push %RBP
	mov -944(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de07c
	jmp uuid_00000000000de07e
uuid_00000000000de07c:
	push %RBP
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	jmp uuid_00000000000de079
	jmp uuid_00000000000de07b
uuid_00000000000de079:
	movb $1, -960(%rbp)
uuid_00000000000de07b:
	mov -1056(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000de07e:
	mov -976(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000de081:
	mov -968(%RBP),%RSP
	add $-1112, %RSP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de083
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de082
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de085
uuid_00000000000de083:
#call function cons : Arrow<Cons<Token,List<Token>>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTokenConsListTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	movq -1048(%rbp), %r15
	movq %r15, -328(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -264(%rbp)
uuid_00000000000de085:
	mov -880(%RBP),%RSP
	add $-1112, %RSP
	jmp uuid_00000000000de088
uuid_00000000000de086:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
uuid_00000000000de088:
	mov -592(%RBP),%RSP
	add $-872, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000de089
uuid_00000000000de08b:
#call function reverse : Arrow<List<Token>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call reverse_CL_ArrowListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000de08f:
	mov -160(%RBP),%RSP
	add $-512, %RSP
	subq $72, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
parse_SB_expect_CL_ArrowNilConsListTokenString:
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<List<Token>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
parse_SB_lambda_CL_ArrowParsePartialListToken:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de0bf
	jmp uuid_00000000000de0c1
uuid_00000000000de0bf:
	push %RBP
	mov -248(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de0aa
	jmp uuid_00000000000de0ac
uuid_00000000000de0aa:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de0a7
	jmp uuid_00000000000de0a9
uuid_00000000000de0a7:
	push %RBP
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq $0
	push %RBP
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de0a1
	jmp uuid_00000000000de0a3
uuid_00000000000de0a1:
	push %RBP
	jmp uuid_00000000000de09e
	jmp uuid_00000000000de0a0
uuid_00000000000de09e:
	push %RBP
	jmp uuid_00000000000de09b
	jmp uuid_00000000000de09d
uuid_00000000000de09b:
	push %RBP
	mov -464(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de098
	jmp uuid_00000000000de09a
uuid_00000000000de098:
	movb $1, -520(%rbp)
uuid_00000000000de09a:
	mov -552(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000de09d:
	mov -544(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000de0a0:
	mov -536(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000de0a3:
	mov -528(%RBP),%RSP
	add $-560, %RSP
	mov -520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de0a4
	jmp uuid_00000000000de0a6
uuid_00000000000de0a4:
	movb $1, -360(%rbp)
uuid_00000000000de0a6:
	mov -456(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000de0a9:
	mov -376(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000de0ac:
	mov -368(%RBP),%RSP
	add $-560, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de0bc
	jmp uuid_00000000000de0be
uuid_00000000000de0bc:
	push %RBP
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq -240(%RBP)
	pushq $0
	push %RBP
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de0b6
	jmp uuid_00000000000de0b8
uuid_00000000000de0b6:
	push %RBP
	jmp uuid_00000000000de0b3
	jmp uuid_00000000000de0b5
uuid_00000000000de0b3:
	push %RBP
	jmp uuid_00000000000de0b0
	jmp uuid_00000000000de0b2
uuid_00000000000de0b0:
	push %RBP
	mov -576(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de0ad
	jmp uuid_00000000000de0af
uuid_00000000000de0ad:
	movb $1, -632(%rbp)
uuid_00000000000de0af:
	mov -664(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000de0b2:
	mov -656(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000de0b5:
	mov -648(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000de0b8:
	mov -640(%RBP),%RSP
	add $-672, %RSP
	mov -632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de0b9
	jmp uuid_00000000000de0bb
uuid_00000000000de0b9:
	movb $1, -264(%rbp)
uuid_00000000000de0bb:
	mov -568(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000de0be:
	mov -280(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000de0c1:
	mov -272(%RBP),%RSP
	add $-672, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de0c6
	push %RBP
	jmp uuid_00000000000de0c3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de0c2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de0c5
uuid_00000000000de0c3:
uuid_00000000000de0c5:
	mov -680(%RBP),%RSP
	add $-680, %RSP
	jmp uuid_00000000000de0c8
uuid_00000000000de0c6:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -560(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -448(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -408(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -400(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -392(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000de0c8:
	mov -184(%RBP),%RSP
	add $-672, %RSP
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
#call function parse-one-expression : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call parse_SB_one_SB_expression_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq $0
	push %RBP
	mov -1128(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de0dc
	jmp uuid_00000000000de0de
uuid_00000000000de0dc:
	push %RBP
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	jmp uuid_00000000000de0d9
	jmp uuid_00000000000de0db
uuid_00000000000de0d9:
	push %RBP
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq $0
	push %RBP
	mov -1304(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de0d3
	jmp uuid_00000000000de0d5
uuid_00000000000de0d3:
	push %RBP
	jmp uuid_00000000000de0d0
	jmp uuid_00000000000de0d2
uuid_00000000000de0d0:
	push %RBP
	mov -1240(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1344(%rbp)
	pushq $uuid_00000000000db18a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de0cd
	jmp uuid_00000000000de0cf
uuid_00000000000de0cd:
	movb $1, -1312(%rbp)
uuid_00000000000de0cf:
	mov -1336(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000de0d2:
	mov -1328(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000de0d5:
	mov -1320(%RBP),%RSP
	add $-1344, %RSP
	mov -1312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de0d6
	jmp uuid_00000000000de0d8
uuid_00000000000de0d6:
	movb $1, -1136(%rbp)
uuid_00000000000de0d8:
	mov -1232(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000de0db:
	mov -1152(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000de0de:
	mov -1144(%RBP),%RSP
	add $-1344, %RSP
	mov -1136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de0f9
	push %RBP
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq $0
	push %RBP
	mov -1504(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de0f2
	jmp uuid_00000000000de0f4
uuid_00000000000de0f2:
	push %RBP
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	jmp uuid_00000000000de0ef
	jmp uuid_00000000000de0f1
uuid_00000000000de0ef:
	push %RBP
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	jmp uuid_00000000000de0ec
	jmp uuid_00000000000de0ee
uuid_00000000000de0ec:
	movb $1, -1512(%rbp)
uuid_00000000000de0ee:
	mov -1608(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000de0f1:
	mov -1528(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000de0f4:
	mov -1520(%RBP),%RSP
	add $-1680, %RSP
	mov -1512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de0f6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de0f5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de0f8
uuid_00000000000de0f6:
	movq -1680(%rbp), %r15
	movq %r15, -744(%rbp)
	movq -1672(%rbp), %r15
	movq %r15, -736(%rbp)
	movq -1664(%rbp), %r15
	movq %r15, -728(%rbp)
	movq -1656(%rbp), %r15
	movq %r15, -720(%rbp)
	movq -1648(%rbp), %r15
	movq %r15, -712(%rbp)
	movq -1640(%rbp), %r15
	movq %r15, -704(%rbp)
	movq -1632(%rbp), %r15
	movq %r15, -696(%rbp)
	movq -1624(%rbp), %r15
	movq %r15, -688(%rbp)
	movq -1616(%rbp), %r15
	movq %r15, -680(%rbp)
	movq -1600(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1592(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1584(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1576(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1568(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1560(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1552(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1544(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1536(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000de0f8:
	mov -1352(%RBP),%RSP
	add $-1680, %RSP
	jmp uuid_00000000000de0fb
uuid_00000000000de0f9:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq $0
	push %RBP
	mov -1656(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de0e5
	jmp uuid_00000000000de0e7
uuid_00000000000de0e5:
	push %RBP
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	jmp uuid_00000000000de0e2
	jmp uuid_00000000000de0e4
uuid_00000000000de0e2:
	push %RBP
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	jmp uuid_00000000000de0df
	jmp uuid_00000000000de0e1
uuid_00000000000de0df:
	movb $1, -1664(%rbp)
uuid_00000000000de0e1:
	mov -1760(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000de0e4:
	mov -1680(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000de0e7:
	mov -1672(%RBP),%RSP
	add $-1832, %RSP
	mov -1664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de0e9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de0e8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de0eb
uuid_00000000000de0e9:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $9
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $5
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	movq -1752(%rbp), %r15
	movq %r15, -816(%rbp)
	movq -1744(%rbp), %r15
	movq %r15, -808(%rbp)
	movq -1736(%rbp), %r15
	movq %r15, -800(%rbp)
	movq -1728(%rbp), %r15
	movq %r15, -792(%rbp)
	movq -1720(%rbp), %r15
	movq %r15, -784(%rbp)
	movq -1712(%rbp), %r15
	movq %r15, -776(%rbp)
	movq -1704(%rbp), %r15
	movq %r15, -768(%rbp)
	movq -1696(%rbp), %r15
	movq %r15, -760(%rbp)
	movq -1688(%rbp), %r15
	movq %r15, -752(%rbp)
uuid_00000000000de0eb:
	mov -1504(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000de0fb:
	mov -976(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000de138:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de139
	jmp uuid_00000000000de13a
uuid_00000000000de139:
#call function parse-one-expression : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call parse_SB_one_SB_expression_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq $0
	push %RBP
	mov -2144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de10b
	jmp uuid_00000000000de10d
uuid_00000000000de10b:
	push %RBP
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	jmp uuid_00000000000de108
	jmp uuid_00000000000de10a
uuid_00000000000de108:
	push %RBP
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	pushq -2032(%RBP)
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq $0
	push %RBP
	mov -2320(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de102
	jmp uuid_00000000000de104
uuid_00000000000de102:
	push %RBP
	jmp uuid_00000000000de0ff
	jmp uuid_00000000000de101
uuid_00000000000de0ff:
	push %RBP
	mov -2256(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2360(%rbp)
	pushq $uuid_00000000000db18a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de0fc
	jmp uuid_00000000000de0fe
uuid_00000000000de0fc:
	movb $1, -2328(%rbp)
uuid_00000000000de0fe:
	mov -2352(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000de101:
	mov -2344(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000de104:
	mov -2336(%RBP),%RSP
	add $-2360, %RSP
	mov -2328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de105
	jmp uuid_00000000000de107
uuid_00000000000de105:
	movb $1, -2152(%rbp)
uuid_00000000000de107:
	mov -2248(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000de10a:
	mov -2168(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000de10d:
	mov -2160(%RBP),%RSP
	add $-2360, %RSP
	mov -2152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de135
	push %RBP
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq $0
	push %RBP
	mov -2520(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de121
	jmp uuid_00000000000de123
uuid_00000000000de121:
	push %RBP
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	mov -2616(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de11e
	jmp uuid_00000000000de120
uuid_00000000000de11e:
	push %RBP
	pushq -2376(%RBP)
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	jmp uuid_00000000000de11b
	jmp uuid_00000000000de11d
uuid_00000000000de11b:
	movb $1, -2528(%rbp)
uuid_00000000000de11d:
	mov -2624(%RBP),%RSP
	add $-2696, %RSP
uuid_00000000000de120:
	mov -2544(%RBP),%RSP
	add $-2696, %RSP
uuid_00000000000de123:
	mov -2536(%RBP),%RSP
	add $-2696, %RSP
	mov -2528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de132
	push %RBP
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq $0
	push %RBP
	mov -2856(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de12b
	jmp uuid_00000000000de12d
uuid_00000000000de12b:
	push %RBP
	pushq -2784(%RBP)
	pushq -2792(%RBP)
	pushq -2800(%RBP)
	pushq -2808(%RBP)
	pushq -2816(%RBP)
	pushq -2824(%RBP)
	pushq -2832(%RBP)
	pushq -2840(%RBP)
	pushq -2848(%RBP)
	jmp uuid_00000000000de128
	jmp uuid_00000000000de12a
uuid_00000000000de128:
	push %RBP
	pushq -2712(%RBP)
	pushq -2720(%RBP)
	pushq -2728(%RBP)
	pushq -2736(%RBP)
	pushq -2744(%RBP)
	pushq -2752(%RBP)
	pushq -2760(%RBP)
	pushq -2768(%RBP)
	pushq -2776(%RBP)
	jmp uuid_00000000000de125
	jmp uuid_00000000000de127
uuid_00000000000de125:
	movb $1, -2864(%rbp)
uuid_00000000000de127:
	mov -2960(%RBP),%RSP
	add $-3032, %RSP
uuid_00000000000de12a:
	mov -2880(%RBP),%RSP
	add $-3032, %RSP
uuid_00000000000de12d:
	mov -2872(%RBP),%RSP
	add $-3032, %RSP
	mov -2864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de12f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de12e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de131
uuid_00000000000de12f:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2968(%rbp)
	pushq -2976(%rbp)
	pushq -2984(%rbp)
	pushq -2992(%rbp)
	pushq -3000(%rbp)
	pushq -3008(%rbp)
	pushq -3016(%rbp)
	pushq -3024(%rbp)
	pushq -3032(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	movq -2952(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2944(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -2936(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -2928(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -2920(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -2912(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -2904(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -2896(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -2888(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000de131:
	mov -2704(%RBP),%RSP
	add $-3032, %RSP
	jmp uuid_00000000000de134
uuid_00000000000de132:
#call function parse-expect : Arrow<Cons<String,List<Token>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de124
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call parse_SB_expect_CL_ArrowNilConsListTokenString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000de134:
	mov -2368(%RBP),%RSP
	add $-2696, %RSP
	jmp uuid_00000000000de137
uuid_00000000000de135:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	pushq -2408(%rbp)
	pushq -2416(%rbp)
	pushq -2424(%rbp)
	pushq -2432(%rbp)
	pushq -2440(%rbp)
	pushq -2448(%rbp)
	pushq -2456(%rbp)
	pushq -2464(%rbp)
	pushq -2472(%rbp)
	pushq -2480(%rbp)
	pushq -2488(%rbp)
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	pushq -2512(%rbp)
	pushq $0
	push %RBP
	mov -2672(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de114
	jmp uuid_00000000000de116
uuid_00000000000de114:
	push %RBP
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	pushq -2624(%RBP)
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	pushq -2656(%RBP)
	pushq -2664(%RBP)
	jmp uuid_00000000000de111
	jmp uuid_00000000000de113
uuid_00000000000de111:
	push %RBP
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq -2560(%RBP)
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq -2592(%RBP)
	jmp uuid_00000000000de10e
	jmp uuid_00000000000de110
uuid_00000000000de10e:
	movb $1, -2680(%rbp)
uuid_00000000000de110:
	mov -2776(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000de113:
	mov -2696(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000de116:
	mov -2688(%RBP),%RSP
	add $-2848, %RSP
	mov -2680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de118
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de117
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de11a
uuid_00000000000de118:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2784(%rbp)
	pushq -2792(%rbp)
	pushq -2800(%rbp)
	pushq -2808(%rbp)
	pushq -2816(%rbp)
	pushq -2824(%rbp)
	pushq -2832(%rbp)
	pushq -2840(%rbp)
	pushq -2848(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $5
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	movq -2768(%rbp), %r15
	movq %r15, -816(%rbp)
	movq -2760(%rbp), %r15
	movq %r15, -808(%rbp)
	movq -2752(%rbp), %r15
	movq %r15, -800(%rbp)
	movq -2744(%rbp), %r15
	movq %r15, -792(%rbp)
	movq -2736(%rbp), %r15
	movq %r15, -784(%rbp)
	movq -2728(%rbp), %r15
	movq %r15, -776(%rbp)
	movq -2720(%rbp), %r15
	movq %r15, -768(%rbp)
	movq -2712(%rbp), %r15
	movq %r15, -760(%rbp)
	movq -2704(%rbp), %r15
	movq %r15, -752(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000de11a:
	mov -2520(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000de137:
	mov -1992(%RBP),%RSP
	add $-2848, %RSP
	add $152, %rsp
	add $152, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $152, %rsp
	add $152, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000de138
uuid_00000000000de13a:
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq $0
	subq $152, %rsp
	pushq -1984(%rbp)
	pushq -1976(%rbp)
	pushq -1968(%rbp)
	pushq -1960(%rbp)
	pushq -1952(%rbp)
	pushq -1944(%rbp)
	pushq -1936(%rbp)
	pushq -1928(%rbp)
	pushq -1920(%rbp)
	pushq -1912(%rbp)
	pushq -1904(%rbp)
	pushq -1896(%rbp)
	pushq -1888(%rbp)
	pushq -1880(%rbp)
	pushq -1872(%rbp)
	pushq -1864(%rbp)
	pushq -1856(%rbp)
	pushq -1848(%rbp)
	pushq -1840(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000de18a:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de18b
	jmp uuid_00000000000de18c
uuid_00000000000de18b:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de155
	jmp uuid_00000000000de157
uuid_00000000000de155:
	push %RBP
	mov -368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de152
	jmp uuid_00000000000de154
uuid_00000000000de152:
	push %RBP
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de14c
	jmp uuid_00000000000de14e
uuid_00000000000de14c:
	push %RBP
	jmp uuid_00000000000de149
	jmp uuid_00000000000de14b
uuid_00000000000de149:
	push %RBP
	jmp uuid_00000000000de146
	jmp uuid_00000000000de148
uuid_00000000000de146:
	push %RBP
	mov -488(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -584(%rbp)
	pushq $uuid_00000000000db0f9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de143
	jmp uuid_00000000000de145
uuid_00000000000de143:
	movb $1, -544(%rbp)
uuid_00000000000de145:
	mov -576(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000de148:
	mov -568(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000de14b:
	mov -560(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000de14e:
	mov -552(%RBP),%RSP
	add $-584, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de14f
	jmp uuid_00000000000de151
uuid_00000000000de14f:
	movb $1, -384(%rbp)
uuid_00000000000de151:
	mov -480(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000de154:
	mov -400(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000de157:
	mov -392(%RBP),%RSP
	add $-584, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de187
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de16a
	jmp uuid_00000000000de16c
uuid_00000000000de16a:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de167
	jmp uuid_00000000000de169
uuid_00000000000de167:
	push %RBP
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq $0
	push %RBP
	mov -824(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de161
	jmp uuid_00000000000de163
uuid_00000000000de161:
	push %RBP
	jmp uuid_00000000000de15e
	jmp uuid_00000000000de160
uuid_00000000000de15e:
	push %RBP
	jmp uuid_00000000000de15b
	jmp uuid_00000000000de15d
uuid_00000000000de15b:
	push %RBP
	mov -776(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -872(%rbp)
	pushq $uuid_00000000000dae19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de158
	jmp uuid_00000000000de15a
uuid_00000000000de158:
	movb $1, -832(%rbp)
uuid_00000000000de15a:
	mov -864(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000de15d:
	mov -856(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000de160:
	mov -848(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000de163:
	mov -840(%RBP),%RSP
	add $-872, %RSP
	mov -832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de164
	jmp uuid_00000000000de166
uuid_00000000000de164:
	movb $1, -672(%rbp)
uuid_00000000000de166:
	mov -768(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000de169:
	mov -688(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000de16c:
	mov -680(%RBP),%RSP
	add $-872, %RSP
	mov -672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de184
	push %RBP
	jmp uuid_00000000000de181
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de180
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de183
uuid_00000000000de181:
#call function parse-one-expression : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call parse_SB_one_SB_expression_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq $0
	push %RBP
	mov -1192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de176
	jmp uuid_00000000000de178
uuid_00000000000de176:
	push %RBP
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	pushq -1152(%RBP)
	pushq -1160(%RBP)
	pushq -1168(%RBP)
	pushq -1176(%RBP)
	pushq -1184(%RBP)
	jmp uuid_00000000000de173
	jmp uuid_00000000000de175
uuid_00000000000de173:
	push %RBP
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	jmp uuid_00000000000de170
	jmp uuid_00000000000de172
uuid_00000000000de170:
	movb $1, -1200(%rbp)
uuid_00000000000de172:
	mov -1296(%RBP),%RSP
	add $-1368, %RSP
uuid_00000000000de175:
	mov -1216(%RBP),%RSP
	add $-1368, %RSP
uuid_00000000000de178:
	mov -1208(%RBP),%RSP
	add $-1368, %RSP
	mov -1200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de17d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de17c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de17f
uuid_00000000000de17d:
	push %RBP
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de179
	movq -1368(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1360(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1352(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1344(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1336(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1328(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1320(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1312(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1304(%rbp), %r15
	movq %r15, -88(%rbp)
	jmp uuid_00000000000de17b
uuid_00000000000de179:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000de17b:
	mov -1376(%RBP),%RSP
	add $-1376, %RSP
	movq -1288(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000de17f:
	mov -1040(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000de183:
	mov -880(%RBP),%RSP
	add $-1376, %RSP
	jmp uuid_00000000000de186
uuid_00000000000de184:
	push %RBP
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de16d
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $9
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	jmp uuid_00000000000de16f
uuid_00000000000de16d:
uuid_00000000000de16f:
	mov -880(%RBP),%RSP
	add $-880, %RSP
	movq -760(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -696(%rbp), %r15
	movq %r15, -160(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000de186:
	mov -592(%RBP),%RSP
	add $-880, %RSP
	jmp uuid_00000000000de189
uuid_00000000000de187:
	movq -72(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -64(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -56(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -48(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -40(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -32(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -24(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -160(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000de189:
	mov -304(%RBP),%RSP
	add $-584, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000de18a
uuid_00000000000de18c:
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	subq $152, %rsp
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
parse_SB_one_SB_expression_CL_ArrowParsePartialListToken:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de229
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de1a7
	jmp uuid_00000000000de1a9
uuid_00000000000de1a7:
	push %RBP
	mov -448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de1a4
	jmp uuid_00000000000de1a6
uuid_00000000000de1a4:
	push %RBP
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de19e
	jmp uuid_00000000000de1a0
uuid_00000000000de19e:
	push %RBP
	jmp uuid_00000000000de19b
	jmp uuid_00000000000de19d
uuid_00000000000de19b:
	push %RBP
	jmp uuid_00000000000de198
	jmp uuid_00000000000de19a
uuid_00000000000de198:
	push %RBP
	mov -568(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -664(%rbp)
	pushq $uuid_00000000000db0fc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de195
	jmp uuid_00000000000de197
uuid_00000000000de195:
	movb $1, -624(%rbp)
uuid_00000000000de197:
	mov -656(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000de19a:
	mov -648(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000de19d:
	mov -640(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000de1a0:
	mov -632(%RBP),%RSP
	add $-664, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de1a1
	jmp uuid_00000000000de1a3
uuid_00000000000de1a1:
	movb $1, -464(%rbp)
uuid_00000000000de1a3:
	mov -560(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000de1a6:
	mov -480(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000de1a9:
	mov -472(%RBP),%RSP
	add $-664, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de226
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -744(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de1c9
	jmp uuid_00000000000de1cb
uuid_00000000000de1c9:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de1c6
	jmp uuid_00000000000de1c8
uuid_00000000000de1c6:
	push %RBP
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq $0
	push %RBP
	mov -904(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de1c0
	jmp uuid_00000000000de1c2
uuid_00000000000de1c0:
	push %RBP
	jmp uuid_00000000000de1bd
	jmp uuid_00000000000de1bf
uuid_00000000000de1bd:
	push %RBP
	jmp uuid_00000000000de1ba
	jmp uuid_00000000000de1bc
uuid_00000000000de1ba:
	push %RBP
	mov -856(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -952(%rbp)
	pushq $uuid_00000000000dae19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de1b7
	jmp uuid_00000000000de1b9
uuid_00000000000de1b7:
	movb $1, -912(%rbp)
uuid_00000000000de1b9:
	mov -944(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000de1bc:
	mov -936(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000de1bf:
	mov -928(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000de1c2:
	mov -920(%RBP),%RSP
	add $-952, %RSP
	mov -912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de1c3
	jmp uuid_00000000000de1c5
uuid_00000000000de1c3:
	movb $1, -752(%rbp)
uuid_00000000000de1c5:
	mov -848(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000de1c8:
	mov -768(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000de1cb:
	mov -760(%RBP),%RSP
	add $-952, %RSP
	mov -752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de223
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -1032(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de1df
	jmp uuid_00000000000de1e1
uuid_00000000000de1df:
	push %RBP
	mov -1024(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de1dc
	jmp uuid_00000000000de1de
uuid_00000000000de1dc:
	push %RBP
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq $0
	push %RBP
	mov -1192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de1d6
	jmp uuid_00000000000de1d8
uuid_00000000000de1d6:
	push %RBP
	jmp uuid_00000000000de1d3
	jmp uuid_00000000000de1d5
uuid_00000000000de1d3:
	push %RBP
	jmp uuid_00000000000de1d0
	jmp uuid_00000000000de1d2
uuid_00000000000de1d0:
	push %RBP
	mov -1144(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1240(%rbp)
	pushq $uuid_00000000000dae17
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de1cd
	jmp uuid_00000000000de1cf
uuid_00000000000de1cd:
	movb $1, -1200(%rbp)
uuid_00000000000de1cf:
	mov -1232(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000de1d2:
	mov -1224(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000de1d5:
	mov -1216(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000de1d8:
	mov -1208(%RBP),%RSP
	add $-1240, %RSP
	mov -1200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de1d9
	jmp uuid_00000000000de1db
uuid_00000000000de1d9:
	movb $1, -1040(%rbp)
uuid_00000000000de1db:
	mov -1136(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000de1de:
	mov -1056(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000de1e1:
	mov -1048(%RBP),%RSP
	add $-1240, %RSP
	mov -1040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de220
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -1320(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de20a
	jmp uuid_00000000000de20c
uuid_00000000000de20a:
	push %RBP
	mov -1312(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1416(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de1f5
	jmp uuid_00000000000de1f7
uuid_00000000000de1f5:
	push %RBP
	mov -1408(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de1f2
	jmp uuid_00000000000de1f4
uuid_00000000000de1f2:
	push %RBP
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	jmp uuid_00000000000de1ef
	jmp uuid_00000000000de1f1
uuid_00000000000de1ef:
	movb $1, -1424(%rbp)
uuid_00000000000de1f1:
	mov -1520(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000de1f4:
	mov -1440(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000de1f7:
	mov -1432(%RBP),%RSP
	add $-1576, %RSP
	mov -1424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de207
	jmp uuid_00000000000de209
uuid_00000000000de207:
	push %RBP
	pushq -1256(%RBP)
	pushq -1264(%RBP)
	pushq -1272(%RBP)
	pushq -1280(%RBP)
	pushq -1288(%RBP)
	pushq -1296(%RBP)
	pushq -1304(%RBP)
	pushq $0
	push %RBP
	mov -1640(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de201
	jmp uuid_00000000000de203
uuid_00000000000de201:
	push %RBP
	jmp uuid_00000000000de1fe
	jmp uuid_00000000000de200
uuid_00000000000de1fe:
	push %RBP
	jmp uuid_00000000000de1fb
	jmp uuid_00000000000de1fd
uuid_00000000000de1fb:
	push %RBP
	mov -1592(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1688(%rbp)
	pushq $uuid_00000000000db0fb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de1f8
	jmp uuid_00000000000de1fa
uuid_00000000000de1f8:
	movb $1, -1648(%rbp)
uuid_00000000000de1fa:
	mov -1680(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000de1fd:
	mov -1672(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000de200:
	mov -1664(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000de203:
	mov -1656(%RBP),%RSP
	add $-1688, %RSP
	mov -1648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de204
	jmp uuid_00000000000de206
uuid_00000000000de204:
	movb $1, -1328(%rbp)
uuid_00000000000de206:
	mov -1584(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000de209:
	mov -1344(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000de20c:
	mov -1336(%RBP),%RSP
	add $-1688, %RSP
	mov -1328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de21d
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -1768(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de213
	jmp uuid_00000000000de215
uuid_00000000000de213:
	push %RBP
	mov -1760(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de210
	jmp uuid_00000000000de212
uuid_00000000000de210:
	push %RBP
	pushq -1704(%RBP)
	pushq -1712(%RBP)
	pushq -1720(%RBP)
	pushq -1728(%RBP)
	pushq -1736(%RBP)
	pushq -1744(%RBP)
	pushq -1752(%RBP)
	jmp uuid_00000000000de20d
	jmp uuid_00000000000de20f
uuid_00000000000de20d:
	movb $1, -1776(%rbp)
uuid_00000000000de20f:
	mov -1872(%RBP),%RSP
	add $-1928, %RSP
uuid_00000000000de212:
	mov -1792(%RBP),%RSP
	add $-1928, %RSP
uuid_00000000000de215:
	mov -1784(%RBP),%RSP
	add $-1928, %RSP
	mov -1776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de21a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de219
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de21c
uuid_00000000000de21a:
	push %RBP
#call function is-variable : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -1880(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call is_SB_variable_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de216
	mov -1880(%RBP), %RAX
	push %RAX
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq $6
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	jmp uuid_00000000000de218
uuid_00000000000de216:
	mov -1880(%RBP), %RAX
	push %RAX
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq $7
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000de218:
	mov -1936(%RBP),%RSP
	add $-1936, %RSP
	movq -1864(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1856(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1848(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1840(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1832(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1824(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1816(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1808(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1800(%rbp), %r15
	movq %r15, -160(%rbp)
uuid_00000000000de21c:
	mov -1696(%RBP),%RSP
	add $-1936, %RSP
	jmp uuid_00000000000de21f
uuid_00000000000de21d:
	mov -1528(%RBP), %RAX
	push %RAX
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq $6
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -1512(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1504(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -160(%rbp)
uuid_00000000000de21f:
	mov -1248(%RBP),%RSP
	add $-1688, %RSP
	jmp uuid_00000000000de222
uuid_00000000000de220:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq $0
	push %RBP
	mov -1552(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de1e8
	jmp uuid_00000000000de1ea
uuid_00000000000de1e8:
	push %RBP
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	jmp uuid_00000000000de1e5
	jmp uuid_00000000000de1e7
uuid_00000000000de1e5:
	push %RBP
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	jmp uuid_00000000000de1e2
	jmp uuid_00000000000de1e4
uuid_00000000000de1e2:
	movb $1, -1560(%rbp)
uuid_00000000000de1e4:
	mov -1656(%RBP),%RSP
	add $-1728, %RSP
uuid_00000000000de1e7:
	mov -1576(%RBP),%RSP
	add $-1728, %RSP
uuid_00000000000de1ea:
	mov -1568(%RBP),%RSP
	add $-1728, %RSP
	mov -1560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de1ec
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de1eb
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de1ee
uuid_00000000000de1ec:
	movq -1728(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1720(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1712(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1704(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1696(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1688(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1680(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1672(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1664(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1648(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1640(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1632(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1624(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1616(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1608(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1600(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1592(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1584(%rbp), %r15
	movq %r15, -160(%rbp)
uuid_00000000000de1ee:
	mov -1400(%RBP),%RSP
	add $-1728, %RSP
uuid_00000000000de222:
	mov -960(%RBP),%RSP
	add $-1728, %RSP
	jmp uuid_00000000000de225
uuid_00000000000de223:
#call function parse-unexpect : Arrow<Cons<String,List<Token>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de1cc
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call parse_SB_unexpect_CL_ArrowNilConsListTokenString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000de225:
	mov -672(%RBP),%RSP
	add $-952, %RSP
	jmp uuid_00000000000de228
uuid_00000000000de226:
#call function parse-lambda : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	mov %RBX, %RBP
	call parse_SB_lambda_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq $0
	push %RBP
	mov -976(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de1b0
	jmp uuid_00000000000de1b2
uuid_00000000000de1b0:
	push %RBP
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	pushq -944(%RBP)
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	jmp uuid_00000000000de1ad
	jmp uuid_00000000000de1af
uuid_00000000000de1ad:
	push %RBP
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	pushq -888(%RBP)
	pushq -896(%RBP)
	jmp uuid_00000000000de1aa
	jmp uuid_00000000000de1ac
uuid_00000000000de1aa:
	movb $1, -984(%rbp)
uuid_00000000000de1ac:
	mov -1080(%RBP),%RSP
	add $-1152, %RSP
uuid_00000000000de1af:
	mov -1000(%RBP),%RSP
	add $-1152, %RSP
uuid_00000000000de1b2:
	mov -992(%RBP),%RSP
	add $-1152, %RSP
	mov -984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de1b4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de1b3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de1b6
uuid_00000000000de1b4:
	movq -1152(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -160(%rbp)
uuid_00000000000de1b6:
	mov -824(%RBP),%RSP
	add $-1152, %RSP
uuid_00000000000de228:
	mov -384(%RBP),%RSP
	add $-1152, %RSP
	jmp uuid_00000000000de22b
uuid_00000000000de229:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $9
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
uuid_00000000000de22b:
	mov -304(%RBP),%RSP
	add $-376, %RSP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	subq $152, %rsp
	pushq -528(%rbp)
	pushq -520(%rbp)
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
parse_SB_toplevel_CL_ArrowASTListToken:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
uuid_00000000000de481:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de482
	jmp uuid_00000000000de483
uuid_00000000000de482:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de242
	jmp uuid_00000000000de244
uuid_00000000000de242:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de23f
	jmp uuid_00000000000de241
uuid_00000000000de23f:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	pushq -280(%RBP)
	pushq -288(%RBP)
	pushq $0
	push %RBP
	mov -464(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de239
	jmp uuid_00000000000de23b
uuid_00000000000de239:
	push %RBP
	jmp uuid_00000000000de236
	jmp uuid_00000000000de238
uuid_00000000000de236:
	push %RBP
	jmp uuid_00000000000de233
	jmp uuid_00000000000de235
uuid_00000000000de233:
	push %RBP
	mov -416(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -512(%rbp)
	pushq $uuid_00000000000db0f9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de230
	jmp uuid_00000000000de232
uuid_00000000000de230:
	movb $1, -472(%rbp)
uuid_00000000000de232:
	mov -504(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000de235:
	mov -496(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000de238:
	mov -488(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000de23b:
	mov -480(%RBP),%RSP
	add $-512, %RSP
	mov -472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de23c
	jmp uuid_00000000000de23e
uuid_00000000000de23c:
	movb $1, -312(%rbp)
uuid_00000000000de23e:
	mov -408(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000de241:
	mov -328(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000de244:
	mov -320(%RBP),%RSP
	add $-512, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de47e
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -592(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de258
	jmp uuid_00000000000de25a
uuid_00000000000de258:
	push %RBP
	mov -584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de255
	jmp uuid_00000000000de257
uuid_00000000000de255:
	push %RBP
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de24f
	jmp uuid_00000000000de251
uuid_00000000000de24f:
	push %RBP
	jmp uuid_00000000000de24c
	jmp uuid_00000000000de24e
uuid_00000000000de24c:
	push %RBP
	jmp uuid_00000000000de249
	jmp uuid_00000000000de24b
uuid_00000000000de249:
	push %RBP
	mov -704(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -800(%rbp)
	pushq $uuid_00000000000de245
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de246
	jmp uuid_00000000000de248
uuid_00000000000de246:
	movb $1, -760(%rbp)
uuid_00000000000de248:
	mov -792(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000de24b:
	mov -784(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000de24e:
	mov -776(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000de251:
	mov -768(%RBP),%RSP
	add $-800, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de252
	jmp uuid_00000000000de254
uuid_00000000000de252:
	movb $1, -600(%rbp)
uuid_00000000000de254:
	mov -696(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000de257:
	mov -616(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000de25a:
	mov -608(%RBP),%RSP
	add $-800, %RSP
	mov -600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de47b
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de298
	jmp uuid_00000000000de29a
uuid_00000000000de298:
	push %RBP
	mov -872(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de295
	jmp uuid_00000000000de297
uuid_00000000000de295:
	push %RBP
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq $0
	push %RBP
	mov -1040(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de28f
	jmp uuid_00000000000de291
uuid_00000000000de28f:
	push %RBP
	jmp uuid_00000000000de28c
	jmp uuid_00000000000de28e
uuid_00000000000de28c:
	push %RBP
	jmp uuid_00000000000de289
	jmp uuid_00000000000de28b
uuid_00000000000de289:
	push %RBP
	mov -992(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1088(%rbp)
	pushq $uuid_00000000000de285
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de286
	jmp uuid_00000000000de288
uuid_00000000000de286:
	movb $1, -1048(%rbp)
uuid_00000000000de288:
	mov -1080(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000de28b:
	mov -1072(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000de28e:
	mov -1064(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000de291:
	mov -1056(%RBP),%RSP
	add $-1088, %RSP
	mov -1048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de292
	jmp uuid_00000000000de294
uuid_00000000000de292:
	movb $1, -888(%rbp)
uuid_00000000000de294:
	mov -984(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000de297:
	mov -904(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000de29a:
	mov -896(%RBP),%RSP
	add $-1088, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de478
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1168(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de2d1
	jmp uuid_00000000000de2d3
uuid_00000000000de2d1:
	push %RBP
	mov -1160(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1264(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de2bb
	jmp uuid_00000000000de2bd
uuid_00000000000de2bb:
	push %RBP
	mov -1256(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de2b8
	jmp uuid_00000000000de2ba
uuid_00000000000de2b8:
	push %RBP
	pushq -1200(%RBP)
	pushq -1208(%RBP)
	pushq -1216(%RBP)
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	pushq $0
	push %RBP
	mov -1424(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de2b2
	jmp uuid_00000000000de2b4
uuid_00000000000de2b2:
	push %RBP
	jmp uuid_00000000000de2af
	jmp uuid_00000000000de2b1
uuid_00000000000de2af:
	push %RBP
	jmp uuid_00000000000de2ac
	jmp uuid_00000000000de2ae
uuid_00000000000de2ac:
	push %RBP
	mov -1376(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq $uuid_00000000000de2a8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de2a9
	jmp uuid_00000000000de2ab
uuid_00000000000de2a9:
	movb $1, -1432(%rbp)
uuid_00000000000de2ab:
	mov -1464(%RBP),%RSP
	add $-1472, %RSP
uuid_00000000000de2ae:
	mov -1456(%RBP),%RSP
	add $-1472, %RSP
uuid_00000000000de2b1:
	mov -1448(%RBP),%RSP
	add $-1472, %RSP
uuid_00000000000de2b4:
	mov -1440(%RBP),%RSP
	add $-1472, %RSP
	mov -1432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de2b5
	jmp uuid_00000000000de2b7
uuid_00000000000de2b5:
	movb $1, -1272(%rbp)
uuid_00000000000de2b7:
	mov -1368(%RBP),%RSP
	add $-1472, %RSP
uuid_00000000000de2ba:
	mov -1288(%RBP),%RSP
	add $-1472, %RSP
uuid_00000000000de2bd:
	mov -1280(%RBP),%RSP
	add $-1472, %RSP
	mov -1272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de2ce
	jmp uuid_00000000000de2d0
uuid_00000000000de2ce:
	push %RBP
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	pushq -1152(%RBP)
	pushq $0
	push %RBP
	mov -1536(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de2c8
	jmp uuid_00000000000de2ca
uuid_00000000000de2c8:
	push %RBP
	jmp uuid_00000000000de2c5
	jmp uuid_00000000000de2c7
uuid_00000000000de2c5:
	push %RBP
	jmp uuid_00000000000de2c2
	jmp uuid_00000000000de2c4
uuid_00000000000de2c2:
	push %RBP
	mov -1488(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1584(%rbp)
	pushq $uuid_00000000000de2be
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de2bf
	jmp uuid_00000000000de2c1
uuid_00000000000de2bf:
	movb $1, -1544(%rbp)
uuid_00000000000de2c1:
	mov -1576(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000de2c4:
	mov -1568(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000de2c7:
	mov -1560(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000de2ca:
	mov -1552(%RBP),%RSP
	add $-1584, %RSP
	mov -1544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de2cb
	jmp uuid_00000000000de2cd
uuid_00000000000de2cb:
	movb $1, -1176(%rbp)
uuid_00000000000de2cd:
	mov -1480(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000de2d0:
	mov -1192(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000de2d3:
	mov -1184(%RBP),%RSP
	add $-1584, %RSP
	mov -1176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de475
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de300
	jmp uuid_00000000000de302
uuid_00000000000de300:
	push %RBP
	mov -1656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de2fd
	jmp uuid_00000000000de2ff
uuid_00000000000de2fd:
	push %RBP
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	pushq $0
	push %RBP
	mov -1824(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de2f7
	jmp uuid_00000000000de2f9
uuid_00000000000de2f7:
	push %RBP
	jmp uuid_00000000000de2f4
	jmp uuid_00000000000de2f6
uuid_00000000000de2f4:
	push %RBP
	jmp uuid_00000000000de2f1
	jmp uuid_00000000000de2f3
uuid_00000000000de2f1:
	push %RBP
	mov -1776(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1872(%rbp)
	pushq $uuid_00000000000de2a8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de2ee
	jmp uuid_00000000000de2f0
uuid_00000000000de2ee:
	movb $1, -1832(%rbp)
uuid_00000000000de2f0:
	mov -1864(%RBP),%RSP
	add $-1872, %RSP
uuid_00000000000de2f3:
	mov -1856(%RBP),%RSP
	add $-1872, %RSP
uuid_00000000000de2f6:
	mov -1848(%RBP),%RSP
	add $-1872, %RSP
uuid_00000000000de2f9:
	mov -1840(%RBP),%RSP
	add $-1872, %RSP
	mov -1832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de2fa
	jmp uuid_00000000000de2fc
uuid_00000000000de2fa:
	movb $1, -1672(%rbp)
uuid_00000000000de2fc:
	mov -1768(%RBP),%RSP
	add $-1872, %RSP
uuid_00000000000de2ff:
	mov -1688(%RBP),%RSP
	add $-1872, %RSP
uuid_00000000000de302:
	mov -1680(%RBP),%RSP
	add $-1872, %RSP
	mov -1672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de472
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1952(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de370
	jmp uuid_00000000000de372
uuid_00000000000de370:
	push %RBP
	mov -1944(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2048(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de35a
	jmp uuid_00000000000de35c
uuid_00000000000de35a:
	push %RBP
	mov -2040(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de344
	jmp uuid_00000000000de346
uuid_00000000000de344:
	push %RBP
	mov -2136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de32f
	jmp uuid_00000000000de331
uuid_00000000000de32f:
	push %RBP
	mov -2232(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de32c
	jmp uuid_00000000000de32e
uuid_00000000000de32c:
	push %RBP
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	pushq -2224(%RBP)
	pushq $0
	push %RBP
	mov -2400(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de326
	jmp uuid_00000000000de328
uuid_00000000000de326:
	push %RBP
	jmp uuid_00000000000de323
	jmp uuid_00000000000de325
uuid_00000000000de323:
	push %RBP
	jmp uuid_00000000000de320
	jmp uuid_00000000000de322
uuid_00000000000de320:
	push %RBP
	mov -2352(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de31d
	jmp uuid_00000000000de31f
uuid_00000000000de31d:
	movb $1, -2408(%rbp)
uuid_00000000000de31f:
	mov -2440(%RBP),%RSP
	add $-2448, %RSP
uuid_00000000000de322:
	mov -2432(%RBP),%RSP
	add $-2448, %RSP
uuid_00000000000de325:
	mov -2424(%RBP),%RSP
	add $-2448, %RSP
uuid_00000000000de328:
	mov -2416(%RBP),%RSP
	add $-2448, %RSP
	mov -2408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de329
	jmp uuid_00000000000de32b
uuid_00000000000de329:
	movb $1, -2248(%rbp)
uuid_00000000000de32b:
	mov -2344(%RBP),%RSP
	add $-2448, %RSP
uuid_00000000000de32e:
	mov -2264(%RBP),%RSP
	add $-2448, %RSP
uuid_00000000000de331:
	mov -2256(%RBP),%RSP
	add $-2448, %RSP
	mov -2248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de341
	jmp uuid_00000000000de343
uuid_00000000000de341:
	push %RBP
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq $0
	push %RBP
	mov -2512(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de33b
	jmp uuid_00000000000de33d
uuid_00000000000de33b:
	push %RBP
	jmp uuid_00000000000de338
	jmp uuid_00000000000de33a
uuid_00000000000de338:
	push %RBP
	jmp uuid_00000000000de335
	jmp uuid_00000000000de337
uuid_00000000000de335:
	push %RBP
	mov -2464(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de332
	jmp uuid_00000000000de334
uuid_00000000000de332:
	movb $1, -2520(%rbp)
uuid_00000000000de334:
	mov -2552(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000de337:
	mov -2544(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000de33a:
	mov -2536(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000de33d:
	mov -2528(%RBP),%RSP
	add $-2560, %RSP
	mov -2520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de33e
	jmp uuid_00000000000de340
uuid_00000000000de33e:
	movb $1, -2152(%rbp)
uuid_00000000000de340:
	mov -2456(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000de343:
	mov -2168(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000de346:
	mov -2160(%RBP),%RSP
	add $-2560, %RSP
	mov -2152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de357
	jmp uuid_00000000000de359
uuid_00000000000de357:
	push %RBP
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	pushq -2032(%RBP)
	pushq $0
	push %RBP
	mov -2624(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de351
	jmp uuid_00000000000de353
uuid_00000000000de351:
	push %RBP
	jmp uuid_00000000000de34e
	jmp uuid_00000000000de350
uuid_00000000000de34e:
	push %RBP
	jmp uuid_00000000000de34b
	jmp uuid_00000000000de34d
uuid_00000000000de34b:
	push %RBP
	mov -2576(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2672(%rbp)
	pushq $uuid_00000000000de347
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de348
	jmp uuid_00000000000de34a
uuid_00000000000de348:
	movb $1, -2632(%rbp)
uuid_00000000000de34a:
	mov -2664(%RBP),%RSP
	add $-2672, %RSP
uuid_00000000000de34d:
	mov -2656(%RBP),%RSP
	add $-2672, %RSP
uuid_00000000000de350:
	mov -2648(%RBP),%RSP
	add $-2672, %RSP
uuid_00000000000de353:
	mov -2640(%RBP),%RSP
	add $-2672, %RSP
	mov -2632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de354
	jmp uuid_00000000000de356
uuid_00000000000de354:
	movb $1, -2056(%rbp)
uuid_00000000000de356:
	mov -2568(%RBP),%RSP
	add $-2672, %RSP
uuid_00000000000de359:
	mov -2072(%RBP),%RSP
	add $-2672, %RSP
uuid_00000000000de35c:
	mov -2064(%RBP),%RSP
	add $-2672, %RSP
	mov -2056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de36d
	jmp uuid_00000000000de36f
uuid_00000000000de36d:
	push %RBP
	pushq -1888(%RBP)
	pushq -1896(%RBP)
	pushq -1904(%RBP)
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq $0
	push %RBP
	mov -2736(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de367
	jmp uuid_00000000000de369
uuid_00000000000de367:
	push %RBP
	jmp uuid_00000000000de364
	jmp uuid_00000000000de366
uuid_00000000000de364:
	push %RBP
	jmp uuid_00000000000de361
	jmp uuid_00000000000de363
uuid_00000000000de361:
	push %RBP
	mov -2688(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2784(%rbp)
	pushq $uuid_00000000000de35d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de35e
	jmp uuid_00000000000de360
uuid_00000000000de35e:
	movb $1, -2744(%rbp)
uuid_00000000000de360:
	mov -2776(%RBP),%RSP
	add $-2784, %RSP
uuid_00000000000de363:
	mov -2768(%RBP),%RSP
	add $-2784, %RSP
uuid_00000000000de366:
	mov -2760(%RBP),%RSP
	add $-2784, %RSP
uuid_00000000000de369:
	mov -2752(%RBP),%RSP
	add $-2784, %RSP
	mov -2744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de36a
	jmp uuid_00000000000de36c
uuid_00000000000de36a:
	movb $1, -1960(%rbp)
uuid_00000000000de36c:
	mov -2680(%RBP),%RSP
	add $-2784, %RSP
uuid_00000000000de36f:
	mov -1976(%RBP),%RSP
	add $-2784, %RSP
uuid_00000000000de372:
	mov -1968(%RBP),%RSP
	add $-2784, %RSP
	mov -1960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de46f
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2864(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de3c0
	jmp uuid_00000000000de3c2
uuid_00000000000de3c0:
	push %RBP
	mov -2856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2960(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de3aa
	jmp uuid_00000000000de3ac
uuid_00000000000de3aa:
	push %RBP
	mov -2952(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3056(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de395
	jmp uuid_00000000000de397
uuid_00000000000de395:
	push %RBP
	mov -3048(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de392
	jmp uuid_00000000000de394
uuid_00000000000de392:
	push %RBP
	pushq -2992(%RBP)
	pushq -3000(%RBP)
	pushq -3008(%RBP)
	pushq -3016(%RBP)
	pushq -3024(%RBP)
	pushq -3032(%RBP)
	pushq -3040(%RBP)
	pushq $0
	push %RBP
	mov -3216(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de38c
	jmp uuid_00000000000de38e
uuid_00000000000de38c:
	push %RBP
	jmp uuid_00000000000de389
	jmp uuid_00000000000de38b
uuid_00000000000de389:
	push %RBP
	jmp uuid_00000000000de386
	jmp uuid_00000000000de388
uuid_00000000000de386:
	push %RBP
	mov -3168(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de383
	jmp uuid_00000000000de385
uuid_00000000000de383:
	movb $1, -3224(%rbp)
uuid_00000000000de385:
	mov -3256(%RBP),%RSP
	add $-3264, %RSP
uuid_00000000000de388:
	mov -3248(%RBP),%RSP
	add $-3264, %RSP
uuid_00000000000de38b:
	mov -3240(%RBP),%RSP
	add $-3264, %RSP
uuid_00000000000de38e:
	mov -3232(%RBP),%RSP
	add $-3264, %RSP
	mov -3224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de38f
	jmp uuid_00000000000de391
uuid_00000000000de38f:
	movb $1, -3064(%rbp)
uuid_00000000000de391:
	mov -3160(%RBP),%RSP
	add $-3264, %RSP
uuid_00000000000de394:
	mov -3080(%RBP),%RSP
	add $-3264, %RSP
uuid_00000000000de397:
	mov -3072(%RBP),%RSP
	add $-3264, %RSP
	mov -3064(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de3a7
	jmp uuid_00000000000de3a9
uuid_00000000000de3a7:
	push %RBP
	pushq -2896(%RBP)
	pushq -2904(%RBP)
	pushq -2912(%RBP)
	pushq -2920(%RBP)
	pushq -2928(%RBP)
	pushq -2936(%RBP)
	pushq -2944(%RBP)
	pushq $0
	push %RBP
	mov -3328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de3a1
	jmp uuid_00000000000de3a3
uuid_00000000000de3a1:
	push %RBP
	jmp uuid_00000000000de39e
	jmp uuid_00000000000de3a0
uuid_00000000000de39e:
	push %RBP
	jmp uuid_00000000000de39b
	jmp uuid_00000000000de39d
uuid_00000000000de39b:
	push %RBP
	mov -3280(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de398
	jmp uuid_00000000000de39a
uuid_00000000000de398:
	movb $1, -3336(%rbp)
uuid_00000000000de39a:
	mov -3368(%RBP),%RSP
	add $-3376, %RSP
uuid_00000000000de39d:
	mov -3360(%RBP),%RSP
	add $-3376, %RSP
uuid_00000000000de3a0:
	mov -3352(%RBP),%RSP
	add $-3376, %RSP
uuid_00000000000de3a3:
	mov -3344(%RBP),%RSP
	add $-3376, %RSP
	mov -3336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de3a4
	jmp uuid_00000000000de3a6
uuid_00000000000de3a4:
	movb $1, -2968(%rbp)
uuid_00000000000de3a6:
	mov -3272(%RBP),%RSP
	add $-3376, %RSP
uuid_00000000000de3a9:
	mov -2984(%RBP),%RSP
	add $-3376, %RSP
uuid_00000000000de3ac:
	mov -2976(%RBP),%RSP
	add $-3376, %RSP
	mov -2968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de3bd
	jmp uuid_00000000000de3bf
uuid_00000000000de3bd:
	push %RBP
	pushq -2800(%RBP)
	pushq -2808(%RBP)
	pushq -2816(%RBP)
	pushq -2824(%RBP)
	pushq -2832(%RBP)
	pushq -2840(%RBP)
	pushq -2848(%RBP)
	pushq $0
	push %RBP
	mov -3440(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de3b7
	jmp uuid_00000000000de3b9
uuid_00000000000de3b7:
	push %RBP
	jmp uuid_00000000000de3b4
	jmp uuid_00000000000de3b6
uuid_00000000000de3b4:
	push %RBP
	jmp uuid_00000000000de3b1
	jmp uuid_00000000000de3b3
uuid_00000000000de3b1:
	push %RBP
	mov -3392(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3488(%rbp)
	pushq $uuid_00000000000de3ad
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de3ae
	jmp uuid_00000000000de3b0
uuid_00000000000de3ae:
	movb $1, -3448(%rbp)
uuid_00000000000de3b0:
	mov -3480(%RBP),%RSP
	add $-3488, %RSP
uuid_00000000000de3b3:
	mov -3472(%RBP),%RSP
	add $-3488, %RSP
uuid_00000000000de3b6:
	mov -3464(%RBP),%RSP
	add $-3488, %RSP
uuid_00000000000de3b9:
	mov -3456(%RBP),%RSP
	add $-3488, %RSP
	mov -3448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de3ba
	jmp uuid_00000000000de3bc
uuid_00000000000de3ba:
	movb $1, -2872(%rbp)
uuid_00000000000de3bc:
	mov -3384(%RBP),%RSP
	add $-3488, %RSP
uuid_00000000000de3bf:
	mov -2888(%RBP),%RSP
	add $-3488, %RSP
uuid_00000000000de3c2:
	mov -2880(%RBP),%RSP
	add $-3488, %RSP
	mov -2872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de46c
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -3568(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de3eb
	jmp uuid_00000000000de3ed
uuid_00000000000de3eb:
	push %RBP
	mov -3560(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de3d5
	jmp uuid_00000000000de3d7
uuid_00000000000de3d5:
	push %RBP
	mov -3656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de3d2
	jmp uuid_00000000000de3d4
uuid_00000000000de3d2:
	push %RBP
	pushq -3600(%RBP)
	pushq -3608(%RBP)
	pushq -3616(%RBP)
	pushq -3624(%RBP)
	pushq -3632(%RBP)
	pushq -3640(%RBP)
	pushq -3648(%RBP)
	pushq $0
	push %RBP
	mov -3824(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de3cc
	jmp uuid_00000000000de3ce
uuid_00000000000de3cc:
	push %RBP
	jmp uuid_00000000000de3c9
	jmp uuid_00000000000de3cb
uuid_00000000000de3c9:
	push %RBP
	jmp uuid_00000000000de3c6
	jmp uuid_00000000000de3c8
uuid_00000000000de3c6:
	push %RBP
	mov -3776(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de3c3
	jmp uuid_00000000000de3c5
uuid_00000000000de3c3:
	movb $1, -3832(%rbp)
uuid_00000000000de3c5:
	mov -3864(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000de3c8:
	mov -3856(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000de3cb:
	mov -3848(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000de3ce:
	mov -3840(%RBP),%RSP
	add $-3872, %RSP
	mov -3832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de3cf
	jmp uuid_00000000000de3d1
uuid_00000000000de3cf:
	movb $1, -3672(%rbp)
uuid_00000000000de3d1:
	mov -3768(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000de3d4:
	mov -3688(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000de3d7:
	mov -3680(%RBP),%RSP
	add $-3872, %RSP
	mov -3672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de3e8
	jmp uuid_00000000000de3ea
uuid_00000000000de3e8:
	push %RBP
	pushq -3504(%RBP)
	pushq -3512(%RBP)
	pushq -3520(%RBP)
	pushq -3528(%RBP)
	pushq -3536(%RBP)
	pushq -3544(%RBP)
	pushq -3552(%RBP)
	pushq $0
	push %RBP
	mov -3936(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de3e2
	jmp uuid_00000000000de3e4
uuid_00000000000de3e2:
	push %RBP
	jmp uuid_00000000000de3df
	jmp uuid_00000000000de3e1
uuid_00000000000de3df:
	push %RBP
	jmp uuid_00000000000de3dc
	jmp uuid_00000000000de3de
uuid_00000000000de3dc:
	push %RBP
	mov -3888(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3984(%rbp)
	pushq $uuid_00000000000de3d8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de3d9
	jmp uuid_00000000000de3db
uuid_00000000000de3d9:
	movb $1, -3944(%rbp)
uuid_00000000000de3db:
	mov -3976(%RBP),%RSP
	add $-3984, %RSP
uuid_00000000000de3de:
	mov -3968(%RBP),%RSP
	add $-3984, %RSP
uuid_00000000000de3e1:
	mov -3960(%RBP),%RSP
	add $-3984, %RSP
uuid_00000000000de3e4:
	mov -3952(%RBP),%RSP
	add $-3984, %RSP
	mov -3944(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de3e5
	jmp uuid_00000000000de3e7
uuid_00000000000de3e5:
	movb $1, -3576(%rbp)
uuid_00000000000de3e7:
	mov -3880(%RBP),%RSP
	add $-3984, %RSP
uuid_00000000000de3ea:
	mov -3592(%RBP),%RSP
	add $-3984, %RSP
uuid_00000000000de3ed:
	mov -3584(%RBP),%RSP
	add $-3984, %RSP
	mov -3576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de469
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -4064(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de41f
	jmp uuid_00000000000de421
uuid_00000000000de41f:
	push %RBP
	mov -4056(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de409
	jmp uuid_00000000000de40b
uuid_00000000000de409:
	push %RBP
	mov -4152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4256(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de400
	jmp uuid_00000000000de402
uuid_00000000000de400:
	push %RBP
	mov -4248(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de3fd
	jmp uuid_00000000000de3ff
uuid_00000000000de3fd:
	push %RBP
	pushq -4192(%RBP)
	pushq -4200(%RBP)
	pushq -4208(%RBP)
	pushq -4216(%RBP)
	pushq -4224(%RBP)
	pushq -4232(%RBP)
	pushq -4240(%RBP)
	pushq $0
	push %RBP
	mov -4416(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de3f7
	jmp uuid_00000000000de3f9
uuid_00000000000de3f7:
	push %RBP
	jmp uuid_00000000000de3f4
	jmp uuid_00000000000de3f6
uuid_00000000000de3f4:
	push %RBP
	jmp uuid_00000000000de3f1
	jmp uuid_00000000000de3f3
uuid_00000000000de3f1:
	push %RBP
	mov -4368(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de3ee
	jmp uuid_00000000000de3f0
uuid_00000000000de3ee:
	movb $1, -4424(%rbp)
uuid_00000000000de3f0:
	mov -4456(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000de3f3:
	mov -4448(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000de3f6:
	mov -4440(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000de3f9:
	mov -4432(%RBP),%RSP
	add $-4464, %RSP
	mov -4424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de3fa
	jmp uuid_00000000000de3fc
uuid_00000000000de3fa:
	movb $1, -4264(%rbp)
uuid_00000000000de3fc:
	mov -4360(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000de3ff:
	mov -4280(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000de402:
	mov -4272(%RBP),%RSP
	add $-4464, %RSP
	mov -4264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de406
	jmp uuid_00000000000de408
uuid_00000000000de406:
	push %RBP
	pushq -4096(%RBP)
	pushq -4104(%RBP)
	pushq -4112(%RBP)
	pushq -4120(%RBP)
	pushq -4128(%RBP)
	pushq -4136(%RBP)
	pushq -4144(%RBP)
	jmp uuid_00000000000de403
	jmp uuid_00000000000de405
uuid_00000000000de403:
	movb $1, -4168(%rbp)
uuid_00000000000de405:
	mov -4472(%RBP),%RSP
	add $-4528, %RSP
uuid_00000000000de408:
	mov -4184(%RBP),%RSP
	add $-4528, %RSP
uuid_00000000000de40b:
	mov -4176(%RBP),%RSP
	add $-4528, %RSP
	mov -4168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de41c
	jmp uuid_00000000000de41e
uuid_00000000000de41c:
	push %RBP
	pushq -4000(%RBP)
	pushq -4008(%RBP)
	pushq -4016(%RBP)
	pushq -4024(%RBP)
	pushq -4032(%RBP)
	pushq -4040(%RBP)
	pushq -4048(%RBP)
	pushq $0
	push %RBP
	mov -4592(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de416
	jmp uuid_00000000000de418
uuid_00000000000de416:
	push %RBP
	jmp uuid_00000000000de413
	jmp uuid_00000000000de415
uuid_00000000000de413:
	push %RBP
	jmp uuid_00000000000de410
	jmp uuid_00000000000de412
uuid_00000000000de410:
	push %RBP
	mov -4544(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4640(%rbp)
	pushq $uuid_00000000000de40c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de40d
	jmp uuid_00000000000de40f
uuid_00000000000de40d:
	movb $1, -4600(%rbp)
uuid_00000000000de40f:
	mov -4632(%RBP),%RSP
	add $-4640, %RSP
uuid_00000000000de412:
	mov -4624(%RBP),%RSP
	add $-4640, %RSP
uuid_00000000000de415:
	mov -4616(%RBP),%RSP
	add $-4640, %RSP
uuid_00000000000de418:
	mov -4608(%RBP),%RSP
	add $-4640, %RSP
	mov -4600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de419
	jmp uuid_00000000000de41b
uuid_00000000000de419:
	movb $1, -4072(%rbp)
uuid_00000000000de41b:
	mov -4536(%RBP),%RSP
	add $-4640, %RSP
uuid_00000000000de41e:
	mov -4088(%RBP),%RSP
	add $-4640, %RSP
uuid_00000000000de421:
	mov -4080(%RBP),%RSP
	add $-4640, %RSP
	mov -4072(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de466
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -4720(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de442
	jmp uuid_00000000000de444
uuid_00000000000de442:
	push %RBP
	mov -4712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4816(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de439
	jmp uuid_00000000000de43b
uuid_00000000000de439:
	push %RBP
	mov -4808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de436
	jmp uuid_00000000000de438
uuid_00000000000de436:
	push %RBP
	pushq -4752(%RBP)
	pushq -4760(%RBP)
	pushq -4768(%RBP)
	pushq -4776(%RBP)
	pushq -4784(%RBP)
	pushq -4792(%RBP)
	pushq -4800(%RBP)
	pushq $0
	push %RBP
	mov -4976(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de430
	jmp uuid_00000000000de432
uuid_00000000000de430:
	push %RBP
	jmp uuid_00000000000de42d
	jmp uuid_00000000000de42f
uuid_00000000000de42d:
	push %RBP
	jmp uuid_00000000000de42a
	jmp uuid_00000000000de42c
uuid_00000000000de42a:
	push %RBP
	mov -4928(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5024(%rbp)
	pushq $uuid_00000000000de426
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de427
	jmp uuid_00000000000de429
uuid_00000000000de427:
	movb $1, -4984(%rbp)
uuid_00000000000de429:
	mov -5016(%RBP),%RSP
	add $-5024, %RSP
uuid_00000000000de42c:
	mov -5008(%RBP),%RSP
	add $-5024, %RSP
uuid_00000000000de42f:
	mov -5000(%RBP),%RSP
	add $-5024, %RSP
uuid_00000000000de432:
	mov -4992(%RBP),%RSP
	add $-5024, %RSP
	mov -4984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de433
	jmp uuid_00000000000de435
uuid_00000000000de433:
	movb $1, -4824(%rbp)
uuid_00000000000de435:
	mov -4920(%RBP),%RSP
	add $-5024, %RSP
uuid_00000000000de438:
	mov -4840(%RBP),%RSP
	add $-5024, %RSP
uuid_00000000000de43b:
	mov -4832(%RBP),%RSP
	add $-5024, %RSP
	mov -4824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de43f
	jmp uuid_00000000000de441
uuid_00000000000de43f:
	push %RBP
	pushq -4656(%RBP)
	pushq -4664(%RBP)
	pushq -4672(%RBP)
	pushq -4680(%RBP)
	pushq -4688(%RBP)
	pushq -4696(%RBP)
	pushq -4704(%RBP)
	jmp uuid_00000000000de43c
	jmp uuid_00000000000de43e
uuid_00000000000de43c:
	movb $1, -4728(%rbp)
uuid_00000000000de43e:
	mov -5032(%RBP),%RSP
	add $-5088, %RSP
uuid_00000000000de441:
	mov -4744(%RBP),%RSP
	add $-5088, %RSP
uuid_00000000000de444:
	mov -4736(%RBP),%RSP
	add $-5088, %RSP
	mov -4728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de463
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	jmp uuid_00000000000de460
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de45f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de462
uuid_00000000000de460:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq -5136(%rbp)
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	pushq -5264(%rbp)
	pushq -5272(%rbp)
	pushq -5280(%rbp)
	pushq -5288(%rbp)
	pushq -5296(%rbp)
	pushq -5304(%rbp)
	pushq -5312(%rbp)
	pushq -5320(%rbp)
	pushq $0
	push %RBP
	mov -5480(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de458
	jmp uuid_00000000000de45a
uuid_00000000000de458:
	push %RBP
	pushq -5408(%RBP)
	pushq -5416(%RBP)
	pushq -5424(%RBP)
	pushq -5432(%RBP)
	pushq -5440(%RBP)
	pushq -5448(%RBP)
	pushq -5456(%RBP)
	pushq -5464(%RBP)
	pushq -5472(%RBP)
	jmp uuid_00000000000de455
	jmp uuid_00000000000de457
uuid_00000000000de455:
	push %RBP
	pushq -5336(%RBP)
	pushq -5344(%RBP)
	pushq -5352(%RBP)
	pushq -5360(%RBP)
	pushq -5368(%RBP)
	pushq -5376(%RBP)
	pushq -5384(%RBP)
	pushq -5392(%RBP)
	pushq -5400(%RBP)
	jmp uuid_00000000000de452
	jmp uuid_00000000000de454
uuid_00000000000de452:
	movb $1, -5488(%rbp)
uuid_00000000000de454:
	mov -5584(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000de457:
	mov -5504(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000de45a:
	mov -5496(%RBP),%RSP
	add $-5656, %RSP
	mov -5488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de45c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de45b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de45e
uuid_00000000000de45c:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5592(%rbp)
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -5576(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -5568(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -5560(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -5552(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -5544(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -5536(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -5528(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -5520(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -5512(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000de45e:
	mov -5328(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000de462:
	mov -5096(%RBP),%RSP
	add $-5656, %RSP
	jmp uuid_00000000000de465
uuid_00000000000de463:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4848(%rbp)
	pushq -4856(%rbp)
	pushq -4864(%rbp)
	pushq -4872(%rbp)
	pushq -4880(%rbp)
	pushq -4888(%rbp)
	pushq -4896(%rbp)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq -5136(%rbp)
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq $0
	push %RBP
	mov -5400(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de44b
	jmp uuid_00000000000de44d
uuid_00000000000de44b:
	push %RBP
	pushq -5328(%RBP)
	pushq -5336(%RBP)
	pushq -5344(%RBP)
	pushq -5352(%RBP)
	pushq -5360(%RBP)
	pushq -5368(%RBP)
	pushq -5376(%RBP)
	pushq -5384(%RBP)
	pushq -5392(%RBP)
	jmp uuid_00000000000de448
	jmp uuid_00000000000de44a
uuid_00000000000de448:
	push %RBP
	pushq -5256(%RBP)
	pushq -5264(%RBP)
	pushq -5272(%RBP)
	pushq -5280(%RBP)
	pushq -5288(%RBP)
	pushq -5296(%RBP)
	pushq -5304(%RBP)
	pushq -5312(%RBP)
	pushq -5320(%RBP)
	jmp uuid_00000000000de445
	jmp uuid_00000000000de447
uuid_00000000000de445:
	movb $1, -5408(%rbp)
uuid_00000000000de447:
	mov -5504(%RBP),%RSP
	add $-5576, %RSP
uuid_00000000000de44a:
	mov -5424(%RBP),%RSP
	add $-5576, %RSP
uuid_00000000000de44d:
	mov -5416(%RBP),%RSP
	add $-5576, %RSP
	mov -5408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de44f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de44e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de451
uuid_00000000000de44f:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5512(%rbp)
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -5496(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -5488(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -5480(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -5472(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -5464(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -5456(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -5448(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -5440(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -5432(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000de451:
	mov -5248(%RBP),%RSP
	add $-5576, %RSP
uuid_00000000000de465:
	mov -4648(%RBP),%RSP
	add $-5576, %RSP
	jmp uuid_00000000000de468
uuid_00000000000de466:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000de422
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3c6
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de423
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000de423
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -4480(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3c6
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de424
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000de424
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de425
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000de425
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de423
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000de423
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de425
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000de425
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3c6
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4464(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq -4464(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -4480(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db025
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $3
	pushq $5
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -4352(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -4344(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -4336(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -4328(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -4320(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -4312(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -4304(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -4296(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -4288(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000de468:
	mov -3992(%RBP),%RSP
	add $-4640, %RSP
	jmp uuid_00000000000de46b
uuid_00000000000de469:
#call function tokenize : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3872(%rbp)
	mov %RBX, %RBP
	call tokenize_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function parse : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call parse_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -3760(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -3752(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -3744(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -3736(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -3728(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -3720(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -3712(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -3704(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -3696(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000de46b:
	mov -3496(%RBP),%RSP
	add $-3984, %RSP
	jmp uuid_00000000000de46e
uuid_00000000000de46c:
#call function index-size-of-class : Arrow<Cons<String,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3376(%rbp)
#call function to-u64 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3264(%rbp)
	mov %RBX, %RBP
	call to_SB_u64_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call index_SB_size_SB_of_SB_class_CL_ArrowNilConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -3152(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -3144(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -3136(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -3128(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -3120(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -3112(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -3104(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -3096(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -3088(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000de46e:
	mov -2792(%RBP),%RSP
	add $-3488, %RSP
	jmp uuid_00000000000de471
uuid_00000000000de46f:
#call function close : Arrow<SfxList,Array<SfxList,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $parse_SB_suffixes_CL_SfxListSfxList, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SfxListSfxList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -2448(%rbp)
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db996
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc575
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2560(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	mov $parse_SB_suffixes_CL_SfxListSfxList, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	movq -2336(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2328(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -2320(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -2312(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -2304(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -2296(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -2288(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -2280(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -2272(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000de471:
	mov -1880(%RBP),%RSP
	add $-2784, %RSP
	jmp uuid_00000000000de474
uuid_00000000000de472:
#call function parse-one-expression : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	mov %RBX, %RBP
	call parse_SB_one_SB_expression_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq $0
	push %RBP
	mov -2184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de309
	jmp uuid_00000000000de30b
uuid_00000000000de309:
	push %RBP
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2152(%RBP)
	pushq -2160(%RBP)
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	jmp uuid_00000000000de306
	jmp uuid_00000000000de308
uuid_00000000000de306:
	push %RBP
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	jmp uuid_00000000000de303
	jmp uuid_00000000000de305
uuid_00000000000de303:
	movb $1, -2192(%rbp)
uuid_00000000000de305:
	mov -2288(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000de308:
	mov -2208(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000de30b:
	mov -2200(%RBP),%RSP
	add $-2360, %RSP
	mov -2192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de31a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de319
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de31c
uuid_00000000000de31a:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	pushq -2408(%rbp)
	pushq -2416(%rbp)
	pushq -2424(%rbp)
	pushq -2432(%rbp)
	pushq -2440(%rbp)
	pushq -2448(%rbp)
	pushq -2456(%rbp)
	pushq -2464(%rbp)
	pushq -2472(%rbp)
	pushq -2480(%rbp)
	pushq -2488(%rbp)
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	pushq -2512(%rbp)
	pushq $0
	push %RBP
	mov -2672(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de312
	jmp uuid_00000000000de314
uuid_00000000000de312:
	push %RBP
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	pushq -2624(%RBP)
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	pushq -2656(%RBP)
	pushq -2664(%RBP)
	jmp uuid_00000000000de30f
	jmp uuid_00000000000de311
uuid_00000000000de30f:
	push %RBP
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq -2560(%RBP)
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq -2592(%RBP)
	jmp uuid_00000000000de30c
	jmp uuid_00000000000de30e
uuid_00000000000de30c:
	movb $1, -2680(%rbp)
uuid_00000000000de30e:
	mov -2776(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000de311:
	mov -2696(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000de314:
	mov -2688(%RBP),%RSP
	add $-2848, %RSP
	mov -2680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de316
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de315
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de318
uuid_00000000000de316:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
	pushq -2336(%rbp)
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2784(%rbp)
	pushq -2792(%rbp)
	pushq -2800(%rbp)
	pushq -2808(%rbp)
	pushq -2816(%rbp)
	pushq -2824(%rbp)
	pushq -2832(%rbp)
	pushq -2840(%rbp)
	pushq -2848(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -2768(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2760(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -2752(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -2744(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -2736(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -2728(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -2720(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -2712(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -2704(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000de318:
	mov -2520(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000de31c:
	mov -2032(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000de474:
	mov -1592(%RBP),%RSP
	add $-2848, %RSP
	jmp uuid_00000000000de477
uuid_00000000000de475:
#call function parse-one-expression : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	mov %RBX, %RBP
	call parse_SB_one_SB_expression_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq $0
	push %RBP
	mov -1896(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de2da
	jmp uuid_00000000000de2dc
uuid_00000000000de2da:
	push %RBP
	pushq -1824(%RBP)
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	pushq -1856(%RBP)
	pushq -1864(%RBP)
	pushq -1872(%RBP)
	pushq -1880(%RBP)
	pushq -1888(%RBP)
	jmp uuid_00000000000de2d7
	jmp uuid_00000000000de2d9
uuid_00000000000de2d7:
	push %RBP
	pushq -1752(%RBP)
	pushq -1760(%RBP)
	pushq -1768(%RBP)
	pushq -1776(%RBP)
	pushq -1784(%RBP)
	pushq -1792(%RBP)
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	jmp uuid_00000000000de2d4
	jmp uuid_00000000000de2d6
uuid_00000000000de2d4:
	movb $1, -1904(%rbp)
uuid_00000000000de2d6:
	mov -2000(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000de2d9:
	mov -1920(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000de2dc:
	mov -1912(%RBP),%RSP
	add $-2072, %RSP
	mov -1904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de2eb
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de2ea
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de2ed
uuid_00000000000de2eb:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq $0
	push %RBP
	mov -2384(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de2e3
	jmp uuid_00000000000de2e5
uuid_00000000000de2e3:
	push %RBP
	pushq -2312(%RBP)
	pushq -2320(%RBP)
	pushq -2328(%RBP)
	pushq -2336(%RBP)
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	pushq -2360(%RBP)
	pushq -2368(%RBP)
	pushq -2376(%RBP)
	jmp uuid_00000000000de2e0
	jmp uuid_00000000000de2e2
uuid_00000000000de2e0:
	push %RBP
	pushq -2240(%RBP)
	pushq -2248(%RBP)
	pushq -2256(%RBP)
	pushq -2264(%RBP)
	pushq -2272(%RBP)
	pushq -2280(%RBP)
	pushq -2288(%RBP)
	pushq -2296(%RBP)
	pushq -2304(%RBP)
	jmp uuid_00000000000de2dd
	jmp uuid_00000000000de2df
uuid_00000000000de2dd:
	movb $1, -2392(%rbp)
uuid_00000000000de2df:
	mov -2488(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000de2e2:
	mov -2408(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000de2e5:
	mov -2400(%RBP),%RSP
	add $-2560, %RSP
	mov -2392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de2e7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de2e6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de2e9
uuid_00000000000de2e7:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	pushq -2512(%rbp)
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
#call function type-of-s : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call type_SB_of_SB_s_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function index-tag-is-fragment : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function tag-of : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2568(%rbp)
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	mov %RBX, %RBP
	call tag_SB_of_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call index_SB_tag_SB_is_SB_fragment_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -2480(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2472(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -2464(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -2456(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -2448(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -2440(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -2432(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -2424(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -2416(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000de2e9:
	mov -2232(%RBP),%RSP
	add $-2584, %RSP
uuid_00000000000de2ed:
	mov -1744(%RBP),%RSP
	add $-2584, %RSP
uuid_00000000000de477:
	mov -1096(%RBP),%RSP
	add $-2584, %RSP
	jmp uuid_00000000000de47a
uuid_00000000000de478:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq $0
	push %RBP
	mov -1400(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de2a1
	jmp uuid_00000000000de2a3
uuid_00000000000de2a1:
	push %RBP
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	pushq -1392(%RBP)
	jmp uuid_00000000000de29e
	jmp uuid_00000000000de2a0
uuid_00000000000de29e:
	push %RBP
	pushq -1256(%RBP)
	pushq -1264(%RBP)
	pushq -1272(%RBP)
	pushq -1280(%RBP)
	pushq -1288(%RBP)
	pushq -1296(%RBP)
	pushq -1304(%RBP)
	pushq -1312(%RBP)
	pushq -1320(%RBP)
	jmp uuid_00000000000de29b
	jmp uuid_00000000000de29d
uuid_00000000000de29b:
	movb $1, -1408(%rbp)
uuid_00000000000de29d:
	mov -1504(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000de2a0:
	mov -1424(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000de2a3:
	mov -1416(%RBP),%RSP
	add $-1576, %RSP
	mov -1408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de2a5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de2a4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de2a7
uuid_00000000000de2a5:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -1496(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000de2a7:
	mov -1248(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000de47a:
	mov -808(%RBP),%RSP
	add $-1576, %RSP
	jmp uuid_00000000000de47d
uuid_00000000000de47b:
#call function parse-one-expression : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	mov %RBX, %RBP
	call parse_SB_one_SB_expression_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq $0
	push %RBP
	mov -1112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de261
	jmp uuid_00000000000de263
uuid_00000000000de261:
	push %RBP
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	jmp uuid_00000000000de25e
	jmp uuid_00000000000de260
uuid_00000000000de25e:
	push %RBP
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	jmp uuid_00000000000de25b
	jmp uuid_00000000000de25d
uuid_00000000000de25b:
	movb $1, -1120(%rbp)
uuid_00000000000de25d:
	mov -1216(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000de260:
	mov -1136(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000de263:
	mov -1128(%RBP),%RSP
	add $-1288, %RSP
	mov -1120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de282
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de281
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de284
uuid_00000000000de282:
#call function take-one-expr : Arrow<List<Token>,Tuple<List<Token>,List<Token>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	mov %RBX, %RBP
	call take_SB_one_SB_expr_CL_ArrowTupleListTokenListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq $0
	push %RBP
	mov -1600(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de26a
	jmp uuid_00000000000de26c
uuid_00000000000de26a:
	push %RBP
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	jmp uuid_00000000000de267
	jmp uuid_00000000000de269
uuid_00000000000de267:
	push %RBP
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	jmp uuid_00000000000de264
	jmp uuid_00000000000de266
uuid_00000000000de264:
	movb $1, -1608(%rbp)
uuid_00000000000de266:
	mov -1704(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000de269:
	mov -1624(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000de26c:
	mov -1616(%RBP),%RSP
	add $-1776, %RSP
	mov -1608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de27e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de27d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de280
uuid_00000000000de27e:
#call function parse-toplevel : Arrow<List<Token>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	mov %RBX, %RBP
	call parse_SB_toplevel_CL_ArrowASTListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	push %RBP
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq $0
	push %RBP
	mov -2000(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de273
	jmp uuid_00000000000de275
uuid_00000000000de273:
	push %RBP
	mov -1992(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de270
	jmp uuid_00000000000de272
uuid_00000000000de270:
	push %RBP
	mov -1984(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2176(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de26d
	jmp uuid_00000000000de26f
uuid_00000000000de26d:
	movb $1, -2008(%rbp)
uuid_00000000000de26f:
	mov -2104(%RBP),%RSP
	add $-2176, %RSP
uuid_00000000000de272:
	mov -2024(%RBP),%RSP
	add $-2176, %RSP
uuid_00000000000de275:
	mov -2016(%RBP),%RSP
	add $-2176, %RSP
	mov -2008(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de27a
	push %RBP
	jmp uuid_00000000000de277
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de276
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de279
uuid_00000000000de277:
uuid_00000000000de279:
	mov -2184(%RBP),%RSP
	add $-2184, %RSP
	jmp uuid_00000000000de27c
uuid_00000000000de27a:
	movq -2096(%rbp), %r15
	movq %r15, -1848(%rbp)
	movq -2088(%rbp), %r15
	movq %r15, -1840(%rbp)
	movq -2080(%rbp), %r15
	movq %r15, -1832(%rbp)
	movq -2072(%rbp), %r15
	movq %r15, -1824(%rbp)
	movq -2064(%rbp), %r15
	movq %r15, -1816(%rbp)
	movq -2056(%rbp), %r15
	movq %r15, -1808(%rbp)
	movq -2048(%rbp), %r15
	movq %r15, -1800(%rbp)
	movq -2040(%rbp), %r15
	movq %r15, -1792(%rbp)
	movq -2032(%rbp), %r15
	movq %r15, -1784(%rbp)
uuid_00000000000de27c:
	mov -1928(%RBP),%RSP
	add $-2176, %RSP
#call function close : Arrow<MacroList,Array<MacroList,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $preprocess_SB_macros_CL_MacroListMacroList, %r15
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_MacroListMacroList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq $0
	pushq $0
	mov $preprocess_SB_macros_CL_MacroListMacroList, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	movq -1696(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1688(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1680(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1672(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1664(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1656(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1648(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1640(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1632(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000de280:
	mov -1448(%RBP),%RSP
	add $-2176, %RSP
uuid_00000000000de284:
	mov -960(%RBP),%RSP
	add $-2176, %RSP
uuid_00000000000de47d:
	mov -520(%RBP),%RSP
	add $-2176, %RSP
	jmp uuid_00000000000de480
uuid_00000000000de47e:
	movq -400(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -392(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000de480:
	mov -232(%RBP),%RSP
	add $-512, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000de481
uuid_00000000000de483:
	subq $72, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
parse_SB_type_SB_comma_SB_sep_CL_ArrowListTypeString:
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000de49e:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000de49f
	jmp uuid_00000000000de4a0
uuid_00000000000de49f:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -96(%rbp)
	mov -112(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de495
	push %RBP
	pushq -96(%rbp)
	mov -128(%RBP), %AL
	mov $62, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de492
	push %RBP
	pushq -96(%rbp)
	mov -144(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de48f
	push %RBP
	pushq -96(%rbp)
	mov -160(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de48c
	push %RBP
	jmp uuid_00000000000de489
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de488
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de48b
uuid_00000000000de489:
uuid_00000000000de48b:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000de48e
uuid_00000000000de48c:
	mov -48(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -48(%rbp)
uuid_00000000000de48e:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000de491
uuid_00000000000de48f:
	mov -48(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -48(%rbp)
uuid_00000000000de491:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000de494
uuid_00000000000de492:
	mov -48(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -48(%rbp)
uuid_00000000000de494:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000de497
uuid_00000000000de495:
	mov -48(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -48(%rbp)
uuid_00000000000de497:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	push %RBP
	mov -48(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de49b
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	jmp uuid_00000000000de49d
uuid_00000000000de49b:
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $44, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de498
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	jmp uuid_00000000000de49a
uuid_00000000000de498:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	pushq $0
	pushq $0
	pushq $3
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000de49a:
	mov -128(%RBP),%RSP
	add $-128, %RSP
uuid_00000000000de49d:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000de49e
uuid_00000000000de4a0:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	subq $40, %rsp
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
parse_SB_type_SB_single_CL_ArrowTypeString:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $3
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daff0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
uuid_00000000000de507:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000de508
	jmp uuid_00000000000de509
uuid_00000000000de508:
	push %RBP
	mov -24(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de504
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -96(%rbp)
	mov -112(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de4da
	push %RBP
	pushq -96(%rbp)
	mov -128(%RBP), %AL
	mov $62, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de4d7
	push %RBP
	pushq -96(%rbp)
	mov -144(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de4d4
	push %RBP
	pushq -96(%rbp)
	mov -160(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de4d1
	push %RBP
	jmp uuid_00000000000de4ce
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de4cd
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de4d0
uuid_00000000000de4ce:
uuid_00000000000de4d0:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000de4d3
uuid_00000000000de4d1:
	mov -24(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000de4d3:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000de4d6
uuid_00000000000de4d4:
	mov -24(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000de4d6:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000de4d9
uuid_00000000000de4d7:
	mov -24(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000de4d9:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000de4dc
uuid_00000000000de4da:
	mov -24(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000de4dc:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	push %RBP
	mov -24(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de501
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	jmp uuid_00000000000de503
uuid_00000000000de501:
	pushq -32(%rbp)
	push %RBP
	pushq -128(%rbp)
	mov -144(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de4fe
	push %RBP
	pushq -128(%rbp)
	mov -160(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de4fb
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de4fa
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de4fd
uuid_00000000000de4fb:
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -216(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de4e6
	jmp uuid_00000000000de4e8
uuid_00000000000de4e6:
	push %RBP
	mov -208(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de4e3
	jmp uuid_00000000000de4e5
uuid_00000000000de4e3:
	push %RBP
	mov -200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de4e0
	jmp uuid_00000000000de4e2
uuid_00000000000de4e0:
	movb $1, -224(%rbp)
uuid_00000000000de4e2:
	mov -288(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000de4e5:
	mov -240(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000de4e8:
	mov -232(%RBP),%RSP
	add $-296, %RSP
	mov -224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de4f7
	push %RBP
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de4ec
	jmp uuid_00000000000de4ee
uuid_00000000000de4ec:
	push %RBP
	mov -320(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de4e9
	jmp uuid_00000000000de4eb
uuid_00000000000de4e9:
	movb $1, -336(%rbp)
uuid_00000000000de4eb:
	mov -352(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000de4ee:
	mov -344(%RBP),%RSP
	add $-360, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de4f4
	push %RBP
	jmp uuid_00000000000de4f1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de4f0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de4f3
uuid_00000000000de4f1:
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de4ef
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000de4f3:
	mov -368(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000de4f6
uuid_00000000000de4f4:
	pushq -360(%rbp)
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type-comma-sep : Arrow<String,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_SB_comma_SB_sep_CL_ArrowListTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000de4f6:
	mov -304(%RBP),%RSP
	add $-360, %RSP
	jmp uuid_00000000000de4f9
uuid_00000000000de4f7:
	pushq -296(%rbp)
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type-comma-sep : Arrow<String,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_SB_comma_SB_sep_CL_ArrowListTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000de4f9:
	mov -192(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000de4fd:
	mov -152(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000de500
uuid_00000000000de4fe:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de4dd
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db084
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	jmp uuid_00000000000de4df
uuid_00000000000de4dd:
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db084
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000de4df:
	mov -152(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000de500:
	mov -136(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000de503:
	mov -120(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000de506
uuid_00000000000de504:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -96(%rbp)
	mov -112(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de4ca
	push %RBP
	pushq -96(%rbp)
	mov -128(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de4c7
	push %RBP
	pushq -96(%rbp)
	jmp uuid_00000000000de4c4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de4c3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de4c6
uuid_00000000000de4c4:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000de4c6:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000de4c9
uuid_00000000000de4c7:
	movb $60, -32(%rbp)
	movq $1, -24(%rbp)
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de4c0
	jmp uuid_00000000000de4c2
uuid_00000000000de4c0:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $uuid_00000000000dafa7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de4bd
	push %RBP
#call function is-variable : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_variable_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de4ba
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	jmp uuid_00000000000de4bc
uuid_00000000000de4ba:
	pushq $0
	pushq -144(%rbp)
	pushq $2
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000de4bc:
	mov -160(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000de4bf
uuid_00000000000de4bd:
	pushq $0
	pushq $0
	pushq $3
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000de4bf:
	mov -152(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000de4c2:
	mov -136(%RBP),%RSP
	add $-152, %RSP
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000de4c9:
	mov -120(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000de4cc
uuid_00000000000de4ca:
	movb $91, -32(%rbp)
	movq $1, -24(%rbp)
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de4af
	jmp uuid_00000000000de4b1
uuid_00000000000de4af:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000dafa7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de4ac
	push %RBP
#call function is-variable : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	mov %RBX, %RBP
	call is_SB_variable_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de4a9
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	jmp uuid_00000000000de4ab
uuid_00000000000de4a9:
	pushq $0
	pushq -128(%rbp)
	pushq $2
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000de4ab:
	mov -144(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000de4ae
uuid_00000000000de4ac:
	pushq $0
	pushq $0
	pushq $3
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000de4ae:
	mov -136(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000de4b1:
	mov -120(%RBP),%RSP
	add $-136, %RSP
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000de4cc:
	mov -104(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000de506:
	mov -88(%RBP),%RSP
	add $-136, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000de507
uuid_00000000000de509:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de518
	jmp uuid_00000000000de51a
uuid_00000000000de518:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq $uuid_00000000000dafa7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de515
	push %RBP
#call function is-variable : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	mov %RBX, %RBP
	call is_SB_variable_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de512
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	jmp uuid_00000000000de514
uuid_00000000000de512:
	pushq $0
	pushq -96(%rbp)
	pushq $2
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000de514:
	mov -112(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000de517
uuid_00000000000de515:
	pushq $0
	pushq $0
	pushq $3
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000de517:
	mov -104(%RBP),%RSP
	add $-104, %RSP
uuid_00000000000de51a:
	mov -88(%RBP),%RSP
	add $-104, %RSP
	subq $24, %rsp
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
parse_SB_type_CL_ArrowTypeString:
	pushq $0
	push %RBP
#call function has-suffix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq $uuid_00000000000db284
	mov %RBX, %RBP
	call has_SB_suffix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de51b
	jmp uuid_00000000000de51d
uuid_00000000000de51b:
#call function remove-suffix : Arrow<Cons<String,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq $uuid_00000000000db284
	mov %RBX, %RBP
	call remove_SB_suffix_CL_ArrowStringConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -8(%rbp)
	movb $1, -24(%rbp)
uuid_00000000000de51d:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	pushq $0
	pushq $0
	pushq $0
	pushq $3
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daff0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
uuid_00000000000de544:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000de545
	jmp uuid_00000000000de546
uuid_00000000000de545:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -96(%rbp)
	mov -112(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de52b
	push %RBP
	pushq -96(%rbp)
	mov -128(%RBP), %AL
	mov $62, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de528
	push %RBP
	pushq -96(%rbp)
	mov -144(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de525
	push %RBP
	pushq -96(%rbp)
	mov -160(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de522
	push %RBP
	jmp uuid_00000000000de51f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de51e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de521
uuid_00000000000de51f:
uuid_00000000000de521:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000de524
uuid_00000000000de522:
	mov -40(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000de524:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000de527
uuid_00000000000de525:
	mov -40(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000de527:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000de52a
uuid_00000000000de528:
	mov -40(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000de52a:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000de52d
uuid_00000000000de52b:
	mov -40(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000de52d:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	push %RBP
	mov -40(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de541
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	jmp uuid_00000000000de543
uuid_00000000000de541:
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $43, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de53e
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	jmp uuid_00000000000de540
uuid_00000000000de53e:
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de534
	jmp uuid_00000000000de536
uuid_00000000000de534:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de531
	jmp uuid_00000000000de533
uuid_00000000000de531:
	push %RBP
	mov -168(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq $uuid_00000000000daff0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de52e
	jmp uuid_00000000000de530
uuid_00000000000de52e:
	movb $1, -192(%rbp)
uuid_00000000000de530:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000de533:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000de536:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de53b
	push %RBP
	jmp uuid_00000000000de538
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de537
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de53a
uuid_00000000000de538:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type-single : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_SB_single_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
uuid_00000000000de53a:
	mov -272(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000de53d
uuid_00000000000de53b:
#call function parse-type-single : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_SB_single_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	movq -288(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -72(%rbp)
uuid_00000000000de53d:
	mov -160(%RBP),%RSP
	add $-288, %RSP
	pushq $0
	pushq $0
	pushq $3
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
uuid_00000000000de540:
	mov -128(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000de543:
	mov -120(%RBP),%RSP
	add $-288, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000de544
uuid_00000000000de546:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de557
	jmp uuid_00000000000de559
uuid_00000000000de557:
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -152(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de54d
	jmp uuid_00000000000de54f
uuid_00000000000de54d:
	push %RBP
	mov -144(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -216(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de54a
	jmp uuid_00000000000de54c
uuid_00000000000de54a:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq $uuid_00000000000daff0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de547
	jmp uuid_00000000000de549
uuid_00000000000de547:
	movb $1, -160(%rbp)
uuid_00000000000de549:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000de54c:
	mov -176(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000de54f:
	mov -168(%RBP),%RSP
	add $-232, %RSP
	mov -160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de554
	push %RBP
	jmp uuid_00000000000de551
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de550
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de553
uuid_00000000000de551:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type-single : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_SB_single_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
uuid_00000000000de553:
	mov -240(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000de556
uuid_00000000000de554:
#call function parse-type-single : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_SB_single_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	movq -256(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -248(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -240(%rbp), %r15
	movq %r15, -72(%rbp)
uuid_00000000000de556:
	mov -128(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000de559:
	mov -96(%RBP),%RSP
	add $-256, %RSP
	push %RBP
	mov -24(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de562
	jmp uuid_00000000000de564
uuid_00000000000de562:
	pushq $uuid_00000000000db284
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
uuid_00000000000de564:
	mov -264(%RBP),%RSP
	add $-264, %RSP
	subq $24, %rsp
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
parse_SB_unexpect_CL_ArrowNilConsListTokenString:
#call function fail : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call fail_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
parse_CL_ArrowNilNil:
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
#call function parse-toplevel : Arrow<List<Token>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call parse_SB_toplevel_CL_ArrowASTListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function + : Arrow<Cons<AST,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call _AD__CL_ArrowASTConsASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	mov %rbp, %rsp
	sub $8, %rsp
	ret
take_SB_one_SB_expr_CL_ArrowTupleListTokenListTokenListToken:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	pushq $0
uuid_00000000000de5c7:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de5c8
	jmp uuid_00000000000de5c9
uuid_00000000000de5c8:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de58f
	jmp uuid_00000000000de591
uuid_00000000000de58f:
	push %RBP
	mov -376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de58c
	jmp uuid_00000000000de58e
uuid_00000000000de58c:
	push %RBP
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de586
	jmp uuid_00000000000de588
uuid_00000000000de586:
	push %RBP
	jmp uuid_00000000000de583
	jmp uuid_00000000000de585
uuid_00000000000de583:
	push %RBP
	jmp uuid_00000000000de580
	jmp uuid_00000000000de582
uuid_00000000000de580:
	push %RBP
	mov -496(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -592(%rbp)
	pushq $uuid_00000000000db0f9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de57d
	jmp uuid_00000000000de57f
uuid_00000000000de57d:
	movb $1, -552(%rbp)
uuid_00000000000de57f:
	mov -584(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000de582:
	mov -576(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000de585:
	mov -568(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000de588:
	mov -560(%RBP),%RSP
	add $-592, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de589
	jmp uuid_00000000000de58b
uuid_00000000000de589:
	movb $1, -392(%rbp)
uuid_00000000000de58b:
	mov -488(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000de58e:
	mov -408(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000de591:
	mov -400(%RBP),%RSP
	add $-592, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de5c4
	push %RBP
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de59b
	jmp uuid_00000000000de59d
uuid_00000000000de59b:
	push %RBP
	mov -664(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de598
	jmp uuid_00000000000de59a
uuid_00000000000de598:
	push %RBP
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	jmp uuid_00000000000de595
	jmp uuid_00000000000de597
uuid_00000000000de595:
	movb $1, -680(%rbp)
uuid_00000000000de597:
	mov -776(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000de59a:
	mov -696(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000de59d:
	mov -688(%RBP),%RSP
	add $-832, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de5c1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de5c0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de5c3
uuid_00000000000de5c1:
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	push %RBP
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq $0
	push %RBP
	mov -952(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de5a7
	jmp uuid_00000000000de5a9
uuid_00000000000de5a7:
	push %RBP
	jmp uuid_00000000000de5a4
	jmp uuid_00000000000de5a6
uuid_00000000000de5a4:
	push %RBP
	jmp uuid_00000000000de5a1
	jmp uuid_00000000000de5a3
uuid_00000000000de5a1:
	push %RBP
	mov -904(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1000(%rbp)
	pushq $uuid_00000000000dae17
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de59e
	jmp uuid_00000000000de5a0
uuid_00000000000de59e:
	movb $1, -960(%rbp)
uuid_00000000000de5a0:
	mov -992(%RBP),%RSP
	add $-1000, %RSP
uuid_00000000000de5a3:
	mov -984(%RBP),%RSP
	add $-1000, %RSP
uuid_00000000000de5a6:
	mov -976(%RBP),%RSP
	add $-1000, %RSP
uuid_00000000000de5a9:
	mov -968(%RBP),%RSP
	add $-1000, %RSP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de5bd
	push %RBP
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq $0
	push %RBP
	mov -1064(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de5b3
	jmp uuid_00000000000de5b5
uuid_00000000000de5b3:
	push %RBP
	jmp uuid_00000000000de5b0
	jmp uuid_00000000000de5b2
uuid_00000000000de5b0:
	push %RBP
	jmp uuid_00000000000de5ad
	jmp uuid_00000000000de5af
uuid_00000000000de5ad:
	push %RBP
	mov -1016(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1112(%rbp)
	pushq $uuid_00000000000dae19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de5aa
	jmp uuid_00000000000de5ac
uuid_00000000000de5aa:
	movb $1, -1072(%rbp)
uuid_00000000000de5ac:
	mov -1104(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000de5af:
	mov -1096(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000de5b2:
	mov -1088(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000de5b5:
	mov -1080(%RBP),%RSP
	add $-1112, %RSP
	mov -1072(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de5ba
	push %RBP
	jmp uuid_00000000000de5b7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de5b6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de5b9
uuid_00000000000de5b7:
uuid_00000000000de5b9:
	mov -1120(%RBP),%RSP
	add $-1120, %RSP
	jmp uuid_00000000000de5bc
uuid_00000000000de5ba:
	mov -232(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -232(%rbp)
uuid_00000000000de5bc:
	mov -1008(%RBP),%RSP
	add $-1112, %RSP
	jmp uuid_00000000000de5bf
uuid_00000000000de5bd:
	mov -232(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -232(%rbp)
uuid_00000000000de5bf:
	mov -896(%RBP),%RSP
	add $-1000, %RSP
#call function cons : Arrow<Cons<Token,List<Token>>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTokenConsListTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -768(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -768(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000de5c3:
	mov -600(%RBP),%RSP
	add $-1000, %RSP
	jmp uuid_00000000000de5c6
uuid_00000000000de5c4:
	push %RBP
	mov -232(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de592
#call function cons : Arrow<Cons<Token,List<Token>>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function head : Arrow<List<Token>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call head_CL_ArrowTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTokenConsListTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -480(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000de594
uuid_00000000000de592:
	movq -72(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -64(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -56(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -48(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -40(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -32(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -24(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -160(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000de594:
	mov -600(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000de5c6:
	mov -312(%RBP),%RSP
	add $-600, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000de5c7
uuid_00000000000de5c9:
#call function remove-parens : Arrow<List<Token>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function reverse : Arrow<List<Token>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call reverse_CL_ArrowListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call remove_SB_parens_CL_ArrowListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	subq $152, %rsp
	pushq 152(%rsp)
	pushq 168(%rsp)
	pushq 184(%rsp)
	pushq 200(%rsp)
	pushq 216(%rsp)
	pushq 232(%rsp)
	pushq 248(%rsp)
	pushq 264(%rsp)
	pushq 280(%rsp)
	pushq 296(%rsp)
	pushq 312(%rsp)
	pushq 328(%rsp)
	pushq 344(%rsp)
	pushq 360(%rsp)
	pushq 376(%rsp)
	pushq 392(%rsp)
	pushq 408(%rsp)
	pushq 424(%rsp)
	pushq 440(%rsp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
compile_SB_constructor_CL_ArrowFragmentConsI64ConsASTConsTypeConsTypeConsStringFContext:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de5d1
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	subq %R14,%RAX
	mov %RAX, %RAX
	mov $8, %R14
	subq %R14,%RAX
	push %RAX
#call function compile-push-rvalue : Arrow<Cons<Cons<Cons<Cons<FContext,AST>,I64>,U64>,U64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov -336(%RBP), %RAX
	mov -512(%RBP), %R14
	subq %R14,%RAX
	push %RAX
	pushq $1
	pushq $1
	mov %RBX, %RBP
	call compile_SB_push_SB_rvalue_CL_ArrowFragmentConsU64ConsU64ConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db5df
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db5e1
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db5e2
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db5e0
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq $uuid_00000000000de5d0
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -888(%RBP)
	popq -880(%RBP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
#call function cc-blob : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,I64>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq $uuid_00000000000db5e3
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -336(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsASTConsI64ConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	jmp uuid_00000000000de5d3
uuid_00000000000de5d1:
#call function with-only-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function .lookup : Arrow<Cons<Cons<HashtableEq<Type,String>,Type>,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $index_SB_c_SB_type_SB_ordinal_CL_HashtableEqStringType, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $uuid_00000000000db098
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowStringConsStringConsTypeHashtableEqStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function compile-push-rvalue : Arrow<Cons<Cons<Cons<Cons<FContext,AST>,I64>,U64>,U64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq $0
	pushq $0
	pushq $0
	mov %RBX, %RBP
	call compile_SB_push_SB_rvalue_CL_ArrowFragmentConsU64ConsU64ConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	push %RBP
#call function is-nil : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call is_SB_nil_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de5ca
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq $0
	pushq $uuid_00000000000db257
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	jmp uuid_00000000000de5cc
uuid_00000000000de5ca:
uuid_00000000000de5cc:
	mov -720(%RBP),%RSP
	add $-720, %RSP
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq $uuid_00000000000dd3d6
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de5cd
	pushq $2
	pushq $0
	pushq -536(%rbp)
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	pushq $uuid_00000000000de5ce
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq $uuid_00000000000dd3d6
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	pushq $uuid_00000000000de5cf
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
uuid_00000000000de5d3:
	mov -504(%RBP),%RSP
	add $-720, %RSP
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -336(%RBP), %RAX
	subq %R14,%RAX
	push %RAX
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -728(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	subq $152, %rsp
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $344, %rsp
	ret
compile_SB_declare_SB_cstring_CL_ArrowFragmentString:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	push %RBP
	pushq -176(%rbp)
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de5db
	push %RBP
	pushq -176(%rbp)
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de5d8
	push %RBP
	pushq -176(%rbp)
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de5d5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de5d4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de5d7
uuid_00000000000de5d5:
#call function compile-declare-cstring-blob : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call compile_SB_declare_SB_cstring_SB_blob_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000de5d7:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000de5da
uuid_00000000000de5d8:
#call function compile-declare-cstring-gnu : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call compile_SB_declare_SB_cstring_SB_gnu_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000de5da:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000de5dd
uuid_00000000000de5db:
#call function compile-declare-cstring-c : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call compile_SB_declare_SB_cstring_SB_c_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000de5dd:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	subq $152, %rsp
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
compile_SB_declare_SB_cstring_SB_blob_CL_ArrowFragmentString:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de5de
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	subq $152, %rsp
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
compile_SB_declare_SB_cstring_SB_c_CL_ArrowFragmentString:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $uuid_00000000000dd3d6
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de5df
	pushq $2
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function escape-c-string : Arrow<String,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call escape_SB_c_SB_string_CL_ArrowSString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $0
	pushq $uuid_00000000000de5df
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	subq $152, %rsp
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
escape_SB_c_SB_string_CL_ArrowSString:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000de606:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000de607
	jmp uuid_00000000000de608
uuid_00000000000de607:
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $92, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de603
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $34, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de600
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	jmp uuid_00000000000de602
uuid_00000000000de600:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	pushq $uuid_00000000000de5df
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000de602:
	mov -56(%RBP),%RSP
	add $-56, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000de605
uuid_00000000000de603:
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -56(%rbp)
	mov -72(%RBP), %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de5fd
	push %RBP
	pushq -56(%rbp)
	mov -88(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de5fa
	push %RBP
	pushq -56(%rbp)
	mov -104(%RBP), %AL
	mov $92, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de5f7
	push %RBP
	pushq -56(%rbp)
	mov -120(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de5f4
	push %RBP
	pushq -56(%rbp)
	mov -136(%RBP), %AL
	mov $96, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de5f1
	push %RBP
	pushq -56(%rbp)
	mov -152(%RBP), %AL
	mov $110, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de5ee
	push %RBP
	pushq -56(%rbp)
	mov -168(%RBP), %AL
	mov $111, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de5eb
	push %RBP
	pushq -56(%rbp)
	mov -184(%RBP), %AL
	mov $115, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de5e8
	push %RBP
	pushq -56(%rbp)
	mov -200(%RBP), %AL
	mov $116, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de5e5
	push %RBP
	pushq -56(%rbp)
	jmp uuid_00000000000de5e2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de5e1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de5e4
uuid_00000000000de5e2:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db0d1
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<U8,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function fail : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db0d2
	mov %RBX, %RBP
	call fail_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000de5e4:
	mov -208(%RBP),%RSP
	add $-216, %RSP
	jmp uuid_00000000000de5e7
uuid_00000000000de5e5:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	pushq $uuid_00000000000de5e0
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000de5e7:
	mov -192(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000de5ea
uuid_00000000000de5e8:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	pushq $uuid_00000000000dae18
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000de5ea:
	mov -176(%RBP),%RSP
	add $-184, %RSP
	jmp uuid_00000000000de5ed
uuid_00000000000de5eb:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	pushq $uuid_00000000000db0fe
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000de5ed:
	mov -160(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000de5f0
uuid_00000000000de5ee:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	pushq $uuid_00000000000db0fd
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000de5f0:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000de5f3
uuid_00000000000de5f1:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	pushq $uuid_00000000000db0fb
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000de5f3:
	mov -128(%RBP),%RSP
	add $-136, %RSP
	jmp uuid_00000000000de5f6
uuid_00000000000de5f4:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	pushq $uuid_00000000000dae19
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000de5f6:
	mov -112(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000de5f9
uuid_00000000000de5f7:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	pushq $uuid_00000000000db0d0
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000de5f9:
	mov -96(%RBP),%RSP
	add $-104, %RSP
	jmp uuid_00000000000de5fc
uuid_00000000000de5fa:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	pushq $uuid_00000000000dae17
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000de5fc:
	mov -80(%RBP),%RSP
	add $-88, %RSP
	jmp uuid_00000000000de5ff
uuid_00000000000de5fd:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	pushq $uuid_00000000000db0f9
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000de5ff:
	mov -64(%RBP),%RSP
	add $-72, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
uuid_00000000000de605:
	mov -48(%RBP),%RSP
	add $-72, %RSP
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000de606
uuid_00000000000de608:
	subq $24, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
compile_SB_declare_SB_cstring_SB_gnu_CL_ArrowFragmentString:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	pushq $1
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de624
	mov $cstring_SB_cache_CL_StringStringListStringStringList, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $uuid_00000000000daee6
uuid_00000000000de61c:
#call function non-zero : Arrow<StringStringList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64StringStringList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de61d
	jmp uuid_00000000000de61e
uuid_00000000000de61d:
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq $0
	push %RBP
	mov -288(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de612
	jmp uuid_00000000000de614
uuid_00000000000de612:
	push %RBP
	mov -280(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de60f
	jmp uuid_00000000000de611
uuid_00000000000de60f:
	push %RBP
	mov -272(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de60c
	jmp uuid_00000000000de60e
uuid_00000000000de60c:
	push %RBP
	mov -264(%RBP), %RAX
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de609
	jmp uuid_00000000000de60b
uuid_00000000000de609:
	movb $1, -296(%rbp)
uuid_00000000000de60b:
	mov -344(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000de60e:
	mov -328(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000de611:
	mov -312(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000de614:
	mov -304(%RBP),%RSP
	add $-376, %RSP
	mov -296(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de619
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de618
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de61b
uuid_00000000000de619:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	pushq -8(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de615
	movq -376(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -184(%rbp)
	jmp uuid_00000000000de617
uuid_00000000000de615:
	movq -320(%rbp), %r15
	movq %r15, -216(%rbp)
	mov -320(%rbp), %r15
	mov %r15, -216(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000de617:
	mov -384(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000de61b:
	mov -256(%RBP),%RSP
	add $-384, %RSP
	add $32, %rsp
	add $32, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %rsp
	add $32, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000de61c
uuid_00000000000de61e:
	push %RBP
	mov -216(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000de621
#call function uuid : Arrow<Nil,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call uuid_CL_ArrowStringNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -216(%rbp)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -216(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de61f
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function escape-literal : Arrow<String,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call escape_SB_literal_CL_ArrowStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de620
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<StringStringList,Array<StringStringList,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $cstring_SB_cache_CL_StringStringListStringStringList, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_StringStringListStringStringList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -216(%rbp)
	pushq $0
	mov $cstring_SB_cache_CL_StringStringListStringStringList, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	jmp uuid_00000000000de623
uuid_00000000000de621:
uuid_00000000000de623:
	mov -224(%RBP),%RSP
	add $-224, %RSP
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $uuid_00000000000dd3d6
	pushq $0
	pushq -216(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	jmp uuid_00000000000de626
uuid_00000000000de624:
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $uuid_00000000000dd3d6
	pushq $0
	pushq -8(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000de626:
	mov -176(%RBP),%RSP
	add $-176, %RSP
	subq $152, %rsp
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
compile_SB_destructure_SB_args_CL_ArrowFContextConsI64ConsASTConsFContextType:
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -464(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de657
	jmp uuid_00000000000de659
uuid_00000000000de657:
	push %RBP
	mov -456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de64e
	jmp uuid_00000000000de650
uuid_00000000000de64e:
	push %RBP
	mov -552(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -656(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de63c
	jmp uuid_00000000000de63e
uuid_00000000000de63c:
	push %RBP
	mov -648(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de62a
	jmp uuid_00000000000de62c
uuid_00000000000de62a:
	push %RBP
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	jmp uuid_00000000000de627
	jmp uuid_00000000000de629
uuid_00000000000de627:
	movb $1, -760(%rbp)
uuid_00000000000de629:
	mov -776(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000de62c:
	mov -768(%RBP),%RSP
	add $-800, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de639
	jmp uuid_00000000000de63b
uuid_00000000000de639:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de633
	jmp uuid_00000000000de635
uuid_00000000000de633:
	push %RBP
	jmp uuid_00000000000de630
	jmp uuid_00000000000de632
uuid_00000000000de630:
	push %RBP
	mov -816(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de62d
	jmp uuid_00000000000de62f
uuid_00000000000de62d:
	movb $1, -888(%rbp)
uuid_00000000000de62f:
	mov -912(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000de632:
	mov -904(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000de635:
	mov -896(%RBP),%RSP
	add $-920, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de636
	jmp uuid_00000000000de638
uuid_00000000000de636:
	movb $1, -664(%rbp)
uuid_00000000000de638:
	mov -808(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000de63b:
	mov -680(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000de63e:
	mov -672(%RBP),%RSP
	add $-920, %RSP
	mov -664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de64b
	jmp uuid_00000000000de64d
uuid_00000000000de64b:
	push %RBP
	mov -544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1000(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de645
	jmp uuid_00000000000de647
uuid_00000000000de645:
	push %RBP
	jmp uuid_00000000000de642
	jmp uuid_00000000000de644
uuid_00000000000de642:
	push %RBP
	mov -936(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de63f
	jmp uuid_00000000000de641
uuid_00000000000de63f:
	movb $1, -1008(%rbp)
uuid_00000000000de641:
	mov -1032(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000de644:
	mov -1024(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000de647:
	mov -1016(%RBP),%RSP
	add $-1040, %RSP
	mov -1008(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de648
	jmp uuid_00000000000de64a
uuid_00000000000de648:
	movb $1, -568(%rbp)
uuid_00000000000de64a:
	mov -928(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000de64d:
	mov -584(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000de650:
	mov -576(%RBP),%RSP
	add $-1040, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de654
	jmp uuid_00000000000de656
uuid_00000000000de654:
	push %RBP
	mov -448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de651
	jmp uuid_00000000000de653
uuid_00000000000de651:
	movb $1, -472(%rbp)
uuid_00000000000de653:
	mov -1048(%RBP),%RSP
	add $-1120, %RSP
uuid_00000000000de656:
	mov -488(%RBP),%RSP
	add $-1120, %RSP
uuid_00000000000de659:
	mov -480(%RBP),%RSP
	add $-1120, %RSP
	mov -472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de68e
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -1200(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de684
	jmp uuid_00000000000de686
uuid_00000000000de684:
	push %RBP
	mov -1192(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1296(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de672
	jmp uuid_00000000000de674
uuid_00000000000de672:
	push %RBP
	mov -1288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1392(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de660
	jmp uuid_00000000000de662
uuid_00000000000de660:
	push %RBP
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	jmp uuid_00000000000de65d
	jmp uuid_00000000000de65f
uuid_00000000000de65d:
	movb $1, -1400(%rbp)
uuid_00000000000de65f:
	mov -1416(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000de662:
	mov -1408(%RBP),%RSP
	add $-1440, %RSP
	mov -1400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de66f
	jmp uuid_00000000000de671
uuid_00000000000de66f:
	push %RBP
	mov -1280(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1520(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de669
	jmp uuid_00000000000de66b
uuid_00000000000de669:
	push %RBP
	jmp uuid_00000000000de666
	jmp uuid_00000000000de668
uuid_00000000000de666:
	push %RBP
	mov -1456(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de663
	jmp uuid_00000000000de665
uuid_00000000000de663:
	movb $1, -1528(%rbp)
uuid_00000000000de665:
	mov -1552(%RBP),%RSP
	add $-1560, %RSP
uuid_00000000000de668:
	mov -1544(%RBP),%RSP
	add $-1560, %RSP
uuid_00000000000de66b:
	mov -1536(%RBP),%RSP
	add $-1560, %RSP
	mov -1528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de66c
	jmp uuid_00000000000de66e
uuid_00000000000de66c:
	movb $1, -1304(%rbp)
uuid_00000000000de66e:
	mov -1448(%RBP),%RSP
	add $-1560, %RSP
uuid_00000000000de671:
	mov -1320(%RBP),%RSP
	add $-1560, %RSP
uuid_00000000000de674:
	mov -1312(%RBP),%RSP
	add $-1560, %RSP
	mov -1304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de681
	jmp uuid_00000000000de683
uuid_00000000000de681:
	push %RBP
	mov -1184(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1640(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de67b
	jmp uuid_00000000000de67d
uuid_00000000000de67b:
	push %RBP
	jmp uuid_00000000000de678
	jmp uuid_00000000000de67a
uuid_00000000000de678:
	push %RBP
	mov -1576(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de675
	jmp uuid_00000000000de677
uuid_00000000000de675:
	movb $1, -1648(%rbp)
uuid_00000000000de677:
	mov -1672(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000de67a:
	mov -1664(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000de67d:
	mov -1656(%RBP),%RSP
	add $-1680, %RSP
	mov -1648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de67e
	jmp uuid_00000000000de680
uuid_00000000000de67e:
	movb $1, -1208(%rbp)
uuid_00000000000de680:
	mov -1568(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000de683:
	mov -1224(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000de686:
	mov -1216(%RBP),%RSP
	add $-1680, %RSP
	mov -1208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de68b
	push %RBP
	jmp uuid_00000000000de688
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de687
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de68a
uuid_00000000000de688:
uuid_00000000000de68a:
	mov -1688(%RBP),%RSP
	add $-1688, %RSP
	jmp uuid_00000000000de68d
uuid_00000000000de68b:
#call function maybe-local-variable : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call maybe_SB_local_SB_variable_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1440(%RBP)
	popq -1432(%RBP)
	popq -1424(%RBP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -304(%RBP), %RAX
	mov -1688(%RBP), %R14
	subq %R14,%RAX
	push %RAX
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -1560(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
#call function fragment::local-variable : Arrow<Cons<I64,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1696(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_local_SB_variable_CL_ArrowFragmentConsTypeI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
uuid_00000000000de68d:
	mov -1128(%RBP),%RSP
	add $-1696, %RSP
	jmp uuid_00000000000de690
uuid_00000000000de68e:
	push %RBP
#call function is-cons : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call is_SB_cons_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de65a
	jmp uuid_00000000000de65c
uuid_00000000000de65a:
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function compile-destructure-args : Arrow<Cons<Cons<Cons<Type,FContext>,AST>,I64>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call compile_SB_destructure_SB_args_CL_ArrowFContextConsI64ConsASTConsFContextType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -304(%RBP), %RAX
	mov -1160(%RBP), %R14
	subq %R14,%RAX
	push %RAX
#call function maybe-local-variable : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call maybe_SB_local_SB_variable_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -1168(%RBP), %RAX
	mov -1176(%RBP), %R14
	subq %R14,%RAX
	push %RAX
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -920(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
#call function fragment::local-variable : Arrow<Cons<I64,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1184(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_local_SB_variable_CL_ArrowFragmentConsTypeI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
uuid_00000000000de65c:
	mov -1128(%RBP),%RSP
	add $-1184, %RSP
uuid_00000000000de690:
	mov -392(%RBP),%RSP
	add $-1184, %RSP
	subq $200, %rsp
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
compile_SB_expr_SB_direct_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de97d
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	mov -680(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de97a
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de698
	jmp uuid_00000000000de69a
uuid_00000000000de698:
	push %RBP
	jmp uuid_00000000000de695
	jmp uuid_00000000000de697
uuid_00000000000de695:
	push %RBP
	mov -696(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de692
	jmp uuid_00000000000de694
uuid_00000000000de692:
	movb $1, -768(%rbp)
uuid_00000000000de694:
	mov -792(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000de697:
	mov -784(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000de69a:
	mov -776(%RBP),%RSP
	add $-800, %RSP
	mov -768(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de977
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de6a1
	jmp uuid_00000000000de6a3
uuid_00000000000de6a1:
	push %RBP
	jmp uuid_00000000000de69e
	jmp uuid_00000000000de6a0
uuid_00000000000de69e:
	push %RBP
	mov -816(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de69b
	jmp uuid_00000000000de69d
uuid_00000000000de69b:
	movb $1, -888(%rbp)
uuid_00000000000de69d:
	mov -912(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000de6a0:
	mov -904(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000de6a3:
	mov -896(%RBP),%RSP
	add $-920, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de974
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -1000(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de73b
	jmp uuid_00000000000de73d
uuid_00000000000de73b:
	push %RBP
	mov -992(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1096(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de729
	jmp uuid_00000000000de72b
uuid_00000000000de729:
	push %RBP
	mov -1088(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1192(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de720
	jmp uuid_00000000000de722
uuid_00000000000de720:
	push %RBP
	pushq -1168(%RBP)
	pushq -1176(%RBP)
	pushq -1184(%RBP)
	jmp uuid_00000000000de71d
	jmp uuid_00000000000de71f
uuid_00000000000de71d:
	movb $1, -1200(%rbp)
uuid_00000000000de71f:
	mov -1216(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000de722:
	mov -1208(%RBP),%RSP
	add $-1240, %RSP
	mov -1200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de726
	jmp uuid_00000000000de728
uuid_00000000000de726:
	push %RBP
	mov -1080(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de723
	jmp uuid_00000000000de725
uuid_00000000000de723:
	movb $1, -1104(%rbp)
uuid_00000000000de725:
	mov -1248(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000de728:
	mov -1120(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000de72b:
	mov -1112(%RBP),%RSP
	add $-1320, %RSP
	mov -1104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de738
	jmp uuid_00000000000de73a
uuid_00000000000de738:
	push %RBP
	mov -984(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1400(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de732
	jmp uuid_00000000000de734
uuid_00000000000de732:
	push %RBP
	jmp uuid_00000000000de72f
	jmp uuid_00000000000de731
uuid_00000000000de72f:
	push %RBP
	mov -1336(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de72c
	jmp uuid_00000000000de72e
uuid_00000000000de72c:
	movb $1, -1408(%rbp)
uuid_00000000000de72e:
	mov -1432(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000de731:
	mov -1424(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000de734:
	mov -1416(%RBP),%RSP
	add $-1440, %RSP
	mov -1408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de735
	jmp uuid_00000000000de737
uuid_00000000000de735:
	movb $1, -1008(%rbp)
uuid_00000000000de737:
	mov -1328(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000de73a:
	mov -1024(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000de73d:
	mov -1016(%RBP),%RSP
	add $-1440, %RSP
	mov -1008(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de971
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -1520(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de756
	jmp uuid_00000000000de758
uuid_00000000000de756:
	push %RBP
	mov -1512(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1616(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de744
	jmp uuid_00000000000de746
uuid_00000000000de744:
	push %RBP
	jmp uuid_00000000000de741
	jmp uuid_00000000000de743
uuid_00000000000de741:
	push %RBP
	mov -1552(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de73e
	jmp uuid_00000000000de740
uuid_00000000000de73e:
	movb $1, -1624(%rbp)
uuid_00000000000de740:
	mov -1648(%RBP),%RSP
	add $-1656, %RSP
uuid_00000000000de743:
	mov -1640(%RBP),%RSP
	add $-1656, %RSP
uuid_00000000000de746:
	mov -1632(%RBP),%RSP
	add $-1656, %RSP
	mov -1624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de753
	jmp uuid_00000000000de755
uuid_00000000000de753:
	push %RBP
	mov -1504(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1736(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de74d
	jmp uuid_00000000000de74f
uuid_00000000000de74d:
	push %RBP
	jmp uuid_00000000000de74a
	jmp uuid_00000000000de74c
uuid_00000000000de74a:
	push %RBP
	mov -1672(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1776(%rbp)
	pushq $uuid_00000000000db432
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de747
	jmp uuid_00000000000de749
uuid_00000000000de747:
	movb $1, -1744(%rbp)
uuid_00000000000de749:
	mov -1768(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000de74c:
	mov -1760(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000de74f:
	mov -1752(%RBP),%RSP
	add $-1776, %RSP
	mov -1744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de750
	jmp uuid_00000000000de752
uuid_00000000000de750:
	movb $1, -1528(%rbp)
uuid_00000000000de752:
	mov -1664(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000de755:
	mov -1544(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000de758:
	mov -1536(%RBP),%RSP
	add $-1776, %RSP
	mov -1528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de96e
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -1856(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de771
	jmp uuid_00000000000de773
uuid_00000000000de771:
	push %RBP
	mov -1848(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1952(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de75f
	jmp uuid_00000000000de761
uuid_00000000000de75f:
	push %RBP
	jmp uuid_00000000000de75c
	jmp uuid_00000000000de75e
uuid_00000000000de75c:
	push %RBP
	mov -1888(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de759
	jmp uuid_00000000000de75b
uuid_00000000000de759:
	movb $1, -1960(%rbp)
uuid_00000000000de75b:
	mov -1984(%RBP),%RSP
	add $-1992, %RSP
uuid_00000000000de75e:
	mov -1976(%RBP),%RSP
	add $-1992, %RSP
uuid_00000000000de761:
	mov -1968(%RBP),%RSP
	add $-1992, %RSP
	mov -1960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de76e
	jmp uuid_00000000000de770
uuid_00000000000de76e:
	push %RBP
	mov -1840(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2072(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de768
	jmp uuid_00000000000de76a
uuid_00000000000de768:
	push %RBP
	jmp uuid_00000000000de765
	jmp uuid_00000000000de767
uuid_00000000000de765:
	push %RBP
	mov -2008(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2112(%rbp)
	pushq $uuid_00000000000db44f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de762
	jmp uuid_00000000000de764
uuid_00000000000de762:
	movb $1, -2080(%rbp)
uuid_00000000000de764:
	mov -2104(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000de767:
	mov -2096(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000de76a:
	mov -2088(%RBP),%RSP
	add $-2112, %RSP
	mov -2080(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de76b
	jmp uuid_00000000000de76d
uuid_00000000000de76b:
	movb $1, -1864(%rbp)
uuid_00000000000de76d:
	mov -2000(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000de770:
	mov -1880(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000de773:
	mov -1872(%RBP),%RSP
	add $-2112, %RSP
	mov -1864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de96b
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -2192(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de783
	jmp uuid_00000000000de785
uuid_00000000000de783:
	push %RBP
	mov -2184(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de780
	jmp uuid_00000000000de782
uuid_00000000000de780:
	push %RBP
	mov -2176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2368(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de77a
	jmp uuid_00000000000de77c
uuid_00000000000de77a:
	push %RBP
	jmp uuid_00000000000de777
	jmp uuid_00000000000de779
uuid_00000000000de777:
	push %RBP
	mov -2304(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2408(%rbp)
	pushq $uuid_00000000000db4fa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de774
	jmp uuid_00000000000de776
uuid_00000000000de774:
	movb $1, -2376(%rbp)
uuid_00000000000de776:
	mov -2400(%RBP),%RSP
	add $-2408, %RSP
uuid_00000000000de779:
	mov -2392(%RBP),%RSP
	add $-2408, %RSP
uuid_00000000000de77c:
	mov -2384(%RBP),%RSP
	add $-2408, %RSP
	mov -2376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de77d
	jmp uuid_00000000000de77f
uuid_00000000000de77d:
	movb $1, -2200(%rbp)
uuid_00000000000de77f:
	mov -2296(%RBP),%RSP
	add $-2408, %RSP
uuid_00000000000de782:
	mov -2216(%RBP),%RSP
	add $-2408, %RSP
uuid_00000000000de785:
	mov -2208(%RBP),%RSP
	add $-2408, %RSP
	mov -2200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de968
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -2488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de795
	jmp uuid_00000000000de797
uuid_00000000000de795:
	push %RBP
	mov -2480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de792
	jmp uuid_00000000000de794
uuid_00000000000de792:
	push %RBP
	mov -2472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2664(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de78c
	jmp uuid_00000000000de78e
uuid_00000000000de78c:
	push %RBP
	jmp uuid_00000000000de789
	jmp uuid_00000000000de78b
uuid_00000000000de789:
	push %RBP
	mov -2600(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2704(%rbp)
	pushq $uuid_00000000000db50d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de786
	jmp uuid_00000000000de788
uuid_00000000000de786:
	movb $1, -2672(%rbp)
uuid_00000000000de788:
	mov -2696(%RBP),%RSP
	add $-2704, %RSP
uuid_00000000000de78b:
	mov -2688(%RBP),%RSP
	add $-2704, %RSP
uuid_00000000000de78e:
	mov -2680(%RBP),%RSP
	add $-2704, %RSP
	mov -2672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de78f
	jmp uuid_00000000000de791
uuid_00000000000de78f:
	movb $1, -2496(%rbp)
uuid_00000000000de791:
	mov -2592(%RBP),%RSP
	add $-2704, %RSP
uuid_00000000000de794:
	mov -2512(%RBP),%RSP
	add $-2704, %RSP
uuid_00000000000de797:
	mov -2504(%RBP),%RSP
	add $-2704, %RSP
	mov -2496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de965
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -2784(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de830
	jmp uuid_00000000000de832
uuid_00000000000de830:
	push %RBP
	mov -2776(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2880(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de81e
	jmp uuid_00000000000de820
uuid_00000000000de81e:
	push %RBP
	pushq -2856(%RBP)
	pushq -2864(%RBP)
	pushq -2872(%RBP)
	jmp uuid_00000000000de81b
	jmp uuid_00000000000de81d
uuid_00000000000de81b:
	movb $1, -2888(%rbp)
uuid_00000000000de81d:
	mov -2904(%RBP),%RSP
	add $-2928, %RSP
uuid_00000000000de820:
	mov -2896(%RBP),%RSP
	add $-2928, %RSP
	mov -2888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de82d
	jmp uuid_00000000000de82f
uuid_00000000000de82d:
	push %RBP
	mov -2768(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3008(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de827
	jmp uuid_00000000000de829
uuid_00000000000de827:
	push %RBP
	jmp uuid_00000000000de824
	jmp uuid_00000000000de826
uuid_00000000000de824:
	push %RBP
	mov -2944(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3048(%rbp)
	pushq $uuid_00000000000db4da
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de821
	jmp uuid_00000000000de823
uuid_00000000000de821:
	movb $1, -3016(%rbp)
uuid_00000000000de823:
	mov -3040(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000de826:
	mov -3032(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000de829:
	mov -3024(%RBP),%RSP
	add $-3048, %RSP
	mov -3016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de82a
	jmp uuid_00000000000de82c
uuid_00000000000de82a:
	movb $1, -2792(%rbp)
uuid_00000000000de82c:
	mov -2936(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000de82f:
	mov -2808(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000de832:
	mov -2800(%RBP),%RSP
	add $-3048, %RSP
	mov -2792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de962
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -3128(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de851
	jmp uuid_00000000000de853
uuid_00000000000de851:
	push %RBP
	mov -3120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3224(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de83f
	jmp uuid_00000000000de841
uuid_00000000000de83f:
	push %RBP
	mov -3216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3320(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de836
	jmp uuid_00000000000de838
uuid_00000000000de836:
	push %RBP
	pushq -3296(%RBP)
	pushq -3304(%RBP)
	pushq -3312(%RBP)
	jmp uuid_00000000000de833
	jmp uuid_00000000000de835
uuid_00000000000de833:
	movb $1, -3328(%rbp)
uuid_00000000000de835:
	mov -3344(%RBP),%RSP
	add $-3368, %RSP
uuid_00000000000de838:
	mov -3336(%RBP),%RSP
	add $-3368, %RSP
	mov -3328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de83c
	jmp uuid_00000000000de83e
uuid_00000000000de83c:
	push %RBP
	mov -3208(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de839
	jmp uuid_00000000000de83b
uuid_00000000000de839:
	movb $1, -3232(%rbp)
uuid_00000000000de83b:
	mov -3376(%RBP),%RSP
	add $-3448, %RSP
uuid_00000000000de83e:
	mov -3248(%RBP),%RSP
	add $-3448, %RSP
uuid_00000000000de841:
	mov -3240(%RBP),%RSP
	add $-3448, %RSP
	mov -3232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de84e
	jmp uuid_00000000000de850
uuid_00000000000de84e:
	push %RBP
	mov -3112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3528(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de848
	jmp uuid_00000000000de84a
uuid_00000000000de848:
	push %RBP
	jmp uuid_00000000000de845
	jmp uuid_00000000000de847
uuid_00000000000de845:
	push %RBP
	mov -3464(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3568(%rbp)
	pushq $uuid_00000000000db15f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de842
	jmp uuid_00000000000de844
uuid_00000000000de842:
	movb $1, -3536(%rbp)
uuid_00000000000de844:
	mov -3560(%RBP),%RSP
	add $-3568, %RSP
uuid_00000000000de847:
	mov -3552(%RBP),%RSP
	add $-3568, %RSP
uuid_00000000000de84a:
	mov -3544(%RBP),%RSP
	add $-3568, %RSP
	mov -3536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de84b
	jmp uuid_00000000000de84d
uuid_00000000000de84b:
	movb $1, -3136(%rbp)
uuid_00000000000de84d:
	mov -3456(%RBP),%RSP
	add $-3568, %RSP
uuid_00000000000de850:
	mov -3152(%RBP),%RSP
	add $-3568, %RSP
uuid_00000000000de853:
	mov -3144(%RBP),%RSP
	add $-3568, %RSP
	mov -3136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de95f
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -3648(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de87a
	jmp uuid_00000000000de87c
uuid_00000000000de87a:
	push %RBP
	mov -3640(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de877
	jmp uuid_00000000000de879
uuid_00000000000de877:
	push %RBP
	mov -3632(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3824(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de871
	jmp uuid_00000000000de873
uuid_00000000000de871:
	push %RBP
	mov -3816(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de86e
	jmp uuid_00000000000de870
uuid_00000000000de86e:
	push %RBP
	mov -3808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4000(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de868
	jmp uuid_00000000000de86a
uuid_00000000000de868:
	push %RBP
	mov -3992(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de865
	jmp uuid_00000000000de867
uuid_00000000000de865:
	push %RBP
	mov -3984(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4176(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de85f
	jmp uuid_00000000000de861
uuid_00000000000de85f:
	push %RBP
	jmp uuid_00000000000de85c
	jmp uuid_00000000000de85e
uuid_00000000000de85c:
	push %RBP
	mov -4112(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4216(%rbp)
	pushq $uuid_00000000000db462
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de859
	jmp uuid_00000000000de85b
uuid_00000000000de859:
	movb $1, -4184(%rbp)
uuid_00000000000de85b:
	mov -4208(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000de85e:
	mov -4200(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000de861:
	mov -4192(%RBP),%RSP
	add $-4216, %RSP
	mov -4184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de862
	jmp uuid_00000000000de864
uuid_00000000000de862:
	movb $1, -4008(%rbp)
uuid_00000000000de864:
	mov -4104(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000de867:
	mov -4024(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000de86a:
	mov -4016(%RBP),%RSP
	add $-4216, %RSP
	mov -4008(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de86b
	jmp uuid_00000000000de86d
uuid_00000000000de86b:
	movb $1, -3832(%rbp)
uuid_00000000000de86d:
	mov -3928(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000de870:
	mov -3848(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000de873:
	mov -3840(%RBP),%RSP
	add $-4216, %RSP
	mov -3832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de874
	jmp uuid_00000000000de876
uuid_00000000000de874:
	movb $1, -3656(%rbp)
uuid_00000000000de876:
	mov -3752(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000de879:
	mov -3672(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000de87c:
	mov -3664(%RBP),%RSP
	add $-4216, %RSP
	mov -3656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de95c
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -4296(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de8ab
	jmp uuid_00000000000de8ad
uuid_00000000000de8ab:
	push %RBP
	mov -4288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de8a8
	jmp uuid_00000000000de8aa
uuid_00000000000de8a8:
	push %RBP
	mov -4280(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4472(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de8a2
	jmp uuid_00000000000de8a4
uuid_00000000000de8a2:
	push %RBP
	pushq -4448(%RBP)
	pushq -4456(%RBP)
	pushq -4464(%RBP)
	jmp uuid_00000000000de89f
	jmp uuid_00000000000de8a1
uuid_00000000000de89f:
	push %RBP
	mov -4440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4600(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de89c
	jmp uuid_00000000000de89e
uuid_00000000000de89c:
	push %RBP
	mov -4432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	pushq -4672(%rbp)
	pushq -4680(%rbp)
	pushq $0
	push %RBP
	mov -4752(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de896
	jmp uuid_00000000000de898
uuid_00000000000de896:
	push %RBP
	jmp uuid_00000000000de893
	jmp uuid_00000000000de895
uuid_00000000000de893:
	push %RBP
	mov -4688(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de890
	jmp uuid_00000000000de892
uuid_00000000000de890:
	movb $1, -4760(%rbp)
uuid_00000000000de892:
	mov -4784(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000de895:
	mov -4776(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000de898:
	mov -4768(%RBP),%RSP
	add $-4792, %RSP
	mov -4760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de899
	jmp uuid_00000000000de89b
uuid_00000000000de899:
	movb $1, -4480(%rbp)
uuid_00000000000de89b:
	mov -4608(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000de89e:
	mov -4528(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000de8a1:
	mov -4496(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000de8a4:
	mov -4488(%RBP),%RSP
	add $-4792, %RSP
	mov -4480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de8a5
	jmp uuid_00000000000de8a7
uuid_00000000000de8a5:
	movb $1, -4304(%rbp)
uuid_00000000000de8a7:
	mov -4400(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000de8aa:
	mov -4320(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000de8ad:
	mov -4312(%RBP),%RSP
	add $-4792, %RSP
	mov -4304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de959
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -4872(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de8d9
	jmp uuid_00000000000de8db
uuid_00000000000de8d9:
	push %RBP
	mov -4864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de8d6
	jmp uuid_00000000000de8d8
uuid_00000000000de8d6:
	push %RBP
	mov -4856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de8d3
	jmp uuid_00000000000de8d5
uuid_00000000000de8d3:
	movb $1, -4880(%rbp)
uuid_00000000000de8d5:
	mov -4976(%RBP),%RSP
	add $-5048, %RSP
uuid_00000000000de8d8:
	mov -4896(%RBP),%RSP
	add $-5048, %RSP
uuid_00000000000de8db:
	mov -4888(%RBP),%RSP
	add $-5048, %RSP
	mov -4880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de956
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de955
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de958
uuid_00000000000de956:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de952
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $3
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de94f
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -280(%rbp)
	pushq $3
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -5184(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	mov -5152(%RBP), %RAX
	push %RAX
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function fragment::chain : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq -5136(%rbp)
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	pushq -5264(%rbp)
	pushq -5272(%rbp)
	pushq -5280(%rbp)
	pushq -5288(%rbp)
	pushq -5296(%rbp)
	pushq -5304(%rbp)
	pushq -5312(%rbp)
	pushq -5320(%rbp)
	pushq -5328(%rbp)
	pushq -5336(%rbp)
	pushq -5344(%rbp)
	pushq -5352(%rbp)
	pushq -5360(%rbp)
	pushq -5368(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000de951
uuid_00000000000de94f:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -280(%rbp)
	pushq $3
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -5184(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	mov -5152(%RBP), %RAX
	push %RAX
	pushq $3
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function fragment::chain : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq -5136(%rbp)
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	pushq -5264(%rbp)
	pushq -5272(%rbp)
	pushq -5280(%rbp)
	pushq -5288(%rbp)
	pushq -5296(%rbp)
	pushq -5304(%rbp)
	pushq -5312(%rbp)
	pushq -5320(%rbp)
	pushq -5328(%rbp)
	pushq -5336(%rbp)
	pushq -5344(%rbp)
	pushq -5352(%rbp)
	pushq -5360(%rbp)
	pushq -5368(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de951:
	mov -5064(%RBP),%RSP
	add $-5368, %RSP
	jmp uuid_00000000000de954
uuid_00000000000de952:
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	push %RBP
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq $0
	push %RBP
	mov -5208(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de8e2
	jmp uuid_00000000000de8e4
uuid_00000000000de8e2:
	push %RBP
	jmp uuid_00000000000de8df
	jmp uuid_00000000000de8e1
uuid_00000000000de8df:
	push %RBP
	mov -5144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de8dc
	jmp uuid_00000000000de8de
uuid_00000000000de8dc:
	movb $1, -5216(%rbp)
uuid_00000000000de8de:
	mov -5240(%RBP),%RSP
	add $-5248, %RSP
uuid_00000000000de8e1:
	mov -5232(%RBP),%RSP
	add $-5248, %RSP
uuid_00000000000de8e4:
	mov -5224(%RBP),%RSP
	add $-5248, %RSP
	mov -5216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de94c
	push %RBP
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq $0
	push %RBP
	mov -5328(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de90c
	jmp uuid_00000000000de90e
uuid_00000000000de90c:
	push %RBP
	mov -5320(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5424(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de8fa
	jmp uuid_00000000000de8fc
uuid_00000000000de8fa:
	push %RBP
	mov -5416(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5520(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de8e8
	jmp uuid_00000000000de8ea
uuid_00000000000de8e8:
	push %RBP
	pushq -5496(%RBP)
	pushq -5504(%RBP)
	pushq -5512(%RBP)
	jmp uuid_00000000000de8e5
	jmp uuid_00000000000de8e7
uuid_00000000000de8e5:
	movb $1, -5528(%rbp)
uuid_00000000000de8e7:
	mov -5544(%RBP),%RSP
	add $-5568, %RSP
uuid_00000000000de8ea:
	mov -5536(%RBP),%RSP
	add $-5568, %RSP
	mov -5528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de8f7
	jmp uuid_00000000000de8f9
uuid_00000000000de8f7:
	push %RBP
	mov -5408(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5648(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de8f1
	jmp uuid_00000000000de8f3
uuid_00000000000de8f1:
	push %RBP
	jmp uuid_00000000000de8ee
	jmp uuid_00000000000de8f0
uuid_00000000000de8ee:
	push %RBP
	mov -5584(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de8eb
	jmp uuid_00000000000de8ed
uuid_00000000000de8eb:
	movb $1, -5656(%rbp)
uuid_00000000000de8ed:
	mov -5680(%RBP),%RSP
	add $-5688, %RSP
uuid_00000000000de8f0:
	mov -5672(%RBP),%RSP
	add $-5688, %RSP
uuid_00000000000de8f3:
	mov -5664(%RBP),%RSP
	add $-5688, %RSP
	mov -5656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de8f4
	jmp uuid_00000000000de8f6
uuid_00000000000de8f4:
	movb $1, -5432(%rbp)
uuid_00000000000de8f6:
	mov -5576(%RBP),%RSP
	add $-5688, %RSP
uuid_00000000000de8f9:
	mov -5448(%RBP),%RSP
	add $-5688, %RSP
uuid_00000000000de8fc:
	mov -5440(%RBP),%RSP
	add $-5688, %RSP
	mov -5432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de909
	jmp uuid_00000000000de90b
uuid_00000000000de909:
	push %RBP
	mov -5312(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5768(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de903
	jmp uuid_00000000000de905
uuid_00000000000de903:
	push %RBP
	jmp uuid_00000000000de900
	jmp uuid_00000000000de902
uuid_00000000000de900:
	push %RBP
	mov -5704(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5808(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de8fd
	jmp uuid_00000000000de8ff
uuid_00000000000de8fd:
	movb $1, -5776(%rbp)
uuid_00000000000de8ff:
	mov -5800(%RBP),%RSP
	add $-5808, %RSP
uuid_00000000000de902:
	mov -5792(%RBP),%RSP
	add $-5808, %RSP
uuid_00000000000de905:
	mov -5784(%RBP),%RSP
	add $-5808, %RSP
	mov -5776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de906
	jmp uuid_00000000000de908
uuid_00000000000de906:
	movb $1, -5336(%rbp)
uuid_00000000000de908:
	mov -5696(%RBP),%RSP
	add $-5808, %RSP
uuid_00000000000de90b:
	mov -5352(%RBP),%RSP
	add $-5808, %RSP
uuid_00000000000de90e:
	mov -5344(%RBP),%RSP
	add $-5808, %RSP
	mov -5336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de949
	push %RBP
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq $0
	push %RBP
	mov -5888(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de915
	jmp uuid_00000000000de917
uuid_00000000000de915:
	push %RBP
	jmp uuid_00000000000de912
	jmp uuid_00000000000de914
uuid_00000000000de912:
	push %RBP
	mov -5824(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de90f
	jmp uuid_00000000000de911
uuid_00000000000de90f:
	movb $1, -5896(%rbp)
uuid_00000000000de911:
	mov -5920(%RBP),%RSP
	add $-5928, %RSP
uuid_00000000000de914:
	mov -5912(%RBP),%RSP
	add $-5928, %RSP
uuid_00000000000de917:
	mov -5904(%RBP),%RSP
	add $-5928, %RSP
	mov -5896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de946
	push %RBP
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq $0
	push %RBP
	mov -6008(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de93f
	jmp uuid_00000000000de941
uuid_00000000000de93f:
	push %RBP
	mov -6000(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6104(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de92d
	jmp uuid_00000000000de92f
uuid_00000000000de92d:
	push %RBP
	mov -6096(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6200(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de91b
	jmp uuid_00000000000de91d
uuid_00000000000de91b:
	push %RBP
	pushq -6176(%RBP)
	pushq -6184(%RBP)
	pushq -6192(%RBP)
	jmp uuid_00000000000de918
	jmp uuid_00000000000de91a
uuid_00000000000de918:
	movb $1, -6208(%rbp)
uuid_00000000000de91a:
	mov -6224(%RBP),%RSP
	add $-6248, %RSP
uuid_00000000000de91d:
	mov -6216(%RBP),%RSP
	add $-6248, %RSP
	mov -6208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de92a
	jmp uuid_00000000000de92c
uuid_00000000000de92a:
	push %RBP
	mov -6088(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6328(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de924
	jmp uuid_00000000000de926
uuid_00000000000de924:
	push %RBP
	jmp uuid_00000000000de921
	jmp uuid_00000000000de923
uuid_00000000000de921:
	push %RBP
	mov -6264(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de91e
	jmp uuid_00000000000de920
uuid_00000000000de91e:
	movb $1, -6336(%rbp)
uuid_00000000000de920:
	mov -6360(%RBP),%RSP
	add $-6368, %RSP
uuid_00000000000de923:
	mov -6352(%RBP),%RSP
	add $-6368, %RSP
uuid_00000000000de926:
	mov -6344(%RBP),%RSP
	add $-6368, %RSP
	mov -6336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de927
	jmp uuid_00000000000de929
uuid_00000000000de927:
	movb $1, -6112(%rbp)
uuid_00000000000de929:
	mov -6256(%RBP),%RSP
	add $-6368, %RSP
uuid_00000000000de92c:
	mov -6128(%RBP),%RSP
	add $-6368, %RSP
uuid_00000000000de92f:
	mov -6120(%RBP),%RSP
	add $-6368, %RSP
	mov -6112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de93c
	jmp uuid_00000000000de93e
uuid_00000000000de93c:
	push %RBP
	mov -5992(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6448(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de936
	jmp uuid_00000000000de938
uuid_00000000000de936:
	push %RBP
	jmp uuid_00000000000de933
	jmp uuid_00000000000de935
uuid_00000000000de933:
	push %RBP
	mov -6384(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6488(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de930
	jmp uuid_00000000000de932
uuid_00000000000de930:
	movb $1, -6456(%rbp)
uuid_00000000000de932:
	mov -6480(%RBP),%RSP
	add $-6488, %RSP
uuid_00000000000de935:
	mov -6472(%RBP),%RSP
	add $-6488, %RSP
uuid_00000000000de938:
	mov -6464(%RBP),%RSP
	add $-6488, %RSP
	mov -6456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de939
	jmp uuid_00000000000de93b
uuid_00000000000de939:
	movb $1, -6016(%rbp)
uuid_00000000000de93b:
	mov -6376(%RBP),%RSP
	add $-6488, %RSP
uuid_00000000000de93e:
	mov -6032(%RBP),%RSP
	add $-6488, %RSP
uuid_00000000000de941:
	mov -6024(%RBP),%RSP
	add $-6488, %RSP
	mov -6016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de943
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de942
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de945
uuid_00000000000de943:
#call function compile-constructor : Arrow<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -6368(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call compile_SB_constructor_CL_ArrowFragmentConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de945:
	mov -5936(%RBP),%RSP
	add $-6488, %RSP
	jmp uuid_00000000000de948
uuid_00000000000de946:
#call function compile-constructor : Arrow<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -5928(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call compile_SB_constructor_CL_ArrowFragmentConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de948:
	mov -5816(%RBP),%RSP
	add $-5928, %RSP
	jmp uuid_00000000000de94b
uuid_00000000000de949:
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -5688(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de94b:
	mov -5256(%RBP),%RSP
	add $-5808, %RSP
	jmp uuid_00000000000de94e
uuid_00000000000de94c:
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -5248(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de94e:
	mov -5136(%RBP),%RSP
	add $-5248, %RSP
uuid_00000000000de954:
	mov -5056(%RBP),%RSP
	add $-5248, %RSP
uuid_00000000000de958:
	mov -4800(%RBP),%RSP
	add $-5248, %RSP
	jmp uuid_00000000000de95b
uuid_00000000000de959:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	pushq -4672(%rbp)
	pushq -4680(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -280(%RBP), %RAX
	mov -4824(%RBP), %R14
	subq %R14,%RAX
	push %RAX
#call function fragment::local-variable : Arrow<Cons<I64,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4832(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_local_SB_variable_CL_ArrowFragmentConsTypeI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -4792(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -4840(%rbp)
	pushq -4848(%rbp)
	pushq -4856(%rbp)
	pushq -4864(%rbp)
	pushq -4872(%rbp)
	pushq -4880(%rbp)
	pushq -4888(%rbp)
	pushq -4896(%rbp)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -4976(%rbp)
	pushq -4984(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de8d0
#call function compile-push-rvalue : Arrow<Cons<Cons<FContext,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call compile_SB_push_SB_rvalue_CL_ArrowFragmentConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	pushq $0
	pushq $0
	pushq $3
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq $0
	push %RBP
	mov -5168(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de8c3
	jmp uuid_00000000000de8c5
uuid_00000000000de8c3:
	push %RBP
	jmp uuid_00000000000de8c0
	jmp uuid_00000000000de8c2
uuid_00000000000de8c0:
	push %RBP
	mov -5152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5272(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de8ba
	jmp uuid_00000000000de8bc
uuid_00000000000de8ba:
	push %RBP
	jmp uuid_00000000000de8b7
	jmp uuid_00000000000de8b9
uuid_00000000000de8b7:
	push %RBP
	jmp uuid_00000000000de8b4
	jmp uuid_00000000000de8b6
uuid_00000000000de8b4:
	push %RBP
	mov -5232(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de8b1
	jmp uuid_00000000000de8b3
uuid_00000000000de8b1:
	movb $1, -5280(%rbp)
uuid_00000000000de8b3:
	mov -5312(%RBP),%RSP
	add $-5384, %RSP
uuid_00000000000de8b6:
	mov -5304(%RBP),%RSP
	add $-5384, %RSP
uuid_00000000000de8b9:
	mov -5296(%RBP),%RSP
	add $-5384, %RSP
uuid_00000000000de8bc:
	mov -5288(%RBP),%RSP
	add $-5384, %RSP
	mov -5280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de8bd
	jmp uuid_00000000000de8bf
uuid_00000000000de8bd:
	movb $1, -5176(%rbp)
uuid_00000000000de8bf:
	mov -5200(%RBP),%RSP
	add $-5384, %RSP
uuid_00000000000de8c2:
	mov -5192(%RBP),%RSP
	add $-5384, %RSP
uuid_00000000000de8c5:
	mov -5184(%RBP),%RSP
	add $-5384, %RSP
	mov -5176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de8ca
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de8c9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de8cc
uuid_00000000000de8ca:
#call function fragment-context::lookup-soft : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000db5a4
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5320(%rbp)
	pushq -5328(%rbp)
	pushq -5336(%rbp)
	pushq -5344(%rbp)
	pushq -5352(%rbp)
	pushq -5360(%rbp)
	pushq -5368(%rbp)
	pushq -5376(%rbp)
	pushq -5384(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_SB_soft_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	pushq -5480(%RBP)
	pushq -5488(%RBP)
	pushq -5496(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de8c6
	jmp uuid_00000000000de8c8
uuid_00000000000de8c6:
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000db5a4
	pushq $0
	pushq $0
	pushq $3
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -5320(%rbp)
	pushq -5328(%rbp)
	pushq -5336(%rbp)
	pushq -5344(%rbp)
	pushq -5352(%rbp)
	pushq -5360(%rbp)
	pushq -5368(%rbp)
	pushq -5376(%rbp)
	pushq -5384(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	pushq -5592(%rbp)
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	pushq -5672(%rbp)
	pushq -5680(%rbp)
	pushq -5688(%rbp)
	pushq -5696(%rbp)
	pushq -5704(%rbp)
	pushq -5712(%rbp)
	pushq -5720(%rbp)
	pushq $uuid_00000000000dbb61
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -5016(%RBP)
	popq -5008(%RBP)
	popq -5000(%RBP)
uuid_00000000000de8c8:
	mov -5568(%RBP),%RSP
	add $-5720, %RSP
uuid_00000000000de8cc:
	mov -5096(%RBP),%RSP
	add $-5720, %RSP
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000db5a4
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000de8cd
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000de8cd
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de8ce
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4824(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de8cf
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000de8d2
uuid_00000000000de8d0:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -280(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000de8ae
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000de8ae
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $0
	pushq $uuid_00000000000dae18
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4840(%rbp)
	pushq -4848(%rbp)
	pushq -4856(%rbp)
	pushq -4864(%rbp)
	pushq -4872(%rbp)
	pushq -4880(%rbp)
	pushq -4888(%rbp)
	pushq -4896(%rbp)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -4976(%rbp)
	pushq -4984(%rbp)
	pushq $uuid_00000000000dd3d6
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	pushq $0
	pushq $uuid_00000000000dd606
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000dd3d6
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de5cd
	pushq $2
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4840(%rbp)
	pushq -4848(%rbp)
	pushq -4856(%rbp)
	pushq -4864(%rbp)
	pushq -4872(%rbp)
	pushq -4880(%rbp)
	pushq -4888(%rbp)
	pushq -4896(%rbp)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -4976(%rbp)
	pushq -4984(%rbp)
	pushq $uuid_00000000000dd3d6
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de8af
	pushq $2
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000dd3d6
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	pushq $0
	pushq $uuid_00000000000de8b0
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de8d2:
	mov -4992(%RBP),%RSP
	add $-4992, %RSP
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -4832(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de95b:
	mov -4224(%RBP),%RSP
	add $-4992, %RSP
	jmp uuid_00000000000de95e
uuid_00000000000de95c:
	mov -280(%RBP), %RAX
	mov $-8, %R14
	addq %R14,%RAX
	push %RAX
#call function cc-blob : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000de87d
	pushq -4032(%rbp)
	pushq -4040(%rbp)
	pushq -4048(%rbp)
	pushq -4056(%rbp)
	pushq -4064(%rbp)
	pushq -4072(%rbp)
	pushq -4080(%rbp)
	pushq -4088(%rbp)
	pushq -4096(%rbp)
	pushq -4224(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -4344(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq -3880(%rbp)
	pushq -3888(%rbp)
	pushq -3896(%rbp)
	pushq -3904(%rbp)
	pushq -3912(%rbp)
	pushq -3920(%rbp)
	mov -4312(%RBP), %RAX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	mov -4464(%RBP), %RAX
	push %RAX
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de87e
#call function compile-maybe-push-stack : Arrow<Cons<Cons<Cons<Cons<FContext,I64>,Fragment>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -4496(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4464(%RBP), %RAX
	push %RAX
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	pushq -4408(%rbp)
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call compile_SB_maybe_SB_push_SB_stack_CL_ArrowFragmentConsASTConsTypeConsFragmentConsI64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	popq -4528(%RBP)
	popq -4520(%RBP)
	popq -4512(%RBP)
	popq -4504(%RBP)
	popq -4496(%RBP)
	popq -4488(%RBP)
	popq -4480(%RBP)
	popq -4472(%RBP)
	popq -4464(%RBP)
	popq -4456(%RBP)
	popq -4448(%RBP)
	popq -4440(%RBP)
	popq -4432(%RBP)
	popq -4424(%RBP)
	popq -4416(%RBP)
	popq -4408(%RBP)
	popq -4400(%RBP)
	popq -4392(%RBP)
	popq -4384(%RBP)
	jmp uuid_00000000000de880
uuid_00000000000de87e:
uuid_00000000000de880:
	mov -4544(%RBP),%RSP
	add $-4544, %RSP
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	pushq -4408(%rbp)
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq -3880(%rbp)
	pushq -3888(%rbp)
	pushq -3896(%rbp)
	pushq -3904(%rbp)
	pushq -3912(%rbp)
	pushq -3920(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -4528(%RBP)
	popq -4520(%RBP)
	popq -4512(%RBP)
	popq -4504(%RBP)
	popq -4496(%RBP)
	popq -4488(%RBP)
	popq -4480(%RBP)
	popq -4472(%RBP)
	popq -4464(%RBP)
	popq -4456(%RBP)
	popq -4448(%RBP)
	popq -4440(%RBP)
	popq -4432(%RBP)
	popq -4424(%RBP)
	popq -4416(%RBP)
	popq -4408(%RBP)
	popq -4400(%RBP)
	popq -4392(%RBP)
	popq -4384(%RBP)
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -4344(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq -3680(%rbp)
	pushq -3688(%rbp)
	pushq -3696(%rbp)
	pushq -3704(%rbp)
	pushq -3712(%rbp)
	pushq -3720(%rbp)
	pushq -3728(%rbp)
	pushq -3736(%rbp)
	pushq -3744(%rbp)
	mov -4312(%RBP), %RAX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de881
#call function compile-maybe-push-stack : Arrow<Cons<Cons<Cons<Cons<FContext,I64>,Fragment>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -4664(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4632(%RBP), %RAX
	push %RAX
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	pushq -4568(%rbp)
	pushq -4576(%rbp)
	pushq -4584(%rbp)
	pushq -4592(%rbp)
	pushq -4600(%rbp)
	pushq -4608(%rbp)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	pushq -4672(%rbp)
	pushq -4680(%rbp)
	pushq -4688(%rbp)
	pushq -4696(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call compile_SB_maybe_SB_push_SB_stack_CL_ArrowFragmentConsASTConsTypeConsFragmentConsI64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	popq -4696(%RBP)
	popq -4688(%RBP)
	popq -4680(%RBP)
	popq -4672(%RBP)
	popq -4664(%RBP)
	popq -4656(%RBP)
	popq -4648(%RBP)
	popq -4640(%RBP)
	popq -4632(%RBP)
	popq -4624(%RBP)
	popq -4616(%RBP)
	popq -4608(%RBP)
	popq -4600(%RBP)
	popq -4592(%RBP)
	popq -4584(%RBP)
	popq -4576(%RBP)
	popq -4568(%RBP)
	popq -4560(%RBP)
	popq -4552(%RBP)
	jmp uuid_00000000000de883
uuid_00000000000de881:
uuid_00000000000de883:
	mov -4704(%RBP),%RSP
	add $-4704, %RSP
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	pushq -4568(%rbp)
	pushq -4576(%rbp)
	pushq -4584(%rbp)
	pushq -4592(%rbp)
	pushq -4600(%rbp)
	pushq -4608(%rbp)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	pushq -4672(%rbp)
	pushq -4680(%rbp)
	pushq -4688(%rbp)
	pushq -4696(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3680(%rbp)
	pushq -3688(%rbp)
	pushq -3696(%rbp)
	pushq -3704(%rbp)
	pushq -3712(%rbp)
	pushq -3720(%rbp)
	pushq -3728(%rbp)
	pushq -3736(%rbp)
	pushq -3744(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -4696(%RBP)
	popq -4688(%RBP)
	popq -4680(%RBP)
	popq -4672(%RBP)
	popq -4664(%RBP)
	popq -4656(%RBP)
	popq -4648(%RBP)
	popq -4640(%RBP)
	popq -4632(%RBP)
	popq -4624(%RBP)
	popq -4616(%RBP)
	popq -4608(%RBP)
	popq -4600(%RBP)
	popq -4592(%RBP)
	popq -4584(%RBP)
	popq -4576(%RBP)
	popq -4568(%RBP)
	popq -4560(%RBP)
	popq -4552(%RBP)
	push %RBP
#call function is-never : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3680(%rbp)
	pushq -3688(%rbp)
	pushq -3696(%rbp)
	pushq -3704(%rbp)
	pushq -3712(%rbp)
	pushq -3720(%rbp)
	pushq -3728(%rbp)
	pushq -3736(%rbp)
	pushq -3744(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_never_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de884
	jmp uuid_00000000000de886
uuid_00000000000de884:
#call function never-as-expr-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	pushq -4568(%rbp)
	pushq -4576(%rbp)
	pushq -4584(%rbp)
	pushq -4592(%rbp)
	pushq -4600(%rbp)
	pushq -4608(%rbp)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	pushq -4672(%rbp)
	pushq -4680(%rbp)
	pushq -4688(%rbp)
	pushq -4696(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq -3880(%rbp)
	pushq -3888(%rbp)
	pushq -3896(%rbp)
	pushq -3904(%rbp)
	pushq -3912(%rbp)
	pushq -3920(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call never_SB_as_SB_expr_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -4696(%RBP)
	popq -4688(%RBP)
	popq -4680(%RBP)
	popq -4672(%RBP)
	popq -4664(%RBP)
	popq -4656(%RBP)
	popq -4648(%RBP)
	popq -4640(%RBP)
	popq -4632(%RBP)
	popq -4624(%RBP)
	popq -4616(%RBP)
	popq -4608(%RBP)
	popq -4600(%RBP)
	popq -4592(%RBP)
	popq -4584(%RBP)
	popq -4576(%RBP)
	popq -4568(%RBP)
	popq -4560(%RBP)
	popq -4552(%RBP)
uuid_00000000000de886:
	mov -4712(%RBP),%RSP
	add $-4712, %RSP
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	pushq -4792(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -4824(%rbp)
	pushq -4832(%rbp)
	pushq -4840(%rbp)
	pushq -4848(%rbp)
	pushq -4856(%rbp)
	pushq -4864(%rbp)
	pushq $uuid_00000000000de887
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4224(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -4864(%RBP)
	popq -4856(%RBP)
	popq -4848(%RBP)
	popq -4840(%RBP)
	popq -4832(%RBP)
	popq -4824(%RBP)
	popq -4816(%RBP)
	popq -4808(%RBP)
	popq -4800(%RBP)
	popq -4792(%RBP)
	popq -4784(%RBP)
	popq -4776(%RBP)
	popq -4768(%RBP)
	popq -4760(%RBP)
	popq -4752(%RBP)
	popq -4744(%RBP)
	popq -4736(%RBP)
	popq -4728(%RBP)
	popq -4720(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	pushq -4792(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -4824(%rbp)
	pushq -4832(%rbp)
	pushq -4840(%rbp)
	pushq -4848(%rbp)
	pushq -4856(%rbp)
	pushq -4864(%rbp)
	pushq $uuid_00000000000de888
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4536(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -4864(%RBP)
	popq -4856(%RBP)
	popq -4848(%RBP)
	popq -4840(%RBP)
	popq -4832(%RBP)
	popq -4824(%RBP)
	popq -4816(%RBP)
	popq -4808(%RBP)
	popq -4800(%RBP)
	popq -4792(%RBP)
	popq -4784(%RBP)
	popq -4776(%RBP)
	popq -4768(%RBP)
	popq -4760(%RBP)
	popq -4752(%RBP)
	popq -4744(%RBP)
	popq -4736(%RBP)
	popq -4728(%RBP)
	popq -4720(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	pushq -4792(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -4824(%rbp)
	pushq -4832(%rbp)
	pushq -4840(%rbp)
	pushq -4848(%rbp)
	pushq -4856(%rbp)
	pushq -4864(%rbp)
	pushq $uuid_00000000000de889
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -4864(%RBP)
	popq -4856(%RBP)
	popq -4848(%RBP)
	popq -4840(%RBP)
	popq -4832(%RBP)
	popq -4824(%RBP)
	popq -4816(%RBP)
	popq -4808(%RBP)
	popq -4800(%RBP)
	popq -4792(%RBP)
	popq -4784(%RBP)
	popq -4776(%RBP)
	popq -4768(%RBP)
	popq -4760(%RBP)
	popq -4752(%RBP)
	popq -4744(%RBP)
	popq -4736(%RBP)
	popq -4728(%RBP)
	popq -4720(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	pushq -4792(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -4824(%rbp)
	pushq -4832(%rbp)
	pushq -4840(%rbp)
	pushq -4848(%rbp)
	pushq -4856(%rbp)
	pushq -4864(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de88a
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -4864(%RBP)
	popq -4856(%RBP)
	popq -4848(%RBP)
	popq -4840(%RBP)
	popq -4832(%RBP)
	popq -4824(%RBP)
	popq -4816(%RBP)
	popq -4808(%RBP)
	popq -4800(%RBP)
	popq -4792(%RBP)
	popq -4784(%RBP)
	popq -4776(%RBP)
	popq -4768(%RBP)
	popq -4760(%RBP)
	popq -4752(%RBP)
	popq -4744(%RBP)
	popq -4736(%RBP)
	popq -4728(%RBP)
	popq -4720(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000de88b
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de88a
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	pushq -4792(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -4824(%rbp)
	pushq -4832(%rbp)
	pushq -4840(%rbp)
	pushq -4848(%rbp)
	pushq -4856(%rbp)
	pushq -4864(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000daeae
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddd54
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -4232(%rbp)
	pushq -4240(%rbp)
	pushq -4248(%rbp)
	pushq -4256(%rbp)
	pushq -4264(%rbp)
	pushq -4272(%rbp)
	pushq -4280(%rbp)
	pushq -4288(%rbp)
	pushq -4296(%rbp)
	pushq -4304(%rbp)
	pushq -4312(%rbp)
	pushq -4320(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000de423
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq -3880(%rbp)
	pushq -3888(%rbp)
	pushq -3896(%rbp)
	pushq -3904(%rbp)
	pushq -3912(%rbp)
	pushq -3920(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	pushq -4408(%rbp)
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000daeb1
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3680(%rbp)
	pushq -3688(%rbp)
	pushq -3696(%rbp)
	pushq -3704(%rbp)
	pushq -3712(%rbp)
	pushq -3720(%rbp)
	pushq -3728(%rbp)
	pushq -3736(%rbp)
	pushq -3744(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	pushq -4568(%rbp)
	pushq -4576(%rbp)
	pushq -4584(%rbp)
	pushq -4592(%rbp)
	pushq -4600(%rbp)
	pushq -4608(%rbp)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	pushq -4672(%rbp)
	pushq -4680(%rbp)
	pushq -4688(%rbp)
	pushq -4696(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3a7
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3a7
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3a7
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de88a
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3680(%rbp)
	pushq -3688(%rbp)
	pushq -3696(%rbp)
	pushq -3704(%rbp)
	pushq -3712(%rbp)
	pushq -3720(%rbp)
	pushq -3728(%rbp)
	pushq -3736(%rbp)
	pushq -3744(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq -3880(%rbp)
	pushq -3888(%rbp)
	pushq -3896(%rbp)
	pushq -3904(%rbp)
	pushq -3912(%rbp)
	pushq -3920(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddd54
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function cc-blob : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,I64>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000de88c
	pushq -4872(%rbp)
	pushq -4880(%rbp)
	pushq -4888(%rbp)
	pushq -280(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsASTConsI64ConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	mov -4496(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -4536(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	push %RBP
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de88d
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000de88f
uuid_00000000000de88d:
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db557
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de88f:
	mov -4896(%RBP),%RSP
	add $-4896, %RSP
uuid_00000000000de95e:
	mov -3576(%RBP),%RSP
	add $-4896, %RSP
	jmp uuid_00000000000de961
uuid_00000000000de95f:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -3384(%rbp)
	pushq -3392(%rbp)
	pushq -3400(%rbp)
	pushq -3408(%rbp)
	pushq -3416(%rbp)
	pushq -3424(%rbp)
	pushq -3432(%rbp)
	pushq -3440(%rbp)
	pushq -3448(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de856
	jmp uuid_00000000000de858
uuid_00000000000de856:
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000dd3d6
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de854
	pushq $2
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de855
	pushq $2
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000dd3d6
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	pushq $0
	pushq $uuid_00000000000ddf26
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de858:
	mov -3576(%RBP),%RSP
	add $-3576, %RSP
uuid_00000000000de961:
	mov -3056(%RBP),%RSP
	add $-3576, %RSP
	jmp uuid_00000000000de964
uuid_00000000000de962:
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2912(%rbp)
	pushq -2920(%rbp)
	pushq -2928(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3056(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc575
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db996
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db025
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db5e1
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daeaa
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -3064(%rbp)
	pushq -3072(%rbp)
	pushq -3080(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de964:
	mov -2712(%RBP),%RSP
	add $-3080, %RSP
	jmp uuid_00000000000de967
uuid_00000000000de965:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	pushq -2568(%rbp)
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de818
	push %RBP
#call function is-array : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2712(%rbp)
	pushq -2720(%rbp)
	pushq -2728(%rbp)
	mov %RBX, %RBP
	call is_SB_array_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de815
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	pushq -2568(%rbp)
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	pushq -280(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000de817
uuid_00000000000de815:
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2712(%rbp)
	pushq -2720(%rbp)
	pushq -2728(%rbp)
	pushq $uuid_00000000000db084
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
	pushq -2752(%rbp)
	pushq -2760(%rbp)
	pushq -2768(%rbp)
	pushq $0
	push %RBP
	mov -2800(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de7f0
	jmp uuid_00000000000de7f2
uuid_00000000000de7f0:
	push %RBP
	mov -2792(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2864(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de7e7
	jmp uuid_00000000000de7e9
uuid_00000000000de7e7:
	push %RBP
	mov -2856(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2928(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de7de
	jmp uuid_00000000000de7e0
uuid_00000000000de7de:
	push %RBP
	mov -2920(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2992(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de7db
	jmp uuid_00000000000de7dd
uuid_00000000000de7db:
	push %RBP
	pushq -2896(%RBP)
	pushq -2904(%RBP)
	pushq -2912(%RBP)
	mov -3024(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de7d8
	jmp uuid_00000000000de7da
uuid_00000000000de7d8:
	movb $1, -2936(%rbp)
uuid_00000000000de7da:
	mov -3000(%RBP),%RSP
	add $-3024, %RSP
uuid_00000000000de7dd:
	mov -2952(%RBP),%RSP
	add $-3024, %RSP
uuid_00000000000de7e0:
	mov -2944(%RBP),%RSP
	add $-3024, %RSP
	mov -2936(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de7e4
	jmp uuid_00000000000de7e6
uuid_00000000000de7e4:
	push %RBP
	jmp uuid_00000000000de7e1
	jmp uuid_00000000000de7e3
uuid_00000000000de7e1:
	movb $1, -2872(%rbp)
uuid_00000000000de7e3:
	mov -3032(%RBP),%RSP
	add $-3032, %RSP
uuid_00000000000de7e6:
	mov -2888(%RBP),%RSP
	add $-3032, %RSP
uuid_00000000000de7e9:
	mov -2880(%RBP),%RSP
	add $-3032, %RSP
	mov -2872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de7ed
	jmp uuid_00000000000de7ef
uuid_00000000000de7ed:
	push %RBP
	mov -2784(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3048(%rbp)
	pushq $uuid_00000000000db084
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de7ea
	jmp uuid_00000000000de7ec
uuid_00000000000de7ea:
	movb $1, -2808(%rbp)
uuid_00000000000de7ec:
	mov -3040(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000de7ef:
	mov -2824(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000de7f2:
	mov -2816(%RBP),%RSP
	add $-3048, %RSP
	mov -2808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de812
	push %RBP
	pushq -2752(%rbp)
	pushq -2760(%rbp)
	pushq -2768(%rbp)
	pushq $0
	push %RBP
	mov -3080(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de80b
	jmp uuid_00000000000de80d
uuid_00000000000de80b:
	push %RBP
	mov -3072(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de802
	jmp uuid_00000000000de804
uuid_00000000000de802:
	push %RBP
	mov -3136(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de7f9
	jmp uuid_00000000000de7fb
uuid_00000000000de7f9:
	push %RBP
	mov -3200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de7f6
	jmp uuid_00000000000de7f8
uuid_00000000000de7f6:
	push %RBP
	pushq -3176(%RBP)
	pushq -3184(%RBP)
	pushq -3192(%RBP)
	jmp uuid_00000000000de7f3
	jmp uuid_00000000000de7f5
uuid_00000000000de7f3:
	movb $1, -3216(%rbp)
uuid_00000000000de7f5:
	mov -3280(%RBP),%RSP
	add $-3304, %RSP
uuid_00000000000de7f8:
	mov -3232(%RBP),%RSP
	add $-3304, %RSP
uuid_00000000000de7fb:
	mov -3224(%RBP),%RSP
	add $-3304, %RSP
	mov -3216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de7ff
	jmp uuid_00000000000de801
uuid_00000000000de7ff:
	push %RBP
	pushq -3112(%RBP)
	pushq -3120(%RBP)
	pushq -3128(%RBP)
	mov -3336(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de7fc
	jmp uuid_00000000000de7fe
uuid_00000000000de7fc:
	movb $1, -3152(%rbp)
uuid_00000000000de7fe:
	mov -3312(%RBP),%RSP
	add $-3336, %RSP
uuid_00000000000de801:
	mov -3168(%RBP),%RSP
	add $-3336, %RSP
uuid_00000000000de804:
	mov -3160(%RBP),%RSP
	add $-3336, %RSP
	mov -3152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de808
	jmp uuid_00000000000de80a
uuid_00000000000de808:
	push %RBP
	mov -3064(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3352(%rbp)
	pushq $uuid_00000000000db084
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de805
	jmp uuid_00000000000de807
uuid_00000000000de805:
	movb $1, -3088(%rbp)
uuid_00000000000de807:
	mov -3344(%RBP),%RSP
	add $-3352, %RSP
uuid_00000000000de80a:
	mov -3104(%RBP),%RSP
	add $-3352, %RSP
uuid_00000000000de80d:
	mov -3096(%RBP),%RSP
	add $-3352, %RSP
	mov -3088(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de80f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de80e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de811
uuid_00000000000de80f:
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000db556
	pushq $0
	pushq $0
	pushq $3
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daff0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	pushq -2568(%rbp)
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	pushq -280(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3288(%rbp)
	pushq -3296(%rbp)
	pushq -3304(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db557
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3288(%rbp)
	pushq -3296(%rbp)
	pushq -3304(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -280(%RBP), %RAX
	subq %R14,%RAX
	push %RAX
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -3360(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de811:
	mov -3056(%RBP),%RSP
	add $-3360, %RSP
	jmp uuid_00000000000de814
uuid_00000000000de812:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	pushq -2568(%rbp)
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	pushq -280(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de814:
	mov -2776(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000de817:
	mov -2744(%RBP),%RSP
	add $-3048, %RSP
	jmp uuid_00000000000de81a
uuid_00000000000de818:
	push %RBP
#call function is-array : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2712(%rbp)
	pushq -2720(%rbp)
	pushq -2728(%rbp)
	mov %RBX, %RBP
	call is_SB_array_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de7d5
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000db50d
	pushq $0
	pushq $0
	pushq $3
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daff0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	pushq -2568(%rbp)
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	pushq -280(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000de7d7
uuid_00000000000de7d5:
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2712(%rbp)
	pushq -2720(%rbp)
	pushq -2728(%rbp)
	pushq $uuid_00000000000db084
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
	pushq -2752(%rbp)
	pushq -2760(%rbp)
	pushq -2768(%rbp)
	pushq $0
	push %RBP
	mov -2800(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de7b0
	jmp uuid_00000000000de7b2
uuid_00000000000de7b0:
	push %RBP
	mov -2792(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2864(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de7a7
	jmp uuid_00000000000de7a9
uuid_00000000000de7a7:
	push %RBP
	mov -2856(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2928(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de79e
	jmp uuid_00000000000de7a0
uuid_00000000000de79e:
	push %RBP
	mov -2920(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2992(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de79b
	jmp uuid_00000000000de79d
uuid_00000000000de79b:
	push %RBP
	pushq -2896(%RBP)
	pushq -2904(%RBP)
	pushq -2912(%RBP)
	mov -3024(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de798
	jmp uuid_00000000000de79a
uuid_00000000000de798:
	movb $1, -2936(%rbp)
uuid_00000000000de79a:
	mov -3000(%RBP),%RSP
	add $-3024, %RSP
uuid_00000000000de79d:
	mov -2952(%RBP),%RSP
	add $-3024, %RSP
uuid_00000000000de7a0:
	mov -2944(%RBP),%RSP
	add $-3024, %RSP
	mov -2936(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de7a4
	jmp uuid_00000000000de7a6
uuid_00000000000de7a4:
	push %RBP
	jmp uuid_00000000000de7a1
	jmp uuid_00000000000de7a3
uuid_00000000000de7a1:
	movb $1, -2872(%rbp)
uuid_00000000000de7a3:
	mov -3032(%RBP),%RSP
	add $-3032, %RSP
uuid_00000000000de7a6:
	mov -2888(%RBP),%RSP
	add $-3032, %RSP
uuid_00000000000de7a9:
	mov -2880(%RBP),%RSP
	add $-3032, %RSP
	mov -2872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de7ad
	jmp uuid_00000000000de7af
uuid_00000000000de7ad:
	push %RBP
	mov -2784(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3048(%rbp)
	pushq $uuid_00000000000db084
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de7aa
	jmp uuid_00000000000de7ac
uuid_00000000000de7aa:
	movb $1, -2808(%rbp)
uuid_00000000000de7ac:
	mov -3040(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000de7af:
	mov -2824(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000de7b2:
	mov -2816(%RBP),%RSP
	add $-3048, %RSP
	mov -2808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de7d2
	push %RBP
	pushq -2752(%rbp)
	pushq -2760(%rbp)
	pushq -2768(%rbp)
	pushq $0
	push %RBP
	mov -3080(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de7cb
	jmp uuid_00000000000de7cd
uuid_00000000000de7cb:
	push %RBP
	mov -3072(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de7c2
	jmp uuid_00000000000de7c4
uuid_00000000000de7c2:
	push %RBP
	mov -3136(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de7b9
	jmp uuid_00000000000de7bb
uuid_00000000000de7b9:
	push %RBP
	mov -3200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de7b6
	jmp uuid_00000000000de7b8
uuid_00000000000de7b6:
	push %RBP
	pushq -3176(%RBP)
	pushq -3184(%RBP)
	pushq -3192(%RBP)
	jmp uuid_00000000000de7b3
	jmp uuid_00000000000de7b5
uuid_00000000000de7b3:
	movb $1, -3216(%rbp)
uuid_00000000000de7b5:
	mov -3280(%RBP),%RSP
	add $-3304, %RSP
uuid_00000000000de7b8:
	mov -3232(%RBP),%RSP
	add $-3304, %RSP
uuid_00000000000de7bb:
	mov -3224(%RBP),%RSP
	add $-3304, %RSP
	mov -3216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de7bf
	jmp uuid_00000000000de7c1
uuid_00000000000de7bf:
	push %RBP
	pushq -3112(%RBP)
	pushq -3120(%RBP)
	pushq -3128(%RBP)
	mov -3336(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de7bc
	jmp uuid_00000000000de7be
uuid_00000000000de7bc:
	movb $1, -3152(%rbp)
uuid_00000000000de7be:
	mov -3312(%RBP),%RSP
	add $-3336, %RSP
uuid_00000000000de7c1:
	mov -3168(%RBP),%RSP
	add $-3336, %RSP
uuid_00000000000de7c4:
	mov -3160(%RBP),%RSP
	add $-3336, %RSP
	mov -3152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de7c8
	jmp uuid_00000000000de7ca
uuid_00000000000de7c8:
	push %RBP
	mov -3064(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3352(%rbp)
	pushq $uuid_00000000000db084
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de7c5
	jmp uuid_00000000000de7c7
uuid_00000000000de7c5:
	movb $1, -3088(%rbp)
uuid_00000000000de7c7:
	mov -3344(%RBP),%RSP
	add $-3352, %RSP
uuid_00000000000de7ca:
	mov -3104(%RBP),%RSP
	add $-3352, %RSP
uuid_00000000000de7cd:
	mov -3096(%RBP),%RSP
	add $-3352, %RSP
	mov -3088(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de7cf
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de7ce
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de7d1
uuid_00000000000de7cf:
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000db50d
	pushq $0
	pushq $0
	pushq $3
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daff0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	pushq -2568(%rbp)
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	pushq -280(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de7d1:
	mov -3056(%RBP),%RSP
	add $-3352, %RSP
	jmp uuid_00000000000de7d4
uuid_00000000000de7d2:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	pushq -2568(%rbp)
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	pushq -280(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de7d4:
	mov -2776(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000de7d7:
	mov -2744(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000de81a:
	mov -2736(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000de967:
	mov -2416(%RBP),%RSP
	add $-3048, %RSP
	jmp uuid_00000000000de96a
uuid_00000000000de968:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	pushq -280(%rbp)
	pushq $2
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de96a:
	mov -2120(%RBP),%RSP
	add $-2408, %RSP
	jmp uuid_00000000000de96d
uuid_00000000000de96b:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1992(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db445
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq $uuid_00000000000dd3d6
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000db173
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000dbb61
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daff0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de96d:
	mov -1784(%RBP),%RSP
	add $-2288, %RSP
	jmp uuid_00000000000de970
uuid_00000000000de96e:
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1656(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db445
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
#call function fragment::label : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function uuid : Arrow<Nil,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call uuid_CL_ArrowStringNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_label_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daff0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de970:
	mov -1448(%RBP),%RSP
	add $-1776, %RSP
	jmp uuid_00000000000de973
uuid_00000000000de971:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de973:
	mov -928(%RBP),%RSP
	add $-1440, %RSP
	jmp uuid_00000000000de976
uuid_00000000000de974:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function is-string : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call is_SB_string_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de71a
	pushq $0
	push %RBP
#call function is-reg8 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call is_SB_reg8_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de6a4
	jmp uuid_00000000000de6a6
uuid_00000000000de6a4:
	movb $1, -960(%rbp)
uuid_00000000000de6a6:
	mov -968(%RBP),%RSP
	add $-968, %RSP
	push %RBP
#call function is-reg16 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call is_SB_reg16_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de6a7
	jmp uuid_00000000000de6a9
uuid_00000000000de6a7:
	movb $1, -960(%rbp)
uuid_00000000000de6a9:
	mov -976(%RBP),%RSP
	add $-976, %RSP
	push %RBP
#call function is-reg32 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call is_SB_reg32_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de6aa
	jmp uuid_00000000000de6ac
uuid_00000000000de6aa:
	movb $1, -960(%rbp)
uuid_00000000000de6ac:
	mov -984(%RBP),%RSP
	add $-984, %RSP
	push %RBP
#call function is-reg64 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call is_SB_reg64_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de6ad
	jmp uuid_00000000000de6af
uuid_00000000000de6ad:
	movb $1, -960(%rbp)
uuid_00000000000de6af:
	mov -992(%RBP),%RSP
	add $-992, %RSP
	push %RBP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de717
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function class-of-tag : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	mov %RBX, %RBP
	call class_SB_of_SB_tag_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de714
	pushq -920(%rbp)
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1032(%rbp)
	pushq $uuid_00000000000de6b3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de6e2
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1048(%rbp)
	pushq $uuid_00000000000de6b4
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de6df
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	pushq $uuid_00000000000de6b5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de6dc
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq $uuid_00000000000db126
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de6d9
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1096(%rbp)
	pushq $uuid_00000000000de6b7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de6d6
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1112(%rbp)
	pushq $uuid_00000000000de6b9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de6d3
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1128(%rbp)
	pushq $uuid_00000000000de6bb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de6d0
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1144(%rbp)
	pushq $uuid_00000000000de6bd
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de6cd
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1160(%rbp)
	pushq $uuid_00000000000de6bf
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de6ca
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1176(%rbp)
	pushq $uuid_00000000000de6c1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de6c7
	push %RBP
	jmp uuid_00000000000de6c4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de6c3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de6c6
uuid_00000000000de6c4:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de6c6:
	mov -1184(%RBP),%RSP
	add $-1184, %RSP
	jmp uuid_00000000000de6c9
uuid_00000000000de6c7:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de6c2
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de6c9:
	mov -1168(%RBP),%RSP
	add $-1176, %RSP
	jmp uuid_00000000000de6cc
uuid_00000000000de6ca:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de6c0
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de6cc:
	mov -1152(%RBP),%RSP
	add $-1160, %RSP
	jmp uuid_00000000000de6cf
uuid_00000000000de6cd:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de6be
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de6cf:
	mov -1136(%RBP),%RSP
	add $-1144, %RSP
	jmp uuid_00000000000de6d2
uuid_00000000000de6d0:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de6bc
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de6d2:
	mov -1120(%RBP),%RSP
	add $-1128, %RSP
	jmp uuid_00000000000de6d5
uuid_00000000000de6d3:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de6ba
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de6d5:
	mov -1104(%RBP),%RSP
	add $-1112, %RSP
	jmp uuid_00000000000de6d8
uuid_00000000000de6d6:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de6b8
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de6d8:
	mov -1088(%RBP),%RSP
	add $-1096, %RSP
	jmp uuid_00000000000de6db
uuid_00000000000de6d9:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de6b6
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de6db:
	mov -1072(%RBP),%RSP
	add $-1080, %RSP
	jmp uuid_00000000000de6de
uuid_00000000000de6dc:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daeab
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de6de:
	mov -1056(%RBP),%RSP
	add $-1064, %RSP
	jmp uuid_00000000000de6e1
uuid_00000000000de6df:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae6a
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de6e1:
	mov -1040(%RBP),%RSP
	add $-1048, %RSP
	jmp uuid_00000000000de6e4
uuid_00000000000de6e2:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daea3
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de6e4:
	mov -1024(%RBP),%RSP
	add $-1032, %RSP
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de711
	jmp uuid_00000000000de713
uuid_00000000000de711:
	pushq -920(%rbp)
	push %RBP
	pushq -1048(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	pushq $uuid_00000000000de6b3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de70e
	push %RBP
	pushq -1048(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq $uuid_00000000000de6b4
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de70b
	push %RBP
	pushq -1048(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1096(%rbp)
	pushq $uuid_00000000000de6b5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de708
	push %RBP
	pushq -1048(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1112(%rbp)
	pushq $uuid_00000000000db126
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de705
	push %RBP
	pushq -1048(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1128(%rbp)
	pushq $uuid_00000000000de6b7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de702
	push %RBP
	pushq -1048(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1144(%rbp)
	pushq $uuid_00000000000de6b9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de6ff
	push %RBP
	pushq -1048(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1160(%rbp)
	pushq $uuid_00000000000de6bb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de6fc
	push %RBP
	pushq -1048(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1176(%rbp)
	pushq $uuid_00000000000de6bd
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de6f9
	push %RBP
	pushq -1048(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1192(%rbp)
	pushq $uuid_00000000000de6bf
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de6f6
	push %RBP
	pushq -1048(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1208(%rbp)
	pushq $uuid_00000000000de6c1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de6f3
	push %RBP
	jmp uuid_00000000000de6f0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de6ef
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de6f2
uuid_00000000000de6f0:
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000dd3d6
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dae17
	pushq $2
	pushq $0
	pushq -920(%rbp)
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	pushq $uuid_00000000000dae19
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de6f2:
	mov -1216(%RBP),%RSP
	add $-1216, %RSP
	jmp uuid_00000000000de6f5
uuid_00000000000de6f3:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de6ee
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de6f5:
	mov -1200(%RBP),%RSP
	add $-1208, %RSP
	jmp uuid_00000000000de6f8
uuid_00000000000de6f6:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de6ed
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de6f8:
	mov -1184(%RBP),%RSP
	add $-1192, %RSP
	jmp uuid_00000000000de6fb
uuid_00000000000de6f9:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de6ec
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de6fb:
	mov -1168(%RBP),%RSP
	add $-1176, %RSP
	jmp uuid_00000000000de6fe
uuid_00000000000de6fc:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de6eb
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de6fe:
	mov -1152(%RBP),%RSP
	add $-1160, %RSP
	jmp uuid_00000000000de701
uuid_00000000000de6ff:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de6ea
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de701:
	mov -1136(%RBP),%RSP
	add $-1144, %RSP
	jmp uuid_00000000000de704
uuid_00000000000de702:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de6e9
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de704:
	mov -1120(%RBP),%RSP
	add $-1128, %RSP
	jmp uuid_00000000000de707
uuid_00000000000de705:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de6e8
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de707:
	mov -1104(%RBP),%RSP
	add $-1112, %RSP
	jmp uuid_00000000000de70a
uuid_00000000000de708:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de6e7
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de70a:
	mov -1088(%RBP),%RSP
	add $-1096, %RSP
	jmp uuid_00000000000de70d
uuid_00000000000de70b:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de6e6
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de70d:
	mov -1072(%RBP),%RSP
	add $-1080, %RSP
	jmp uuid_00000000000de710
uuid_00000000000de70e:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de6e5
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de710:
	mov -1056(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000de713:
	mov -1040(%RBP),%RSP
	add $-1064, %RSP
	jmp uuid_00000000000de716
uuid_00000000000de714:
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de6b0
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1016(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000dbb61
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000de6b2
uuid_00000000000de6b0:
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000dd3d6
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de5cd
	pushq $2
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de5ce
	pushq $2
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1016(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	pushq $0
	pushq $uuid_00000000000de5cf
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de6b2:
	mov -1024(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000de716:
	mov -1008(%RBP),%RSP
	add $-1024, %RSP
	jmp uuid_00000000000de719
uuid_00000000000de717:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de719:
	mov -1000(%RBP),%RSP
	add $-1000, %RSP
	jmp uuid_00000000000de71c
uuid_00000000000de71a:
#call function compile-declare-cstring : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	mov %RBX, %RBP
	call compile_SB_declare_SB_cstring_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de71c:
	mov -952(%RBP),%RSP
	add $-952, %RSP
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de976:
	mov -808(%RBP),%RSP
	add $-952, %RSP
	jmp uuid_00000000000de979
uuid_00000000000de977:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -800(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de979:
	mov -688(%RBP),%RSP
	add $-800, %RSP
	jmp uuid_00000000000de97c
uuid_00000000000de97a:
uuid_00000000000de97c:
	mov -608(%RBP),%RSP
	add $-680, %RSP
	jmp uuid_00000000000de97f
uuid_00000000000de97d:
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daff0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000dd3d6
	pushq $0
	pushq $uuid_00000000000de691
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de97f:
	mov -528(%RBP),%RSP
	add $-600, %RSP
	subq $152, %rsp
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $296, %rsp
	ret
compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq -288(%rbp)
	push %RBP
	pushq -456(%rbp)
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de984
	push %RBP
	jmp uuid_00000000000de981
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de980
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de983
uuid_00000000000de981:
#call function compile-expr-direct : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_expr_SB_direct_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de983:
	mov -480(%RBP),%RSP
	add $-480, %RSP
	jmp uuid_00000000000de986
uuid_00000000000de984:
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000db623
	pushq $0
	pushq $0
	pushq $3
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de986:
	mov -464(%RBP),%RSP
	add $-472, %RSP
	subq $152, %rsp
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $296, %rsp
	ret
compile_SB_global_CL_ArrowNilConsASTConsStringFContext:
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	push %RBP
	pushq -296(%rbp)
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de98e
	push %RBP
	pushq -296(%rbp)
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de98b
	push %RBP
	pushq -296(%rbp)
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de988
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de987
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de98a
uuid_00000000000de988:
#call function compile-global-gnu : Arrow<Cons<Cons<FContext,String>,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call compile_SB_global_SB_gnu_CL_ArrowNilConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000de98a:
	mov -336(%RBP),%RSP
	add $-344, %RSP
	jmp uuid_00000000000de98d
uuid_00000000000de98b:
#call function compile-global-blob : Arrow<Cons<Cons<FContext,String>,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call compile_SB_global_SB_blob_CL_ArrowNilConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000de98d:
	mov -320(%RBP),%RSP
	add $-328, %RSP
	jmp uuid_00000000000de990
uuid_00000000000de98e:
#call function compile-global-c : Arrow<Cons<Cons<FContext,String>,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call compile_SB_global_SB_c_CL_ArrowNilConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000de990:
	mov -304(%RBP),%RSP
	add $-312, %RSP
	mov %rbp, %rsp
	sub $288, %rsp
	ret
compile_SB_global_SB_c_CL_ArrowNilConsASTConsStringFContext:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -464(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de99a
	jmp uuid_00000000000de99c
uuid_00000000000de99a:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000de997
	jmp uuid_00000000000de999
uuid_00000000000de997:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de994
	jmp uuid_00000000000de996
uuid_00000000000de994:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de991
	jmp uuid_00000000000de993
uuid_00000000000de991:
	movb $1, -472(%rbp)
uuid_00000000000de993:
	mov -600(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000de996:
	mov -520(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000de999:
	mov -488(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000de99c:
	mov -480(%RBP),%RSP
	add $-672, %RSP
	mov -472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de9da
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de9d3
	jmp uuid_00000000000de9d5
uuid_00000000000de9d3:
	push %RBP
	mov -744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de9c1
	jmp uuid_00000000000de9c3
uuid_00000000000de9c1:
	push %RBP
	mov -840(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -944(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de9b8
	jmp uuid_00000000000de9ba
uuid_00000000000de9b8:
	push %RBP
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	jmp uuid_00000000000de9b5
	jmp uuid_00000000000de9b7
uuid_00000000000de9b5:
	movb $1, -952(%rbp)
uuid_00000000000de9b7:
	mov -968(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000de9ba:
	mov -960(%RBP),%RSP
	add $-992, %RSP
	mov -952(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de9be
	jmp uuid_00000000000de9c0
uuid_00000000000de9be:
	push %RBP
	mov -832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de9bb
	jmp uuid_00000000000de9bd
uuid_00000000000de9bb:
	movb $1, -856(%rbp)
uuid_00000000000de9bd:
	mov -1000(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000de9c0:
	mov -872(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000de9c3:
	mov -864(%RBP),%RSP
	add $-1072, %RSP
	mov -856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de9d0
	jmp uuid_00000000000de9d2
uuid_00000000000de9d0:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1152(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de9ca
	jmp uuid_00000000000de9cc
uuid_00000000000de9ca:
	push %RBP
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	jmp uuid_00000000000de9c7
	jmp uuid_00000000000de9c9
uuid_00000000000de9c7:
	push %RBP
	mov -1088(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1248(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de9c4
	jmp uuid_00000000000de9c6
uuid_00000000000de9c4:
	movb $1, -1160(%rbp)
uuid_00000000000de9c6:
	mov -1240(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000de9c9:
	mov -1176(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000de9cc:
	mov -1168(%RBP),%RSP
	add $-1248, %RSP
	mov -1160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de9cd
	jmp uuid_00000000000de9cf
uuid_00000000000de9cd:
	movb $1, -760(%rbp)
uuid_00000000000de9cf:
	mov -1080(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000de9d2:
	mov -776(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000de9d5:
	mov -768(%RBP),%RSP
	add $-1248, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de9d7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de9d6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de9d9
uuid_00000000000de9d7:
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq $0
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq $0
	pushq $0
	pushq $3
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dae18
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -1280(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd606
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	pushq $0
	pushq -1280(%rbp)
	pushq $2
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de8af
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq $uuid_00000000000dd3d6
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd606
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_global_SB_initializer_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_global_SB_initializer_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
uuid_00000000000de9d9:
	mov -680(%RBP),%RSP
	add $-1456, %RSP
	jmp uuid_00000000000de9dc
uuid_00000000000de9da:
	push %RBP
#call function is-ffi : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call is_SB_ffi_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	push %RAX
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de9b2
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function compile-destructure-args : Arrow<Cons<Cons<Cons<Type,FContext>,AST>,I64>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq $0
	mov %RBX, %RBP
	call compile_SB_destructure_SB_args_CL_ArrowFContextConsI64ConsASTConsFContextType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $uuid_00000000000de99d
	pushq $0
	pushq $0
	pushq $3
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq $uuid_00000000000dd3d0
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000dd3d0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de99e
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -872(%rbp)
	jmp uuid_00000000000de9a0
uuid_00000000000de99e:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
uuid_00000000000de9a0:
	mov -880(%RBP),%RSP
	add $-880, %RSP
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq $uuid_00000000000dd3d6
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq $uuid_00000000000de8ae
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	pushq $0
	pushq $0
	pushq $3
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000dd3d0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de9a2
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	jmp uuid_00000000000de9a4
uuid_00000000000de9a2:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de9a1
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
uuid_00000000000de9a4:
	mov -960(%RBP),%RSP
	add $-960, %RSP
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dae18
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -872(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dae17
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function compile-c-function-args : Arrow<Cons<FContext,AST>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	mov %RBX, %RBP
	call compile_SB_c_SB_function_SB_args_CL_ArrowSConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -304(%RSP)
	push -304(%RSP)
	push -304(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de9a5
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000dd3d0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de9a6
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	jmp uuid_00000000000de9a8
uuid_00000000000de9a6:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de9a1
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
uuid_00000000000de9a8:
	mov -968(%RBP),%RSP
	add $-968, %RSP
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dae18
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -872(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dae17
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function compile-c-function-args : Arrow<Cons<FContext,AST>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	mov %RBX, %RBP
	call compile_SB_c_SB_function_SB_args_CL_ArrowSConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -304(%RSP)
	push -304(%RSP)
	push -304(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de9a9
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000dd3d0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de9aa
	jmp uuid_00000000000de9ac
uuid_00000000000de9aa:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_global_SB_initializer_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
uuid_00000000000de9ac:
	mov -976(%RBP),%RSP
	add $-976, %RSP
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000dd3d0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de9ae
	jmp uuid_00000000000de9b0
uuid_00000000000de9ae:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de9ad
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
uuid_00000000000de9b0:
	mov -984(%RBP),%RSP
	add $-984, %RSP
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de9b1
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_text_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_text_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	jmp uuid_00000000000de9b4
uuid_00000000000de9b2:
uuid_00000000000de9b4:
	mov -680(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000de9dc:
	mov -392(%RBP),%RSP
	add $-680, %RSP
	mov %rbp, %rsp
	sub $288, %rsp
	ret
compile_SB_global_SB_blob_CL_ArrowNilConsASTConsStringFContext:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de9dd
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $288, %rsp
	ret
compile_SB_global_SB_gnu_CL_ArrowNilConsASTConsStringFContext:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -464(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de9e7
	jmp uuid_00000000000de9e9
uuid_00000000000de9e7:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000de9e4
	jmp uuid_00000000000de9e6
uuid_00000000000de9e4:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de9e1
	jmp uuid_00000000000de9e3
uuid_00000000000de9e1:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de9de
	jmp uuid_00000000000de9e0
uuid_00000000000de9de:
	movb $1, -472(%rbp)
uuid_00000000000de9e0:
	mov -600(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000de9e3:
	mov -520(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000de9e6:
	mov -488(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000de9e9:
	mov -480(%RBP),%RSP
	add $-672, %RSP
	mov -472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dea2d
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dea25
	jmp uuid_00000000000dea27
uuid_00000000000dea25:
	push %RBP
	mov -744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dea13
	jmp uuid_00000000000dea15
uuid_00000000000dea13:
	push %RBP
	mov -840(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -944(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dea0a
	jmp uuid_00000000000dea0c
uuid_00000000000dea0a:
	push %RBP
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	jmp uuid_00000000000dea07
	jmp uuid_00000000000dea09
uuid_00000000000dea07:
	movb $1, -952(%rbp)
uuid_00000000000dea09:
	mov -968(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000dea0c:
	mov -960(%RBP),%RSP
	add $-992, %RSP
	mov -952(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dea10
	jmp uuid_00000000000dea12
uuid_00000000000dea10:
	push %RBP
	mov -832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dea0d
	jmp uuid_00000000000dea0f
uuid_00000000000dea0d:
	movb $1, -856(%rbp)
uuid_00000000000dea0f:
	mov -1000(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000dea12:
	mov -872(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000dea15:
	mov -864(%RBP),%RSP
	add $-1072, %RSP
	mov -856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dea22
	jmp uuid_00000000000dea24
uuid_00000000000dea22:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1152(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dea1c
	jmp uuid_00000000000dea1e
uuid_00000000000dea1c:
	push %RBP
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	jmp uuid_00000000000dea19
	jmp uuid_00000000000dea1b
uuid_00000000000dea19:
	push %RBP
	mov -1088(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1248(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dea16
	jmp uuid_00000000000dea18
uuid_00000000000dea16:
	movb $1, -1160(%rbp)
uuid_00000000000dea18:
	mov -1240(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000dea1b:
	mov -1176(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000dea1e:
	mov -1168(%RBP),%RSP
	add $-1248, %RSP
	mov -1160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dea1f
	jmp uuid_00000000000dea21
uuid_00000000000dea1f:
	movb $1, -760(%rbp)
uuid_00000000000dea21:
	mov -1080(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000dea24:
	mov -776(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000dea27:
	mov -768(%RBP),%RSP
	add $-1248, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dea2a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dea29
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dea2c
uuid_00000000000dea2a:
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -1280(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dea28
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dae3c
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	pushq -208(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq $7
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3a7
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3a5
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000db3a6
	pushq $0
	pushq $0
	pushq $3
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daff0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq $-8
	pushq $4
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_init_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq $uuid_00000000000dbb61
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_init_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
uuid_00000000000dea2c:
	mov -680(%RBP),%RSP
	add $-1576, %RSP
	jmp uuid_00000000000dea2f
uuid_00000000000dea2d:
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dea04
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function compile-destructure-args : Arrow<Cons<Cons<Cons<Type,FContext>,AST>,I64>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq $0
	mov %RBX, %RBP
	call compile_SB_destructure_SB_args_CL_ArrowFContextConsI64ConsASTConsFContextType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $uuid_00000000000de99d
	pushq $0
	pushq $0
	pushq $3
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq $0
	mov -720(%RBP), %RAX
	mov $8, %R14
	subq %R14,%RAX
	movq %RAX, -720(%rbp)
	mov -720(%RBP), %RAX
	mov -712(%RBP), %R14
	subq %R14,%RAX
	movq %RAX, -720(%rbp)
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -720(%rbp)
	pushq $1
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq $0
	pushq $0
	pushq $3
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000dd3d0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de9f1
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
	jmp uuid_00000000000de9f3
uuid_00000000000de9f1:
	mov $main_SB_with_CL_U8, %r15
	movb $1, 0(%r15)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	push %RBP
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	mov -1056(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de9ee
	push %RBP
	jmp uuid_00000000000de9eb
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000de9ea
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de9ed
uuid_00000000000de9eb:
	mov $main_SB_with_SB_argv_CL_U8, %r15
	movb $1, 0(%r15)
uuid_00000000000de9ed:
	mov -1064(%RBP),%RSP
	add $-1064, %RSP
	jmp uuid_00000000000de9f0
uuid_00000000000de9ee:
uuid_00000000000de9f0:
	mov -984(%RBP),%RSP
	add $-1056, %RSP
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd3d0
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
uuid_00000000000de9f3:
	mov -904(%RBP),%RSP
	add $-1056, %RSP
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000db173
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
	push %RBP
	mov $config_SB_profile_SB_invocations_CL_U8, %RAX
	mov 0(%RAX), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de9ff
	jmp uuid_00000000000dea01
uuid_00000000000de9ff:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	pushq $0
	pushq $uuid_00000000000de9f4
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq $0
	pushq $uuid_00000000000de9f5
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq $0
	pushq $uuid_00000000000de9f6
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq $0
	pushq $uuid_00000000000de9f7
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de9f8
	pushq $2
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq $0
	pushq $uuid_00000000000de9f9
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	pushq $uuid_00000000000de9fa
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_profile_SB_onexit_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de9f8
	pushq $2
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq $0
	pushq $uuid_00000000000de9f9
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	pushq $uuid_00000000000de9fb
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de9fc
	pushq $2
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq $0
	pushq $uuid_00000000000de9fd
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	pushq $uuid_00000000000de9fe
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $assemble_SB_profile_SB_onexit_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
uuid_00000000000dea01:
	mov -1064(%RBP),%RSP
	add $-1088, %RSP
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq $uuid_00000000000de8ae
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq $uuid_00000000000dbb61
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd3a3
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dea02
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -712(%RBP), %RAX
	mov $8, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de8cf
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dea03
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_text_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_text_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	jmp uuid_00000000000dea06
uuid_00000000000dea04:
uuid_00000000000dea06:
	mov -680(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000dea2f:
	mov -392(%RBP),%RSP
	add $-680, %RSP
	mov %rbp, %rsp
	sub $288, %rsp
	ret
compile_SB_maybe_SB_push_SB_stack_CL_ArrowFragmentConsASTConsTypeConsFragmentConsI64FContext:
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dea30
	movq -384(%rbp), %r15
	movq %r15, -488(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -480(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -472(%rbp)
	jmp uuid_00000000000dea32
uuid_00000000000dea30:
uuid_00000000000dea32:
	mov -496(%RBP),%RSP
	add $-496, %RSP
	push %RBP
#call function is-stack-variable : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call is_SB_stack_SB_variable_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dea33
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq $uuid_00000000000de5d0
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
	popq -648(%RBP)
	popq -640(%RBP)
	popq -632(%RBP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
#call function cc-blob : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,I64>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq $uuid_00000000000db5e3
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -208(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsASTConsI64ConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db557
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	mov -208(%RBP), %RAX
	mov -712(%RBP), %R14
	subq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	jmp uuid_00000000000dea35
uuid_00000000000dea33:
uuid_00000000000dea35:
	mov -504(%RBP),%RSP
	add $-504, %RSP
	subq $152, %rsp
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	popq -600(%rbp)
	popq -608(%rbp)
	popq -616(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $464, %rsp
	ret
compile_SB_push_SB_rvalue_CL_ArrowFragmentConsI64ConsASTFContext:
#call function compile-push-rvalue : Arrow<Cons<Cons<Cons<Cons<FContext,AST>,I64>,U64>,U64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call compile_SB_push_SB_rvalue_CL_ArrowFragmentConsU64ConsU64ConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	subq $152, %rsp
	pushq 152(%rsp)
	pushq 168(%rsp)
	pushq 184(%rsp)
	pushq 200(%rsp)
	pushq 216(%rsp)
	pushq 232(%rsp)
	pushq 248(%rsp)
	pushq 264(%rsp)
	pushq 280(%rsp)
	pushq 296(%rsp)
	pushq 312(%rsp)
	pushq 328(%rsp)
	pushq 344(%rsp)
	pushq 360(%rsp)
	pushq 376(%rsp)
	pushq 392(%rsp)
	pushq 408(%rsp)
	pushq 424(%rsp)
	pushq 440(%rsp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $288, %rsp
	ret
compile_SB_push_SB_rvalue_CL_ArrowFragmentConsU64ConsU64ConsI64ConsASTFContext:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq $uuid_00000000000db3a7
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq $0
	push %RBP
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dea4e
	jmp uuid_00000000000dea50
uuid_00000000000dea4e:
	push %RBP
	mov -504(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -576(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dea45
	jmp uuid_00000000000dea47
uuid_00000000000dea45:
	push %RBP
	mov -568(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -640(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dea3c
	jmp uuid_00000000000dea3e
uuid_00000000000dea3c:
	push %RBP
	mov -632(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -704(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dea39
	jmp uuid_00000000000dea3b
uuid_00000000000dea39:
	push %RBP
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	jmp uuid_00000000000dea36
	jmp uuid_00000000000dea38
uuid_00000000000dea36:
	movb $1, -648(%rbp)
uuid_00000000000dea38:
	mov -712(%RBP),%RSP
	add $-736, %RSP
uuid_00000000000dea3b:
	mov -664(%RBP),%RSP
	add $-736, %RSP
uuid_00000000000dea3e:
	mov -656(%RBP),%RSP
	add $-736, %RSP
	mov -648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dea42
	jmp uuid_00000000000dea44
uuid_00000000000dea42:
	push %RBP
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	jmp uuid_00000000000dea3f
	jmp uuid_00000000000dea41
uuid_00000000000dea3f:
	movb $1, -584(%rbp)
uuid_00000000000dea41:
	mov -744(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000dea44:
	mov -600(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000dea47:
	mov -592(%RBP),%RSP
	add $-768, %RSP
	mov -584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dea4b
	jmp uuid_00000000000dea4d
uuid_00000000000dea4b:
	push %RBP
	mov -496(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -784(%rbp)
	pushq $uuid_00000000000db3a7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dea48
	jmp uuid_00000000000dea4a
uuid_00000000000dea48:
	movb $1, -520(%rbp)
uuid_00000000000dea4a:
	mov -776(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000dea4d:
	mov -536(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000dea50:
	mov -528(%RBP),%RSP
	add $-784, %RSP
	mov -520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dea77
	push %RBP
	jmp uuid_00000000000dea74
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dea73
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dea76
uuid_00000000000dea74:
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dea70
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -288(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dea6d
	jmp uuid_00000000000dea6f
uuid_00000000000dea6d:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function is-rc : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	mov %RBX, %RBP
	call is_SB_rc_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dea6a
	jmp uuid_00000000000dea6c
uuid_00000000000dea6a:
	pushq $uuid_00000000000db5d1
#call function token::new : Arrow<String,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db5d1
	mov %RBX, %RBP
	call token_CL__CL_new_CL_ArrowTokenString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $7
#call function guess-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call guess_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
#call function ascript : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db622
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call ascript_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function ascript : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	mov %RBX, %RBP
	call ascript_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dea6c:
	mov -848(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000dea6f:
	mov -816(%RBP),%RSP
	add $-920, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
#call function compile-maybe-push-stack : Arrow<Cons<Cons<Cons<Cons<FContext,I64>,Fragment>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -392(%RBP), %RAX
	push %RAX
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call compile_SB_maybe_SB_push_SB_stack_CL_ArrowFragmentConsASTConsTypeConsFragmentConsI64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	mov -280(%RBP), %RAX
	mov -808(%RBP), %R14
	subq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	jmp uuid_00000000000dea72
uuid_00000000000dea70:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
uuid_00000000000dea72:
	mov -800(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000dea76:
	mov -792(%RBP),%RSP
	add $-800, %RSP
	jmp uuid_00000000000dea79
uuid_00000000000dea77:
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq $0
	push %RBP
	mov -936(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dea57
	jmp uuid_00000000000dea59
uuid_00000000000dea57:
	push %RBP
	mov -928(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dea54
	jmp uuid_00000000000dea56
uuid_00000000000dea54:
	push %RBP
	mov -920(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dea51
	jmp uuid_00000000000dea53
uuid_00000000000dea51:
	movb $1, -944(%rbp)
uuid_00000000000dea53:
	mov -1040(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000dea56:
	mov -960(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000dea59:
	mov -952(%RBP),%RSP
	add $-1112, %RSP
	mov -944(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dea67
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dea66
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dea69
uuid_00000000000dea67:
#call function compile-push-rvalue : Arrow<Cons<Cons<Cons<Cons<FContext,AST>,I64>,U64>,U64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	mov %RBX, %RBP
	call compile_SB_push_SB_rvalue_CL_ArrowFragmentConsU64ConsU64ConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dea63
	push %RBP
	mov -288(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dea60
	jmp uuid_00000000000dea62
uuid_00000000000dea60:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function is-rc : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	mov %RBX, %RBP
	call is_SB_rc_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dea5d
	jmp uuid_00000000000dea5f
uuid_00000000000dea5d:
	pushq $uuid_00000000000db5d1
#call function token::new : Arrow<String,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db5d1
	mov %RBX, %RBP
	call token_CL__CL_new_CL_ArrowTokenString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $7
#call function guess-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call guess_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1304(%RBP)
	popq -1296(%RBP)
	popq -1288(%RBP)
#call function ascript : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db622
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call ascript_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -1032(%RBP)
	popq -1024(%RBP)
	popq -1016(%RBP)
	popq -1008(%RBP)
	popq -1000(%RBP)
	popq -992(%RBP)
	popq -984(%RBP)
	popq -976(%RBP)
	popq -968(%RBP)
#call function ascript : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	mov %RBX, %RBP
	call ascript_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dea5f:
	mov -1312(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000dea62:
	mov -1280(%RBP),%RSP
	add $-1384, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	mov -1200(%RBP), %RAX
	push %RAX
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function compile-maybe-push-stack : Arrow<Cons<Cons<Cons<Cons<FContext,I64>,Fragment>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -1472(%RBP), %RAX
	push %RAX
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call compile_SB_maybe_SB_push_SB_stack_CL_ArrowFragmentConsASTConsTypeConsFragmentConsI64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	popq -1536(%RBP)
	popq -1528(%RBP)
	popq -1520(%RBP)
	popq -1512(%RBP)
	popq -1504(%RBP)
	popq -1496(%RBP)
	popq -1488(%RBP)
	popq -1480(%RBP)
	popq -1472(%RBP)
	popq -1464(%RBP)
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
	popq -1432(%RBP)
	popq -1424(%RBP)
	popq -1416(%RBP)
	popq -1408(%RBP)
	popq -1400(%RBP)
	popq -1392(%RBP)
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	mov -280(%RBP), %RAX
	mov -1544(%RBP), %R14
	subq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -1536(%RBP)
	popq -1528(%RBP)
	popq -1520(%RBP)
	popq -1512(%RBP)
	popq -1504(%RBP)
	popq -1496(%RBP)
	popq -1488(%RBP)
	popq -1480(%RBP)
	popq -1472(%RBP)
	popq -1464(%RBP)
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
	popq -1432(%RBP)
	popq -1424(%RBP)
	popq -1416(%RBP)
	popq -1408(%RBP)
	popq -1400(%RBP)
	popq -1392(%RBP)
#call function fragment::chain : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	jmp uuid_00000000000dea65
uuid_00000000000dea63:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	mov -1200(%RBP), %RAX
	push %RAX
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function fragment::chain : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	push %RBP
	mov -296(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000dea5a
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq $uuid_00000000000dd3d6
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq $uuid_00000000000dd3d6
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	pushq $0
	pushq $uuid_00000000000db257
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq $uuid_00000000000dd3d6
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	jmp uuid_00000000000dea5c
uuid_00000000000dea5a:
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq $uuid_00000000000dd3d6
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq $uuid_00000000000dd3d6
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	pushq $0
	pushq $uuid_00000000000db257
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq $uuid_00000000000dd3d6
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
uuid_00000000000dea5c:
	mov -1432(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000dea65:
	mov -1272(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000dea69:
	mov -864(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000dea79:
	mov -488(%RBP),%RSP
	add $-1432, %RSP
	subq $152, %rsp
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $304, %rsp
	ret
compile_SB_stack_SB_call_SB_push_SB_args_CL_ArrowFragmentConsI64ConsASTFContext:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov -592(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dea7e
	push %RBP
	jmp uuid_00000000000dea7b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dea7a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dea7d
uuid_00000000000dea7b:
#call function compile-push-rvalue : Arrow<Cons<Cons<FContext,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call compile_SB_push_SB_rvalue_CL_ArrowFragmentConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
uuid_00000000000dea7d:
	mov -600(%RBP),%RSP
	add $-600, %RSP
	jmp uuid_00000000000dea80
uuid_00000000000dea7e:
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daff0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
uuid_00000000000dea80:
	mov -520(%RBP),%RSP
	add $-592, %RSP
	subq $152, %rsp
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $288, %rsp
	ret
compile_SB_stack_SB_call_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsStringConsFragmentFContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dea98
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq $2
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dea81
	jmp uuid_00000000000dea83
uuid_00000000000dea81:
	pushq $4
	popq -472(%RBP)
uuid_00000000000dea83:
	mov -872(%RBP),%RSP
	add $-872, %RSP
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dea84
	jmp uuid_00000000000dea86
uuid_00000000000dea84:
	pushq $4
	popq -472(%RBP)
uuid_00000000000dea86:
	mov -880(%RBP),%RSP
	add $-880, %RSP
#call function compile-stack-call-push-args : Arrow<Cons<Cons<FContext,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_call_SB_push_SB_args_CL_ArrowFragmentConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dea87
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -1032(%RBP)
	popq -1024(%RBP)
	popq -1016(%RBP)
	popq -1008(%RBP)
	popq -1000(%RBP)
	popq -992(%RBP)
	popq -984(%RBP)
	popq -976(%RBP)
	popq -968(%RBP)
	popq -960(%RBP)
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
	popq -912(%RBP)
	popq -904(%RBP)
	popq -896(%RBP)
	popq -888(%RBP)
	pushq $0
	pushq $0
	pushq $3
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq -360(%rbp)
	push %RBP
#call function is-ffi : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	mov %RBX, %RBP
	call is_SB_ffi_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dea88
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -1224(%rbp)
	jmp uuid_00000000000dea8a
uuid_00000000000dea88:
uuid_00000000000dea8a:
	mov -1232(%RBP),%RSP
	add $-1232, %RSP
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq $uuid_00000000000dea8b
	pushq $0
	pushq -1224(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
	popq -1072(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq $uuid_00000000000dea8c
	pushq $0
	pushq -360(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
	popq -1072(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq $uuid_00000000000dea8d
	pushq $0
#call function to-string : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
	popq -1072(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq $uuid_00000000000de889
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
	popq -1072(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq $uuid_00000000000dea8e
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
	popq -1072(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq $uuid_00000000000dea8f
	pushq $0
#call function to-string : Arrow<IsUsed,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringIsUsed
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
	popq -1072(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de88a
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
	popq -1072(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000de88b
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de88a
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000dea90
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function cc-blob : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,I64>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000dea91
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3a7
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de88a
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq -464(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsASTConsI64ConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	push %RBP
	mov -1064(%RBP), %RAX
	mov $8, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dea95
	jmp uuid_00000000000dea97
uuid_00000000000dea95:
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq $4
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dea92
	jmp uuid_00000000000dea94
uuid_00000000000dea92:
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov -464(%RBP), %RAX
	mov -1064(%RBP), %R14
	subq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
uuid_00000000000dea94:
	mov -1272(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000dea97:
	mov -1264(%RBP),%RSP
	add $-1272, %RSP
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	jmp uuid_00000000000dea9a
uuid_00000000000dea98:
#call function cc-blob : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -360(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
uuid_00000000000dea9a:
	mov -864(%RBP),%RSP
	add $-864, %RSP
	subq $152, %rsp
	pushq -856(%rbp)
	pushq -848(%rbp)
	pushq -840(%rbp)
	pushq -832(%rbp)
	pushq -824(%rbp)
	pushq -816(%rbp)
	pushq -808(%rbp)
	pushq -800(%rbp)
	pushq -792(%rbp)
	pushq -784(%rbp)
	pushq -776(%rbp)
	pushq -768(%rbp)
	pushq -760(%rbp)
	pushq -752(%rbp)
	pushq -744(%rbp)
	pushq -736(%rbp)
	pushq -728(%rbp)
	pushq -720(%rbp)
	pushq -712(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	popq -600(%rbp)
	popq -608(%rbp)
	popq -616(%rbp)
	popq -624(%rbp)
	popq -632(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $480, %rsp
	ret
compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment-context::lookups : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookups_CL_ArrowListFragmentConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
uuid_00000000000deaab:
#call function non-zero : Arrow<List<Fragment>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deaac
	jmp uuid_00000000000deaad
uuid_00000000000deaac:
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	push %RBP
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq $0
	push %RBP
	mov -1184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deaa1
	jmp uuid_00000000000deaa3
uuid_00000000000deaa1:
	push %RBP
	mov -1176(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dea9e
	jmp uuid_00000000000deaa0
uuid_00000000000dea9e:
	push %RBP
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	pushq -1152(%RBP)
	pushq -1160(%RBP)
	pushq -1168(%RBP)
	jmp uuid_00000000000dea9b
	jmp uuid_00000000000dea9d
uuid_00000000000dea9b:
	movb $1, -1192(%rbp)
uuid_00000000000dea9d:
	mov -1384(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000deaa0:
	mov -1208(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000deaa3:
	mov -1200(%RBP),%RSP
	add $-1536, %RSP
	mov -1192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deaa8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000deaa7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000deaaa
uuid_00000000000deaa8:
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deaa4
#call function compile-stack-call : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,Fragment>,String>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -208(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_call_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsStringConsFragmentFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	jmp uuid_00000000000deaa6
uuid_00000000000deaa4:
#call function fragment::chain : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
#call function compile-stack-call : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,Fragment>,String>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -208(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_call_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsStringConsFragmentFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
uuid_00000000000deaa6:
	mov -1568(%RBP),%RSP
	add $-1568, %RSP
	movq -1376(%rbp), %r15
	movq %r15, -840(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -832(%rbp)
	movq -1360(%rbp), %r15
	movq %r15, -824(%rbp)
	movq -1352(%rbp), %r15
	movq %r15, -816(%rbp)
	movq -1344(%rbp), %r15
	movq %r15, -808(%rbp)
	movq -1336(%rbp), %r15
	movq %r15, -800(%rbp)
	movq -1328(%rbp), %r15
	movq %r15, -792(%rbp)
	movq -1320(%rbp), %r15
	movq %r15, -784(%rbp)
	movq -1312(%rbp), %r15
	movq %r15, -776(%rbp)
	movq -1304(%rbp), %r15
	movq %r15, -768(%rbp)
	movq -1296(%rbp), %r15
	movq %r15, -760(%rbp)
	movq -1288(%rbp), %r15
	movq %r15, -752(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -744(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -736(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -728(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -720(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -712(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -704(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -696(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -688(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -680(%rbp)
uuid_00000000000deaaa:
	mov -1016(%RBP),%RSP
	add $-1568, %RSP
	add $168, %rsp
	add $168, %rsp
	add $8, %rsp
	add $168, %rsp
	add $152, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000deaab
uuid_00000000000deaad:
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -336(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	subq $152, %rsp
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $352, %rsp
	ret
translate_SB_local_SB_variables_CL_ArrowFContextConsI64FContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dead8
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq $0
	push %RBP
	mov -832(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deaba
	jmp uuid_00000000000deabc
uuid_00000000000deaba:
	push %RBP
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq -752(%RBP)
	pushq -760(%RBP)
	pushq -768(%RBP)
	pushq -776(%RBP)
	pushq -784(%RBP)
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	jmp uuid_00000000000deab7
	jmp uuid_00000000000deab9
uuid_00000000000deab7:
	push %RBP
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	jmp uuid_00000000000deab4
	jmp uuid_00000000000deab6
uuid_00000000000deab4:
	push %RBP
	mov -648(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000deab1
	jmp uuid_00000000000deab3
uuid_00000000000deab1:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deaae
	jmp uuid_00000000000deab0
uuid_00000000000deaae:
	movb $1, -840(%rbp)
uuid_00000000000deab0:
	mov -1064(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000deab3:
	mov -1048(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000deab6:
	mov -1016(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000deab9:
	mov -856(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000deabc:
	mov -848(%RBP),%RSP
	add $-1264, %RSP
	mov -840(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dead5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dead4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dead7
uuid_00000000000dead5:
#call function translate-local-variables : Arrow<Cons<FContext,I64>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call translate_SB_local_SB_variables_CL_ArrowFContextConsI64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	popq -1264(%RBP)
	popq -1256(%RBP)
	popq -1248(%RBP)
	popq -1240(%RBP)
	popq -1232(%RBP)
	popq -1224(%RBP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
	popq -1072(%RBP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq $uuid_00000000000dd3d4
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push %RBP
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq $0
	push %RBP
	mov -1320(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deac0
	jmp uuid_00000000000deac2
uuid_00000000000deac0:
	push %RBP
	mov -1312(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1352(%rbp)
	pushq $uuid_00000000000db806
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deabd
	jmp uuid_00000000000deabf
uuid_00000000000deabd:
	movb $1, -1328(%rbp)
uuid_00000000000deabf:
	mov -1344(%RBP),%RSP
	add $-1352, %RSP
uuid_00000000000deac2:
	mov -1336(%RBP),%RSP
	add $-1352, %RSP
	mov -1328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dead1
	push %RBP
	jmp uuid_00000000000deace
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000deacd
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dead0
uuid_00000000000deace:
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1056(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dead0:
	mov -1360(%RBP),%RSP
	add $-1360, %RSP
	jmp uuid_00000000000dead3
uuid_00000000000dead1:
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq $uuid_00000000000dd3d6
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push %RBP
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq $0
	push %RBP
	mov -1408(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deac6
	jmp uuid_00000000000deac8
uuid_00000000000deac6:
	push %RBP
	mov -1400(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000deac3
	jmp uuid_00000000000deac5
uuid_00000000000deac3:
	movb $1, -1416(%rbp)
uuid_00000000000deac5:
	mov -1432(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000deac8:
	mov -1424(%RBP),%RSP
	add $-1440, %RSP
	mov -1416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deaca
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000deac9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000deacc
uuid_00000000000deaca:
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -1448(%RBP), %RAX
	mov -208(%RBP), %R14
	addq %R14,%RAX
	push %RAX
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq $uuid_00000000000dd3d6
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1008(%RBP)
	popq -1000(%RBP)
	popq -992(%RBP)
	popq -984(%RBP)
	popq -976(%RBP)
	popq -968(%RBP)
	popq -960(%RBP)
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
	popq -912(%RBP)
	popq -904(%RBP)
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
	popq -872(%RBP)
	popq -864(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1056(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000deacc:
	mov -1384(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000dead3:
	mov -1296(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000dead7:
	mov -632(%RBP),%RSP
	add $-1456, %RSP
	jmp uuid_00000000000deada
uuid_00000000000dead8:
uuid_00000000000deada:
	mov -424(%RBP),%RSP
	add $-624, %RSP
	subq $200, %rsp
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $216, %rsp
	ret
cc_SB_blob_CL_ArrowFragmentConsI64ConsASTConsStringFContext:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	push %RBP
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deae4
	jmp uuid_00000000000deae6
uuid_00000000000deae4:
	push %RBP
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	jmp uuid_00000000000deae1
	jmp uuid_00000000000deae3
uuid_00000000000deae1:
	push %RBP
	mov -720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deade
	jmp uuid_00000000000deae0
uuid_00000000000deade:
	push %RBP
	mov -712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deadb
	jmp uuid_00000000000deadd
uuid_00000000000deadb:
	movb $1, -760(%rbp)
uuid_00000000000deadd:
	mov -888(%RBP),%RSP
	add $-960, %RSP
uuid_00000000000deae0:
	mov -808(%RBP),%RSP
	add $-960, %RSP
uuid_00000000000deae3:
	mov -776(%RBP),%RSP
	add $-960, %RSP
uuid_00000000000deae6:
	mov -768(%RBP),%RSP
	add $-960, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deaec
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000deaeb
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000deaee
uuid_00000000000deaec:
#call function cc-args : Arrow<Cons<Cons<Cons<Cons<FContext,FContext>,AST>,AST>,I64>,Tuple<I64,Tuple<FContext,FContext>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContext, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used424
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	mov -968(%RBP), %RAX
	movq %RAX, -288(%rbp)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	pushq -1152(%RBP)
	pushq -1160(%RBP)
	pushq -1168(%RBP)
	pushq -1176(%RBP)
	pushq -1184(%RBP)
	pushq -1192(%RBP)
	pushq -1200(%RBP)
	pushq -1208(%RBP)
	pushq -1216(%RBP)
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	pushq -1256(%RBP)
	pushq -1264(%RBP)
	pushq -1272(%RBP)
	pushq -1280(%RBP)
	pushq -1288(%RBP)
	pushq -1296(%RBP)
	pushq -1304(%RBP)
	pushq -1312(%RBP)
	pushq -1320(%RBP)
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	pushq -1656(%RBP)
	pushq -1664(%RBP)
	pushq -1672(%RBP)
	pushq -1680(%RBP)
	pushq -1688(%RBP)
	pushq -1696(%RBP)
	pushq -1704(%RBP)
	pushq -1712(%RBP)
	pushq -1720(%RBP)
	pushq -1728(%RBP)
	pushq -1736(%RBP)
	pushq -1744(%RBP)
	pushq -1752(%RBP)
	pushq -1760(%RBP)
	pushq -1768(%RBP)
	pushq -1776(%RBP)
	pushq -1784(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000db623
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deae8
	jmp uuid_00000000000deaea
uuid_00000000000deae8:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000de99d
	pushq $0
	pushq $0
	pushq $3
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq $uuid_00000000000de99d
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000deae7
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -1992(%RBP)
	popq -1984(%RBP)
	popq -1976(%RBP)
	popq -1968(%RBP)
	popq -1960(%RBP)
	popq -1952(%RBP)
	popq -1944(%RBP)
	popq -1936(%RBP)
	popq -1928(%RBP)
	popq -1920(%RBP)
	popq -1912(%RBP)
	popq -1904(%RBP)
	popq -1896(%RBP)
	popq -1888(%RBP)
	popq -1880(%RBP)
	popq -1872(%RBP)
	popq -1864(%RBP)
	popq -1856(%RBP)
	popq -1848(%RBP)
	popq -1840(%RBP)
	popq -1832(%RBP)
	popq -1824(%RBP)
	popq -1816(%RBP)
	popq -1808(%RBP)
	popq -1800(%RBP)
uuid_00000000000deaea:
	mov -2000(%RBP),%RSP
	add $-2152, %RSP
#call function blob-render : Arrow<Cons<Cons<Cons<FContext,AST>,Fragment>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_CL_ArrowFragmentConsI64ConsFragmentConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
#call function range : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call range_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
uuid_00000000000deaee:
	mov -680(%RBP),%RSP
	add $-2224, %RSP
	subq $152, %rsp
	pushq -600(%rbp)
	pushq -592(%rbp)
	pushq -584(%rbp)
	pushq -576(%rbp)
	pushq -568(%rbp)
	pushq -560(%rbp)
	pushq -552(%rbp)
	pushq -544(%rbp)
	pushq -536(%rbp)
	pushq -528(%rbp)
	pushq -520(%rbp)
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $296, %rsp
	ret
cc_SB_blob_CL_ArrowFragmentConsASTConsI64ConsTypeConsStringFContext:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	push %RBP
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq $0
	push %RBP
	mov -776(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deaf8
	jmp uuid_00000000000deafa
uuid_00000000000deaf8:
	push %RBP
	pushq -752(%RBP)
	pushq -760(%RBP)
	pushq -768(%RBP)
	jmp uuid_00000000000deaf5
	jmp uuid_00000000000deaf7
uuid_00000000000deaf5:
	push %RBP
	mov -744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deaf2
	jmp uuid_00000000000deaf4
uuid_00000000000deaf2:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deaef
	jmp uuid_00000000000deaf1
uuid_00000000000deaef:
	movb $1, -784(%rbp)
uuid_00000000000deaf1:
	mov -912(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000deaf4:
	mov -832(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000deaf7:
	mov -800(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000deafa:
	mov -792(%RBP),%RSP
	add $-984, %RSP
	mov -784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deafc
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000deafb
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000deafe
uuid_00000000000deafc:
#call function blob-render : Arrow<Cons<Cons<Cons<FContext,AST>,Fragment>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_CL_ArrowFragmentConsI64ConsFragmentConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
#call function range : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call range_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
uuid_00000000000deafe:
	mov -704(%RBP),%RSP
	add $-1056, %RSP
	subq $152, %rsp
	pushq -624(%rbp)
	pushq -616(%rbp)
	pushq -608(%rbp)
	pushq -600(%rbp)
	pushq -592(%rbp)
	pushq -584(%rbp)
	pushq -576(%rbp)
	pushq -568(%rbp)
	pushq -560(%rbp)
	pushq -552(%rbp)
	pushq -544(%rbp)
	pushq -536(%rbp)
	pushq -528(%rbp)
	pushq -520(%rbp)
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $320, %rsp
	ret
cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext:
	pushq -552(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	push %RBP
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq $0
	push %RBP
	mov -720(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deb2f
	jmp uuid_00000000000deb31
uuid_00000000000deb2f:
	push %RBP
	mov -712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -816(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deb26
	jmp uuid_00000000000deb28
uuid_00000000000deb26:
	push %RBP
	mov -808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -912(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deb14
	jmp uuid_00000000000deb16
uuid_00000000000deb14:
	push %RBP
	mov -904(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1008(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deb02
	jmp uuid_00000000000deb04
uuid_00000000000deb02:
	push %RBP
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	jmp uuid_00000000000deaff
	jmp uuid_00000000000deb01
uuid_00000000000deaff:
	movb $1, -1016(%rbp)
uuid_00000000000deb01:
	mov -1032(%RBP),%RSP
	add $-1056, %RSP
uuid_00000000000deb04:
	mov -1024(%RBP),%RSP
	add $-1056, %RSP
	mov -1016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deb11
	jmp uuid_00000000000deb13
uuid_00000000000deb11:
	push %RBP
	mov -896(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1136(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deb0b
	jmp uuid_00000000000deb0d
uuid_00000000000deb0b:
	push %RBP
	jmp uuid_00000000000deb08
	jmp uuid_00000000000deb0a
uuid_00000000000deb08:
	push %RBP
	mov -1072(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000deb05
	jmp uuid_00000000000deb07
uuid_00000000000deb05:
	movb $1, -1144(%rbp)
uuid_00000000000deb07:
	mov -1168(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000deb0a:
	mov -1160(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000deb0d:
	mov -1152(%RBP),%RSP
	add $-1176, %RSP
	mov -1144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deb0e
	jmp uuid_00000000000deb10
uuid_00000000000deb0e:
	movb $1, -920(%rbp)
uuid_00000000000deb10:
	mov -1064(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000deb13:
	mov -936(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000deb16:
	mov -928(%RBP),%RSP
	add $-1176, %RSP
	mov -920(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deb23
	jmp uuid_00000000000deb25
uuid_00000000000deb23:
	push %RBP
	mov -800(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1256(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deb1d
	jmp uuid_00000000000deb1f
uuid_00000000000deb1d:
	push %RBP
	jmp uuid_00000000000deb1a
	jmp uuid_00000000000deb1c
uuid_00000000000deb1a:
	push %RBP
	mov -1192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1296(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deb17
	jmp uuid_00000000000deb19
uuid_00000000000deb17:
	movb $1, -1264(%rbp)
uuid_00000000000deb19:
	mov -1288(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000deb1c:
	mov -1280(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000deb1f:
	mov -1272(%RBP),%RSP
	add $-1296, %RSP
	mov -1264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deb20
	jmp uuid_00000000000deb22
uuid_00000000000deb20:
	movb $1, -824(%rbp)
uuid_00000000000deb22:
	mov -1184(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000deb25:
	mov -840(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000deb28:
	mov -832(%RBP),%RSP
	add $-1296, %RSP
	mov -824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deb2c
	jmp uuid_00000000000deb2e
uuid_00000000000deb2c:
	push %RBP
	mov -704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deb29
	jmp uuid_00000000000deb2b
uuid_00000000000deb29:
	movb $1, -728(%rbp)
uuid_00000000000deb2b:
	mov -1304(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000deb2e:
	mov -744(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000deb31:
	mov -736(%RBP),%RSP
	add $-1376, %RSP
	mov -728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000debc0
	push %RBP
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq $0
	push %RBP
	mov -1456(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deb93
	jmp uuid_00000000000deb95
uuid_00000000000deb93:
	push %RBP
	mov -1448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1552(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deb81
	jmp uuid_00000000000deb83
uuid_00000000000deb81:
	push %RBP
	mov -1544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1648(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deb6f
	jmp uuid_00000000000deb71
uuid_00000000000deb6f:
	push %RBP
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	jmp uuid_00000000000deb6c
	jmp uuid_00000000000deb6e
uuid_00000000000deb6c:
	movb $1, -1656(%rbp)
uuid_00000000000deb6e:
	mov -1672(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000deb71:
	mov -1664(%RBP),%RSP
	add $-1696, %RSP
	mov -1656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deb7e
	jmp uuid_00000000000deb80
uuid_00000000000deb7e:
	push %RBP
	mov -1536(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1776(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deb78
	jmp uuid_00000000000deb7a
uuid_00000000000deb78:
	push %RBP
	jmp uuid_00000000000deb75
	jmp uuid_00000000000deb77
uuid_00000000000deb75:
	push %RBP
	mov -1712(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000deb72
	jmp uuid_00000000000deb74
uuid_00000000000deb72:
	movb $1, -1784(%rbp)
uuid_00000000000deb74:
	mov -1808(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000deb77:
	mov -1800(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000deb7a:
	mov -1792(%RBP),%RSP
	add $-1816, %RSP
	mov -1784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deb7b
	jmp uuid_00000000000deb7d
uuid_00000000000deb7b:
	movb $1, -1560(%rbp)
uuid_00000000000deb7d:
	mov -1704(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000deb80:
	mov -1576(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000deb83:
	mov -1568(%RBP),%RSP
	add $-1816, %RSP
	mov -1560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deb90
	jmp uuid_00000000000deb92
uuid_00000000000deb90:
	push %RBP
	mov -1440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1896(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deb8a
	jmp uuid_00000000000deb8c
uuid_00000000000deb8a:
	push %RBP
	jmp uuid_00000000000deb87
	jmp uuid_00000000000deb89
uuid_00000000000deb87:
	push %RBP
	mov -1832(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1936(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deb84
	jmp uuid_00000000000deb86
uuid_00000000000deb84:
	movb $1, -1904(%rbp)
uuid_00000000000deb86:
	mov -1928(%RBP),%RSP
	add $-1936, %RSP
uuid_00000000000deb89:
	mov -1920(%RBP),%RSP
	add $-1936, %RSP
uuid_00000000000deb8c:
	mov -1912(%RBP),%RSP
	add $-1936, %RSP
	mov -1904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deb8d
	jmp uuid_00000000000deb8f
uuid_00000000000deb8d:
	movb $1, -1464(%rbp)
uuid_00000000000deb8f:
	mov -1824(%RBP),%RSP
	add $-1936, %RSP
uuid_00000000000deb92:
	mov -1480(%RBP),%RSP
	add $-1936, %RSP
uuid_00000000000deb95:
	mov -1472(%RBP),%RSP
	add $-1936, %RSP
	mov -1464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000debbd
	push %RBP
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	mov -2016(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000debba
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000debb9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000debbc
uuid_00000000000debba:
uuid_00000000000debbc:
	mov -1944(%RBP),%RSP
	add $-2016, %RSP
	jmp uuid_00000000000debbf
uuid_00000000000debbd:
	push %RBP
#call function is-cons : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_cons_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000debb6
	push %RBP
#call function is-vararg : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call is_SB_vararg_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000debb3
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000debad
	jmp uuid_00000000000debaf
uuid_00000000000debad:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000debaf:
	mov -1960(%RBP),%RSP
	add $-1960, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
#call function is-impure-offset : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call is_SB_impure_SB_offset_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000debb0
	jmp uuid_00000000000debb2
uuid_00000000000debb0:
	mov -2048(%RBP), %RAX
	movq %RAX, -552(%rbp)
uuid_00000000000debb2:
	mov -2120(%RBP),%RSP
	add $-2120, %RSP
	mov -2080(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1816(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000debb5
uuid_00000000000debb3:
#call function get-vararg-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call get_SB_vararg_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1696(%RBP)
	popq -1688(%RBP)
	popq -1680(%RBP)
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000debaa
	jmp uuid_00000000000debac
uuid_00000000000debaa:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000debac:
	mov -1960(%RBP),%RSP
	add $-1960, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	mov -2080(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function bind-vararg : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1816(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	mov %RBX, %RBP
	call bind_SB_vararg_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000debb5:
	mov -1952(%RBP),%RSP
	add $-2112, %RSP
	jmp uuid_00000000000debb8
uuid_00000000000debb6:
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	push %RBP
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq $0
	push %RBP
	mov -2096(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deb9c
	jmp uuid_00000000000deb9e
uuid_00000000000deb9c:
	push %RBP
	mov -2088(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deb99
	jmp uuid_00000000000deb9b
uuid_00000000000deb99:
	push %RBP
	mov -2080(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deb96
	jmp uuid_00000000000deb98
uuid_00000000000deb96:
	movb $1, -2104(%rbp)
uuid_00000000000deb98:
	mov -2200(%RBP),%RSP
	add $-2272, %RSP
uuid_00000000000deb9b:
	mov -2120(%RBP),%RSP
	add $-2272, %RSP
uuid_00000000000deb9e:
	mov -2112(%RBP),%RSP
	add $-2272, %RSP
	mov -2104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deba7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000deba6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000deba9
uuid_00000000000deba7:
	push %RBP
#call function is-vararg : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call is_SB_vararg_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deba3
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000deba2
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000deba5
uuid_00000000000deba3:
#call function get-vararg-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call get_SB_vararg_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1696(%RBP)
	popq -1688(%RBP)
	popq -1680(%RBP)
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deb9f
	jmp uuid_00000000000deba1
uuid_00000000000deb9f:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000deba1:
	mov -2288(%RBP),%RSP
	add $-2288, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	mov -2408(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function bind-vararg : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1816(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
	pushq -2336(%rbp)
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	pushq -2408(%rbp)
	pushq -2416(%rbp)
	pushq -2424(%rbp)
	pushq -2432(%rbp)
	pushq -2440(%rbp)
	mov %RBX, %RBP
	call bind_SB_vararg_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function cc-args : Arrow<Cons<Cons<Cons<Cons<FContext,FContext>,AST>,AST>,I64>,Tuple<I64,Tuple<FContext,FContext>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -552(%rbp)
	mov %RBX, %RBP
	call cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used424
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq -2560(%RBP)
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq -2592(%RBP)
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	pushq -2624(%RBP)
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	pushq -2656(%RBP)
	pushq -2664(%RBP)
	pushq -2672(%RBP)
	pushq -2680(%RBP)
	pushq -2688(%RBP)
	pushq -2696(%RBP)
	pushq -2704(%RBP)
	pushq -2712(%RBP)
	pushq -2720(%RBP)
	pushq -2728(%RBP)
	pushq -2736(%RBP)
	pushq -2744(%RBP)
	pushq -2752(%RBP)
	pushq -2760(%RBP)
	pushq -2768(%RBP)
	pushq -2776(%RBP)
	pushq -2784(%RBP)
	pushq -2792(%RBP)
	pushq -2800(%RBP)
	pushq -2808(%RBP)
	pushq -2816(%RBP)
	pushq -2824(%RBP)
	pushq -2832(%RBP)
	pushq -2840(%RBP)
	pushq -2848(%RBP)
	pushq -2856(%RBP)
	pushq -2872(%RBP)
	pushq -2880(%RBP)
	pushq -2888(%RBP)
	pushq -2896(%RBP)
	pushq -2904(%RBP)
	pushq -2912(%RBP)
	pushq -2920(%RBP)
	pushq -2928(%RBP)
	pushq -2936(%RBP)
	pushq -2944(%RBP)
	pushq -2952(%RBP)
	pushq -2960(%RBP)
	pushq -2968(%RBP)
	pushq -2976(%RBP)
	pushq -2984(%RBP)
	pushq -2992(%RBP)
	pushq -3000(%RBP)
	pushq -3008(%RBP)
	pushq -3016(%RBP)
	pushq -3024(%RBP)
	pushq -3032(%RBP)
	pushq -3040(%RBP)
	pushq -3048(%RBP)
	pushq -3056(%RBP)
	pushq -3064(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -3072(%RBP)
	pushq -3080(%RBP)
	pushq -3088(%RBP)
	pushq -3096(%RBP)
	pushq -3104(%RBP)
	pushq -3112(%RBP)
	pushq -3120(%RBP)
	pushq -3128(%RBP)
	pushq -3136(%RBP)
	pushq -3144(%RBP)
	pushq -3152(%RBP)
	pushq -3160(%RBP)
	pushq -3168(%RBP)
	pushq -3176(%RBP)
	pushq -3184(%RBP)
	pushq -3192(%RBP)
	pushq -3200(%RBP)
	pushq -3208(%RBP)
	pushq -3216(%RBP)
	pushq -3224(%RBP)
	pushq -3232(%RBP)
	pushq -3240(%RBP)
	pushq -3248(%RBP)
	pushq -3256(%RBP)
	pushq -3264(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	mov -2448(%RBP), %RAX
	movq %RAX, -552(%rbp)
uuid_00000000000deba5:
	mov -2280(%RBP),%RSP
	add $-3272, %RSP
uuid_00000000000deba9:
	mov -2024(%RBP),%RSP
	add $-3272, %RSP
uuid_00000000000debb8:
	mov -1944(%RBP),%RSP
	add $-3272, %RSP
uuid_00000000000debbf:
	mov -1384(%RBP),%RSP
	add $-3272, %RSP
	jmp uuid_00000000000debc2
uuid_00000000000debc0:
	push %RBP
#call function is-cons : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_cons_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deb66
	push %RBP
#call function is-vararg : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_vararg_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deb63
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deb5d
	jmp uuid_00000000000deb5f
uuid_00000000000deb5d:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000deb5f:
	mov -1400(%RBP),%RSP
	add $-1400, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deb60
	jmp uuid_00000000000deb62
uuid_00000000000deb60:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -552(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -552(%rbp)
uuid_00000000000deb62:
	mov -1560(%RBP),%RSP
	add $-1560, %RSP
	mov -1520(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1176(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000deb65
uuid_00000000000deb63:
#call function get-vararg-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call get_SB_vararg_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1056(%RBP)
	popq -1048(%RBP)
	popq -1040(%RBP)
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deb5a
#call function cc-args : Arrow<Cons<Cons<Cons<Cons<FContext,FContext>,AST>,AST>,I64>,Tuple<I64,Tuple<FContext,FContext>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	mov %RBX, %RBP
	call cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used424
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	pushq -1656(%RBP)
	pushq -1664(%RBP)
	pushq -1672(%RBP)
	pushq -1680(%RBP)
	pushq -1688(%RBP)
	pushq -1696(%RBP)
	pushq -1704(%RBP)
	pushq -1712(%RBP)
	pushq -1720(%RBP)
	pushq -1728(%RBP)
	pushq -1736(%RBP)
	pushq -1744(%RBP)
	pushq -1752(%RBP)
	pushq -1760(%RBP)
	pushq -1768(%RBP)
	pushq -1776(%RBP)
	pushq -1784(%RBP)
	pushq -1792(%RBP)
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	pushq -1856(%RBP)
	pushq -1864(%RBP)
	pushq -1872(%RBP)
	pushq -1880(%RBP)
	pushq -1888(%RBP)
	pushq -1896(%RBP)
	pushq -1904(%RBP)
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -2032(%RBP)
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2152(%RBP)
	pushq -2160(%RBP)
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	pushq -2224(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	mov -1408(%RBP), %RAX
	movq %RAX, -552(%rbp)
	jmp uuid_00000000000deb5c
uuid_00000000000deb5a:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deb54
	jmp uuid_00000000000deb56
uuid_00000000000deb54:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000deb56:
	mov -1408(%RBP),%RSP
	add $-1408, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deb57
	jmp uuid_00000000000deb59
uuid_00000000000deb57:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -552(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -552(%rbp)
uuid_00000000000deb59:
	mov -1568(%RBP),%RSP
	add $-1568, %RSP
	mov -1528(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function bind-vararg : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1176(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	mov %RBX, %RBP
	call bind_SB_vararg_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000deb5c:
	mov -1400(%RBP),%RSP
	add $-1568, %RSP
uuid_00000000000deb65:
	mov -1392(%RBP),%RSP
	add $-1568, %RSP
	jmp uuid_00000000000deb68
uuid_00000000000deb66:
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	push %RBP
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq $0
	push %RBP
	mov -1536(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deb38
	jmp uuid_00000000000deb3a
uuid_00000000000deb38:
	push %RBP
	mov -1528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deb35
	jmp uuid_00000000000deb37
uuid_00000000000deb35:
	push %RBP
	mov -1520(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deb32
	jmp uuid_00000000000deb34
uuid_00000000000deb32:
	movb $1, -1544(%rbp)
uuid_00000000000deb34:
	mov -1640(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000deb37:
	mov -1560(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000deb3a:
	mov -1552(%RBP),%RSP
	add $-1712, %RSP
	mov -1544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deb51
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000deb50
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000deb53
uuid_00000000000deb51:
	push %RBP
#call function is-vararg : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_vararg_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deb4d
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deb44
	jmp uuid_00000000000deb46
uuid_00000000000deb44:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000deb46:
	mov -1728(%RBP),%RSP
	add $-1728, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
#call function is-impure-offset : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_impure_SB_offset_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deb47
	jmp uuid_00000000000deb49
uuid_00000000000deb47:
	mov -1816(%RBP), %RAX
	movq %RAX, -552(%rbp)
uuid_00000000000deb49:
	mov -1888(%RBP),%RSP
	add $-1888, %RSP
	push %RBP
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deb4a
	jmp uuid_00000000000deb4c
uuid_00000000000deb4a:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -552(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -552(%rbp)
uuid_00000000000deb4c:
	mov -1896(%RBP),%RSP
	add $-1896, %RSP
	mov -1848(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1176(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function cc-args : Arrow<Cons<Cons<Cons<Cons<FContext,FContext>,AST>,AST>,I64>,Tuple<I64,Tuple<FContext,FContext>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -552(%rbp)
	mov %RBX, %RBP
	call cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used424
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	pushq -2032(%RBP)
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2152(%RBP)
	pushq -2160(%RBP)
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	pushq -2224(%RBP)
	pushq -2232(%RBP)
	pushq -2240(%RBP)
	pushq -2248(%RBP)
	pushq -2256(%RBP)
	pushq -2264(%RBP)
	pushq -2272(%RBP)
	pushq -2280(%RBP)
	pushq -2288(%RBP)
	pushq -2296(%RBP)
	pushq -2304(%RBP)
	pushq -2312(%RBP)
	pushq -2328(%RBP)
	pushq -2336(%RBP)
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	pushq -2360(%RBP)
	pushq -2368(%RBP)
	pushq -2376(%RBP)
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq -2560(%RBP)
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq -2592(%RBP)
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	pushq -2624(%RBP)
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	pushq -2656(%RBP)
	pushq -2664(%RBP)
	pushq -2672(%RBP)
	pushq -2680(%RBP)
	pushq -2688(%RBP)
	pushq -2696(%RBP)
	pushq -2704(%RBP)
	pushq -2712(%RBP)
	pushq -2720(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	mov -1904(%RBP), %RAX
	movq %RAX, -552(%rbp)
	jmp uuid_00000000000deb4f
uuid_00000000000deb4d:
#call function get-vararg-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call get_SB_vararg_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1056(%RBP)
	popq -1048(%RBP)
	popq -1040(%RBP)
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deb41
#call function cc-args : Arrow<Cons<Cons<Cons<Cons<FContext,FContext>,AST>,AST>,I64>,Tuple<I64,Tuple<FContext,FContext>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	mov %RBX, %RBP
	call cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used424
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	pushq -1744(%RBP)
	pushq -1752(%RBP)
	pushq -1760(%RBP)
	pushq -1768(%RBP)
	pushq -1776(%RBP)
	pushq -1784(%RBP)
	pushq -1792(%RBP)
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	pushq -1824(%RBP)
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	pushq -1856(%RBP)
	pushq -1864(%RBP)
	pushq -1872(%RBP)
	pushq -1880(%RBP)
	pushq -1888(%RBP)
	pushq -1896(%RBP)
	pushq -1904(%RBP)
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	pushq -2032(%RBP)
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2160(%RBP)
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	pushq -2224(%RBP)
	pushq -2232(%RBP)
	pushq -2240(%RBP)
	pushq -2248(%RBP)
	pushq -2256(%RBP)
	pushq -2264(%RBP)
	pushq -2272(%RBP)
	pushq -2280(%RBP)
	pushq -2288(%RBP)
	pushq -2296(%RBP)
	pushq -2304(%RBP)
	pushq -2312(%RBP)
	pushq -2320(%RBP)
	pushq -2328(%RBP)
	pushq -2336(%RBP)
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -2360(%RBP)
	pushq -2368(%RBP)
	pushq -2376(%RBP)
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	mov -1736(%RBP), %RAX
	movq %RAX, -552(%rbp)
	jmp uuid_00000000000deb43
uuid_00000000000deb41:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deb3b
	jmp uuid_00000000000deb3d
uuid_00000000000deb3b:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000deb3d:
	mov -1736(%RBP),%RSP
	add $-1736, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deb3e
	jmp uuid_00000000000deb40
uuid_00000000000deb3e:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -552(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -552(%rbp)
uuid_00000000000deb40:
	mov -1896(%RBP),%RSP
	add $-1896, %RSP
	mov -1856(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function bind-vararg : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1176(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	mov %RBX, %RBP
	call bind_SB_vararg_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function cc-args : Arrow<Cons<Cons<Cons<Cons<FContext,FContext>,AST>,AST>,I64>,Tuple<I64,Tuple<FContext,FContext>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -552(%rbp)
	mov %RBX, %RBP
	call cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used424
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	pushq -2032(%RBP)
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2152(%RBP)
	pushq -2160(%RBP)
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	pushq -2224(%RBP)
	pushq -2232(%RBP)
	pushq -2240(%RBP)
	pushq -2248(%RBP)
	pushq -2256(%RBP)
	pushq -2264(%RBP)
	pushq -2272(%RBP)
	pushq -2280(%RBP)
	pushq -2288(%RBP)
	pushq -2296(%RBP)
	pushq -2304(%RBP)
	pushq -2312(%RBP)
	pushq -2328(%RBP)
	pushq -2336(%RBP)
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	pushq -2360(%RBP)
	pushq -2368(%RBP)
	pushq -2376(%RBP)
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq -2560(%RBP)
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq -2592(%RBP)
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	pushq -2624(%RBP)
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	pushq -2656(%RBP)
	pushq -2664(%RBP)
	pushq -2672(%RBP)
	pushq -2680(%RBP)
	pushq -2688(%RBP)
	pushq -2696(%RBP)
	pushq -2704(%RBP)
	pushq -2712(%RBP)
	pushq -2720(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	mov -1904(%RBP), %RAX
	movq %RAX, -552(%rbp)
uuid_00000000000deb43:
	mov -1728(%RBP),%RSP
	add $-2728, %RSP
uuid_00000000000deb4f:
	mov -1720(%RBP),%RSP
	add $-2728, %RSP
uuid_00000000000deb53:
	mov -1464(%RBP),%RSP
	add $-2728, %RSP
uuid_00000000000deb68:
	mov -1384(%RBP),%RSP
	add $-2728, %RSP
	push %RBP
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deb69
	jmp uuid_00000000000deb6b
uuid_00000000000deb69:
	movq -568(%rbp), %r15
	movq %r15, -552(%rbp)
	mov -568(%rbp), %r15
	mov %r15, -552(%rbp)
uuid_00000000000deb6b:
	mov -2736(%RBP),%RSP
	add $-2736, %RSP
uuid_00000000000debc2:
	mov -648(%RBP),%RSP
	add $-2736, %RSP
	pushq -552(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq $0
	pushq $0
	subq $424, %rsp
	pushq 424(%rsp)
	pushq 440(%rsp)
	pushq 456(%rsp)
	pushq 472(%rsp)
	pushq 488(%rsp)
	pushq 504(%rsp)
	pushq 520(%rsp)
	pushq 536(%rsp)
	pushq 552(%rsp)
	pushq 568(%rsp)
	pushq 584(%rsp)
	pushq 600(%rsp)
	pushq 616(%rsp)
	pushq 632(%rsp)
	pushq 648(%rsp)
	pushq 664(%rsp)
	pushq 680(%rsp)
	pushq 696(%rsp)
	pushq 712(%rsp)
	pushq 728(%rsp)
	pushq 744(%rsp)
	pushq 760(%rsp)
	pushq 776(%rsp)
	pushq 792(%rsp)
	pushq 808(%rsp)
	pushq 824(%rsp)
	pushq 840(%rsp)
	pushq 856(%rsp)
	pushq 872(%rsp)
	pushq 888(%rsp)
	pushq 904(%rsp)
	pushq 920(%rsp)
	pushq 936(%rsp)
	pushq 952(%rsp)
	pushq 968(%rsp)
	pushq 984(%rsp)
	pushq 1000(%rsp)
	pushq 1016(%rsp)
	pushq 1032(%rsp)
	pushq 1048(%rsp)
	pushq 1064(%rsp)
	pushq 1080(%rsp)
	pushq 1096(%rsp)
	pushq 1112(%rsp)
	pushq 1128(%rsp)
	pushq 1144(%rsp)
	pushq 1160(%rsp)
	pushq 1176(%rsp)
	pushq 1192(%rsp)
	pushq 1208(%rsp)
	pushq 1224(%rsp)
	pushq 1240(%rsp)
	pushq 1256(%rsp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	popq -600(%rbp)
	popq -608(%rbp)
	popq -616(%rbp)
	popq -624(%rbp)
	popq -632(%rbp)
	popq -640(%rbp)
	popq -648(%rbp)
	popq -656(%rbp)
	popq -664(%rbp)
	popq -672(%rbp)
	popq -680(%rbp)
	popq -688(%rbp)
	popq -696(%rbp)
	popq -704(%rbp)
	popq -712(%rbp)
	popq -720(%rbp)
	popq -728(%rbp)
	popq -736(%rbp)
	popq -744(%rbp)
	popq -752(%rbp)
	popq -760(%rbp)
	popq -768(%rbp)
	popq -776(%rbp)
	popq -784(%rbp)
	popq -792(%rbp)
	popq -800(%rbp)
	popq -808(%rbp)
	popq -816(%rbp)
	popq -824(%rbp)
	popq -832(%rbp)
	popq -840(%rbp)
	popq -848(%rbp)
	popq -856(%rbp)
	popq -864(%rbp)
	popq -872(%rbp)
	popq -880(%rbp)
	popq -888(%rbp)
	popq -896(%rbp)
	popq -904(%rbp)
	popq -912(%rbp)
	popq -920(%rbp)
	popq -928(%rbp)
	popq -936(%rbp)
	popq -944(%rbp)
	popq -952(%rbp)
	popq -960(%rbp)
	popq -968(%rbp)
	popq -976(%rbp)
	popq -984(%rbp)
	addq $424, %rsp
	mov %rbp, %rsp
	sub $560, %rsp
	ret
blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext:
	pushq $0
	pushq $0
	pushq $3
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deed8
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deed5
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000debc9
	jmp uuid_00000000000debcb
uuid_00000000000debc9:
	push %RBP
	jmp uuid_00000000000debc6
	jmp uuid_00000000000debc8
uuid_00000000000debc6:
	push %RBP
	mov -568(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000debc3
	jmp uuid_00000000000debc5
uuid_00000000000debc3:
	movb $1, -640(%rbp)
uuid_00000000000debc5:
	mov -664(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000debc8:
	mov -656(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000debcb:
	mov -648(%RBP),%RSP
	add $-672, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deed2
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000debd2
	jmp uuid_00000000000debd4
uuid_00000000000debd2:
	push %RBP
	jmp uuid_00000000000debcf
	jmp uuid_00000000000debd1
uuid_00000000000debcf:
	push %RBP
	mov -688(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000debcc
	jmp uuid_00000000000debce
uuid_00000000000debcc:
	movb $1, -760(%rbp)
uuid_00000000000debce:
	mov -784(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000debd1:
	mov -776(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000debd4:
	mov -768(%RBP),%RSP
	add $-792, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deecf
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -872(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000debf3
	jmp uuid_00000000000debf5
uuid_00000000000debf3:
	push %RBP
	mov -864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -968(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000debe1
	jmp uuid_00000000000debe3
uuid_00000000000debe1:
	push %RBP
	mov -960(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1064(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000debd8
	jmp uuid_00000000000debda
uuid_00000000000debd8:
	push %RBP
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	jmp uuid_00000000000debd5
	jmp uuid_00000000000debd7
uuid_00000000000debd5:
	movb $1, -1072(%rbp)
uuid_00000000000debd7:
	mov -1088(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000debda:
	mov -1080(%RBP),%RSP
	add $-1112, %RSP
	mov -1072(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000debde
	jmp uuid_00000000000debe0
uuid_00000000000debde:
	push %RBP
	mov -952(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000debdb
	jmp uuid_00000000000debdd
uuid_00000000000debdb:
	movb $1, -976(%rbp)
uuid_00000000000debdd:
	mov -1120(%RBP),%RSP
	add $-1192, %RSP
uuid_00000000000debe0:
	mov -992(%RBP),%RSP
	add $-1192, %RSP
uuid_00000000000debe3:
	mov -984(%RBP),%RSP
	add $-1192, %RSP
	mov -976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000debf0
	jmp uuid_00000000000debf2
uuid_00000000000debf0:
	push %RBP
	mov -856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1272(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000debea
	jmp uuid_00000000000debec
uuid_00000000000debea:
	push %RBP
	jmp uuid_00000000000debe7
	jmp uuid_00000000000debe9
uuid_00000000000debe7:
	push %RBP
	mov -1208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1312(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000debe4
	jmp uuid_00000000000debe6
uuid_00000000000debe4:
	movb $1, -1280(%rbp)
uuid_00000000000debe6:
	mov -1304(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000debe9:
	mov -1296(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000debec:
	mov -1288(%RBP),%RSP
	add $-1312, %RSP
	mov -1280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000debed
	jmp uuid_00000000000debef
uuid_00000000000debed:
	movb $1, -880(%rbp)
uuid_00000000000debef:
	mov -1200(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000debf2:
	mov -896(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000debf5:
	mov -888(%RBP),%RSP
	add $-1312, %RSP
	mov -880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deecc
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -1392(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec14
	jmp uuid_00000000000dec16
uuid_00000000000dec14:
	push %RBP
	mov -1384(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec02
	jmp uuid_00000000000dec04
uuid_00000000000dec02:
	push %RBP
	mov -1480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1584(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000debf9
	jmp uuid_00000000000debfb
uuid_00000000000debf9:
	push %RBP
	pushq -1560(%RBP)
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	jmp uuid_00000000000debf6
	jmp uuid_00000000000debf8
uuid_00000000000debf6:
	movb $1, -1592(%rbp)
uuid_00000000000debf8:
	mov -1608(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000debfb:
	mov -1600(%RBP),%RSP
	add $-1632, %RSP
	mov -1592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000debff
	jmp uuid_00000000000dec01
uuid_00000000000debff:
	push %RBP
	mov -1472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000debfc
	jmp uuid_00000000000debfe
uuid_00000000000debfc:
	movb $1, -1496(%rbp)
uuid_00000000000debfe:
	mov -1640(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000dec01:
	mov -1512(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000dec04:
	mov -1504(%RBP),%RSP
	add $-1712, %RSP
	mov -1496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dec11
	jmp uuid_00000000000dec13
uuid_00000000000dec11:
	push %RBP
	mov -1376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1792(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec0b
	jmp uuid_00000000000dec0d
uuid_00000000000dec0b:
	push %RBP
	jmp uuid_00000000000dec08
	jmp uuid_00000000000dec0a
uuid_00000000000dec08:
	push %RBP
	mov -1728(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1832(%rbp)
	pushq $uuid_00000000000db15f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dec05
	jmp uuid_00000000000dec07
uuid_00000000000dec05:
	movb $1, -1800(%rbp)
uuid_00000000000dec07:
	mov -1824(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000dec0a:
	mov -1816(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000dec0d:
	mov -1808(%RBP),%RSP
	add $-1832, %RSP
	mov -1800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dec0e
	jmp uuid_00000000000dec10
uuid_00000000000dec0e:
	movb $1, -1400(%rbp)
uuid_00000000000dec10:
	mov -1720(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000dec13:
	mov -1416(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000dec16:
	mov -1408(%RBP),%RSP
	add $-1832, %RSP
	mov -1400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deec9
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -1912(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec26
	jmp uuid_00000000000dec28
uuid_00000000000dec26:
	push %RBP
	mov -1904(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dec23
	jmp uuid_00000000000dec25
uuid_00000000000dec23:
	push %RBP
	mov -1896(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2088(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec1d
	jmp uuid_00000000000dec1f
uuid_00000000000dec1d:
	push %RBP
	jmp uuid_00000000000dec1a
	jmp uuid_00000000000dec1c
uuid_00000000000dec1a:
	push %RBP
	mov -2024(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2128(%rbp)
	pushq $uuid_00000000000db4fa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dec17
	jmp uuid_00000000000dec19
uuid_00000000000dec17:
	movb $1, -2096(%rbp)
uuid_00000000000dec19:
	mov -2120(%RBP),%RSP
	add $-2128, %RSP
uuid_00000000000dec1c:
	mov -2112(%RBP),%RSP
	add $-2128, %RSP
uuid_00000000000dec1f:
	mov -2104(%RBP),%RSP
	add $-2128, %RSP
	mov -2096(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dec20
	jmp uuid_00000000000dec22
uuid_00000000000dec20:
	movb $1, -1920(%rbp)
uuid_00000000000dec22:
	mov -2016(%RBP),%RSP
	add $-2128, %RSP
uuid_00000000000dec25:
	mov -1936(%RBP),%RSP
	add $-2128, %RSP
uuid_00000000000dec28:
	mov -1928(%RBP),%RSP
	add $-2128, %RSP
	mov -1920(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deec6
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -2208(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec9d
	jmp uuid_00000000000dec9f
uuid_00000000000dec9d:
	push %RBP
	mov -2200(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2304(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec69
	jmp uuid_00000000000dec6b
uuid_00000000000dec69:
	push %RBP
	mov -2296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dec66
	jmp uuid_00000000000dec68
uuid_00000000000dec66:
	push %RBP
	mov -2288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2480(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec60
	jmp uuid_00000000000dec62
uuid_00000000000dec60:
	push %RBP
	mov -2472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2576(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec42
	jmp uuid_00000000000dec44
uuid_00000000000dec42:
	push %RBP
	mov -2568(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2672(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec2f
	jmp uuid_00000000000dec31
uuid_00000000000dec2f:
	push %RBP
	jmp uuid_00000000000dec2c
	jmp uuid_00000000000dec2e
uuid_00000000000dec2c:
	push %RBP
	mov -2608(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dec29
	jmp uuid_00000000000dec2b
uuid_00000000000dec29:
	movb $1, -2680(%rbp)
uuid_00000000000dec2b:
	mov -2704(%RBP),%RSP
	add $-2712, %RSP
uuid_00000000000dec2e:
	mov -2696(%RBP),%RSP
	add $-2712, %RSP
uuid_00000000000dec31:
	mov -2688(%RBP),%RSP
	add $-2712, %RSP
	mov -2680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dec3f
	jmp uuid_00000000000dec41
uuid_00000000000dec3f:
	push %RBP
	mov -2560(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2792(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec39
	jmp uuid_00000000000dec3b
uuid_00000000000dec39:
	push %RBP
	jmp uuid_00000000000dec36
	jmp uuid_00000000000dec38
uuid_00000000000dec36:
	push %RBP
	mov -2728(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2832(%rbp)
	pushq $uuid_00000000000dec32
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dec33
	jmp uuid_00000000000dec35
uuid_00000000000dec33:
	movb $1, -2800(%rbp)
uuid_00000000000dec35:
	mov -2824(%RBP),%RSP
	add $-2832, %RSP
uuid_00000000000dec38:
	mov -2816(%RBP),%RSP
	add $-2832, %RSP
uuid_00000000000dec3b:
	mov -2808(%RBP),%RSP
	add $-2832, %RSP
	mov -2800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dec3c
	jmp uuid_00000000000dec3e
uuid_00000000000dec3c:
	movb $1, -2584(%rbp)
uuid_00000000000dec3e:
	mov -2720(%RBP),%RSP
	add $-2832, %RSP
uuid_00000000000dec41:
	mov -2600(%RBP),%RSP
	add $-2832, %RSP
uuid_00000000000dec44:
	mov -2592(%RBP),%RSP
	add $-2832, %RSP
	mov -2584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dec5d
	jmp uuid_00000000000dec5f
uuid_00000000000dec5d:
	push %RBP
	mov -2464(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2912(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec57
	jmp uuid_00000000000dec59
uuid_00000000000dec57:
	push %RBP
	jmp uuid_00000000000dec54
	jmp uuid_00000000000dec56
uuid_00000000000dec54:
	push %RBP
	mov -2880(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3016(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec51
	jmp uuid_00000000000dec53
uuid_00000000000dec51:
	push %RBP
	mov -2872(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3096(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec4b
	jmp uuid_00000000000dec4d
uuid_00000000000dec4b:
	push %RBP
	jmp uuid_00000000000dec48
	jmp uuid_00000000000dec4a
uuid_00000000000dec48:
	push %RBP
	mov -3032(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dec45
	jmp uuid_00000000000dec47
uuid_00000000000dec45:
	movb $1, -3104(%rbp)
uuid_00000000000dec47:
	mov -3128(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000dec4a:
	mov -3120(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000dec4d:
	mov -3112(%RBP),%RSP
	add $-3136, %RSP
	mov -3104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dec4e
	jmp uuid_00000000000dec50
uuid_00000000000dec4e:
	movb $1, -2920(%rbp)
uuid_00000000000dec50:
	mov -3024(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000dec53:
	mov -2944(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000dec56:
	mov -2936(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000dec59:
	mov -2928(%RBP),%RSP
	add $-3136, %RSP
	mov -2920(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dec5a
	jmp uuid_00000000000dec5c
uuid_00000000000dec5a:
	movb $1, -2488(%rbp)
uuid_00000000000dec5c:
	mov -2840(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000dec5f:
	mov -2504(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000dec62:
	mov -2496(%RBP),%RSP
	add $-3136, %RSP
	mov -2488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dec63
	jmp uuid_00000000000dec65
uuid_00000000000dec63:
	movb $1, -2312(%rbp)
uuid_00000000000dec65:
	mov -2408(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000dec68:
	mov -2328(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000dec6b:
	mov -2320(%RBP),%RSP
	add $-3136, %RSP
	mov -2312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dec9a
	jmp uuid_00000000000dec9c
uuid_00000000000dec9a:
	push %RBP
	mov -2192(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3216(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec94
	jmp uuid_00000000000dec96
uuid_00000000000dec94:
	push %RBP
	mov -3208(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3312(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec82
	jmp uuid_00000000000dec84
uuid_00000000000dec82:
	push %RBP
	mov -3304(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3408(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec6f
	jmp uuid_00000000000dec71
uuid_00000000000dec6f:
	push %RBP
	jmp uuid_00000000000dec6c
	jmp uuid_00000000000dec6e
uuid_00000000000dec6c:
	movb $1, -3416(%rbp)
uuid_00000000000dec6e:
	mov -3432(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000dec71:
	mov -3424(%RBP),%RSP
	add $-3432, %RSP
	mov -3416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dec7f
	jmp uuid_00000000000dec81
uuid_00000000000dec7f:
	push %RBP
	mov -3296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3512(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec79
	jmp uuid_00000000000dec7b
uuid_00000000000dec79:
	push %RBP
	jmp uuid_00000000000dec76
	jmp uuid_00000000000dec78
uuid_00000000000dec76:
	push %RBP
	mov -3448(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3552(%rbp)
	pushq $uuid_00000000000dec72
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dec73
	jmp uuid_00000000000dec75
uuid_00000000000dec73:
	movb $1, -3520(%rbp)
uuid_00000000000dec75:
	mov -3544(%RBP),%RSP
	add $-3552, %RSP
uuid_00000000000dec78:
	mov -3536(%RBP),%RSP
	add $-3552, %RSP
uuid_00000000000dec7b:
	mov -3528(%RBP),%RSP
	add $-3552, %RSP
	mov -3520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dec7c
	jmp uuid_00000000000dec7e
uuid_00000000000dec7c:
	movb $1, -3320(%rbp)
uuid_00000000000dec7e:
	mov -3440(%RBP),%RSP
	add $-3552, %RSP
uuid_00000000000dec81:
	mov -3336(%RBP),%RSP
	add $-3552, %RSP
uuid_00000000000dec84:
	mov -3328(%RBP),%RSP
	add $-3552, %RSP
	mov -3320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dec91
	jmp uuid_00000000000dec93
uuid_00000000000dec91:
	push %RBP
	mov -3200(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3632(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec8b
	jmp uuid_00000000000dec8d
uuid_00000000000dec8b:
	push %RBP
	jmp uuid_00000000000dec88
	jmp uuid_00000000000dec8a
uuid_00000000000dec88:
	push %RBP
	mov -3568(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3672(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dec85
	jmp uuid_00000000000dec87
uuid_00000000000dec85:
	movb $1, -3640(%rbp)
uuid_00000000000dec87:
	mov -3664(%RBP),%RSP
	add $-3672, %RSP
uuid_00000000000dec8a:
	mov -3656(%RBP),%RSP
	add $-3672, %RSP
uuid_00000000000dec8d:
	mov -3648(%RBP),%RSP
	add $-3672, %RSP
	mov -3640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dec8e
	jmp uuid_00000000000dec90
uuid_00000000000dec8e:
	movb $1, -3224(%rbp)
uuid_00000000000dec90:
	mov -3560(%RBP),%RSP
	add $-3672, %RSP
uuid_00000000000dec93:
	mov -3240(%RBP),%RSP
	add $-3672, %RSP
uuid_00000000000dec96:
	mov -3232(%RBP),%RSP
	add $-3672, %RSP
	mov -3224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dec97
	jmp uuid_00000000000dec99
uuid_00000000000dec97:
	movb $1, -2216(%rbp)
uuid_00000000000dec99:
	mov -3144(%RBP),%RSP
	add $-3672, %RSP
uuid_00000000000dec9c:
	mov -2232(%RBP),%RSP
	add $-3672, %RSP
uuid_00000000000dec9f:
	mov -2224(%RBP),%RSP
	add $-3672, %RSP
	mov -2216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deec3
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -3752(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ded08
	jmp uuid_00000000000ded0a
uuid_00000000000ded08:
	push %RBP
	mov -3744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3848(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000decd4
	jmp uuid_00000000000decd6
uuid_00000000000decd4:
	push %RBP
	mov -3840(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000decd1
	jmp uuid_00000000000decd3
uuid_00000000000decd1:
	push %RBP
	mov -3832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4024(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deccb
	jmp uuid_00000000000deccd
uuid_00000000000deccb:
	push %RBP
	mov -4016(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000decc8
	jmp uuid_00000000000decca
uuid_00000000000decc8:
	push %RBP
	mov -4008(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4200(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000decc2
	jmp uuid_00000000000decc4
uuid_00000000000decc2:
	push %RBP
	jmp uuid_00000000000decbf
	jmp uuid_00000000000decc1
uuid_00000000000decbf:
	push %RBP
	mov -4168(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4304(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000decbc
	jmp uuid_00000000000decbe
uuid_00000000000decbc:
	push %RBP
	mov -4160(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4384(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000decb6
	jmp uuid_00000000000decb8
uuid_00000000000decb6:
	push %RBP
	jmp uuid_00000000000decb3
	jmp uuid_00000000000decb5
uuid_00000000000decb3:
	push %RBP
	mov -4320(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000decb0
	jmp uuid_00000000000decb2
uuid_00000000000decb0:
	movb $1, -4392(%rbp)
uuid_00000000000decb2:
	mov -4416(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000decb5:
	mov -4408(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000decb8:
	mov -4400(%RBP),%RSP
	add $-4424, %RSP
	mov -4392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000decb9
	jmp uuid_00000000000decbb
uuid_00000000000decb9:
	movb $1, -4208(%rbp)
uuid_00000000000decbb:
	mov -4312(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000decbe:
	mov -4232(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000decc1:
	mov -4224(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000decc4:
	mov -4216(%RBP),%RSP
	add $-4424, %RSP
	mov -4208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000decc5
	jmp uuid_00000000000decc7
uuid_00000000000decc5:
	movb $1, -4032(%rbp)
uuid_00000000000decc7:
	mov -4128(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000decca:
	mov -4048(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000deccd:
	mov -4040(%RBP),%RSP
	add $-4424, %RSP
	mov -4032(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000decce
	jmp uuid_00000000000decd0
uuid_00000000000decce:
	movb $1, -3856(%rbp)
uuid_00000000000decd0:
	mov -3952(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000decd3:
	mov -3872(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000decd6:
	mov -3864(%RBP),%RSP
	add $-4424, %RSP
	mov -3856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ded05
	jmp uuid_00000000000ded07
uuid_00000000000ded05:
	push %RBP
	mov -3736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4504(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000decff
	jmp uuid_00000000000ded01
uuid_00000000000decff:
	push %RBP
	mov -4496(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4600(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deced
	jmp uuid_00000000000decef
uuid_00000000000deced:
	push %RBP
	mov -4592(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4696(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000decda
	jmp uuid_00000000000decdc
uuid_00000000000decda:
	push %RBP
	jmp uuid_00000000000decd7
	jmp uuid_00000000000decd9
uuid_00000000000decd7:
	movb $1, -4704(%rbp)
uuid_00000000000decd9:
	mov -4720(%RBP),%RSP
	add $-4720, %RSP
uuid_00000000000decdc:
	mov -4712(%RBP),%RSP
	add $-4720, %RSP
	mov -4704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000decea
	jmp uuid_00000000000decec
uuid_00000000000decea:
	push %RBP
	mov -4584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4800(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dece4
	jmp uuid_00000000000dece6
uuid_00000000000dece4:
	push %RBP
	jmp uuid_00000000000dece1
	jmp uuid_00000000000dece3
uuid_00000000000dece1:
	push %RBP
	mov -4736(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4840(%rbp)
	pushq $uuid_00000000000decdd
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000decde
	jmp uuid_00000000000dece0
uuid_00000000000decde:
	movb $1, -4808(%rbp)
uuid_00000000000dece0:
	mov -4832(%RBP),%RSP
	add $-4840, %RSP
uuid_00000000000dece3:
	mov -4824(%RBP),%RSP
	add $-4840, %RSP
uuid_00000000000dece6:
	mov -4816(%RBP),%RSP
	add $-4840, %RSP
	mov -4808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dece7
	jmp uuid_00000000000dece9
uuid_00000000000dece7:
	movb $1, -4608(%rbp)
uuid_00000000000dece9:
	mov -4728(%RBP),%RSP
	add $-4840, %RSP
uuid_00000000000decec:
	mov -4624(%RBP),%RSP
	add $-4840, %RSP
uuid_00000000000decef:
	mov -4616(%RBP),%RSP
	add $-4840, %RSP
	mov -4608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000decfc
	jmp uuid_00000000000decfe
uuid_00000000000decfc:
	push %RBP
	mov -4488(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4920(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000decf6
	jmp uuid_00000000000decf8
uuid_00000000000decf6:
	push %RBP
	jmp uuid_00000000000decf3
	jmp uuid_00000000000decf5
uuid_00000000000decf3:
	push %RBP
	mov -4856(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4960(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000decf0
	jmp uuid_00000000000decf2
uuid_00000000000decf0:
	movb $1, -4928(%rbp)
uuid_00000000000decf2:
	mov -4952(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000decf5:
	mov -4944(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000decf8:
	mov -4936(%RBP),%RSP
	add $-4960, %RSP
	mov -4928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000decf9
	jmp uuid_00000000000decfb
uuid_00000000000decf9:
	movb $1, -4512(%rbp)
uuid_00000000000decfb:
	mov -4848(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000decfe:
	mov -4528(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000ded01:
	mov -4520(%RBP),%RSP
	add $-4960, %RSP
	mov -4512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ded02
	jmp uuid_00000000000ded04
uuid_00000000000ded02:
	movb $1, -3760(%rbp)
uuid_00000000000ded04:
	mov -4432(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000ded07:
	mov -3776(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000ded0a:
	mov -3768(%RBP),%RSP
	add $-4960, %RSP
	mov -3760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deec0
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -5040(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ded37
	jmp uuid_00000000000ded39
uuid_00000000000ded37:
	push %RBP
	mov -5032(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5136(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ded24
	jmp uuid_00000000000ded26
uuid_00000000000ded24:
	push %RBP
	mov -5128(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ded21
	jmp uuid_00000000000ded23
uuid_00000000000ded21:
	push %RBP
	mov -5120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ded1e
	jmp uuid_00000000000ded20
uuid_00000000000ded1e:
	movb $1, -5144(%rbp)
uuid_00000000000ded20:
	mov -5240(%RBP),%RSP
	add $-5312, %RSP
uuid_00000000000ded23:
	mov -5160(%RBP),%RSP
	add $-5312, %RSP
uuid_00000000000ded26:
	mov -5152(%RBP),%RSP
	add $-5312, %RSP
	mov -5144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ded34
	jmp uuid_00000000000ded36
uuid_00000000000ded34:
	push %RBP
	mov -5024(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5392(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ded2e
	jmp uuid_00000000000ded30
uuid_00000000000ded2e:
	push %RBP
	jmp uuid_00000000000ded2b
	jmp uuid_00000000000ded2d
uuid_00000000000ded2b:
	push %RBP
	mov -5328(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5432(%rbp)
	pushq $uuid_00000000000ded27
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ded28
	jmp uuid_00000000000ded2a
uuid_00000000000ded28:
	movb $1, -5400(%rbp)
uuid_00000000000ded2a:
	mov -5424(%RBP),%RSP
	add $-5432, %RSP
uuid_00000000000ded2d:
	mov -5416(%RBP),%RSP
	add $-5432, %RSP
uuid_00000000000ded30:
	mov -5408(%RBP),%RSP
	add $-5432, %RSP
	mov -5400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ded31
	jmp uuid_00000000000ded33
uuid_00000000000ded31:
	movb $1, -5048(%rbp)
uuid_00000000000ded33:
	mov -5320(%RBP),%RSP
	add $-5432, %RSP
uuid_00000000000ded36:
	mov -5064(%RBP),%RSP
	add $-5432, %RSP
uuid_00000000000ded39:
	mov -5056(%RBP),%RSP
	add $-5432, %RSP
	mov -5048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deebd
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -5512(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ded4d
	jmp uuid_00000000000ded4f
uuid_00000000000ded4d:
	push %RBP
	jmp uuid_00000000000ded4a
	jmp uuid_00000000000ded4c
uuid_00000000000ded4a:
	push %RBP
	mov -5496(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5616(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ded44
	jmp uuid_00000000000ded46
uuid_00000000000ded44:
	push %RBP
	jmp uuid_00000000000ded41
	jmp uuid_00000000000ded43
uuid_00000000000ded41:
	push %RBP
	mov -5552(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5656(%rbp)
	pushq $uuid_00000000000ded3d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ded3e
	jmp uuid_00000000000ded40
uuid_00000000000ded3e:
	movb $1, -5624(%rbp)
uuid_00000000000ded40:
	mov -5648(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000ded43:
	mov -5640(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000ded46:
	mov -5632(%RBP),%RSP
	add $-5656, %RSP
	mov -5624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ded47
	jmp uuid_00000000000ded49
uuid_00000000000ded47:
	movb $1, -5520(%rbp)
uuid_00000000000ded49:
	mov -5544(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000ded4c:
	mov -5536(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000ded4f:
	mov -5528(%RBP),%RSP
	add $-5656, %RSP
	mov -5520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deeba
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -5736(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ded60
	jmp uuid_00000000000ded62
uuid_00000000000ded60:
	push %RBP
	mov -5728(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ded5d
	jmp uuid_00000000000ded5f
uuid_00000000000ded5d:
	push %RBP
	mov -5720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5912(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ded57
	jmp uuid_00000000000ded59
uuid_00000000000ded57:
	push %RBP
	jmp uuid_00000000000ded54
	jmp uuid_00000000000ded56
uuid_00000000000ded54:
	push %RBP
	mov -5848(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5952(%rbp)
	pushq $uuid_00000000000ded50
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ded51
	jmp uuid_00000000000ded53
uuid_00000000000ded51:
	movb $1, -5920(%rbp)
uuid_00000000000ded53:
	mov -5944(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000ded56:
	mov -5936(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000ded59:
	mov -5928(%RBP),%RSP
	add $-5952, %RSP
	mov -5920(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ded5a
	jmp uuid_00000000000ded5c
uuid_00000000000ded5a:
	movb $1, -5744(%rbp)
uuid_00000000000ded5c:
	mov -5840(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000ded5f:
	mov -5760(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000ded62:
	mov -5752(%RBP),%RSP
	add $-5952, %RSP
	mov -5744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deeb7
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -6032(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ded7c
	jmp uuid_00000000000ded7e
uuid_00000000000ded7c:
	push %RBP
	mov -6024(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6128(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ded69
	jmp uuid_00000000000ded6b
uuid_00000000000ded69:
	push %RBP
	mov -6120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ded66
	jmp uuid_00000000000ded68
uuid_00000000000ded66:
	push %RBP
	mov -6112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ded63
	jmp uuid_00000000000ded65
uuid_00000000000ded63:
	movb $1, -6136(%rbp)
uuid_00000000000ded65:
	mov -6232(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000ded68:
	mov -6152(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000ded6b:
	mov -6144(%RBP),%RSP
	add $-6304, %RSP
	mov -6136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ded79
	jmp uuid_00000000000ded7b
uuid_00000000000ded79:
	push %RBP
	mov -6016(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6384(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ded73
	jmp uuid_00000000000ded75
uuid_00000000000ded73:
	push %RBP
	jmp uuid_00000000000ded70
	jmp uuid_00000000000ded72
uuid_00000000000ded70:
	push %RBP
	mov -6320(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6424(%rbp)
	pushq $uuid_00000000000ded6c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ded6d
	jmp uuid_00000000000ded6f
uuid_00000000000ded6d:
	movb $1, -6392(%rbp)
uuid_00000000000ded6f:
	mov -6416(%RBP),%RSP
	add $-6424, %RSP
uuid_00000000000ded72:
	mov -6408(%RBP),%RSP
	add $-6424, %RSP
uuid_00000000000ded75:
	mov -6400(%RBP),%RSP
	add $-6424, %RSP
	mov -6392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ded76
	jmp uuid_00000000000ded78
uuid_00000000000ded76:
	movb $1, -6040(%rbp)
uuid_00000000000ded78:
	mov -6312(%RBP),%RSP
	add $-6424, %RSP
uuid_00000000000ded7b:
	mov -6056(%RBP),%RSP
	add $-6424, %RSP
uuid_00000000000ded7e:
	mov -6048(%RBP),%RSP
	add $-6424, %RSP
	mov -6040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deeb4
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -6504(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ded9a
	jmp uuid_00000000000ded9c
uuid_00000000000ded9a:
	push %RBP
	mov -6496(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6600(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ded88
	jmp uuid_00000000000ded8a
uuid_00000000000ded88:
	push %RBP
	mov -6592(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ded85
	jmp uuid_00000000000ded87
uuid_00000000000ded85:
	push %RBP
	mov -6584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ded82
	jmp uuid_00000000000ded84
uuid_00000000000ded82:
	movb $1, -6608(%rbp)
uuid_00000000000ded84:
	mov -6704(%RBP),%RSP
	add $-6776, %RSP
uuid_00000000000ded87:
	mov -6624(%RBP),%RSP
	add $-6776, %RSP
uuid_00000000000ded8a:
	mov -6616(%RBP),%RSP
	add $-6776, %RSP
	mov -6608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ded97
	jmp uuid_00000000000ded99
uuid_00000000000ded97:
	push %RBP
	mov -6488(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6856(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ded91
	jmp uuid_00000000000ded93
uuid_00000000000ded91:
	push %RBP
	jmp uuid_00000000000ded8e
	jmp uuid_00000000000ded90
uuid_00000000000ded8e:
	push %RBP
	mov -6792(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6896(%rbp)
	pushq $uuid_00000000000db298
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ded8b
	jmp uuid_00000000000ded8d
uuid_00000000000ded8b:
	movb $1, -6864(%rbp)
uuid_00000000000ded8d:
	mov -6888(%RBP),%RSP
	add $-6896, %RSP
uuid_00000000000ded90:
	mov -6880(%RBP),%RSP
	add $-6896, %RSP
uuid_00000000000ded93:
	mov -6872(%RBP),%RSP
	add $-6896, %RSP
	mov -6864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ded94
	jmp uuid_00000000000ded96
uuid_00000000000ded94:
	movb $1, -6512(%rbp)
uuid_00000000000ded96:
	mov -6784(%RBP),%RSP
	add $-6896, %RSP
uuid_00000000000ded99:
	mov -6528(%RBP),%RSP
	add $-6896, %RSP
uuid_00000000000ded9c:
	mov -6520(%RBP),%RSP
	add $-6896, %RSP
	mov -6512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deeb1
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -6976(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dedb9
	jmp uuid_00000000000dedbb
uuid_00000000000dedb9:
	push %RBP
	mov -6968(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -7072(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deda6
	jmp uuid_00000000000deda8
uuid_00000000000deda6:
	push %RBP
	mov -7064(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deda3
	jmp uuid_00000000000deda5
uuid_00000000000deda3:
	push %RBP
	mov -7056(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deda0
	jmp uuid_00000000000deda2
uuid_00000000000deda0:
	movb $1, -7080(%rbp)
uuid_00000000000deda2:
	mov -7176(%RBP),%RSP
	add $-7248, %RSP
uuid_00000000000deda5:
	mov -7096(%RBP),%RSP
	add $-7248, %RSP
uuid_00000000000deda8:
	mov -7088(%RBP),%RSP
	add $-7248, %RSP
	mov -7080(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dedb6
	jmp uuid_00000000000dedb8
uuid_00000000000dedb6:
	push %RBP
	mov -6960(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -7328(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dedb0
	jmp uuid_00000000000dedb2
uuid_00000000000dedb0:
	push %RBP
	jmp uuid_00000000000dedad
	jmp uuid_00000000000dedaf
uuid_00000000000dedad:
	push %RBP
	mov -7264(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7368(%rbp)
	pushq $uuid_00000000000deda9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dedaa
	jmp uuid_00000000000dedac
uuid_00000000000dedaa:
	movb $1, -7336(%rbp)
uuid_00000000000dedac:
	mov -7360(%RBP),%RSP
	add $-7368, %RSP
uuid_00000000000dedaf:
	mov -7352(%RBP),%RSP
	add $-7368, %RSP
uuid_00000000000dedb2:
	mov -7344(%RBP),%RSP
	add $-7368, %RSP
	mov -7336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dedb3
	jmp uuid_00000000000dedb5
uuid_00000000000dedb3:
	movb $1, -6984(%rbp)
uuid_00000000000dedb5:
	mov -7256(%RBP),%RSP
	add $-7368, %RSP
uuid_00000000000dedb8:
	mov -7000(%RBP),%RSP
	add $-7368, %RSP
uuid_00000000000dedbb:
	mov -6992(%RBP),%RSP
	add $-7368, %RSP
	mov -6984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deeae
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -7448(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dedd4
	jmp uuid_00000000000dedd6
uuid_00000000000dedd4:
	push %RBP
	mov -7440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -7544(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dedc2
	jmp uuid_00000000000dedc4
uuid_00000000000dedc2:
	push %RBP
	mov -7536(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dedbf
	jmp uuid_00000000000dedc1
uuid_00000000000dedbf:
	push %RBP
	mov -7528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dedbc
	jmp uuid_00000000000dedbe
uuid_00000000000dedbc:
	movb $1, -7552(%rbp)
uuid_00000000000dedbe:
	mov -7648(%RBP),%RSP
	add $-7720, %RSP
uuid_00000000000dedc1:
	mov -7568(%RBP),%RSP
	add $-7720, %RSP
uuid_00000000000dedc4:
	mov -7560(%RBP),%RSP
	add $-7720, %RSP
	mov -7552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dedd1
	jmp uuid_00000000000dedd3
uuid_00000000000dedd1:
	push %RBP
	mov -7432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -7800(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dedcb
	jmp uuid_00000000000dedcd
uuid_00000000000dedcb:
	push %RBP
	jmp uuid_00000000000dedc8
	jmp uuid_00000000000dedca
uuid_00000000000dedc8:
	push %RBP
	mov -7736(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7840(%rbp)
	pushq $uuid_00000000000db08e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dedc5
	jmp uuid_00000000000dedc7
uuid_00000000000dedc5:
	movb $1, -7808(%rbp)
uuid_00000000000dedc7:
	mov -7832(%RBP),%RSP
	add $-7840, %RSP
uuid_00000000000dedca:
	mov -7824(%RBP),%RSP
	add $-7840, %RSP
uuid_00000000000dedcd:
	mov -7816(%RBP),%RSP
	add $-7840, %RSP
	mov -7808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dedce
	jmp uuid_00000000000dedd0
uuid_00000000000dedce:
	movb $1, -7456(%rbp)
uuid_00000000000dedd0:
	mov -7728(%RBP),%RSP
	add $-7840, %RSP
uuid_00000000000dedd3:
	mov -7472(%RBP),%RSP
	add $-7840, %RSP
uuid_00000000000dedd6:
	mov -7464(%RBP),%RSP
	add $-7840, %RSP
	mov -7456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deeab
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -7920(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dedf0
	jmp uuid_00000000000dedf2
uuid_00000000000dedf0:
	push %RBP
	mov -7912(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8016(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deddd
	jmp uuid_00000000000deddf
uuid_00000000000deddd:
	push %RBP
	mov -8008(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dedda
	jmp uuid_00000000000deddc
uuid_00000000000dedda:
	push %RBP
	mov -8000(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dedd7
	jmp uuid_00000000000dedd9
uuid_00000000000dedd7:
	movb $1, -8024(%rbp)
uuid_00000000000dedd9:
	mov -8120(%RBP),%RSP
	add $-8192, %RSP
uuid_00000000000deddc:
	mov -8040(%RBP),%RSP
	add $-8192, %RSP
uuid_00000000000deddf:
	mov -8032(%RBP),%RSP
	add $-8192, %RSP
	mov -8024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deded
	jmp uuid_00000000000dedef
uuid_00000000000deded:
	push %RBP
	mov -7904(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8272(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dede7
	jmp uuid_00000000000dede9
uuid_00000000000dede7:
	push %RBP
	jmp uuid_00000000000dede4
	jmp uuid_00000000000dede6
uuid_00000000000dede4:
	push %RBP
	mov -8208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8312(%rbp)
	pushq $uuid_00000000000dede0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dede1
	jmp uuid_00000000000dede3
uuid_00000000000dede1:
	movb $1, -8280(%rbp)
uuid_00000000000dede3:
	mov -8304(%RBP),%RSP
	add $-8312, %RSP
uuid_00000000000dede6:
	mov -8296(%RBP),%RSP
	add $-8312, %RSP
uuid_00000000000dede9:
	mov -8288(%RBP),%RSP
	add $-8312, %RSP
	mov -8280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dedea
	jmp uuid_00000000000dedec
uuid_00000000000dedea:
	movb $1, -7928(%rbp)
uuid_00000000000dedec:
	mov -8200(%RBP),%RSP
	add $-8312, %RSP
uuid_00000000000dedef:
	mov -7944(%RBP),%RSP
	add $-8312, %RSP
uuid_00000000000dedf2:
	mov -7936(%RBP),%RSP
	add $-8312, %RSP
	mov -7928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deea8
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -8392(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dee0b
	jmp uuid_00000000000dee0d
uuid_00000000000dee0b:
	push %RBP
	mov -8384(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dedf9
	jmp uuid_00000000000dedfb
uuid_00000000000dedf9:
	push %RBP
	mov -8480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dedf6
	jmp uuid_00000000000dedf8
uuid_00000000000dedf6:
	push %RBP
	mov -8472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dedf3
	jmp uuid_00000000000dedf5
uuid_00000000000dedf3:
	movb $1, -8496(%rbp)
uuid_00000000000dedf5:
	mov -8592(%RBP),%RSP
	add $-8664, %RSP
uuid_00000000000dedf8:
	mov -8512(%RBP),%RSP
	add $-8664, %RSP
uuid_00000000000dedfb:
	mov -8504(%RBP),%RSP
	add $-8664, %RSP
	mov -8496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dee08
	jmp uuid_00000000000dee0a
uuid_00000000000dee08:
	push %RBP
	mov -8376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8744(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dee02
	jmp uuid_00000000000dee04
uuid_00000000000dee02:
	push %RBP
	jmp uuid_00000000000dedff
	jmp uuid_00000000000dee01
uuid_00000000000dedff:
	push %RBP
	mov -8680(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8784(%rbp)
	pushq $uuid_00000000000db271
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dedfc
	jmp uuid_00000000000dedfe
uuid_00000000000dedfc:
	movb $1, -8752(%rbp)
uuid_00000000000dedfe:
	mov -8776(%RBP),%RSP
	add $-8784, %RSP
uuid_00000000000dee01:
	mov -8768(%RBP),%RSP
	add $-8784, %RSP
uuid_00000000000dee04:
	mov -8760(%RBP),%RSP
	add $-8784, %RSP
	mov -8752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dee05
	jmp uuid_00000000000dee07
uuid_00000000000dee05:
	movb $1, -8400(%rbp)
uuid_00000000000dee07:
	mov -8672(%RBP),%RSP
	add $-8784, %RSP
uuid_00000000000dee0a:
	mov -8416(%RBP),%RSP
	add $-8784, %RSP
uuid_00000000000dee0d:
	mov -8408(%RBP),%RSP
	add $-8784, %RSP
	mov -8400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deea5
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -8864(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dee26
	jmp uuid_00000000000dee28
uuid_00000000000dee26:
	push %RBP
	mov -8856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8960(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dee14
	jmp uuid_00000000000dee16
uuid_00000000000dee14:
	push %RBP
	mov -8952(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dee11
	jmp uuid_00000000000dee13
uuid_00000000000dee11:
	push %RBP
	mov -8944(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dee0e
	jmp uuid_00000000000dee10
uuid_00000000000dee0e:
	movb $1, -8968(%rbp)
uuid_00000000000dee10:
	mov -9064(%RBP),%RSP
	add $-9136, %RSP
uuid_00000000000dee13:
	mov -8984(%RBP),%RSP
	add $-9136, %RSP
uuid_00000000000dee16:
	mov -8976(%RBP),%RSP
	add $-9136, %RSP
	mov -8968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dee23
	jmp uuid_00000000000dee25
uuid_00000000000dee23:
	push %RBP
	mov -8848(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -9216(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dee1d
	jmp uuid_00000000000dee1f
uuid_00000000000dee1d:
	push %RBP
	jmp uuid_00000000000dee1a
	jmp uuid_00000000000dee1c
uuid_00000000000dee1a:
	push %RBP
	mov -9152(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9256(%rbp)
	pushq $uuid_00000000000dae6e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dee17
	jmp uuid_00000000000dee19
uuid_00000000000dee17:
	movb $1, -9224(%rbp)
uuid_00000000000dee19:
	mov -9248(%RBP),%RSP
	add $-9256, %RSP
uuid_00000000000dee1c:
	mov -9240(%RBP),%RSP
	add $-9256, %RSP
uuid_00000000000dee1f:
	mov -9232(%RBP),%RSP
	add $-9256, %RSP
	mov -9224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dee20
	jmp uuid_00000000000dee22
uuid_00000000000dee20:
	movb $1, -8872(%rbp)
uuid_00000000000dee22:
	mov -9144(%RBP),%RSP
	add $-9256, %RSP
uuid_00000000000dee25:
	mov -8888(%RBP),%RSP
	add $-9256, %RSP
uuid_00000000000dee28:
	mov -8880(%RBP),%RSP
	add $-9256, %RSP
	mov -8872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deea2
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -9336(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dee4a
	jmp uuid_00000000000dee4c
uuid_00000000000dee4a:
	push %RBP
	mov -9328(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dee47
	jmp uuid_00000000000dee49
uuid_00000000000dee47:
	push %RBP
	mov -9320(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -9512(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dee41
	jmp uuid_00000000000dee43
uuid_00000000000dee41:
	push %RBP
	mov -9504(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dee3e
	jmp uuid_00000000000dee40
uuid_00000000000dee3e:
	push %RBP
	mov -9496(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -9688(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dee38
	jmp uuid_00000000000dee3a
uuid_00000000000dee38:
	push %RBP
	mov -9680(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dee35
	jmp uuid_00000000000dee37
uuid_00000000000dee35:
	push %RBP
	mov -9672(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -9864(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dee2f
	jmp uuid_00000000000dee31
uuid_00000000000dee2f:
	push %RBP
	jmp uuid_00000000000dee2c
	jmp uuid_00000000000dee2e
uuid_00000000000dee2c:
	push %RBP
	mov -9800(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9904(%rbp)
	pushq $uuid_00000000000db462
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dee29
	jmp uuid_00000000000dee2b
uuid_00000000000dee29:
	movb $1, -9872(%rbp)
uuid_00000000000dee2b:
	mov -9896(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000dee2e:
	mov -9888(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000dee31:
	mov -9880(%RBP),%RSP
	add $-9904, %RSP
	mov -9872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dee32
	jmp uuid_00000000000dee34
uuid_00000000000dee32:
	movb $1, -9696(%rbp)
uuid_00000000000dee34:
	mov -9792(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000dee37:
	mov -9712(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000dee3a:
	mov -9704(%RBP),%RSP
	add $-9904, %RSP
	mov -9696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dee3b
	jmp uuid_00000000000dee3d
uuid_00000000000dee3b:
	movb $1, -9520(%rbp)
uuid_00000000000dee3d:
	mov -9616(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000dee40:
	mov -9536(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000dee43:
	mov -9528(%RBP),%RSP
	add $-9904, %RSP
	mov -9520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dee44
	jmp uuid_00000000000dee46
uuid_00000000000dee44:
	movb $1, -9344(%rbp)
uuid_00000000000dee46:
	mov -9440(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000dee49:
	mov -9360(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000dee4c:
	mov -9352(%RBP),%RSP
	add $-9904, %RSP
	mov -9344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dee9f
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -9984(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dee75
	jmp uuid_00000000000dee77
uuid_00000000000dee75:
	push %RBP
	mov -9976(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dee72
	jmp uuid_00000000000dee74
uuid_00000000000dee72:
	push %RBP
	mov -9968(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -10160(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dee6c
	jmp uuid_00000000000dee6e
uuid_00000000000dee6c:
	push %RBP
	pushq -10136(%RBP)
	pushq -10144(%RBP)
	pushq -10152(%RBP)
	jmp uuid_00000000000dee69
	jmp uuid_00000000000dee6b
uuid_00000000000dee69:
	push %RBP
	mov -10128(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -10288(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dee66
	jmp uuid_00000000000dee68
uuid_00000000000dee66:
	push %RBP
	mov -10120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -10368(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dee60
	jmp uuid_00000000000dee62
uuid_00000000000dee60:
	push %RBP
	jmp uuid_00000000000dee5d
	jmp uuid_00000000000dee5f
uuid_00000000000dee5d:
	push %RBP
	mov -10304(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dee5a
	jmp uuid_00000000000dee5c
uuid_00000000000dee5a:
	movb $1, -10376(%rbp)
uuid_00000000000dee5c:
	mov -10400(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000dee5f:
	mov -10392(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000dee62:
	mov -10384(%RBP),%RSP
	add $-10408, %RSP
	mov -10376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dee63
	jmp uuid_00000000000dee65
uuid_00000000000dee63:
	movb $1, -10168(%rbp)
uuid_00000000000dee65:
	mov -10296(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000dee68:
	mov -10216(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000dee6b:
	mov -10184(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000dee6e:
	mov -10176(%RBP),%RSP
	add $-10408, %RSP
	mov -10168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dee6f
	jmp uuid_00000000000dee71
uuid_00000000000dee6f:
	movb $1, -9992(%rbp)
uuid_00000000000dee71:
	mov -10088(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000dee74:
	mov -10008(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000dee77:
	mov -10000(%RBP),%RSP
	add $-10408, %RSP
	mov -9992(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dee9c
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -10488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dee7e
	jmp uuid_00000000000dee80
uuid_00000000000dee7e:
	push %RBP
	mov -10480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dee7b
	jmp uuid_00000000000dee7d
uuid_00000000000dee7b:
	push %RBP
	mov -10472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dee78
	jmp uuid_00000000000dee7a
uuid_00000000000dee78:
	movb $1, -10496(%rbp)
uuid_00000000000dee7a:
	mov -10592(%RBP),%RSP
	add $-10664, %RSP
uuid_00000000000dee7d:
	mov -10512(%RBP),%RSP
	add $-10664, %RSP
uuid_00000000000dee80:
	mov -10504(%RBP),%RSP
	add $-10664, %RSP
	mov -10496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dee99
	push %RBP
	jmp uuid_00000000000dee96
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dee95
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dee98
uuid_00000000000dee96:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dee94
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dee98:
	mov -10672(%RBP),%RSP
	add $-10672, %RSP
	jmp uuid_00000000000dee9b
uuid_00000000000dee99:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10600(%rbp)
	pushq -10608(%rbp)
	pushq -10616(%rbp)
	pushq -10624(%rbp)
	pushq -10632(%rbp)
	pushq -10640(%rbp)
	pushq -10648(%rbp)
	pushq -10656(%rbp)
	pushq -10664(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dee91
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -10600(%rbp)
	pushq -10608(%rbp)
	pushq -10616(%rbp)
	pushq -10624(%rbp)
	pushq -10632(%rbp)
	pushq -10640(%rbp)
	pushq -10648(%rbp)
	pushq -10656(%rbp)
	pushq -10664(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -10680(%RBP)
	pushq -10688(%RBP)
	pushq -10696(%RBP)
	pushq -10704(%RBP)
	pushq -10712(%RBP)
	pushq -10720(%RBP)
	pushq -10728(%RBP)
	pushq -10736(%RBP)
	pushq -10744(%RBP)
	pushq -10752(%RBP)
	pushq -10760(%RBP)
	pushq -10768(%RBP)
	pushq -10776(%RBP)
	pushq -10784(%RBP)
	pushq -10792(%RBP)
	pushq -10800(%RBP)
	pushq -10808(%RBP)
	pushq -10816(%RBP)
	pushq -10824(%RBP)
	pushq -10832(%RBP)
	pushq -10840(%RBP)
	pushq -10848(%RBP)
	pushq -10856(%RBP)
	pushq -10864(%RBP)
	pushq -10872(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -10520(%rbp)
	pushq -10528(%rbp)
	pushq -10536(%rbp)
	pushq -10544(%rbp)
	pushq -10552(%rbp)
	pushq -10560(%rbp)
	pushq -10568(%rbp)
	pushq -10576(%rbp)
	pushq -10584(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -10912(%RBP)
	pushq -10920(%RBP)
	pushq -10928(%RBP)
	pushq -10936(%RBP)
	pushq -10944(%RBP)
	pushq -10952(%RBP)
	pushq -10960(%RBP)
	pushq -10968(%RBP)
	pushq -10976(%RBP)
	pushq -10984(%RBP)
	pushq -10992(%RBP)
	pushq -11000(%RBP)
	pushq -11008(%RBP)
	pushq -11016(%RBP)
	pushq -11024(%RBP)
	pushq -11032(%RBP)
	pushq -11040(%RBP)
	pushq -11048(%RBP)
	pushq -11056(%RBP)
	pushq -11064(%RBP)
	pushq -11072(%RBP)
	pushq -11080(%RBP)
	pushq -11088(%RBP)
	pushq -11096(%RBP)
	pushq -11104(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -10880(%RBP)
	pushq -10888(%RBP)
	pushq -10896(%RBP)
	pushq -11112(%RBP)
	pushq -11120(%RBP)
	pushq -11128(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -11144(%rbp)
	pushq -11152(%rbp)
	pushq -11160(%rbp)
	pushq -11168(%rbp)
	pushq -11176(%rbp)
	pushq -11184(%rbp)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000dee93
uuid_00000000000dee91:
	pushq -10600(%rbp)
	pushq -10608(%rbp)
	pushq -10616(%rbp)
	pushq -10624(%rbp)
	pushq -10632(%rbp)
	pushq -10640(%rbp)
	pushq -10648(%rbp)
	pushq -10656(%rbp)
	pushq -10664(%rbp)
	push %RBP
	pushq -10680(%rbp)
	pushq -10688(%rbp)
	pushq -10696(%rbp)
	pushq -10704(%rbp)
	pushq -10712(%rbp)
	pushq -10720(%rbp)
	pushq -10728(%rbp)
	pushq -10736(%rbp)
	pushq -10744(%rbp)
	pushq $0
	push %RBP
	mov -10824(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dee87
	jmp uuid_00000000000dee89
uuid_00000000000dee87:
	push %RBP
	jmp uuid_00000000000dee84
	jmp uuid_00000000000dee86
uuid_00000000000dee84:
	push %RBP
	mov -10760(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dee81
	jmp uuid_00000000000dee83
uuid_00000000000dee81:
	movb $1, -10832(%rbp)
uuid_00000000000dee83:
	mov -10856(%RBP),%RSP
	add $-10864, %RSP
uuid_00000000000dee86:
	mov -10848(%RBP),%RSP
	add $-10864, %RSP
uuid_00000000000dee89:
	mov -10840(%RBP),%RSP
	add $-10864, %RSP
	mov -10832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dee8e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dee8d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dee90
uuid_00000000000dee8e:
	push %RBP
#call function has-prefix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10864(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call has_SB_prefix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dee8a
#call function cc-blob : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -10864(%rbp)
	pushq -10520(%rbp)
	pushq -10528(%rbp)
	pushq -10536(%rbp)
	pushq -10544(%rbp)
	pushq -10552(%rbp)
	pushq -10560(%rbp)
	pushq -10568(%rbp)
	pushq -10576(%rbp)
	pushq -10584(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10880(%rbp)
	pushq -10888(%rbp)
	pushq -10896(%rbp)
	pushq -10904(%rbp)
	pushq -10912(%rbp)
	pushq -10920(%rbp)
	pushq -10928(%rbp)
	pushq -10936(%rbp)
	pushq -10944(%rbp)
	pushq -10952(%rbp)
	pushq -10960(%rbp)
	pushq -10968(%rbp)
	pushq -10976(%rbp)
	pushq -10984(%rbp)
	pushq -10992(%rbp)
	pushq -11000(%rbp)
	pushq -11008(%rbp)
	pushq -11016(%rbp)
	pushq -11024(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000dee8c
uuid_00000000000dee8a:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -10864(%RBP), %RAX
	inc %RAX
	push %RAX
	pushq -10520(%rbp)
	pushq -10528(%rbp)
	pushq -10536(%rbp)
	pushq -10544(%rbp)
	pushq -10552(%rbp)
	pushq -10560(%rbp)
	pushq -10568(%rbp)
	pushq -10576(%rbp)
	pushq -10584(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -11080(%RBP)
	pushq -11088(%RBP)
	pushq -11096(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000dee8c:
	mov -10872(%RBP),%RSP
	add $-11104, %RSP
uuid_00000000000dee90:
	mov -10752(%RBP),%RSP
	add $-11104, %RSP
uuid_00000000000dee93:
	mov -10672(%RBP),%RSP
	add $-11104, %RSP
uuid_00000000000dee9b:
	mov -10416(%RBP),%RSP
	add $-11104, %RSP
	jmp uuid_00000000000dee9e
uuid_00000000000dee9c:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -10016(%rbp)
	pushq -10024(%rbp)
	pushq -10032(%rbp)
	pushq -10040(%rbp)
	pushq -10048(%rbp)
	pushq -10056(%rbp)
	pushq -10064(%rbp)
	pushq -10072(%rbp)
	pushq -10080(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -10768(%RBP)
	pushq -10776(%RBP)
	pushq -10784(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10416(%rbp)
	pushq -10424(%rbp)
	pushq -10432(%rbp)
	pushq -10440(%rbp)
	pushq -10448(%rbp)
	pushq -10456(%rbp)
	pushq -10464(%rbp)
	pushq -10472(%rbp)
	pushq -10480(%rbp)
	pushq -10488(%rbp)
	pushq -10496(%rbp)
	pushq -10504(%rbp)
	pushq -10512(%rbp)
	pushq -10520(%rbp)
	pushq -10528(%rbp)
	pushq -10536(%rbp)
	pushq -10544(%rbp)
	pushq -10552(%rbp)
	pushq -10560(%rbp)
	pushq -208(%rbp)
	pushq -10800(%rbp)
	pushq -10808(%rbp)
	pushq -10816(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -10560(%RBP)
	popq -10552(%RBP)
	popq -10544(%RBP)
	popq -10536(%RBP)
	popq -10528(%RBP)
	popq -10520(%RBP)
	popq -10512(%RBP)
	popq -10504(%RBP)
	popq -10496(%RBP)
	popq -10488(%RBP)
	popq -10480(%RBP)
	popq -10472(%RBP)
	popq -10464(%RBP)
	popq -10456(%RBP)
	popq -10448(%RBP)
	popq -10440(%RBP)
	popq -10432(%RBP)
	popq -10424(%RBP)
	popq -10416(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10416(%rbp)
	pushq -10424(%rbp)
	pushq -10432(%rbp)
	pushq -10440(%rbp)
	pushq -10448(%rbp)
	pushq -10456(%rbp)
	pushq -10464(%rbp)
	pushq -10472(%rbp)
	pushq -10480(%rbp)
	pushq -10488(%rbp)
	pushq -10496(%rbp)
	pushq -10504(%rbp)
	pushq -10512(%rbp)
	pushq -10520(%rbp)
	pushq -10528(%rbp)
	pushq -10536(%rbp)
	pushq -10544(%rbp)
	pushq -10552(%rbp)
	pushq -10560(%rbp)
	pushq $uuid_00000000000dd3d6
	pushq -10800(%rbp)
	pushq -10808(%rbp)
	pushq -10816(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -10560(%RBP)
	popq -10552(%RBP)
	popq -10544(%RBP)
	popq -10536(%RBP)
	popq -10528(%RBP)
	popq -10520(%RBP)
	popq -10512(%RBP)
	popq -10504(%RBP)
	popq -10496(%RBP)
	popq -10488(%RBP)
	popq -10480(%RBP)
	popq -10472(%RBP)
	popq -10464(%RBP)
	popq -10456(%RBP)
	popq -10448(%RBP)
	popq -10440(%RBP)
	popq -10432(%RBP)
	popq -10424(%RBP)
	popq -10416(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -10408(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10016(%rbp)
	pushq -10024(%rbp)
	pushq -10032(%rbp)
	pushq -10040(%rbp)
	pushq -10048(%rbp)
	pushq -10056(%rbp)
	pushq -10064(%rbp)
	pushq -10072(%rbp)
	pushq -10080(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -10416(%rbp)
	pushq -10424(%rbp)
	pushq -10432(%rbp)
	pushq -10440(%rbp)
	pushq -10448(%rbp)
	pushq -10456(%rbp)
	pushq -10464(%rbp)
	pushq -10472(%rbp)
	pushq -10480(%rbp)
	pushq -10488(%rbp)
	pushq -10496(%rbp)
	pushq -10504(%rbp)
	pushq -10512(%rbp)
	pushq -10520(%rbp)
	pushq -10528(%rbp)
	pushq -10536(%rbp)
	pushq -10544(%rbp)
	pushq -10552(%rbp)
	pushq -10560(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dee9e:
	mov -9912(%RBP),%RSP
	add $-10816, %RSP
	jmp uuid_00000000000deea1
uuid_00000000000dee9f:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -9720(%rbp)
	pushq -9728(%rbp)
	pushq -9736(%rbp)
	pushq -9744(%rbp)
	pushq -9752(%rbp)
	pushq -9760(%rbp)
	pushq -9768(%rbp)
	pushq -9776(%rbp)
	pushq -9784(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -10112(%RBP)
	pushq -10120(%RBP)
	pushq -10128(%RBP)
	pushq -10144(%rbp)
	pushq -10152(%rbp)
	pushq -10160(%rbp)
	push %RBP
	pushq -10168(%rbp)
	pushq -10176(%rbp)
	pushq -10184(%rbp)
	pushq $0
	push %RBP
	mov -10216(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dee50
	jmp uuid_00000000000dee52
uuid_00000000000dee50:
	push %RBP
	mov -10208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10248(%rbp)
	pushq $uuid_00000000000daea3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dee4d
	jmp uuid_00000000000dee4f
uuid_00000000000dee4d:
	movb $1, -10224(%rbp)
uuid_00000000000dee4f:
	mov -10240(%RBP),%RSP
	add $-10248, %RSP
uuid_00000000000dee52:
	mov -10232(%RBP),%RSP
	add $-10248, %RSP
	mov -10224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dee57
	push %RBP
	jmp uuid_00000000000dee54
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dee53
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dee56
uuid_00000000000dee54:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -9368(%rbp)
	pushq -9376(%rbp)
	pushq -9384(%rbp)
	pushq -9392(%rbp)
	pushq -9400(%rbp)
	pushq -9408(%rbp)
	pushq -9416(%rbp)
	pushq -9424(%rbp)
	pushq -9432(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -10464(%RBP)
	pushq -10472(%RBP)
	pushq -10480(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000dee56:
	mov -10256(%RBP),%RSP
	add $-10488, %RSP
	jmp uuid_00000000000dee59
uuid_00000000000dee57:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -9544(%rbp)
	pushq -9552(%rbp)
	pushq -9560(%rbp)
	pushq -9568(%rbp)
	pushq -9576(%rbp)
	pushq -9584(%rbp)
	pushq -9592(%rbp)
	pushq -9600(%rbp)
	pushq -9608(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -10456(%RBP)
	pushq -10464(%RBP)
	pushq -10472(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000dee59:
	mov -10192(%RBP),%RSP
	add $-10480, %RSP
uuid_00000000000deea1:
	mov -9264(%RBP),%RSP
	add $-10480, %RSP
	jmp uuid_00000000000deea4
uuid_00000000000deea2:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -9072(%rbp)
	pushq -9080(%rbp)
	pushq -9088(%rbp)
	pushq -9096(%rbp)
	pushq -9104(%rbp)
	pushq -9112(%rbp)
	pushq -9120(%rbp)
	pushq -9128(%rbp)
	pushq -9136(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -9464(%RBP)
	pushq -9472(%RBP)
	pushq -9480(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -8992(%rbp)
	pushq -9000(%rbp)
	pushq -9008(%rbp)
	pushq -9016(%rbp)
	pushq -9024(%rbp)
	pushq -9032(%rbp)
	pushq -9040(%rbp)
	pushq -9048(%rbp)
	pushq -9056(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -9720(%RBP)
	pushq -9728(%RBP)
	pushq -9736(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9496(%rbp)
	pushq -9504(%rbp)
	pushq -9512(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9752(%rbp)
	pushq -9760(%rbp)
	pushq -9768(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -9776(%RBP), %RAX
	mov -9784(%RBP), %R14
	subq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000deea4:
	mov -8792(%RBP),%RSP
	add $-9784, %RSP
	jmp uuid_00000000000deea7
uuid_00000000000deea5:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -8600(%rbp)
	pushq -8608(%rbp)
	pushq -8616(%rbp)
	pushq -8624(%rbp)
	pushq -8632(%rbp)
	pushq -8640(%rbp)
	pushq -8648(%rbp)
	pushq -8656(%rbp)
	pushq -8664(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -8992(%RBP)
	pushq -9000(%RBP)
	pushq -9008(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -8520(%rbp)
	pushq -8528(%rbp)
	pushq -8536(%rbp)
	pushq -8544(%rbp)
	pushq -8552(%rbp)
	pushq -8560(%rbp)
	pushq -8568(%rbp)
	pushq -8576(%rbp)
	pushq -8584(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -9248(%RBP)
	pushq -9256(%RBP)
	pushq -9264(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9024(%rbp)
	pushq -9032(%rbp)
	pushq -9040(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9280(%rbp)
	pushq -9288(%rbp)
	pushq -9296(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -9304(%RBP), %RAX
	mov -9312(%RBP), %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000deea7:
	mov -8320(%RBP),%RSP
	add $-9312, %RSP
	jmp uuid_00000000000deeaa
uuid_00000000000deea8:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -8128(%rbp)
	pushq -8136(%rbp)
	pushq -8144(%rbp)
	pushq -8152(%rbp)
	pushq -8160(%rbp)
	pushq -8168(%rbp)
	pushq -8176(%rbp)
	pushq -8184(%rbp)
	pushq -8192(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -8520(%RBP)
	pushq -8528(%RBP)
	pushq -8536(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -8048(%rbp)
	pushq -8056(%rbp)
	pushq -8064(%rbp)
	pushq -8072(%rbp)
	pushq -8080(%rbp)
	pushq -8088(%rbp)
	pushq -8096(%rbp)
	pushq -8104(%rbp)
	pushq -8112(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -8776(%RBP)
	pushq -8784(%RBP)
	pushq -8792(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8552(%rbp)
	pushq -8560(%rbp)
	pushq -8568(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8808(%rbp)
	pushq -8816(%rbp)
	pushq -8824(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8832(%RBP), %RAX
	mov -8840(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000deeaa:
	mov -7848(%RBP),%RSP
	add $-8840, %RSP
	jmp uuid_00000000000deead
uuid_00000000000deeab:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -7656(%rbp)
	pushq -7664(%rbp)
	pushq -7672(%rbp)
	pushq -7680(%rbp)
	pushq -7688(%rbp)
	pushq -7696(%rbp)
	pushq -7704(%rbp)
	pushq -7712(%rbp)
	pushq -7720(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -8048(%RBP)
	pushq -8056(%RBP)
	pushq -8064(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -7576(%rbp)
	pushq -7584(%rbp)
	pushq -7592(%rbp)
	pushq -7600(%rbp)
	pushq -7608(%rbp)
	pushq -7616(%rbp)
	pushq -7624(%rbp)
	pushq -7632(%rbp)
	pushq -7640(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -8304(%RBP)
	pushq -8312(%RBP)
	pushq -8320(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8080(%rbp)
	pushq -8088(%rbp)
	pushq -8096(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8336(%rbp)
	pushq -8344(%rbp)
	pushq -8352(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8360(%RBP), %RAX
	mov -8368(%RBP), %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000deead:
	mov -7376(%RBP),%RSP
	add $-8368, %RSP
	jmp uuid_00000000000deeb0
uuid_00000000000deeae:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -7184(%rbp)
	pushq -7192(%rbp)
	pushq -7200(%rbp)
	pushq -7208(%rbp)
	pushq -7216(%rbp)
	pushq -7224(%rbp)
	pushq -7232(%rbp)
	pushq -7240(%rbp)
	pushq -7248(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -7576(%RBP)
	pushq -7584(%RBP)
	pushq -7592(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -7104(%rbp)
	pushq -7112(%rbp)
	pushq -7120(%rbp)
	pushq -7128(%rbp)
	pushq -7136(%rbp)
	pushq -7144(%rbp)
	pushq -7152(%rbp)
	pushq -7160(%rbp)
	pushq -7168(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -7832(%RBP)
	pushq -7840(%RBP)
	pushq -7848(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7608(%rbp)
	pushq -7616(%rbp)
	pushq -7624(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7864(%rbp)
	pushq -7872(%rbp)
	pushq -7880(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -7888(%RBP), %RAX
	mov -7896(%RBP), %R14
	mov $0, %RDX
	div %R14
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000deeb0:
	mov -6904(%RBP),%RSP
	add $-7896, %RSP
	jmp uuid_00000000000deeb3
uuid_00000000000deeb1:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -6712(%rbp)
	pushq -6720(%rbp)
	pushq -6728(%rbp)
	pushq -6736(%rbp)
	pushq -6744(%rbp)
	pushq -6752(%rbp)
	pushq -6760(%rbp)
	pushq -6768(%rbp)
	pushq -6776(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -7104(%RBP)
	pushq -7112(%RBP)
	pushq -7120(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -6632(%rbp)
	pushq -6640(%rbp)
	pushq -6648(%rbp)
	pushq -6656(%rbp)
	pushq -6664(%rbp)
	pushq -6672(%rbp)
	pushq -6680(%rbp)
	pushq -6688(%rbp)
	pushq -6696(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -7360(%RBP)
	pushq -7368(%RBP)
	pushq -7376(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7136(%rbp)
	pushq -7144(%rbp)
	pushq -7152(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7392(%rbp)
	pushq -7400(%rbp)
	pushq -7408(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -7416(%RBP), %RAX
	mov -7424(%RBP), %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ded9d
	pushq $0
	pushq $uuid_00000000000dae6a
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000ded9f
uuid_00000000000ded9d:
	pushq $0
	pushq $uuid_00000000000daea3
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000ded9f:
	mov -7432(%RBP),%RSP
	add $-7432, %RSP
uuid_00000000000deeb3:
	mov -6432(%RBP),%RSP
	add $-7432, %RSP
	jmp uuid_00000000000deeb6
uuid_00000000000deeb4:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -6240(%rbp)
	pushq -6248(%rbp)
	pushq -6256(%rbp)
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	pushq -6288(%rbp)
	pushq -6296(%rbp)
	pushq -6304(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -6632(%RBP)
	pushq -6640(%RBP)
	pushq -6648(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -6160(%rbp)
	pushq -6168(%rbp)
	pushq -6176(%rbp)
	pushq -6184(%rbp)
	pushq -6192(%rbp)
	pushq -6200(%rbp)
	pushq -6208(%rbp)
	pushq -6216(%rbp)
	pushq -6224(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -6888(%RBP)
	pushq -6896(%RBP)
	pushq -6904(%RBP)
	push %RBP
#call function == : Arrow<Cons<S,S>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6664(%rbp)
	pushq -6672(%rbp)
	pushq -6680(%rbp)
	pushq -6920(%rbp)
	pushq -6928(%rbp)
	pushq -6936(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ded7f
	pushq $0
	pushq $uuid_00000000000dae6a
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000ded81
uuid_00000000000ded7f:
	pushq $0
	pushq $uuid_00000000000daea3
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000ded81:
	mov -6944(%RBP),%RSP
	add $-6944, %RSP
uuid_00000000000deeb6:
	mov -5960(%RBP),%RSP
	add $-6944, %RSP
	jmp uuid_00000000000deeb9
uuid_00000000000deeb7:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -5768(%rbp)
	pushq -5776(%rbp)
	pushq -5784(%rbp)
	pushq -5792(%rbp)
	pushq -5800(%rbp)
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -6160(%RBP)
	pushq -6168(%RBP)
	pushq -6176(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6192(%rbp)
	pushq -6200(%rbp)
	pushq -6208(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function align : Arrow<I64,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6216(%rbp)
	mov %RBX, %RBP
	call align_CL_ArrowI64I64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000deeb9:
	mov -5664(%RBP),%RSP
	add $-6216, %RSP
	jmp uuid_00000000000deebc
uuid_00000000000deeba:
	pushq $0
#call function uuid : Arrow<Nil,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call uuid_CL_ArrowStringNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000deebc:
	mov -5440(%RBP),%RSP
	add $-5656, %RSP
	jmp uuid_00000000000deebf
uuid_00000000000deebd:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	pushq -5264(%rbp)
	pushq -5272(%rbp)
	pushq -5280(%rbp)
	pushq -5288(%rbp)
	pushq -5296(%rbp)
	pushq -5304(%rbp)
	pushq -5312(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -5640(%RBP)
	pushq -5648(%RBP)
	pushq -5656(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -5896(%RBP)
	pushq -5904(%RBP)
	pushq -5912(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5672(%rbp)
	pushq -5680(%rbp)
	pushq -5688(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5928(%rbp)
	pushq -5936(%rbp)
	pushq -5944(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000ded3a:
	mov -5952(%RBP), %RAX
	mov -5960(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ded3b
	jmp uuid_00000000000ded3c
uuid_00000000000ded3b:
	mov -5960(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -5960(%rbp)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5960(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000ded3a
uuid_00000000000ded3c:
uuid_00000000000deebf:
	mov -4968(%RBP),%RSP
	add $-5960, %RSP
	jmp uuid_00000000000deec2
uuid_00000000000deec0:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -4056(%rbp)
	pushq -4064(%rbp)
	pushq -4072(%rbp)
	pushq -4080(%rbp)
	pushq -4088(%rbp)
	pushq -4096(%rbp)
	pushq -4104(%rbp)
	pushq -4112(%rbp)
	pushq -4120(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -5168(%RBP)
	pushq -5176(%RBP)
	pushq -5184(%RBP)
uuid_00000000000ded1b:
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ded1c
	jmp uuid_00000000000ded1d
uuid_00000000000ded1c:
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	push %RBP
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq $0
	push %RBP
	mov -5272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ded11
	jmp uuid_00000000000ded13
uuid_00000000000ded11:
	push %RBP
	mov -5264(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ded0e
	jmp uuid_00000000000ded10
uuid_00000000000ded0e:
	push %RBP
	mov -5256(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ded0b
	jmp uuid_00000000000ded0d
uuid_00000000000ded0b:
	movb $1, -5280(%rbp)
uuid_00000000000ded0d:
	mov -5328(%RBP),%RSP
	add $-5352, %RSP
uuid_00000000000ded10:
	mov -5296(%RBP),%RSP
	add $-5352, %RSP
uuid_00000000000ded13:
	mov -5288(%RBP),%RSP
	add $-5352, %RSP
	mov -5280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ded18
	push %RBP
	jmp uuid_00000000000ded15
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000ded14
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ded17
uuid_00000000000ded15:
	pushq $0
	pushq $0
	pushq $3
	popq -5216(%RBP)
	popq -5208(%RBP)
	popq -5200(%RBP)
uuid_00000000000ded17:
	mov -5360(%RBP),%RSP
	add $-5360, %RSP
	jmp uuid_00000000000ded1a
uuid_00000000000ded18:
#call function fragment::expression : Arrow<S,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5336(%rbp)
	pushq -5344(%rbp)
	pushq -5352(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -4424(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000deae7
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -5360(%rbp)
	pushq -5368(%rbp)
	pushq -5376(%rbp)
	pushq -5384(%rbp)
	pushq -5392(%rbp)
	pushq -5400(%rbp)
	pushq -5408(%rbp)
	pushq -5416(%rbp)
	pushq -5424(%rbp)
	pushq -5432(%rbp)
	pushq -5440(%rbp)
	pushq -5448(%rbp)
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	pushq -5480(%rbp)
	pushq -5488(%rbp)
	pushq -5496(%rbp)
	pushq -5504(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5512(%rbp)
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	pushq -5592(%rbp)
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	pushq -5672(%rbp)
	pushq -5680(%rbp)
	pushq -5688(%rbp)
	pushq -5696(%rbp)
	pushq -5704(%rbp)
	pushq -208(%rbp)
	pushq -3880(%rbp)
	pushq -3888(%rbp)
	pushq -3896(%rbp)
	pushq -3904(%rbp)
	pushq -3912(%rbp)
	pushq -3920(%rbp)
	pushq -3928(%rbp)
	pushq -3936(%rbp)
	pushq -3944(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -5912(%RBP)
	pushq -5920(%RBP)
	pushq -5928(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -5944(%rbp)
	pushq -5952(%rbp)
	pushq -5960(%rbp)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	movq -5320(%rbp), %r15
	movq %r15, -5216(%rbp)
	movq -5312(%rbp), %r15
	movq %r15, -5208(%rbp)
	movq -5304(%rbp), %r15
	movq %r15, -5200(%rbp)
uuid_00000000000ded1a:
	mov -5248(%RBP),%RSP
	add $-5960, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $24, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $152, %rsp
	add $200, %rsp
	add $232, %rsp
	add $24, %rsp
	add $8, %RSP
	jmp uuid_00000000000ded1b
uuid_00000000000ded1d:
uuid_00000000000deec2:
	mov -3680(%RBP),%RSP
	add $-5216, %RSP
	jmp uuid_00000000000deec5
uuid_00000000000deec3:
#call function fragment-context::lookup-soft : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -2712(%rbp)
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_SB_soft_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	pushq -3800(%RBP)
	pushq -3808(%RBP)
	pushq -3816(%RBP)
uuid_00000000000decad:
#call function non-zero : Arrow<List<Array<Fragment,?>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListArray_QM_Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000decae
	jmp uuid_00000000000decaf
uuid_00000000000decae:
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	push %RBP
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq $0
	push %RBP
	mov -3904(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deca6
	jmp uuid_00000000000deca8
uuid_00000000000deca6:
	push %RBP
	mov -3896(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deca3
	jmp uuid_00000000000deca5
uuid_00000000000deca3:
	push %RBP
	mov -3888(%RBP), %RAX
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deca0
	jmp uuid_00000000000deca2
uuid_00000000000deca0:
	movb $1, -3912(%rbp)
uuid_00000000000deca2:
	mov -3960(%RBP),%RSP
	add $-4112, %RSP
uuid_00000000000deca5:
	mov -3928(%RBP),%RSP
	add $-4112, %RSP
uuid_00000000000deca8:
	mov -3920(%RBP),%RSP
	add $-4112, %RSP
	mov -3912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000decaa
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000deca9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000decac
uuid_00000000000decaa:
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -3136(%rbp)
	pushq -3768(%RBP)
	pushq -3776(%RBP)
	pushq -3784(%RBP)
	pushq -3968(%rbp)
	pushq -3976(%rbp)
	pushq -3984(%rbp)
	pushq -3992(%rbp)
	pushq -4000(%rbp)
	pushq -4008(%rbp)
	pushq -4016(%rbp)
	pushq -4024(%rbp)
	pushq -4032(%rbp)
	pushq -4040(%rbp)
	pushq -4048(%rbp)
	pushq -4056(%rbp)
	pushq -4064(%rbp)
	pushq -4072(%rbp)
	pushq -4080(%rbp)
	pushq -4088(%rbp)
	pushq -4096(%rbp)
	pushq -4104(%rbp)
	pushq -4112(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4120(%rbp)
	pushq -4128(%rbp)
	pushq -4136(%rbp)
	pushq -4144(%rbp)
	pushq -4152(%rbp)
	pushq -4160(%rbp)
	pushq -4168(%rbp)
	pushq -4176(%rbp)
	pushq -4184(%rbp)
	pushq -4192(%rbp)
	pushq -4200(%rbp)
	pushq -4208(%rbp)
	pushq -4216(%rbp)
	pushq -4224(%rbp)
	pushq -4232(%rbp)
	pushq -4240(%rbp)
	pushq -4248(%rbp)
	pushq -4256(%rbp)
	pushq -4264(%rbp)
	pushq -4272(%rbp)
	pushq -4280(%rbp)
	pushq -4288(%rbp)
	pushq -4296(%rbp)
	pushq -4304(%rbp)
	pushq -4312(%rbp)
	pushq -208(%rbp)
	pushq -2336(%rbp)
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -4520(%RBP)
	pushq -4528(%RBP)
	pushq -4536(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	pushq -4568(%rbp)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	movq -3952(%rbp), %r15
	movq %r15, -3848(%rbp)
	movq -3944(%rbp), %r15
	movq %r15, -3840(%rbp)
	movq -3936(%rbp), %r15
	movq %r15, -3832(%rbp)
uuid_00000000000decac:
	mov -3880(%RBP),%RSP
	add $-4568, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $24, %rsp
	add $152, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $200, %rsp
	add $232, %rsp
	add $24, %rsp
	add $8, %RSP
	jmp uuid_00000000000decad
uuid_00000000000decaf:
uuid_00000000000deec5:
	mov -2136(%RBP),%RSP
	add $-3848, %RSP
	jmp uuid_00000000000deec8
uuid_00000000000deec6:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -2336(%RBP)
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000deec8:
	mov -1840(%RBP),%RSP
	add $-2360, %RSP
	jmp uuid_00000000000deecb
uuid_00000000000deec9:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000deecb:
	mov -1320(%RBP),%RSP
	add $-2064, %RSP
	jmp uuid_00000000000deece
uuid_00000000000deecc:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000deece:
	mov -800(%RBP),%RSP
	add $-1544, %RSP
	jmp uuid_00000000000deed1
uuid_00000000000deecf:
	pushq $0
	pushq -792(%rbp)
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000deed1:
	mov -680(%RBP),%RSP
	add $-792, %RSP
	jmp uuid_00000000000deed4
uuid_00000000000deed2:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -672(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000deed4:
	mov -560(%RBP),%RSP
	add $-824, %RSP
	jmp uuid_00000000000deed7
uuid_00000000000deed5:
uuid_00000000000deed7:
	mov -480(%RBP),%RSP
	add $-552, %RSP
	jmp uuid_00000000000deeda
uuid_00000000000deed8:
uuid_00000000000deeda:
	mov -400(%RBP),%RSP
	add $-472, %RSP
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	subq $232, %rsp
	pushq 232(%rsp)
	pushq 248(%rsp)
	pushq 264(%rsp)
	pushq 280(%rsp)
	pushq 296(%rsp)
	pushq 312(%rsp)
	pushq 328(%rsp)
	pushq 344(%rsp)
	pushq 360(%rsp)
	pushq 376(%rsp)
	pushq 392(%rsp)
	pushq 408(%rsp)
	pushq 424(%rsp)
	pushq 440(%rsp)
	pushq 456(%rsp)
	pushq 472(%rsp)
	pushq 488(%rsp)
	pushq 504(%rsp)
	pushq 520(%rsp)
	pushq 536(%rsp)
	pushq 552(%rsp)
	pushq 568(%rsp)
	pushq 584(%rsp)
	pushq 600(%rsp)
	pushq 616(%rsp)
	pushq 632(%rsp)
	pushq 648(%rsp)
	pushq 664(%rsp)
	pushq 680(%rsp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	addq $232, %rsp
	mov %rbp, %rsp
	sub $296, %rsp
	ret
blob_SB_render_CL_ArrowFragmentConsI64ConsFragmentConsASTFContext:
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq $0
	push %RBP
	mov -592(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deef9
	jmp uuid_00000000000deefb
uuid_00000000000deef9:
	push %RBP
	mov -584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -688(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deee7
	jmp uuid_00000000000deee9
uuid_00000000000deee7:
	push %RBP
	mov -680(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -784(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deede
	jmp uuid_00000000000deee0
uuid_00000000000deede:
	push %RBP
	jmp uuid_00000000000deedb
	jmp uuid_00000000000deedd
uuid_00000000000deedb:
	movb $1, -792(%rbp)
uuid_00000000000deedd:
	mov -808(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000deee0:
	mov -800(%RBP),%RSP
	add $-808, %RSP
	mov -792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deee4
	jmp uuid_00000000000deee6
uuid_00000000000deee4:
	push %RBP
	mov -672(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deee1
	jmp uuid_00000000000deee3
uuid_00000000000deee1:
	movb $1, -696(%rbp)
uuid_00000000000deee3:
	mov -816(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000deee6:
	mov -712(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000deee9:
	mov -704(%RBP),%RSP
	add $-888, %RSP
	mov -696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deef6
	jmp uuid_00000000000deef8
uuid_00000000000deef6:
	push %RBP
	mov -576(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -968(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deef0
	jmp uuid_00000000000deef2
uuid_00000000000deef0:
	push %RBP
	jmp uuid_00000000000deeed
	jmp uuid_00000000000deeef
uuid_00000000000deeed:
	push %RBP
	mov -904(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1008(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deeea
	jmp uuid_00000000000deeec
uuid_00000000000deeea:
	movb $1, -976(%rbp)
uuid_00000000000deeec:
	mov -1000(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000deeef:
	mov -992(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000deef2:
	mov -984(%RBP),%RSP
	add $-1008, %RSP
	mov -976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deef3
	jmp uuid_00000000000deef5
uuid_00000000000deef3:
	movb $1, -600(%rbp)
uuid_00000000000deef5:
	mov -896(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000deef8:
	mov -616(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000deefb:
	mov -608(%RBP),%RSP
	add $-1008, %RSP
	mov -600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000def39
	push %RBP
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq $0
	push %RBP
	mov -1088(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def0b
	jmp uuid_00000000000def0d
uuid_00000000000def0b:
	push %RBP
	mov -1080(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000def08
	jmp uuid_00000000000def0a
uuid_00000000000def08:
	push %RBP
	mov -1072(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1264(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def02
	jmp uuid_00000000000def04
uuid_00000000000def02:
	push %RBP
	jmp uuid_00000000000deeff
	jmp uuid_00000000000def01
uuid_00000000000deeff:
	push %RBP
	mov -1200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000deefc
	jmp uuid_00000000000deefe
uuid_00000000000deefc:
	movb $1, -1272(%rbp)
uuid_00000000000deefe:
	mov -1296(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000def01:
	mov -1288(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000def04:
	mov -1280(%RBP),%RSP
	add $-1304, %RSP
	mov -1272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000def05
	jmp uuid_00000000000def07
uuid_00000000000def05:
	movb $1, -1096(%rbp)
uuid_00000000000def07:
	mov -1192(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000def0a:
	mov -1112(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000def0d:
	mov -1104(%RBP),%RSP
	add $-1304, %RSP
	mov -1096(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000def36
	push %RBP
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq $0
	push %RBP
	mov -1384(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def29
	jmp uuid_00000000000def2b
uuid_00000000000def29:
	push %RBP
	mov -1376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1480(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def20
	jmp uuid_00000000000def22
uuid_00000000000def20:
	push %RBP
	mov -1472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000def1d
	jmp uuid_00000000000def1f
uuid_00000000000def1d:
	push %RBP
	mov -1464(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1656(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def17
	jmp uuid_00000000000def19
uuid_00000000000def17:
	push %RBP
	jmp uuid_00000000000def14
	jmp uuid_00000000000def16
uuid_00000000000def14:
	push %RBP
	mov -1592(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000def11
	jmp uuid_00000000000def13
uuid_00000000000def11:
	movb $1, -1664(%rbp)
uuid_00000000000def13:
	mov -1688(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000def16:
	mov -1680(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000def19:
	mov -1672(%RBP),%RSP
	add $-1696, %RSP
	mov -1664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000def1a
	jmp uuid_00000000000def1c
uuid_00000000000def1a:
	movb $1, -1488(%rbp)
uuid_00000000000def1c:
	mov -1584(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000def1f:
	mov -1504(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000def22:
	mov -1496(%RBP),%RSP
	add $-1696, %RSP
	mov -1488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000def26
	jmp uuid_00000000000def28
uuid_00000000000def26:
	push %RBP
	mov -1368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000def23
	jmp uuid_00000000000def25
uuid_00000000000def23:
	movb $1, -1392(%rbp)
uuid_00000000000def25:
	mov -1704(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000def28:
	mov -1408(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000def2b:
	mov -1400(%RBP),%RSP
	add $-1776, %RSP
	mov -1392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000def33
	push %RBP
	jmp uuid_00000000000def30
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000def2f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000def32
uuid_00000000000def30:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000dd3d6
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq $uuid_00000000000dd3d6
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
uuid_00000000000def32:
	mov -1784(%RBP),%RSP
	add $-2040, %RSP
	jmp uuid_00000000000def35
uuid_00000000000def33:
#call function blob-render : Arrow<Cons<Cons<Cons<FContext,AST>,Fragment>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_CL_ArrowFragmentConsI64ConsFragmentConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	push %RBP
#call function has-prefix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1696(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call has_SB_prefix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000def2c
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000dd3d6
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq $uuid_00000000000dd3d6
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	jmp uuid_00000000000def2e
uuid_00000000000def2c:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -1696(%RBP), %RAX
	inc %RAX
	push %RAX
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov -1696(%RBP), %RAX
	inc %RAX
	push %RAX
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
uuid_00000000000def2e:
	mov -1784(%RBP),%RSP
	add $-2040, %RSP
uuid_00000000000def35:
	mov -1312(%RBP),%RSP
	add $-2040, %RSP
	jmp uuid_00000000000def38
uuid_00000000000def36:
	push %RBP
#call function has-prefix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1304(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call has_SB_prefix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000def0e
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000dd3d6
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq $uuid_00000000000dd3d6
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	jmp uuid_00000000000def10
uuid_00000000000def0e:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -1304(%RBP), %RAX
	inc %RAX
	push %RAX
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov -1304(%RBP), %RAX
	inc %RAX
	push %RAX
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
uuid_00000000000def10:
	mov -1312(%RBP),%RSP
	add $-1568, %RSP
uuid_00000000000def38:
	mov -1016(%RBP),%RSP
	add $-1568, %RSP
	jmp uuid_00000000000def3b
uuid_00000000000def39:
#call function blob-render : Arrow<Cons<Cons<Cons<FContext,AST>,Fragment>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_CL_ArrowFragmentConsI64ConsFragmentConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
uuid_00000000000def3b:
	mov -520(%RBP),%RSP
	add $-1008, %RSP
	subq $152, %rsp
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $440, %rsp
	ret
never_SB_as_SB_expr_SB_type_CL_ArrowFragmentConsTypeFragment:
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function == : Arrow<Cons<S,S>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq $0
	pushq $uuid_00000000000dafe9
	pushq $2
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def3d
	jmp uuid_00000000000def3f
uuid_00000000000def3d:
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000dd3d6
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de5cd
	pushq $2
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000dd3d6
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000db0f9
	pushq $2
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq $0
	pushq $uuid_00000000000def3c
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000def3f:
	mov -216(%RBP),%RSP
	add $-216, %RSP
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $184, %rsp
	ret
extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation:
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def58
	jmp uuid_00000000000def5a
uuid_00000000000def58:
	push %RBP
	mov -448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def46
	jmp uuid_00000000000def48
uuid_00000000000def46:
	push %RBP
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	jmp uuid_00000000000def43
	jmp uuid_00000000000def45
uuid_00000000000def43:
	push %RBP
	mov -488(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000def40
	jmp uuid_00000000000def42
uuid_00000000000def40:
	movb $1, -560(%rbp)
uuid_00000000000def42:
	mov -640(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000def45:
	mov -576(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000def48:
	mov -568(%RBP),%RSP
	add $-648, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000def55
	jmp uuid_00000000000def57
uuid_00000000000def55:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -728(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def4f
	jmp uuid_00000000000def51
uuid_00000000000def4f:
	push %RBP
	jmp uuid_00000000000def4c
	jmp uuid_00000000000def4e
uuid_00000000000def4c:
	push %RBP
	mov -664(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -768(%rbp)
	pushq $uuid_00000000000ded3d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000def49
	jmp uuid_00000000000def4b
uuid_00000000000def49:
	movb $1, -736(%rbp)
uuid_00000000000def4b:
	mov -760(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000def4e:
	mov -752(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000def51:
	mov -744(%RBP),%RSP
	add $-768, %RSP
	mov -736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000def52
	jmp uuid_00000000000def54
uuid_00000000000def52:
	movb $1, -464(%rbp)
uuid_00000000000def54:
	mov -656(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000def57:
	mov -480(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000def5a:
	mov -472(%RBP),%RSP
	add $-768, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000defc2
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def61
	jmp uuid_00000000000def63
uuid_00000000000def61:
	push %RBP
	mov -840(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000def5e
	jmp uuid_00000000000def60
uuid_00000000000def5e:
	push %RBP
	mov -832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000def5b
	jmp uuid_00000000000def5d
uuid_00000000000def5b:
	movb $1, -856(%rbp)
uuid_00000000000def5d:
	mov -952(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000def60:
	mov -872(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000def63:
	mov -864(%RBP),%RSP
	add $-1024, %RSP
	mov -856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000defbf
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -1104(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def6d
	jmp uuid_00000000000def6f
uuid_00000000000def6d:
	push %RBP
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	jmp uuid_00000000000def6a
	jmp uuid_00000000000def6c
uuid_00000000000def6a:
	push %RBP
	mov -1072(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000def67
	jmp uuid_00000000000def69
uuid_00000000000def67:
	push %RBP
	mov -1064(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000def64
	jmp uuid_00000000000def66
uuid_00000000000def64:
	movb $1, -1112(%rbp)
uuid_00000000000def66:
	mov -1240(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000def69:
	mov -1160(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000def6c:
	mov -1128(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000def6f:
	mov -1120(%RBP),%RSP
	add $-1312, %RSP
	mov -1112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000defbc
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	mov -1392(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000defb9
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	mov -1472(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000defb6
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -1552(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def73
	jmp uuid_00000000000def75
uuid_00000000000def73:
	push %RBP
	jmp uuid_00000000000def70
	jmp uuid_00000000000def72
uuid_00000000000def70:
	movb $1, -1560(%rbp)
uuid_00000000000def72:
	mov -1576(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000def75:
	mov -1568(%RBP),%RSP
	add $-1576, %RSP
	mov -1560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000defb3
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -1656(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def7c
	jmp uuid_00000000000def7e
uuid_00000000000def7c:
	push %RBP
	jmp uuid_00000000000def79
	jmp uuid_00000000000def7b
uuid_00000000000def79:
	push %RBP
	mov -1592(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000def76
	jmp uuid_00000000000def78
uuid_00000000000def76:
	movb $1, -1664(%rbp)
uuid_00000000000def78:
	mov -1688(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000def7b:
	mov -1680(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000def7e:
	mov -1672(%RBP),%RSP
	add $-1696, %RSP
	mov -1664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000defb0
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -1776(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def85
	jmp uuid_00000000000def87
uuid_00000000000def85:
	push %RBP
	jmp uuid_00000000000def82
	jmp uuid_00000000000def84
uuid_00000000000def82:
	push %RBP
	mov -1712(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000def7f
	jmp uuid_00000000000def81
uuid_00000000000def7f:
	movb $1, -1784(%rbp)
uuid_00000000000def81:
	mov -1808(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000def84:
	mov -1800(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000def87:
	mov -1792(%RBP),%RSP
	add $-1816, %RSP
	mov -1784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000defad
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -1896(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def8e
	jmp uuid_00000000000def90
uuid_00000000000def8e:
	push %RBP
	mov -1888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000def8b
	jmp uuid_00000000000def8d
uuid_00000000000def8b:
	push %RBP
	mov -1880(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000def88
	jmp uuid_00000000000def8a
uuid_00000000000def88:
	movb $1, -1904(%rbp)
uuid_00000000000def8a:
	mov -2000(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000def8d:
	mov -1920(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000def90:
	mov -1912(%RBP),%RSP
	add $-2072, %RSP
	mov -1904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000defaa
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -2152(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def97
	jmp uuid_00000000000def99
uuid_00000000000def97:
	push %RBP
	mov -2144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000def94
	jmp uuid_00000000000def96
uuid_00000000000def94:
	push %RBP
	mov -2136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000def91
	jmp uuid_00000000000def93
uuid_00000000000def91:
	movb $1, -2160(%rbp)
uuid_00000000000def93:
	mov -2256(%RBP),%RSP
	add $-2328, %RSP
uuid_00000000000def96:
	mov -2176(%RBP),%RSP
	add $-2328, %RSP
uuid_00000000000def99:
	mov -2168(%RBP),%RSP
	add $-2328, %RSP
	mov -2160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000defa7
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -2408(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000defa0
	jmp uuid_00000000000defa2
uuid_00000000000defa0:
	push %RBP
	mov -2400(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000def9d
	jmp uuid_00000000000def9f
uuid_00000000000def9d:
	push %RBP
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	pushq -2360(%RBP)
	pushq -2368(%RBP)
	pushq -2376(%RBP)
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	jmp uuid_00000000000def9a
	jmp uuid_00000000000def9c
uuid_00000000000def9a:
	movb $1, -2416(%rbp)
uuid_00000000000def9c:
	mov -2512(%RBP),%RSP
	add $-2568, %RSP
uuid_00000000000def9f:
	mov -2432(%RBP),%RSP
	add $-2568, %RSP
uuid_00000000000defa2:
	mov -2424(%RBP),%RSP
	add $-2568, %RSP
	mov -2416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000defa4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000defa3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000defa6
uuid_00000000000defa4:
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -2440(%rbp)
	pushq -2448(%rbp)
	pushq -2456(%rbp)
	pushq -2464(%rbp)
	pushq -2472(%rbp)
	pushq -2480(%rbp)
	pushq -2488(%rbp)
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	movq -2664(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -2656(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -2648(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -2640(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -2632(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -2624(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -2616(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -2608(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -2600(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -2592(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -2584(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -2576(%rbp), %r15
	movq %r15, -216(%rbp)
uuid_00000000000defa6:
	mov -2336(%RBP),%RSP
	add $-2664, %RSP
	jmp uuid_00000000000defa9
uuid_00000000000defa7:
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -2336(%rbp)
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	pushq -2408(%rbp)
	pushq -2416(%rbp)
	pushq -2424(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	movq -2520(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -2512(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -2504(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -2496(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -2488(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -2480(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -2472(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -2464(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -2456(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -2448(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -2440(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -2432(%rbp), %r15
	movq %r15, -216(%rbp)
uuid_00000000000defa9:
	mov -2080(%RBP),%RSP
	add $-2520, %RSP
	jmp uuid_00000000000defac
uuid_00000000000defaa:
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	movq -2264(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -2256(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -2248(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -2240(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -2232(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -2224(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -2216(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -2208(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -2200(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -2192(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -2184(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -2176(%rbp), %r15
	movq %r15, -216(%rbp)
uuid_00000000000defac:
	mov -1824(%RBP),%RSP
	add $-2264, %RSP
	jmp uuid_00000000000defaf
uuid_00000000000defad:
uuid_00000000000defaf:
	mov -1704(%RBP),%RSP
	add $-1816, %RSP
	jmp uuid_00000000000defb2
uuid_00000000000defb0:
uuid_00000000000defb2:
	mov -1584(%RBP),%RSP
	add $-1696, %RSP
	jmp uuid_00000000000defb5
uuid_00000000000defb3:
uuid_00000000000defb5:
	mov -1480(%RBP),%RSP
	add $-1576, %RSP
	jmp uuid_00000000000defb8
uuid_00000000000defb6:
uuid_00000000000defb8:
	mov -1400(%RBP),%RSP
	add $-1472, %RSP
	jmp uuid_00000000000defbb
uuid_00000000000defb9:
uuid_00000000000defbb:
	mov -1320(%RBP),%RSP
	add $-1392, %RSP
	jmp uuid_00000000000defbe
uuid_00000000000defbc:
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	movq -1504(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -216(%rbp)
uuid_00000000000defbe:
	mov -1032(%RBP),%RSP
	add $-1504, %RSP
	jmp uuid_00000000000defc1
uuid_00000000000defbf:
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	movq -1216(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -216(%rbp)
uuid_00000000000defc1:
	mov -776(%RBP),%RSP
	add $-1216, %RSP
	jmp uuid_00000000000defc4
uuid_00000000000defc2:
#call function uuid : Arrow<Nil,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call uuid_CL_ArrowStringNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Context,Array<Context,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -648(%rbp)
	pushq -776(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -776(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	pushq $0
	movq -872(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -864(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -856(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -848(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -840(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -832(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -824(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -816(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -808(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -800(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -792(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -784(%rbp), %r15
	movq %r15, -216(%rbp)
uuid_00000000000defc4:
	mov -384(%RBP),%RSP
	add $-872, %RSP
	subq $96, %rsp
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	addq $96, %rsp
	mov %rbp, %rsp
	sub $208, %rsp
	ret
index_SB_typedefs_CL_ArrowNilAST:
uuid_00000000000defea:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000defeb
	jmp uuid_00000000000defec
uuid_00000000000defeb:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000defd4
	jmp uuid_00000000000defd6
uuid_00000000000defd4:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000defcb
	jmp uuid_00000000000defcd
uuid_00000000000defcb:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000defc8
	jmp uuid_00000000000defca
uuid_00000000000defc8:
	push %RBP
	mov -312(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000defc5
	jmp uuid_00000000000defc7
uuid_00000000000defc5:
	movb $1, -336(%rbp)
uuid_00000000000defc7:
	mov -432(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000defca:
	mov -352(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000defcd:
	mov -344(%RBP),%RSP
	add $-504, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000defd1
	jmp uuid_00000000000defd3
uuid_00000000000defd1:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000defce
	jmp uuid_00000000000defd0
uuid_00000000000defce:
	movb $1, -240(%rbp)
uuid_00000000000defd0:
	mov -512(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000defd3:
	mov -256(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000defd6:
	mov -248(%RBP),%RSP
	add $-584, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000defe7
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000defdd
	jmp uuid_00000000000defdf
uuid_00000000000defdd:
	push %RBP
	jmp uuid_00000000000defda
	jmp uuid_00000000000defdc
uuid_00000000000defda:
	push %RBP
	mov -648(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000defd7
	jmp uuid_00000000000defd9
uuid_00000000000defd7:
	movb $1, -672(%rbp)
uuid_00000000000defd9:
	mov -696(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000defdc:
	mov -688(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000defdf:
	mov -680(%RBP),%RSP
	add $-768, %RSP
	mov -672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000defe4
	push %RBP
	jmp uuid_00000000000defe1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000defe0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000defe3
uuid_00000000000defe1:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000defe3:
	mov -776(%RBP),%RSP
	add $-776, %RSP
	jmp uuid_00000000000defe6
uuid_00000000000defe4:
	movq -768(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000defe6:
	mov -592(%RBP),%RSP
	add $-768, %RSP
	jmp uuid_00000000000defe9
uuid_00000000000defe7:
#call function index-typedefs : Arrow<Cons<AST,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq $0
	mov %RBX, %RBP
	call index_SB_typedefs_CL_ArrowNilConsU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -584(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -576(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -568(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -560(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -552(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -544(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -536(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -528(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -520(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000defe9:
	mov -160(%RBP),%RSP
	add $-584, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000defea
uuid_00000000000defec:
	mov %rbp, %rsp
	sub $80, %rsp
	ret
index_SB_typedefs_CL_ArrowNilConsU64AST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df00e
	jmp uuid_00000000000df010
uuid_00000000000df00e:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deff3
	jmp uuid_00000000000deff5
uuid_00000000000deff3:
	push %RBP
	jmp uuid_00000000000deff0
	jmp uuid_00000000000deff2
uuid_00000000000deff0:
	push %RBP
	mov -272(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000defed
	jmp uuid_00000000000defef
uuid_00000000000defed:
	movb $1, -344(%rbp)
uuid_00000000000defef:
	mov -368(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000deff2:
	mov -360(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000deff5:
	mov -352(%RBP),%RSP
	add $-376, %RSP
	mov -344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df00b
	jmp uuid_00000000000df00d
uuid_00000000000df00b:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df005
	jmp uuid_00000000000df007
uuid_00000000000df005:
	push %RBP
	mov -448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deffc
	jmp uuid_00000000000deffe
uuid_00000000000deffc:
	push %RBP
	jmp uuid_00000000000deff9
	jmp uuid_00000000000deffb
uuid_00000000000deff9:
	push %RBP
	mov -488(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -592(%rbp)
	pushq $uuid_00000000000dcbb9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deff6
	jmp uuid_00000000000deff8
uuid_00000000000deff6:
	movb $1, -560(%rbp)
uuid_00000000000deff8:
	mov -584(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000deffb:
	mov -576(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000deffe:
	mov -568(%RBP),%RSP
	add $-592, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df002
	jmp uuid_00000000000df004
uuid_00000000000df002:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000defff
	jmp uuid_00000000000df001
uuid_00000000000defff:
	movb $1, -464(%rbp)
uuid_00000000000df001:
	mov -600(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000df004:
	mov -480(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000df007:
	mov -472(%RBP),%RSP
	add $-672, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df008
	jmp uuid_00000000000df00a
uuid_00000000000df008:
	movb $1, -248(%rbp)
uuid_00000000000df00a:
	mov -384(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000df00d:
	mov -264(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000df010:
	mov -256(%RBP),%RSP
	add $-672, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df06a
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df03b
	jmp uuid_00000000000df03d
uuid_00000000000df03b:
	push %RBP
	mov -744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df020
	jmp uuid_00000000000df022
uuid_00000000000df020:
	push %RBP
	jmp uuid_00000000000df01d
	jmp uuid_00000000000df01f
uuid_00000000000df01d:
	push %RBP
	mov -832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -952(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df017
	jmp uuid_00000000000df019
uuid_00000000000df017:
	push %RBP
	jmp uuid_00000000000df014
	jmp uuid_00000000000df016
uuid_00000000000df014:
	push %RBP
	mov -888(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df011
	jmp uuid_00000000000df013
uuid_00000000000df011:
	movb $1, -960(%rbp)
uuid_00000000000df013:
	mov -984(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000df016:
	mov -976(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000df019:
	mov -968(%RBP),%RSP
	add $-992, %RSP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df01a
	jmp uuid_00000000000df01c
uuid_00000000000df01a:
	movb $1, -856(%rbp)
uuid_00000000000df01c:
	mov -880(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000df01f:
	mov -872(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000df022:
	mov -864(%RBP),%RSP
	add $-992, %RSP
	mov -856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df038
	jmp uuid_00000000000df03a
uuid_00000000000df038:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1072(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df032
	jmp uuid_00000000000df034
uuid_00000000000df032:
	push %RBP
	mov -1064(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1168(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df029
	jmp uuid_00000000000df02b
uuid_00000000000df029:
	push %RBP
	jmp uuid_00000000000df026
	jmp uuid_00000000000df028
uuid_00000000000df026:
	push %RBP
	mov -1104(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1208(%rbp)
	pushq $uuid_00000000000dcbb9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df023
	jmp uuid_00000000000df025
uuid_00000000000df023:
	movb $1, -1176(%rbp)
uuid_00000000000df025:
	mov -1200(%RBP),%RSP
	add $-1208, %RSP
uuid_00000000000df028:
	mov -1192(%RBP),%RSP
	add $-1208, %RSP
uuid_00000000000df02b:
	mov -1184(%RBP),%RSP
	add $-1208, %RSP
	mov -1176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df02f
	jmp uuid_00000000000df031
uuid_00000000000df02f:
	push %RBP
	mov -1056(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df02c
	jmp uuid_00000000000df02e
uuid_00000000000df02c:
	movb $1, -1080(%rbp)
uuid_00000000000df02e:
	mov -1216(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000df031:
	mov -1096(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000df034:
	mov -1088(%RBP),%RSP
	add $-1288, %RSP
	mov -1080(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df035
	jmp uuid_00000000000df037
uuid_00000000000df035:
	movb $1, -760(%rbp)
uuid_00000000000df037:
	mov -1000(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000df03a:
	mov -776(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000df03d:
	mov -768(%RBP),%RSP
	add $-1288, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df067
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -1368(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df044
	jmp uuid_00000000000df046
uuid_00000000000df044:
	push %RBP
	jmp uuid_00000000000df041
	jmp uuid_00000000000df043
uuid_00000000000df041:
	push %RBP
	mov -1304(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df03e
	jmp uuid_00000000000df040
uuid_00000000000df03e:
	movb $1, -1376(%rbp)
uuid_00000000000df040:
	mov -1400(%RBP),%RSP
	add $-1408, %RSP
uuid_00000000000df043:
	mov -1392(%RBP),%RSP
	add $-1408, %RSP
uuid_00000000000df046:
	mov -1384(%RBP),%RSP
	add $-1408, %RSP
	mov -1376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df064
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -1488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df056
	jmp uuid_00000000000df058
uuid_00000000000df056:
	push %RBP
	jmp uuid_00000000000df053
	jmp uuid_00000000000df055
uuid_00000000000df053:
	push %RBP
	mov -1472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1592(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df04d
	jmp uuid_00000000000df04f
uuid_00000000000df04d:
	push %RBP
	jmp uuid_00000000000df04a
	jmp uuid_00000000000df04c
uuid_00000000000df04a:
	push %RBP
	mov -1528(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df047
	jmp uuid_00000000000df049
uuid_00000000000df047:
	movb $1, -1600(%rbp)
uuid_00000000000df049:
	mov -1624(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000df04c:
	mov -1616(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000df04f:
	mov -1608(%RBP),%RSP
	add $-1632, %RSP
	mov -1600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df050
	jmp uuid_00000000000df052
uuid_00000000000df050:
	movb $1, -1496(%rbp)
uuid_00000000000df052:
	mov -1520(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000df055:
	mov -1512(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000df058:
	mov -1504(%RBP),%RSP
	add $-1632, %RSP
	mov -1496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df061
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov -1712(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df05e
	push %RBP
	jmp uuid_00000000000df05b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df05a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df05d
uuid_00000000000df05b:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000df059
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000df05d:
	mov -1720(%RBP),%RSP
	add $-1720, %RSP
	jmp uuid_00000000000df060
uuid_00000000000df05e:
uuid_00000000000df060:
	mov -1640(%RBP),%RSP
	add $-1712, %RSP
	jmp uuid_00000000000df063
uuid_00000000000df061:
#call function index-index-of-tag : Arrow<Cons<String,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1632(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call index_SB_index_SB_of_SB_tag_CL_ArrowNilConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000df063:
	mov -1416(%RBP),%RSP
	add $-1632, %RSP
	jmp uuid_00000000000df066
uuid_00000000000df064:
#call function index-index-of-tag : Arrow<Cons<String,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1408(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call index_SB_index_SB_of_SB_tag_CL_ArrowNilConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-lone-tag : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1408(%rbp)
	mov %RBX, %RBP
	call index_SB_lone_SB_tag_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000df066:
	mov -1296(%RBP),%RSP
	add $-1408, %RSP
	jmp uuid_00000000000df069
uuid_00000000000df067:
#call function index-index-of-tag : Arrow<Cons<String,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -992(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call index_SB_index_SB_of_SB_tag_CL_ArrowNilConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-typedefs : Arrow<Cons<AST,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	mov -80(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call index_SB_typedefs_CL_ArrowNilConsU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000df069:
	mov -680(%RBP),%RSP
	add $-1288, %RSP
	jmp uuid_00000000000df06c
uuid_00000000000df06a:
#call function index-index-of-tag : Arrow<Cons<String,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -376(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call index_SB_index_SB_of_SB_tag_CL_ArrowNilConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-lone-tag : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -376(%rbp)
	mov %RBX, %RBP
	call index_SB_lone_SB_tag_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-typedefs : Arrow<Cons<AST,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	mov -80(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call index_SB_typedefs_CL_ArrowNilConsU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000df06c:
	mov -168(%RBP),%RSP
	add $-672, %RSP
	mov %rbp, %rsp
	sub $88, %rsp
	ret
is_SB_macro_SB_head_CL_ArrowU64ConsU64String:
	mov $preprocess_SB_macros_CL_MacroListMacroList, %r15
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $0
uuid_00000000000df0e1:
#call function non-zero : Arrow<MacroList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64MacroList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df0e2
	jmp uuid_00000000000df0e3
uuid_00000000000df0e2:
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df08e
	jmp uuid_00000000000df090
uuid_00000000000df08e:
	push %RBP
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq $0
	push %RBP
	mov -720(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df085
	jmp uuid_00000000000df087
uuid_00000000000df085:
	push %RBP
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	jmp uuid_00000000000df082
	jmp uuid_00000000000df084
uuid_00000000000df082:
	push %RBP
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq $0
	push %RBP
	mov -896(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df07c
	jmp uuid_00000000000df07e
uuid_00000000000df07c:
	push %RBP
	mov -888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df079
	jmp uuid_00000000000df07b
uuid_00000000000df079:
	push %RBP
	mov -880(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1072(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df073
	jmp uuid_00000000000df075
uuid_00000000000df073:
	push %RBP
	jmp uuid_00000000000df070
	jmp uuid_00000000000df072
uuid_00000000000df070:
	push %RBP
	mov -1008(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df06d
	jmp uuid_00000000000df06f
uuid_00000000000df06d:
	movb $1, -1080(%rbp)
uuid_00000000000df06f:
	mov -1104(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000df072:
	mov -1096(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000df075:
	mov -1088(%RBP),%RSP
	add $-1112, %RSP
	mov -1080(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df076
	jmp uuid_00000000000df078
uuid_00000000000df076:
	movb $1, -904(%rbp)
uuid_00000000000df078:
	mov -1000(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000df07b:
	mov -920(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000df07e:
	mov -912(%RBP),%RSP
	add $-1112, %RSP
	mov -904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df07f
	jmp uuid_00000000000df081
uuid_00000000000df07f:
	movb $1, -728(%rbp)
uuid_00000000000df081:
	mov -824(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000df084:
	mov -744(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000df087:
	mov -736(%RBP),%RSP
	add $-1112, %RSP
	mov -728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df08b
	jmp uuid_00000000000df08d
uuid_00000000000df08b:
	push %RBP
	mov -384(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df088
	jmp uuid_00000000000df08a
uuid_00000000000df088:
	movb $1, -552(%rbp)
uuid_00000000000df08a:
	mov -1120(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000df08d:
	mov -568(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000df090:
	mov -560(%RBP),%RSP
	add $-1288, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df0de
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq $0
	push %RBP
	mov -1464(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df0be
	jmp uuid_00000000000df0c0
uuid_00000000000df0be:
	push %RBP
	pushq -1312(%RBP)
	pushq -1320(%RBP)
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq $0
	push %RBP
	mov -1640(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df0b5
	jmp uuid_00000000000df0b7
uuid_00000000000df0b5:
	push %RBP
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	jmp uuid_00000000000df0b2
	jmp uuid_00000000000df0b4
uuid_00000000000df0b2:
	push %RBP
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq $0
	push %RBP
	mov -1816(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df0ac
	jmp uuid_00000000000df0ae
uuid_00000000000df0ac:
	push %RBP
	mov -1808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df0a9
	jmp uuid_00000000000df0ab
uuid_00000000000df0a9:
	push %RBP
	mov -1800(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1992(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df0a3
	jmp uuid_00000000000df0a5
uuid_00000000000df0a3:
	push %RBP
	mov -1984(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df0a0
	jmp uuid_00000000000df0a2
uuid_00000000000df0a0:
	push %RBP
	mov -1976(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2168(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df09a
	jmp uuid_00000000000df09c
uuid_00000000000df09a:
	push %RBP
	jmp uuid_00000000000df097
	jmp uuid_00000000000df099
uuid_00000000000df097:
	push %RBP
	mov -2104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df094
	jmp uuid_00000000000df096
uuid_00000000000df094:
	movb $1, -2176(%rbp)
uuid_00000000000df096:
	mov -2200(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000df099:
	mov -2192(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000df09c:
	mov -2184(%RBP),%RSP
	add $-2208, %RSP
	mov -2176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df09d
	jmp uuid_00000000000df09f
uuid_00000000000df09d:
	movb $1, -2000(%rbp)
uuid_00000000000df09f:
	mov -2096(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000df0a2:
	mov -2016(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000df0a5:
	mov -2008(%RBP),%RSP
	add $-2208, %RSP
	mov -2000(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df0a6
	jmp uuid_00000000000df0a8
uuid_00000000000df0a6:
	movb $1, -1824(%rbp)
uuid_00000000000df0a8:
	mov -1920(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000df0ab:
	mov -1840(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000df0ae:
	mov -1832(%RBP),%RSP
	add $-2208, %RSP
	mov -1824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df0af
	jmp uuid_00000000000df0b1
uuid_00000000000df0af:
	movb $1, -1648(%rbp)
uuid_00000000000df0b1:
	mov -1744(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000df0b4:
	mov -1664(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000df0b7:
	mov -1656(%RBP),%RSP
	add $-2208, %RSP
	mov -1648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df0bb
	jmp uuid_00000000000df0bd
uuid_00000000000df0bb:
	push %RBP
	mov -1304(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df0b8
	jmp uuid_00000000000df0ba
uuid_00000000000df0b8:
	movb $1, -1472(%rbp)
uuid_00000000000df0ba:
	mov -2216(%RBP),%RSP
	add $-2384, %RSP
uuid_00000000000df0bd:
	mov -1488(%RBP),%RSP
	add $-2384, %RSP
uuid_00000000000df0c0:
	mov -1480(%RBP),%RSP
	add $-2384, %RSP
	mov -1472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df0db
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq $0
	push %RBP
	mov -2560(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df0d3
	jmp uuid_00000000000df0d5
uuid_00000000000df0d3:
	push %RBP
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq $0
	push %RBP
	mov -2736(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df0ca
	jmp uuid_00000000000df0cc
uuid_00000000000df0ca:
	push %RBP
	pushq -2664(%RBP)
	pushq -2672(%RBP)
	pushq -2680(%RBP)
	pushq -2688(%RBP)
	pushq -2696(%RBP)
	pushq -2704(%RBP)
	pushq -2712(%RBP)
	pushq -2720(%RBP)
	pushq -2728(%RBP)
	jmp uuid_00000000000df0c7
	jmp uuid_00000000000df0c9
uuid_00000000000df0c7:
	push %RBP
	pushq -2592(%RBP)
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	pushq -2624(%RBP)
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	pushq -2656(%RBP)
	jmp uuid_00000000000df0c4
	jmp uuid_00000000000df0c6
uuid_00000000000df0c4:
	movb $1, -2744(%rbp)
uuid_00000000000df0c6:
	mov -2840(%RBP),%RSP
	add $-2912, %RSP
uuid_00000000000df0c9:
	mov -2760(%RBP),%RSP
	add $-2912, %RSP
uuid_00000000000df0cc:
	mov -2752(%RBP),%RSP
	add $-2912, %RSP
	mov -2744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df0d0
	jmp uuid_00000000000df0d2
uuid_00000000000df0d0:
	push %RBP
	mov -2400(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df0cd
	jmp uuid_00000000000df0cf
uuid_00000000000df0cd:
	movb $1, -2568(%rbp)
uuid_00000000000df0cf:
	mov -2920(%RBP),%RSP
	add $-3088, %RSP
uuid_00000000000df0d2:
	mov -2584(%RBP),%RSP
	add $-3088, %RSP
uuid_00000000000df0d5:
	mov -2576(%RBP),%RSP
	add $-3088, %RSP
	mov -2568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df0d8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df0d7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df0da
uuid_00000000000df0d8:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000df0d6
	pushq -2848(%rbp)
	pushq -2856(%rbp)
	pushq -2864(%rbp)
	pushq -2872(%rbp)
	pushq -2880(%rbp)
	pushq -2888(%rbp)
	pushq -2896(%rbp)
	pushq -2904(%rbp)
	pushq -2912(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000df0da:
	mov -2392(%RBP),%RSP
	add $-3088, %RSP
	jmp uuid_00000000000df0dd
uuid_00000000000df0db:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -2208(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -16(%RBP), %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df0c1
	jmp uuid_00000000000df0c3
uuid_00000000000df0c1:
	movq $1, -200(%rbp)
uuid_00000000000df0c3:
	mov -2392(%RBP),%RSP
	add $-2392, %RSP
	movq -2384(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -2376(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -2368(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -2360(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -2352(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -2344(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -2336(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -2328(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -2320(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -2312(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -2304(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -2296(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -2288(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -2280(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -2272(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -2264(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2256(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -2248(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -2240(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -2232(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -2224(%rbp), %r15
	movq %r15, -32(%rbp)
uuid_00000000000df0dd:
	mov -1296(%RBP),%RSP
	add $-2392, %RSP
	jmp uuid_00000000000df0e0
uuid_00000000000df0de:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -16(%RBP), %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df091
	jmp uuid_00000000000df093
uuid_00000000000df091:
	movq $1, -200(%rbp)
uuid_00000000000df093:
	mov -1296(%RBP),%RSP
	add $-1296, %RSP
	movq -1288(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -32(%rbp)
uuid_00000000000df0e0:
	mov -376(%RBP),%RSP
	add $-1296, %RSP
	add $168, %rsp
	add $168, %rsp
	add $8, %rsp
	add $152, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $168, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000df0e1
uuid_00000000000df0e3:
	mov -200(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
preprocess_SB_apply_SB_hard_CL_ArrowASTConsASTConsU64String:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov $preprocess_SB_macros_CL_MacroListMacroList, %r15
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $0
uuid_00000000000df144:
#call function non-zero : Arrow<MacroList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64MacroList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df145
	jmp uuid_00000000000df146
uuid_00000000000df145:
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	push %RBP
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq $0
	push %RBP
	mov -688(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df0f3
	jmp uuid_00000000000df0f5
uuid_00000000000df0f3:
	push %RBP
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq $0
	push %RBP
	mov -864(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df0ea
	jmp uuid_00000000000df0ec
uuid_00000000000df0ea:
	push %RBP
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	jmp uuid_00000000000df0e7
	jmp uuid_00000000000df0e9
uuid_00000000000df0e7:
	push %RBP
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq -752(%RBP)
	pushq -760(%RBP)
	pushq -768(%RBP)
	pushq -776(%RBP)
	pushq -784(%RBP)
	jmp uuid_00000000000df0e4
	jmp uuid_00000000000df0e6
uuid_00000000000df0e4:
	movb $1, -872(%rbp)
uuid_00000000000df0e6:
	mov -968(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000df0e9:
	mov -888(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000df0ec:
	mov -880(%RBP),%RSP
	add $-1040, %RSP
	mov -872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df0f0
	jmp uuid_00000000000df0f2
uuid_00000000000df0f0:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df0ed
	jmp uuid_00000000000df0ef
uuid_00000000000df0ed:
	movb $1, -696(%rbp)
uuid_00000000000df0ef:
	mov -1048(%RBP),%RSP
	add $-1216, %RSP
uuid_00000000000df0f2:
	mov -712(%RBP),%RSP
	add $-1216, %RSP
uuid_00000000000df0f5:
	mov -704(%RBP),%RSP
	add $-1216, %RSP
	mov -696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df141
	push %RBP
	jmp uuid_00000000000df13e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df13d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df140
uuid_00000000000df13e:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
uuid_00000000000df140:
	mov -1224(%RBP),%RSP
	add $-1224, %RSP
	jmp uuid_00000000000df143
uuid_00000000000df141:
	movq -1216(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -328(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -176(%rbp)
	pushq $0
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	push %RBP
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq $0
	push %RBP
	mov -1376(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df105
	jmp uuid_00000000000df107
uuid_00000000000df105:
	push %RBP
	jmp uuid_00000000000df102
	jmp uuid_00000000000df104
uuid_00000000000df102:
	push %RBP
	mov -1360(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1480(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df0fc
	jmp uuid_00000000000df0fe
uuid_00000000000df0fc:
	push %RBP
	jmp uuid_00000000000df0f9
	jmp uuid_00000000000df0fb
uuid_00000000000df0f9:
	push %RBP
	mov -1416(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df0f6
	jmp uuid_00000000000df0f8
uuid_00000000000df0f6:
	movb $1, -1488(%rbp)
uuid_00000000000df0f8:
	mov -1512(%RBP),%RSP
	add $-1520, %RSP
uuid_00000000000df0fb:
	mov -1504(%RBP),%RSP
	add $-1520, %RSP
uuid_00000000000df0fe:
	mov -1496(%RBP),%RSP
	add $-1520, %RSP
	mov -1488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df0ff
	jmp uuid_00000000000df101
uuid_00000000000df0ff:
	movb $1, -1384(%rbp)
uuid_00000000000df101:
	mov -1408(%RBP),%RSP
	add $-1520, %RSP
uuid_00000000000df104:
	mov -1400(%RBP),%RSP
	add $-1520, %RSP
uuid_00000000000df107:
	mov -1392(%RBP),%RSP
	add $-1520, %RSP
	mov -1384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df12d
	push %RBP
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq $0
	push %RBP
	mov -1600(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df123
	jmp uuid_00000000000df125
uuid_00000000000df123:
	push %RBP
	jmp uuid_00000000000df120
	jmp uuid_00000000000df122
uuid_00000000000df120:
	push %RBP
	mov -1584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1704(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df11a
	jmp uuid_00000000000df11c
uuid_00000000000df11a:
	push %RBP
	jmp uuid_00000000000df117
	jmp uuid_00000000000df119
uuid_00000000000df117:
	push %RBP
	mov -1688(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1808(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df111
	jmp uuid_00000000000df113
uuid_00000000000df111:
	push %RBP
	jmp uuid_00000000000df10e
	jmp uuid_00000000000df110
uuid_00000000000df10e:
	push %RBP
	mov -1744(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df10b
	jmp uuid_00000000000df10d
uuid_00000000000df10b:
	movb $1, -1816(%rbp)
uuid_00000000000df10d:
	mov -1840(%RBP),%RSP
	add $-1848, %RSP
uuid_00000000000df110:
	mov -1832(%RBP),%RSP
	add $-1848, %RSP
uuid_00000000000df113:
	mov -1824(%RBP),%RSP
	add $-1848, %RSP
	mov -1816(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df114
	jmp uuid_00000000000df116
uuid_00000000000df114:
	movb $1, -1712(%rbp)
uuid_00000000000df116:
	mov -1736(%RBP),%RSP
	add $-1848, %RSP
uuid_00000000000df119:
	mov -1728(%RBP),%RSP
	add $-1848, %RSP
uuid_00000000000df11c:
	mov -1720(%RBP),%RSP
	add $-1848, %RSP
	mov -1712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df11d
	jmp uuid_00000000000df11f
uuid_00000000000df11d:
	movb $1, -1608(%rbp)
uuid_00000000000df11f:
	mov -1632(%RBP),%RSP
	add $-1848, %RSP
uuid_00000000000df122:
	mov -1624(%RBP),%RSP
	add $-1848, %RSP
uuid_00000000000df125:
	mov -1616(%RBP),%RSP
	add $-1848, %RSP
	mov -1608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df12a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df129
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df12c
uuid_00000000000df12a:
	push %RBP
	mov -16(%RBP), %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -1848(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df126
	jmp uuid_00000000000df128
uuid_00000000000df126:
	movb $1, -1224(%rbp)
uuid_00000000000df128:
	mov -1856(%RBP),%RSP
	add $-1856, %RSP
uuid_00000000000df12c:
	mov -1528(%RBP),%RSP
	add $-1856, %RSP
	jmp uuid_00000000000df12f
uuid_00000000000df12d:
	push %RBP
	mov -16(%RBP), %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -1520(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df108
	jmp uuid_00000000000df10a
uuid_00000000000df108:
	movb $1, -1224(%rbp)
uuid_00000000000df10a:
	mov -1528(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000df12f:
	mov -1304(%RBP),%RSP
	add $-1528, %RSP
	push %RBP
	mov -1224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df13a
	jmp uuid_00000000000df13c
uuid_00000000000df13a:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	mov -1736(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df137
	push %RBP
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	jmp uuid_00000000000df134
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df133
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df136
uuid_00000000000df134:
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	popq -960(%RBP)
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
	popq -912(%RBP)
	popq -904(%RBP)
	popq -896(%RBP)
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -960(%RBP)
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
	popq -912(%RBP)
	popq -904(%RBP)
	popq -896(%RBP)
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df130
	jmp uuid_00000000000df132
uuid_00000000000df130:
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	popq -1912(%RBP)
	popq -1904(%RBP)
	popq -1896(%RBP)
	popq -1888(%RBP)
	popq -1880(%RBP)
	popq -1872(%RBP)
	popq -1864(%RBP)
	popq -1856(%RBP)
	popq -1848(%RBP)
uuid_00000000000df132:
	mov -2016(%RBP),%RSP
	add $-2016, %RSP
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	movb $1, -344(%rbp)
uuid_00000000000df136:
	mov -1744(%RBP),%RSP
	add $-2016, %RSP
	jmp uuid_00000000000df139
uuid_00000000000df137:
	movq -1216(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -328(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -176(%rbp)
uuid_00000000000df139:
	mov -1640(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000df13c:
	mov -1536(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000df143:
	mov -520(%RBP),%RSP
	add $-1736, %RSP
	add $168, %rsp
	add $168, %rsp
	add $8, %rsp
	add $152, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $168, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $96, %rsp
	add $96, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000df144
uuid_00000000000df146:
	push %RBP
	mov -344(%RBP), %AL
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df148
	jmp uuid_00000000000df14a
uuid_00000000000df148:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000df147
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000df14a:
	mov -352(%RBP),%RSP
	add $-352, %RSP
	subq $72, %rsp
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $96, %rsp
	ret
preprocess_SB_apply_SB_literals_CL_ArrowASTAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df16c
	jmp uuid_00000000000df16e
uuid_00000000000df16c:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df151
	jmp uuid_00000000000df153
uuid_00000000000df151:
	push %RBP
	jmp uuid_00000000000df14e
	jmp uuid_00000000000df150
uuid_00000000000df14e:
	push %RBP
	mov -336(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df14b
	jmp uuid_00000000000df14d
uuid_00000000000df14b:
	movb $1, -408(%rbp)
uuid_00000000000df14d:
	mov -432(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000df150:
	mov -424(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000df153:
	mov -416(%RBP),%RSP
	add $-440, %RSP
	mov -408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df169
	jmp uuid_00000000000df16b
uuid_00000000000df169:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -520(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df163
	jmp uuid_00000000000df165
uuid_00000000000df163:
	push %RBP
	mov -512(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df160
	jmp uuid_00000000000df162
uuid_00000000000df160:
	push %RBP
	mov -504(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df15a
	jmp uuid_00000000000df15c
uuid_00000000000df15a:
	push %RBP
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq -688(%RBP)
	jmp uuid_00000000000df157
	jmp uuid_00000000000df159
uuid_00000000000df157:
	push %RBP
	mov -632(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df154
	jmp uuid_00000000000df156
uuid_00000000000df154:
	movb $1, -704(%rbp)
uuid_00000000000df156:
	mov -784(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000df159:
	mov -720(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000df15c:
	mov -712(%RBP),%RSP
	add $-792, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df15d
	jmp uuid_00000000000df15f
uuid_00000000000df15d:
	movb $1, -528(%rbp)
uuid_00000000000df15f:
	mov -624(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000df162:
	mov -544(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000df165:
	mov -536(%RBP),%RSP
	add $-792, %RSP
	mov -528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df166
	jmp uuid_00000000000df168
uuid_00000000000df166:
	movb $1, -312(%rbp)
uuid_00000000000df168:
	mov -448(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000df16b:
	mov -328(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000df16e:
	mov -320(%RBP),%RSP
	add $-792, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df1fb
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -872(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df190
	jmp uuid_00000000000df192
uuid_00000000000df190:
	push %RBP
	mov -864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -968(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df175
	jmp uuid_00000000000df177
uuid_00000000000df175:
	push %RBP
	jmp uuid_00000000000df172
	jmp uuid_00000000000df174
uuid_00000000000df172:
	push %RBP
	mov -904(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df16f
	jmp uuid_00000000000df171
uuid_00000000000df16f:
	movb $1, -976(%rbp)
uuid_00000000000df171:
	mov -1000(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000df174:
	mov -992(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000df177:
	mov -984(%RBP),%RSP
	add $-1008, %RSP
	mov -976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df18d
	jmp uuid_00000000000df18f
uuid_00000000000df18d:
	push %RBP
	mov -856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1088(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df187
	jmp uuid_00000000000df189
uuid_00000000000df187:
	push %RBP
	mov -1080(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df184
	jmp uuid_00000000000df186
uuid_00000000000df184:
	push %RBP
	mov -1072(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1264(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df17e
	jmp uuid_00000000000df180
uuid_00000000000df17e:
	push %RBP
	pushq -1208(%RBP)
	pushq -1216(%RBP)
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	pushq -1256(%RBP)
	jmp uuid_00000000000df17b
	jmp uuid_00000000000df17d
uuid_00000000000df17b:
	push %RBP
	mov -1200(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1360(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df178
	jmp uuid_00000000000df17a
uuid_00000000000df178:
	movb $1, -1272(%rbp)
uuid_00000000000df17a:
	mov -1352(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000df17d:
	mov -1288(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000df180:
	mov -1280(%RBP),%RSP
	add $-1360, %RSP
	mov -1272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df181
	jmp uuid_00000000000df183
uuid_00000000000df181:
	movb $1, -1096(%rbp)
uuid_00000000000df183:
	mov -1192(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000df186:
	mov -1112(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000df189:
	mov -1104(%RBP),%RSP
	add $-1360, %RSP
	mov -1096(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df18a
	jmp uuid_00000000000df18c
uuid_00000000000df18a:
	movb $1, -880(%rbp)
uuid_00000000000df18c:
	mov -1016(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000df18f:
	mov -896(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000df192:
	mov -888(%RBP),%RSP
	add $-1360, %RSP
	mov -880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df1f8
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1440(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df199
	jmp uuid_00000000000df19b
uuid_00000000000df199:
	push %RBP
	pushq -1384(%RBP)
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	jmp uuid_00000000000df196
	jmp uuid_00000000000df198
uuid_00000000000df196:
	push %RBP
	mov -1376(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df193
	jmp uuid_00000000000df195
uuid_00000000000df193:
	movb $1, -1448(%rbp)
uuid_00000000000df195:
	mov -1528(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000df198:
	mov -1464(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000df19b:
	mov -1456(%RBP),%RSP
	add $-1536, %RSP
	mov -1448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df1f5
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1616(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df1a9
	jmp uuid_00000000000df1ab
uuid_00000000000df1a9:
	push %RBP
	pushq -1560(%RBP)
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	jmp uuid_00000000000df1a6
	jmp uuid_00000000000df1a8
uuid_00000000000df1a6:
	push %RBP
	mov -1552(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df1a3
	jmp uuid_00000000000df1a5
uuid_00000000000df1a3:
	movb $1, -1624(%rbp)
uuid_00000000000df1a5:
	mov -1704(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000df1a8:
	mov -1640(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000df1ab:
	mov -1632(%RBP),%RSP
	add $-1712, %RSP
	mov -1624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df1f2
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1792(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df1b5
	jmp uuid_00000000000df1b7
uuid_00000000000df1b5:
	push %RBP
	mov -1784(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df1b2
	jmp uuid_00000000000df1b4
uuid_00000000000df1b2:
	push %RBP
	mov -1776(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df1af
	jmp uuid_00000000000df1b1
uuid_00000000000df1af:
	movb $1, -1800(%rbp)
uuid_00000000000df1b1:
	mov -1896(%RBP),%RSP
	add $-1968, %RSP
uuid_00000000000df1b4:
	mov -1816(%RBP),%RSP
	add $-1968, %RSP
uuid_00000000000df1b7:
	mov -1808(%RBP),%RSP
	add $-1968, %RSP
	mov -1800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df1ef
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2048(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df1be
	jmp uuid_00000000000df1c0
uuid_00000000000df1be:
	push %RBP
	mov -2040(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df1bb
	jmp uuid_00000000000df1bd
uuid_00000000000df1bb:
	push %RBP
	mov -2032(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df1b8
	jmp uuid_00000000000df1ba
uuid_00000000000df1b8:
	movb $1, -2056(%rbp)
uuid_00000000000df1ba:
	mov -2152(%RBP),%RSP
	add $-2224, %RSP
uuid_00000000000df1bd:
	mov -2072(%RBP),%RSP
	add $-2224, %RSP
uuid_00000000000df1c0:
	mov -2064(%RBP),%RSP
	add $-2224, %RSP
	mov -2056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df1ec
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2304(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df1c7
	jmp uuid_00000000000df1c9
uuid_00000000000df1c7:
	push %RBP
	mov -2296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df1c4
	jmp uuid_00000000000df1c6
uuid_00000000000df1c4:
	push %RBP
	mov -2288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df1c1
	jmp uuid_00000000000df1c3
uuid_00000000000df1c1:
	movb $1, -2312(%rbp)
uuid_00000000000df1c3:
	mov -2408(%RBP),%RSP
	add $-2480, %RSP
uuid_00000000000df1c6:
	mov -2328(%RBP),%RSP
	add $-2480, %RSP
uuid_00000000000df1c9:
	mov -2320(%RBP),%RSP
	add $-2480, %RSP
	mov -2312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df1e9
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2560(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df1d3
	jmp uuid_00000000000df1d5
uuid_00000000000df1d3:
	push %RBP
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	jmp uuid_00000000000df1d0
	jmp uuid_00000000000df1d2
uuid_00000000000df1d0:
	push %RBP
	mov -2528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df1cd
	jmp uuid_00000000000df1cf
uuid_00000000000df1cd:
	push %RBP
	mov -2520(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df1ca
	jmp uuid_00000000000df1cc
uuid_00000000000df1ca:
	movb $1, -2568(%rbp)
uuid_00000000000df1cc:
	mov -2696(%RBP),%RSP
	add $-2768, %RSP
uuid_00000000000df1cf:
	mov -2616(%RBP),%RSP
	add $-2768, %RSP
uuid_00000000000df1d2:
	mov -2584(%RBP),%RSP
	add $-2768, %RSP
uuid_00000000000df1d5:
	mov -2576(%RBP),%RSP
	add $-2768, %RSP
	mov -2568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df1e6
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2848(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df1dc
	jmp uuid_00000000000df1de
uuid_00000000000df1dc:
	push %RBP
	mov -2840(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df1d9
	jmp uuid_00000000000df1db
uuid_00000000000df1d9:
	push %RBP
	pushq -2784(%RBP)
	pushq -2792(%RBP)
	pushq -2800(%RBP)
	pushq -2808(%RBP)
	pushq -2816(%RBP)
	pushq -2824(%RBP)
	pushq -2832(%RBP)
	jmp uuid_00000000000df1d6
	jmp uuid_00000000000df1d8
uuid_00000000000df1d6:
	movb $1, -2856(%rbp)
uuid_00000000000df1d8:
	mov -2952(%RBP),%RSP
	add $-3008, %RSP
uuid_00000000000df1db:
	mov -2872(%RBP),%RSP
	add $-3008, %RSP
uuid_00000000000df1de:
	mov -2864(%RBP),%RSP
	add $-3008, %RSP
	mov -2856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df1e3
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	jmp uuid_00000000000df1e0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df1df
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df1e2
uuid_00000000000df1e0:
	movq -3088(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -3080(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -3072(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -3064(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -3056(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -3048(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -3040(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -3032(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -3024(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000df1e2:
	mov -3016(%RBP),%RSP
	add $-3088, %RSP
	jmp uuid_00000000000df1e5
uuid_00000000000df1e3:
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2960(%rbp)
	pushq -2968(%rbp)
	pushq -2976(%rbp)
	pushq -2984(%rbp)
	pushq -2992(%rbp)
	pushq -3000(%rbp)
	pushq -3008(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2880(%rbp)
	pushq -2888(%rbp)
	pushq -2896(%rbp)
	pushq -2904(%rbp)
	pushq -2912(%rbp)
	pushq -2920(%rbp)
	pushq -2928(%rbp)
	pushq -2936(%rbp)
	pushq -2944(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df1e5:
	mov -2776(%RBP),%RSP
	add $-3008, %RSP
	jmp uuid_00000000000df1e8
uuid_00000000000df1e6:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2704(%rbp)
	pushq -2712(%rbp)
	pushq -2720(%rbp)
	pushq -2728(%rbp)
	pushq -2736(%rbp)
	pushq -2744(%rbp)
	pushq -2752(%rbp)
	pushq -2760(%rbp)
	pushq -2768(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2624(%rbp)
	pushq -2632(%rbp)
	pushq -2640(%rbp)
	pushq -2648(%rbp)
	pushq -2656(%rbp)
	pushq -2664(%rbp)
	pushq -2672(%rbp)
	pushq -2680(%rbp)
	pushq -2688(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -2592(%rbp)
	pushq -2600(%rbp)
	pushq -2608(%rbp)
	pushq $5
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df1e8:
	mov -2488(%RBP),%RSP
	add $-2768, %RSP
	jmp uuid_00000000000df1eb
uuid_00000000000df1e9:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2416(%rbp)
	pushq -2424(%rbp)
	pushq -2432(%rbp)
	pushq -2440(%rbp)
	pushq -2448(%rbp)
	pushq -2456(%rbp)
	pushq -2464(%rbp)
	pushq -2472(%rbp)
	pushq -2480(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2336(%rbp)
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df1eb:
	mov -2232(%RBP),%RSP
	add $-2480, %RSP
	jmp uuid_00000000000df1ee
uuid_00000000000df1ec:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df1ee:
	mov -1976(%RBP),%RSP
	add $-2224, %RSP
	jmp uuid_00000000000df1f1
uuid_00000000000df1ef:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df1f1:
	mov -1720(%RBP),%RSP
	add $-1968, %RSP
	jmp uuid_00000000000df1f4
uuid_00000000000df1f2:
	push %RBP
#call function has-suffix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq $uuid_00000000000df19c
	mov %RBX, %RBP
	call has_SB_suffix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df1ac
	jmp uuid_00000000000df1ae
uuid_00000000000df1ac:
#call function remove-suffix : Arrow<Cons<String,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq $uuid_00000000000df19c
	mov %RBX, %RBP
	call remove_SB_suffix_CL_ArrowStringConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000df19d
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq $uuid_00000000000df19d
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1728(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1728(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000df19f
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq $uuid_00000000000df19f
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000df19f
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq $uuid_00000000000df19f
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df1ae:
	mov -1720(%RBP),%RSP
	add $-1728, %RSP
uuid_00000000000df1f4:
	mov -1544(%RBP),%RSP
	add $-1728, %RSP
	jmp uuid_00000000000df1f7
uuid_00000000000df1f5:
	push %RBP
#call function has-suffix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1536(%rbp)
	pushq $uuid_00000000000df19c
	mov %RBX, %RBP
	call has_SB_suffix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df1a0
	jmp uuid_00000000000df1a2
uuid_00000000000df1a0:
#call function remove-suffix : Arrow<Cons<String,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1536(%rbp)
	pushq $uuid_00000000000df19c
	mov %RBX, %RBP
	call remove_SB_suffix_CL_ArrowStringConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000df19d
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq $uuid_00000000000df19d
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3c6
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1552(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1552(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000df19e
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000df19f
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq $uuid_00000000000df19f
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000df19f
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq $uuid_00000000000df19f
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df1a2:
	mov -1544(%RBP),%RSP
	add $-1552, %RSP
uuid_00000000000df1f7:
	mov -1368(%RBP),%RSP
	add $-1552, %RSP
	jmp uuid_00000000000df1fa
uuid_00000000000df1f8:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3c6
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1008(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df1fa:
	mov -800(%RBP),%RSP
	add $-1360, %RSP
	jmp uuid_00000000000df1fd
uuid_00000000000df1fb:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3c6
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -440(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df1fd:
	mov -232(%RBP),%RSP
	add $-792, %RSP
	subq $72, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
preprocess_SB_apply_SB_locations_CL_ArrowASTAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df218
	jmp uuid_00000000000df21a
uuid_00000000000df218:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df205
	jmp uuid_00000000000df207
uuid_00000000000df205:
	push %RBP
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	jmp uuid_00000000000df202
	jmp uuid_00000000000df204
uuid_00000000000df202:
	push %RBP
	mov -336(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq $uuid_00000000000df1fe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df1ff
	jmp uuid_00000000000df201
uuid_00000000000df1ff:
	movb $1, -408(%rbp)
uuid_00000000000df201:
	mov -488(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000df204:
	mov -424(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000df207:
	mov -416(%RBP),%RSP
	add $-496, %RSP
	mov -408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df215
	jmp uuid_00000000000df217
uuid_00000000000df215:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -576(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df20f
	jmp uuid_00000000000df211
uuid_00000000000df20f:
	push %RBP
	jmp uuid_00000000000df20c
	jmp uuid_00000000000df20e
uuid_00000000000df20c:
	push %RBP
	mov -512(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -616(%rbp)
	pushq $uuid_00000000000df208
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df209
	jmp uuid_00000000000df20b
uuid_00000000000df209:
	movb $1, -584(%rbp)
uuid_00000000000df20b:
	mov -608(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000df20e:
	mov -600(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000df211:
	mov -592(%RBP),%RSP
	add $-616, %RSP
	mov -584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df212
	jmp uuid_00000000000df214
uuid_00000000000df212:
	movb $1, -312(%rbp)
uuid_00000000000df214:
	mov -504(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000df217:
	mov -328(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000df21a:
	mov -320(%RBP),%RSP
	add $-616, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df28a
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df235
	jmp uuid_00000000000df237
uuid_00000000000df235:
	push %RBP
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq -688(%RBP)
	jmp uuid_00000000000df232
	jmp uuid_00000000000df234
uuid_00000000000df232:
	push %RBP
	mov -632(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df22f
	jmp uuid_00000000000df231
uuid_00000000000df22f:
	movb $1, -704(%rbp)
uuid_00000000000df231:
	mov -784(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000df234:
	mov -720(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000df237:
	mov -712(%RBP),%RSP
	add $-792, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df287
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -872(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df23e
	jmp uuid_00000000000df240
uuid_00000000000df23e:
	push %RBP
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	jmp uuid_00000000000df23b
	jmp uuid_00000000000df23d
uuid_00000000000df23b:
	push %RBP
	mov -808(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df238
	jmp uuid_00000000000df23a
uuid_00000000000df238:
	movb $1, -880(%rbp)
uuid_00000000000df23a:
	mov -960(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000df23d:
	mov -896(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000df240:
	mov -888(%RBP),%RSP
	add $-968, %RSP
	mov -880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df284
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1048(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df247
	jmp uuid_00000000000df249
uuid_00000000000df247:
	push %RBP
	mov -1040(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df244
	jmp uuid_00000000000df246
uuid_00000000000df244:
	push %RBP
	mov -1032(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df241
	jmp uuid_00000000000df243
uuid_00000000000df241:
	movb $1, -1056(%rbp)
uuid_00000000000df243:
	mov -1152(%RBP),%RSP
	add $-1224, %RSP
uuid_00000000000df246:
	mov -1072(%RBP),%RSP
	add $-1224, %RSP
uuid_00000000000df249:
	mov -1064(%RBP),%RSP
	add $-1224, %RSP
	mov -1056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df281
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1304(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df250
	jmp uuid_00000000000df252
uuid_00000000000df250:
	push %RBP
	mov -1296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df24d
	jmp uuid_00000000000df24f
uuid_00000000000df24d:
	push %RBP
	mov -1288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df24a
	jmp uuid_00000000000df24c
uuid_00000000000df24a:
	movb $1, -1312(%rbp)
uuid_00000000000df24c:
	mov -1408(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000df24f:
	mov -1328(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000df252:
	mov -1320(%RBP),%RSP
	add $-1480, %RSP
	mov -1312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df27e
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1560(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df259
	jmp uuid_00000000000df25b
uuid_00000000000df259:
	push %RBP
	mov -1552(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df256
	jmp uuid_00000000000df258
uuid_00000000000df256:
	push %RBP
	mov -1544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df253
	jmp uuid_00000000000df255
uuid_00000000000df253:
	movb $1, -1568(%rbp)
uuid_00000000000df255:
	mov -1664(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000df258:
	mov -1584(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000df25b:
	mov -1576(%RBP),%RSP
	add $-1736, %RSP
	mov -1568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df27b
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1816(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df265
	jmp uuid_00000000000df267
uuid_00000000000df265:
	push %RBP
	pushq -1792(%RBP)
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	jmp uuid_00000000000df262
	jmp uuid_00000000000df264
uuid_00000000000df262:
	push %RBP
	mov -1784(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df25f
	jmp uuid_00000000000df261
uuid_00000000000df25f:
	push %RBP
	mov -1776(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df25c
	jmp uuid_00000000000df25e
uuid_00000000000df25c:
	movb $1, -1824(%rbp)
uuid_00000000000df25e:
	mov -1952(%RBP),%RSP
	add $-2024, %RSP
uuid_00000000000df261:
	mov -1872(%RBP),%RSP
	add $-2024, %RSP
uuid_00000000000df264:
	mov -1840(%RBP),%RSP
	add $-2024, %RSP
uuid_00000000000df267:
	mov -1832(%RBP),%RSP
	add $-2024, %RSP
	mov -1824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df278
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2104(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df26e
	jmp uuid_00000000000df270
uuid_00000000000df26e:
	push %RBP
	mov -2096(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df26b
	jmp uuid_00000000000df26d
uuid_00000000000df26b:
	push %RBP
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	jmp uuid_00000000000df268
	jmp uuid_00000000000df26a
uuid_00000000000df268:
	movb $1, -2112(%rbp)
uuid_00000000000df26a:
	mov -2208(%RBP),%RSP
	add $-2264, %RSP
uuid_00000000000df26d:
	mov -2128(%RBP),%RSP
	add $-2264, %RSP
uuid_00000000000df270:
	mov -2120(%RBP),%RSP
	add $-2264, %RSP
	mov -2112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df275
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	jmp uuid_00000000000df272
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df271
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df274
uuid_00000000000df272:
	movq -2344(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -2336(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -2328(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -2320(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -2312(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -2304(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -2296(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -2288(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -2280(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000df274:
	mov -2272(%RBP),%RSP
	add $-2344, %RSP
	jmp uuid_00000000000df277
uuid_00000000000df275:
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df277:
	mov -2032(%RBP),%RSP
	add $-2264, %RSP
	jmp uuid_00000000000df27a
uuid_00000000000df278:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq $5
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df27a:
	mov -1744(%RBP),%RSP
	add $-2024, %RSP
	jmp uuid_00000000000df27d
uuid_00000000000df27b:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df27d:
	mov -1488(%RBP),%RSP
	add $-1736, %RSP
	jmp uuid_00000000000df280
uuid_00000000000df27e:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df280:
	mov -1232(%RBP),%RSP
	add $-1480, %RSP
	jmp uuid_00000000000df283
uuid_00000000000df281:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df283:
	mov -976(%RBP),%RSP
	add $-1224, %RSP
	jmp uuid_00000000000df286
uuid_00000000000df284:
	pushq -968(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df286:
	mov -800(%RBP),%RSP
	add $-968, %RSP
	jmp uuid_00000000000df289
uuid_00000000000df287:
	pushq -792(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df289:
	mov -624(%RBP),%RSP
	add $-792, %RSP
	jmp uuid_00000000000df28c
uuid_00000000000df28a:
	pushq $uuid_00000000000df21b
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	push %RBP
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df225
	jmp uuid_00000000000df227
uuid_00000000000df225:
	push %RBP
	mov -688(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df222
	jmp uuid_00000000000df224
uuid_00000000000df222:
	push %RBP
	mov -680(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df21f
	jmp uuid_00000000000df221
uuid_00000000000df21f:
	push %RBP
	mov -672(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df21c
	jmp uuid_00000000000df21e
uuid_00000000000df21c:
	movb $1, -704(%rbp)
uuid_00000000000df21e:
	mov -752(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000df221:
	mov -736(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000df224:
	mov -720(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000df227:
	mov -712(%RBP),%RSP
	add $-760, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df22c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df22b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df22e
uuid_00000000000df22c:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000df228
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -760(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000df229
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -744(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000df22a
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -624(%rbp)
uuid_00000000000df22e:
	mov -664(%RBP),%RSP
	add $-760, %RSP
	pushq -624(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df28c:
	mov -232(%RBP),%RSP
	add $-760, %RSP
	subq $72, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
preprocess_SB_apply_CL_ArrowASTAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df2b4
	jmp uuid_00000000000df2b6
uuid_00000000000df2b4:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df2b1
	jmp uuid_00000000000df2b3
uuid_00000000000df2b1:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -480(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df2ab
	jmp uuid_00000000000df2ad
uuid_00000000000df2ab:
	push %RBP
	mov -472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -576(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df299
	jmp uuid_00000000000df29b
uuid_00000000000df299:
	push %RBP
	mov -568(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df290
	jmp uuid_00000000000df292
uuid_00000000000df290:
	push %RBP
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	jmp uuid_00000000000df28d
	jmp uuid_00000000000df28f
uuid_00000000000df28d:
	movb $1, -680(%rbp)
uuid_00000000000df28f:
	mov -696(%RBP),%RSP
	add $-720, %RSP
uuid_00000000000df292:
	mov -688(%RBP),%RSP
	add $-720, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df296
	jmp uuid_00000000000df298
uuid_00000000000df296:
	push %RBP
	mov -560(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df293
	jmp uuid_00000000000df295
uuid_00000000000df293:
	movb $1, -584(%rbp)
uuid_00000000000df295:
	mov -728(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000df298:
	mov -600(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000df29b:
	mov -592(%RBP),%RSP
	add $-800, %RSP
	mov -584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df2a8
	jmp uuid_00000000000df2aa
uuid_00000000000df2a8:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df2a2
	jmp uuid_00000000000df2a4
uuid_00000000000df2a2:
	push %RBP
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	jmp uuid_00000000000df29f
	jmp uuid_00000000000df2a1
uuid_00000000000df29f:
	push %RBP
	mov -816(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df29c
	jmp uuid_00000000000df29e
uuid_00000000000df29c:
	movb $1, -888(%rbp)
uuid_00000000000df29e:
	mov -968(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000df2a1:
	mov -904(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000df2a4:
	mov -896(%RBP),%RSP
	add $-976, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df2a5
	jmp uuid_00000000000df2a7
uuid_00000000000df2a5:
	movb $1, -488(%rbp)
uuid_00000000000df2a7:
	mov -808(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000df2aa:
	mov -504(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000df2ad:
	mov -496(%RBP),%RSP
	add $-976, %RSP
	mov -488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df2ae
	jmp uuid_00000000000df2b0
uuid_00000000000df2ae:
	movb $1, -312(%rbp)
uuid_00000000000df2b0:
	mov -408(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000df2b3:
	mov -328(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000df2b6:
	mov -320(%RBP),%RSP
	add $-976, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df470
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1056(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df2d8
	jmp uuid_00000000000df2da
uuid_00000000000df2d8:
	push %RBP
	mov -1048(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1152(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df2bd
	jmp uuid_00000000000df2bf
uuid_00000000000df2bd:
	push %RBP
	jmp uuid_00000000000df2ba
	jmp uuid_00000000000df2bc
uuid_00000000000df2ba:
	push %RBP
	mov -1088(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df2b7
	jmp uuid_00000000000df2b9
uuid_00000000000df2b7:
	movb $1, -1160(%rbp)
uuid_00000000000df2b9:
	mov -1184(%RBP),%RSP
	add $-1192, %RSP
uuid_00000000000df2bc:
	mov -1176(%RBP),%RSP
	add $-1192, %RSP
uuid_00000000000df2bf:
	mov -1168(%RBP),%RSP
	add $-1192, %RSP
	mov -1160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df2d5
	jmp uuid_00000000000df2d7
uuid_00000000000df2d5:
	push %RBP
	mov -1040(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1272(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df2cf
	jmp uuid_00000000000df2d1
uuid_00000000000df2cf:
	push %RBP
	mov -1264(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df2cc
	jmp uuid_00000000000df2ce
uuid_00000000000df2cc:
	push %RBP
	mov -1256(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1448(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df2c6
	jmp uuid_00000000000df2c8
uuid_00000000000df2c6:
	push %RBP
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	jmp uuid_00000000000df2c3
	jmp uuid_00000000000df2c5
uuid_00000000000df2c3:
	push %RBP
	mov -1384(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1544(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df2c0
	jmp uuid_00000000000df2c2
uuid_00000000000df2c0:
	movb $1, -1456(%rbp)
uuid_00000000000df2c2:
	mov -1536(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000df2c5:
	mov -1472(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000df2c8:
	mov -1464(%RBP),%RSP
	add $-1544, %RSP
	mov -1456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df2c9
	jmp uuid_00000000000df2cb
uuid_00000000000df2c9:
	movb $1, -1280(%rbp)
uuid_00000000000df2cb:
	mov -1376(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000df2ce:
	mov -1296(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000df2d1:
	mov -1288(%RBP),%RSP
	add $-1544, %RSP
	mov -1280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df2d2
	jmp uuid_00000000000df2d4
uuid_00000000000df2d2:
	movb $1, -1064(%rbp)
uuid_00000000000df2d4:
	mov -1200(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000df2d7:
	mov -1080(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000df2da:
	mov -1072(%RBP),%RSP
	add $-1544, %RSP
	mov -1064(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df46d
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1624(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df2fc
	jmp uuid_00000000000df2fe
uuid_00000000000df2fc:
	push %RBP
	mov -1616(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1720(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df2e1
	jmp uuid_00000000000df2e3
uuid_00000000000df2e1:
	push %RBP
	jmp uuid_00000000000df2de
	jmp uuid_00000000000df2e0
uuid_00000000000df2de:
	push %RBP
	mov -1656(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df2db
	jmp uuid_00000000000df2dd
uuid_00000000000df2db:
	movb $1, -1728(%rbp)
uuid_00000000000df2dd:
	mov -1752(%RBP),%RSP
	add $-1760, %RSP
uuid_00000000000df2e0:
	mov -1744(%RBP),%RSP
	add $-1760, %RSP
uuid_00000000000df2e3:
	mov -1736(%RBP),%RSP
	add $-1760, %RSP
	mov -1728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df2f9
	jmp uuid_00000000000df2fb
uuid_00000000000df2f9:
	push %RBP
	mov -1608(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1840(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df2f3
	jmp uuid_00000000000df2f5
uuid_00000000000df2f3:
	push %RBP
	mov -1832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df2f0
	jmp uuid_00000000000df2f2
uuid_00000000000df2f0:
	push %RBP
	mov -1824(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2016(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df2ea
	jmp uuid_00000000000df2ec
uuid_00000000000df2ea:
	push %RBP
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	jmp uuid_00000000000df2e7
	jmp uuid_00000000000df2e9
uuid_00000000000df2e7:
	push %RBP
	mov -1952(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2112(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df2e4
	jmp uuid_00000000000df2e6
uuid_00000000000df2e4:
	movb $1, -2024(%rbp)
uuid_00000000000df2e6:
	mov -2104(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000df2e9:
	mov -2040(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000df2ec:
	mov -2032(%RBP),%RSP
	add $-2112, %RSP
	mov -2024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df2ed
	jmp uuid_00000000000df2ef
uuid_00000000000df2ed:
	movb $1, -1848(%rbp)
uuid_00000000000df2ef:
	mov -1944(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000df2f2:
	mov -1864(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000df2f5:
	mov -1856(%RBP),%RSP
	add $-2112, %RSP
	mov -1848(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df2f6
	jmp uuid_00000000000df2f8
uuid_00000000000df2f6:
	movb $1, -1632(%rbp)
uuid_00000000000df2f8:
	mov -1768(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000df2fb:
	mov -1648(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000df2fe:
	mov -1640(%RBP),%RSP
	add $-2112, %RSP
	mov -1632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df46a
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2192(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df326
	jmp uuid_00000000000df328
uuid_00000000000df326:
	push %RBP
	mov -2184(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df323
	jmp uuid_00000000000df325
uuid_00000000000df323:
	push %RBP
	mov -2176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2368(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df31d
	jmp uuid_00000000000df31f
uuid_00000000000df31d:
	push %RBP
	mov -2360(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2464(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df30b
	jmp uuid_00000000000df30d
uuid_00000000000df30b:
	push %RBP
	mov -2456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2560(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df302
	jmp uuid_00000000000df304
uuid_00000000000df302:
	push %RBP
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	jmp uuid_00000000000df2ff
	jmp uuid_00000000000df301
uuid_00000000000df2ff:
	movb $1, -2568(%rbp)
uuid_00000000000df301:
	mov -2584(%RBP),%RSP
	add $-2608, %RSP
uuid_00000000000df304:
	mov -2576(%RBP),%RSP
	add $-2608, %RSP
	mov -2568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df308
	jmp uuid_00000000000df30a
uuid_00000000000df308:
	push %RBP
	mov -2448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df305
	jmp uuid_00000000000df307
uuid_00000000000df305:
	movb $1, -2472(%rbp)
uuid_00000000000df307:
	mov -2616(%RBP),%RSP
	add $-2688, %RSP
uuid_00000000000df30a:
	mov -2488(%RBP),%RSP
	add $-2688, %RSP
uuid_00000000000df30d:
	mov -2480(%RBP),%RSP
	add $-2688, %RSP
	mov -2472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df31a
	jmp uuid_00000000000df31c
uuid_00000000000df31a:
	push %RBP
	mov -2352(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2768(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df314
	jmp uuid_00000000000df316
uuid_00000000000df314:
	push %RBP
	pushq -2712(%RBP)
	pushq -2720(%RBP)
	pushq -2728(%RBP)
	pushq -2736(%RBP)
	pushq -2744(%RBP)
	pushq -2752(%RBP)
	pushq -2760(%RBP)
	jmp uuid_00000000000df311
	jmp uuid_00000000000df313
uuid_00000000000df311:
	push %RBP
	mov -2704(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2864(%rbp)
	pushq $uuid_00000000000db15f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df30e
	jmp uuid_00000000000df310
uuid_00000000000df30e:
	movb $1, -2776(%rbp)
uuid_00000000000df310:
	mov -2856(%RBP),%RSP
	add $-2864, %RSP
uuid_00000000000df313:
	mov -2792(%RBP),%RSP
	add $-2864, %RSP
uuid_00000000000df316:
	mov -2784(%RBP),%RSP
	add $-2864, %RSP
	mov -2776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df317
	jmp uuid_00000000000df319
uuid_00000000000df317:
	movb $1, -2376(%rbp)
uuid_00000000000df319:
	mov -2696(%RBP),%RSP
	add $-2864, %RSP
uuid_00000000000df31c:
	mov -2392(%RBP),%RSP
	add $-2864, %RSP
uuid_00000000000df31f:
	mov -2384(%RBP),%RSP
	add $-2864, %RSP
	mov -2376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df320
	jmp uuid_00000000000df322
uuid_00000000000df320:
	movb $1, -2200(%rbp)
uuid_00000000000df322:
	mov -2296(%RBP),%RSP
	add $-2864, %RSP
uuid_00000000000df325:
	mov -2216(%RBP),%RSP
	add $-2864, %RSP
uuid_00000000000df328:
	mov -2208(%RBP),%RSP
	add $-2864, %RSP
	mov -2200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df467
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2944(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df34a
	jmp uuid_00000000000df34c
uuid_00000000000df34a:
	push %RBP
	mov -2936(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3040(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df32f
	jmp uuid_00000000000df331
uuid_00000000000df32f:
	push %RBP
	jmp uuid_00000000000df32c
	jmp uuid_00000000000df32e
uuid_00000000000df32c:
	push %RBP
	mov -2976(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df329
	jmp uuid_00000000000df32b
uuid_00000000000df329:
	movb $1, -3048(%rbp)
uuid_00000000000df32b:
	mov -3072(%RBP),%RSP
	add $-3080, %RSP
uuid_00000000000df32e:
	mov -3064(%RBP),%RSP
	add $-3080, %RSP
uuid_00000000000df331:
	mov -3056(%RBP),%RSP
	add $-3080, %RSP
	mov -3048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df347
	jmp uuid_00000000000df349
uuid_00000000000df347:
	push %RBP
	mov -2928(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3160(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df341
	jmp uuid_00000000000df343
uuid_00000000000df341:
	push %RBP
	mov -3152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df33e
	jmp uuid_00000000000df340
uuid_00000000000df33e:
	push %RBP
	mov -3144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3336(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df338
	jmp uuid_00000000000df33a
uuid_00000000000df338:
	push %RBP
	pushq -3280(%RBP)
	pushq -3288(%RBP)
	pushq -3296(%RBP)
	pushq -3304(%RBP)
	pushq -3312(%RBP)
	pushq -3320(%RBP)
	pushq -3328(%RBP)
	jmp uuid_00000000000df335
	jmp uuid_00000000000df337
uuid_00000000000df335:
	push %RBP
	mov -3272(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3432(%rbp)
	pushq $uuid_00000000000db15f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df332
	jmp uuid_00000000000df334
uuid_00000000000df332:
	movb $1, -3344(%rbp)
uuid_00000000000df334:
	mov -3424(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000df337:
	mov -3360(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000df33a:
	mov -3352(%RBP),%RSP
	add $-3432, %RSP
	mov -3344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df33b
	jmp uuid_00000000000df33d
uuid_00000000000df33b:
	movb $1, -3168(%rbp)
uuid_00000000000df33d:
	mov -3264(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000df340:
	mov -3184(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000df343:
	mov -3176(%RBP),%RSP
	add $-3432, %RSP
	mov -3168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df344
	jmp uuid_00000000000df346
uuid_00000000000df344:
	movb $1, -2952(%rbp)
uuid_00000000000df346:
	mov -3088(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000df349:
	mov -2968(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000df34c:
	mov -2960(%RBP),%RSP
	add $-3432, %RSP
	mov -2952(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df464
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -3512(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df36e
	jmp uuid_00000000000df370
uuid_00000000000df36e:
	push %RBP
	mov -3504(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3608(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df353
	jmp uuid_00000000000df355
uuid_00000000000df353:
	push %RBP
	jmp uuid_00000000000df350
	jmp uuid_00000000000df352
uuid_00000000000df350:
	push %RBP
	mov -3544(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df34d
	jmp uuid_00000000000df34f
uuid_00000000000df34d:
	movb $1, -3616(%rbp)
uuid_00000000000df34f:
	mov -3640(%RBP),%RSP
	add $-3648, %RSP
uuid_00000000000df352:
	mov -3632(%RBP),%RSP
	add $-3648, %RSP
uuid_00000000000df355:
	mov -3624(%RBP),%RSP
	add $-3648, %RSP
	mov -3616(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df36b
	jmp uuid_00000000000df36d
uuid_00000000000df36b:
	push %RBP
	mov -3496(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3728(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df365
	jmp uuid_00000000000df367
uuid_00000000000df365:
	push %RBP
	mov -3720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df362
	jmp uuid_00000000000df364
uuid_00000000000df362:
	push %RBP
	mov -3712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3904(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df35c
	jmp uuid_00000000000df35e
uuid_00000000000df35c:
	push %RBP
	pushq -3848(%RBP)
	pushq -3856(%RBP)
	pushq -3864(%RBP)
	pushq -3872(%RBP)
	pushq -3880(%RBP)
	pushq -3888(%RBP)
	pushq -3896(%RBP)
	jmp uuid_00000000000df359
	jmp uuid_00000000000df35b
uuid_00000000000df359:
	push %RBP
	mov -3840(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4000(%rbp)
	pushq $uuid_00000000000db15f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df356
	jmp uuid_00000000000df358
uuid_00000000000df356:
	movb $1, -3912(%rbp)
uuid_00000000000df358:
	mov -3992(%RBP),%RSP
	add $-4000, %RSP
uuid_00000000000df35b:
	mov -3928(%RBP),%RSP
	add $-4000, %RSP
uuid_00000000000df35e:
	mov -3920(%RBP),%RSP
	add $-4000, %RSP
	mov -3912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df35f
	jmp uuid_00000000000df361
uuid_00000000000df35f:
	movb $1, -3736(%rbp)
uuid_00000000000df361:
	mov -3832(%RBP),%RSP
	add $-4000, %RSP
uuid_00000000000df364:
	mov -3752(%RBP),%RSP
	add $-4000, %RSP
uuid_00000000000df367:
	mov -3744(%RBP),%RSP
	add $-4000, %RSP
	mov -3736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df368
	jmp uuid_00000000000df36a
uuid_00000000000df368:
	movb $1, -3520(%rbp)
uuid_00000000000df36a:
	mov -3656(%RBP),%RSP
	add $-4000, %RSP
uuid_00000000000df36d:
	mov -3536(%RBP),%RSP
	add $-4000, %RSP
uuid_00000000000df370:
	mov -3528(%RBP),%RSP
	add $-4000, %RSP
	mov -3520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df461
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -4080(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df389
	jmp uuid_00000000000df38b
uuid_00000000000df389:
	push %RBP
	mov -4072(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4176(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df377
	jmp uuid_00000000000df379
uuid_00000000000df377:
	push %RBP
	jmp uuid_00000000000df374
	jmp uuid_00000000000df376
uuid_00000000000df374:
	push %RBP
	mov -4112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df371
	jmp uuid_00000000000df373
uuid_00000000000df371:
	movb $1, -4184(%rbp)
uuid_00000000000df373:
	mov -4208(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000df376:
	mov -4200(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000df379:
	mov -4192(%RBP),%RSP
	add $-4216, %RSP
	mov -4184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df386
	jmp uuid_00000000000df388
uuid_00000000000df386:
	push %RBP
	mov -4064(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4296(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df380
	jmp uuid_00000000000df382
uuid_00000000000df380:
	push %RBP
	pushq -4240(%RBP)
	pushq -4248(%RBP)
	pushq -4256(%RBP)
	pushq -4264(%RBP)
	pushq -4272(%RBP)
	pushq -4280(%RBP)
	pushq -4288(%RBP)
	jmp uuid_00000000000df37d
	jmp uuid_00000000000df37f
uuid_00000000000df37d:
	push %RBP
	mov -4232(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4392(%rbp)
	pushq $uuid_00000000000db4da
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df37a
	jmp uuid_00000000000df37c
uuid_00000000000df37a:
	movb $1, -4304(%rbp)
uuid_00000000000df37c:
	mov -4384(%RBP),%RSP
	add $-4392, %RSP
uuid_00000000000df37f:
	mov -4320(%RBP),%RSP
	add $-4392, %RSP
uuid_00000000000df382:
	mov -4312(%RBP),%RSP
	add $-4392, %RSP
	mov -4304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df383
	jmp uuid_00000000000df385
uuid_00000000000df383:
	movb $1, -4088(%rbp)
uuid_00000000000df385:
	mov -4224(%RBP),%RSP
	add $-4392, %RSP
uuid_00000000000df388:
	mov -4104(%RBP),%RSP
	add $-4392, %RSP
uuid_00000000000df38b:
	mov -4096(%RBP),%RSP
	add $-4392, %RSP
	mov -4088(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df45e
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -4472(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df3a4
	jmp uuid_00000000000df3a6
uuid_00000000000df3a4:
	push %RBP
	mov -4464(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4568(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df392
	jmp uuid_00000000000df394
uuid_00000000000df392:
	push %RBP
	jmp uuid_00000000000df38f
	jmp uuid_00000000000df391
uuid_00000000000df38f:
	push %RBP
	mov -4504(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df38c
	jmp uuid_00000000000df38e
uuid_00000000000df38c:
	movb $1, -4576(%rbp)
uuid_00000000000df38e:
	mov -4600(%RBP),%RSP
	add $-4608, %RSP
uuid_00000000000df391:
	mov -4592(%RBP),%RSP
	add $-4608, %RSP
uuid_00000000000df394:
	mov -4584(%RBP),%RSP
	add $-4608, %RSP
	mov -4576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df3a1
	jmp uuid_00000000000df3a3
uuid_00000000000df3a1:
	push %RBP
	mov -4456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4688(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df39b
	jmp uuid_00000000000df39d
uuid_00000000000df39b:
	push %RBP
	pushq -4632(%RBP)
	pushq -4640(%RBP)
	pushq -4648(%RBP)
	pushq -4656(%RBP)
	pushq -4664(%RBP)
	pushq -4672(%RBP)
	pushq -4680(%RBP)
	jmp uuid_00000000000df398
	jmp uuid_00000000000df39a
uuid_00000000000df398:
	push %RBP
	mov -4624(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4784(%rbp)
	pushq $uuid_00000000000db4da
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df395
	jmp uuid_00000000000df397
uuid_00000000000df395:
	movb $1, -4696(%rbp)
uuid_00000000000df397:
	mov -4776(%RBP),%RSP
	add $-4784, %RSP
uuid_00000000000df39a:
	mov -4712(%RBP),%RSP
	add $-4784, %RSP
uuid_00000000000df39d:
	mov -4704(%RBP),%RSP
	add $-4784, %RSP
	mov -4696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df39e
	jmp uuid_00000000000df3a0
uuid_00000000000df39e:
	movb $1, -4480(%rbp)
uuid_00000000000df3a0:
	mov -4616(%RBP),%RSP
	add $-4784, %RSP
uuid_00000000000df3a3:
	mov -4496(%RBP),%RSP
	add $-4784, %RSP
uuid_00000000000df3a6:
	mov -4488(%RBP),%RSP
	add $-4784, %RSP
	mov -4480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df45b
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -4864(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df3ad
	jmp uuid_00000000000df3af
uuid_00000000000df3ad:
	push %RBP
	pushq -4808(%RBP)
	pushq -4816(%RBP)
	pushq -4824(%RBP)
	pushq -4832(%RBP)
	pushq -4840(%RBP)
	pushq -4848(%RBP)
	pushq -4856(%RBP)
	jmp uuid_00000000000df3aa
	jmp uuid_00000000000df3ac
uuid_00000000000df3aa:
	push %RBP
	mov -4800(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df3a7
	jmp uuid_00000000000df3a9
uuid_00000000000df3a7:
	movb $1, -4872(%rbp)
uuid_00000000000df3a9:
	mov -4952(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000df3ac:
	mov -4888(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000df3af:
	mov -4880(%RBP),%RSP
	add $-4960, %RSP
	mov -4872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df458
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -5040(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df3cc
	jmp uuid_00000000000df3ce
uuid_00000000000df3cc:
	push %RBP
	pushq -4984(%RBP)
	pushq -4992(%RBP)
	pushq -5000(%RBP)
	pushq -5008(%RBP)
	pushq -5016(%RBP)
	pushq -5024(%RBP)
	pushq -5032(%RBP)
	jmp uuid_00000000000df3c9
	jmp uuid_00000000000df3cb
uuid_00000000000df3c9:
	push %RBP
	mov -4976(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df3c6
	jmp uuid_00000000000df3c8
uuid_00000000000df3c6:
	movb $1, -5048(%rbp)
uuid_00000000000df3c8:
	mov -5128(%RBP),%RSP
	add $-5136, %RSP
uuid_00000000000df3cb:
	mov -5064(%RBP),%RSP
	add $-5136, %RSP
uuid_00000000000df3ce:
	mov -5056(%RBP),%RSP
	add $-5136, %RSP
	mov -5048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df455
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -5216(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df3f4
	jmp uuid_00000000000df3f6
uuid_00000000000df3f4:
	push %RBP
	mov -5208(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df3f1
	jmp uuid_00000000000df3f3
uuid_00000000000df3f1:
	push %RBP
	mov -5200(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5392(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df3eb
	jmp uuid_00000000000df3ed
uuid_00000000000df3eb:
	push %RBP
	pushq -5336(%RBP)
	pushq -5344(%RBP)
	pushq -5352(%RBP)
	pushq -5360(%RBP)
	pushq -5368(%RBP)
	pushq -5376(%RBP)
	pushq -5384(%RBP)
	jmp uuid_00000000000df3e8
	jmp uuid_00000000000df3ea
uuid_00000000000df3e8:
	push %RBP
	mov -5328(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df3e5
	jmp uuid_00000000000df3e7
uuid_00000000000df3e5:
	movb $1, -5400(%rbp)
uuid_00000000000df3e7:
	mov -5480(%RBP),%RSP
	add $-5488, %RSP
uuid_00000000000df3ea:
	mov -5416(%RBP),%RSP
	add $-5488, %RSP
uuid_00000000000df3ed:
	mov -5408(%RBP),%RSP
	add $-5488, %RSP
	mov -5400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df3ee
	jmp uuid_00000000000df3f0
uuid_00000000000df3ee:
	movb $1, -5224(%rbp)
uuid_00000000000df3f0:
	mov -5320(%RBP),%RSP
	add $-5488, %RSP
uuid_00000000000df3f3:
	mov -5240(%RBP),%RSP
	add $-5488, %RSP
uuid_00000000000df3f6:
	mov -5232(%RBP),%RSP
	add $-5488, %RSP
	mov -5224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df452
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -5568(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df412
	jmp uuid_00000000000df414
uuid_00000000000df412:
	push %RBP
	mov -5560(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df40f
	jmp uuid_00000000000df411
uuid_00000000000df40f:
	push %RBP
	mov -5552(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5744(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df409
	jmp uuid_00000000000df40b
uuid_00000000000df409:
	push %RBP
	mov -5736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df406
	jmp uuid_00000000000df408
uuid_00000000000df406:
	push %RBP
	mov -5728(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5920(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df400
	jmp uuid_00000000000df402
uuid_00000000000df400:
	push %RBP
	pushq -5864(%RBP)
	pushq -5872(%RBP)
	pushq -5880(%RBP)
	pushq -5888(%RBP)
	pushq -5896(%RBP)
	pushq -5904(%RBP)
	pushq -5912(%RBP)
	jmp uuid_00000000000df3fd
	jmp uuid_00000000000df3ff
uuid_00000000000df3fd:
	push %RBP
	mov -5856(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df3fa
	jmp uuid_00000000000df3fc
uuid_00000000000df3fa:
	movb $1, -5928(%rbp)
uuid_00000000000df3fc:
	mov -6008(%RBP),%RSP
	add $-6016, %RSP
uuid_00000000000df3ff:
	mov -5944(%RBP),%RSP
	add $-6016, %RSP
uuid_00000000000df402:
	mov -5936(%RBP),%RSP
	add $-6016, %RSP
	mov -5928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df403
	jmp uuid_00000000000df405
uuid_00000000000df403:
	movb $1, -5752(%rbp)
uuid_00000000000df405:
	mov -5848(%RBP),%RSP
	add $-6016, %RSP
uuid_00000000000df408:
	mov -5768(%RBP),%RSP
	add $-6016, %RSP
uuid_00000000000df40b:
	mov -5760(%RBP),%RSP
	add $-6016, %RSP
	mov -5752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df40c
	jmp uuid_00000000000df40e
uuid_00000000000df40c:
	movb $1, -5576(%rbp)
uuid_00000000000df40e:
	mov -5672(%RBP),%RSP
	add $-6016, %RSP
uuid_00000000000df411:
	mov -5592(%RBP),%RSP
	add $-6016, %RSP
uuid_00000000000df414:
	mov -5584(%RBP),%RSP
	add $-6016, %RSP
	mov -5576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df44f
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -6096(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df41e
	jmp uuid_00000000000df420
uuid_00000000000df41e:
	push %RBP
	mov -6088(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df41b
	jmp uuid_00000000000df41d
uuid_00000000000df41b:
	push %RBP
	mov -6080(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df418
	jmp uuid_00000000000df41a
uuid_00000000000df418:
	movb $1, -6104(%rbp)
uuid_00000000000df41a:
	mov -6200(%RBP),%RSP
	add $-6272, %RSP
uuid_00000000000df41d:
	mov -6120(%RBP),%RSP
	add $-6272, %RSP
uuid_00000000000df420:
	mov -6112(%RBP),%RSP
	add $-6272, %RSP
	mov -6104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df44c
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -6352(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df427
	jmp uuid_00000000000df429
uuid_00000000000df427:
	push %RBP
	mov -6344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df424
	jmp uuid_00000000000df426
uuid_00000000000df424:
	push %RBP
	mov -6336(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df421
	jmp uuid_00000000000df423
uuid_00000000000df421:
	movb $1, -6360(%rbp)
uuid_00000000000df423:
	mov -6456(%RBP),%RSP
	add $-6528, %RSP
uuid_00000000000df426:
	mov -6376(%RBP),%RSP
	add $-6528, %RSP
uuid_00000000000df429:
	mov -6368(%RBP),%RSP
	add $-6528, %RSP
	mov -6360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df449
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -6608(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df433
	jmp uuid_00000000000df435
uuid_00000000000df433:
	push %RBP
	pushq -6584(%RBP)
	pushq -6592(%RBP)
	pushq -6600(%RBP)
	jmp uuid_00000000000df430
	jmp uuid_00000000000df432
uuid_00000000000df430:
	push %RBP
	mov -6576(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df42d
	jmp uuid_00000000000df42f
uuid_00000000000df42d:
	push %RBP
	mov -6568(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df42a
	jmp uuid_00000000000df42c
uuid_00000000000df42a:
	movb $1, -6616(%rbp)
uuid_00000000000df42c:
	mov -6744(%RBP),%RSP
	add $-6816, %RSP
uuid_00000000000df42f:
	mov -6664(%RBP),%RSP
	add $-6816, %RSP
uuid_00000000000df432:
	mov -6632(%RBP),%RSP
	add $-6816, %RSP
uuid_00000000000df435:
	mov -6624(%RBP),%RSP
	add $-6816, %RSP
	mov -6616(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df446
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -6896(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df43c
	jmp uuid_00000000000df43e
uuid_00000000000df43c:
	push %RBP
	mov -6888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df439
	jmp uuid_00000000000df43b
uuid_00000000000df439:
	push %RBP
	pushq -6832(%RBP)
	pushq -6840(%RBP)
	pushq -6848(%RBP)
	pushq -6856(%RBP)
	pushq -6864(%RBP)
	pushq -6872(%RBP)
	pushq -6880(%RBP)
	jmp uuid_00000000000df436
	jmp uuid_00000000000df438
uuid_00000000000df436:
	movb $1, -6904(%rbp)
uuid_00000000000df438:
	mov -7000(%RBP),%RSP
	add $-7056, %RSP
uuid_00000000000df43b:
	mov -6920(%RBP),%RSP
	add $-7056, %RSP
uuid_00000000000df43e:
	mov -6912(%RBP),%RSP
	add $-7056, %RSP
	mov -6904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df443
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	jmp uuid_00000000000df440
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df43f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df442
uuid_00000000000df440:
	movq -7136(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -7128(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -7120(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -7112(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -7104(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -7096(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -7088(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -7080(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -7072(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000df442:
	mov -7064(%RBP),%RSP
	add $-7136, %RSP
	jmp uuid_00000000000df445
uuid_00000000000df443:
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7008(%rbp)
	pushq -7016(%rbp)
	pushq -7024(%rbp)
	pushq -7032(%rbp)
	pushq -7040(%rbp)
	pushq -7048(%rbp)
	pushq -7056(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6928(%rbp)
	pushq -6936(%rbp)
	pushq -6944(%rbp)
	pushq -6952(%rbp)
	pushq -6960(%rbp)
	pushq -6968(%rbp)
	pushq -6976(%rbp)
	pushq -6984(%rbp)
	pushq -6992(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df445:
	mov -6824(%RBP),%RSP
	add $-7056, %RSP
	jmp uuid_00000000000df448
uuid_00000000000df446:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6752(%rbp)
	pushq -6760(%rbp)
	pushq -6768(%rbp)
	pushq -6776(%rbp)
	pushq -6784(%rbp)
	pushq -6792(%rbp)
	pushq -6800(%rbp)
	pushq -6808(%rbp)
	pushq -6816(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6672(%rbp)
	pushq -6680(%rbp)
	pushq -6688(%rbp)
	pushq -6696(%rbp)
	pushq -6704(%rbp)
	pushq -6712(%rbp)
	pushq -6720(%rbp)
	pushq -6728(%rbp)
	pushq -6736(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -6640(%rbp)
	pushq -6648(%rbp)
	pushq -6656(%rbp)
	pushq $5
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df448:
	mov -6536(%RBP),%RSP
	add $-6816, %RSP
	jmp uuid_00000000000df44b
uuid_00000000000df449:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6464(%rbp)
	pushq -6472(%rbp)
	pushq -6480(%rbp)
	pushq -6488(%rbp)
	pushq -6496(%rbp)
	pushq -6504(%rbp)
	pushq -6512(%rbp)
	pushq -6520(%rbp)
	pushq -6528(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6384(%rbp)
	pushq -6392(%rbp)
	pushq -6400(%rbp)
	pushq -6408(%rbp)
	pushq -6416(%rbp)
	pushq -6424(%rbp)
	pushq -6432(%rbp)
	pushq -6440(%rbp)
	pushq -6448(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df44b:
	mov -6280(%RBP),%RSP
	add $-6528, %RSP
	jmp uuid_00000000000df44e
uuid_00000000000df44c:
#call function + : Arrow<Cons<AST,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6208(%rbp)
	pushq -6216(%rbp)
	pushq -6224(%rbp)
	pushq -6232(%rbp)
	pushq -6240(%rbp)
	pushq -6248(%rbp)
	pushq -6256(%rbp)
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6128(%rbp)
	pushq -6136(%rbp)
	pushq -6144(%rbp)
	pushq -6152(%rbp)
	pushq -6160(%rbp)
	pushq -6168(%rbp)
	pushq -6176(%rbp)
	pushq -6184(%rbp)
	pushq -6192(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowASTConsASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df44e:
	mov -6024(%RBP),%RSP
	add $-6272, %RSP
	jmp uuid_00000000000df451
uuid_00000000000df44f:
	push %RBP
#call function is-macro-head : Arrow<Cons<String,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6016(%rbp)
	pushq $2
	mov %RBX, %RBP
	call is_SB_macro_SB_head_CL_ArrowU64ConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df415
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6016(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5952(%rbp)
	pushq -5960(%rbp)
	pushq -5968(%rbp)
	pushq -5976(%rbp)
	pushq -5984(%rbp)
	pushq -5992(%rbp)
	pushq -6000(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5776(%rbp)
	pushq -5784(%rbp)
	pushq -5792(%rbp)
	pushq -5800(%rbp)
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -5840(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	jmp uuid_00000000000df417
uuid_00000000000df415:
#call function preprocess-apply-hard : Arrow<Cons<Cons<String,U64>,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6016(%rbp)
	pushq $2
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_hard_CL_ArrowASTConsASTConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	movq -6096(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -6088(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -6080(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -6072(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -6064(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -6056(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -6048(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -6040(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -6032(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000df417:
	mov -6024(%RBP),%RSP
	add $-6096, %RSP
uuid_00000000000df451:
	mov -5496(%RBP),%RSP
	add $-6096, %RSP
	jmp uuid_00000000000df454
uuid_00000000000df452:
	push %RBP
#call function is-macro-head : Arrow<Cons<String,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5488(%rbp)
	pushq $1
	mov %RBX, %RBP
	call is_SB_macro_SB_head_CL_ArrowU64ConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df3f7
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5488(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5424(%rbp)
	pushq -5432(%rbp)
	pushq -5440(%rbp)
	pushq -5448(%rbp)
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	pushq -5264(%rbp)
	pushq -5272(%rbp)
	pushq -5280(%rbp)
	pushq -5288(%rbp)
	pushq -5296(%rbp)
	pushq -5304(%rbp)
	pushq -5312(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	jmp uuid_00000000000df3f9
uuid_00000000000df3f7:
#call function preprocess-apply-hard : Arrow<Cons<Cons<String,U64>,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5488(%rbp)
	pushq $1
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_hard_CL_ArrowASTConsASTConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	movq -5568(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -5560(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -5552(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -5544(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -5536(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -5528(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -5520(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -5512(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -5504(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000df3f9:
	mov -5496(%RBP),%RSP
	add $-5568, %RSP
uuid_00000000000df454:
	mov -5144(%RBP),%RSP
	add $-5568, %RSP
	jmp uuid_00000000000df457
uuid_00000000000df455:
	mov $parse_SB_suffixes_CL_SfxListSfxList, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000df3e2:
#call function non-zero : Arrow<SfxList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SfxList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df3e3
	jmp uuid_00000000000df3e4
uuid_00000000000df3e3:
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	push %RBP
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq $0
	push %RBP
	mov -5288(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df3d8
	jmp uuid_00000000000df3da
uuid_00000000000df3d8:
	push %RBP
	pushq -5264(%RBP)
	pushq -5272(%RBP)
	pushq -5280(%RBP)
	jmp uuid_00000000000df3d5
	jmp uuid_00000000000df3d7
uuid_00000000000df3d5:
	push %RBP
	mov -5256(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df3d2
	jmp uuid_00000000000df3d4
uuid_00000000000df3d2:
	push %RBP
	mov -5248(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df3cf
	jmp uuid_00000000000df3d1
uuid_00000000000df3cf:
	movb $1, -5296(%rbp)
uuid_00000000000df3d1:
	mov -5360(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000df3d4:
	mov -5344(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000df3d7:
	mov -5312(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000df3da:
	mov -5304(%RBP),%RSP
	add $-5408, %RSP
	mov -5296(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df3df
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df3de
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df3e1
uuid_00000000000df3df:
	push %RBP
#call function has-suffix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5136(%rbp)
	pushq -5352(%rbp)
	mov %RBX, %RBP
	call has_SB_suffix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df3db
	movq -5408(%rbp), %r15
	movq %r15, -5184(%rbp)
	movq -5400(%rbp), %r15
	movq %r15, -5176(%rbp)
	movq -5392(%rbp), %r15
	movq %r15, -5168(%rbp)
	movq -5384(%rbp), %r15
	movq %r15, -5160(%rbp)
	movq -5376(%rbp), %r15
	movq %r15, -5152(%rbp)
	movq -5368(%rbp), %r15
	movq %r15, -5144(%rbp)
	jmp uuid_00000000000df3dd
uuid_00000000000df3db:
#call function remove-suffix : Arrow<Cons<String,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5136(%rbp)
	pushq -5352(%rbp)
	mov %RBX, %RBP
	call remove_SB_suffix_CL_ArrowStringConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3c6
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5424(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5424(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq -5320(%rbp)
	pushq -5328(%rbp)
	pushq -5336(%rbp)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -5184(%RBP)
	popq -5176(%RBP)
	popq -5168(%RBP)
	popq -5160(%RBP)
	popq -5152(%RBP)
	popq -5144(%RBP)
uuid_00000000000df3dd:
	mov -5416(%RBP),%RSP
	add $-5424, %RSP
uuid_00000000000df3e1:
	mov -5240(%RBP),%RSP
	add $-5424, %RSP
	add $48, %rsp
	add $48, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000df3e2
uuid_00000000000df3e4:
uuid_00000000000df457:
	mov -4968(%RBP),%RSP
	add $-5184, %RSP
	jmp uuid_00000000000df45a
uuid_00000000000df458:
	mov $parse_SB_suffixes_CL_SfxListSfxList, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000df3c3:
#call function non-zero : Arrow<SfxList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4968(%rbp)
	pushq -4976(%rbp)
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SfxList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df3c4
	jmp uuid_00000000000df3c5
uuid_00000000000df3c4:
	pushq -4968(%rbp)
	pushq -4976(%rbp)
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	push %RBP
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq $0
	push %RBP
	mov -5112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df3b9
	jmp uuid_00000000000df3bb
uuid_00000000000df3b9:
	push %RBP
	pushq -5088(%RBP)
	pushq -5096(%RBP)
	pushq -5104(%RBP)
	jmp uuid_00000000000df3b6
	jmp uuid_00000000000df3b8
uuid_00000000000df3b6:
	push %RBP
	mov -5080(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df3b3
	jmp uuid_00000000000df3b5
uuid_00000000000df3b3:
	push %RBP
	mov -5072(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df3b0
	jmp uuid_00000000000df3b2
uuid_00000000000df3b0:
	movb $1, -5120(%rbp)
uuid_00000000000df3b2:
	mov -5184(%RBP),%RSP
	add $-5232, %RSP
uuid_00000000000df3b5:
	mov -5168(%RBP),%RSP
	add $-5232, %RSP
uuid_00000000000df3b8:
	mov -5136(%RBP),%RSP
	add $-5232, %RSP
uuid_00000000000df3bb:
	mov -5128(%RBP),%RSP
	add $-5232, %RSP
	mov -5120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df3c0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df3bf
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df3c2
uuid_00000000000df3c0:
	push %RBP
#call function has-suffix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4960(%rbp)
	pushq -5176(%rbp)
	mov %RBX, %RBP
	call has_SB_suffix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df3bc
	movq -5232(%rbp), %r15
	movq %r15, -5008(%rbp)
	movq -5224(%rbp), %r15
	movq %r15, -5000(%rbp)
	movq -5216(%rbp), %r15
	movq %r15, -4992(%rbp)
	movq -5208(%rbp), %r15
	movq %r15, -4984(%rbp)
	movq -5200(%rbp), %r15
	movq %r15, -4976(%rbp)
	movq -5192(%rbp), %r15
	movq %r15, -4968(%rbp)
	jmp uuid_00000000000df3be
uuid_00000000000df3bc:
#call function remove-suffix : Arrow<Cons<String,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4960(%rbp)
	pushq -5176(%rbp)
	mov %RBX, %RBP
	call remove_SB_suffix_CL_ArrowStringConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3c6
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4896(%rbp)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5248(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4896(%rbp)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -5248(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -5008(%RBP)
	popq -5000(%RBP)
	popq -4992(%RBP)
	popq -4984(%RBP)
	popq -4976(%RBP)
	popq -4968(%RBP)
uuid_00000000000df3be:
	mov -5240(%RBP),%RSP
	add $-5248, %RSP
uuid_00000000000df3c2:
	mov -5064(%RBP),%RSP
	add $-5248, %RSP
	add $48, %rsp
	add $48, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000df3c3
uuid_00000000000df3c5:
uuid_00000000000df45a:
	mov -4792(%RBP),%RSP
	add $-5008, %RSP
	jmp uuid_00000000000df45d
uuid_00000000000df45b:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db4da
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4608(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df45d:
	mov -4400(%RBP),%RSP
	add $-4784, %RSP
	jmp uuid_00000000000df460
uuid_00000000000df45e:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db4da
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4216(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df460:
	mov -4008(%RBP),%RSP
	add $-4392, %RSP
	jmp uuid_00000000000df463
uuid_00000000000df461:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db15f
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3936(%rbp)
	pushq -3944(%rbp)
	pushq -3952(%rbp)
	pushq -3960(%rbp)
	pushq -3968(%rbp)
	pushq -3976(%rbp)
	pushq -3984(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3760(%rbp)
	pushq -3768(%rbp)
	pushq -3776(%rbp)
	pushq -3784(%rbp)
	pushq -3792(%rbp)
	pushq -3800(%rbp)
	pushq -3808(%rbp)
	pushq -3816(%rbp)
	pushq -3824(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3648(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df463:
	mov -3440(%RBP),%RSP
	add $-4000, %RSP
	jmp uuid_00000000000df466
uuid_00000000000df464:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db15f
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3368(%rbp)
	pushq -3376(%rbp)
	pushq -3384(%rbp)
	pushq -3392(%rbp)
	pushq -3400(%rbp)
	pushq -3408(%rbp)
	pushq -3416(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3192(%rbp)
	pushq -3200(%rbp)
	pushq -3208(%rbp)
	pushq -3216(%rbp)
	pushq -3224(%rbp)
	pushq -3232(%rbp)
	pushq -3240(%rbp)
	pushq -3248(%rbp)
	pushq -3256(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3080(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df466:
	mov -2872(%RBP),%RSP
	add $-3432, %RSP
	jmp uuid_00000000000df469
uuid_00000000000df467:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db15f
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2800(%rbp)
	pushq -2808(%rbp)
	pushq -2816(%rbp)
	pushq -2824(%rbp)
	pushq -2832(%rbp)
	pushq -2840(%rbp)
	pushq -2848(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2624(%rbp)
	pushq -2632(%rbp)
	pushq -2640(%rbp)
	pushq -2648(%rbp)
	pushq -2656(%rbp)
	pushq -2664(%rbp)
	pushq -2672(%rbp)
	pushq -2680(%rbp)
	pushq -2688(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq -2592(%rbp)
	pushq -2600(%rbp)
	pushq -2608(%rbp)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df469:
	mov -2120(%RBP),%RSP
	add $-2864, %RSP
	jmp uuid_00000000000df46c
uuid_00000000000df46a:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3c6
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1760(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df46c:
	mov -1552(%RBP),%RSP
	add $-2112, %RSP
	jmp uuid_00000000000df46f
uuid_00000000000df46d:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3c6
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1192(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df46f:
	mov -984(%RBP),%RSP
	add $-1544, %RSP
	jmp uuid_00000000000df472
uuid_00000000000df470:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3c6
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df472:
	mov -232(%RBP),%RSP
	add $-976, %RSP
	subq $72, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
preprocess_SB_is_SB_suffixed_CL_ArrowU64String:
	pushq $0
	mov $parse_SB_suffixes_CL_SfxListSfxList, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000df486:
#call function non-zero : Arrow<SfxList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SfxList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df487
	jmp uuid_00000000000df488
uuid_00000000000df487:
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df47c
	jmp uuid_00000000000df47e
uuid_00000000000df47c:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	jmp uuid_00000000000df479
	jmp uuid_00000000000df47b
uuid_00000000000df479:
	push %RBP
	mov -144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df476
	jmp uuid_00000000000df478
uuid_00000000000df476:
	push %RBP
	mov -136(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df473
	jmp uuid_00000000000df475
uuid_00000000000df473:
	movb $1, -184(%rbp)
uuid_00000000000df475:
	mov -248(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000df478:
	mov -232(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000df47b:
	mov -200(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000df47e:
	mov -192(%RBP),%RSP
	add $-296, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df483
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df482
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df485
uuid_00000000000df483:
	push %RBP
#call function has-suffix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call has_SB_suffix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df47f
	jmp uuid_00000000000df481
uuid_00000000000df47f:
	movq $1, -24(%rbp)
uuid_00000000000df481:
	mov -304(%RBP),%RSP
	add $-304, %RSP
	movq -296(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -288(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -264(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -256(%rbp), %r15
	movq %r15, -32(%rbp)
uuid_00000000000df485:
	mov -128(%RBP),%RSP
	add $-304, %RSP
	add $48, %rsp
	add $48, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000df486
uuid_00000000000df488:
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
preprocess_CL_ArrowNilNil:
#call function index-typedefs : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call index_SB_typedefs_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	mov %rbp, %rsp
	sub $8, %rsp
	ret
substitute_SB_uuids_CL_ArrowASTConsASTContext:
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df4a1
	jmp uuid_00000000000df4a3
uuid_00000000000df4a1:
	push %RBP
	mov -392(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df48f
	jmp uuid_00000000000df491
uuid_00000000000df48f:
	push %RBP
	jmp uuid_00000000000df48c
	jmp uuid_00000000000df48e
uuid_00000000000df48c:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df489
	jmp uuid_00000000000df48b
uuid_00000000000df489:
	movb $1, -504(%rbp)
uuid_00000000000df48b:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000df48e:
	mov -520(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000df491:
	mov -512(%RBP),%RSP
	add $-536, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df49e
	jmp uuid_00000000000df4a0
uuid_00000000000df49e:
	push %RBP
	mov -384(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df498
	jmp uuid_00000000000df49a
uuid_00000000000df498:
	push %RBP
	jmp uuid_00000000000df495
	jmp uuid_00000000000df497
uuid_00000000000df495:
	push %RBP
	mov -552(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq $uuid_00000000000ded3d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df492
	jmp uuid_00000000000df494
uuid_00000000000df492:
	movb $1, -624(%rbp)
uuid_00000000000df494:
	mov -648(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000df497:
	mov -640(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000df49a:
	mov -632(%RBP),%RSP
	add $-656, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df49b
	jmp uuid_00000000000df49d
uuid_00000000000df49b:
	movb $1, -408(%rbp)
uuid_00000000000df49d:
	mov -544(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000df4a0:
	mov -424(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000df4a3:
	mov -416(%RBP),%RSP
	add $-656, %RSP
	mov -408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df524
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -736(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df4c3
	jmp uuid_00000000000df4c5
uuid_00000000000df4c3:
	push %RBP
	mov -728(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df4c0
	jmp uuid_00000000000df4c2
uuid_00000000000df4c0:
	push %RBP
	mov -720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df4bd
	jmp uuid_00000000000df4bf
uuid_00000000000df4bd:
	movb $1, -744(%rbp)
uuid_00000000000df4bf:
	mov -840(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000df4c2:
	mov -760(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000df4c5:
	mov -752(%RBP),%RSP
	add $-912, %RSP
	mov -744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df521
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -992(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df4cf
	jmp uuid_00000000000df4d1
uuid_00000000000df4cf:
	push %RBP
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	jmp uuid_00000000000df4cc
	jmp uuid_00000000000df4ce
uuid_00000000000df4cc:
	push %RBP
	mov -960(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df4c9
	jmp uuid_00000000000df4cb
uuid_00000000000df4c9:
	push %RBP
	mov -952(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df4c6
	jmp uuid_00000000000df4c8
uuid_00000000000df4c6:
	movb $1, -1000(%rbp)
uuid_00000000000df4c8:
	mov -1128(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000df4cb:
	mov -1048(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000df4ce:
	mov -1016(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000df4d1:
	mov -1008(%RBP),%RSP
	add $-1200, %RSP
	mov -1000(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df51e
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov -1280(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df51b
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov -1360(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df518
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1440(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df4d5
	jmp uuid_00000000000df4d7
uuid_00000000000df4d5:
	push %RBP
	jmp uuid_00000000000df4d2
	jmp uuid_00000000000df4d4
uuid_00000000000df4d2:
	movb $1, -1448(%rbp)
uuid_00000000000df4d4:
	mov -1464(%RBP),%RSP
	add $-1464, %RSP
uuid_00000000000df4d7:
	mov -1456(%RBP),%RSP
	add $-1464, %RSP
	mov -1448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df515
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1544(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df4de
	jmp uuid_00000000000df4e0
uuid_00000000000df4de:
	push %RBP
	jmp uuid_00000000000df4db
	jmp uuid_00000000000df4dd
uuid_00000000000df4db:
	push %RBP
	mov -1480(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df4d8
	jmp uuid_00000000000df4da
uuid_00000000000df4d8:
	movb $1, -1552(%rbp)
uuid_00000000000df4da:
	mov -1576(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000df4dd:
	mov -1568(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000df4e0:
	mov -1560(%RBP),%RSP
	add $-1584, %RSP
	mov -1552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df512
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1664(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df4e7
	jmp uuid_00000000000df4e9
uuid_00000000000df4e7:
	push %RBP
	jmp uuid_00000000000df4e4
	jmp uuid_00000000000df4e6
uuid_00000000000df4e4:
	push %RBP
	mov -1600(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df4e1
	jmp uuid_00000000000df4e3
uuid_00000000000df4e1:
	movb $1, -1672(%rbp)
uuid_00000000000df4e3:
	mov -1696(%RBP),%RSP
	add $-1704, %RSP
uuid_00000000000df4e6:
	mov -1688(%RBP),%RSP
	add $-1704, %RSP
uuid_00000000000df4e9:
	mov -1680(%RBP),%RSP
	add $-1704, %RSP
	mov -1672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df50f
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1784(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df4f0
	jmp uuid_00000000000df4f2
uuid_00000000000df4f0:
	push %RBP
	mov -1776(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df4ed
	jmp uuid_00000000000df4ef
uuid_00000000000df4ed:
	push %RBP
	mov -1768(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df4ea
	jmp uuid_00000000000df4ec
uuid_00000000000df4ea:
	movb $1, -1792(%rbp)
uuid_00000000000df4ec:
	mov -1888(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000df4ef:
	mov -1808(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000df4f2:
	mov -1800(%RBP),%RSP
	add $-1960, %RSP
	mov -1792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df50c
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -2040(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df4f9
	jmp uuid_00000000000df4fb
uuid_00000000000df4f9:
	push %RBP
	mov -2032(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df4f6
	jmp uuid_00000000000df4f8
uuid_00000000000df4f6:
	push %RBP
	mov -2024(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df4f3
	jmp uuid_00000000000df4f5
uuid_00000000000df4f3:
	movb $1, -2048(%rbp)
uuid_00000000000df4f5:
	mov -2144(%RBP),%RSP
	add $-2216, %RSP
uuid_00000000000df4f8:
	mov -2064(%RBP),%RSP
	add $-2216, %RSP
uuid_00000000000df4fb:
	mov -2056(%RBP),%RSP
	add $-2216, %RSP
	mov -2048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df509
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -2296(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df502
	jmp uuid_00000000000df504
uuid_00000000000df502:
	push %RBP
	mov -2288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df4ff
	jmp uuid_00000000000df501
uuid_00000000000df4ff:
	push %RBP
	pushq -2232(%RBP)
	pushq -2240(%RBP)
	pushq -2248(%RBP)
	pushq -2256(%RBP)
	pushq -2264(%RBP)
	pushq -2272(%RBP)
	pushq -2280(%RBP)
	jmp uuid_00000000000df4fc
	jmp uuid_00000000000df4fe
uuid_00000000000df4fc:
	movb $1, -2304(%rbp)
uuid_00000000000df4fe:
	mov -2400(%RBP),%RSP
	add $-2456, %RSP
uuid_00000000000df501:
	mov -2320(%RBP),%RSP
	add $-2456, %RSP
uuid_00000000000df504:
	mov -2312(%RBP),%RSP
	add $-2456, %RSP
	mov -2304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df506
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df505
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df508
uuid_00000000000df506:
	pushq -2408(%rbp)
	pushq -2416(%rbp)
	pushq -2424(%rbp)
	pushq -2432(%rbp)
	pushq -2440(%rbp)
	pushq -2448(%rbp)
	pushq -2456(%rbp)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -2328(%rbp)
	pushq -2336(%rbp)
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000df508:
	mov -2224(%RBP),%RSP
	add $-2456, %RSP
	jmp uuid_00000000000df50b
uuid_00000000000df509:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000df50b:
	mov -1968(%RBP),%RSP
	add $-2216, %RSP
	jmp uuid_00000000000df50e
uuid_00000000000df50c:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000df50e:
	mov -1712(%RBP),%RSP
	add $-1960, %RSP
	jmp uuid_00000000000df511
uuid_00000000000df50f:
uuid_00000000000df511:
	mov -1592(%RBP),%RSP
	add $-1704, %RSP
	jmp uuid_00000000000df514
uuid_00000000000df512:
uuid_00000000000df514:
	mov -1472(%RBP),%RSP
	add $-1584, %RSP
	jmp uuid_00000000000df517
uuid_00000000000df515:
uuid_00000000000df517:
	mov -1368(%RBP),%RSP
	add $-1464, %RSP
	jmp uuid_00000000000df51a
uuid_00000000000df518:
uuid_00000000000df51a:
	mov -1288(%RBP),%RSP
	add $-1360, %RSP
	jmp uuid_00000000000df51d
uuid_00000000000df51b:
uuid_00000000000df51d:
	mov -1208(%RBP),%RSP
	add $-1280, %RSP
	jmp uuid_00000000000df520
uuid_00000000000df51e:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq $5
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000df520:
	mov -920(%RBP),%RSP
	add $-1200, %RSP
	jmp uuid_00000000000df523
uuid_00000000000df521:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000df523:
	mov -664(%RBP),%RSP
	add $-912, %RSP
	jmp uuid_00000000000df526
uuid_00000000000df524:
uuid_00000000000df4ba:
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df4bb
	jmp uuid_00000000000df4bc
uuid_00000000000df4bb:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq $0
	push %RBP
	mov -856(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df4ad
	jmp uuid_00000000000df4af
uuid_00000000000df4ad:
	push %RBP
	pushq -784(%RBP)
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	jmp uuid_00000000000df4aa
	jmp uuid_00000000000df4ac
uuid_00000000000df4aa:
	push %RBP
	mov -776(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df4a7
	jmp uuid_00000000000df4a9
uuid_00000000000df4a7:
	push %RBP
	mov -768(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df4a4
	jmp uuid_00000000000df4a6
uuid_00000000000df4a4:
	movb $1, -864(%rbp)
uuid_00000000000df4a6:
	mov -976(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000df4a9:
	mov -960(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000df4ac:
	mov -880(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000df4af:
	mov -872(%RBP),%RSP
	add $-1072, %RSP
	mov -864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df4b7
	push %RBP
	jmp uuid_00000000000df4b4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df4b3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df4b6
uuid_00000000000df4b4:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000df4b6:
	mov -1080(%RBP),%RSP
	add $-1080, %RSP
	jmp uuid_00000000000df4b9
uuid_00000000000df4b7:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	pushq -968(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df4b0
	movq -1072(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000df4b2
uuid_00000000000df4b0:
	movq -952(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -944(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -936(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -928(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -920(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -912(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -904(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -896(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -888(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000df4b2:
	mov -1080(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000df4b9:
	mov -760(%RBP),%RSP
	add $-1080, %RSP
	add $96, %rsp
	add $96, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $96, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000df4ba
uuid_00000000000df4bc:
uuid_00000000000df526:
	mov -328(%RBP),%RSP
	add $-656, %RSP
	subq $72, %rsp
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $176, %rsp
	ret
try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -592(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df52d
	jmp uuid_00000000000df52f
uuid_00000000000df52d:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	mov -688(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df52a
	jmp uuid_00000000000df52c
uuid_00000000000df52a:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	mov -768(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df527
	jmp uuid_00000000000df529
uuid_00000000000df527:
	movb $1, -600(%rbp)
uuid_00000000000df529:
	mov -696(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000df52c:
	mov -616(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000df52f:
	mov -608(%RBP),%RSP
	add $-768, %RSP
	mov -600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df7db
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -928(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df57e
	jmp uuid_00000000000df580
uuid_00000000000df57e:
	push %RBP
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq $0
	push %RBP
	mov -1024(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df548
	jmp uuid_00000000000df54a
uuid_00000000000df548:
	push %RBP
	jmp uuid_00000000000df545
	jmp uuid_00000000000df547
uuid_00000000000df545:
	push %RBP
	mov -1008(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1128(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df53f
	jmp uuid_00000000000df541
uuid_00000000000df53f:
	push %RBP
	jmp uuid_00000000000df53c
	jmp uuid_00000000000df53e
uuid_00000000000df53c:
	push %RBP
	mov -1112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1232(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df536
	jmp uuid_00000000000df538
uuid_00000000000df536:
	push %RBP
	jmp uuid_00000000000df533
	jmp uuid_00000000000df535
uuid_00000000000df533:
	push %RBP
	mov -1168(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df530
	jmp uuid_00000000000df532
uuid_00000000000df530:
	movb $1, -1240(%rbp)
uuid_00000000000df532:
	mov -1264(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000df535:
	mov -1256(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000df538:
	mov -1248(%RBP),%RSP
	add $-1272, %RSP
	mov -1240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df539
	jmp uuid_00000000000df53b
uuid_00000000000df539:
	movb $1, -1136(%rbp)
uuid_00000000000df53b:
	mov -1160(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000df53e:
	mov -1152(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000df541:
	mov -1144(%RBP),%RSP
	add $-1272, %RSP
	mov -1136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df542
	jmp uuid_00000000000df544
uuid_00000000000df542:
	movb $1, -1032(%rbp)
uuid_00000000000df544:
	mov -1056(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000df547:
	mov -1048(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000df54a:
	mov -1040(%RBP),%RSP
	add $-1272, %RSP
	mov -1032(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df57b
	jmp uuid_00000000000df57d
uuid_00000000000df57b:
	push %RBP
	pushq -784(%RBP)
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq $0
	push %RBP
	mov -1352(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df575
	jmp uuid_00000000000df577
uuid_00000000000df575:
	push %RBP
	mov -1344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1448(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df551
	jmp uuid_00000000000df553
uuid_00000000000df551:
	push %RBP
	jmp uuid_00000000000df54e
	jmp uuid_00000000000df550
uuid_00000000000df54e:
	push %RBP
	jmp uuid_00000000000df54b
	jmp uuid_00000000000df54d
uuid_00000000000df54b:
	movb $1, -1456(%rbp)
uuid_00000000000df54d:
	mov -1480(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000df550:
	mov -1472(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000df553:
	mov -1464(%RBP),%RSP
	add $-1480, %RSP
	mov -1456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df572
	jmp uuid_00000000000df574
uuid_00000000000df572:
	push %RBP
	mov -1336(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1560(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df56c
	jmp uuid_00000000000df56e
uuid_00000000000df56c:
	push %RBP
	mov -1552(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1656(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df55a
	jmp uuid_00000000000df55c
uuid_00000000000df55a:
	push %RBP
	jmp uuid_00000000000df557
	jmp uuid_00000000000df559
uuid_00000000000df557:
	push %RBP
	jmp uuid_00000000000df554
	jmp uuid_00000000000df556
uuid_00000000000df554:
	movb $1, -1664(%rbp)
uuid_00000000000df556:
	mov -1688(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000df559:
	mov -1680(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000df55c:
	mov -1672(%RBP),%RSP
	add $-1688, %RSP
	mov -1664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df569
	jmp uuid_00000000000df56b
uuid_00000000000df569:
	push %RBP
	mov -1544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1768(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df563
	jmp uuid_00000000000df565
uuid_00000000000df563:
	push %RBP
	jmp uuid_00000000000df560
	jmp uuid_00000000000df562
uuid_00000000000df560:
	push %RBP
	jmp uuid_00000000000df55d
	jmp uuid_00000000000df55f
uuid_00000000000df55d:
	movb $1, -1776(%rbp)
uuid_00000000000df55f:
	mov -1800(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000df562:
	mov -1792(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000df565:
	mov -1784(%RBP),%RSP
	add $-1800, %RSP
	mov -1776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df566
	jmp uuid_00000000000df568
uuid_00000000000df566:
	movb $1, -1568(%rbp)
uuid_00000000000df568:
	mov -1696(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000df56b:
	mov -1584(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000df56e:
	mov -1576(%RBP),%RSP
	add $-1800, %RSP
	mov -1568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df56f
	jmp uuid_00000000000df571
uuid_00000000000df56f:
	movb $1, -1360(%rbp)
uuid_00000000000df571:
	mov -1488(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000df574:
	mov -1376(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000df577:
	mov -1368(%RBP),%RSP
	add $-1800, %RSP
	mov -1360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df578
	jmp uuid_00000000000df57a
uuid_00000000000df578:
	movb $1, -936(%rbp)
uuid_00000000000df57a:
	mov -1280(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000df57d:
	mov -952(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000df580:
	mov -944(%RBP),%RSP
	add $-1800, %RSP
	mov -936(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df7d8
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -1960(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df5cd
	jmp uuid_00000000000df5cf
uuid_00000000000df5cd:
	push %RBP
	pushq -1888(%RBP)
	pushq -1896(%RBP)
	pushq -1904(%RBP)
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq $0
	push %RBP
	mov -2056(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df5a8
	jmp uuid_00000000000df5aa
uuid_00000000000df5a8:
	push %RBP
	mov -2048(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2152(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df596
	jmp uuid_00000000000df598
uuid_00000000000df596:
	push %RBP
	mov -2144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2248(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df584
	jmp uuid_00000000000df586
uuid_00000000000df584:
	push %RBP
	jmp uuid_00000000000df581
	jmp uuid_00000000000df583
uuid_00000000000df581:
	movb $1, -2256(%rbp)
uuid_00000000000df583:
	mov -2272(%RBP),%RSP
	add $-2272, %RSP
uuid_00000000000df586:
	mov -2264(%RBP),%RSP
	add $-2272, %RSP
	mov -2256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df593
	jmp uuid_00000000000df595
uuid_00000000000df593:
	push %RBP
	mov -2136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2352(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df58d
	jmp uuid_00000000000df58f
uuid_00000000000df58d:
	push %RBP
	jmp uuid_00000000000df58a
	jmp uuid_00000000000df58c
uuid_00000000000df58a:
	push %RBP
	jmp uuid_00000000000df587
	jmp uuid_00000000000df589
uuid_00000000000df587:
	movb $1, -2360(%rbp)
uuid_00000000000df589:
	mov -2384(%RBP),%RSP
	add $-2384, %RSP
uuid_00000000000df58c:
	mov -2376(%RBP),%RSP
	add $-2384, %RSP
uuid_00000000000df58f:
	mov -2368(%RBP),%RSP
	add $-2384, %RSP
	mov -2360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df590
	jmp uuid_00000000000df592
uuid_00000000000df590:
	movb $1, -2160(%rbp)
uuid_00000000000df592:
	mov -2280(%RBP),%RSP
	add $-2384, %RSP
uuid_00000000000df595:
	mov -2176(%RBP),%RSP
	add $-2384, %RSP
uuid_00000000000df598:
	mov -2168(%RBP),%RSP
	add $-2384, %RSP
	mov -2160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df5a5
	jmp uuid_00000000000df5a7
uuid_00000000000df5a5:
	push %RBP
	mov -2040(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2464(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df59f
	jmp uuid_00000000000df5a1
uuid_00000000000df59f:
	push %RBP
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	jmp uuid_00000000000df59c
	jmp uuid_00000000000df59e
uuid_00000000000df59c:
	push %RBP
	mov -2400(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2560(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df599
	jmp uuid_00000000000df59b
uuid_00000000000df599:
	movb $1, -2472(%rbp)
uuid_00000000000df59b:
	mov -2552(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000df59e:
	mov -2488(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000df5a1:
	mov -2480(%RBP),%RSP
	add $-2560, %RSP
	mov -2472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df5a2
	jmp uuid_00000000000df5a4
uuid_00000000000df5a2:
	movb $1, -2064(%rbp)
uuid_00000000000df5a4:
	mov -2392(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000df5a7:
	mov -2080(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000df5aa:
	mov -2072(%RBP),%RSP
	add $-2560, %RSP
	mov -2064(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df5ca
	jmp uuid_00000000000df5cc
uuid_00000000000df5ca:
	push %RBP
	pushq -1816(%RBP)
	pushq -1824(%RBP)
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	pushq -1856(%RBP)
	pushq -1864(%RBP)
	pushq -1872(%RBP)
	pushq -1880(%RBP)
	pushq $0
	push %RBP
	mov -2640(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df5c4
	jmp uuid_00000000000df5c6
uuid_00000000000df5c4:
	push %RBP
	mov -2632(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2736(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df5b1
	jmp uuid_00000000000df5b3
uuid_00000000000df5b1:
	push %RBP
	jmp uuid_00000000000df5ae
	jmp uuid_00000000000df5b0
uuid_00000000000df5ae:
	push %RBP
	mov -2672(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df5ab
	jmp uuid_00000000000df5ad
uuid_00000000000df5ab:
	movb $1, -2744(%rbp)
uuid_00000000000df5ad:
	mov -2768(%RBP),%RSP
	add $-2776, %RSP
uuid_00000000000df5b0:
	mov -2760(%RBP),%RSP
	add $-2776, %RSP
uuid_00000000000df5b3:
	mov -2752(%RBP),%RSP
	add $-2776, %RSP
	mov -2744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df5c1
	jmp uuid_00000000000df5c3
uuid_00000000000df5c1:
	push %RBP
	mov -2624(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2856(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df5bb
	jmp uuid_00000000000df5bd
uuid_00000000000df5bb:
	push %RBP
	jmp uuid_00000000000df5b8
	jmp uuid_00000000000df5ba
uuid_00000000000df5b8:
	push %RBP
	mov -2792(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2896(%rbp)
	pushq $uuid_00000000000df5b4
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df5b5
	jmp uuid_00000000000df5b7
uuid_00000000000df5b5:
	movb $1, -2864(%rbp)
uuid_00000000000df5b7:
	mov -2888(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000df5ba:
	mov -2880(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000df5bd:
	mov -2872(%RBP),%RSP
	add $-2896, %RSP
	mov -2864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df5be
	jmp uuid_00000000000df5c0
uuid_00000000000df5be:
	movb $1, -2648(%rbp)
uuid_00000000000df5c0:
	mov -2784(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000df5c3:
	mov -2664(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000df5c6:
	mov -2656(%RBP),%RSP
	add $-2896, %RSP
	mov -2648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df5c7
	jmp uuid_00000000000df5c9
uuid_00000000000df5c7:
	movb $1, -1968(%rbp)
uuid_00000000000df5c9:
	mov -2568(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000df5cc:
	mov -1984(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000df5cf:
	mov -1976(%RBP),%RSP
	add $-2896, %RSP
	mov -1968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df7d5
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -3056(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df603
	jmp uuid_00000000000df605
uuid_00000000000df603:
	push %RBP
	pushq -2984(%RBP)
	pushq -2992(%RBP)
	pushq -3000(%RBP)
	pushq -3008(%RBP)
	pushq -3016(%RBP)
	pushq -3024(%RBP)
	pushq -3032(%RBP)
	pushq -3040(%RBP)
	pushq -3048(%RBP)
	pushq $0
	push %RBP
	mov -3152(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df5df
	jmp uuid_00000000000df5e1
uuid_00000000000df5df:
	push %RBP
	jmp uuid_00000000000df5dc
	jmp uuid_00000000000df5de
uuid_00000000000df5dc:
	push %RBP
	mov -3136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3256(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df5d6
	jmp uuid_00000000000df5d8
uuid_00000000000df5d6:
	push %RBP
	jmp uuid_00000000000df5d3
	jmp uuid_00000000000df5d5
uuid_00000000000df5d3:
	push %RBP
	mov -3192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df5d0
	jmp uuid_00000000000df5d2
uuid_00000000000df5d0:
	movb $1, -3264(%rbp)
uuid_00000000000df5d2:
	mov -3288(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000df5d5:
	mov -3280(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000df5d8:
	mov -3272(%RBP),%RSP
	add $-3296, %RSP
	mov -3264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df5d9
	jmp uuid_00000000000df5db
uuid_00000000000df5d9:
	movb $1, -3160(%rbp)
uuid_00000000000df5db:
	mov -3184(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000df5de:
	mov -3176(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000df5e1:
	mov -3168(%RBP),%RSP
	add $-3296, %RSP
	mov -3160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df600
	jmp uuid_00000000000df602
uuid_00000000000df600:
	push %RBP
	pushq -2912(%RBP)
	pushq -2920(%RBP)
	pushq -2928(%RBP)
	pushq -2936(%RBP)
	pushq -2944(%RBP)
	pushq -2952(%RBP)
	pushq -2960(%RBP)
	pushq -2968(%RBP)
	pushq -2976(%RBP)
	pushq $0
	push %RBP
	mov -3376(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df5fa
	jmp uuid_00000000000df5fc
uuid_00000000000df5fa:
	push %RBP
	mov -3368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3472(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df5e8
	jmp uuid_00000000000df5ea
uuid_00000000000df5e8:
	push %RBP
	jmp uuid_00000000000df5e5
	jmp uuid_00000000000df5e7
uuid_00000000000df5e5:
	push %RBP
	jmp uuid_00000000000df5e2
	jmp uuid_00000000000df5e4
uuid_00000000000df5e2:
	movb $1, -3480(%rbp)
uuid_00000000000df5e4:
	mov -3504(%RBP),%RSP
	add $-3504, %RSP
uuid_00000000000df5e7:
	mov -3496(%RBP),%RSP
	add $-3504, %RSP
uuid_00000000000df5ea:
	mov -3488(%RBP),%RSP
	add $-3504, %RSP
	mov -3480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df5f7
	jmp uuid_00000000000df5f9
uuid_00000000000df5f7:
	push %RBP
	mov -3360(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3584(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df5f1
	jmp uuid_00000000000df5f3
uuid_00000000000df5f1:
	push %RBP
	jmp uuid_00000000000df5ee
	jmp uuid_00000000000df5f0
uuid_00000000000df5ee:
	push %RBP
	jmp uuid_00000000000df5eb
	jmp uuid_00000000000df5ed
uuid_00000000000df5eb:
	movb $1, -3592(%rbp)
uuid_00000000000df5ed:
	mov -3616(%RBP),%RSP
	add $-3616, %RSP
uuid_00000000000df5f0:
	mov -3608(%RBP),%RSP
	add $-3616, %RSP
uuid_00000000000df5f3:
	mov -3600(%RBP),%RSP
	add $-3616, %RSP
	mov -3592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df5f4
	jmp uuid_00000000000df5f6
uuid_00000000000df5f4:
	movb $1, -3384(%rbp)
uuid_00000000000df5f6:
	mov -3512(%RBP),%RSP
	add $-3616, %RSP
uuid_00000000000df5f9:
	mov -3400(%RBP),%RSP
	add $-3616, %RSP
uuid_00000000000df5fc:
	mov -3392(%RBP),%RSP
	add $-3616, %RSP
	mov -3384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df5fd
	jmp uuid_00000000000df5ff
uuid_00000000000df5fd:
	movb $1, -3064(%rbp)
uuid_00000000000df5ff:
	mov -3304(%RBP),%RSP
	add $-3616, %RSP
uuid_00000000000df602:
	mov -3080(%RBP),%RSP
	add $-3616, %RSP
uuid_00000000000df605:
	mov -3072(%RBP),%RSP
	add $-3616, %RSP
	mov -3064(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df7d2
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -3776(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df646
	jmp uuid_00000000000df648
uuid_00000000000df646:
	push %RBP
	pushq -3704(%RBP)
	pushq -3712(%RBP)
	pushq -3720(%RBP)
	pushq -3728(%RBP)
	pushq -3736(%RBP)
	pushq -3744(%RBP)
	pushq -3752(%RBP)
	pushq -3760(%RBP)
	pushq -3768(%RBP)
	pushq $0
	push %RBP
	mov -3872(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df634
	jmp uuid_00000000000df636
uuid_00000000000df634:
	push %RBP
	mov -3864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df631
	jmp uuid_00000000000df633
uuid_00000000000df631:
	push %RBP
	mov -3856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df62e
	jmp uuid_00000000000df630
uuid_00000000000df62e:
	movb $1, -3880(%rbp)
uuid_00000000000df630:
	mov -3976(%RBP),%RSP
	add $-4048, %RSP
uuid_00000000000df633:
	mov -3896(%RBP),%RSP
	add $-4048, %RSP
uuid_00000000000df636:
	mov -3888(%RBP),%RSP
	add $-4048, %RSP
	mov -3880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df643
	jmp uuid_00000000000df645
uuid_00000000000df643:
	push %RBP
	pushq -3632(%RBP)
	pushq -3640(%RBP)
	pushq -3648(%RBP)
	pushq -3656(%RBP)
	pushq -3664(%RBP)
	pushq -3672(%RBP)
	pushq -3680(%RBP)
	pushq -3688(%RBP)
	pushq -3696(%RBP)
	pushq $0
	push %RBP
	mov -4128(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df63d
	jmp uuid_00000000000df63f
uuid_00000000000df63d:
	push %RBP
	mov -4120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df63a
	jmp uuid_00000000000df63c
uuid_00000000000df63a:
	push %RBP
	mov -4112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df637
	jmp uuid_00000000000df639
uuid_00000000000df637:
	movb $1, -4136(%rbp)
uuid_00000000000df639:
	mov -4232(%RBP),%RSP
	add $-4304, %RSP
uuid_00000000000df63c:
	mov -4152(%RBP),%RSP
	add $-4304, %RSP
uuid_00000000000df63f:
	mov -4144(%RBP),%RSP
	add $-4304, %RSP
	mov -4136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df640
	jmp uuid_00000000000df642
uuid_00000000000df640:
	movb $1, -3784(%rbp)
uuid_00000000000df642:
	mov -4056(%RBP),%RSP
	add $-4304, %RSP
uuid_00000000000df645:
	mov -3800(%RBP),%RSP
	add $-4304, %RSP
uuid_00000000000df648:
	mov -3792(%RBP),%RSP
	add $-4304, %RSP
	mov -3784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df7cf
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -4464(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df66d
	jmp uuid_00000000000df66f
uuid_00000000000df66d:
	push %RBP
	pushq -4392(%RBP)
	pushq -4400(%RBP)
	pushq -4408(%RBP)
	pushq -4416(%RBP)
	pushq -4424(%RBP)
	pushq -4432(%RBP)
	pushq -4440(%RBP)
	pushq -4448(%RBP)
	pushq -4456(%RBP)
	pushq $0
	push %RBP
	mov -4560(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df658
	jmp uuid_00000000000df65a
uuid_00000000000df658:
	push %RBP
	pushq -4536(%RBP)
	pushq -4544(%RBP)
	pushq -4552(%RBP)
	jmp uuid_00000000000df655
	jmp uuid_00000000000df657
uuid_00000000000df655:
	push %RBP
	mov -4528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df652
	jmp uuid_00000000000df654
uuid_00000000000df652:
	push %RBP
	mov -4520(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df64f
	jmp uuid_00000000000df651
uuid_00000000000df64f:
	movb $1, -4568(%rbp)
uuid_00000000000df651:
	mov -4696(%RBP),%RSP
	add $-4768, %RSP
uuid_00000000000df654:
	mov -4616(%RBP),%RSP
	add $-4768, %RSP
uuid_00000000000df657:
	mov -4584(%RBP),%RSP
	add $-4768, %RSP
uuid_00000000000df65a:
	mov -4576(%RBP),%RSP
	add $-4768, %RSP
	mov -4568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df66a
	jmp uuid_00000000000df66c
uuid_00000000000df66a:
	push %RBP
	pushq -4320(%RBP)
	pushq -4328(%RBP)
	pushq -4336(%RBP)
	pushq -4344(%RBP)
	pushq -4352(%RBP)
	pushq -4360(%RBP)
	pushq -4368(%RBP)
	pushq -4376(%RBP)
	pushq -4384(%RBP)
	pushq $0
	push %RBP
	mov -4848(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df664
	jmp uuid_00000000000df666
uuid_00000000000df664:
	push %RBP
	pushq -4824(%RBP)
	pushq -4832(%RBP)
	pushq -4840(%RBP)
	jmp uuid_00000000000df661
	jmp uuid_00000000000df663
uuid_00000000000df661:
	push %RBP
	mov -4816(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df65e
	jmp uuid_00000000000df660
uuid_00000000000df65e:
	push %RBP
	mov -4808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df65b
	jmp uuid_00000000000df65d
uuid_00000000000df65b:
	movb $1, -4856(%rbp)
uuid_00000000000df65d:
	mov -4984(%RBP),%RSP
	add $-5056, %RSP
uuid_00000000000df660:
	mov -4904(%RBP),%RSP
	add $-5056, %RSP
uuid_00000000000df663:
	mov -4872(%RBP),%RSP
	add $-5056, %RSP
uuid_00000000000df666:
	mov -4864(%RBP),%RSP
	add $-5056, %RSP
	mov -4856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df667
	jmp uuid_00000000000df669
uuid_00000000000df667:
	movb $1, -4472(%rbp)
uuid_00000000000df669:
	mov -4776(%RBP),%RSP
	add $-5056, %RSP
uuid_00000000000df66c:
	mov -4488(%RBP),%RSP
	add $-5056, %RSP
uuid_00000000000df66f:
	mov -4480(%RBP),%RSP
	add $-5056, %RSP
	mov -4472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df7cc
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -5216(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df68f
	jmp uuid_00000000000df691
uuid_00000000000df68f:
	push %RBP
	pushq -5144(%RBP)
	pushq -5152(%RBP)
	pushq -5160(%RBP)
	pushq -5168(%RBP)
	pushq -5176(%RBP)
	pushq -5184(%RBP)
	pushq -5192(%RBP)
	pushq -5200(%RBP)
	pushq -5208(%RBP)
	pushq $0
	push %RBP
	mov -5312(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df67c
	jmp uuid_00000000000df67e
uuid_00000000000df67c:
	push %RBP
	jmp uuid_00000000000df679
	jmp uuid_00000000000df67b
uuid_00000000000df679:
	push %RBP
	mov -5248(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5352(%rbp)
	pushq $uuid_00000000000df19f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df676
	jmp uuid_00000000000df678
uuid_00000000000df676:
	movb $1, -5320(%rbp)
uuid_00000000000df678:
	mov -5344(%RBP),%RSP
	add $-5352, %RSP
uuid_00000000000df67b:
	mov -5336(%RBP),%RSP
	add $-5352, %RSP
uuid_00000000000df67e:
	mov -5328(%RBP),%RSP
	add $-5352, %RSP
	mov -5320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df68c
	jmp uuid_00000000000df68e
uuid_00000000000df68c:
	push %RBP
	pushq -5072(%RBP)
	pushq -5080(%RBP)
	pushq -5088(%RBP)
	pushq -5096(%RBP)
	pushq -5104(%RBP)
	pushq -5112(%RBP)
	pushq -5120(%RBP)
	pushq -5128(%RBP)
	pushq -5136(%RBP)
	pushq $0
	push %RBP
	mov -5432(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df686
	jmp uuid_00000000000df688
uuid_00000000000df686:
	push %RBP
	jmp uuid_00000000000df683
	jmp uuid_00000000000df685
uuid_00000000000df683:
	push %RBP
	mov -5368(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5472(%rbp)
	pushq $uuid_00000000000df67f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df680
	jmp uuid_00000000000df682
uuid_00000000000df680:
	movb $1, -5440(%rbp)
uuid_00000000000df682:
	mov -5464(%RBP),%RSP
	add $-5472, %RSP
uuid_00000000000df685:
	mov -5456(%RBP),%RSP
	add $-5472, %RSP
uuid_00000000000df688:
	mov -5448(%RBP),%RSP
	add $-5472, %RSP
	mov -5440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df689
	jmp uuid_00000000000df68b
uuid_00000000000df689:
	movb $1, -5224(%rbp)
uuid_00000000000df68b:
	mov -5360(%RBP),%RSP
	add $-5472, %RSP
uuid_00000000000df68e:
	mov -5240(%RBP),%RSP
	add $-5472, %RSP
uuid_00000000000df691:
	mov -5232(%RBP),%RSP
	add $-5472, %RSP
	mov -5224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df7c9
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -5632(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df6aa
	jmp uuid_00000000000df6ac
uuid_00000000000df6aa:
	push %RBP
	pushq -5560(%RBP)
	pushq -5568(%RBP)
	pushq -5576(%RBP)
	pushq -5584(%RBP)
	pushq -5592(%RBP)
	pushq -5600(%RBP)
	pushq -5608(%RBP)
	pushq -5616(%RBP)
	pushq -5624(%RBP)
	pushq $0
	push %RBP
	mov -5728(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df698
	jmp uuid_00000000000df69a
uuid_00000000000df698:
	push %RBP
	jmp uuid_00000000000df695
	jmp uuid_00000000000df697
uuid_00000000000df695:
	push %RBP
	mov -5664(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df692
	jmp uuid_00000000000df694
uuid_00000000000df692:
	movb $1, -5736(%rbp)
uuid_00000000000df694:
	mov -5760(%RBP),%RSP
	add $-5768, %RSP
uuid_00000000000df697:
	mov -5752(%RBP),%RSP
	add $-5768, %RSP
uuid_00000000000df69a:
	mov -5744(%RBP),%RSP
	add $-5768, %RSP
	mov -5736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df6a7
	jmp uuid_00000000000df6a9
uuid_00000000000df6a7:
	push %RBP
	pushq -5488(%RBP)
	pushq -5496(%RBP)
	pushq -5504(%RBP)
	pushq -5512(%RBP)
	pushq -5520(%RBP)
	pushq -5528(%RBP)
	pushq -5536(%RBP)
	pushq -5544(%RBP)
	pushq -5552(%RBP)
	pushq $0
	push %RBP
	mov -5848(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df6a1
	jmp uuid_00000000000df6a3
uuid_00000000000df6a1:
	push %RBP
	jmp uuid_00000000000df69e
	jmp uuid_00000000000df6a0
uuid_00000000000df69e:
	push %RBP
	mov -5784(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df69b
	jmp uuid_00000000000df69d
uuid_00000000000df69b:
	movb $1, -5856(%rbp)
uuid_00000000000df69d:
	mov -5880(%RBP),%RSP
	add $-5888, %RSP
uuid_00000000000df6a0:
	mov -5872(%RBP),%RSP
	add $-5888, %RSP
uuid_00000000000df6a3:
	mov -5864(%RBP),%RSP
	add $-5888, %RSP
	mov -5856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df6a4
	jmp uuid_00000000000df6a6
uuid_00000000000df6a4:
	movb $1, -5640(%rbp)
uuid_00000000000df6a6:
	mov -5776(%RBP),%RSP
	add $-5888, %RSP
uuid_00000000000df6a9:
	mov -5656(%RBP),%RSP
	add $-5888, %RSP
uuid_00000000000df6ac:
	mov -5648(%RBP),%RSP
	add $-5888, %RSP
	mov -5640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df7c6
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -6048(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df6c8
	jmp uuid_00000000000df6ca
uuid_00000000000df6c8:
	push %RBP
	pushq -5976(%RBP)
	pushq -5984(%RBP)
	pushq -5992(%RBP)
	pushq -6000(%RBP)
	pushq -6008(%RBP)
	pushq -6016(%RBP)
	pushq -6024(%RBP)
	pushq -6032(%RBP)
	pushq -6040(%RBP)
	pushq $0
	push %RBP
	mov -6144(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df6b6
	jmp uuid_00000000000df6b8
uuid_00000000000df6b6:
	push %RBP
	jmp uuid_00000000000df6b3
	jmp uuid_00000000000df6b5
uuid_00000000000df6b3:
	push %RBP
	mov -6080(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df6b0
	jmp uuid_00000000000df6b2
uuid_00000000000df6b0:
	movb $1, -6152(%rbp)
uuid_00000000000df6b2:
	mov -6176(%RBP),%RSP
	add $-6184, %RSP
uuid_00000000000df6b5:
	mov -6168(%RBP),%RSP
	add $-6184, %RSP
uuid_00000000000df6b8:
	mov -6160(%RBP),%RSP
	add $-6184, %RSP
	mov -6152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df6c5
	jmp uuid_00000000000df6c7
uuid_00000000000df6c5:
	push %RBP
	pushq -5904(%RBP)
	pushq -5912(%RBP)
	pushq -5920(%RBP)
	pushq -5928(%RBP)
	pushq -5936(%RBP)
	pushq -5944(%RBP)
	pushq -5952(%RBP)
	pushq -5960(%RBP)
	pushq -5968(%RBP)
	pushq $0
	push %RBP
	mov -6264(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df6bf
	jmp uuid_00000000000df6c1
uuid_00000000000df6bf:
	push %RBP
	jmp uuid_00000000000df6bc
	jmp uuid_00000000000df6be
uuid_00000000000df6bc:
	push %RBP
	mov -6200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df6b9
	jmp uuid_00000000000df6bb
uuid_00000000000df6b9:
	movb $1, -6272(%rbp)
uuid_00000000000df6bb:
	mov -6296(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000df6be:
	mov -6288(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000df6c1:
	mov -6280(%RBP),%RSP
	add $-6304, %RSP
	mov -6272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df6c2
	jmp uuid_00000000000df6c4
uuid_00000000000df6c2:
	movb $1, -6056(%rbp)
uuid_00000000000df6c4:
	mov -6192(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000df6c7:
	mov -6072(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000df6ca:
	mov -6064(%RBP),%RSP
	add $-6304, %RSP
	mov -6056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df7c3
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -6464(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df6f8
	jmp uuid_00000000000df6fa
uuid_00000000000df6f8:
	push %RBP
	pushq -6392(%RBP)
	pushq -6400(%RBP)
	pushq -6408(%RBP)
	pushq -6416(%RBP)
	pushq -6424(%RBP)
	pushq -6432(%RBP)
	pushq -6440(%RBP)
	pushq -6448(%RBP)
	pushq -6456(%RBP)
	pushq $0
	push %RBP
	mov -6560(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df6d4
	jmp uuid_00000000000df6d6
uuid_00000000000df6d4:
	push %RBP
	pushq -6504(%RBP)
	pushq -6512(%RBP)
	pushq -6520(%RBP)
	pushq -6528(%RBP)
	pushq -6536(%RBP)
	pushq -6544(%RBP)
	pushq -6552(%RBP)
	jmp uuid_00000000000df6d1
	jmp uuid_00000000000df6d3
uuid_00000000000df6d1:
	push %RBP
	mov -6496(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df6ce
	jmp uuid_00000000000df6d0
uuid_00000000000df6ce:
	movb $1, -6568(%rbp)
uuid_00000000000df6d0:
	mov -6648(%RBP),%RSP
	add $-6656, %RSP
uuid_00000000000df6d3:
	mov -6584(%RBP),%RSP
	add $-6656, %RSP
uuid_00000000000df6d6:
	mov -6576(%RBP),%RSP
	add $-6656, %RSP
	mov -6568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df6f5
	jmp uuid_00000000000df6f7
uuid_00000000000df6f5:
	push %RBP
	pushq -6320(%RBP)
	pushq -6328(%RBP)
	pushq -6336(%RBP)
	pushq -6344(%RBP)
	pushq -6352(%RBP)
	pushq -6360(%RBP)
	pushq -6368(%RBP)
	pushq -6376(%RBP)
	pushq -6384(%RBP)
	pushq $0
	push %RBP
	mov -6736(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df6ef
	jmp uuid_00000000000df6f1
uuid_00000000000df6ef:
	push %RBP
	mov -6728(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6832(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df6dd
	jmp uuid_00000000000df6df
uuid_00000000000df6dd:
	push %RBP
	jmp uuid_00000000000df6da
	jmp uuid_00000000000df6dc
uuid_00000000000df6da:
	push %RBP
	mov -6768(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df6d7
	jmp uuid_00000000000df6d9
uuid_00000000000df6d7:
	movb $1, -6840(%rbp)
uuid_00000000000df6d9:
	mov -6864(%RBP),%RSP
	add $-6872, %RSP
uuid_00000000000df6dc:
	mov -6856(%RBP),%RSP
	add $-6872, %RSP
uuid_00000000000df6df:
	mov -6848(%RBP),%RSP
	add $-6872, %RSP
	mov -6840(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df6ec
	jmp uuid_00000000000df6ee
uuid_00000000000df6ec:
	push %RBP
	mov -6720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6952(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df6e6
	jmp uuid_00000000000df6e8
uuid_00000000000df6e6:
	push %RBP
	jmp uuid_00000000000df6e3
	jmp uuid_00000000000df6e5
uuid_00000000000df6e3:
	push %RBP
	mov -6888(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6992(%rbp)
	pushq $uuid_00000000000df5b4
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df6e0
	jmp uuid_00000000000df6e2
uuid_00000000000df6e0:
	movb $1, -6960(%rbp)
uuid_00000000000df6e2:
	mov -6984(%RBP),%RSP
	add $-6992, %RSP
uuid_00000000000df6e5:
	mov -6976(%RBP),%RSP
	add $-6992, %RSP
uuid_00000000000df6e8:
	mov -6968(%RBP),%RSP
	add $-6992, %RSP
	mov -6960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df6e9
	jmp uuid_00000000000df6eb
uuid_00000000000df6e9:
	movb $1, -6744(%rbp)
uuid_00000000000df6eb:
	mov -6880(%RBP),%RSP
	add $-6992, %RSP
uuid_00000000000df6ee:
	mov -6760(%RBP),%RSP
	add $-6992, %RSP
uuid_00000000000df6f1:
	mov -6752(%RBP),%RSP
	add $-6992, %RSP
	mov -6744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df6f2
	jmp uuid_00000000000df6f4
uuid_00000000000df6f2:
	movb $1, -6472(%rbp)
uuid_00000000000df6f4:
	mov -6664(%RBP),%RSP
	add $-6992, %RSP
uuid_00000000000df6f7:
	mov -6488(%RBP),%RSP
	add $-6992, %RSP
uuid_00000000000df6fa:
	mov -6480(%RBP),%RSP
	add $-6992, %RSP
	mov -6472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df7c0
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -7152(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df729
	jmp uuid_00000000000df72b
uuid_00000000000df729:
	push %RBP
	pushq -7080(%RBP)
	pushq -7088(%RBP)
	pushq -7096(%RBP)
	pushq -7104(%RBP)
	pushq -7112(%RBP)
	pushq -7120(%RBP)
	pushq -7128(%RBP)
	pushq -7136(%RBP)
	pushq -7144(%RBP)
	pushq $0
	push %RBP
	mov -7248(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df704
	jmp uuid_00000000000df706
uuid_00000000000df704:
	push %RBP
	jmp uuid_00000000000df701
	jmp uuid_00000000000df703
uuid_00000000000df701:
	push %RBP
	mov -7184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7288(%rbp)
	pushq $uuid_00000000000df19f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df6fe
	jmp uuid_00000000000df700
uuid_00000000000df6fe:
	movb $1, -7256(%rbp)
uuid_00000000000df700:
	mov -7280(%RBP),%RSP
	add $-7288, %RSP
uuid_00000000000df703:
	mov -7272(%RBP),%RSP
	add $-7288, %RSP
uuid_00000000000df706:
	mov -7264(%RBP),%RSP
	add $-7288, %RSP
	mov -7256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df726
	jmp uuid_00000000000df728
uuid_00000000000df726:
	push %RBP
	pushq -7008(%RBP)
	pushq -7016(%RBP)
	pushq -7024(%RBP)
	pushq -7032(%RBP)
	pushq -7040(%RBP)
	pushq -7048(%RBP)
	pushq -7056(%RBP)
	pushq -7064(%RBP)
	pushq -7072(%RBP)
	pushq $0
	push %RBP
	mov -7368(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df720
	jmp uuid_00000000000df722
uuid_00000000000df720:
	push %RBP
	mov -7360(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -7464(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df70d
	jmp uuid_00000000000df70f
uuid_00000000000df70d:
	push %RBP
	jmp uuid_00000000000df70a
	jmp uuid_00000000000df70c
uuid_00000000000df70a:
	push %RBP
	jmp uuid_00000000000df707
	jmp uuid_00000000000df709
uuid_00000000000df707:
	movb $1, -7472(%rbp)
uuid_00000000000df709:
	mov -7496(%RBP),%RSP
	add $-7496, %RSP
uuid_00000000000df70c:
	mov -7488(%RBP),%RSP
	add $-7496, %RSP
uuid_00000000000df70f:
	mov -7480(%RBP),%RSP
	add $-7496, %RSP
	mov -7472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df71d
	jmp uuid_00000000000df71f
uuid_00000000000df71d:
	push %RBP
	mov -7352(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -7576(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df717
	jmp uuid_00000000000df719
uuid_00000000000df717:
	push %RBP
	jmp uuid_00000000000df714
	jmp uuid_00000000000df716
uuid_00000000000df714:
	push %RBP
	mov -7512(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7616(%rbp)
	pushq $uuid_00000000000df710
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df711
	jmp uuid_00000000000df713
uuid_00000000000df711:
	movb $1, -7584(%rbp)
uuid_00000000000df713:
	mov -7608(%RBP),%RSP
	add $-7616, %RSP
uuid_00000000000df716:
	mov -7600(%RBP),%RSP
	add $-7616, %RSP
uuid_00000000000df719:
	mov -7592(%RBP),%RSP
	add $-7616, %RSP
	mov -7584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df71a
	jmp uuid_00000000000df71c
uuid_00000000000df71a:
	movb $1, -7376(%rbp)
uuid_00000000000df71c:
	mov -7504(%RBP),%RSP
	add $-7616, %RSP
uuid_00000000000df71f:
	mov -7392(%RBP),%RSP
	add $-7616, %RSP
uuid_00000000000df722:
	mov -7384(%RBP),%RSP
	add $-7616, %RSP
	mov -7376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df723
	jmp uuid_00000000000df725
uuid_00000000000df723:
	movb $1, -7160(%rbp)
uuid_00000000000df725:
	mov -7296(%RBP),%RSP
	add $-7616, %RSP
uuid_00000000000df728:
	mov -7176(%RBP),%RSP
	add $-7616, %RSP
uuid_00000000000df72b:
	mov -7168(%RBP),%RSP
	add $-7616, %RSP
	mov -7160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df7bd
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -7776(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df756
	jmp uuid_00000000000df758
uuid_00000000000df756:
	push %RBP
	pushq -7704(%RBP)
	pushq -7712(%RBP)
	pushq -7720(%RBP)
	pushq -7728(%RBP)
	pushq -7736(%RBP)
	pushq -7744(%RBP)
	pushq -7752(%RBP)
	pushq -7760(%RBP)
	pushq -7768(%RBP)
	pushq $0
	push %RBP
	mov -7872(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df732
	jmp uuid_00000000000df734
uuid_00000000000df732:
	push %RBP
	pushq -7816(%RBP)
	pushq -7824(%RBP)
	pushq -7832(%RBP)
	pushq -7840(%RBP)
	pushq -7848(%RBP)
	pushq -7856(%RBP)
	pushq -7864(%RBP)
	jmp uuid_00000000000df72f
	jmp uuid_00000000000df731
uuid_00000000000df72f:
	push %RBP
	mov -7808(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df72c
	jmp uuid_00000000000df72e
uuid_00000000000df72c:
	movb $1, -7880(%rbp)
uuid_00000000000df72e:
	mov -7960(%RBP),%RSP
	add $-7968, %RSP
uuid_00000000000df731:
	mov -7896(%RBP),%RSP
	add $-7968, %RSP
uuid_00000000000df734:
	mov -7888(%RBP),%RSP
	add $-7968, %RSP
	mov -7880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df753
	jmp uuid_00000000000df755
uuid_00000000000df753:
	push %RBP
	pushq -7632(%RBP)
	pushq -7640(%RBP)
	pushq -7648(%RBP)
	pushq -7656(%RBP)
	pushq -7664(%RBP)
	pushq -7672(%RBP)
	pushq -7680(%RBP)
	pushq -7688(%RBP)
	pushq -7696(%RBP)
	pushq $0
	push %RBP
	mov -8048(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df74d
	jmp uuid_00000000000df74f
uuid_00000000000df74d:
	push %RBP
	mov -8040(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8144(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df73b
	jmp uuid_00000000000df73d
uuid_00000000000df73b:
	push %RBP
	jmp uuid_00000000000df738
	jmp uuid_00000000000df73a
uuid_00000000000df738:
	push %RBP
	mov -8080(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df735
	jmp uuid_00000000000df737
uuid_00000000000df735:
	movb $1, -8152(%rbp)
uuid_00000000000df737:
	mov -8176(%RBP),%RSP
	add $-8184, %RSP
uuid_00000000000df73a:
	mov -8168(%RBP),%RSP
	add $-8184, %RSP
uuid_00000000000df73d:
	mov -8160(%RBP),%RSP
	add $-8184, %RSP
	mov -8152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df74a
	jmp uuid_00000000000df74c
uuid_00000000000df74a:
	push %RBP
	mov -8032(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8264(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df744
	jmp uuid_00000000000df746
uuid_00000000000df744:
	push %RBP
	jmp uuid_00000000000df741
	jmp uuid_00000000000df743
uuid_00000000000df741:
	push %RBP
	mov -8200(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8304(%rbp)
	pushq $uuid_00000000000df710
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df73e
	jmp uuid_00000000000df740
uuid_00000000000df73e:
	movb $1, -8272(%rbp)
uuid_00000000000df740:
	mov -8296(%RBP),%RSP
	add $-8304, %RSP
uuid_00000000000df743:
	mov -8288(%RBP),%RSP
	add $-8304, %RSP
uuid_00000000000df746:
	mov -8280(%RBP),%RSP
	add $-8304, %RSP
	mov -8272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df747
	jmp uuid_00000000000df749
uuid_00000000000df747:
	movb $1, -8056(%rbp)
uuid_00000000000df749:
	mov -8192(%RBP),%RSP
	add $-8304, %RSP
uuid_00000000000df74c:
	mov -8072(%RBP),%RSP
	add $-8304, %RSP
uuid_00000000000df74f:
	mov -8064(%RBP),%RSP
	add $-8304, %RSP
	mov -8056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df750
	jmp uuid_00000000000df752
uuid_00000000000df750:
	movb $1, -7784(%rbp)
uuid_00000000000df752:
	mov -7976(%RBP),%RSP
	add $-8304, %RSP
uuid_00000000000df755:
	mov -7800(%RBP),%RSP
	add $-8304, %RSP
uuid_00000000000df758:
	mov -7792(%RBP),%RSP
	add $-8304, %RSP
	mov -7784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df7ba
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -8464(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df796
	jmp uuid_00000000000df798
uuid_00000000000df796:
	push %RBP
	pushq -8392(%RBP)
	pushq -8400(%RBP)
	pushq -8408(%RBP)
	pushq -8416(%RBP)
	pushq -8424(%RBP)
	pushq -8432(%RBP)
	pushq -8440(%RBP)
	pushq -8448(%RBP)
	pushq -8456(%RBP)
	pushq $0
	push %RBP
	mov -8560(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df75f
	jmp uuid_00000000000df761
uuid_00000000000df75f:
	push %RBP
	pushq -8504(%RBP)
	pushq -8512(%RBP)
	pushq -8520(%RBP)
	pushq -8528(%RBP)
	pushq -8536(%RBP)
	pushq -8544(%RBP)
	pushq -8552(%RBP)
	jmp uuid_00000000000df75c
	jmp uuid_00000000000df75e
uuid_00000000000df75c:
	push %RBP
	mov -8496(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df759
	jmp uuid_00000000000df75b
uuid_00000000000df759:
	movb $1, -8568(%rbp)
uuid_00000000000df75b:
	mov -8648(%RBP),%RSP
	add $-8656, %RSP
uuid_00000000000df75e:
	mov -8584(%RBP),%RSP
	add $-8656, %RSP
uuid_00000000000df761:
	mov -8576(%RBP),%RSP
	add $-8656, %RSP
	mov -8568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df793
	jmp uuid_00000000000df795
uuid_00000000000df793:
	push %RBP
	pushq -8320(%RBP)
	pushq -8328(%RBP)
	pushq -8336(%RBP)
	pushq -8344(%RBP)
	pushq -8352(%RBP)
	pushq -8360(%RBP)
	pushq -8368(%RBP)
	pushq -8376(%RBP)
	pushq -8384(%RBP)
	pushq $0
	push %RBP
	mov -8736(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df78d
	jmp uuid_00000000000df78f
uuid_00000000000df78d:
	push %RBP
	mov -8728(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8832(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df768
	jmp uuid_00000000000df76a
uuid_00000000000df768:
	push %RBP
	jmp uuid_00000000000df765
	jmp uuid_00000000000df767
uuid_00000000000df765:
	push %RBP
	mov -8768(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df762
	jmp uuid_00000000000df764
uuid_00000000000df762:
	movb $1, -8840(%rbp)
uuid_00000000000df764:
	mov -8864(%RBP),%RSP
	add $-8872, %RSP
uuid_00000000000df767:
	mov -8856(%RBP),%RSP
	add $-8872, %RSP
uuid_00000000000df76a:
	mov -8848(%RBP),%RSP
	add $-8872, %RSP
	mov -8840(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df78a
	jmp uuid_00000000000df78c
uuid_00000000000df78a:
	push %RBP
	mov -8720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8952(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df784
	jmp uuid_00000000000df786
uuid_00000000000df784:
	push %RBP
	mov -8944(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -9048(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df771
	jmp uuid_00000000000df773
uuid_00000000000df771:
	push %RBP
	jmp uuid_00000000000df76e
	jmp uuid_00000000000df770
uuid_00000000000df76e:
	push %RBP
	mov -8984(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df76b
	jmp uuid_00000000000df76d
uuid_00000000000df76b:
	movb $1, -9056(%rbp)
uuid_00000000000df76d:
	mov -9080(%RBP),%RSP
	add $-9088, %RSP
uuid_00000000000df770:
	mov -9072(%RBP),%RSP
	add $-9088, %RSP
uuid_00000000000df773:
	mov -9064(%RBP),%RSP
	add $-9088, %RSP
	mov -9056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df781
	jmp uuid_00000000000df783
uuid_00000000000df781:
	push %RBP
	mov -8936(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -9168(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df77b
	jmp uuid_00000000000df77d
uuid_00000000000df77b:
	push %RBP
	jmp uuid_00000000000df778
	jmp uuid_00000000000df77a
uuid_00000000000df778:
	push %RBP
	mov -9104(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9208(%rbp)
	pushq $uuid_00000000000df774
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df775
	jmp uuid_00000000000df777
uuid_00000000000df775:
	movb $1, -9176(%rbp)
uuid_00000000000df777:
	mov -9200(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000df77a:
	mov -9192(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000df77d:
	mov -9184(%RBP),%RSP
	add $-9208, %RSP
	mov -9176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df77e
	jmp uuid_00000000000df780
uuid_00000000000df77e:
	movb $1, -8960(%rbp)
uuid_00000000000df780:
	mov -9096(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000df783:
	mov -8976(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000df786:
	mov -8968(%RBP),%RSP
	add $-9208, %RSP
	mov -8960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df787
	jmp uuid_00000000000df789
uuid_00000000000df787:
	movb $1, -8744(%rbp)
uuid_00000000000df789:
	mov -8880(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000df78c:
	mov -8760(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000df78f:
	mov -8752(%RBP),%RSP
	add $-9208, %RSP
	mov -8744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df790
	jmp uuid_00000000000df792
uuid_00000000000df790:
	movb $1, -8472(%rbp)
uuid_00000000000df792:
	mov -8664(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000df795:
	mov -8488(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000df798:
	mov -8480(%RBP),%RSP
	add $-9208, %RSP
	mov -8472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df7b7
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -9368(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df7ad
	jmp uuid_00000000000df7af
uuid_00000000000df7ad:
	push %RBP
	pushq -9296(%RBP)
	pushq -9304(%RBP)
	pushq -9312(%RBP)
	pushq -9320(%RBP)
	pushq -9328(%RBP)
	pushq -9336(%RBP)
	pushq -9344(%RBP)
	pushq -9352(%RBP)
	pushq -9360(%RBP)
	jmp uuid_00000000000df7aa
	jmp uuid_00000000000df7ac
uuid_00000000000df7aa:
	push %RBP
	pushq -9224(%RBP)
	pushq -9232(%RBP)
	pushq -9240(%RBP)
	pushq -9248(%RBP)
	pushq -9256(%RBP)
	pushq -9264(%RBP)
	pushq -9272(%RBP)
	pushq -9280(%RBP)
	pushq -9288(%RBP)
	pushq $0
	push %RBP
	mov -9544(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df7a4
	jmp uuid_00000000000df7a6
uuid_00000000000df7a4:
	push %RBP
	jmp uuid_00000000000df7a1
	jmp uuid_00000000000df7a3
uuid_00000000000df7a1:
	push %RBP
	mov -9480(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df79e
	jmp uuid_00000000000df7a0
uuid_00000000000df79e:
	movb $1, -9552(%rbp)
uuid_00000000000df7a0:
	mov -9576(%RBP),%RSP
	add $-9584, %RSP
uuid_00000000000df7a3:
	mov -9568(%RBP),%RSP
	add $-9584, %RSP
uuid_00000000000df7a6:
	mov -9560(%RBP),%RSP
	add $-9584, %RSP
	mov -9552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df7a7
	jmp uuid_00000000000df7a9
uuid_00000000000df7a7:
	movb $1, -9376(%rbp)
uuid_00000000000df7a9:
	mov -9472(%RBP),%RSP
	add $-9584, %RSP
uuid_00000000000df7ac:
	mov -9392(%RBP),%RSP
	add $-9584, %RSP
uuid_00000000000df7af:
	mov -9384(%RBP),%RSP
	add $-9584, %RSP
	mov -9376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df7b4
	push %RBP
	jmp uuid_00000000000df7b1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df7b0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df7b3
uuid_00000000000df7b1:
uuid_00000000000df7b3:
	mov -9592(%RBP),%RSP
	add $-9592, %RSP
	jmp uuid_00000000000df7b6
uuid_00000000000df7b4:
#call function close : Arrow<Context,Array<Context,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -9584(%rbp)
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9400(%rbp)
	pushq -9408(%rbp)
	pushq -9416(%rbp)
	pushq -9424(%rbp)
	pushq -9432(%rbp)
	pushq -9440(%rbp)
	pushq -9448(%rbp)
	pushq -9456(%rbp)
	pushq -9464(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	pushq $0
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000df7b6:
	mov -9216(%RBP),%RSP
	add $-9584, %RSP
	jmp uuid_00000000000df7b9
uuid_00000000000df7b7:
	push %RBP
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8656(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $unknown_SB_index_SB_of_SB_tag_CL_U64, %R14
	mov 0(%R14), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df79b
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8656(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Context,Array<Context,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -9088(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3c6
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8592(%rbp)
	pushq -8600(%rbp)
	pushq -8608(%rbp)
	pushq -8616(%rbp)
	pushq -8624(%rbp)
	pushq -8632(%rbp)
	pushq -8640(%rbp)
	pushq $uuid_00000000000db3c6
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9224(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8592(%rbp)
	pushq -8600(%rbp)
	pushq -8608(%rbp)
	pushq -8616(%rbp)
	pushq -8624(%rbp)
	pushq -8632(%rbp)
	pushq -8640(%rbp)
	pushq -9224(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000df799
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	pushq $0
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000df79a
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -8656(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000db298
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Context,Array<Context,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8872(%rbp)
	pushq -9232(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8592(%rbp)
	pushq -8600(%rbp)
	pushq -8608(%rbp)
	pushq -8616(%rbp)
	pushq -8624(%rbp)
	pushq -8632(%rbp)
	pushq -8640(%rbp)
	pushq -9232(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	pushq $0
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	jmp uuid_00000000000df79d
uuid_00000000000df79b:
uuid_00000000000df79d:
	mov -9216(%RBP),%RSP
	add $-9216, %RSP
uuid_00000000000df7b9:
	mov -8312(%RBP),%RSP
	add $-9216, %RSP
	jmp uuid_00000000000df7bc
uuid_00000000000df7ba:
#call function close : Arrow<Context,Array<Context,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8184(%rbp)
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -7920(%RBP)
	pushq -7928(%RBP)
	pushq -7936(%RBP)
	pushq -7944(%RBP)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	pushq $0
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000df7bc:
	mov -7624(%RBP),%RSP
	add $-8304, %RSP
	jmp uuid_00000000000df7bf
uuid_00000000000df7bd:
uuid_00000000000df7bf:
	mov -7000(%RBP),%RSP
	add $-7616, %RSP
	jmp uuid_00000000000df7c2
uuid_00000000000df7c0:
	push %RBP
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6656(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $unknown_SB_index_SB_of_SB_tag_CL_U64, %R14
	mov 0(%R14), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df6fb
	jmp uuid_00000000000df6fd
uuid_00000000000df6fb:
#call function close : Arrow<Context,Array<Context,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -6872(%rbp)
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -6608(%RBP)
	pushq -6616(%RBP)
	pushq -6624(%RBP)
	pushq -6632(%RBP)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	pushq $0
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000df6fd:
	mov -7000(%RBP),%RSP
	add $-7000, %RSP
uuid_00000000000df7c2:
	mov -6312(%RBP),%RSP
	add $-7000, %RSP
	jmp uuid_00000000000df7c5
uuid_00000000000df7c3:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6304(%rbp)
	pushq -6184(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df6cb
	jmp uuid_00000000000df6cd
uuid_00000000000df6cb:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000df6cd:
	mov -6312(%RBP),%RSP
	add $-6312, %RSP
uuid_00000000000df7c5:
	mov -5896(%RBP),%RSP
	add $-6312, %RSP
	jmp uuid_00000000000df7c8
uuid_00000000000df7c6:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5888(%rbp)
	pushq -5768(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df6ad
	jmp uuid_00000000000df6af
uuid_00000000000df6ad:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000df6af:
	mov -5896(%RBP),%RSP
	add $-5896, %RSP
uuid_00000000000df7c8:
	mov -5480(%RBP),%RSP
	add $-5896, %RSP
	jmp uuid_00000000000df7cb
uuid_00000000000df7c9:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000df7cb:
	mov -5064(%RBP),%RSP
	add $-5472, %RSP
	jmp uuid_00000000000df7ce
uuid_00000000000df7cc:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -4704(%rbp)
	pushq -4712(%rbp)
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq -5136(%rbp)
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df673
	jmp uuid_00000000000df675
uuid_00000000000df673:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -4976(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	pushq -4672(%rbp)
	pushq -4680(%rbp)
	pushq -4688(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df670
	jmp uuid_00000000000df672
uuid_00000000000df670:
#call function union : Arrow<Cons<Context,Context>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq -5136(%rbp)
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowContextConsContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000df672:
	mov -5264(%RBP),%RSP
	add $-5264, %RSP
uuid_00000000000df675:
	mov -5160(%RBP),%RSP
	add $-5264, %RSP
uuid_00000000000df7ce:
	mov -4312(%RBP),%RSP
	add $-5264, %RSP
	jmp uuid_00000000000df7d1
uuid_00000000000df7cf:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -4240(%rbp)
	pushq -4248(%rbp)
	pushq -4256(%rbp)
	pushq -4264(%rbp)
	pushq -4272(%rbp)
	pushq -4280(%rbp)
	pushq -4288(%rbp)
	pushq -4296(%rbp)
	pushq -4304(%rbp)
	pushq -3984(%rbp)
	pushq -3992(%rbp)
	pushq -4000(%rbp)
	pushq -4008(%rbp)
	pushq -4016(%rbp)
	pushq -4024(%rbp)
	pushq -4032(%rbp)
	pushq -4040(%rbp)
	pushq -4048(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4312(%rbp)
	pushq -4320(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df64c
	jmp uuid_00000000000df64e
uuid_00000000000df64c:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -4160(%rbp)
	pushq -4168(%rbp)
	pushq -4176(%rbp)
	pushq -4184(%rbp)
	pushq -4192(%rbp)
	pushq -4200(%rbp)
	pushq -4208(%rbp)
	pushq -4216(%rbp)
	pushq -4224(%rbp)
	pushq -3904(%rbp)
	pushq -3912(%rbp)
	pushq -3920(%rbp)
	pushq -3928(%rbp)
	pushq -3936(%rbp)
	pushq -3944(%rbp)
	pushq -3952(%rbp)
	pushq -3960(%rbp)
	pushq -3968(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df649
	jmp uuid_00000000000df64b
uuid_00000000000df649:
#call function union : Arrow<Cons<Context,Context>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4312(%rbp)
	pushq -4320(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowContextConsContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000df64b:
	mov -4512(%RBP),%RSP
	add $-4512, %RSP
uuid_00000000000df64e:
	mov -4408(%RBP),%RSP
	add $-4512, %RSP
uuid_00000000000df7d1:
	mov -3624(%RBP),%RSP
	add $-4512, %RSP
	jmp uuid_00000000000df7d4
uuid_00000000000df7d2:
	push %RBP
#call function preprocess-is-suffixed : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3296(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_is_SB_suffixed_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-lone-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3296(%rbp)
	mov %RBX, %RBP
	call is_SB_lone_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df62b
	jmp uuid_00000000000df62d
uuid_00000000000df62b:
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	pushq -3632(%rbp)
	pushq -3640(%rbp)
	pushq -3648(%rbp)
	pushq -3656(%rbp)
	pushq -3664(%rbp)
	pushq -3672(%rbp)
	pushq -3680(%rbp)
	pushq -3688(%rbp)
	pushq -3696(%rbp)
	pushq -3704(%rbp)
	pushq -3712(%rbp)
	pushq -3720(%rbp)
	pushq -3728(%rbp)
	pushq -3736(%rbp)
	pushq -3744(%rbp)
	pushq -3752(%rbp)
	pushq -3760(%rbp)
	pushq -3768(%rbp)
	pushq -3776(%rbp)
	pushq $0
	push %RBP
	mov -3936(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df61e
	jmp uuid_00000000000df620
uuid_00000000000df61e:
	push %RBP
	pushq -3864(%RBP)
	pushq -3872(%RBP)
	pushq -3880(%RBP)
	pushq -3888(%RBP)
	pushq -3896(%RBP)
	pushq -3904(%RBP)
	pushq -3912(%RBP)
	pushq -3920(%RBP)
	pushq -3928(%RBP)
	pushq $0
	push %RBP
	mov -4032(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df60c
	jmp uuid_00000000000df60e
uuid_00000000000df60c:
	push %RBP
	mov -4024(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df609
	jmp uuid_00000000000df60b
uuid_00000000000df609:
	push %RBP
	mov -4016(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df606
	jmp uuid_00000000000df608
uuid_00000000000df606:
	movb $1, -4040(%rbp)
uuid_00000000000df608:
	mov -4136(%RBP),%RSP
	add $-4208, %RSP
uuid_00000000000df60b:
	mov -4056(%RBP),%RSP
	add $-4208, %RSP
uuid_00000000000df60e:
	mov -4048(%RBP),%RSP
	add $-4208, %RSP
	mov -4040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df61b
	jmp uuid_00000000000df61d
uuid_00000000000df61b:
	push %RBP
	pushq -3792(%RBP)
	pushq -3800(%RBP)
	pushq -3808(%RBP)
	pushq -3816(%RBP)
	pushq -3824(%RBP)
	pushq -3832(%RBP)
	pushq -3840(%RBP)
	pushq -3848(%RBP)
	pushq -3856(%RBP)
	pushq $0
	push %RBP
	mov -4288(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df615
	jmp uuid_00000000000df617
uuid_00000000000df615:
	push %RBP
	mov -4280(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df612
	jmp uuid_00000000000df614
uuid_00000000000df612:
	push %RBP
	mov -4272(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df60f
	jmp uuid_00000000000df611
uuid_00000000000df60f:
	movb $1, -4296(%rbp)
uuid_00000000000df611:
	mov -4392(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000df614:
	mov -4312(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000df617:
	mov -4304(%RBP),%RSP
	add $-4464, %RSP
	mov -4296(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df618
	jmp uuid_00000000000df61a
uuid_00000000000df618:
	movb $1, -3944(%rbp)
uuid_00000000000df61a:
	mov -4216(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000df61d:
	mov -3960(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000df620:
	mov -3952(%RBP),%RSP
	add $-4464, %RSP
	mov -3944(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df628
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df627
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df62a
uuid_00000000000df628:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -4400(%rbp)
	pushq -4408(%rbp)
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4144(%rbp)
	pushq -4152(%rbp)
	pushq -4160(%rbp)
	pushq -4168(%rbp)
	pushq -4176(%rbp)
	pushq -4184(%rbp)
	pushq -4192(%rbp)
	pushq -4200(%rbp)
	pushq -4208(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq -4536(%rbp)
	pushq -4544(%rbp)
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df624
	jmp uuid_00000000000df626
uuid_00000000000df624:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -4320(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	pushq -4384(%rbp)
	pushq -4064(%rbp)
	pushq -4072(%rbp)
	pushq -4080(%rbp)
	pushq -4088(%rbp)
	pushq -4096(%rbp)
	pushq -4104(%rbp)
	pushq -4112(%rbp)
	pushq -4120(%rbp)
	pushq -4128(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4576(%rbp)
	pushq -4584(%rbp)
	pushq -4592(%rbp)
	pushq -4600(%rbp)
	pushq -4608(%rbp)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df621
	jmp uuid_00000000000df623
uuid_00000000000df621:
#call function union : Arrow<Cons<Context,Context>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq -4536(%rbp)
	pushq -4544(%rbp)
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	pushq -4576(%rbp)
	pushq -4584(%rbp)
	pushq -4592(%rbp)
	pushq -4600(%rbp)
	pushq -4608(%rbp)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowContextConsContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000df623:
	mov -4672(%RBP),%RSP
	add $-4672, %RSP
uuid_00000000000df626:
	mov -4568(%RBP),%RSP
	add $-4672, %RSP
uuid_00000000000df62a:
	mov -3784(%RBP),%RSP
	add $-4672, %RSP
uuid_00000000000df62d:
	mov -3624(%RBP),%RSP
	add $-4672, %RSP
uuid_00000000000df7d4:
	mov -2904(%RBP),%RSP
	add $-4672, %RSP
	jmp uuid_00000000000df7d7
uuid_00000000000df7d5:
#call function close : Arrow<Context,Array<Context,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -2776(%rbp)
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	pushq $0
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000df7d7:
	mov -1808(%RBP),%RSP
	add $-2896, %RSP
	jmp uuid_00000000000df7da
uuid_00000000000df7d8:
uuid_00000000000df7da:
	mov -776(%RBP),%RSP
	add $-1800, %RSP
	jmp uuid_00000000000df7dd
uuid_00000000000df7db:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000df7dd:
	mov -440(%RBP),%RSP
	add $-768, %RSP
	subq $96, %rsp
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	addq $96, %rsp
	mov %rbp, %rsp
	sub $184, %rsp
	ret
destructure_SB_lhs_CL_ArrowFContextConsFragmentListConsSConsTypeFContext:
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	push %RBP
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $0
	push %RBP
	mov -480(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df7f0
	jmp uuid_00000000000df7f2
uuid_00000000000df7f0:
	push %RBP
	mov -472(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df7e1
	jmp uuid_00000000000df7e3
uuid_00000000000df7e1:
	push %RBP
	mov -520(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df7de
	jmp uuid_00000000000df7e0
uuid_00000000000df7de:
	movb $1, -536(%rbp)
uuid_00000000000df7e0:
	mov -552(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000df7e3:
	mov -544(%RBP),%RSP
	add $-560, %RSP
	mov -536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df7ed
	jmp uuid_00000000000df7ef
uuid_00000000000df7ed:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -592(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df7e7
	jmp uuid_00000000000df7e9
uuid_00000000000df7e7:
	push %RBP
	mov -584(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -624(%rbp)
	pushq $uuid_00000000000dba62
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df7e4
	jmp uuid_00000000000df7e6
uuid_00000000000df7e4:
	movb $1, -600(%rbp)
uuid_00000000000df7e6:
	mov -616(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000df7e9:
	mov -608(%RBP),%RSP
	add $-624, %RSP
	mov -600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df7ea
	jmp uuid_00000000000df7ec
uuid_00000000000df7ea:
	movb $1, -488(%rbp)
uuid_00000000000df7ec:
	mov -568(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000df7ef:
	mov -504(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000df7f2:
	mov -496(%RBP),%RSP
	add $-624, %RSP
	mov -488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df84c
	push %RBP
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $0
	push %RBP
	mov -656(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df82e
	jmp uuid_00000000000df830
uuid_00000000000df82e:
	push %RBP
	mov -648(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -704(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df81f
	jmp uuid_00000000000df821
uuid_00000000000df81f:
	push %RBP
	mov -696(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df816
	jmp uuid_00000000000df818
uuid_00000000000df816:
	push %RBP
	mov -744(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -800(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df807
	jmp uuid_00000000000df809
uuid_00000000000df807:
	push %RBP
	mov -792(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df804
	jmp uuid_00000000000df806
uuid_00000000000df804:
	movb $1, -808(%rbp)
uuid_00000000000df806:
	mov -824(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000df809:
	mov -816(%RBP),%RSP
	add $-832, %RSP
	mov -808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df813
	jmp uuid_00000000000df815
uuid_00000000000df813:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -864(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df80d
	jmp uuid_00000000000df80f
uuid_00000000000df80d:
	push %RBP
	mov -856(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -896(%rbp)
	pushq $uuid_00000000000dba62
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df80a
	jmp uuid_00000000000df80c
uuid_00000000000df80a:
	movb $1, -872(%rbp)
uuid_00000000000df80c:
	mov -888(%RBP),%RSP
	add $-896, %RSP
uuid_00000000000df80f:
	mov -880(%RBP),%RSP
	add $-896, %RSP
	mov -872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df810
	jmp uuid_00000000000df812
uuid_00000000000df810:
	movb $1, -760(%rbp)
uuid_00000000000df812:
	mov -840(%RBP),%RSP
	add $-896, %RSP
uuid_00000000000df815:
	mov -776(%RBP),%RSP
	add $-896, %RSP
uuid_00000000000df818:
	mov -768(%RBP),%RSP
	add $-896, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df81c
	jmp uuid_00000000000df81e
uuid_00000000000df81c:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df819
	jmp uuid_00000000000df81b
uuid_00000000000df819:
	movb $1, -712(%rbp)
uuid_00000000000df81b:
	mov -904(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000df81e:
	mov -728(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000df821:
	mov -720(%RBP),%RSP
	add $-928, %RSP
	mov -712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df82b
	jmp uuid_00000000000df82d
uuid_00000000000df82b:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -960(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df825
	jmp uuid_00000000000df827
uuid_00000000000df825:
	push %RBP
	mov -952(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -992(%rbp)
	pushq $uuid_00000000000dbab8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df822
	jmp uuid_00000000000df824
uuid_00000000000df822:
	movb $1, -968(%rbp)
uuid_00000000000df824:
	mov -984(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000df827:
	mov -976(%RBP),%RSP
	add $-992, %RSP
	mov -968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df828
	jmp uuid_00000000000df82a
uuid_00000000000df828:
	movb $1, -664(%rbp)
uuid_00000000000df82a:
	mov -936(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000df82d:
	mov -680(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000df830:
	mov -672(%RBP),%RSP
	add $-992, %RSP
	mov -664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df849
	push %RBP
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	mov -1024(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df846
	push %RBP
	jmp uuid_00000000000df843
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df842
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df845
uuid_00000000000df843:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000df841
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<S,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae3c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000df845:
	mov -1032(%RBP),%RSP
	add $-1032, %RSP
	jmp uuid_00000000000df848
uuid_00000000000df846:
uuid_00000000000df848:
	mov -1000(%RBP),%RSP
	add $-1024, %RSP
	jmp uuid_00000000000df84b
uuid_00000000000df849:
#call function p1 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov %RBX, %RBP
	call p1_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	push %RBP
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq $0
	push %RBP
	mov -1360(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df837
	jmp uuid_00000000000df839
uuid_00000000000df837:
	push %RBP
	pushq -1208(%RBP)
	pushq -1216(%RBP)
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	pushq -1256(%RBP)
	pushq -1264(%RBP)
	pushq -1272(%RBP)
	pushq -1280(%RBP)
	pushq -1288(%RBP)
	pushq -1296(%RBP)
	pushq -1304(%RBP)
	pushq -1312(%RBP)
	pushq -1320(%RBP)
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	jmp uuid_00000000000df834
	jmp uuid_00000000000df836
uuid_00000000000df834:
	push %RBP
	mov -1200(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df831
	jmp uuid_00000000000df833
uuid_00000000000df831:
	movb $1, -1368(%rbp)
uuid_00000000000df833:
	mov -1544(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000df836:
	mov -1384(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000df839:
	mov -1376(%RBP),%RSP
	add $-1712, %RSP
	mov -1368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df83e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df83d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df840
uuid_00000000000df83e:
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df83a
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000df7fc
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Fragment,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df83c
uuid_00000000000df83a:
uuid_00000000000df83c:
	mov -1744(%RBP),%RSP
	add $-1744, %RSP
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -832(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	movq -1712(%rbp), %r15
	movq %r15, -416(%rbp)
	movq -1704(%rbp), %r15
	movq %r15, -408(%rbp)
	movq -1696(%rbp), %r15
	movq %r15, -400(%rbp)
	movq -1688(%rbp), %r15
	movq %r15, -392(%rbp)
	movq -1680(%rbp), %r15
	movq %r15, -384(%rbp)
	movq -1672(%rbp), %r15
	movq %r15, -376(%rbp)
	movq -1664(%rbp), %r15
	movq %r15, -368(%rbp)
	movq -1656(%rbp), %r15
	movq %r15, -360(%rbp)
	movq -1648(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -1640(%rbp), %r15
	movq %r15, -344(%rbp)
	movq -1632(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -1624(%rbp), %r15
	movq %r15, -328(%rbp)
	movq -1616(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -1608(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -1600(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1592(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1584(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1576(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -1568(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -1560(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -1552(%rbp), %r15
	movq %r15, -256(%rbp)
uuid_00000000000df840:
	mov -1192(%RBP),%RSP
	add $-1864, %RSP
#call function destructure-lhs : Arrow<Cons<Cons<Cons<FContext,Type>,S>,FragmentList>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	mov %RBX, %RBP
	call destructure_SB_lhs_CL_ArrowFContextConsFragmentListConsSConsTypeFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000df84b:
	mov -632(%RBP),%RSP
	add $-1864, %RSP
	jmp uuid_00000000000df84e
uuid_00000000000df84c:
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	push %RBP
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq $0
	push %RBP
	mov -992(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df7f9
	jmp uuid_00000000000df7fb
uuid_00000000000df7f9:
	push %RBP
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	pushq -944(%RBP)
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	jmp uuid_00000000000df7f6
	jmp uuid_00000000000df7f8
uuid_00000000000df7f6:
	push %RBP
	jmp uuid_00000000000df7f3
	jmp uuid_00000000000df7f5
uuid_00000000000df7f3:
	movb $1, -1000(%rbp)
uuid_00000000000df7f5:
	mov -1176(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000df7f8:
	mov -1016(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000df7fb:
	mov -1008(%RBP),%RSP
	add $-1176, %RSP
	mov -1000(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df801
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df800
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df803
uuid_00000000000df801:
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df7fd
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000df7fc
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Fragment,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df7ff
uuid_00000000000df7fd:
uuid_00000000000df7ff:
	mov -1208(%RBP),%RSP
	add $-1208, %RSP
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -560(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000df803:
	mov -824(%RBP),%RSP
	add $-1328, %RSP
uuid_00000000000df84e:
	mov -456(%RBP),%RSP
	add $-1328, %RSP
	subq $200, %rsp
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	popq -600(%rbp)
	popq -608(%rbp)
	popq -616(%rbp)
	popq -624(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $424, %rsp
	ret
fragment_CL__CL_chain_SB_gnu_CL_ArrowFragmentConsFragmentFragment:
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -272(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -240(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000dd3d6
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000dd3d6
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000de8ae
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000de8ae
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000de8ae
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000db5a4
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000db5a4
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000db5a4
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000de8cd
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000de8cd
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000de8cd
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000dbb61
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000dbb61
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000dbb61
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
fragment_CL__CL_chain_SB_blob_CL_ArrowFragmentConsFragmentFragment:
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -272(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -240(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000dd3d6
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000dd3d6
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000de8ae
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000de8ae
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000de8ae
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000db5a4
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000db5a4
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000db5a4
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000de8cd
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000de8cd
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000de8cd
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000dbb61
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000dbb61
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000dbb61
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
fragment_CL__CL_chain_SB_c_CL_ArrowFragmentConsFragmentFragment:
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -272(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000dd3d6
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de5cd
	pushq $2
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000dd3d6
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd606
	pushq $2
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000dd3d6
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	pushq $uuid_00000000000df84f
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000de8ae
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000de8ae
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000de8ae
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragmentList:
uuid_00000000000df85d:
#call function non-zero : Arrow<FragmentList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FragmentList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df85e
	jmp uuid_00000000000df85f
uuid_00000000000df85e:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	push %RBP
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df856
	jmp uuid_00000000000df858
uuid_00000000000df856:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	jmp uuid_00000000000df853
	jmp uuid_00000000000df855
uuid_00000000000df853:
	push %RBP
	mov -512(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df850
	jmp uuid_00000000000df852
uuid_00000000000df850:
	movb $1, -680(%rbp)
uuid_00000000000df852:
	mov -856(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000df855:
	mov -696(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000df858:
	mov -688(%RBP),%RSP
	add $-1024, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df85a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df859
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df85c
uuid_00000000000df85a:
#call function fragment::chain : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	movq -1024(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -976(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -968(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -960(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -952(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -944(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -936(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -928(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -920(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -912(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -904(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -896(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -888(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -880(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -872(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -864(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000df85c:
	mov -504(%RBP),%RSP
	add $-1024, %RSP
	add $168, %rsp
	add $168, %rsp
	add $8, %rsp
	add $152, %rsp
	add $168, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000df85d
uuid_00000000000df85f:
	subq $152, %rsp
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $328, %rsp
	ret
fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment:
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	push %RBP
	pushq -320(%rbp)
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df867
	push %RBP
	pushq -320(%rbp)
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df864
	push %RBP
	pushq -320(%rbp)
	mov -368(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df861
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df860
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df863
uuid_00000000000df861:
#call function fragment::chain-gnu : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_SB_gnu_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000df863:
	mov -360(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000df866
uuid_00000000000df864:
#call function fragment::chain-blob : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_SB_blob_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000df866:
	mov -344(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000df869
uuid_00000000000df867:
#call function fragment::chain-c : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_SB_c_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000df869:
	mov -328(%RBP),%RSP
	add $-336, %RSP
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
fragment_CL__CL_expression_CL_ArrowFragmentString:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $uuid_00000000000dd3d6
	pushq $0
	pushq -8(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	subq $152, %rsp
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
fragment_CL__CL_expression_CL_ArrowFragmentS:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $uuid_00000000000dd3d6
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	subq $152, %rsp
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
fragment_CL__CL_get_CL_ArrowSConsStringFragment:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq $0
	push %RBP
	mov -504(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df87c
	jmp uuid_00000000000df87e
uuid_00000000000df87c:
	push %RBP
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	jmp uuid_00000000000df879
	jmp uuid_00000000000df87b
uuid_00000000000df879:
	push %RBP
	mov -472(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df876
	jmp uuid_00000000000df878
uuid_00000000000df876:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	jmp uuid_00000000000df873
	jmp uuid_00000000000df875
uuid_00000000000df873:
	push %RBP
	mov -440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df870
	jmp uuid_00000000000df872
uuid_00000000000df870:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df86d
	jmp uuid_00000000000df86f
uuid_00000000000df86d:
	push %RBP
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	jmp uuid_00000000000df86a
	jmp uuid_00000000000df86c
uuid_00000000000df86a:
	movb $1, -512(%rbp)
uuid_00000000000df86c:
	mov -872(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000df86f:
	mov -816(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000df872:
	mov -800(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000df875:
	mov -768(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000df878:
	mov -560(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000df87b:
	mov -528(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000df87e:
	mov -520(%RBP),%RSP
	add $-944, %RSP
	mov -512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df896
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df895
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df898
uuid_00000000000df896:
uuid_00000000000df892:
#call function non-zero : Arrow<FragmentKV,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df893
	jmp uuid_00000000000df894
uuid_00000000000df893:
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	push %RBP
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq $0
	push %RBP
	mov -1048(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df888
	jmp uuid_00000000000df88a
uuid_00000000000df888:
	push %RBP
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	jmp uuid_00000000000df885
	jmp uuid_00000000000df887
uuid_00000000000df885:
	push %RBP
	mov -1016(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df882
	jmp uuid_00000000000df884
uuid_00000000000df882:
	push %RBP
	mov -1008(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df87f
	jmp uuid_00000000000df881
uuid_00000000000df87f:
	movb $1, -1056(%rbp)
uuid_00000000000df881:
	mov -1120(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000df884:
	mov -1104(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000df887:
	mov -1072(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000df88a:
	mov -1064(%RBP),%RSP
	add $-1168, %RSP
	mov -1056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df88f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df88e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df891
uuid_00000000000df88f:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df88b
	movq -1168(%rbp), %r15
	movq %r15, -864(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -856(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -848(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -840(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -832(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -824(%rbp)
	jmp uuid_00000000000df88d
uuid_00000000000df88b:
	movq -1096(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -176(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
uuid_00000000000df88d:
	mov -1176(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000df891:
	mov -1000(%RBP),%RSP
	add $-1176, %RSP
	add $48, %rsp
	add $48, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000df892
uuid_00000000000df894:
uuid_00000000000df898:
	mov -352(%RBP),%RSP
	add $-944, %RSP
	subq $24, %rsp
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $168, %rsp
	ret
fragment_CL__CL_label_CL_ArrowFragmentString:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $uuid_00000000000dd3d6
	pushq $0
	pushq -8(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $uuid_00000000000dd3d4
	pushq $0
	pushq $uuid_00000000000db445
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db445
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	subq $152, %rsp
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
fragment_CL__CL_local_SB_variable_CL_ArrowFragmentConsTypeI64:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	push %RBP
	pushq -200(%rbp)
	mov -216(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df89d
	push %RBP
	jmp uuid_00000000000df89a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df899
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df89c
uuid_00000000000df89a:
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq $uuid_00000000000dd3d6
	pushq $0
#call function uuid : Arrow<Nil,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call uuid_CL_ArrowStringNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
uuid_00000000000df89c:
	mov -224(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000df89f
uuid_00000000000df89d:
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq $uuid_00000000000dd3d6
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
uuid_00000000000df89f:
	mov -208(%RBP),%RSP
	add $-216, %RSP
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq $uuid_00000000000dd3d4
	pushq $0
	pushq $uuid_00000000000db806
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	subq $152, %rsp
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $40, %rsp
	ret
fragment_CL__CL_new_CL_ArrowFragmentNil:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $0
	pushq $3
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment-context::new : Arrow<Nil,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_new_CL_ArrowFContextNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $1
	pushq $0
	subq $152, %rsp
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq $0
	push %RBP
	mov -824(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df8b2
	jmp uuid_00000000000df8b4
uuid_00000000000df8b2:
	push %RBP
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	jmp uuid_00000000000df8af
	jmp uuid_00000000000df8b1
uuid_00000000000df8af:
	push %RBP
	mov -792(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df8ac
	jmp uuid_00000000000df8ae
uuid_00000000000df8ac:
	push %RBP
	pushq -768(%RBP)
	pushq -776(%RBP)
	pushq -784(%RBP)
	jmp uuid_00000000000df8a9
	jmp uuid_00000000000df8ab
uuid_00000000000df8a9:
	push %RBP
	mov -760(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df8a6
	jmp uuid_00000000000df8a8
uuid_00000000000df8a6:
	push %RBP
	mov -752(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df8a3
	jmp uuid_00000000000df8a5
uuid_00000000000df8a3:
	push %RBP
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	jmp uuid_00000000000df8a0
	jmp uuid_00000000000df8a2
uuid_00000000000df8a0:
	movb $1, -832(%rbp)
uuid_00000000000df8a2:
	mov -1192(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000df8a5:
	mov -1136(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000df8a8:
	mov -1120(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000df8ab:
	mov -1088(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000df8ae:
	mov -880(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000df8b1:
	mov -848(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000df8b4:
	mov -840(%RBP),%RSP
	add $-1264, %RSP
	mov -832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df8b6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df8b5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df8b8
uuid_00000000000df8b6:
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1128(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq $0
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
uuid_00000000000df8b8:
	mov -672(%RBP),%RSP
	add $-1264, %RSP
	subq $152, %rsp
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $360, %rsp
	ret
fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df8cb
	jmp uuid_00000000000df8cd
uuid_00000000000df8cb:
	push %RBP
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	jmp uuid_00000000000df8c8
	jmp uuid_00000000000df8ca
uuid_00000000000df8c8:
	push %RBP
	mov -600(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df8c5
	jmp uuid_00000000000df8c7
uuid_00000000000df8c5:
	push %RBP
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	jmp uuid_00000000000df8c2
	jmp uuid_00000000000df8c4
uuid_00000000000df8c2:
	push %RBP
	mov -568(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df8bf
	jmp uuid_00000000000df8c1
uuid_00000000000df8bf:
	push %RBP
	mov -560(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df8bc
	jmp uuid_00000000000df8be
uuid_00000000000df8bc:
	push %RBP
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	jmp uuid_00000000000df8b9
	jmp uuid_00000000000df8bb
uuid_00000000000df8b9:
	movb $1, -640(%rbp)
uuid_00000000000df8bb:
	mov -1000(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000df8be:
	mov -944(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000df8c1:
	mov -928(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000df8c4:
	mov -896(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000df8c7:
	mov -688(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000df8ca:
	mov -656(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000df8cd:
	mov -648(%RBP),%RSP
	add $-1072, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df8cf
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df8ce
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df8d1
uuid_00000000000df8cf:
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -160(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq $0
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
uuid_00000000000df8d1:
	mov -480(%RBP),%RSP
	add $-1072, %RSP
	subq $152, %rsp
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $168, %rsp
	ret
fragment_CL__CL_set_SB_term_CL_ArrowFragmentConsASTFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df8e4
	jmp uuid_00000000000df8e6
uuid_00000000000df8e4:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000df8e1
	jmp uuid_00000000000df8e3
uuid_00000000000df8e1:
	push %RBP
	mov -512(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df8de
	jmp uuid_00000000000df8e0
uuid_00000000000df8de:
	push %RBP
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	jmp uuid_00000000000df8db
	jmp uuid_00000000000df8dd
uuid_00000000000df8db:
	push %RBP
	mov -480(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df8d8
	jmp uuid_00000000000df8da
uuid_00000000000df8d8:
	push %RBP
	mov -472(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df8d5
	jmp uuid_00000000000df8d7
uuid_00000000000df8d5:
	push %RBP
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	jmp uuid_00000000000df8d2
	jmp uuid_00000000000df8d4
uuid_00000000000df8d2:
	movb $1, -552(%rbp)
uuid_00000000000df8d4:
	mov -912(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000df8d7:
	mov -856(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000df8da:
	mov -840(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000df8dd:
	mov -808(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000df8e0:
	mov -600(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000df8e3:
	mov -568(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000df8e6:
	mov -560(%RBP),%RSP
	add $-984, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df8e8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df8e7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df8ea
uuid_00000000000df8e8:
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -848(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq $0
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000df8ea:
	mov -392(%RBP),%RSP
	add $-984, %RSP
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $232, %rsp
	ret
fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df8fd
	jmp uuid_00000000000df8ff
uuid_00000000000df8fd:
	push %RBP
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	jmp uuid_00000000000df8fa
	jmp uuid_00000000000df8fc
uuid_00000000000df8fa:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df8f7
	jmp uuid_00000000000df8f9
uuid_00000000000df8f7:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000df8f4
	jmp uuid_00000000000df8f6
uuid_00000000000df8f4:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df8f1
	jmp uuid_00000000000df8f3
uuid_00000000000df8f1:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df8ee
	jmp uuid_00000000000df8f0
uuid_00000000000df8ee:
	push %RBP
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	jmp uuid_00000000000df8eb
	jmp uuid_00000000000df8ed
uuid_00000000000df8eb:
	movb $1, -504(%rbp)
uuid_00000000000df8ed:
	mov -864(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000df8f0:
	mov -808(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000df8f3:
	mov -792(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000df8f6:
	mov -760(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000df8f9:
	mov -552(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000df8fc:
	mov -520(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000df8ff:
	mov -512(%RBP),%RSP
	add $-936, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df901
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df900
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df903
uuid_00000000000df901:
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -800(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq $0
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000df903:
	mov -344(%RBP),%RSP
	add $-936, %RSP
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $184, %rsp
	ret
fragment_CL__CL_set_SB_vararg_CL_ArrowFragmentConsListArray_QM_FragmentFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df916
	jmp uuid_00000000000df918
uuid_00000000000df916:
	push %RBP
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	jmp uuid_00000000000df913
	jmp uuid_00000000000df915
uuid_00000000000df913:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df910
	jmp uuid_00000000000df912
uuid_00000000000df910:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000df90d
	jmp uuid_00000000000df90f
uuid_00000000000df90d:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df90a
	jmp uuid_00000000000df90c
uuid_00000000000df90a:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df907
	jmp uuid_00000000000df909
uuid_00000000000df907:
	push %RBP
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	jmp uuid_00000000000df904
	jmp uuid_00000000000df906
uuid_00000000000df904:
	movb $1, -504(%rbp)
uuid_00000000000df906:
	mov -864(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000df909:
	mov -808(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000df90c:
	mov -792(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000df90f:
	mov -760(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000df912:
	mov -552(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000df915:
	mov -520(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000df918:
	mov -512(%RBP),%RSP
	add $-936, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df91a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df919
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df91c
uuid_00000000000df91a:
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -800(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000df91c:
	mov -344(%RBP),%RSP
	add $-936, %RSP
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $184, %rsp
	ret
fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq $0
	push %RBP
	mov -504(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df92f
	jmp uuid_00000000000df931
uuid_00000000000df92f:
	push %RBP
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	jmp uuid_00000000000df92c
	jmp uuid_00000000000df92e
uuid_00000000000df92c:
	push %RBP
	mov -472(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df929
	jmp uuid_00000000000df92b
uuid_00000000000df929:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	jmp uuid_00000000000df926
	jmp uuid_00000000000df928
uuid_00000000000df926:
	push %RBP
	mov -440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df923
	jmp uuid_00000000000df925
uuid_00000000000df923:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df920
	jmp uuid_00000000000df922
uuid_00000000000df920:
	push %RBP
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	jmp uuid_00000000000df91d
	jmp uuid_00000000000df91f
uuid_00000000000df91d:
	movb $1, -512(%rbp)
uuid_00000000000df91f:
	mov -872(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000df922:
	mov -816(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000df925:
	mov -800(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000df928:
	mov -768(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000df92b:
	mov -560(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000df92e:
	mov -528(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000df931:
	mov -520(%RBP),%RSP
	add $-944, %RSP
	mov -512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df933
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df932
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df935
uuid_00000000000df933:
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -808(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq $0
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000df935:
	mov -352(%RBP),%RSP
	add $-944, %RSP
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $192, %rsp
	ret
main:
	pushq $1
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000df980:
	mov -32(%RBP), %RAX
	mov -8(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df981
	jmp uuid_00000000000df982
uuid_00000000000df981:
	mov -16(%RBP), %R15
	mov -32(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $uuid_00000000000df936
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df97d
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq $uuid_00000000000df93c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df97a
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $uuid_00000000000df941
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df977
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000df947
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df974
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $uuid_00000000000df948
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df971
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $uuid_00000000000df949
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df96e
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq $uuid_00000000000df94a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df96b
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq $uuid_00000000000df94b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df968
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000df94c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df965
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq $uuid_00000000000df94d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df962
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000df94e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df95f
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq $uuid_00000000000df94f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df95c
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq $uuid_00000000000df950
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df959
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $uuid_00000000000df951
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df956
	push %RBP
	pushq -64(%rbp)
	jmp uuid_00000000000df953
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df952
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df955
uuid_00000000000df953:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -304(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000df955:
	mov -296(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000df958
uuid_00000000000df956:
	mov -32(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -16(%RBP), %R15
	mov -32(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	movq %R15, %r15
	movq $config_SB_target_CL_String, %r14
	movq %r15, 0(%r14)
uuid_00000000000df958:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000df95b
uuid_00000000000df959:
	mov $config_SB_profile_SB_invocations_CL_U8, %r15
	movb $1, 0(%r15)
uuid_00000000000df95b:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000df95e
uuid_00000000000df95c:
	mov $config_SB_preprocess_CL_U8, %r15
	movb $0, 0(%r15)
uuid_00000000000df95e:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000df961
uuid_00000000000df95f:
	mov $config_SB_preprocess_CL_U8, %r15
	movb $1, 0(%r15)
uuid_00000000000df961:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000df964
uuid_00000000000df962:
	mov $config_SB_strict_CL_U8, %r15
	movb $0, 0(%r15)
uuid_00000000000df964:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000df967
uuid_00000000000df965:
	mov $config_SB_strict_CL_U8, %r15
	movb $1, 0(%r15)
uuid_00000000000df967:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000df96a
uuid_00000000000df968:
	pushq $0
	movq $config_SB_mode_CL_CompileModeCompileMode, %R15
	popq 0(%R15)
uuid_00000000000df96a:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000df96d
uuid_00000000000df96b:
	pushq $1
	movq $config_SB_mode_CL_CompileModeCompileMode, %R15
	popq 0(%R15)
uuid_00000000000df96d:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000df970
uuid_00000000000df96e:
	pushq $2
	movq $config_SB_mode_CL_CompileModeCompileMode, %R15
	popq 0(%R15)
uuid_00000000000df970:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000df973
uuid_00000000000df971:
	pushq $3
	movq $config_SB_mode_CL_CompileModeCompileMode, %R15
	popq 0(%R15)
uuid_00000000000df973:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000df976
uuid_00000000000df974:
	pushq $4
	movq $config_SB_mode_CL_CompileModeCompileMode, %R15
	popq 0(%R15)
uuid_00000000000df976:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000df979
uuid_00000000000df977:
	pushq $2
	movq $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %R15
	popq 0(%R15)
	mov $config_SB_platform_SB_prefix_CL_String, %r15
	movq $uuid_00000000000df942, 0(%r15)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_target_CL_String, %r15
	pushq 0(%r15)
	pushq $uuid_00000000000daee6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df944
	jmp uuid_00000000000df946
uuid_00000000000df944:
	mov $config_SB_target_CL_String, %r15
	movq $uuid_00000000000df943, 0(%r15)
uuid_00000000000df946:
	mov -120(%RBP),%RSP
	add $-120, %RSP
uuid_00000000000df979:
	mov -104(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000df97c
uuid_00000000000df97a:
	pushq $1
	movq $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %R15
	popq 0(%R15)
	mov $config_SB_platform_SB_prefix_CL_String, %r15
	movq $uuid_00000000000daf3b, 0(%r15)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_target_CL_String, %r15
	pushq 0(%r15)
	pushq $uuid_00000000000daee6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df93e
	jmp uuid_00000000000df940
uuid_00000000000df93e:
	mov $config_SB_target_CL_String, %r15
	movq $uuid_00000000000df93d, 0(%r15)
uuid_00000000000df940:
	mov -104(%RBP),%RSP
	add $-104, %RSP
uuid_00000000000df97c:
	mov -88(%RBP),%RSP
	add $-104, %RSP
	jmp uuid_00000000000df97f
uuid_00000000000df97d:
	pushq $0
	movq $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %R15
	popq 0(%R15)
	mov $config_SB_platform_SB_prefix_CL_String, %r15
	movq $uuid_00000000000df937, 0(%r15)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_target_CL_String, %r15
	pushq 0(%r15)
	pushq $uuid_00000000000daee6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df939
	jmp uuid_00000000000df93b
uuid_00000000000df939:
	mov $config_SB_target_CL_String, %r15
	movq $uuid_00000000000df938, 0(%r15)
uuid_00000000000df93b:
	mov -88(%RBP),%RSP
	add $-88, %RSP
uuid_00000000000df97f:
	mov -72(%RBP),%RSP
	add $-88, %RSP
	mov -32(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000df980
uuid_00000000000df982:
	pushq $1
uuid_00000000000df9ae:
	mov -64(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df9af
	jmp uuid_00000000000df9b0
uuid_00000000000df9af:
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df9ab
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -152(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df989
	jmp uuid_00000000000df98b
uuid_00000000000df989:
	push %RBP
	mov -144(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df986
	jmp uuid_00000000000df988
uuid_00000000000df986:
	push %RBP
	mov -136(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df983
	jmp uuid_00000000000df985
uuid_00000000000df983:
	movb $1, -160(%rbp)
uuid_00000000000df985:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000df988:
	mov -176(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000df98b:
	mov -168(%RBP),%RSP
	add $-232, %RSP
	mov -160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df9a8
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df998
	jmp uuid_00000000000df99a
uuid_00000000000df998:
	push %RBP
	mov -256(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df98f
	jmp uuid_00000000000df991
uuid_00000000000df98f:
	push %RBP
	mov -304(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df98c
	jmp uuid_00000000000df98e
uuid_00000000000df98c:
	movb $1, -320(%rbp)
uuid_00000000000df98e:
	mov -336(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000df991:
	mov -328(%RBP),%RSP
	add $-344, %RSP
	mov -320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df995
	jmp uuid_00000000000df997
uuid_00000000000df995:
	push %RBP
	mov -248(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df992
	jmp uuid_00000000000df994
uuid_00000000000df992:
	movb $1, -272(%rbp)
uuid_00000000000df994:
	mov -352(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000df997:
	mov -288(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000df99a:
	mov -280(%RBP),%RSP
	add $-376, %RSP
	mov -272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df9a5
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df99e
	jmp uuid_00000000000df9a0
uuid_00000000000df99e:
	push %RBP
	mov -400(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df99b
	jmp uuid_00000000000df99d
uuid_00000000000df99b:
	movb $1, -416(%rbp)
uuid_00000000000df99d:
	mov -432(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000df9a0:
	mov -424(%RBP),%RSP
	add $-440, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df9a2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df9a1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df9a4
uuid_00000000000df9a2:
#call function tokenize : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -440(%rbp)
	mov %RBX, %RBP
	call tokenize_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movb $0, -64(%rbp)
uuid_00000000000df9a4:
	mov -384(%RBP),%RSP
	add $-440, %RSP
	jmp uuid_00000000000df9a7
uuid_00000000000df9a5:
#call function tokenize : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -344(%rbp)
	mov %RBX, %RBP
	call tokenize_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -376(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000df9a7:
	mov -240(%RBP),%RSP
	add $-376, %RSP
	jmp uuid_00000000000df9aa
uuid_00000000000df9a8:
	movq -232(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -224(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -216(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000df9aa:
	mov -128(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000df9ad
uuid_00000000000df9ab:
	movb $0, -64(%rbp)
uuid_00000000000df9ad:
	mov -96(%RBP),%RSP
	add $-120, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %RSP
	jmp uuid_00000000000df9ae
uuid_00000000000df9b0:
	mov $config_SB_mode_CL_CompileModeCompileMode, %r15
	pushq 0(%r15)
	push %RBP
	pushq -72(%rbp)
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df9c6
	push %RBP
	pushq -72(%rbp)
	mov -104(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df9c3
	push %RBP
	pushq -72(%rbp)
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df9c0
	push %RBP
	pushq -72(%rbp)
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df9bd
	push %RBP
	pushq -72(%rbp)
	mov -152(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df9ba
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df9b9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df9bc
uuid_00000000000df9ba:
#call function parse : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call parse_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function preprocess : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call preprocess_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function typecheck : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call typecheck_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function compile : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000df9bc:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000df9bf
uuid_00000000000df9bd:
#call function parse : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call parse_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function preprocess : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call preprocess_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function typecheck : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call typecheck_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000df9bf:
	mov -128(%RBP),%RSP
	add $-136, %RSP
	jmp uuid_00000000000df9c2
uuid_00000000000df9c0:
#call function parse : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call parse_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function preprocess : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call preprocess_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000df9c2:
	mov -112(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000df9c5
uuid_00000000000df9c3:
#call function parse : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call parse_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000df9c5:
	mov -96(%RBP),%RSP
	add $-104, %RSP
	jmp uuid_00000000000df9c8
uuid_00000000000df9c6:
#call function print : Arrow<List<Token>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call print_CL_ArrowNilListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000df9c8:
	mov -80(%RBP),%RSP
	add $-88, %RSP
	mov %rbp, %rsp
	sub $24, %rsp
	ret
print_CL_ArrowNilListToken:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae20
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000df9dd:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df9de
	jmp uuid_00000000000df9df
uuid_00000000000df9de:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df9d3
	jmp uuid_00000000000df9d5
uuid_00000000000df9d3:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df9d0
	jmp uuid_00000000000df9d2
uuid_00000000000df9d0:
	push %RBP
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	jmp uuid_00000000000df9cd
	jmp uuid_00000000000df9cf
uuid_00000000000df9cd:
	movb $1, -248(%rbp)
uuid_00000000000df9cf:
	mov -344(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000df9d2:
	mov -264(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000df9d5:
	mov -256(%RBP),%RSP
	add $-400, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df9da
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000df9d9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df9dc
uuid_00000000000df9da:
	push %RBP
	mov -88(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df9d6
	jmp uuid_00000000000df9d8
uuid_00000000000df9d6:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db257
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000df9d8:
	mov -408(%RBP),%RSP
	add $-408, %RSP
#call function print : Arrow<Token,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movb $1, -88(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -320(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -312(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -304(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -296(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -288(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000df9dc:
	mov -168(%RBP),%RSP
	add $-408, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000df9dd
uuid_00000000000df9df:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dae21
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
non_SB_zero_CL_ArrowU64ListToken:
	mov $1, %RAX
	push %RAX
	mov -72(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
close_CL_ArrowArray_QM_SS:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $24
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -24(%rbp), %r15
	movq %r15, 0(%r14)
	movq -16(%rbp), %r15
	movq %r15, 8(%r14)
	movq -8(%rbp), %r15
	movq %r15, 16(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
close_CL_ArrowArray_QM_FContextFContext:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $200
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -200(%rbp), %r15
	movq %r15, 0(%r14)
	movq -192(%rbp), %r15
	movq %r15, 8(%r14)
	movq -184(%rbp), %r15
	movq %r15, 16(%r14)
	movq -176(%rbp), %r15
	movq %r15, 24(%r14)
	movq -168(%rbp), %r15
	movq %r15, 32(%r14)
	movq -160(%rbp), %r15
	movq %r15, 40(%r14)
	movq -152(%rbp), %r15
	movq %r15, 48(%r14)
	movq -144(%rbp), %r15
	movq %r15, 56(%r14)
	movq -136(%rbp), %r15
	movq %r15, 64(%r14)
	movq -128(%rbp), %r15
	movq %r15, 72(%r14)
	movq -120(%rbp), %r15
	movq %r15, 80(%r14)
	movq -112(%rbp), %r15
	movq %r15, 88(%r14)
	movq -104(%rbp), %r15
	movq %r15, 96(%r14)
	movq -96(%rbp), %r15
	movq %r15, 104(%r14)
	movq -88(%rbp), %r15
	movq %r15, 112(%r14)
	movq -80(%rbp), %r15
	movq %r15, 120(%r14)
	movq -72(%rbp), %r15
	movq %r15, 128(%r14)
	movq -64(%rbp), %r15
	movq %r15, 136(%r14)
	movq -56(%rbp), %r15
	movq %r15, 144(%r14)
	movq -48(%rbp), %r15
	movq %r15, 152(%r14)
	movq -40(%rbp), %r15
	movq %r15, 160(%r14)
	movq -32(%rbp), %r15
	movq %r15, 168(%r14)
	movq -24(%rbp), %r15
	movq %r15, 176(%r14)
	movq -16(%rbp), %r15
	movq %r15, 184(%r14)
	movq -8(%rbp), %r15
	movq %r15, 192(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $208, %rsp
	ret
close_CL_ArrowArray_QM_FragmentKVFragmentKV:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $48
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -48(%rbp), %r15
	movq %r15, 0(%r14)
	movq -40(%rbp), %r15
	movq %r15, 8(%r14)
	movq -32(%rbp), %r15
	movq %r15, 16(%r14)
	movq -24(%rbp), %r15
	movq %r15, 24(%r14)
	movq -16(%rbp), %r15
	movq %r15, 32(%r14)
	movq -8(%rbp), %r15
	movq %r15, 40(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
close_CL_ArrowArray_QM_ContextContext:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $96
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -96(%rbp), %r15
	movq %r15, 0(%r14)
	movq -88(%rbp), %r15
	movq %r15, 8(%r14)
	movq -80(%rbp), %r15
	movq %r15, 16(%r14)
	movq -72(%rbp), %r15
	movq %r15, 24(%r14)
	movq -64(%rbp), %r15
	movq %r15, 32(%r14)
	movq -56(%rbp), %r15
	movq %r15, 40(%r14)
	movq -48(%rbp), %r15
	movq %r15, 48(%r14)
	movq -40(%rbp), %r15
	movq %r15, 56(%r14)
	movq -32(%rbp), %r15
	movq %r15, 64(%r14)
	movq -24(%rbp), %r15
	movq %r15, 72(%r14)
	movq -16(%rbp), %r15
	movq %r15, 80(%r14)
	movq -8(%rbp), %r15
	movq %r15, 88(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $104, %rsp
	ret
close_CL_ArrowArray_QM_ASTAST:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $72
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -72(%rbp), %r15
	movq %r15, 0(%r14)
	movq -64(%rbp), %r15
	movq %r15, 8(%r14)
	movq -56(%rbp), %r15
	movq %r15, 16(%r14)
	movq -48(%rbp), %r15
	movq %r15, 24(%r14)
	movq -40(%rbp), %r15
	movq %r15, 32(%r14)
	movq -32(%rbp), %r15
	movq %r15, 40(%r14)
	movq -24(%rbp), %r15
	movq %r15, 48(%r14)
	movq -16(%rbp), %r15
	movq %r15, 56(%r14)
	movq -8(%rbp), %r15
	movq %r15, 64(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
non_SB_zero_CL_ArrowU64ListArray_QM_Fragment:
	mov $1, %RAX
	push %RAX
	mov -24(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
non_SB_zero_CL_ArrowU64ListFragment:
	mov $1, %RAX
	push %RAX
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
is_CL_ArrowU64ConsSized8Sized8:
	pushq $0
	pushq $1
uuid_00000000000df9eb:
	mov $8, %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df9ec
	jmp uuid_00000000000df9ed
uuid_00000000000df9ec:
	mov %RBP, %R15
	add $-8, %R15
	mov -32(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	mov %RBP, %R15
	add $-16, %R15
	mov -32(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	push %RBP
	mov -48(%RBP), %RAX
	mov -56(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df9e8
	movq $0, -40(%rbp)
	jmp uuid_00000000000df9ea
uuid_00000000000df9e8:
uuid_00000000000df9ea:
	mov -64(%RBP),%RSP
	add $-64, %RSP
	mov -32(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000df9eb
uuid_00000000000df9ed:
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
close_CL_ArrowArray_QM_TypeType:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $24
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -24(%rbp), %r15
	movq %r15, 0(%r14)
	movq -16(%rbp), %r15
	movq %r15, 8(%r14)
	movq -8(%rbp), %r15
	movq %r15, 16(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
close_CL_ArrowArray_QM_StringStringListStringStringList:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $32
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -32(%rbp), %r15
	movq %r15, 0(%r14)
	movq -24(%rbp), %r15
	movq %r15, 8(%r14)
	movq -16(%rbp), %r15
	movq %r15, 16(%r14)
	movq -8(%rbp), %r15
	movq %r15, 24(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
_DT_lookup_CL_ArrowStringConsStringConsTypeHashtableEqStringType:
	mov -16(%RBP), %RAX
	push %RAX
	push %RBP
	mov -80(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa0a
	mov -24(%RBP), %RAX
	push %RAX
	pushq $0
#call function deep-hash : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -80(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -96(%RBP), %R15
	mov -112(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	pushq -120(%RBP)
	pushq -128(%RBP)
	pushq -136(%RBP)
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df9fe
	jmp uuid_00000000000dfa00
uuid_00000000000df9fe:
	movq $1, -104(%rbp)
uuid_00000000000dfa00:
	mov -184(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000dfa04:
	mov -104(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<40>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized40
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa05
	jmp uuid_00000000000dfa06
uuid_00000000000dfa05:
	mov -112(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -80(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -112(%rbp)
	mov -96(%RBP), %R15
	mov -112(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	pushq -120(%RBP)
	pushq -128(%RBP)
	pushq -136(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfa01
	jmp uuid_00000000000dfa03
uuid_00000000000dfa01:
	movq $1, -104(%rbp)
uuid_00000000000dfa03:
	mov -192(%RBP),%RSP
	add $-192, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfa04
uuid_00000000000dfa06:
	push %RBP
	mov -104(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa07
	jmp uuid_00000000000dfa09
uuid_00000000000dfa07:
	mov -144(%RBP), %RAX
	push %RAX
	movq -200(%rbp), %r15
	movq %r15, -64(%rbp)
	mov -200(%rbp), %r15
	mov %r15, -64(%rbp)
uuid_00000000000dfa09:
	mov -192(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000dfa0c
uuid_00000000000dfa0a:
uuid_00000000000dfa0c:
	mov -88(%RBP),%RSP
	add $-88, %RSP
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $72, %rsp
	ret
mem_SB_is_SB_nonzero_CL_ArrowU64Sized40:
	pushq $0
	pushq $0
uuid_00000000000dfa10:
	mov -56(%RBP), %RAX
	mov $40, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa11
	jmp uuid_00000000000dfa12
uuid_00000000000dfa11:
	push %RBP
	mov %RBP, %R15
	add $-40, %R15
	mov -56(%RBP), %R14
	add %R14, %R15
	mov 0(%R15), %R15B
	mov %R15B, %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	setne %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa0d
	jmp uuid_00000000000dfa0f
uuid_00000000000dfa0d:
	movq $1, -64(%rbp)
uuid_00000000000dfa0f:
	mov -72(%RBP),%RSP
	add $-72, %RSP
	mov -56(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
	add $8, %RSP
	jmp uuid_00000000000dfa10
uuid_00000000000dfa12:
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
reverse_CL_ArrowListTokenListToken:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000dfa28:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfa29
	jmp uuid_00000000000dfa2a
uuid_00000000000dfa29:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa21
	jmp uuid_00000000000dfa23
uuid_00000000000dfa21:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dfa1e
	jmp uuid_00000000000dfa20
uuid_00000000000dfa1e:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	pushq -280(%RBP)
	pushq -288(%RBP)
	jmp uuid_00000000000dfa1b
	jmp uuid_00000000000dfa1d
uuid_00000000000dfa1b:
	movb $1, -312(%rbp)
uuid_00000000000dfa1d:
	mov -408(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000dfa20:
	mov -328(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000dfa23:
	mov -320(%RBP),%RSP
	add $-464, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa25
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dfa24
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dfa27
uuid_00000000000dfa25:
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -400(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -392(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dfa27:
	mov -232(%RBP),%RSP
	add $-464, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfa28
uuid_00000000000dfa2a:
	subq $72, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
close_CL_ArrowArray_QM_ListTokenListTokenListTokenListToken:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $72
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -72(%rbp), %r15
	movq %r15, 0(%r14)
	movq -64(%rbp), %r15
	movq %r15, 8(%r14)
	movq -56(%rbp), %r15
	movq %r15, 16(%r14)
	movq -48(%rbp), %r15
	movq %r15, 24(%r14)
	movq -40(%rbp), %r15
	movq %r15, 32(%r14)
	movq -32(%rbp), %r15
	movq %r15, 40(%r14)
	movq -24(%rbp), %r15
	movq %r15, 48(%r14)
	movq -16(%rbp), %r15
	movq %r15, 56(%r14)
	movq -8(%rbp), %r15
	movq %r15, 64(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
cons_CL_ArrowListTokenConsListTokenToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	subq $72, %rsp
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
head_CL_ArrowTokenListToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa42
	push %RBP
	jmp uuid_00000000000dfa3f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dfa3e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dfa41
uuid_00000000000dfa3f:
uuid_00000000000dfa41:
	mov -240(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000dfa44
uuid_00000000000dfa42:
#call function fail : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dfa3d
	mov %RBX, %RBP
	call fail_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dfa44:
	mov -160(%RBP),%RSP
	add $-232, %RSP
	pushq -8(%RBP)
	pushq -16(%RBP)
	pushq -24(%RBP)
	pushq -32(%RBP)
	pushq -40(%RBP)
	pushq -48(%RBP)
	pushq -56(%RBP)
	subq $56, %rsp
	pushq 56(%rsp)
	pushq 72(%rsp)
	pushq 88(%rsp)
	pushq 104(%rsp)
	pushq 120(%rsp)
	pushq 136(%rsp)
	pushq 152(%rsp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
close_CL_ArrowArray_QM_ListTypeListType:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $40
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -40(%rbp), %r15
	movq %r15, 0(%r14)
	movq -32(%rbp), %r15
	movq %r15, 8(%r14)
	movq -24(%rbp), %r15
	movq %r15, 16(%r14)
	movq -16(%rbp), %r15
	movq %r15, 24(%r14)
	movq -8(%rbp), %r15
	movq %r15, 32(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
cons_CL_ArrowListTypeConsListTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	subq $40, %rsp
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $72, %rsp
	ret
close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $40
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -40(%rbp), %r15
	movq %r15, 0(%r14)
	movq -32(%rbp), %r15
	movq %r15, 8(%r14)
	movq -24(%rbp), %r15
	movq %r15, 16(%r14)
	movq -16(%rbp), %r15
	movq %r15, 24(%r14)
	movq -8(%rbp), %r15
	movq %r15, 32(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
close_CL_ArrowArray_QM_SfxListSfxList:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $48
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -48(%rbp), %r15
	movq %r15, 0(%r14)
	movq -40(%rbp), %r15
	movq %r15, 8(%r14)
	movq -32(%rbp), %r15
	movq %r15, 16(%r14)
	movq -24(%rbp), %r15
	movq %r15, 24(%r14)
	movq -16(%rbp), %r15
	movq %r15, 32(%r14)
	movq -8(%rbp), %r15
	movq %r15, 40(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
close_CL_ArrowArray_QM_MacroListMacroList:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $168
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -168(%rbp), %r15
	movq %r15, 0(%r14)
	movq -160(%rbp), %r15
	movq %r15, 8(%r14)
	movq -152(%rbp), %r15
	movq %r15, 16(%r14)
	movq -144(%rbp), %r15
	movq %r15, 24(%r14)
	movq -136(%rbp), %r15
	movq %r15, 32(%r14)
	movq -128(%rbp), %r15
	movq %r15, 40(%r14)
	movq -120(%rbp), %r15
	movq %r15, 48(%r14)
	movq -112(%rbp), %r15
	movq %r15, 56(%r14)
	movq -104(%rbp), %r15
	movq %r15, 64(%r14)
	movq -96(%rbp), %r15
	movq %r15, 72(%r14)
	movq -88(%rbp), %r15
	movq %r15, 80(%r14)
	movq -80(%rbp), %r15
	movq %r15, 88(%r14)
	movq -72(%rbp), %r15
	movq %r15, 96(%r14)
	movq -64(%rbp), %r15
	movq %r15, 104(%r14)
	movq -56(%rbp), %r15
	movq %r15, 112(%r14)
	movq -48(%rbp), %r15
	movq %r15, 120(%r14)
	movq -40(%rbp), %r15
	movq %r15, 128(%r14)
	movq -32(%rbp), %r15
	movq %r15, 136(%r14)
	movq -24(%rbp), %r15
	movq %r15, 144(%r14)
	movq -16(%rbp), %r15
	movq %r15, 152(%r14)
	movq -8(%rbp), %r15
	movq %r15, 160(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
close_CL_ArrowArray_QM_FragmentListFragmentList:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $168
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -168(%rbp), %r15
	movq %r15, 0(%r14)
	movq -160(%rbp), %r15
	movq %r15, 8(%r14)
	movq -152(%rbp), %r15
	movq %r15, 16(%r14)
	movq -144(%rbp), %r15
	movq %r15, 24(%r14)
	movq -136(%rbp), %r15
	movq %r15, 32(%r14)
	movq -128(%rbp), %r15
	movq %r15, 40(%r14)
	movq -120(%rbp), %r15
	movq %r15, 48(%r14)
	movq -112(%rbp), %r15
	movq %r15, 56(%r14)
	movq -104(%rbp), %r15
	movq %r15, 64(%r14)
	movq -96(%rbp), %r15
	movq %r15, 72(%r14)
	movq -88(%rbp), %r15
	movq %r15, 80(%r14)
	movq -80(%rbp), %r15
	movq %r15, 88(%r14)
	movq -72(%rbp), %r15
	movq %r15, 96(%r14)
	movq -64(%rbp), %r15
	movq %r15, 104(%r14)
	movq -56(%rbp), %r15
	movq %r15, 112(%r14)
	movq -48(%rbp), %r15
	movq %r15, 120(%r14)
	movq -40(%rbp), %r15
	movq %r15, 128(%r14)
	movq -32(%rbp), %r15
	movq %r15, 136(%r14)
	movq -24(%rbp), %r15
	movq %r15, 144(%r14)
	movq -16(%rbp), %r15
	movq %r15, 152(%r14)
	movq -8(%rbp), %r15
	movq %r15, 160(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
_DT_lookup_CL_ArrowU64ConsU64ConsStringHashtableEqU64String:
	mov -16(%RBP), %RAX
	push %RAX
	push %RBP
	mov -64(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa74
	mov -24(%RBP), %RAX
	push %RAX
	pushq $0
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -64(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -80(%RBP), %R15
	mov -96(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	mov -104(%RBP), %RAX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfa68
	jmp uuid_00000000000dfa6a
uuid_00000000000dfa68:
	movq $1, -88(%rbp)
uuid_00000000000dfa6a:
	mov -136(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000dfa6e:
	mov -88(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<24>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized24
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa6f
	jmp uuid_00000000000dfa70
uuid_00000000000dfa6f:
	mov -96(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -64(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -96(%rbp)
	mov -80(%RBP), %R15
	mov -96(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	mov -104(%RBP), %RAX
	movq %RAX, -128(%rbp)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfa6b
	jmp uuid_00000000000dfa6d
uuid_00000000000dfa6b:
	movq $1, -88(%rbp)
uuid_00000000000dfa6d:
	mov -144(%RBP),%RSP
	add $-144, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfa6e
uuid_00000000000dfa70:
	push %RBP
	mov -88(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa71
	jmp uuid_00000000000dfa73
uuid_00000000000dfa71:
	mov -112(%RBP), %RAX
	push %RAX
	movq -152(%rbp), %r15
	movq %r15, -48(%rbp)
	mov -152(%rbp), %r15
	mov %r15, -48(%rbp)
uuid_00000000000dfa73:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000dfa76
uuid_00000000000dfa74:
uuid_00000000000dfa76:
	mov -72(%RBP),%RSP
	add $-72, %RSP
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
mem_SB_is_SB_nonzero_CL_ArrowU64Sized24:
	pushq $0
	pushq $0
uuid_00000000000dfa7a:
	mov -40(%RBP), %RAX
	mov $24, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa7b
	jmp uuid_00000000000dfa7c
uuid_00000000000dfa7b:
	push %RBP
	mov %RBP, %R15
	add $-24, %R15
	mov -40(%RBP), %R14
	add %R14, %R15
	mov 0(%R15), %R15B
	mov %R15B, %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	setne %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa77
	jmp uuid_00000000000dfa79
uuid_00000000000dfa77:
	movq $1, -48(%rbp)
uuid_00000000000dfa79:
	mov -56(%RBP),%RSP
	add $-56, %RSP
	mov -40(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
	add $8, %RSP
	jmp uuid_00000000000dfa7a
uuid_00000000000dfa7c:
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
_DT_bind_CL_ArrowHashtableEqU64StringConsU64ConsStringHashtableEqU64String:
	mov -8(%RBP), %RAX
	push %RAX
	mov -16(%RBP), %RAX
	push %RAX
	mov -24(%RBP), %RAX
	push %RAX
	push %RBP
	mov -64(%RBP), %RAX
	mov $3, %R14
	mul %R14
	mov %RAX, %RAX
	mov -72(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfaa2
	jmp uuid_00000000000dfaa4
uuid_00000000000dfaa2:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1000
	mov -64(%RBP), %RAX
	mov $30, %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov $24, %RAX
	mov -96(%RBP), %R14
	mul %R14
	push %RAX
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -104(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function memset : Arrow<Cons<Cons<Array<?,?>,U8>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $0
	pushq -104(%rbp)
	mov %RBX, %RBP
	call memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000dfa9f:
	mov -120(%RBP), %RAX
	mov -72(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfaa0
	jmp uuid_00000000000dfaa1
uuid_00000000000dfaa0:
	mov -80(%RBP), %R15
	mov -120(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	push %RBP
#call function mem-is-nonzero : Arrow<Sized<24>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized24
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfa9c
	jmp uuid_00000000000dfa9e
uuid_00000000000dfa9c:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa95
	jmp uuid_00000000000dfa97
uuid_00000000000dfa95:
	push %RBP
	mov -200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dfa92
	jmp uuid_00000000000dfa94
uuid_00000000000dfa92:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dfa8f
	jmp uuid_00000000000dfa91
uuid_00000000000dfa8f:
	movb $1, -216(%rbp)
uuid_00000000000dfa91:
	mov -248(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000dfa94:
	mov -232(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000dfa97:
	mov -224(%RBP),%RSP
	add $-256, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa99
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dfa98
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dfa9b
uuid_00000000000dfa99:
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<String,U64>,?>,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -96(%rbp)
	pushq -256(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsU64ConsStringConsU64Array_QM_TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000dfa9b:
	pop %RAX
	mov -184(%RBP),%RSP
	add $-256, %RSP
	push %RAX
uuid_00000000000dfa9e:
	pop %RAX
	mov -152(%RBP),%RSP
	add $-256, %RSP
	mov -120(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -120(%rbp)
	add $24, %rsp
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfa9f
uuid_00000000000dfaa1:
	movq -112(%rbp), %r15
	movq %r15, -80(%rbp)
	mov -112(%rbp), %r15
	mov %r15, -80(%rbp)
	movq -96(%rbp), %r15
	movq %r15, -72(%rbp)
	mov -96(%rbp), %r15
	mov %r15, -72(%rbp)
uuid_00000000000dfaa4:
	mov -88(%RBP),%RSP
	add $-120, %RSP
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<String,U64>,?>,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsU64ConsStringConsU64Array_QM_TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -128(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfaa5
	mov -64(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -64(%rbp)
	jmp uuid_00000000000dfaa7
uuid_00000000000dfaa5:
uuid_00000000000dfaa7:
	mov -136(%RBP),%RSP
	add $-136, %RSP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	subq $32, %rsp
	pushq 32(%rsp)
	pushq 48(%rsp)
	pushq 64(%rsp)
	pushq 80(%rsp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
_DT_bind_SB_eq_CL_ArrowU64ConsU64ConsStringConsU64Array_QM_TupleU64String:
	pushq $0
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -8(%RBP), %R15
	mov -56(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	mov -64(%RBP), %RAX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfaac
	jmp uuid_00000000000dfaae
uuid_00000000000dfaac:
	movq $1, -48(%rbp)
uuid_00000000000dfaae:
	mov -96(%RBP),%RSP
	add $-96, %RSP
uuid_00000000000dfab2:
	mov -48(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<24>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized24
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfab3
	jmp uuid_00000000000dfab4
uuid_00000000000dfab3:
	mov -56(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -56(%rbp)
	mov -8(%RBP), %R15
	mov -56(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	mov -64(%RBP), %RAX
	movq %RAX, -88(%rbp)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfaaf
	jmp uuid_00000000000dfab1
uuid_00000000000dfaaf:
	movq $1, -48(%rbp)
uuid_00000000000dfab1:
	mov -104(%RBP),%RSP
	add $-104, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfab2
uuid_00000000000dfab4:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	mov -8(%RBP), %R15
	mov -56(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	mov -120(%RBP), %RAX
	mov %RAX, 0(%R15)
	mov -112(%RBP), %RAX
	mov %RAX, 8(%R15)
	mov -104(%RBP), %RAX
	mov %RAX, 16(%R15)
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
max_CL_ArrowU64ConsU64U64:
	push %RBP
	mov -8(%RBP), %RAX
	mov -16(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfab5
	jmp uuid_00000000000dfab7
uuid_00000000000dfab5:
	movq -16(%rbp), %r15
	movq %r15, -8(%rbp)
	mov -16(%rbp), %r15
	mov %r15, -8(%rbp)
uuid_00000000000dfab7:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -8(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
max_CL_ArrowI64ConsI64I64:
	push %RBP
	mov -8(%RBP), %RAX
	mov -16(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfab8
	jmp uuid_00000000000dfaba
uuid_00000000000dfab8:
	movq -16(%rbp), %r15
	movq %r15, -8(%rbp)
	mov -16(%rbp), %r15
	mov %r15, -8(%rbp)
uuid_00000000000dfaba:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -8(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
close_CL_ArrowArray_QM_ListTokenListToken:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $72
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -72(%rbp), %r15
	movq %r15, 0(%r14)
	movq -64(%rbp), %r15
	movq %r15, 8(%r14)
	movq -56(%rbp), %r15
	movq %r15, 16(%r14)
	movq -48(%rbp), %r15
	movq %r15, 24(%r14)
	movq -40(%rbp), %r15
	movq %r15, 32(%r14)
	movq -32(%rbp), %r15
	movq %r15, 40(%r14)
	movq -24(%rbp), %r15
	movq %r15, 48(%r14)
	movq -16(%rbp), %r15
	movq %r15, 56(%r14)
	movq -8(%rbp), %r15
	movq %r15, 64(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
cons_CL_ArrowListStringConsListStringString:
	pushq -8(%rbp)
#call function close : Arrow<List<String>,Array<List<String>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListStringListString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	subq $24, %rsp
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $40, %rsp
	ret
close_CL_ArrowArray_QM_ListStringListString:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $24
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -24(%rbp), %r15
	movq %r15, 0(%r14)
	movq -16(%rbp), %r15
	movq %r15, 8(%r14)
	movq -8(%rbp), %r15
	movq %r15, 16(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
non_SB_zero_CL_ArrowU64ListString:
	mov $1, %RAX
	push %RAX
	mov -24(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
cons_CL_ArrowListArray_QM_FragmentConsListArray_QM_FragmentArray_QM_Fragment:
	pushq -8(%rbp)
#call function close : Arrow<List<Array<Fragment,?>>,Array<List<Array<Fragment,?>>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListArray_QM_FragmentListArray_QM_Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	subq $24, %rsp
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $40, %rsp
	ret
close_CL_ArrowArray_QM_ListArray_QM_FragmentListArray_QM_Fragment:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $24
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -24(%rbp), %r15
	movq %r15, 0(%r14)
	movq -16(%rbp), %r15
	movq %r15, 8(%r14)
	movq -8(%rbp), %r15
	movq %r15, 16(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
close_CL_ArrowArray_QM_FragmentFragment:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $152
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -152(%rbp), %r15
	movq %r15, 0(%r14)
	movq -144(%rbp), %r15
	movq %r15, 8(%r14)
	movq -136(%rbp), %r15
	movq %r15, 16(%r14)
	movq -128(%rbp), %r15
	movq %r15, 24(%r14)
	movq -120(%rbp), %r15
	movq %r15, 32(%r14)
	movq -112(%rbp), %r15
	movq %r15, 40(%r14)
	movq -104(%rbp), %r15
	movq %r15, 48(%r14)
	movq -96(%rbp), %r15
	movq %r15, 56(%r14)
	movq -88(%rbp), %r15
	movq %r15, 64(%r14)
	movq -80(%rbp), %r15
	movq %r15, 72(%r14)
	movq -72(%rbp), %r15
	movq %r15, 80(%r14)
	movq -64(%rbp), %r15
	movq %r15, 88(%r14)
	movq -56(%rbp), %r15
	movq %r15, 96(%r14)
	movq -48(%rbp), %r15
	movq %r15, 104(%r14)
	movq -40(%rbp), %r15
	movq %r15, 112(%r14)
	movq -32(%rbp), %r15
	movq %r15, 120(%r14)
	movq -24(%rbp), %r15
	movq %r15, 128(%r14)
	movq -16(%rbp), %r15
	movq %r15, 136(%r14)
	movq -8(%rbp), %r15
	movq %r15, 144(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $160, %rsp
	ret
_DT_length_CL_ArrowU64ListFragment:
	pushq $0
uuid_00000000000dfade:
#call function non-zero : Arrow<List<Fragment>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfadf
	jmp uuid_00000000000dfae0
uuid_00000000000dfadf:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq $0
	push %RBP
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfad7
	jmp uuid_00000000000dfad9
uuid_00000000000dfad7:
	push %RBP
	mov -520(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dfad4
	jmp uuid_00000000000dfad6
uuid_00000000000dfad4:
	push %RBP
	jmp uuid_00000000000dfad1
	jmp uuid_00000000000dfad3
uuid_00000000000dfad1:
	movb $1, -536(%rbp)
uuid_00000000000dfad3:
	mov -728(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000dfad6:
	mov -552(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000dfad9:
	mov -544(%RBP),%RSP
	add $-728, %RSP
	mov -536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfadb
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dfada
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dfadd
uuid_00000000000dfadb:
	movq -720(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -696(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -688(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -680(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -672(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -664(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -656(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -648(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -640(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -632(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -624(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -616(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -608(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -600(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -592(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -584(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -576(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -568(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -560(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dfadd:
	mov -360(%RBP),%RSP
	add $-728, %RSP
	mov -184(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -184(%rbp)
	add $168, %rsp
	add $168, %rsp
	add $8, %rsp
	add $168, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfade
uuid_00000000000dfae0:
	mov -184(%rbp), %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
cons_CL_ArrowListFragmentConsListFragmentFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
#call function close : Arrow<List<Fragment>,Array<List<Fragment>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListFragmentListFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	subq $168, %rsp
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	addq $168, %rsp
	mov %rbp, %rsp
	sub $328, %rsp
	ret
close_CL_ArrowArray_QM_ListFragmentListFragment:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $168
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -168(%rbp), %r15
	movq %r15, 0(%r14)
	movq -160(%rbp), %r15
	movq %r15, 8(%r14)
	movq -152(%rbp), %r15
	movq %r15, 16(%r14)
	movq -144(%rbp), %r15
	movq %r15, 24(%r14)
	movq -136(%rbp), %r15
	movq %r15, 32(%r14)
	movq -128(%rbp), %r15
	movq %r15, 40(%r14)
	movq -120(%rbp), %r15
	movq %r15, 48(%r14)
	movq -112(%rbp), %r15
	movq %r15, 56(%r14)
	movq -104(%rbp), %r15
	movq %r15, 64(%r14)
	movq -96(%rbp), %r15
	movq %r15, 72(%r14)
	movq -88(%rbp), %r15
	movq %r15, 80(%r14)
	movq -80(%rbp), %r15
	movq %r15, 88(%r14)
	movq -72(%rbp), %r15
	movq %r15, 96(%r14)
	movq -64(%rbp), %r15
	movq %r15, 104(%r14)
	movq -56(%rbp), %r15
	movq %r15, 112(%r14)
	movq -48(%rbp), %r15
	movq %r15, 120(%r14)
	movq -40(%rbp), %r15
	movq %r15, 128(%r14)
	movq -32(%rbp), %r15
	movq %r15, 136(%r14)
	movq -24(%rbp), %r15
	movq %r15, 144(%r14)
	movq -16(%rbp), %r15
	movq %r15, 152(%r14)
	movq -8(%rbp), %r15
	movq %r15, 160(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
is_CL_ArrowU64ConsSized24Sized24:
	pushq $0
	pushq $1
uuid_00000000000dfaed:
	mov $24, %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RAX, %R14
	mov -64(%RBP), %RAX
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfaee
	jmp uuid_00000000000dfaef
uuid_00000000000dfaee:
	mov %RBP, %R15
	add $-24, %R15
	mov -64(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	mov %RBP, %R15
	add $-48, %R15
	mov -64(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	push %RBP
	mov -80(%RBP), %RAX
	mov -88(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfaea
	movq $0, -72(%rbp)
	jmp uuid_00000000000dfaec
uuid_00000000000dfaea:
uuid_00000000000dfaec:
	mov -96(%RBP),%RSP
	add $-96, %RSP
	mov -64(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -64(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000dfaed
uuid_00000000000dfaef:
	mov -72(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
non_SB_zero_CL_ArrowU64ListType:
	mov $1, %RAX
	push %RAX
	mov -40(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
_DT_lookup_CL_ArrowListTypeConsListTypeConsTupleU64StringHashtableEqListTypeTupleU64String:
	mov -16(%RBP), %RAX
	push %RAX
	push %RBP
	mov -112(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfb20
	mov -24(%RBP), %RAX
	push %RAX
	pushq $0
#call function deep-hash : Arrow<Tuple<String,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -112(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -128(%RBP), %R15
	mov -144(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	push %RBP
#call function == : Arrow<Cons<Tuple<String,U64>,Tuple<String,U64>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleU64StringTupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfb14
	jmp uuid_00000000000dfb16
uuid_00000000000dfb14:
	movq $1, -136(%rbp)
uuid_00000000000dfb16:
	mov -248(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dfb1a:
	mov -136(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<72>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfb1b
	jmp uuid_00000000000dfb1c
uuid_00000000000dfb1b:
	mov -144(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -112(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -144(%rbp)
	mov -128(%RBP), %R15
	mov -144(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	push %RBP
#call function == : Arrow<Cons<Tuple<String,U64>,Tuple<String,U64>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleU64StringTupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfb17
	jmp uuid_00000000000dfb19
uuid_00000000000dfb17:
	movq $1, -136(%rbp)
uuid_00000000000dfb19:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfb1a
uuid_00000000000dfb1c:
	push %RBP
	mov -136(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfb1d
	jmp uuid_00000000000dfb1f
uuid_00000000000dfb1d:
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	movq -296(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -288(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -264(%rbp), %r15
	movq %r15, -64(%rbp)
uuid_00000000000dfb1f:
	mov -256(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000dfb22
uuid_00000000000dfb20:
uuid_00000000000dfb22:
	mov -120(%RBP),%RSP
	add $-120, %RSP
	subq $40, %rsp
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $104, %rsp
	ret
mem_SB_is_SB_nonzero_CL_ArrowU64Sized72:
	pushq $0
	pushq $0
uuid_00000000000dfb26:
	mov -88(%RBP), %RAX
	mov $72, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfb27
	jmp uuid_00000000000dfb28
uuid_00000000000dfb27:
	push %RBP
	mov %RBP, %R15
	add $-72, %R15
	mov -88(%RBP), %R14
	add %R14, %R15
	mov 0(%R15), %R15B
	mov %R15B, %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	setne %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfb23
	jmp uuid_00000000000dfb25
uuid_00000000000dfb23:
	movq $1, -96(%rbp)
uuid_00000000000dfb25:
	mov -104(%RBP),%RSP
	add $-104, %RSP
	mov -88(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -88(%rbp)
	add $8, %RSP
	jmp uuid_00000000000dfb26
uuid_00000000000dfb28:
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
_EQ__EQ__CL_ArrowU64ConsTupleU64StringTupleU64String:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfb53
	jmp uuid_00000000000dfb55
uuid_00000000000dfb53:
	push %RBP
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfb41
	jmp uuid_00000000000dfb43
uuid_00000000000dfb41:
	push %RBP
	mov -224(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dfb3e
	jmp uuid_00000000000dfb40
uuid_00000000000dfb3e:
	push %RBP
	mov -216(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dfb3b
	jmp uuid_00000000000dfb3d
uuid_00000000000dfb3b:
	movb $1, -240(%rbp)
uuid_00000000000dfb3d:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000dfb40:
	mov -256(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000dfb43:
	mov -248(%RBP),%RSP
	add $-280, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfb50
	jmp uuid_00000000000dfb52
uuid_00000000000dfb50:
	push %RBP
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq $0
	push %RBP
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfb4a
	jmp uuid_00000000000dfb4c
uuid_00000000000dfb4a:
	push %RBP
	mov -304(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dfb47
	jmp uuid_00000000000dfb49
uuid_00000000000dfb47:
	push %RBP
	mov -296(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dfb44
	jmp uuid_00000000000dfb46
uuid_00000000000dfb44:
	movb $1, -320(%rbp)
uuid_00000000000dfb46:
	mov -352(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000dfb49:
	mov -336(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000dfb4c:
	mov -328(%RBP),%RSP
	add $-360, %RSP
	mov -320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfb4d
	jmp uuid_00000000000dfb4f
uuid_00000000000dfb4d:
	movb $1, -192(%rbp)
uuid_00000000000dfb4f:
	mov -288(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000dfb52:
	mov -208(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000dfb55:
	mov -200(%RBP),%RSP
	add $-360, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfb5d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dfb5c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dfb5f
uuid_00000000000dfb5d:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfb59
	jmp uuid_00000000000dfb5b
uuid_00000000000dfb59:
	push %RBP
	mov -344(%RBP), %RAX
	mov -264(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfb56
	jmp uuid_00000000000dfb58
uuid_00000000000dfb56:
	movq $1, -64(%rbp)
uuid_00000000000dfb58:
	mov -376(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000dfb5b:
	mov -368(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000dfb5f:
	mov -128(%RBP),%RSP
	add $-376, %RSP
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
deep_SB_hash_CL_ArrowU64TupleU64String:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfb6e
	jmp uuid_00000000000dfb70
uuid_00000000000dfb6e:
	push %RBP
	mov -88(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dfb6b
	jmp uuid_00000000000dfb6d
uuid_00000000000dfb6b:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dfb68
	jmp uuid_00000000000dfb6a
uuid_00000000000dfb68:
	movb $1, -104(%rbp)
uuid_00000000000dfb6a:
	mov -136(%RBP),%RSP
	add $-144, %RSP
uuid_00000000000dfb6d:
	mov -120(%RBP),%RSP
	add $-144, %RSP
uuid_00000000000dfb70:
	mov -112(%RBP),%RSP
	add $-144, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfb72
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dfb71
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dfb74
uuid_00000000000dfb72:
#call function deep-hash : Arrow<U64,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dfb74:
	mov -72(%RBP),%RSP
	add $-144, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
_DT_length_CL_ArrowU64ListType:
	pushq $0
uuid_00000000000dfb85:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfb86
	jmp uuid_00000000000dfb87
uuid_00000000000dfb86:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfb7f
	jmp uuid_00000000000dfb81
uuid_00000000000dfb7f:
	push %RBP
	mov -136(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dfb7c
	jmp uuid_00000000000dfb7e
uuid_00000000000dfb7c:
	push %RBP
	jmp uuid_00000000000dfb79
	jmp uuid_00000000000dfb7b
uuid_00000000000dfb79:
	movb $1, -152(%rbp)
uuid_00000000000dfb7b:
	mov -216(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000dfb7e:
	mov -168(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000dfb81:
	mov -160(%RBP),%RSP
	add $-216, %RSP
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfb82
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dfada
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dfb84
uuid_00000000000dfb82:
	movq -208(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -192(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dfb84:
	mov -104(%RBP),%RSP
	add $-216, %RSP
	mov -56(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfb85
uuid_00000000000dfb87:
	mov -56(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
_DT_bind_CL_ArrowHashtableEqU64TypeConsU64ConsTypeHashtableEqU64Type:
	mov -8(%RBP), %RAX
	push %RAX
	mov -16(%RBP), %RAX
	push %RAX
	mov -24(%RBP), %RAX
	push %RAX
	push %RBP
	mov -80(%RBP), %RAX
	mov $3, %R14
	mul %R14
	mov %RAX, %RAX
	mov -88(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfbac
	jmp uuid_00000000000dfbae
uuid_00000000000dfbac:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1000
	mov -80(%RBP), %RAX
	mov $30, %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov $40, %RAX
	mov -112(%RBP), %R14
	mul %R14
	push %RAX
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function memset : Arrow<Cons<Cons<Array<?,?>,U8>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $0
	pushq -120(%rbp)
	mov %RBX, %RBP
	call memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000dfba9:
	mov -136(%RBP), %RAX
	mov -88(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfbaa
	jmp uuid_00000000000dfbab
uuid_00000000000dfbaa:
	mov -96(%RBP), %R15
	mov -136(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	push %RBP
#call function mem-is-nonzero : Arrow<Sized<40>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized40
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfba6
	jmp uuid_00000000000dfba8
uuid_00000000000dfba6:
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfba0
	jmp uuid_00000000000dfba2
uuid_00000000000dfba0:
	push %RBP
	mov -264(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dfb9d
	jmp uuid_00000000000dfb9f
uuid_00000000000dfb9d:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	jmp uuid_00000000000dfb9a
	jmp uuid_00000000000dfb9c
uuid_00000000000dfb9a:
	movb $1, -280(%rbp)
uuid_00000000000dfb9c:
	mov -312(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000dfb9f:
	mov -296(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000dfba2:
	mov -288(%RBP),%RSP
	add $-336, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfba3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dfa98
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dfba5
uuid_00000000000dfba3:
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<Type,U64>,?>,U64>,Type>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -112(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsU64ConsTypeConsU64Array_QM_TupleU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000dfba5:
	pop %RAX
	mov -232(%RBP),%RSP
	add $-336, %RSP
	push %RAX
uuid_00000000000dfba8:
	pop %RAX
	mov -184(%RBP),%RSP
	add $-336, %RSP
	mov -136(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -136(%rbp)
	add $40, %rsp
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfba9
uuid_00000000000dfbab:
	movq -128(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -128(%rbp), %r15
	mov %r15, -96(%rbp)
	movq -112(%rbp), %r15
	movq %r15, -88(%rbp)
	mov -112(%rbp), %r15
	mov %r15, -88(%rbp)
uuid_00000000000dfbae:
	mov -104(%RBP),%RSP
	add $-136, %RSP
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<Type,U64>,?>,U64>,Type>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsU64ConsTypeConsU64Array_QM_TupleU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -144(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfbaf
	mov -80(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -80(%rbp)
	jmp uuid_00000000000dfbb1
uuid_00000000000dfbaf:
uuid_00000000000dfbb1:
	mov -152(%RBP),%RSP
	add $-152, %RSP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	subq $32, %rsp
	pushq 32(%rsp)
	pushq 48(%rsp)
	pushq 64(%rsp)
	pushq 80(%rsp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $72, %rsp
	ret
_DT_bind_SB_eq_CL_ArrowU64ConsU64ConsTypeConsU64Array_QM_TupleU64Type:
	pushq $0
#call function deep-hash : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -8(%RBP), %R15
	mov -72(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	pushq -80(%RBP)
	pushq -88(%RBP)
	pushq -96(%RBP)
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfbb6
	jmp uuid_00000000000dfbb8
uuid_00000000000dfbb6:
	movq $1, -64(%rbp)
uuid_00000000000dfbb8:
	mov -144(%RBP),%RSP
	add $-144, %RSP
uuid_00000000000dfbbc:
	mov -64(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<40>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized40
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfbbd
	jmp uuid_00000000000dfbbe
uuid_00000000000dfbbd:
	mov -72(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -72(%rbp)
	mov -8(%RBP), %R15
	mov -72(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	pushq -80(%RBP)
	pushq -88(%RBP)
	pushq -96(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfbb9
	jmp uuid_00000000000dfbbb
uuid_00000000000dfbb9:
	movq $1, -64(%rbp)
uuid_00000000000dfbbb:
	mov -152(%RBP),%RSP
	add $-152, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfbbc
uuid_00000000000dfbbe:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	mov -8(%RBP), %R15
	mov -72(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	mov -184(%RBP), %RAX
	mov %RAX, 0(%R15)
	mov -176(%RBP), %RAX
	mov %RAX, 8(%R15)
	mov -168(%RBP), %RAX
	mov %RAX, 16(%R15)
	mov -160(%RBP), %RAX
	mov %RAX, 24(%R15)
	mov -152(%RBP), %RAX
	mov %RAX, 32(%R15)
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
cons_CL_ArrowListTupleASTTupleTypeTContextConsListTupleASTTupleTypeTContextTupleASTTupleTypeTContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
#call function close : Arrow<List<Tuple<Tuple<TContext,Type>,AST>>,Array<List<Tuple<Tuple<TContext,Type>,AST>>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTupleASTTupleTypeTContextListTupleASTTupleTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	subq $248, %rsp
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	popq -600(%rbp)
	popq -608(%rbp)
	popq -616(%rbp)
	popq -624(%rbp)
	popq -632(%rbp)
	popq -640(%rbp)
	popq -648(%rbp)
	popq -656(%rbp)
	popq -664(%rbp)
	popq -672(%rbp)
	popq -680(%rbp)
	popq -688(%rbp)
	popq -696(%rbp)
	popq -704(%rbp)
	popq -712(%rbp)
	popq -720(%rbp)
	popq -728(%rbp)
	popq -736(%rbp)
	addq $248, %rsp
	mov %rbp, %rsp
	sub $488, %rsp
	ret
close_CL_ArrowArray_QM_ListTupleASTTupleTypeTContextListTupleASTTupleTypeTContext:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $248
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -248(%rbp), %r15
	movq %r15, 0(%r14)
	movq -240(%rbp), %r15
	movq %r15, 8(%r14)
	movq -232(%rbp), %r15
	movq %r15, 16(%r14)
	movq -224(%rbp), %r15
	movq %r15, 24(%r14)
	movq -216(%rbp), %r15
	movq %r15, 32(%r14)
	movq -208(%rbp), %r15
	movq %r15, 40(%r14)
	movq -200(%rbp), %r15
	movq %r15, 48(%r14)
	movq -192(%rbp), %r15
	movq %r15, 56(%r14)
	movq -184(%rbp), %r15
	movq %r15, 64(%r14)
	movq -176(%rbp), %r15
	movq %r15, 72(%r14)
	movq -168(%rbp), %r15
	movq %r15, 80(%r14)
	movq -160(%rbp), %r15
	movq %r15, 88(%r14)
	movq -152(%rbp), %r15
	movq %r15, 96(%r14)
	movq -144(%rbp), %r15
	movq %r15, 104(%r14)
	movq -136(%rbp), %r15
	movq %r15, 112(%r14)
	movq -128(%rbp), %r15
	movq %r15, 120(%r14)
	movq -120(%rbp), %r15
	movq %r15, 128(%r14)
	movq -112(%rbp), %r15
	movq %r15, 136(%r14)
	movq -104(%rbp), %r15
	movq %r15, 144(%r14)
	movq -96(%rbp), %r15
	movq %r15, 152(%r14)
	movq -88(%rbp), %r15
	movq %r15, 160(%r14)
	movq -80(%rbp), %r15
	movq %r15, 168(%r14)
	movq -72(%rbp), %r15
	movq %r15, 176(%r14)
	movq -64(%rbp), %r15
	movq %r15, 184(%r14)
	movq -56(%rbp), %r15
	movq %r15, 192(%r14)
	movq -48(%rbp), %r15
	movq %r15, 200(%r14)
	movq -40(%rbp), %r15
	movq %r15, 208(%r14)
	movq -32(%rbp), %r15
	movq %r15, 216(%r14)
	movq -24(%rbp), %r15
	movq %r15, 224(%r14)
	movq -16(%rbp), %r15
	movq %r15, 232(%r14)
	movq -8(%rbp), %r15
	movq %r15, 240(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $256, %rsp
	ret
_DT_lookup_CL_ArrowU64ConsU64ConsTypeHashtableEqU64Type:
	mov -16(%RBP), %RAX
	push %RAX
	push %RBP
	mov -80(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfc1d
	mov -24(%RBP), %RAX
	push %RAX
	pushq $0
#call function deep-hash : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -80(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -96(%RBP), %R15
	mov -112(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	pushq -120(%RBP)
	pushq -128(%RBP)
	pushq -136(%RBP)
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfc11
	jmp uuid_00000000000dfc13
uuid_00000000000dfc11:
	movq $1, -104(%rbp)
uuid_00000000000dfc13:
	mov -184(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000dfc17:
	mov -104(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<40>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized40
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfc18
	jmp uuid_00000000000dfc19
uuid_00000000000dfc18:
	mov -112(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -80(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -112(%rbp)
	mov -96(%RBP), %R15
	mov -112(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	pushq -120(%RBP)
	pushq -128(%RBP)
	pushq -136(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfc14
	jmp uuid_00000000000dfc16
uuid_00000000000dfc14:
	movq $1, -104(%rbp)
uuid_00000000000dfc16:
	mov -192(%RBP),%RSP
	add $-192, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfc17
uuid_00000000000dfc19:
	push %RBP
	mov -104(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfc1a
	jmp uuid_00000000000dfc1c
uuid_00000000000dfc1a:
	mov -144(%RBP), %RAX
	push %RAX
	movq -200(%rbp), %r15
	movq %r15, -64(%rbp)
	mov -200(%rbp), %r15
	mov %r15, -64(%rbp)
uuid_00000000000dfc1c:
	mov -192(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000dfc1f
uuid_00000000000dfc1d:
uuid_00000000000dfc1f:
	mov -88(%RBP),%RSP
	add $-88, %RSP
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $72, %rsp
	ret
non_SB_zero_CL_ArrowU64ListTupleASTTupleTypeTContext:
	mov $1, %RAX
	push %RAX
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $256, %rsp
	ret
_DT_bind_CL_ArrowHashtableEqStringTypeConsStringConsTypeHashtableEqStringType:
	mov -8(%RBP), %RAX
	push %RAX
	mov -16(%RBP), %RAX
	push %RAX
	mov -24(%RBP), %RAX
	push %RAX
	push %RBP
	mov -80(%RBP), %RAX
	mov $3, %R14
	mul %R14
	mov %RAX, %RAX
	mov -88(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfc5a
	jmp uuid_00000000000dfc5c
uuid_00000000000dfc5a:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1000
	mov -80(%RBP), %RAX
	mov $30, %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov $40, %RAX
	mov -112(%RBP), %R14
	mul %R14
	push %RAX
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function memset : Arrow<Cons<Cons<Array<?,?>,U8>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $0
	pushq -120(%rbp)
	mov %RBX, %RBP
	call memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000dfc57:
	mov -136(%RBP), %RAX
	mov -88(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfc58
	jmp uuid_00000000000dfc59
uuid_00000000000dfc58:
	mov -96(%RBP), %R15
	mov -136(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	push %RBP
#call function mem-is-nonzero : Arrow<Sized<40>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized40
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfc54
	jmp uuid_00000000000dfc56
uuid_00000000000dfc54:
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfc4e
	jmp uuid_00000000000dfc50
uuid_00000000000dfc4e:
	push %RBP
	mov -264(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dfc4b
	jmp uuid_00000000000dfc4d
uuid_00000000000dfc4b:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	jmp uuid_00000000000dfc48
	jmp uuid_00000000000dfc4a
uuid_00000000000dfc48:
	movb $1, -280(%rbp)
uuid_00000000000dfc4a:
	mov -312(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000dfc4d:
	mov -296(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000dfc50:
	mov -288(%RBP),%RSP
	add $-336, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfc51
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dfa98
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dfc53
uuid_00000000000dfc51:
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<Type,String>,?>,U64>,Type>,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -112(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsStringConsTypeConsU64Array_QM_TupleStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000dfc53:
	pop %RAX
	mov -232(%RBP),%RSP
	add $-336, %RSP
	push %RAX
uuid_00000000000dfc56:
	pop %RAX
	mov -184(%RBP),%RSP
	add $-336, %RSP
	mov -136(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -136(%rbp)
	add $40, %rsp
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfc57
uuid_00000000000dfc59:
	movq -128(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -128(%rbp), %r15
	mov %r15, -96(%rbp)
	movq -112(%rbp), %r15
	movq %r15, -88(%rbp)
	mov -112(%rbp), %r15
	mov %r15, -88(%rbp)
uuid_00000000000dfc5c:
	mov -104(%RBP),%RSP
	add $-136, %RSP
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<Type,String>,?>,U64>,Type>,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsStringConsTypeConsU64Array_QM_TupleStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -144(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfc5d
	mov -80(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -80(%rbp)
	jmp uuid_00000000000dfc5f
uuid_00000000000dfc5d:
uuid_00000000000dfc5f:
	mov -152(%RBP),%RSP
	add $-152, %RSP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	subq $32, %rsp
	pushq 32(%rsp)
	pushq 48(%rsp)
	pushq 64(%rsp)
	pushq 80(%rsp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $72, %rsp
	ret
_DT_bind_SB_eq_CL_ArrowU64ConsStringConsTypeConsU64Array_QM_TupleStringType:
	pushq $0
#call function deep-hash : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -8(%RBP), %R15
	mov -72(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	pushq -80(%RBP)
	pushq -88(%RBP)
	pushq -96(%RBP)
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfc64
	jmp uuid_00000000000dfc66
uuid_00000000000dfc64:
	movq $1, -64(%rbp)
uuid_00000000000dfc66:
	mov -144(%RBP),%RSP
	add $-144, %RSP
uuid_00000000000dfc6a:
	mov -64(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<40>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized40
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfc6b
	jmp uuid_00000000000dfc6c
uuid_00000000000dfc6b:
	mov -72(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -72(%rbp)
	mov -8(%RBP), %R15
	mov -72(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	pushq -80(%RBP)
	pushq -88(%RBP)
	pushq -96(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfc67
	jmp uuid_00000000000dfc69
uuid_00000000000dfc67:
	movq $1, -64(%rbp)
uuid_00000000000dfc69:
	mov -152(%RBP),%RSP
	add $-152, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfc6a
uuid_00000000000dfc6c:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	mov -8(%RBP), %R15
	mov -72(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	mov -184(%RBP), %RAX
	mov %RAX, 0(%R15)
	mov -176(%RBP), %RAX
	mov %RAX, 8(%R15)
	mov -168(%RBP), %RAX
	mov %RAX, 16(%R15)
	mov -160(%RBP), %RAX
	mov %RAX, 24(%R15)
	mov -152(%RBP), %RAX
	mov %RAX, 32(%R15)
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
close_CL_ArrowArray_QM_TContextTContext:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $120
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -120(%rbp), %r15
	movq %r15, 0(%r14)
	movq -112(%rbp), %r15
	movq %r15, 8(%r14)
	movq -104(%rbp), %r15
	movq %r15, 16(%r14)
	movq -96(%rbp), %r15
	movq %r15, 24(%r14)
	movq -88(%rbp), %r15
	movq %r15, 32(%r14)
	movq -80(%rbp), %r15
	movq %r15, 40(%r14)
	movq -72(%rbp), %r15
	movq %r15, 48(%r14)
	movq -64(%rbp), %r15
	movq %r15, 56(%r14)
	movq -56(%rbp), %r15
	movq %r15, 64(%r14)
	movq -48(%rbp), %r15
	movq %r15, 72(%r14)
	movq -40(%rbp), %r15
	movq %r15, 80(%r14)
	movq -32(%rbp), %r15
	movq %r15, 88(%r14)
	movq -24(%rbp), %r15
	movq %r15, 96(%r14)
	movq -16(%rbp), %r15
	movq %r15, 104(%r14)
	movq -8(%rbp), %r15
	movq %r15, 112(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $128, %rsp
	ret
_DT_bind_CL_ArrowHashtableEqTypeStringConsTypeConsStringHashtableEqTypeString:
	mov -8(%RBP), %RAX
	push %RAX
	mov -16(%RBP), %RAX
	push %RAX
	mov -24(%RBP), %RAX
	push %RAX
	push %RBP
	mov -80(%RBP), %RAX
	mov $3, %R14
	mul %R14
	mov %RAX, %RAX
	mov -88(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfc91
	jmp uuid_00000000000dfc93
uuid_00000000000dfc91:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1000
	mov -80(%RBP), %RAX
	mov $30, %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov $40, %RAX
	mov -112(%RBP), %R14
	mul %R14
	push %RAX
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function memset : Arrow<Cons<Cons<Array<?,?>,U8>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $0
	pushq -120(%rbp)
	mov %RBX, %RBP
	call memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000dfc8e:
	mov -136(%RBP), %RAX
	mov -88(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfc8f
	jmp uuid_00000000000dfc90
uuid_00000000000dfc8f:
	mov -96(%RBP), %R15
	mov -136(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	push %RBP
#call function mem-is-nonzero : Arrow<Sized<40>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized40
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfc8b
	jmp uuid_00000000000dfc8d
uuid_00000000000dfc8b:
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfc85
	jmp uuid_00000000000dfc87
uuid_00000000000dfc85:
	push %RBP
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	jmp uuid_00000000000dfc82
	jmp uuid_00000000000dfc84
uuid_00000000000dfc82:
	push %RBP
	mov -240(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dfc7f
	jmp uuid_00000000000dfc81
uuid_00000000000dfc7f:
	movb $1, -280(%rbp)
uuid_00000000000dfc81:
	mov -328(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000dfc84:
	mov -296(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000dfc87:
	mov -288(%RBP),%RSP
	add $-336, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfc88
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dfa98
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dfc8a
uuid_00000000000dfc88:
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<String,Type>,?>,U64>,String>,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -112(%rbp)
	pushq -336(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsTypeConsStringConsU64Array_QM_TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000dfc8a:
	pop %RAX
	mov -232(%RBP),%RSP
	add $-336, %RSP
	push %RAX
uuid_00000000000dfc8d:
	pop %RAX
	mov -184(%RBP),%RSP
	add $-336, %RSP
	mov -136(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -136(%rbp)
	add $40, %rsp
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfc8e
uuid_00000000000dfc90:
	movq -128(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -128(%rbp), %r15
	mov %r15, -96(%rbp)
	movq -112(%rbp), %r15
	movq %r15, -88(%rbp)
	mov -112(%rbp), %r15
	mov %r15, -88(%rbp)
uuid_00000000000dfc93:
	mov -104(%RBP),%RSP
	add $-136, %RSP
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<String,Type>,?>,U64>,String>,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsTypeConsStringConsU64Array_QM_TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -144(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfc94
	mov -80(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -80(%rbp)
	jmp uuid_00000000000dfc96
uuid_00000000000dfc94:
uuid_00000000000dfc96:
	mov -152(%RBP),%RSP
	add $-152, %RSP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	subq $32, %rsp
	pushq 32(%rsp)
	pushq 48(%rsp)
	pushq 64(%rsp)
	pushq 80(%rsp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $72, %rsp
	ret
_DT_bind_SB_eq_CL_ArrowU64ConsTypeConsStringConsU64Array_QM_TupleTypeString:
	pushq $0
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -8(%RBP), %R15
	mov -72(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	mov -80(%RBP), %RAX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfc9b
	jmp uuid_00000000000dfc9d
uuid_00000000000dfc9b:
	movq $1, -64(%rbp)
uuid_00000000000dfc9d:
	mov -128(%RBP),%RSP
	add $-128, %RSP
uuid_00000000000dfca1:
	mov -64(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<40>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized40
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfca2
	jmp uuid_00000000000dfca3
uuid_00000000000dfca2:
	mov -72(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -72(%rbp)
	mov -8(%RBP), %R15
	mov -72(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	mov -80(%RBP), %RAX
	movq %RAX, -120(%rbp)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfc9e
	jmp uuid_00000000000dfca0
uuid_00000000000dfc9e:
	movq $1, -64(%rbp)
uuid_00000000000dfca0:
	mov -136(%RBP),%RSP
	add $-136, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfca1
uuid_00000000000dfca3:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	mov -8(%RBP), %R15
	mov -72(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	mov -168(%RBP), %RAX
	mov %RAX, 0(%R15)
	mov -160(%RBP), %RAX
	mov %RAX, 8(%R15)
	mov -152(%RBP), %RAX
	mov %RAX, 16(%R15)
	mov -144(%RBP), %RAX
	mov %RAX, 24(%R15)
	mov -136(%RBP), %RAX
	mov %RAX, 32(%R15)
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
non_SB_zero_CL_ArrowU64ListStackToSpecialize:
	mov $1, %RAX
	push %RAX
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $208, %rsp
	ret
cons_CL_ArrowListStackToSpecializeConsListStackToSpecializeStackToSpecialize:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
#call function close : Arrow<List<StackToSpecialize>,Array<List<StackToSpecialize>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListStackToSpecializeListStackToSpecialize
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	subq $200, %rsp
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $392, %rsp
	ret
close_CL_ArrowArray_QM_ListStackToSpecializeListStackToSpecialize:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $200
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -200(%rbp), %r15
	movq %r15, 0(%r14)
	movq -192(%rbp), %r15
	movq %r15, 8(%r14)
	movq -184(%rbp), %r15
	movq %r15, 16(%r14)
	movq -176(%rbp), %r15
	movq %r15, 24(%r14)
	movq -168(%rbp), %r15
	movq %r15, 32(%r14)
	movq -160(%rbp), %r15
	movq %r15, 40(%r14)
	movq -152(%rbp), %r15
	movq %r15, 48(%r14)
	movq -144(%rbp), %r15
	movq %r15, 56(%r14)
	movq -136(%rbp), %r15
	movq %r15, 64(%r14)
	movq -128(%rbp), %r15
	movq %r15, 72(%r14)
	movq -120(%rbp), %r15
	movq %r15, 80(%r14)
	movq -112(%rbp), %r15
	movq %r15, 88(%r14)
	movq -104(%rbp), %r15
	movq %r15, 96(%r14)
	movq -96(%rbp), %r15
	movq %r15, 104(%r14)
	movq -88(%rbp), %r15
	movq %r15, 112(%r14)
	movq -80(%rbp), %r15
	movq %r15, 120(%r14)
	movq -72(%rbp), %r15
	movq %r15, 128(%r14)
	movq -64(%rbp), %r15
	movq %r15, 136(%r14)
	movq -56(%rbp), %r15
	movq %r15, 144(%r14)
	movq -48(%rbp), %r15
	movq %r15, 152(%r14)
	movq -40(%rbp), %r15
	movq %r15, 160(%r14)
	movq -32(%rbp), %r15
	movq %r15, 168(%r14)
	movq -24(%rbp), %r15
	movq %r15, 176(%r14)
	movq -16(%rbp), %r15
	movq %r15, 184(%r14)
	movq -8(%rbp), %r15
	movq %r15, 192(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $208, %rsp
	ret
_AD__CL_ArrowListTypeConsListTypeListType:
#call function reverse : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call reverse_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dfcc7:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfcc8
	jmp uuid_00000000000dfcc9
uuid_00000000000dfcc8:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfcc0
	jmp uuid_00000000000dfcc2
uuid_00000000000dfcc0:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dfcbd
	jmp uuid_00000000000dfcbf
uuid_00000000000dfcbd:
	push %RBP
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	jmp uuid_00000000000dfcba
	jmp uuid_00000000000dfcbc
uuid_00000000000dfcba:
	movb $1, -184(%rbp)
uuid_00000000000dfcbc:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000dfcbf:
	mov -200(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000dfcc2:
	mov -192(%RBP),%RSP
	add $-272, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfcc4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dfcc3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dfcc6
uuid_00000000000dfcc4:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	movq -240(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -232(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -224(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -216(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dfcc6:
	mov -136(%RBP),%RSP
	add $-272, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfcc7
uuid_00000000000dfcc9:
	subq $40, %rsp
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $88, %rsp
	ret
reverse_CL_ArrowListTypeListType:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000dfcde:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfcdf
	jmp uuid_00000000000dfce0
uuid_00000000000dfcdf:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfcd8
	jmp uuid_00000000000dfcda
uuid_00000000000dfcd8:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dfcd5
	jmp uuid_00000000000dfcd7
uuid_00000000000dfcd5:
	push %RBP
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	jmp uuid_00000000000dfcd2
	jmp uuid_00000000000dfcd4
uuid_00000000000dfcd2:
	movb $1, -184(%rbp)
uuid_00000000000dfcd4:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000dfcd7:
	mov -200(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000dfcda:
	mov -192(%RBP),%RSP
	add $-272, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfcdb
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dfa24
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dfcdd
uuid_00000000000dfcdb:
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	movq -240(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -232(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -224(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -216(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dfcdd:
	mov -136(%RBP),%RSP
	add $-272, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfcde
uuid_00000000000dfce0:
	subq $40, %rsp
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
_DT_lookup_CL_ArrowTypeConsTypeConsStringHashtableEqTypeString:
	mov -16(%RBP), %RAX
	push %RAX
	push %RBP
	mov -80(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfcfd
	mov -24(%RBP), %RAX
	push %RAX
	pushq $0
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -80(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -96(%RBP), %R15
	mov -112(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	mov -120(%RBP), %RAX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfcf1
	jmp uuid_00000000000dfcf3
uuid_00000000000dfcf1:
	movq $1, -104(%rbp)
uuid_00000000000dfcf3:
	mov -168(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dfcf7:
	mov -104(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<40>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized40
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfcf8
	jmp uuid_00000000000dfcf9
uuid_00000000000dfcf8:
	mov -112(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -80(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -112(%rbp)
	mov -96(%RBP), %R15
	mov -112(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	mov -120(%RBP), %RAX
	movq %RAX, -160(%rbp)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfcf4
	jmp uuid_00000000000dfcf6
uuid_00000000000dfcf4:
	movq $1, -104(%rbp)
uuid_00000000000dfcf6:
	mov -176(%RBP),%RSP
	add $-176, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfcf7
uuid_00000000000dfcf9:
	push %RBP
	mov -104(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfcfa
	jmp uuid_00000000000dfcfc
uuid_00000000000dfcfa:
	pushq -128(%RBP)
	pushq -136(%RBP)
	pushq -144(%RBP)
	movq -200(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -192(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -48(%rbp)
uuid_00000000000dfcfc:
	mov -176(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000dfcff
uuid_00000000000dfcfd:
uuid_00000000000dfcff:
	mov -88(%RBP),%RSP
	add $-88, %RSP
	subq $24, %rsp
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $72, %rsp
	ret
_DT_lookup_CL_ArrowTupleTypeTypeConsTupleTypeTypeConsStringHashtableEqTupleTypeTypeString:
	mov -16(%RBP), %RAX
	push %RAX
	push %RBP
	mov -112(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfd28
	mov -24(%RBP), %RAX
	push %RAX
	pushq $0
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -112(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -128(%RBP), %R15
	mov -144(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	mov -152(%RBP), %RAX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfd1c
	jmp uuid_00000000000dfd1e
uuid_00000000000dfd1c:
	movq $1, -136(%rbp)
uuid_00000000000dfd1e:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dfd22:
	mov -136(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<72>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfd23
	jmp uuid_00000000000dfd24
uuid_00000000000dfd23:
	mov -144(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -112(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -144(%rbp)
	mov -128(%RBP), %R15
	mov -144(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	mov -152(%RBP), %RAX
	movq %RAX, -224(%rbp)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfd1f
	jmp uuid_00000000000dfd21
uuid_00000000000dfd1f:
	movq $1, -136(%rbp)
uuid_00000000000dfd21:
	mov -240(%RBP),%RSP
	add $-240, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfd22
uuid_00000000000dfd24:
	push %RBP
	mov -136(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfd25
	jmp uuid_00000000000dfd27
uuid_00000000000dfd25:
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	movq -296(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -288(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -264(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -256(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -248(%rbp), %r15
	movq %r15, -48(%rbp)
uuid_00000000000dfd27:
	mov -240(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000dfd2a
uuid_00000000000dfd28:
uuid_00000000000dfd2a:
	mov -120(%RBP),%RSP
	add $-120, %RSP
	subq $56, %rsp
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $104, %rsp
	ret
_DT_nth_CL_ArrowTypeConsTypeConsU64ListType:
uuid_00000000000dfd41:
	mov -48(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfd42
	jmp uuid_00000000000dfd43
uuid_00000000000dfd42:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfd37
	jmp uuid_00000000000dfd39
uuid_00000000000dfd37:
	push %RBP
	mov -160(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dfd34
	jmp uuid_00000000000dfd36
uuid_00000000000dfd34:
	push %RBP
	jmp uuid_00000000000dfd31
	jmp uuid_00000000000dfd33
uuid_00000000000dfd31:
	movb $1, -176(%rbp)
uuid_00000000000dfd33:
	mov -240(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000dfd36:
	mov -192(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000dfd39:
	mov -184(%RBP),%RSP
	add $-240, %RSP
	mov -176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfd3e
	push %RBP
	jmp uuid_00000000000dfd3b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dfd3a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dfd3d
uuid_00000000000dfd3b:
uuid_00000000000dfd3d:
	mov -248(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000dfd40
uuid_00000000000dfd3e:
	movq -232(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -224(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -216(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dfd40:
	mov -128(%RBP),%RSP
	add $-240, %RSP
	mov -48(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -48(%rbp)
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfd41
uuid_00000000000dfd43:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfd4a
	jmp uuid_00000000000dfd4c
uuid_00000000000dfd4a:
	push %RBP
	jmp uuid_00000000000dfd47
	jmp uuid_00000000000dfd49
uuid_00000000000dfd47:
	push %RBP
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	jmp uuid_00000000000dfd44
	jmp uuid_00000000000dfd46
uuid_00000000000dfd44:
	movb $1, -176(%rbp)
uuid_00000000000dfd46:
	mov -200(%RBP),%RSP
	add $-224, %RSP
uuid_00000000000dfd49:
	mov -192(%RBP),%RSP
	add $-224, %RSP
uuid_00000000000dfd4c:
	mov -184(%RBP),%RSP
	add $-224, %RSP
	mov -176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfd51
	push %RBP
	jmp uuid_00000000000dfd4e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dfd4d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dfd50
uuid_00000000000dfd4e:
uuid_00000000000dfd50:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000dfd53
uuid_00000000000dfd51:
	movq -224(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -216(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -56(%rbp)
uuid_00000000000dfd53:
	mov -128(%RBP),%RSP
	add $-224, %RSP
	subq $24, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
_DT_bind_CL_ArrowHashtableEqTupleTypeTypeStringConsTupleTypeTypeConsStringHashtableEqTupleTypeTypeString:
	mov -8(%RBP), %RAX
	push %RAX
	mov -16(%RBP), %RAX
	push %RAX
	mov -24(%RBP), %RAX
	push %RAX
	push %RBP
	mov -112(%RBP), %RAX
	mov $3, %R14
	mul %R14
	mov %RAX, %RAX
	mov -120(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfd85
	jmp uuid_00000000000dfd87
uuid_00000000000dfd85:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1000
	mov -112(%RBP), %RAX
	mov $30, %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov $72, %RAX
	mov -144(%RBP), %R14
	mul %R14
	push %RAX
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function memset : Arrow<Cons<Cons<Array<?,?>,U8>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $0
	pushq -152(%rbp)
	mov %RBX, %RBP
	call memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000dfd82:
	mov -168(%RBP), %RAX
	mov -120(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfd83
	jmp uuid_00000000000dfd84
uuid_00000000000dfd83:
	mov -128(%RBP), %R15
	mov -168(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	push %RBP
#call function mem-is-nonzero : Arrow<Sized<72>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfd7f
	jmp uuid_00000000000dfd81
uuid_00000000000dfd7f:
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfd79
	jmp uuid_00000000000dfd7b
uuid_00000000000dfd79:
	push %RBP
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	jmp uuid_00000000000dfd76
	jmp uuid_00000000000dfd78
uuid_00000000000dfd76:
	push %RBP
	mov -336(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dfd73
	jmp uuid_00000000000dfd75
uuid_00000000000dfd73:
	movb $1, -408(%rbp)
uuid_00000000000dfd75:
	mov -488(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000dfd78:
	mov -424(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000dfd7b:
	mov -416(%RBP),%RSP
	add $-496, %RSP
	mov -408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfd7c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dfa98
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dfd7e
uuid_00000000000dfd7c:
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<String,Tuple<Type,Type>>,?>,U64>,String>,Tuple<Type,Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -144(%rbp)
	pushq -496(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsTupleTypeTypeConsStringConsU64Array_QM_TupleTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000dfd7e:
	pop %RAX
	mov -328(%RBP),%RSP
	add $-496, %RSP
	push %RAX
uuid_00000000000dfd81:
	pop %RAX
	mov -248(%RBP),%RSP
	add $-496, %RSP
	mov -168(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -168(%rbp)
	add $72, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfd82
uuid_00000000000dfd84:
	movq -160(%rbp), %r15
	movq %r15, -128(%rbp)
	mov -160(%rbp), %r15
	mov %r15, -128(%rbp)
	movq -144(%rbp), %r15
	movq %r15, -120(%rbp)
	mov -144(%rbp), %r15
	mov %r15, -120(%rbp)
uuid_00000000000dfd87:
	mov -136(%RBP),%RSP
	add $-168, %RSP
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<String,Tuple<Type,Type>>,?>,U64>,String>,Tuple<Type,Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsTupleTypeTypeConsStringConsU64Array_QM_TupleTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -176(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfd88
	mov -112(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -112(%rbp)
	jmp uuid_00000000000dfd8a
uuid_00000000000dfd88:
uuid_00000000000dfd8a:
	mov -184(%RBP),%RSP
	add $-184, %RSP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq $0
	subq $32, %rsp
	pushq 32(%rsp)
	pushq 48(%rsp)
	pushq 64(%rsp)
	pushq 80(%rsp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $104, %rsp
	ret
_DT_bind_SB_eq_CL_ArrowU64ConsTupleTypeTypeConsStringConsU64Array_QM_TupleTupleTypeTypeString:
	pushq $0
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -8(%RBP), %R15
	mov -104(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	mov -112(%RBP), %RAX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfd9d
	jmp uuid_00000000000dfd9f
uuid_00000000000dfd9d:
	movq $1, -96(%rbp)
uuid_00000000000dfd9f:
	mov -192(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000dfda3:
	mov -96(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<72>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfda4
	jmp uuid_00000000000dfda5
uuid_00000000000dfda4:
	mov -104(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -104(%rbp)
	mov -8(%RBP), %R15
	mov -104(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	mov -112(%RBP), %RAX
	movq %RAX, -184(%rbp)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfda0
	jmp uuid_00000000000dfda2
uuid_00000000000dfda0:
	movq $1, -96(%rbp)
uuid_00000000000dfda2:
	mov -200(%RBP),%RSP
	add $-200, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfda3
uuid_00000000000dfda5:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	mov -8(%RBP), %R15
	mov -104(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	mov -264(%RBP), %RAX
	mov %RAX, 0(%R15)
	mov -256(%RBP), %RAX
	mov %RAX, 8(%R15)
	mov -248(%RBP), %RAX
	mov %RAX, 16(%R15)
	mov -240(%RBP), %RAX
	mov %RAX, 24(%R15)
	mov -232(%RBP), %RAX
	mov %RAX, 32(%R15)
	mov -224(%RBP), %RAX
	mov %RAX, 40(%R15)
	mov -216(%RBP), %RAX
	mov %RAX, 48(%R15)
	mov -208(%RBP), %RAX
	mov %RAX, 56(%R15)
	mov -200(%RBP), %RAX
	mov %RAX, 64(%R15)
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
_DT_lookup_CL_ArrowU64ConsU64ConsStringBTreeEqU64String:
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
uuid_00000000000dfdc4:
	mov -88(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfdc5
	jmp uuid_00000000000dfdc6
uuid_00000000000dfdc5:
	mov -8(%RBP), %RAX
	push %RAX
	push %RBP
	mov -80(%RBP), %RAX
	mov -96(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfdb5
	jmp uuid_00000000000dfdb7
uuid_00000000000dfdb5:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	mov -16(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfdb2
	jmp uuid_00000000000dfdb4
uuid_00000000000dfdb2:
	mov -24(%RBP), %RAX
	movq %RAX, -64(%rbp)
	movb $0, -88(%rbp)
uuid_00000000000dfdb4:
	mov -112(%RBP),%RSP
	add $-112, %RSP
uuid_00000000000dfdb7:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	push %RBP
	mov -88(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfdc1
	jmp uuid_00000000000dfdc3
uuid_00000000000dfdc1:
	push %RBP
	mov -96(%RBP), %RAX
	mov -80(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfdbe
	push %RBP
	mov -32(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfdbb
	mov -32(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000dfdbd
uuid_00000000000dfdbb:
	movb $0, -88(%rbp)
uuid_00000000000dfdbd:
	mov -136(%RBP),%RSP
	add $-136, %RSP
	jmp uuid_00000000000dfdc0
uuid_00000000000dfdbe:
	push %RBP
	mov -40(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfdb8
	mov -40(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000dfdba
uuid_00000000000dfdb8:
	movb $0, -88(%rbp)
uuid_00000000000dfdba:
	mov -136(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000dfdc0:
	mov -128(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000dfdc3:
	mov -120(%RBP),%RSP
	add $-136, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfdc4
uuid_00000000000dfdc6:
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $72, %rsp
	ret
_DT_bind_CL_ArrowNilConsU64ConsStringArray_QM_BTreeEqU64String:
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
#call function close : Arrow<BTreeEq<String,U64>,Array<BTreeEq<String,U64>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_BTreeEqU64StringBTreeEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000dfdd4:
	mov -48(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfdd5
	jmp uuid_00000000000dfdd6
uuid_00000000000dfdd5:
	mov -8(%rbp), %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	push %RBP
	mov -64(%RBP), %RAX
	mov %RAX, %RAX
	mov -40(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfdd1
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfdce
	mov -88(%RBP), %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000dfdd0
uuid_00000000000dfdce:
	mov -56(%rbp), %R8
	mov -8(%RBP), %R15
	mov %R8, 16(%R15)
	movb $0, -48(%rbp)
uuid_00000000000dfdd0:
	mov -120(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000dfdd3
uuid_00000000000dfdd1:
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfdcb
	mov -96(%RBP), %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000dfdcd
uuid_00000000000dfdcb:
	mov -56(%rbp), %R8
	mov -8(%RBP), %R15
	mov %R8, 8(%R15)
	movb $0, -48(%rbp)
uuid_00000000000dfdcd:
	mov -120(%RBP),%RSP
	add $-120, %RSP
uuid_00000000000dfdd3:
	mov -112(%RBP),%RSP
	add $-120, %RSP
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfdd4
uuid_00000000000dfdd6:
	mov %rbp, %rsp
	sub $32, %rsp
	ret
close_CL_ArrowArray_QM_BTreeEqU64StringBTreeEqU64String:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $48
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -48(%rbp), %r15
	movq %r15, 0(%r14)
	movq -40(%rbp), %r15
	movq %r15, 8(%r14)
	movq -32(%rbp), %r15
	movq %r15, 16(%r14)
	movq -24(%rbp), %r15
	movq %r15, 24(%r14)
	movq -16(%rbp), %r15
	movq %r15, 32(%r14)
	movq -8(%rbp), %r15
	movq %r15, 40(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
_DT_lookup_CL_ArrowStringConsStringConsStringHashtableEqStringString:
	mov -16(%RBP), %RAX
	push %RAX
	push %RBP
	mov -64(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfdfd
	mov -24(%RBP), %RAX
	push %RAX
	pushq $0
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -64(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -80(%RBP), %R15
	mov -96(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	mov -104(%RBP), %RAX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfdf1
	jmp uuid_00000000000dfdf3
uuid_00000000000dfdf1:
	movq $1, -88(%rbp)
uuid_00000000000dfdf3:
	mov -136(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000dfdf7:
	mov -88(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<24>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized24
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfdf8
	jmp uuid_00000000000dfdf9
uuid_00000000000dfdf8:
	mov -96(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -64(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -96(%rbp)
	mov -80(%RBP), %R15
	mov -96(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	mov -104(%RBP), %RAX
	movq %RAX, -128(%rbp)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfdf4
	jmp uuid_00000000000dfdf6
uuid_00000000000dfdf4:
	movq $1, -88(%rbp)
uuid_00000000000dfdf6:
	mov -144(%RBP),%RSP
	add $-144, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfdf7
uuid_00000000000dfdf9:
	push %RBP
	mov -88(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfdfa
	jmp uuid_00000000000dfdfc
uuid_00000000000dfdfa:
	mov -112(%RBP), %RAX
	push %RAX
	movq -152(%rbp), %r15
	movq %r15, -48(%rbp)
	mov -152(%rbp), %r15
	mov %r15, -48(%rbp)
uuid_00000000000dfdfc:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000dfdff
uuid_00000000000dfdfd:
uuid_00000000000dfdff:
	mov -72(%RBP),%RSP
	add $-72, %RSP
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
_DT_bind_CL_ArrowHashtableEqStringStringConsStringConsStringHashtableEqStringString:
	mov -8(%RBP), %RAX
	push %RAX
	mov -16(%RBP), %RAX
	push %RAX
	mov -24(%RBP), %RAX
	push %RAX
	push %RBP
	mov -64(%RBP), %RAX
	mov $3, %R14
	mul %R14
	mov %RAX, %RAX
	mov -72(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfe24
	jmp uuid_00000000000dfe26
uuid_00000000000dfe24:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1000
	mov -64(%RBP), %RAX
	mov $30, %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov $24, %RAX
	mov -96(%RBP), %R14
	mul %R14
	push %RAX
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -104(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function memset : Arrow<Cons<Cons<Array<?,?>,U8>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $0
	pushq -104(%rbp)
	mov %RBX, %RBP
	call memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000dfe21:
	mov -120(%RBP), %RAX
	mov -72(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfe22
	jmp uuid_00000000000dfe23
uuid_00000000000dfe22:
	mov -80(%RBP), %R15
	mov -120(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	push %RBP
#call function mem-is-nonzero : Arrow<Sized<24>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized24
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfe1e
	jmp uuid_00000000000dfe20
uuid_00000000000dfe1e:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfe18
	jmp uuid_00000000000dfe1a
uuid_00000000000dfe18:
	push %RBP
	mov -200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dfe15
	jmp uuid_00000000000dfe17
uuid_00000000000dfe15:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dfe12
	jmp uuid_00000000000dfe14
uuid_00000000000dfe12:
	movb $1, -216(%rbp)
uuid_00000000000dfe14:
	mov -248(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000dfe17:
	mov -232(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000dfe1a:
	mov -224(%RBP),%RSP
	add $-256, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfe1b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dfa98
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dfe1d
uuid_00000000000dfe1b:
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<String,String>,?>,U64>,String>,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -96(%rbp)
	pushq -256(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsStringConsStringConsU64Array_QM_TupleStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000dfe1d:
	pop %RAX
	mov -184(%RBP),%RSP
	add $-256, %RSP
	push %RAX
uuid_00000000000dfe20:
	pop %RAX
	mov -152(%RBP),%RSP
	add $-256, %RSP
	mov -120(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -120(%rbp)
	add $24, %rsp
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfe21
uuid_00000000000dfe23:
	movq -112(%rbp), %r15
	movq %r15, -80(%rbp)
	mov -112(%rbp), %r15
	mov %r15, -80(%rbp)
	movq -96(%rbp), %r15
	movq %r15, -72(%rbp)
	mov -96(%rbp), %r15
	mov %r15, -72(%rbp)
uuid_00000000000dfe26:
	mov -88(%RBP),%RSP
	add $-120, %RSP
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<String,String>,?>,U64>,String>,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsStringConsStringConsU64Array_QM_TupleStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -128(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfe27
	mov -64(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -64(%rbp)
	jmp uuid_00000000000dfe29
uuid_00000000000dfe27:
uuid_00000000000dfe29:
	mov -136(%RBP),%RSP
	add $-136, %RSP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	subq $32, %rsp
	pushq 32(%rsp)
	pushq 48(%rsp)
	pushq 64(%rsp)
	pushq 80(%rsp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
_DT_bind_SB_eq_CL_ArrowU64ConsStringConsStringConsU64Array_QM_TupleStringString:
	pushq $0
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -8(%RBP), %R15
	mov -56(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	mov -64(%RBP), %RAX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfe2e
	jmp uuid_00000000000dfe30
uuid_00000000000dfe2e:
	movq $1, -48(%rbp)
uuid_00000000000dfe30:
	mov -96(%RBP),%RSP
	add $-96, %RSP
uuid_00000000000dfe34:
	mov -48(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<24>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized24
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfe35
	jmp uuid_00000000000dfe36
uuid_00000000000dfe35:
	mov -56(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -56(%rbp)
	mov -8(%RBP), %R15
	mov -56(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	mov -64(%RBP), %RAX
	movq %RAX, -88(%rbp)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfe31
	jmp uuid_00000000000dfe33
uuid_00000000000dfe31:
	movq $1, -48(%rbp)
uuid_00000000000dfe33:
	mov -104(%RBP),%RSP
	add $-104, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfe34
uuid_00000000000dfe36:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	mov -8(%RBP), %R15
	mov -56(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	mov -120(%RBP), %RAX
	mov %RAX, 0(%R15)
	mov -112(%RBP), %RAX
	mov %RAX, 8(%R15)
	mov -104(%RBP), %RAX
	mov %RAX, 16(%R15)
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
_DT_lookup_CL_ArrowU64ConsU64ConsTupleTypeStringHashtableEqU64TupleTypeString:
	mov -16(%RBP), %RAX
	push %RAX
	push %RBP
	mov -96(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfe61
	mov -24(%RBP), %RAX
	push %RAX
	pushq $0
#call function deep-hash : Arrow<Tuple<String,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -96(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -112(%RBP), %R15
	mov -128(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	push %RBP
#call function == : Arrow<Cons<Tuple<String,Type>,Tuple<String,Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleTypeStringTupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfe55
	jmp uuid_00000000000dfe57
uuid_00000000000dfe55:
	movq $1, -120(%rbp)
uuid_00000000000dfe57:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dfe5b:
	mov -120(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<56>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized56
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfe5c
	jmp uuid_00000000000dfe5d
uuid_00000000000dfe5c:
	mov -128(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -96(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -128(%rbp)
	mov -112(%RBP), %R15
	mov -128(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	push %RBP
#call function == : Arrow<Cons<Tuple<String,Type>,Tuple<String,Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleTypeStringTupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfe58
	jmp uuid_00000000000dfe5a
uuid_00000000000dfe58:
	movq $1, -120(%rbp)
uuid_00000000000dfe5a:
	mov -240(%RBP),%RSP
	add $-240, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfe5b
uuid_00000000000dfe5d:
	push %RBP
	mov -120(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfe5e
	jmp uuid_00000000000dfe60
uuid_00000000000dfe5e:
	mov -176(%RBP), %RAX
	push %RAX
	movq -248(%rbp), %r15
	movq %r15, -80(%rbp)
	mov -248(%rbp), %r15
	mov %r15, -80(%rbp)
uuid_00000000000dfe60:
	mov -240(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000dfe63
uuid_00000000000dfe61:
uuid_00000000000dfe63:
	mov -104(%RBP),%RSP
	add $-104, %RSP
	mov -80(%rbp), %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
mem_SB_is_SB_nonzero_CL_ArrowU64Sized56:
	pushq $0
	pushq $0
uuid_00000000000dfe67:
	mov -72(%RBP), %RAX
	mov $56, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfe68
	jmp uuid_00000000000dfe69
uuid_00000000000dfe68:
	push %RBP
	mov %RBP, %R15
	add $-56, %R15
	mov -72(%RBP), %R14
	add %R14, %R15
	mov 0(%R15), %R15B
	mov %R15B, %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	setne %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfe64
	jmp uuid_00000000000dfe66
uuid_00000000000dfe64:
	movq $1, -80(%rbp)
uuid_00000000000dfe66:
	mov -88(%RBP),%RSP
	add $-88, %RSP
	mov -72(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -72(%rbp)
	add $8, %RSP
	jmp uuid_00000000000dfe67
uuid_00000000000dfe69:
	mov -80(%rbp), %RAX
	mov %rbp, %rsp
	sub $64, %rsp
	ret
_EQ__EQ__CL_ArrowU64ConsTupleTypeStringTupleTypeString:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfe94
	jmp uuid_00000000000dfe96
uuid_00000000000dfe94:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfe82
	jmp uuid_00000000000dfe84
uuid_00000000000dfe82:
	push %RBP
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	jmp uuid_00000000000dfe7f
	jmp uuid_00000000000dfe81
uuid_00000000000dfe7f:
	push %RBP
	mov -312(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dfe7c
	jmp uuid_00000000000dfe7e
uuid_00000000000dfe7c:
	movb $1, -352(%rbp)
uuid_00000000000dfe7e:
	mov -400(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000dfe81:
	mov -368(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000dfe84:
	mov -360(%RBP),%RSP
	add $-408, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfe91
	jmp uuid_00000000000dfe93
uuid_00000000000dfe91:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfe8b
	jmp uuid_00000000000dfe8d
uuid_00000000000dfe8b:
	push %RBP
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	jmp uuid_00000000000dfe88
	jmp uuid_00000000000dfe8a
uuid_00000000000dfe88:
	push %RBP
	mov -424(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dfe85
	jmp uuid_00000000000dfe87
uuid_00000000000dfe85:
	movb $1, -464(%rbp)
uuid_00000000000dfe87:
	mov -512(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000dfe8a:
	mov -480(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000dfe8d:
	mov -472(%RBP),%RSP
	add $-520, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfe8e
	jmp uuid_00000000000dfe90
uuid_00000000000dfe8e:
	movb $1, -288(%rbp)
uuid_00000000000dfe90:
	mov -416(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000dfe93:
	mov -304(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000dfe96:
	mov -296(%RBP),%RSP
	add $-520, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfe9d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dfb5c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dfe9f
uuid_00000000000dfe9d:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -520(%rbp)
	pushq -408(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfe9a
	jmp uuid_00000000000dfe9c
uuid_00000000000dfe9a:
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfe97
	jmp uuid_00000000000dfe99
uuid_00000000000dfe97:
	movq $1, -96(%rbp)
uuid_00000000000dfe99:
	mov -536(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000dfe9c:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000dfe9f:
	mov -192(%RBP),%RSP
	add $-536, %RSP
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
deep_SB_hash_CL_ArrowU64TupleTypeString:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfeae
	jmp uuid_00000000000dfeb0
uuid_00000000000dfeae:
	push %RBP
	pushq -120(%RBP)
	pushq -128(%RBP)
	pushq -136(%RBP)
	jmp uuid_00000000000dfeab
	jmp uuid_00000000000dfead
uuid_00000000000dfeab:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dfea8
	jmp uuid_00000000000dfeaa
uuid_00000000000dfea8:
	movb $1, -152(%rbp)
uuid_00000000000dfeaa:
	mov -200(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000dfead:
	mov -168(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000dfeb0:
	mov -160(%RBP),%RSP
	add $-208, %RSP
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfeb1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dfb71
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dfeb3
uuid_00000000000dfeb1:
#call function deep-hash : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
uuid_00000000000dfeb3:
	mov -104(%RBP),%RSP
	add $-208, %RSP
	mov -56(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
_DT_bind_CL_ArrowHashtableEqU64TupleTypeStringConsU64ConsTupleTypeStringHashtableEqU64TupleTypeString:
	mov -8(%RBP), %RAX
	push %RAX
	mov -16(%RBP), %RAX
	push %RAX
	mov -24(%RBP), %RAX
	push %RAX
	push %RBP
	mov -96(%RBP), %RAX
	mov $3, %R14
	mul %R14
	mov %RAX, %RAX
	mov -104(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfee7
	jmp uuid_00000000000dfee9
uuid_00000000000dfee7:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1000
	mov -96(%RBP), %RAX
	mov $30, %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov $56, %RAX
	mov -128(%RBP), %R14
	mul %R14
	push %RAX
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -136(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function memset : Arrow<Cons<Cons<Array<?,?>,U8>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $0
	pushq -136(%rbp)
	mov %RBX, %RBP
	call memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000dfee4:
	mov -152(%RBP), %RAX
	mov -104(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfee5
	jmp uuid_00000000000dfee6
uuid_00000000000dfee5:
	mov -112(%RBP), %R15
	mov -152(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	push %RBP
#call function mem-is-nonzero : Arrow<Sized<56>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized56
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfee1
	jmp uuid_00000000000dfee3
uuid_00000000000dfee1:
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfedb
	jmp uuid_00000000000dfedd
uuid_00000000000dfedb:
	push %RBP
	mov -328(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dfed8
	jmp uuid_00000000000dfeda
uuid_00000000000dfed8:
	push %RBP
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	jmp uuid_00000000000dfed5
	jmp uuid_00000000000dfed7
uuid_00000000000dfed5:
	movb $1, -344(%rbp)
uuid_00000000000dfed7:
	mov -376(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dfeda:
	mov -360(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dfedd:
	mov -352(%RBP),%RSP
	add $-416, %RSP
	mov -344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfede
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dfa98
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dfee0
uuid_00000000000dfede:
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<Tuple<String,Type>,U64>,?>,U64>,Tuple<String,Type>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -128(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsU64ConsTupleTypeStringConsU64Array_QM_TupleU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000dfee0:
	pop %RAX
	mov -280(%RBP),%RSP
	add $-416, %RSP
	push %RAX
uuid_00000000000dfee3:
	pop %RAX
	mov -216(%RBP),%RSP
	add $-416, %RSP
	mov -152(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -152(%rbp)
	add $56, %rsp
	add $56, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfee4
uuid_00000000000dfee6:
	movq -144(%rbp), %r15
	movq %r15, -112(%rbp)
	mov -144(%rbp), %r15
	mov %r15, -112(%rbp)
	movq -128(%rbp), %r15
	movq %r15, -104(%rbp)
	mov -128(%rbp), %r15
	mov %r15, -104(%rbp)
uuid_00000000000dfee9:
	mov -120(%RBP),%RSP
	add $-152, %RSP
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<Tuple<String,Type>,U64>,?>,U64>,Tuple<String,Type>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsU64ConsTupleTypeStringConsU64Array_QM_TupleU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -160(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfeea
	mov -96(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -96(%rbp)
	jmp uuid_00000000000dfeec
uuid_00000000000dfeea:
uuid_00000000000dfeec:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	subq $32, %rsp
	pushq 32(%rsp)
	pushq 48(%rsp)
	pushq 64(%rsp)
	pushq 80(%rsp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $88, %rsp
	ret
_DT_bind_SB_eq_CL_ArrowU64ConsU64ConsTupleTypeStringConsU64Array_QM_TupleU64TupleTypeString:
	pushq $0
#call function deep-hash : Arrow<Tuple<String,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -8(%RBP), %R15
	mov -88(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	pushq -96(%RBP)
	pushq -104(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	pushq -128(%RBP)
	push %RBP
#call function == : Arrow<Cons<Tuple<String,Type>,Tuple<String,Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleTypeStringTupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dff01
	jmp uuid_00000000000dff03
uuid_00000000000dff01:
	movq $1, -80(%rbp)
uuid_00000000000dff03:
	mov -192(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000dff07:
	mov -80(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<56>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized56
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dff08
	jmp uuid_00000000000dff09
uuid_00000000000dff08:
	mov -88(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -88(%rbp)
	mov -8(%RBP), %R15
	mov -88(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	pushq -96(%RBP)
	pushq -104(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	pushq -128(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	push %RBP
#call function == : Arrow<Cons<Tuple<String,Type>,Tuple<String,Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleTypeStringTupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dff04
	jmp uuid_00000000000dff06
uuid_00000000000dff04:
	movq $1, -80(%rbp)
uuid_00000000000dff06:
	mov -200(%RBP),%RSP
	add $-200, %RSP
	add $8, %RSP
	jmp uuid_00000000000dff07
uuid_00000000000dff09:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	mov -8(%RBP), %R15
	mov -88(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	mov -248(%RBP), %RAX
	mov %RAX, 0(%R15)
	mov -240(%RBP), %RAX
	mov %RAX, 8(%R15)
	mov -232(%RBP), %RAX
	mov %RAX, 16(%R15)
	mov -224(%RBP), %RAX
	mov %RAX, 24(%R15)
	mov -216(%RBP), %RAX
	mov %RAX, 32(%R15)
	mov -208(%RBP), %RAX
	mov %RAX, 40(%R15)
	mov -200(%RBP), %RAX
	mov %RAX, 48(%R15)
	mov -80(%rbp), %RAX
	mov %rbp, %rsp
	sub $72, %rsp
	ret
_DT_lookup_CL_ArrowU64ConsU64ConsTupleU64TupleU64StringHashtableEqU64TupleU64TupleU64String:
	mov -16(%RBP), %RAX
	push %RAX
	push %RBP
	mov -96(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dff4b
	mov -24(%RBP), %RAX
	push %RAX
	pushq $0
#call function deep-hash : Arrow<Tuple<Tuple<String,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64TupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -96(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -112(%RBP), %R15
	mov -128(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	push %RBP
#call function == : Arrow<Cons<Tuple<Tuple<String,U64>,U64>,Tuple<Tuple<String,U64>,U64>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleU64TupleU64StringTupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dff3f
	jmp uuid_00000000000dff41
uuid_00000000000dff3f:
	movq $1, -120(%rbp)
uuid_00000000000dff41:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dff45:
	mov -120(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<56>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized56
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dff46
	jmp uuid_00000000000dff47
uuid_00000000000dff46:
	mov -128(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -96(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -128(%rbp)
	mov -112(%RBP), %R15
	mov -128(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	push %RBP
#call function == : Arrow<Cons<Tuple<Tuple<String,U64>,U64>,Tuple<Tuple<String,U64>,U64>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleU64TupleU64StringTupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dff42
	jmp uuid_00000000000dff44
uuid_00000000000dff42:
	movq $1, -120(%rbp)
uuid_00000000000dff44:
	mov -240(%RBP),%RSP
	add $-240, %RSP
	add $8, %RSP
	jmp uuid_00000000000dff45
uuid_00000000000dff47:
	push %RBP
	mov -120(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000dff48
	jmp uuid_00000000000dff4a
uuid_00000000000dff48:
	mov -176(%RBP), %RAX
	push %RAX
	movq -248(%rbp), %r15
	movq %r15, -80(%rbp)
	mov -248(%rbp), %r15
	mov %r15, -80(%rbp)
uuid_00000000000dff4a:
	mov -240(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000dff4d
uuid_00000000000dff4b:
uuid_00000000000dff4d:
	mov -104(%RBP),%RSP
	add $-104, %RSP
	mov -80(%rbp), %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
_EQ__EQ__CL_ArrowU64ConsTupleU64TupleU64StringTupleU64TupleU64String:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dff89
	jmp uuid_00000000000dff8b
uuid_00000000000dff89:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dff77
	jmp uuid_00000000000dff79
uuid_00000000000dff77:
	push %RBP
	mov -336(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dff74
	jmp uuid_00000000000dff76
uuid_00000000000dff74:
	push %RBP
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	jmp uuid_00000000000dff71
	jmp uuid_00000000000dff73
uuid_00000000000dff71:
	movb $1, -352(%rbp)
uuid_00000000000dff73:
	mov -384(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000dff76:
	mov -368(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000dff79:
	mov -360(%RBP),%RSP
	add $-408, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dff86
	jmp uuid_00000000000dff88
uuid_00000000000dff86:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dff80
	jmp uuid_00000000000dff82
uuid_00000000000dff80:
	push %RBP
	mov -448(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dff7d
	jmp uuid_00000000000dff7f
uuid_00000000000dff7d:
	push %RBP
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	jmp uuid_00000000000dff7a
	jmp uuid_00000000000dff7c
uuid_00000000000dff7a:
	movb $1, -464(%rbp)
uuid_00000000000dff7c:
	mov -496(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000dff7f:
	mov -480(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000dff82:
	mov -472(%RBP),%RSP
	add $-520, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dff83
	jmp uuid_00000000000dff85
uuid_00000000000dff83:
	movb $1, -288(%rbp)
uuid_00000000000dff85:
	mov -416(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000dff88:
	mov -304(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000dff8b:
	mov -296(%RBP),%RSP
	add $-520, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dff92
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dfb5c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dff94
uuid_00000000000dff92:
	push %RBP
#call function == : Arrow<Cons<Tuple<String,U64>,Tuple<String,U64>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleU64StringTupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dff8f
	jmp uuid_00000000000dff91
uuid_00000000000dff8f:
	push %RBP
	mov -488(%RBP), %RAX
	mov -376(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dff8c
	jmp uuid_00000000000dff8e
uuid_00000000000dff8c:
	movq $1, -96(%rbp)
uuid_00000000000dff8e:
	mov -536(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000dff91:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000dff94:
	mov -192(%RBP),%RSP
	add $-536, %RSP
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
deep_SB_hash_CL_ArrowU64TupleU64TupleU64String:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dffab
	jmp uuid_00000000000dffad
uuid_00000000000dffab:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dffa8
	jmp uuid_00000000000dffaa
uuid_00000000000dffa8:
	push %RBP
	pushq -112(%RBP)
	pushq -120(%RBP)
	pushq -128(%RBP)
	jmp uuid_00000000000dffa5
	jmp uuid_00000000000dffa7
uuid_00000000000dffa5:
	movb $1, -152(%rbp)
uuid_00000000000dffa7:
	mov -184(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000dffaa:
	mov -168(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000dffad:
	mov -160(%RBP),%RSP
	add $-208, %RSP
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dffae
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dfb71
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dffb0
uuid_00000000000dffae:
#call function deep-hash : Arrow<U64,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function deep-hash : Arrow<Tuple<String,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
uuid_00000000000dffb0:
	mov -104(%RBP),%RSP
	add $-208, %RSP
	mov -56(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
_DT_bind_CL_ArrowHashtableEqU64TupleU64TupleU64StringConsU64ConsTupleU64TupleU64StringHashtableEqU64TupleU64TupleU64String:
	mov -8(%RBP), %RAX
	push %RAX
	mov -16(%RBP), %RAX
	push %RAX
	mov -24(%RBP), %RAX
	push %RAX
	push %RBP
	mov -96(%RBP), %RAX
	mov $3, %R14
	mul %R14
	mov %RAX, %RAX
	mov -104(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfffc
	jmp uuid_00000000000dfffe
uuid_00000000000dfffc:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1000
	mov -96(%RBP), %RAX
	mov $30, %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov $56, %RAX
	mov -128(%RBP), %R14
	mul %R14
	push %RAX
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -136(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function memset : Arrow<Cons<Cons<Array<?,?>,U8>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $0
	pushq -136(%rbp)
	mov %RBX, %RBP
	call memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000dfff9:
	mov -152(%RBP), %RAX
	mov -104(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfffa
	jmp uuid_00000000000dfffb
uuid_00000000000dfffa:
	mov -112(%RBP), %R15
	mov -152(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	push %RBP
#call function mem-is-nonzero : Arrow<Sized<56>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized56
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfff6
	jmp uuid_00000000000dfff8
uuid_00000000000dfff6:
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfff0
	jmp uuid_00000000000dfff2
uuid_00000000000dfff0:
	push %RBP
	mov -328(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dffed
	jmp uuid_00000000000dffef
uuid_00000000000dffed:
	push %RBP
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	jmp uuid_00000000000dffea
	jmp uuid_00000000000dffec
uuid_00000000000dffea:
	movb $1, -344(%rbp)
uuid_00000000000dffec:
	mov -376(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dffef:
	mov -360(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dfff2:
	mov -352(%RBP),%RSP
	add $-416, %RSP
	mov -344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfff3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dfa98
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dfff5
uuid_00000000000dfff3:
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<Tuple<Tuple<String,U64>,U64>,U64>,?>,U64>,Tuple<Tuple<String,U64>,U64>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -128(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsU64ConsTupleU64TupleU64StringConsU64Array_QM_TupleU64TupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000dfff5:
	pop %RAX
	mov -280(%RBP),%RSP
	add $-416, %RSP
	push %RAX
uuid_00000000000dfff8:
	pop %RAX
	mov -216(%RBP),%RSP
	add $-416, %RSP
	mov -152(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -152(%rbp)
	add $56, %rsp
	add $56, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfff9
uuid_00000000000dfffb:
	movq -144(%rbp), %r15
	movq %r15, -112(%rbp)
	mov -144(%rbp), %r15
	mov %r15, -112(%rbp)
	movq -128(%rbp), %r15
	movq %r15, -104(%rbp)
	mov -128(%rbp), %r15
	mov %r15, -104(%rbp)
uuid_00000000000dfffe:
	mov -120(%RBP),%RSP
	add $-152, %RSP
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<Tuple<Tuple<String,U64>,U64>,U64>,?>,U64>,Tuple<Tuple<String,U64>,U64>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsU64ConsTupleU64TupleU64StringConsU64Array_QM_TupleU64TupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -160(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000dffff
	mov -96(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -96(%rbp)
	jmp uuid_00000000000e0001
uuid_00000000000dffff:
uuid_00000000000e0001:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	subq $32, %rsp
	pushq 32(%rsp)
	pushq 48(%rsp)
	pushq 64(%rsp)
	pushq 80(%rsp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $88, %rsp
	ret
_DT_bind_SB_eq_CL_ArrowU64ConsU64ConsTupleU64TupleU64StringConsU64Array_QM_TupleU64TupleU64TupleU64String:
	pushq $0
#call function deep-hash : Arrow<Tuple<Tuple<String,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64TupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -8(%RBP), %R15
	mov -88(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	pushq -96(%RBP)
	pushq -104(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	pushq -128(%RBP)
	push %RBP
#call function == : Arrow<Cons<Tuple<Tuple<String,U64>,U64>,Tuple<Tuple<String,U64>,U64>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleU64TupleU64StringTupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000e0027
	jmp uuid_00000000000e0029
uuid_00000000000e0027:
	movq $1, -80(%rbp)
uuid_00000000000e0029:
	mov -192(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000e002d:
	mov -80(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<56>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized56
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000e002e
	jmp uuid_00000000000e002f
uuid_00000000000e002e:
	mov -88(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -88(%rbp)
	mov -8(%RBP), %R15
	mov -88(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	pushq -96(%RBP)
	pushq -104(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	pushq -128(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	push %RBP
#call function == : Arrow<Cons<Tuple<Tuple<String,U64>,U64>,Tuple<Tuple<String,U64>,U64>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleU64TupleU64StringTupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000e002a
	jmp uuid_00000000000e002c
uuid_00000000000e002a:
	movq $1, -80(%rbp)
uuid_00000000000e002c:
	mov -200(%RBP),%RSP
	add $-200, %RSP
	add $8, %RSP
	jmp uuid_00000000000e002d
uuid_00000000000e002f:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	mov -8(%RBP), %R15
	mov -88(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	mov -248(%RBP), %RAX
	mov %RAX, 0(%R15)
	mov -240(%RBP), %RAX
	mov %RAX, 8(%R15)
	mov -232(%RBP), %RAX
	mov %RAX, 16(%R15)
	mov -224(%RBP), %RAX
	mov %RAX, 24(%R15)
	mov -216(%RBP), %RAX
	mov %RAX, 32(%R15)
	mov -208(%RBP), %RAX
	mov %RAX, 40(%R15)
	mov -200(%RBP), %RAX
	mov %RAX, 48(%R15)
	mov -80(%rbp), %RAX
	mov %rbp, %rsp
	sub $72, %rsp
	ret
non_SB_zero_CL_ArrowU64ListTupleTypeTupleStringString:
	mov $1, %RAX
	push %RAX
	mov -72(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
cons_CL_ArrowListTupleTypeTupleStringStringConsListTupleTypeTupleStringStringTupleTypeTupleStringString:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
#call function close : Arrow<List<Tuple<Tuple<String,String>,Type>>,Array<List<Tuple<Tuple<String,String>,Type>>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTupleTypeTupleStringStringListTupleTypeTupleStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	subq $72, %rsp
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
close_CL_ArrowArray_QM_ListTupleTypeTupleStringStringListTupleTypeTupleStringString:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $72
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -72(%rbp), %r15
	movq %r15, 0(%r14)
	movq -64(%rbp), %r15
	movq %r15, 8(%r14)
	movq -56(%rbp), %r15
	movq %r15, 16(%r14)
	movq -48(%rbp), %r15
	movq %r15, 24(%r14)
	movq -40(%rbp), %r15
	movq %r15, 32(%r14)
	movq -32(%rbp), %r15
	movq %r15, 40(%r14)
	movq -24(%rbp), %r15
	movq %r15, 48(%r14)
	movq -16(%rbp), %r15
	movq %r15, 56(%r14)
	movq -8(%rbp), %r15
	movq %r15, 64(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
_DT_bind_CL_ArrowHashtableIsTypeASTConsTypeConsASTHashtableIsTypeAST:
	mov -8(%RBP), %RAX
	push %RAX
	mov -16(%RBP), %RAX
	push %RAX
	mov -24(%RBP), %RAX
	push %RAX
	push %RBP
	mov -144(%RBP), %RAX
	mov $3, %R14
	mul %R14
	mov %RAX, %RAX
	mov -152(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000e00ad
	jmp uuid_00000000000e00af
uuid_00000000000e00ad:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1000
	mov -144(%RBP), %RAX
	mov $30, %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov $104, %RAX
	mov -176(%RBP), %R14
	mul %R14
	push %RAX
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function memset : Arrow<Cons<Cons<Array<?,?>,U8>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq $0
	pushq -184(%rbp)
	mov %RBX, %RBP
	call memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000e00aa:
	mov -200(%RBP), %RAX
	mov -152(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000e00ab
	jmp uuid_00000000000e00ac
uuid_00000000000e00ab:
	mov -160(%RBP), %R15
	mov -200(%RBP), %RAX
	mov $104,%R14
	mul %R14
	add %RAX, %R15
	pushq 96(%R15)
	pushq 88(%R15)
	pushq 80(%R15)
	pushq 72(%R15)
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	push %RBP
#call function mem-is-nonzero : Arrow<Sized<104>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized104
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000e00a7
	jmp uuid_00000000000e00a9
uuid_00000000000e00a7:
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq $0
	push %RBP
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000e00a0
	jmp uuid_00000000000e00a2
uuid_00000000000e00a0:
	push %RBP
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	jmp uuid_00000000000e009d
	jmp uuid_00000000000e009f
uuid_00000000000e009d:
	push %RBP
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	jmp uuid_00000000000e009a
	jmp uuid_00000000000e009c
uuid_00000000000e009a:
	movb $1, -536(%rbp)
uuid_00000000000e009c:
	mov -584(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000e009f:
	mov -552(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000e00a2:
	mov -544(%RBP),%RSP
	add $-656, %RSP
	mov -536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000e00a4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000e00a3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000e00a6
uuid_00000000000e00a4:
#call function .bind-is : Arrow<Cons<Cons<Cons<Array<Tuple<AST,Type>,?>,U64>,AST>,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -176(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_is_CL_ArrowU64ConsTypeConsASTConsU64Array_QM_TupleTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000e00a6:
	pop %RAX
	mov -424(%RBP),%RSP
	add $-656, %RSP
	push %RAX
uuid_00000000000e00a9:
	pop %RAX
	mov -312(%RBP),%RSP
	add $-656, %RSP
	mov -200(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -200(%rbp)
	add $104, %rsp
	add $104, %rsp
	add $104, %rsp
	add $8, %rsp
	add $24, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000e00aa
uuid_00000000000e00ac:
	movq -192(%rbp), %r15
	movq %r15, -160(%rbp)
	mov -192(%rbp), %r15
	mov %r15, -160(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -152(%rbp)
	mov -176(%rbp), %r15
	mov %r15, -152(%rbp)
uuid_00000000000e00af:
	mov -168(%RBP),%RSP
	add $-200, %RSP
#call function .bind-is : Arrow<Cons<Cons<Cons<Array<Tuple<AST,Type>,?>,U64>,AST>,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_is_CL_ArrowU64ConsTypeConsASTConsU64Array_QM_TupleTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -208(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000e00b0
	mov -144(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -144(%rbp)
	jmp uuid_00000000000e00b2
uuid_00000000000e00b0:
uuid_00000000000e00b2:
	mov -216(%RBP),%RSP
	add $-216, %RSP
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	subq $32, %rsp
	pushq 32(%rsp)
	pushq 48(%rsp)
	pushq 64(%rsp)
	pushq 80(%rsp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
_DT_bind_SB_is_CL_ArrowU64ConsTypeConsASTConsU64Array_QM_TupleTypeAST:
	pushq $0
#call function hash : Arrow<Sized<72>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call hash_CL_ArrowU64Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -8(%RBP), %R15
	mov -136(%RBP), %RAX
	mov $104,%R14
	mul %R14
	add %RAX, %R15
	pushq 96(%R15)
	pushq 88(%R15)
	pushq 80(%R15)
	pushq 72(%R15)
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	push %RBP
#call function is : Arrow<Cons<Sized<72>,Sized<72>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized72Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000e00b7
	jmp uuid_00000000000e00b9
uuid_00000000000e00b7:
	movq $1, -128(%rbp)
uuid_00000000000e00b9:
	mov -320(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000e00bd:
	mov -128(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<104>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized104
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000e00be
	jmp uuid_00000000000e00bf
uuid_00000000000e00be:
	mov -136(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -136(%rbp)
	mov -8(%RBP), %R15
	mov -136(%RBP), %RAX
	mov $104,%R14
	mul %R14
	add %RAX, %R15
	pushq 96(%R15)
	pushq 88(%R15)
	pushq 80(%R15)
	pushq 72(%R15)
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	push %RBP
#call function is : Arrow<Cons<Sized<72>,Sized<72>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized72Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000e00ba
	jmp uuid_00000000000e00bc
uuid_00000000000e00ba:
	movq $1, -128(%rbp)
uuid_00000000000e00bc:
	mov -328(%RBP),%RSP
	add $-328, %RSP
	add $8, %RSP
	jmp uuid_00000000000e00bd
uuid_00000000000e00bf:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	mov -8(%RBP), %R15
	mov -136(%RBP), %RAX
	mov $104,%R14
	mul %R14
	add %RAX, %R15
	mov -424(%RBP), %RAX
	mov %RAX, 0(%R15)
	mov -416(%RBP), %RAX
	mov %RAX, 8(%R15)
	mov -408(%RBP), %RAX
	mov %RAX, 16(%R15)
	mov -400(%RBP), %RAX
	mov %RAX, 24(%R15)
	mov -392(%RBP), %RAX
	mov %RAX, 32(%R15)
	mov -384(%RBP), %RAX
	mov %RAX, 40(%R15)
	mov -376(%RBP), %RAX
	mov %RAX, 48(%R15)
	mov -368(%RBP), %RAX
	mov %RAX, 56(%R15)
	mov -360(%RBP), %RAX
	mov %RAX, 64(%R15)
	mov -352(%RBP), %RAX
	mov %RAX, 72(%R15)
	mov -344(%RBP), %RAX
	mov %RAX, 80(%R15)
	mov -336(%RBP), %RAX
	mov %RAX, 88(%R15)
	mov -328(%RBP), %RAX
	mov %RAX, 96(%R15)
	mov -128(%rbp), %RAX
	mov %rbp, %rsp
	sub $120, %rsp
	ret
mem_SB_is_SB_nonzero_CL_ArrowU64Sized104:
	pushq $0
	pushq $0
uuid_00000000000e00c3:
	mov -120(%RBP), %RAX
	mov $104, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000e00c4
	jmp uuid_00000000000e00c5
uuid_00000000000e00c4:
	push %RBP
	mov %RBP, %R15
	add $-104, %R15
	mov -120(%RBP), %R14
	add %R14, %R15
	mov 0(%R15), %R15B
	mov %R15B, %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	setne %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000e00c0
	jmp uuid_00000000000e00c2
uuid_00000000000e00c0:
	movq $1, -128(%rbp)
uuid_00000000000e00c2:
	mov -136(%RBP),%RSP
	add $-136, %RSP
	mov -120(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -120(%rbp)
	add $8, %RSP
	jmp uuid_00000000000e00c3
uuid_00000000000e00c5:
	mov -128(%rbp), %RAX
	mov %rbp, %rsp
	sub $112, %rsp
	ret
is_CL_ArrowU64ConsSized72Sized72:
	pushq $0
	pushq $1
uuid_00000000000e00c9:
	mov $72, %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RAX, %R14
	mov -160(%RBP), %RAX
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000e00ca
	jmp uuid_00000000000e00cb
uuid_00000000000e00ca:
	mov %RBP, %R15
	add $-72, %R15
	mov -160(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	mov %RBP, %R15
	add $-144, %R15
	mov -160(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	push %RBP
	mov -176(%RBP), %RAX
	mov -184(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000e00c6
	movq $0, -168(%rbp)
	jmp uuid_00000000000e00c8
uuid_00000000000e00c6:
uuid_00000000000e00c8:
	mov -192(%RBP),%RSP
	add $-192, %RSP
	mov -160(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -160(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000e00c9
uuid_00000000000e00cb:
	mov -168(%rbp), %RAX
	mov %rbp, %rsp
	sub $152, %rsp
	ret
hash_CL_ArrowU64Sized72:
	pushq $0
	pushq $0
uuid_00000000000e00cc:
	mov $72, %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RAX, %R14
	mov -88(%RBP), %RAX
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000e00cd
	jmp uuid_00000000000e00ce
uuid_00000000000e00cd:
	mov %RBP, %R15
	add $-72, %R15
	mov -88(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	mov %R15, %R14
	mov -96(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -96(%rbp)
	mov -88(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -88(%rbp)
	mov -96(%RBP),%RAX
	shl $10,%RAX
	mov %RAX, %R14
	mov -96(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -96(%rbp)
	mov -96(%RBP),%RAX
	shr $6,%RAX
	mov %RAX, %R14
	mov -96(%RBP), %RAX
	xorq %R14,%RAX
	movq %RAX, -96(%rbp)
	jmp uuid_00000000000e00cc
uuid_00000000000e00ce:
	mov -96(%RBP),%RAX
	shl $3,%RAX
	mov %RAX, %R14
	mov -96(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -96(%rbp)
	mov -96(%RBP),%RAX
	shr $11,%RAX
	mov %RAX, %R14
	mov -96(%RBP), %RAX
	xorq %R14,%RAX
	movq %RAX, -96(%rbp)
	mov -96(%RBP),%RAX
	shl $15,%RAX
	mov %RAX, %R14
	mov -96(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -96(%rbp)
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
_DT_lookup_CL_ArrowTypeConsTypeConsASTHashtableIsTypeAST:
	mov -16(%RBP), %RAX
	push %RAX
	push %RBP
	mov -144(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000e00eb
	mov -24(%RBP), %RAX
	push %RAX
	pushq $0
#call function hash : Arrow<Sized<72>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call hash_CL_ArrowU64Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -144(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -160(%RBP), %R15
	mov -176(%RBP), %RAX
	mov $104,%R14
	mul %R14
	add %RAX, %R15
	pushq 96(%R15)
	pushq 88(%R15)
	pushq 80(%R15)
	pushq 72(%R15)
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq -240(%RBP)
	pushq -248(%RBP)
	push %RBP
#call function is : Arrow<Cons<Sized<72>,Sized<72>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized72Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000e00df
	jmp uuid_00000000000e00e1
uuid_00000000000e00df:
	movq $1, -168(%rbp)
uuid_00000000000e00e1:
	mov -360(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000e00e5:
	mov -168(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<104>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized104
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000e00e6
	jmp uuid_00000000000e00e7
uuid_00000000000e00e6:
	mov -176(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -144(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -176(%rbp)
	mov -160(%RBP), %R15
	mov -176(%RBP), %RAX
	mov $104,%R14
	mul %R14
	add %RAX, %R15
	pushq 96(%R15)
	pushq 88(%R15)
	pushq 80(%R15)
	pushq 72(%R15)
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq -240(%RBP)
	pushq -248(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	push %RBP
#call function is : Arrow<Cons<Sized<72>,Sized<72>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized72Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000e00e2
	jmp uuid_00000000000e00e4
uuid_00000000000e00e2:
	movq $1, -168(%rbp)
uuid_00000000000e00e4:
	mov -368(%RBP),%RSP
	add $-368, %RSP
	add $8, %RSP
	jmp uuid_00000000000e00e5
uuid_00000000000e00e7:
	push %RBP
	mov -168(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000e00e8
	jmp uuid_00000000000e00ea
uuid_00000000000e00e8:
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	movq -392(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -112(%rbp)
uuid_00000000000e00ea:
	mov -368(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000e00ed
uuid_00000000000e00eb:
uuid_00000000000e00ed:
	mov -152(%RBP),%RSP
	add $-152, %RSP
	subq $24, %rsp
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
_DT_bind_CL_ArrowHashtableEqListTypeTupleU64StringConsListTypeConsTupleU64StringHashtableEqListTypeTupleU64String:
	mov -8(%RBP), %RAX
	push %RAX
	mov -16(%RBP), %RAX
	push %RAX
	mov -24(%RBP), %RAX
	push %RAX
	push %RBP
	mov -112(%RBP), %RAX
	mov $3, %R14
	mul %R14
	mov %RAX, %RAX
	mov -120(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000e0123
	jmp uuid_00000000000e0125
uuid_00000000000e0123:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1000
	mov -112(%RBP), %RAX
	mov $30, %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov $72, %RAX
	mov -144(%RBP), %R14
	mul %R14
	push %RAX
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function memset : Arrow<Cons<Cons<Array<?,?>,U8>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $0
	pushq -152(%rbp)
	mov %RBX, %RBP
	call memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000e0120:
	mov -168(%RBP), %RAX
	mov -120(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000e0121
	jmp uuid_00000000000e0122
uuid_00000000000e0121:
	mov -128(%RBP), %R15
	mov -168(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	push %RBP
#call function mem-is-nonzero : Arrow<Sized<72>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000e011d
	jmp uuid_00000000000e011f
uuid_00000000000e011d:
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000e0117
	jmp uuid_00000000000e0119
uuid_00000000000e0117:
	push %RBP
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	jmp uuid_00000000000e0114
	jmp uuid_00000000000e0116
uuid_00000000000e0114:
	push %RBP
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	jmp uuid_00000000000e0111
	jmp uuid_00000000000e0113
uuid_00000000000e0111:
	movb $1, -408(%rbp)
uuid_00000000000e0113:
	mov -472(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000e0116:
	mov -424(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000e0119:
	mov -416(%RBP),%RSP
	add $-496, %RSP
	mov -408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000e011a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000dfa98
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000e011c
uuid_00000000000e011a:
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<Tuple<String,U64>,List<Type>>,?>,U64>,Tuple<String,U64>>,List<Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -144(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsListTypeConsTupleU64StringConsU64Array_QM_TupleListTypeTupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000e011c:
	pop %RAX
	mov -328(%RBP),%RSP
	add $-496, %RSP
	push %RAX
uuid_00000000000e011f:
	pop %RAX
	mov -248(%RBP),%RSP
	add $-496, %RSP
	mov -168(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -168(%rbp)
	add $72, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000e0120
uuid_00000000000e0122:
	movq -160(%rbp), %r15
	movq %r15, -128(%rbp)
	mov -160(%rbp), %r15
	mov %r15, -128(%rbp)
	movq -144(%rbp), %r15
	movq %r15, -120(%rbp)
	mov -144(%rbp), %r15
	mov %r15, -120(%rbp)
uuid_00000000000e0125:
	mov -136(%RBP),%RSP
	add $-168, %RSP
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<Tuple<String,U64>,List<Type>>,?>,U64>,Tuple<String,U64>>,List<Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsListTypeConsTupleU64StringConsU64Array_QM_TupleListTypeTupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -176(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000e0126
	mov -112(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -112(%rbp)
	jmp uuid_00000000000e0128
uuid_00000000000e0126:
uuid_00000000000e0128:
	mov -184(%RBP),%RSP
	add $-184, %RSP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq $0
	subq $32, %rsp
	pushq 32(%rsp)
	pushq 48(%rsp)
	pushq 64(%rsp)
	pushq 80(%rsp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $104, %rsp
	ret
_DT_bind_SB_eq_CL_ArrowU64ConsListTypeConsTupleU64StringConsU64Array_QM_TupleListTypeTupleU64String:
	pushq $0
#call function deep-hash : Arrow<Tuple<String,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -8(%RBP), %R15
	mov -104(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	pushq -112(%RBP)
	pushq -120(%RBP)
	pushq -128(%RBP)
	push %RBP
#call function == : Arrow<Cons<Tuple<String,U64>,Tuple<String,U64>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleU64StringTupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000e0143
	jmp uuid_00000000000e0145
uuid_00000000000e0143:
	movq $1, -96(%rbp)
uuid_00000000000e0145:
	mov -208(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000e0149:
	mov -96(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<72>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000e014a
	jmp uuid_00000000000e014b
uuid_00000000000e014a:
	mov -104(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -104(%rbp)
	mov -8(%RBP), %R15
	mov -104(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	pushq -128(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	push %RBP
#call function == : Arrow<Cons<Tuple<String,U64>,Tuple<String,U64>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleU64StringTupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000e0146
	jmp uuid_00000000000e0148
uuid_00000000000e0146:
	movq $1, -96(%rbp)
uuid_00000000000e0148:
	mov -216(%RBP),%RSP
	add $-216, %RSP
	add $8, %RSP
	jmp uuid_00000000000e0149
uuid_00000000000e014b:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	mov -8(%RBP), %R15
	mov -104(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	mov -280(%RBP), %RAX
	mov %RAX, 0(%R15)
	mov -272(%RBP), %RAX
	mov %RAX, 8(%R15)
	mov -264(%RBP), %RAX
	mov %RAX, 16(%R15)
	mov -256(%RBP), %RAX
	mov %RAX, 24(%R15)
	mov -248(%RBP), %RAX
	mov %RAX, 32(%R15)
	mov -240(%RBP), %RAX
	mov %RAX, 40(%R15)
	mov -232(%RBP), %RAX
	mov %RAX, 48(%R15)
	mov -224(%RBP), %RAX
	mov %RAX, 56(%R15)
	mov -216(%RBP), %RAX
	mov %RAX, 64(%R15)
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
_EQ__EQ__CL_ArrowU64ConsListTypeListType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000e015b
	jmp uuid_00000000000e015d
uuid_00000000000e015b:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000e0158
	jmp uuid_00000000000e015a
uuid_00000000000e0158:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000e0155
	jmp uuid_00000000000e0157
uuid_00000000000e0155:
	movb $1, -288(%rbp)
uuid_00000000000e0157:
	mov -352(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000e015a:
	mov -304(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000e015d:
	mov -296(%RBP),%RSP
	add $-392, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000e0186
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000e0176
	jmp uuid_00000000000e0178
uuid_00000000000e0176:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000e0164
	jmp uuid_00000000000e0166
uuid_00000000000e0164:
	push %RBP
	mov -544(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000e0161
	jmp uuid_00000000000e0163
uuid_00000000000e0161:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000e015e
	jmp uuid_00000000000e0160
uuid_00000000000e015e:
	movb $1, -560(%rbp)
uuid_00000000000e0160:
	mov -624(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000e0163:
	mov -576(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000e0166:
	mov -568(%RBP),%RSP
	add $-648, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000e0173
	jmp uuid_00000000000e0175
uuid_00000000000e0173:
	push %RBP
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000e016d
	jmp uuid_00000000000e016f
uuid_00000000000e016d:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000e016a
	jmp uuid_00000000000e016c
uuid_00000000000e016a:
	push %RBP
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	jmp uuid_00000000000e0167
	jmp uuid_00000000000e0169
uuid_00000000000e0167:
	movb $1, -704(%rbp)
uuid_00000000000e0169:
	mov -768(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000e016c:
	mov -720(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000e016f:
	mov -712(%RBP),%RSP
	add $-792, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000e0170
	jmp uuid_00000000000e0172
uuid_00000000000e0170:
	movb $1, -496(%rbp)
uuid_00000000000e0172:
	mov -656(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000e0175:
	mov -512(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000e0178:
	mov -504(%RBP),%RSP
	add $-792, %RSP
	mov -496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000e0183
	push %RBP
	jmp uuid_00000000000e0180
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad95
	pushq $uuid_00000000000e017f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000e0182
uuid_00000000000e0180:
uuid_00000000000e0182:
	mov -800(%RBP),%RSP
	add $-800, %RSP
	jmp uuid_00000000000e0185
uuid_00000000000e0183:
	push %RBP
#call function == : Arrow<Cons<List<Type>,List<Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000e017c
	jmp uuid_00000000000e017e
uuid_00000000000e017c:
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000e0179
	jmp uuid_00000000000e017b
uuid_00000000000e0179:
	movq $1, -96(%rbp)
uuid_00000000000e017b:
	mov -808(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000e017e:
	mov -800(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000e0185:
	mov -400(%RBP),%RSP
	add $-808, %RSP
	jmp uuid_00000000000e0188
uuid_00000000000e0186:
	movq $1, -96(%rbp)
uuid_00000000000e0188:
	mov -192(%RBP),%RSP
	add $-392, %RSP
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
hash_CL_ArrowU64Sized8:
	pushq $0
	pushq $0
uuid_00000000000e0189:
	mov $8, %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RAX, %R14
	mov -24(%RBP), %RAX
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000e018a
	jmp uuid_00000000000e018b
uuid_00000000000e018a:
	mov %RBP, %R15
	add $-8, %R15
	mov -24(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	mov %R15, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -24(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
	mov -32(%RBP),%RAX
	shl $10,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%RBP),%RAX
	shr $6,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	xorq %R14,%RAX
	movq %RAX, -32(%rbp)
	jmp uuid_00000000000e0189
uuid_00000000000e018b:
	mov -32(%RBP),%RAX
	shl $3,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%RBP),%RAX
	shr $11,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	xorq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%RBP),%RAX
	shl $15,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
.data
uuid_00000000000dad95:
	.ascii "Pattern Match Failure"
	.zero 1
uuid_00000000000dad96:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-stdlib.lm Line: 83 Column: 5"
	.zero 1
uuid_00000000000dadf7:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-stdlib.lm Line: 99 Column: 5"
	.zero 1
uuid_00000000000dae07:
	.ascii "()"
	.zero 1
uuid_00000000000dae17:
	.ascii "("
	.zero 1
uuid_00000000000dae18:
	.ascii " "
	.zero 1
uuid_00000000000dae19:
	.ascii ")"
	.zero 1
uuid_00000000000dae20:
	.ascii "["
	.zero 1
uuid_00000000000dae21:
	.ascii "]"
	.zero 1
uuid_00000000000dae22:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-stdlib.lm Line: 121 Column: 5"
	.zero 1
uuid_00000000000dae2f:
	.ascii " at "
	.zero 1
uuid_00000000000dae3b:
	.ascii "Unable to open file: "
	.zero 1
uuid_00000000000dae3c:
	.ascii "\n"
	.zero 1
uuid_00000000000dae40:
	.ascii "File Read Error ["
	.zero 1
uuid_00000000000dae41:
	.ascii "]: "
	.zero 1
uuid_00000000000dae5a:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-stdlib.lm Line: 356 Column: 5"
	.zero 1
uuid_00000000000dae6a:
	.ascii "0"
	.zero 1
uuid_00000000000dae6e:
	.ascii "-"
	.zero 1
uuid_00000000000dae7e:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-stdlib.lm Line: 465 Column: 8"
	.zero 1
uuid_00000000000daea3:
	.ascii "1"
	.zero 1
uuid_00000000000daea4:
	.ascii "2"
	.zero 1
uuid_00000000000daea5:
	.ascii "3"
	.zero 1
uuid_00000000000daea6:
	.ascii "4"
	.zero 1
uuid_00000000000daea7:
	.ascii "5"
	.zero 1
uuid_00000000000daea8:
	.ascii "6"
	.zero 1
uuid_00000000000daea9:
	.ascii "7"
	.zero 1
uuid_00000000000daeaa:
	.ascii "8"
	.zero 1
uuid_00000000000daeab:
	.ascii "9"
	.zero 1
uuid_00000000000daeac:
	.ascii "a"
	.zero 1
uuid_00000000000daead:
	.ascii "b"
	.zero 1
uuid_00000000000daeae:
	.ascii "c"
	.zero 1
uuid_00000000000daeaf:
	.ascii "d"
	.zero 1
uuid_00000000000daeb0:
	.ascii "e"
	.zero 1
uuid_00000000000daeb1:
	.ascii "f"
	.zero 1
uuid_00000000000daeb2:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-stdlib.lm Line: 498 Column: 8"
	.zero 1
uuid_00000000000daee6:
	.ascii ""
	.zero 1
malloc_SB_block_SB_head_CL_U64:
.zero 8
malloc_SB_block_SB_tail_CL_U64:
.zero 8
malloc_SB_first_SB_free_CL_U64:
.zero 8
malloc_SB_page_SB_tail_CL_U64:
.zero 8
malloc_SB_large_SB_size_CL_U64:
.zero 8
point_SB_of_SB_interest_CL_U64:
.zero 8
rc_SB_magic_SB_number_CL_U64:
.zero 8
assemble_SB_header_SB_section_CL_SS:
.zero 24
assemble_SB_text_SB_section_CL_SS:
.zero 24
assemble_SB_init_SB_section_CL_SS:
.zero 24
assemble_SB_data_SB_section_CL_SS:
.zero 24
assemble_SB_profile_SB_onexit_CL_SS:
.zero 24
assemble_SB_global_SB_initializer_SB_section_CL_SS:
.zero 24
assemble_SB_final_CL_String:
.zero 8
assemble_SB_argv_SB_referenced_CL_U8:
.zero 8
main_SB_with_SB_argv_CL_U8:
.zero 8
main_SB_with_CL_U8:
.zero 8
config_SB_platform_SB_prefix_CL_String:
.zero 8
uuid_00000000000daf3b:
	.ascii "PLATFORM/BLOB/"
	.zero 1
config_SB_profile_SB_invocations_CL_U8:
.zero 8
config_SB_strict_CL_U8:
.zero 8
config_SB_preprocess_CL_U8:
.zero 8
config_SB_target_CL_String:
.zero 8
config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode:
.zero 8
config_SB_mode_CL_CompileModeCompileMode:
.zero 8
preprocess_SB_macros_CL_MacroListMacroList:
.zero 168
ast_SB_tokenized_SB_program_CL_ListTokenListToken:
.zero 72
ast_SB_parsed_SB_program_CL_ASTAST:
.zero 72
global_SB_type_SB_context_CL_TContextTContext:
.zero 120
global_SB_ctx_CL_FContextFContext:
.zero 200
parse_SB_suffixes_CL_SfxListSfxList:
.zero 48
stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecialize:
.zero 200
uuid_00000000000daf44:
	.ascii "_EX_"
	.zero 1
uuid_00000000000daf45:
	.ascii "_DL_"
	.zero 1
uuid_00000000000daf46:
	.ascii "_MD_"
	.zero 1
uuid_00000000000daf47:
	.ascii "_AM_"
	.zero 1
uuid_00000000000daf48:
	.ascii "_ML_"
	.zero 1
uuid_00000000000daf49:
	.ascii "_AD_"
	.zero 1
uuid_00000000000daf4a:
	.ascii "_SB_"
	.zero 1
uuid_00000000000daf4b:
	.ascii "_DT_"
	.zero 1
uuid_00000000000daf4c:
	.ascii "_DV_"
	.zero 1
uuid_00000000000daf4d:
	.ascii "_CL_"
	.zero 1
uuid_00000000000daf4e:
	.ascii "_SC_"
	.zero 1
uuid_00000000000daf4f:
	.ascii "_LT_"
	.zero 1
uuid_00000000000daf50:
	.ascii "_EQ_"
	.zero 1
uuid_00000000000daf51:
	.ascii "_GT_"
	.zero 1
uuid_00000000000daf52:
	.ascii "_QM_"
	.zero 1
uuid_00000000000daf53:
	.ascii "_AT_"
	.zero 1
uuid_00000000000daf54:
	.ascii "_LB_"
	.zero 1
uuid_00000000000daf55:
	.ascii "_RB_"
	.zero 1
uuid_00000000000daf56:
	.ascii "_HT_"
	.zero 1
uuid_00000000000daf57:
	.ascii "_US_"
	.zero 1
uuid_00000000000daf58:
	.ascii "_TK_"
	.zero 1
uuid_00000000000daf59:
	.ascii "_BR_"
	.zero 1
uuid_00000000000daf5a:
	.ascii "_TL_"
	.zero 1
uuid_00000000000daf5b:
	.ascii "File: SRC/mangle-identifier.lm Line: 10 Column: 8"
	.zero 1
uuid_00000000000dafa7:
	.ascii "?"
	.zero 1
uuid_00000000000dafc0:
	.ascii "File: SRC/mangle-identifier.lm Line: 55 Column: 32"
	.zero 1
uuid_00000000000dafd0:
	.ascii "File: SRC/mangle-identifier.lm Line: 49 Column: 5"
	.zero 1
uuid_00000000000dafe9:
	.ascii "void"
	.zero 1
uuid_00000000000daff0:
	.ascii "Nil"
	.zero 1
uuid_00000000000daffa:
	.ascii "Never"
	.zero 1
uuid_00000000000db004:
	.ascii "U8"
	.zero 1
uuid_00000000000db00e:
	.ascii "unsigned char"
	.zero 1
uuid_00000000000db00f:
	.ascii "U16"
	.zero 1
uuid_00000000000db019:
	.ascii "unsigned short"
	.zero 1
uuid_00000000000db01a:
	.ascii "U32"
	.zero 1
uuid_00000000000db024:
	.ascii "unsigned int"
	.zero 1
uuid_00000000000db025:
	.ascii "U64"
	.zero 1
uuid_00000000000db02f:
	.ascii "unsigned long"
	.zero 1
uuid_00000000000db030:
	.ascii "I8"
	.zero 1
uuid_00000000000db03a:
	.ascii "signed char"
	.zero 1
uuid_00000000000db03b:
	.ascii "I16"
	.zero 1
uuid_00000000000db045:
	.ascii "signed short"
	.zero 1
uuid_00000000000db046:
	.ascii "I32"
	.zero 1
uuid_00000000000db050:
	.ascii "signed int"
	.zero 1
uuid_00000000000db051:
	.ascii "I64"
	.zero 1
uuid_00000000000db05b:
	.ascii "signed long"
	.zero 1
uuid_00000000000db05c:
	.ascii "String"
	.zero 1
uuid_00000000000db066:
	.ascii "char*"
	.zero 1
uuid_00000000000db067:
	.ascii "File"
	.zero 1
uuid_00000000000db071:
	.ascii "FILE"
	.zero 1
uuid_00000000000db084:
	.ascii "Array"
	.zero 1
uuid_00000000000db08e:
	.ascii "*"
	.zero 1
uuid_00000000000db098:
	.ascii "UnknownCTypename"
	.zero 1
uuid_00000000000db09c:
	.ascii "File: SRC/mangle-c-type.lm Line: 10 Column: 5"
	.zero 1
uuid_00000000000db0d0:
	.ascii "\\"
	.zero 1
uuid_00000000000db0d1:
	.ascii "Illegal Character: "
	.zero 1
uuid_00000000000db0d2:
	.ascii "Illegal Escape Sequence In String "
	.zero 1
uuid_00000000000db0d3:
	.ascii "File: SRC/escape-string.lm Line: 12 Column: 11"
	.zero 1
uuid_00000000000db0f8:
	.ascii "\\\\\""
	.zero 1
uuid_00000000000db0f9:
	.ascii ";"
	.zero 1
uuid_00000000000db0fa:
	.ascii "\\\\\\\\"
	.zero 1
uuid_00000000000db0fb:
	.ascii "'"
	.zero 1
uuid_00000000000db0fc:
	.ascii "λ"
	.zero 1
uuid_00000000000db0fd:
	.ascii "\\\\n"
	.zero 1
uuid_00000000000db0fe:
	.ascii "#"
	.zero 1
uuid_00000000000db0ff:
	.ascii "	"
	.zero 1
uuid_00000000000db100:
	.ascii "File: SRC/escape-string.lm Line: 50 Column: 14"
	.zero 1
uuid_00000000000db122:
	.ascii "\\\\"
	.zero 1
uuid_00000000000db126:
	.ascii "\\n"
	.zero 1
uuid_00000000000db127:
	.ascii "File: SRC/escape-string.lm Line: 45 Column: 8"
	.zero 1
uuid_00000000000db146:
	.ascii "File: SRC/escape-string.lm Line: 85 Column: 5"
	.zero 1
uuid_00000000000db15f:
	.ascii "as"
	.zero 1
uuid_00000000000db172:
	.ascii "In Coercion\n"
	.zero 1
uuid_00000000000db173:
	.ascii ":\n"
	.zero 1
uuid_00000000000db174:
	.ascii "As: "
	.zero 1
uuid_00000000000db17e:
	.ascii "In Function Application\n"
	.zero 1
uuid_00000000000db17f:
	.ascii "Return:\n"
	.zero 1
uuid_00000000000db180:
	.ascii "File: SRC/error-formatting.lm Line: 12 Column: 5"
	.zero 1
uuid_00000000000db18a:
	.ascii "."
	.zero 1
uuid_00000000000db194:
	.ascii "File: SRC/is-variable.lm Line: 9 Column: 5"
	.zero 1
uuid_00000000000db228:
	.ascii "@"
	.zero 1
uuid_00000000000db22c:
	.ascii "Used"
	.zero 1
uuid_00000000000db22d:
	.ascii "Unused"
	.zero 1
uuid_00000000000db22e:
	.ascii "Return"
	.zero 1
uuid_00000000000db22f:
	.ascii "Tail"
	.zero 1
uuid_00000000000db230:
	.ascii "Call"
	.zero 1
uuid_00000000000db231:
	.ascii "File: SRC/to-string.lm Line: 9 Column: 5"
	.zero 1
uuid_00000000000db257:
	.ascii ","
	.zero 1
uuid_00000000000db258:
	.ascii "File: SRC/to-string.lm Line: 27 Column: 5"
	.zero 1
uuid_00000000000db271:
	.ascii "+"
	.zero 1
uuid_00000000000db284:
	.ascii "..."
	.zero 1
uuid_00000000000db297:
	.ascii "<"
	.zero 1
uuid_00000000000db298:
	.ascii ">"
	.zero 1
uuid_00000000000db299:
	.ascii "File: SRC/to-string.lm Line: 46 Column: 5"
	.zero 1
uuid_00000000000db30c:
	.ascii "File: SRC/is-equal.lm Line: 4 Column: 5"
	.zero 1
concrete_SB_type_SB_instances_SB_index_CL_HashtableEqListTypeTupleU64String:
.zero 32
uuid_00000000000db342:
	.ascii "File: SRC/index-concrete-type-instances.lm Line: 18 Column: 14"
	.zero 1
uuid_00000000000db349:
	.ascii "File: SRC/index-concrete-type-instances.lm Line: 7 Column: 26"
	.zero 1
uuid_00000000000db37c:
	.ascii "File: SRC/index-concrete-type-instances.lm Line: 31 Column: 11"
	.zero 1
uuid_00000000000db383:
	.ascii "File: SRC/index-concrete-type-instances.lm Line: 26 Column: 5"
	.zero 1
type_SB_index_CL_HashtableIsTypeAST:
.zero 32
uuid_00000000000db3a5:
	.ascii "GlobalVariable"
	.zero 1
uuid_00000000000db3a6:
	.ascii "mov"
	.zero 1
uuid_00000000000db3a7:
	.ascii "Cons"
	.zero 1
uuid_00000000000db3c6:
	.ascii ":"
	.zero 1
uuid_00000000000db3f1:
	.ascii "File: SRC/infer-expr.lm Line: 28 Column: 11"
	.zero 1
uuid_00000000000db422:
	.ascii "File: SRC/infer-expr.lm Line: 57 Column: 14"
	.zero 1
uuid_00000000000db432:
	.ascii "gensym-label"
	.zero 1
uuid_00000000000db445:
	.ascii "Label"
	.zero 1
uuid_00000000000db44f:
	.ascii "label"
	.zero 1
uuid_00000000000db462:
	.ascii "if"
	.zero 1
uuid_00000000000db4b4:
	.ascii "Reg8"
	.zero 1
uuid_00000000000db4b8:
	.ascii "Reg16"
	.zero 1
uuid_00000000000db4bc:
	.ascii "Reg32"
	.zero 1
uuid_00000000000db4c0:
	.ascii "Reg64"
	.zero 1
uuid_00000000000db4c4:
	.ascii "File: SRC/infer-expr.lm Line: 89 Column: 11"
	.zero 1
uuid_00000000000db4da:
	.ascii "sizeof"
	.zero 1
uuid_00000000000db4f6:
	.ascii "File: SRC/infer-expr.lm Line: 115 Column: 11"
	.zero 1
uuid_00000000000db4fa:
	.ascii "scope"
	.zero 1
uuid_00000000000db50d:
	.ascii "open"
	.zero 1
uuid_00000000000db556:
	.ascii "push-deref"
	.zero 1
uuid_00000000000db557:
	.ascii "StackVariable"
	.zero 1
uuid_00000000000db558:
	.ascii "File: SRC/infer-expr.lm Line: 127 Column: 11"
	.zero 1
uuid_00000000000db580:
	.ascii "Variable Name Is Already Bound In Outer Scope"
	.zero 1
uuid_00000000000db587:
	.ascii "Unable to infer type of expression"
	.zero 1
uuid_00000000000db5a0:
	.ascii "File: SRC/infer-expr.lm Line: 152 Column: 11"
	.zero 1
uuid_00000000000db5a4:
	.ascii "del"
	.zero 1
uuid_00000000000db5c6:
	.ascii "File: SRC/infer-expr.lm Line: 170 Column: 11"
	.zero 1
uuid_00000000000db5d0:
	.ascii "Rc"
	.zero 1
uuid_00000000000db5d1:
	.ascii "inc"
	.zero 1
uuid_00000000000db5d2:
	.ascii "Tuple"
	.zero 1
uuid_00000000000db5df:
	.ascii "Constructor"
	.zero 1
uuid_00000000000db5e0:
	.ascii "CaseNumber"
	.zero 1
uuid_00000000000db5e1:
	.ascii "Sized"
	.zero 1
uuid_00000000000db5e2:
	.ascii "FieldsSized"
	.zero 1
uuid_00000000000db5e3:
	.ascii "push"
	.zero 1
uuid_00000000000db5e4:
	.ascii "File: SRC/infer-expr.lm Line: 214 Column: 14"
	.zero 1
uuid_00000000000db61b:
	.ascii "File: SRC/infer-expr.lm Line: 232 Column: 14"
	.zero 1
uuid_00000000000db622:
	.ascii "Arrow"
	.zero 1
uuid_00000000000db623:
	.ascii "cdecl::return"
	.zero 1
uuid_00000000000db64b:
	.ascii "Unknown Term In Type Inference\n"
	.zero 1
uuid_00000000000db64c:
	.ascii "File: SRC/infer-expr.lm Line: 8 Column: 5"
	.zero 1
alias_SB_index_CL_ListTupleTypeTupleStringStringListTupleTypeTupleStringString:
.zero 72
uuid_00000000000db707:
	.ascii "File: SRC/alias.lm Line: 11 Column: 8"
	.zero 1
uuid_00000000000db70b:
	.ascii "File: SRC/alias.lm Line: 10 Column: 5"
	.zero 1
uuid_00000000000db74b:
	.ascii "File: SRC/alias.lm Line: 31 Column: 8"
	.zero 1
uuid_00000000000db74f:
	.ascii "File: SRC/alias.lm Line: 30 Column: 5"
	.zero 1
class_SB_exists_SB_index_CL_HashtableEqU64String:
.zero 32
parameter_SB_is_SB_flat_SB_index_CL_HashtableEqU64TupleU64TupleU64String:
.zero 32
is_SB_special_SB_index_CL_HashtableEqU64TupleTypeString:
.zero 32
lone_SB_index_CL_HashtableEqU64String:
.zero 32
tag_SB_is_SB_fragment_SB_index_CL_HashtableEqU64String:
.zero 32
global_SB_symbol_SB_registry_CL_HashtableEqU64TupleTypeString:
.zero 32
uuid_00000000000db756:
	.ascii "Duplicate Global Symbol "
	.zero 1
uuid_00000000000db757:
	.ascii " : "
	.zero 1
class_SB_to_SB_only_SB_child_CL_HashtableEqStringString:
.zero 32
tag_SB_to_SB_index_SB_index_CL_HashtableEqU64String:
.zero 32
unknown_SB_index_SB_of_SB_tag_CL_U64:
.zero 8
class_SB_to_SB_size_SB_index_CL_BTreeEqU64StringBTreeEqU64String:
.zero 48
tag_SB_to_SB_class_SB_index_CL_HashtableEqTypeString:
.zero 32
uuid_00000000000db77c:
	.ascii "Unexpected Class In index-class-of-tag: "
	.zero 1
uuid_00000000000db77d:
	.ascii "File: SRC/class-of-tag.lm Line: 6 Column: 5"
	.zero 1
class_SB_to_SB_yes_SB_index_CL_HashtableEqU64String:
.zero 32
tag_SB_to_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString:
.zero 32
uuid_00000000000db796:
	.ascii "Tag"
	.zero 1
uuid_00000000000db7b2:
	.ascii "File: SRC/fields-of-tag.lm Line: 17 Column: 64"
	.zero 1
uuid_00000000000db7b9:
	.ascii "Invalid Tag In fields-of-tag "
	.zero 1
uuid_00000000000db7ba:
	.ascii "File: SRC/fields-of-tag.lm Line: 15 Column: 5"
	.zero 1
uuid_00000000000db7c1:
	.ascii "Fields"
	.zero 1
type_SB_constructors_SB_index_CL_HashtableEqTypeString:
.zero 32
type_SB_complex_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString:
.zero 32
uuid_00000000000db7d3:
	.ascii "ERROR: set-type-fields\n"
	.zero 1
uuid_00000000000db7d4:
	.ascii "File: SRC/type-complex-fields.lm Line: 6 Column: 5"
	.zero 1
uuid_00000000000db7fc:
	.ascii "File: SRC/get-vararg-inner.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000db806:
	.ascii "LocalVariable"
	.zero 1
uuid_00000000000db82e:
	.ascii "File: SRC/is-constructor.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000db850:
	.ascii "File: SRC/is-constructor.lm Line: 17 Column: 5"
	.zero 1
uuid_00000000000db86c:
	.ascii "File: SRC/is-constructor.lm Line: 28 Column: 5"
	.zero 1
uuid_00000000000db8d3:
	.ascii "Field"
	.zero 1
uuid_00000000000db8f2:
	.ascii "File: SRC/is-open.lm Line: 16 Column: 11"
	.zero 1
uuid_00000000000db8f9:
	.ascii "File: SRC/is-open.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000db921:
	.ascii "File: SRC/is-vararg.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000db94c:
	.ascii "File: SRC/is-parameterized.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000db97a:
	.ascii "File: SRC/is-sized.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000db996:
	.ascii "Constant"
	.zero 1
uuid_00000000000db9cd:
	.ascii "File: SRC/has-representation.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000db9e6:
	.ascii "File: SRC/guess-representation.lm Line: 5 Column: 8"
	.zero 1
uuid_00000000000dba17:
	.ascii "File: SRC/deep-hash.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dba31:
	.ascii "File: SRC/deep-hash.lm Line: 26 Column: 5"
	.zero 1
uuid_00000000000dba38:
	.ascii " != "
	.zero 1
uuid_00000000000dba39:
	.ascii "Type Ascription Inequality"
	.zero 1
uuid_00000000000dba52:
	.ascii "File: SRC/typeof.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dba62:
	.ascii "Var"
	.zero 1
uuid_00000000000dba6c:
	.ascii "Lit"
	.zero 1
uuid_00000000000dbab8:
	.ascii "App"
	.zero 1
uuid_00000000000dbac5:
	.ascii "Abs"
	.zero 1
uuid_00000000000dbac6:
	.ascii "File: SRC/to-s.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dbafd:
	.ascii "File: SRC/p.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dbb16:
	.ascii "File: SRC/and.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dbb2f:
	.ascii "File: SRC/union.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dbb48:
	.ascii "File: SRC/union.lm Line: 21 Column: 8"
	.zero 1
uuid_00000000000dbb61:
	.ascii "program"
	.zero 1
uuid_00000000000dbb62:
	.ascii "File: SRC/union.lm Line: 36 Column: 28"
	.zero 1
uuid_00000000000dbb75:
	.ascii "File: SRC/tag-of.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dbbaf:
	.ascii "File: SRC/can-unify.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dbbcb:
	.ascii "Meta"
	.zero 1
uuid_00000000000dbd3d:
	.ascii "GT"
	.zero 1
uuid_00000000000dbd71:
	.ascii "File: SRC/can-unify.lm Line: 21 Column: 5"
	.zero 1
uuid_00000000000dbe14:
	.ascii "File: SRC/unify.lm Line: 37 Column: 11"
	.zero 1
uuid_00000000000dbe54:
	.ascii "File: SRC/unify.lm Line: 47 Column: 11"
	.zero 1
uuid_00000000000dbfb4:
	.ascii "File: SRC/unify.lm Line: 12 Column: 5"
	.zero 1
uuid_00000000000dc00f:
	.ascii "File: SRC/unify.lm Line: 130 Column: 5"
	.zero 1
uuid_00000000000dc044:
	.ascii "File: SRC/fields-of-type.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dc0ed:
	.ascii "File: SRC/sizeof-type.lm Line: 25 Column: 11"
	.zero 1
uuid_00000000000dc100:
	.ascii "Unexpected Type sizeof-type "
	.zero 1
uuid_00000000000dc101:
	.ascii "File: SRC/sizeof-type.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dc137:
	.ascii "File: SRC/has-infinite.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000dc18f:
	.ascii "File: SRC/has-infinite.lm Line: 26 Column: 5"
	.zero 1
uuid_00000000000dc1b2:
	.ascii "File: SRC/has-forward.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dc1fb:
	.ascii "File: SRC/has-forward.lm Line: 19 Column: 5"
	.zero 1
uuid_00000000000dc20e:
	.ascii "AL"
	.zero 1
uuid_00000000000dc20f:
	.ascii "BL"
	.zero 1
uuid_00000000000dc210:
	.ascii "CL"
	.zero 1
uuid_00000000000dc211:
	.ascii "DL"
	.zero 1
uuid_00000000000dc212:
	.ascii "SIL"
	.zero 1
uuid_00000000000dc213:
	.ascii "DIL"
	.zero 1
uuid_00000000000dc214:
	.ascii "BPL"
	.zero 1
uuid_00000000000dc215:
	.ascii "SPL"
	.zero 1
uuid_00000000000dc216:
	.ascii "R8B"
	.zero 1
uuid_00000000000dc217:
	.ascii "R9B"
	.zero 1
uuid_00000000000dc218:
	.ascii "R10B"
	.zero 1
uuid_00000000000dc219:
	.ascii "R11B"
	.zero 1
uuid_00000000000dc21a:
	.ascii "R12B"
	.zero 1
uuid_00000000000dc21b:
	.ascii "R13B"
	.zero 1
uuid_00000000000dc21c:
	.ascii "R14B"
	.zero 1
uuid_00000000000dc21d:
	.ascii "R15B"
	.zero 1
uuid_00000000000dc21e:
	.ascii "File: SRC/is-reg8.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dc264:
	.ascii "File: SRC/is-reg8.lm Line: 29 Column: 5"
	.zero 1
uuid_00000000000dc26e:
	.ascii "AX"
	.zero 1
uuid_00000000000dc26f:
	.ascii "BX"
	.zero 1
uuid_00000000000dc270:
	.ascii "CX"
	.zero 1
uuid_00000000000dc271:
	.ascii "DX"
	.zero 1
uuid_00000000000dc272:
	.ascii "SI"
	.zero 1
uuid_00000000000dc273:
	.ascii "DI"
	.zero 1
uuid_00000000000dc274:
	.ascii "BP"
	.zero 1
uuid_00000000000dc275:
	.ascii "SP"
	.zero 1
uuid_00000000000dc276:
	.ascii "R8W"
	.zero 1
uuid_00000000000dc277:
	.ascii "R9W"
	.zero 1
uuid_00000000000dc278:
	.ascii "R10W"
	.zero 1
uuid_00000000000dc279:
	.ascii "R11W"
	.zero 1
uuid_00000000000dc27a:
	.ascii "R12W"
	.zero 1
uuid_00000000000dc27b:
	.ascii "R13W"
	.zero 1
uuid_00000000000dc27c:
	.ascii "R14W"
	.zero 1
uuid_00000000000dc27d:
	.ascii "R15W"
	.zero 1
uuid_00000000000dc27e:
	.ascii "File: SRC/is-reg16.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dc2c4:
	.ascii "File: SRC/is-reg16.lm Line: 29 Column: 5"
	.zero 1
uuid_00000000000dc2ce:
	.ascii "EAX"
	.zero 1
uuid_00000000000dc2cf:
	.ascii "EBX"
	.zero 1
uuid_00000000000dc2d0:
	.ascii "ECX"
	.zero 1
uuid_00000000000dc2d1:
	.ascii "EDX"
	.zero 1
uuid_00000000000dc2d2:
	.ascii "ESI"
	.zero 1
uuid_00000000000dc2d3:
	.ascii "EDI"
	.zero 1
uuid_00000000000dc2d4:
	.ascii "EBP"
	.zero 1
uuid_00000000000dc2d5:
	.ascii "ESP"
	.zero 1
uuid_00000000000dc2d6:
	.ascii "R8D"
	.zero 1
uuid_00000000000dc2d7:
	.ascii "R9D"
	.zero 1
uuid_00000000000dc2d8:
	.ascii "R10D"
	.zero 1
uuid_00000000000dc2d9:
	.ascii "R11D"
	.zero 1
uuid_00000000000dc2da:
	.ascii "R12D"
	.zero 1
uuid_00000000000dc2db:
	.ascii "R13D"
	.zero 1
uuid_00000000000dc2dc:
	.ascii "R14D"
	.zero 1
uuid_00000000000dc2dd:
	.ascii "R15D"
	.zero 1
uuid_00000000000dc2de:
	.ascii "File: SRC/is-reg32.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dc324:
	.ascii "File: SRC/is-reg32.lm Line: 29 Column: 5"
	.zero 1
uuid_00000000000dc32e:
	.ascii "RAX"
	.zero 1
uuid_00000000000dc32f:
	.ascii "RBX"
	.zero 1
uuid_00000000000dc330:
	.ascii "RCX"
	.zero 1
uuid_00000000000dc331:
	.ascii "RDX"
	.zero 1
uuid_00000000000dc332:
	.ascii "RSI"
	.zero 1
uuid_00000000000dc333:
	.ascii "RDI"
	.zero 1
uuid_00000000000dc334:
	.ascii "RBP"
	.zero 1
uuid_00000000000dc335:
	.ascii "RSP"
	.zero 1
uuid_00000000000dc336:
	.ascii "R8"
	.zero 1
uuid_00000000000dc337:
	.ascii "R9"
	.zero 1
uuid_00000000000dc338:
	.ascii "R10"
	.zero 1
uuid_00000000000dc339:
	.ascii "R11"
	.zero 1
uuid_00000000000dc33a:
	.ascii "R12"
	.zero 1
uuid_00000000000dc33b:
	.ascii "R13"
	.zero 1
uuid_00000000000dc33c:
	.ascii "R14"
	.zero 1
uuid_00000000000dc33d:
	.ascii "R15"
	.zero 1
uuid_00000000000dc33e:
	.ascii "File: SRC/is-reg64.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dc384:
	.ascii "File: SRC/is-reg64.lm Line: 29 Column: 5"
	.zero 1
uuid_00000000000dc39a:
	.ascii "File: SRC/with-tag.lm Line: 5 Column: 8"
	.zero 1
uuid_00000000000dc3ce:
	.ascii "File: SRC/with-tag.lm Line: 21 Column: 5"
	.zero 1
uuid_00000000000dc3f6:
	.ascii "File: SRC/with-size.lm Line: 8 Column: 5"
	.zero 1
uuid_00000000000dc40a:
	.ascii "File: SRC/with-size.lm Line: 19 Column: 5"
	.zero 1
uuid_00000000000dc450:
	.ascii "File: SRC/with-size.lm Line: 30 Column: 5"
	.zero 1
uuid_00000000000dc475:
	.ascii "File: SRC/with-fields.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dc485:
	.ascii "LMStruct"
	.zero 1
uuid_00000000000dc489:
	.ascii "File: SRC/with-platform-props.lm Line: 5 Column: 8"
	.zero 1
uuid_00000000000dc4b7:
	.ascii "File: SRC/without-tag.lm Line: 8 Column: 11"
	.zero 1
uuid_00000000000dc4ee:
	.ascii "File: SRC/without-tag.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dc511:
	.ascii "File: SRC/without-tag.lm Line: 28 Column: 5"
	.zero 1
uuid_00000000000dc539:
	.ascii "File: SRC/without-constructor.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dc553:
	.ascii "File: SRC/without-representation.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dc575:
	.ascii "Literal"
	.zero 1
uuid_00000000000dc5cd:
	.ascii "File: SRC/without-representation.lm Line: 17 Column: 5"
	.zero 1
uuid_00000000000dc602:
	.ascii "File: SRC/without-size-unless-class.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dc62a:
	.ascii "File: SRC/without-size-unless-class.lm Line: 17 Column: 5"
	.zero 1
uuid_00000000000dc66a:
	.ascii "File: SRC/without-size-unless-class.lm Line: 46 Column: 5"
	.zero 1
uuid_00000000000dc68a:
	.ascii "File: SRC/without-size.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dc6c4:
	.ascii "File: SRC/without-size.lm Line: 17 Column: 5"
	.zero 1
uuid_00000000000dc701:
	.ascii "File: SRC/without-platform-props.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dc729:
	.ascii "File: SRC/with-only-tag.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dc751:
	.ascii "File: SRC/with-only-class.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dc768:
	.ascii "File: SRC/with-only-representation.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dc7e1:
	.ascii "File: SRC/with-only-representation.lm Line: 19 Column: 5"
	.zero 1
uuid_00000000000dc818:
	.ascii "File: SRC/normalize.lm Line: 13 Column: 5"
	.zero 1
uuid_00000000000dc852:
	.ascii "Malformed Type Definition"
	.zero 1
uuid_00000000000dc853:
	.ascii "File: SRC/type-of-s.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dc87b:
	.ascii "Mark Field "
	.zero 1
uuid_00000000000dc87c:
	.ascii "File: SRC/type-of-s-with-fields.lm Line: 8 Column: 11"
	.zero 1
uuid_00000000000dc89e:
	.ascii "File: SRC/type-of-s-with-fields.lm Line: 25 Column: 11"
	.zero 1
uuid_00000000000dc8c0:
	.ascii "File: SRC/type-of-s-with-fields.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dc918:
	.ascii "Unknown LHS"
	.zero 1
uuid_00000000000dc919:
	.ascii "File: SRC/typeof-lhs.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dc941:
	.ascii "File: SRC/cons-head.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dc963:
	.ascii "File: SRC/cons-tail.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dc973:
	.ascii "File: SRC/parameter-number.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dc992:
	.ascii "File: SRC/parameter-number.lm Line: 16 Column: 5"
	.zero 1
uuid_00000000000dc99c:
	.ascii "Function Application Yielded No Matches\n"
	.zero 1
uuid_00000000000dc99d:
	.ascii "\nWith Argument : "
	.zero 1
uuid_00000000000dc99e:
	.ascii "Options: "
	.zero 1
uuid_00000000000dc9a2:
	.ascii "Function Application Yielded An Irreducible Plurality Of Matches\n"
	.zero 1
uuid_00000000000dc9a3:
	.ascii "With Argument "
	.zero 1
uuid_00000000000dc9a4:
	.ascii "Matched "
	.zero 1
uuid_00000000000dc9ae:
	.ascii "File: SRC/apply.lm Line: 30 Column: 11"
	.zero 1
uuid_00000000000dc9dc:
	.ascii "Application Did Not Close Before Specialization:\n"
	.zero 1
uuid_00000000000dc9dd:
	.ascii "Function "
	.zero 1
uuid_00000000000dc9de:
	.ascii "Argument "
	.zero 1
uuid_00000000000dc9e5:
	.ascii "Function Not Simple Arrow: "
	.zero 1
uuid_00000000000dc9e6:
	.ascii "File: SRC/apply.lm Line: 42 Column: 8"
	.zero 1
uuid_00000000000dc9ed:
	.ascii "File: SRC/apply.lm Line: 41 Column: 5"
	.zero 1
uuid_00000000000dca1b:
	.ascii "File: SRC/apply.lm Line: 81 Column: 33"
	.zero 1
uuid_00000000000dca55:
	.ascii "File: SRC/apply.lm Line: 72 Column: 5"
	.zero 1
uuid_00000000000dca9f:
	.ascii "File: SRC/apply-plural.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dcabd:
	.ascii "File: SRC/reduce-plural.lm Line: 5 Column: 41"
	.zero 1
uuid_00000000000dcadf:
	.ascii "File: SRC/reduce-plural.lm Line: 19 Column: 11"
	.zero 1
uuid_00000000000dcae9:
	.ascii "File: SRC/reduce-plural.lm Line: 15 Column: 27"
	.zero 1
uuid_00000000000dcb08:
	.ascii "File: SRC/reduce-plural.lm Line: 37 Column: 11"
	.zero 1
uuid_00000000000dcb12:
	.ascii "File: SRC/reduce-plural.lm Line: 33 Column: 27"
	.zero 1
uuid_00000000000dcb4e:
	.ascii "File: SRC/try-specialize.lm Line: 17 Column: 20"
	.zero 1
uuid_00000000000dcb5e:
	.ascii "File: SRC/try-specialize.lm Line: 5 Column: 35"
	.zero 1
uuid_00000000000dcb98:
	.ascii "File: SRC/unify-hint.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dcbaf:
	.ascii "File: SRC/unify-hint.lm Line: 24 Column: 5"
	.zero 1
uuid_00000000000dcbb9:
	.ascii "|"
	.zero 1
uuid_00000000000dcbf0:
	.ascii "File: SRC/infer-type-definition.lm Line: 19 Column: 14"
	.zero 1
uuid_00000000000dcc03:
	.ascii "File: SRC/infer-type-definition.lm Line: 26 Column: 17"
	.zero 1
uuid_00000000000dcc0d:
	.ascii "File: SRC/infer-type-definition.lm Line: 8 Column: 5"
	.zero 1
uuid_00000000000dcc21:
	.ascii "File: SRC/arity.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dcc31:
	.ascii "File: SRC/arity.lm Line: 16 Column: 5"
	.zero 1
uuid_00000000000dcc53:
	.ascii "File: SRC/cons-arity.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dcc7b:
	.ascii "File: SRC/implicit-tail.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dcc82:
	.ascii "Unknown Referenced Variable"
	.zero 1
uuid_00000000000dcca1:
	.ascii "File: SRC/typeof-var-raw.lm Line: 4 Column: 28"
	.zero 1
types_SB_have_SB_changed_CL_U8:
.zero 8
uuid_00000000000dccb4:
	.ascii "File: SRC/typecheck.lm Line: 7 Column: 25"
	.zero 1
uuid_00000000000dccc4:
	.ascii "File: SRC/typecheck.lm Line: 14 Column: 42"
	.zero 1
uuid_00000000000dccf3:
	.ascii "File: SRC/typecheck.lm Line: 22 Column: 43"
	.zero 1
uuid_00000000000dcd36:
	.ascii "File: SRC/substitute.lm Line: 4 Column: 27"
	.zero 1
uuid_00000000000dcd53:
	.ascii "File: SRC/substitute.lm Line: 27 Column: 5"
	.zero 1
uuid_00000000000dcd72:
	.ascii "File: SRC/substitute.lm Line: 44 Column: 34"
	.zero 1
uuid_00000000000dcd8e:
	.ascii "File: SRC/substitute.lm Line: 41 Column: 5"
	.zero 1
uuid_00000000000dcda8:
	.ascii "File: SRC/substitute.lm Line: 73 Column: 5"
	.zero 1
uuid_00000000000dcdf1:
	.ascii "File: SRC/substitute.lm Line: 90 Column: 34"
	.zero 1
uuid_00000000000dce13:
	.ascii "File: SRC/substitute.lm Line: 87 Column: 5"
	.zero 1
uuid_00000000000dce98:
	.ascii "Unexpected Substitute LHS"
	.zero 1
uuid_00000000000dce99:
	.ascii "File: SRC/substitute.lm Line: 128 Column: 5"
	.zero 1
uuid_00000000000dcee8:
	.ascii "File: SRC/substitute.lm Line: 168 Column: 34"
	.zero 1
uuid_00000000000dcf2e:
	.ascii "File: SRC/substitute.lm Line: 187 Column: 34"
	.zero 1
uuid_00000000000dcf80:
	.ascii "Unexpected Substitution Term:"
	.zero 1
uuid_00000000000dcf81:
	.ascii "File: SRC/substitute.lm Line: 159 Column: 5"
	.zero 1
uuid_00000000000dcfbe:
	.ascii "File: SRC/substitute.lm Line: 247 Column: 34"
	.zero 1
uuid_00000000000dcfce:
	.ascii "File: SRC/substitute.lm Line: 243 Column: 5"
	.zero 1
uuid_00000000000dcffc:
	.ascii "File: SRC/specialize.lm Line: 14 Column: 20"
	.zero 1
uuid_00000000000dd009:
	.ascii "File: SRC/specialize.lm Line: 7 Column: 38"
	.zero 1
uuid_00000000000dd02a:
	.ascii "File: SRC/mark-constructor-flat-parameters.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dd05b:
	.ascii "File: SRC/mark-constructor-flat-parameters.lm Line: 16 Column: 5"
	.zero 1
uuid_00000000000dd083:
	.ascii "Size Of Type Cannot Be Determined Due To Forward Reference: "
	.zero 1
uuid_00000000000dd087:
	.ascii "Size Of Type Is Infinite: "
	.zero 1
uuid_00000000000dd08b:
	.ascii "File: SRC/infer-type-constructor.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dd0b0:
	.ascii "File: SRC/infer-global-context.lm Line: 9 Column: 11"
	.zero 1
uuid_00000000000dd0fc:
	.ascii "Hooks Must Not Return Values."
	.zero 1
uuid_00000000000dd13f:
	.ascii "Global Bindings Must Be Ascripted"
	.zero 1
uuid_00000000000dd140:
	.ascii "File: SRC/infer-global-context.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dd159:
	.ascii "File: SRC/assert-well-typed.lm Line: 3 Column: 26"
	.zero 1
uuid_00000000000dd226:
	.ascii "set"
	.zero 1
uuid_00000000000dd2a2:
	.ascii "Unknown Term In Assert Well Typed "
	.zero 1
uuid_00000000000dd2a3:
	.ascii "File: SRC/assert-well-typed.lm Line: 10 Column: 5"
	.zero 1
uuid_00000000000dd343:
	.ascii "Invalid LHS"
	.zero 1
uuid_00000000000dd344:
	.ascii "File: SRC/infer-ctx.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dd35e:
	.ascii "File: SRC/infer-tctx.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dd37d:
	.ascii "File: SRC/infer-tctx.lm Line: 15 Column: 5"
	.zero 1
uuid_00000000000dd38a:
	.ascii "	mov $60, %rax\n"
	.zero 1
uuid_00000000000dd38b:
	.ascii "	mov $0, %rdi\n"
	.zero 1
uuid_00000000000dd38c:
	.ascii "	syscall\n"
	.zero 1
uuid_00000000000dd38d:
	.ascii ".data\n"
	.zero 1
uuid_00000000000dd38e:
	.ascii ".global _start\n"
	.zero 1
uuid_00000000000dd38f:
	.ascii ".text\n"
	.zero 1
uuid_00000000000dd390:
	.ascii "_start:\n"
	.zero 1
uuid_00000000000dd391:
	.ascii "	mov %rsp,%rbp\n"
	.zero 1
uuid_00000000000dd392:
	.ascii "	mov %rbp,%rsp\n"
	.zero 1
uuid_00000000000dd396:
	.ascii "	popq %r8\n"
	.zero 1
uuid_00000000000dd397:
	.ascii "	movq %rsp, %r9\n"
	.zero 1
uuid_00000000000dd39b:
	.ascii "	push %rbp\n"
	.zero 1
uuid_00000000000dd39c:
	.ascii "	mov %rsp, %rbp\n"
	.zero 1
uuid_00000000000dd39d:
	.ascii "	pushq %r8\n"
	.zero 1
uuid_00000000000dd39e:
	.ascii "	pushq %r9\n"
	.zero 1
uuid_00000000000dd3a2:
	.ascii "	call main\n"
	.zero 1
uuid_00000000000dd3a3:
	.ascii "	mov %rbp, %rsp\n"
	.zero 1
uuid_00000000000dd3a4:
	.ascii "	pop %rbp\n"
	.zero 1
uuid_00000000000dd3a8:
	.ascii "File: SRC/compile.lm Line: 2 Column: 20"
	.zero 1
uuid_00000000000dd3d0:
	.ascii "main"
	.zero 1
uuid_00000000000dd3d4:
	.ascii "fragment-type"
	.zero 1
uuid_00000000000dd3d5:
	.ascii "Global"
	.zero 1
uuid_00000000000dd3d6:
	.ascii "expression"
	.zero 1
uuid_00000000000dd3f2:
	.ascii "File: SRC/compile-c.lm Line: 5 Column: 39"
	.zero 1
uuid_00000000000dd41a:
	.ascii "File: SRC/compile-c.lm Line: 48 Column: 36"
	.zero 1
uuid_00000000000dd43c:
	.ascii "File: SRC/compile-c.lm Line: 55 Column: 32"
	.zero 1
uuid_00000000000dd47f:
	.ascii "Function"
	.zero 1
uuid_00000000000dd480:
	.ascii "File: SRC/compile-blob.lm Line: 10 Column: 11"
	.zero 1
uuid_00000000000dd490:
	.ascii "File: SRC/compile-blob.lm Line: 4 Column: 39"
	.zero 1
uuid_00000000000dd4e5:
	.ascii "File: SRC/compile-blob.lm Line: 31 Column: 39"
	.zero 1
uuid_00000000000dd53a:
	.ascii "File: SRC/compile-gnu.lm Line: 4 Column: 39"
	.zero 1
uuid_00000000000dd547:
	.ascii "File: SRC/compile-finish.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dd554:
	.ascii "TODO: compile finish blob\n"
	.zero 1
uuid_00000000000dd561:
	.ascii "File: SRC/compile-program-ordered.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dd592:
	.ascii "File: SRC/compile-program-ordered.lm Line: 11 Column: 5"
	.zero 1
uuid_00000000000dd5f9:
	.ascii "File: SRC/compile-c-function-args.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dd603:
	.ascii "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n"
	.zero 1
index_SB_c_SB_type_SB_ordinal_CL_HashtableEqStringType:
.zero 32
uuid_00000000000dd604:
	.ascii "//predefine define "
	.zero 1
uuid_00000000000dd605:
	.ascii "\ntypedef struct "
	.zero 1
uuid_00000000000dd606:
	.ascii ";\n"
	.zero 1
uuid_00000000000dd624:
	.ascii "File: SRC/compile-c-typedef.lm Line: 24 Column: 11"
	.zero 1
uuid_00000000000dd62b:
	.ascii "File: SRC/compile-c-typedef.lm Line: 20 Column: 5"
	.zero 1
continue_SB_compile_SB_c_SB_typedefs_SB_concrete_CL_ListTupleASTTupleTypeTContextListTupleASTTupleTypeTContext:
.zero 248
continue_SB_compile_SB_c_SB_typedefs_SB_count_CL_U64:
.zero 8
uuid_00000000000dd653:
	.ascii "Unable To Resolve Circular Type Dependency During Compilation"
	.zero 1
uuid_00000000000dd672:
	.ascii "File: SRC/compile-c-typedef.lm Line: 41 Column: 8"
	.zero 1
uuid_00000000000dd727:
	.ascii "File: SRC/compile-c-typedef.lm Line: 51 Column: 5"
	.zero 1
is_SB_cstruct_SB_hard_SB_compiled_SB_index_CL_HashtableEqU64Type:
.zero 32
uuid_00000000000dd779:
	.ascii "File: SRC/compile-c-typedef.lm Line: 90 Column: 31"
	.zero 1
uuid_00000000000dd79b:
	.ascii "//define "
	.zero 1
uuid_00000000000dd79c:
	.ascii "\nstruct "
	.zero 1
uuid_00000000000dd79d:
	.ascii "{\n"
	.zero 1
uuid_00000000000dd79e:
	.ascii "	long _0;\n"
	.zero 1
uuid_00000000000dd79f:
	.ascii "	union {\n"
	.zero 1
uuid_00000000000dd7a0:
	.ascii "	};\n};\n"
	.zero 1
uuid_00000000000dd7c1:
	.ascii "File: SRC/compile-c-typedef.lm Line: 135 Column: 11"
	.zero 1
uuid_00000000000dd7c8:
	.ascii "File: SRC/compile-c-typedef.lm Line: 131 Column: 5"
	.zero 1
uuid_00000000000dd7de:
	.ascii "File: SRC/compile-c-typedef.lm Line: 145 Column: 5"
	.zero 1
uuid_00000000000dd7e5:
	.ascii "struct {"
	.zero 1
uuid_00000000000dd7e6:
	.ascii "};\n"
	.zero 1
uuid_00000000000dd80b:
	.ascii " _"
	.zero 1
uuid_00000000000dd80c:
	.ascii "File: SRC/compile-c-typedef.lm Line: 168 Column: 5"
	.zero 1
uuid_00000000000dd834:
	.ascii "File: SRC/fragment-context::lookup.lm Line: 11 Column: 27"
	.zero 1
uuid_00000000000dd83b:
	.ascii "Context::lookup "
	.zero 1
uuid_00000000000dd83c:
	.ascii "\nCandidates:\n"
	.zero 1
uuid_00000000000dd84f:
	.ascii "File: SRC/fragment-context::lookup.lm Line: 43 Column: 30"
	.zero 1
uuid_00000000000dd856:
	.ascii "Context::lookup Could Not Find Symbol"
	.zero 1
uuid_00000000000dd8a8:
	.ascii "File: SRC/fragment-context::lookups.lm Line: 11 Column: 27"
	.zero 1
uuid_00000000000dd8af:
	.ascii "Context::lookups "
	.zero 1
uuid_00000000000dd8c2:
	.ascii "File: SRC/fragment-context::lookups.lm Line: 60 Column: 30"
	.zero 1
uuid_00000000000dd8c9:
	.ascii "Context::lookups Could Not Find Symbol"
	.zero 1
uuid_00000000000dd8df:
	.ascii "File: SRC/fragment-context::lookup-vararg.lm Line: 4 Column: 27"
	.zero 1
uuid_00000000000dd937:
	.ascii "File: SRC/with-location.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dd962:
	.ascii "File: SRC/with-location.lm Line: 57 Column: 5"
	.zero 1
uuid_00000000000dd9ae:
	.ascii "File: SRC/without-location.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dd9d9:
	.ascii "File: SRC/without-location.lm Line: 52 Column: 5"
	.zero 1
uuid_00000000000dd9e9:
	.ascii "File: SRC/with-key.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dd9ed:
	.ascii "Unknown"
	.zero 1
uuid_00000000000dda3f:
	.ascii "File: SRC/location-of.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dda64:
	.ascii "File: SRC/unique.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dda74:
	.ascii "File: SRC/print-verbose.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dda87:
	.ascii "File: SRC/non-zero.lm Line: 4 Column: 5"
	.zero 1
already_SB_tokenized_CL_ListStringListString:
.zero 24
uuid_00000000000ddaa3:
	.ascii "File: SRC/tokenize.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000ddaaa:
	.ascii "LIB/"
	.zero 1
uuid_00000000000ddab9:
	.ascii "File: SRC/tokenize.lm Line: 28 Column: 8"
	.zero 1
uuid_00000000000ddb52:
	.ascii "File: SRC/tokenize.lm Line: 38 Column: 8"
	.zero 1
uuid_00000000000ddb84:
	.ascii "Hanging Parentheses In File: "
	.zero 1
uuid_00000000000ddb85:
	.ascii " Count: "
	.zero 1
uuid_00000000000ddb92:
	.ascii "FFI"
	.zero 1
uuid_00000000000ddb9c:
	.ascii "File: SRC/is-ffi.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000ddbb8:
	.ascii "File: SRC/is-nil.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000ddbd4:
	.ascii "File: SRC/is-never.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000ddbe7:
	.ascii "File: SRC/is-seq.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000ddc00:
	.ascii "File: SRC/is-arrow.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000ddc1c:
	.ascii "File: SRC/is-array.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000ddc2f:
	.ascii "Hook"
	.zero 1
uuid_00000000000ddc39:
	.ascii "File: SRC/is-hook.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000ddc4c:
	.ascii "Blob"
	.zero 1
uuid_00000000000ddc56:
	.ascii "File: SRC/is-blob.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000ddc72:
	.ascii "File: SRC/is-stack-variable.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000ddc8e:
	.ascii "File: SRC/is-cons.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000ddca1:
	.ascii "ImpureCtx"
	.zero 1
uuid_00000000000ddcab:
	.ascii "File: SRC/is-impure-ctx.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000ddcc7:
	.ascii "File: SRC/is-string.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000ddce3:
	.ascii "File: SRC/is-rc.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000ddcf6:
	.ascii "OntoStack"
	.zero 1
uuid_00000000000ddd12:
	.ascii "File: SRC/is-onto-stack.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000ddd25:
	.ascii "ImpureOffset"
	.zero 1
uuid_00000000000ddd41:
	.ascii "File: SRC/is-impure-offset.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000ddd54:
	.ascii "BranchConditional"
	.zero 1
uuid_00000000000ddd5e:
	.ascii "File: SRC/is-branchconditional.lm Line: 4 Column: 5"
	.zero 1
is_SB_lm_SB_struct_SB_index_CL_HashtableEqU64String:
.zero 32
uuid_00000000000ddd71:
	.ascii "File: SRC/plus.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000ddd87:
	.ascii "File: SRC/print.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000ddd97:
	.ascii " = "
	.zero 1
uuid_00000000000ddd98:
	.ascii "File: SRC/print.lm Line: 10 Column: 5"
	.zero 1
uuid_00000000000dddb1:
	.ascii "File: SRC/print.lm Line: 25 Column: 5"
	.zero 1
uuid_00000000000dddbb:
	.ascii "EOF"
	.zero 1
uuid_00000000000ddde3:
	.ascii "type "
	.zero 1
uuid_00000000000ddded:
	.ascii " := "
	.zero 1
uuid_00000000000dde0c:
	.ascii "File: SRC/print.lm Line: 40 Column: 5"
	.zero 1
uuid_00000000000dde2e:
	.ascii "Fragment Context:\n"
	.zero 1
uuid_00000000000dde3e:
	.ascii "File: SRC/print.lm Line: 84 Column: 27"
	.zero 1
uuid_00000000000dde5a:
	.ascii "Fragment\n"
	.zero 1
uuid_00000000000dde5b:
	.ascii "	Offset = "
	.zero 1
uuid_00000000000dde68:
	.ascii "File: SRC/print.lm Line: 99 Column: 33"
	.zero 1
uuid_00000000000dde6f:
	.ascii "File: SRC/print.lm Line: 94 Column: 5"
	.zero 1
uuid_00000000000dde7c:
	.ascii "File: SRC/print.lm Line: 111 Column: 5"
	.zero 1
uuid_00000000000dde8f:
	.ascii "In File "
	.zero 1
uuid_00000000000dde90:
	.ascii " Line "
	.zero 1
uuid_00000000000dde91:
	.ascii " Column "
	.zero 1
uuid_00000000000dde92:
	.ascii "File: SRC/print.lm Line: 122 Column: 5"
	.zero 1
uuid_00000000000ddeae:
	.ascii " +\n"
	.zero 1
uuid_00000000000ddeaf:
	.ascii " + "
	.zero 1
uuid_00000000000ddebc:
	.ascii "File: SRC/print.lm Line: 135 Column: 29"
	.zero 1
uuid_00000000000ddee2:
	.ascii "File: SRC/print.lm Line: 159 Column: 35"
	.zero 1
uuid_00000000000ddef5:
	.ascii "File: SRC/reverse.lm Line: 4 Column: 26"
	.zero 1
uuid_00000000000ddf0b:
	.ascii "(Variable "
	.zero 1
uuid_00000000000ddf15:
	.ascii "(Literal "
	.zero 1
uuid_00000000000ddf25:
	.ascii "(Type ("
	.zero 1
uuid_00000000000ddf26:
	.ascii "))"
	.zero 1
uuid_00000000000ddf30:
	.ascii "(Global ("
	.zero 1
uuid_00000000000ddf3a:
	.ascii "(App ("
	.zero 1
uuid_00000000000ddf47:
	.ascii "(Lambda ("
	.zero 1
uuid_00000000000ddf5a:
	.ascii "File: SRC/serialize-ast.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000ddf95:
	.ascii "File: SRC/serialize-ast.lm Line: 59 Column: 43"
	.zero 1
uuid_00000000000ddf9f:
	.ascii "(Variable ?)"
	.zero 1
uuid_00000000000ddfaf:
	.ascii "(Literal And) "
	.zero 1
uuid_00000000000ddfc2:
	.ascii ") "
	.zero 1
uuid_00000000000ddfc3:
	.ascii "File: SRC/serialize-ast.lm Line: 72 Column: 37"
	.zero 1
uuid_00000000000ddfeb:
	.ascii "File: SRC/slot.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000de00a:
	.ascii "File: SRC/slot.lm Line: 30 Column: 14"
	.zero 1
uuid_00000000000de020:
	.ascii "File: SRC/slot.lm Line: 26 Column: 5"
	.zero 1
uuid_SB_counter_CL_U64:
.zero 8
uuid_00000000000de02a:
	.ascii "uuid_"
	.zero 1
uuid_00000000000de03d:
	.ascii "File: SRC/var-name-if-var.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000de082:
	.ascii "File: SRC/remove-parens.lm Line: 7 Column: 33"
	.zero 1
uuid_00000000000de08c:
	.ascii "File: SRC/remove-parens.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000de0c2:
	.ascii "File: SRC/parse-lambda.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000de0e8:
	.ascii "File: SRC/parse-lambda.lm Line: 16 Column: 38"
	.zero 1
uuid_00000000000de0f5:
	.ascii "File: SRC/parse-lambda.lm Line: 14 Column: 5"
	.zero 1
uuid_00000000000de117:
	.ascii "File: SRC/parse-lambda.lm Line: 33 Column: 14"
	.zero 1
uuid_00000000000de124:
	.ascii "Expected Dot For Lambda Body\n"
	.zero 1
uuid_00000000000de12e:
	.ascii "File: SRC/parse-lambda.lm Line: 30 Column: 8"
	.zero 1
uuid_00000000000de17c:
	.ascii "File: SRC/parse-many-expressions.lm Line: 18 Column: 14"
	.zero 1
uuid_00000000000de180:
	.ascii "File: SRC/parse-many-expressions.lm Line: 6 Column: 8"
	.zero 1
uuid_00000000000de1b3:
	.ascii "File: SRC/parse-one-expression.lm Line: 12 Column: 11"
	.zero 1
uuid_00000000000de1cc:
	.ascii "Unexpected Closing Parentheses"
	.zero 1
uuid_00000000000de1eb:
	.ascii "File: SRC/parse-one-expression.lm Line: 24 Column: 11"
	.zero 1
uuid_00000000000de219:
	.ascii "File: SRC/parse-one-expression.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000de245:
	.ascii "macro"
	.zero 1
uuid_00000000000de276:
	.ascii "File: SRC/parse-toplevel.lm Line: 18 Column: 26"
	.zero 1
uuid_00000000000de27d:
	.ascii "File: SRC/parse-toplevel.lm Line: 14 Column: 20"
	.zero 1
uuid_00000000000de281:
	.ascii "File: SRC/parse-toplevel.lm Line: 11 Column: 14"
	.zero 1
uuid_00000000000de285:
	.ascii "meta"
	.zero 1
uuid_00000000000de2a4:
	.ascii "File: SRC/parse-toplevel.lm Line: 36 Column: 14"
	.zero 1
uuid_00000000000de2a8:
	.ascii "type"
	.zero 1
uuid_00000000000de2be:
	.ascii "fragment"
	.zero 1
uuid_00000000000de2e6:
	.ascii "File: SRC/parse-toplevel.lm Line: 50 Column: 34"
	.zero 1
uuid_00000000000de2ea:
	.ascii "File: SRC/parse-toplevel.lm Line: 48 Column: 14"
	.zero 1
uuid_00000000000de315:
	.ascii "File: SRC/parse-toplevel.lm Line: 70 Column: 34"
	.zero 1
uuid_00000000000de319:
	.ascii "File: SRC/parse-toplevel.lm Line: 68 Column: 14"
	.zero 1
uuid_00000000000de347:
	.ascii "suffix"
	.zero 1
uuid_00000000000de35d:
	.ascii "atom"
	.zero 1
uuid_00000000000de3ad:
	.ascii "size"
	.zero 1
uuid_00000000000de3d8:
	.ascii "import"
	.zero 1
uuid_00000000000de40c:
	.ascii "zero"
	.zero 1
uuid_00000000000de422:
	.ascii "non-zero"
	.zero 1
uuid_00000000000de423:
	.ascii "t"
	.zero 1
uuid_00000000000de424:
	.ascii "!="
	.zero 1
uuid_00000000000de425:
	.ascii ".0"
	.zero 1
uuid_00000000000de426:
	.ascii ":="
	.zero 1
uuid_00000000000de44e:
	.ascii "File: SRC/parse-toplevel.lm Line: 150 Column: 14"
	.zero 1
uuid_00000000000de45b:
	.ascii "File: SRC/parse-toplevel.lm Line: 162 Column: 14"
	.zero 1
uuid_00000000000de45f:
	.ascii "File: SRC/parse-toplevel.lm Line: 5 Column: 8"
	.zero 1
uuid_00000000000de488:
	.ascii "File: SRC/parse-type-comma-sep.lm Line: 7 Column: 8"
	.zero 1
uuid_00000000000de4c3:
	.ascii "File: SRC/parse-type-single.lm Line: 9 Column: 11"
	.zero 1
uuid_00000000000de4cd:
	.ascii "File: SRC/parse-type-single.lm Line: 59 Column: 11"
	.zero 1
uuid_00000000000de4ef:
	.ascii "Unexpected Parameterized Type: "
	.zero 1
uuid_00000000000de4f0:
	.ascii "File: SRC/parse-type-single.lm Line: 86 Column: 25"
	.zero 1
uuid_00000000000de4fa:
	.ascii "File: SRC/parse-type-single.lm Line: 68 Column: 14"
	.zero 1
uuid_00000000000de51e:
	.ascii "File: SRC/parse-type.lm Line: 12 Column: 8"
	.zero 1
uuid_00000000000de537:
	.ascii "File: SRC/parse-type.lm Line: 22 Column: 14"
	.zero 1
uuid_00000000000de550:
	.ascii "File: SRC/parse-type.lm Line: 51 Column: 8"
	.zero 1
uuid_00000000000de5b6:
	.ascii "File: SRC/take-one-expr.lm Line: 19 Column: 11"
	.zero 1
uuid_00000000000de5c0:
	.ascii "File: SRC/take-one-expr.lm Line: 6 Column: 30"
	.zero 1
uuid_00000000000de5cd:
	.ascii "({"
	.zero 1
uuid_00000000000de5ce:
	.ascii " rvalue={"
	.zero 1
uuid_00000000000de5cf:
	.ascii "};rvalue;})"
	.zero 1
uuid_00000000000de5d0:
	.ascii "src"
	.zero 1
cstring_SB_cache_CL_StringStringListStringStringList:
.zero 32
uuid_00000000000de5d4:
	.ascii "File: SRC/compile-declare-cstring.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000de5de:
	.ascii "TODO declare cstring blob\n"
	.zero 1
uuid_00000000000de5df:
	.ascii "\""
	.zero 1
uuid_00000000000de5e0:
	.ascii "\\\\t"
	.zero 1
uuid_00000000000de5e1:
	.ascii "File: SRC/compile-declare-cstring.lm Line: 39 Column: 11"
	.zero 1
uuid_00000000000de618:
	.ascii "File: SRC/compile-declare-cstring.lm Line: 75 Column: 32"
	.zero 1
uuid_00000000000de61f:
	.ascii ":\n	.ascii \""
	.zero 1
uuid_00000000000de620:
	.ascii "\"\n	.zero 1\n"
	.zero 1
uuid_00000000000de687:
	.ascii "File: SRC/compile-destructure-args.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000de691:
	.ascii "({})"
	.zero 1
uuid_00000000000de6b3:
	.ascii "True"
	.zero 1
uuid_00000000000de6b4:
	.ascii "False"
	.zero 1
uuid_00000000000de6b5:
	.ascii "\\t"
	.zero 1
uuid_00000000000de6b6:
	.ascii "10"
	.zero 1
uuid_00000000000de6b7:
	.ascii "\\s"
	.zero 1
uuid_00000000000de6b8:
	.ascii "32"
	.zero 1
uuid_00000000000de6b9:
	.ascii "\\o"
	.zero 1
uuid_00000000000de6ba:
	.ascii "35"
	.zero 1
uuid_00000000000de6bb:
	.ascii "\\`"
	.zero 1
uuid_00000000000de6bc:
	.ascii "39"
	.zero 1
uuid_00000000000de6bd:
	.ascii "\\["
	.zero 1
uuid_00000000000de6be:
	.ascii "40"
	.zero 1
uuid_00000000000de6bf:
	.ascii "\\]"
	.zero 1
uuid_00000000000de6c0:
	.ascii "41"
	.zero 1
uuid_00000000000de6c1:
	.ascii "\\:"
	.zero 1
uuid_00000000000de6c2:
	.ascii "59"
	.zero 1
uuid_00000000000de6c3:
	.ascii "File: SRC/compile-expr-direct.lm Line: 55 Column: 20"
	.zero 1
uuid_00000000000de6e5:
	.ascii "(1)"
	.zero 1
uuid_00000000000de6e6:
	.ascii "(0)"
	.zero 1
uuid_00000000000de6e7:
	.ascii "(9)"
	.zero 1
uuid_00000000000de6e8:
	.ascii "(10)"
	.zero 1
uuid_00000000000de6e9:
	.ascii "(32)"
	.zero 1
uuid_00000000000de6ea:
	.ascii "(35)"
	.zero 1
uuid_00000000000de6eb:
	.ascii "(39)"
	.zero 1
uuid_00000000000de6ec:
	.ascii "(40)"
	.zero 1
uuid_00000000000de6ed:
	.ascii "(41)"
	.zero 1
uuid_00000000000de6ee:
	.ascii "(59)"
	.zero 1
uuid_00000000000de6ef:
	.ascii "File: SRC/compile-expr-direct.lm Line: 70 Column: 23"
	.zero 1
uuid_00000000000de7ce:
	.ascii "File: SRC/compile-expr-direct.lm Line: 122 Column: 17"
	.zero 1
uuid_00000000000de80e:
	.ascii "File: SRC/compile-expr-direct.lm Line: 136 Column: 17"
	.zero 1
uuid_00000000000de854:
	.ascii "(("
	.zero 1
uuid_00000000000de855:
	.ascii ")("
	.zero 1
uuid_00000000000de87d:
	.ascii "into-branch-conditional"
	.zero 1
uuid_00000000000de887:
	.ascii "rsp-offset"
	.zero 1
uuid_00000000000de888:
	.ascii "end-offset"
	.zero 1
uuid_00000000000de889:
	.ascii "return-size"
	.zero 1
uuid_00000000000de88a:
	.ascii "ImplicitContext"
	.zero 1
uuid_00000000000de88b:
	.ascii "ictx"
	.zero 1
uuid_00000000000de88c:
	.ascii "primitive::if"
	.zero 1
uuid_00000000000de8ae:
	.ascii "frame"
	.zero 1
uuid_00000000000de8af:
	.ascii "="
	.zero 1
uuid_00000000000de8b0:
	.ascii ";({});})\n"
	.zero 1
uuid_00000000000de8c9:
	.ascii "File: SRC/compile-expr-direct.lm Line: 278 Column: 14"
	.zero 1
uuid_00000000000de8cd:
	.ascii "unframe"
	.zero 1
uuid_00000000000de8ce:
	.ascii "	add $"
	.zero 1
uuid_00000000000de8cf:
	.ascii ", %rsp\n"
	.zero 1
uuid_00000000000de942:
	.ascii "File: SRC/compile-expr-direct.lm Line: 309 Column: 14"
	.zero 1
uuid_00000000000de955:
	.ascii "File: SRC/compile-expr-direct.lm Line: 6 Column: 5"
	.zero 1
uuid_00000000000de980:
	.ascii "File: SRC/compile-expr.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000de987:
	.ascii "File: SRC/compile-global.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000de99d:
	.ascii "cdecl::args-size"
	.zero 1
uuid_00000000000de9a1:
	.ascii "int"
	.zero 1
uuid_00000000000de9a5:
	.ascii ");\n"
	.zero 1
uuid_00000000000de9a9:
	.ascii "){"
	.zero 1
uuid_00000000000de9ad:
	.ascii ";return 0;\n"
	.zero 1
uuid_00000000000de9b1:
	.ascii "}\n"
	.zero 1
uuid_00000000000de9d6:
	.ascii "File: SRC/compile-global.lm Line: 13 Column: 5"
	.zero 1
uuid_00000000000de9dd:
	.ascii "TODO Compile Global Blob\n"
	.zero 1
uuid_00000000000de9ea:
	.ascii "File: SRC/compile-global.lm Line: 112 Column: 14"
	.zero 1
uuid_00000000000de9f4:
	.ascii "_COUNTER"
	.zero 1
uuid_00000000000de9f5:
	.ascii ":\n.zero 8\n"
	.zero 1
uuid_00000000000de9f6:
	.ascii "_LABEL:\n	.ascii	\"\\\\t"
	.zero 1
uuid_00000000000de9f7:
	.ascii "\\\\n\"\n	.zero 1\n"
	.zero 1
uuid_00000000000de9f8:
	.ascii "	mov $"
	.zero 1
uuid_00000000000de9f9:
	.ascii ", %RBX\n	mov 0(%RBX), %RAX\n"
	.zero 1
uuid_00000000000de9fa:
	.ascii "	inc %RAX\n	mov %RAX, 0(%RBX)\n"
	.zero 1
uuid_00000000000de9fb:
	.ascii "	push %RBP\n	mov %RSP, %RBP\n	push %RAX\n	call print_CL_ArrowNilU64\n	mov %RBP, %RSP\n	pop %RBP\n"
	.zero 1
uuid_00000000000de9fc:
	.ascii "	push %RBP\n	mov %RSP, %RBP\n	push $"
	.zero 1
uuid_00000000000de9fd:
	.ascii "_LABEL\n"
	.zero 1
uuid_00000000000de9fe:
	.ascii "	call print_CL_ArrowNilString\n	mov %RBP, %RSP\n	pop %RBP\n"
	.zero 1
uuid_00000000000dea02:
	.ascii "	sub $"
	.zero 1
uuid_00000000000dea03:
	.ascii "	ret\n"
	.zero 1
uuid_00000000000dea28:
	.ascii ":\n.zero "
	.zero 1
uuid_00000000000dea29:
	.ascii "File: SRC/compile-global.lm Line: 95 Column: 5"
	.zero 1
uuid_00000000000dea66:
	.ascii "File: SRC/compile-push-rvalue.lm Line: 11 Column: 11"
	.zero 1
uuid_00000000000dea73:
	.ascii "File: SRC/compile-push-rvalue.lm Line: 8 Column: 5"
	.zero 1
uuid_00000000000dea7a:
	.ascii "File: SRC/compile-stack-call-push-args.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dea87:
	.ascii "FunctionArguments"
	.zero 1
uuid_00000000000dea8b:
	.ascii "function-id"
	.zero 1
uuid_00000000000dea8c:
	.ascii "function-name"
	.zero 1
uuid_00000000000dea8d:
	.ascii "function-type"
	.zero 1
uuid_00000000000dea8e:
	.ascii "args-size"
	.zero 1
uuid_00000000000dea8f:
	.ascii "used"
	.zero 1
uuid_00000000000dea90:
	.ascii "args"
	.zero 1
uuid_00000000000dea91:
	.ascii "primitive::call"
	.zero 1
uuid_00000000000deaa7:
	.ascii "File: SRC/compile-stack-calls.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000deac9:
	.ascii "File: SRC/translate-local-variables.lm Line: 11 Column: 17"
	.zero 1
uuid_00000000000deacd:
	.ascii "File: SRC/translate-local-variables.lm Line: 8 Column: 11"
	.zero 1
uuid_00000000000dead4:
	.ascii "File: SRC/translate-local-variables.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000deae7:
	.ascii "L"
	.zero 1
uuid_00000000000deaeb:
	.ascii "File: SRC/cc-blob.lm Line: 7 Column: 5"
	.zero 1
uuid_00000000000deafb:
	.ascii "File: SRC/cc-blob.lm Line: 30 Column: 5"
	.zero 1
uuid_00000000000deb50:
	.ascii "File: SRC/cc-args.lm Line: 9 Column: 14"
	.zero 1
uuid_00000000000deba2:
	.ascii "Codegen Unexpected RHS"
	.zero 1
uuid_00000000000deba6:
	.ascii "File: SRC/cc-args.lm Line: 75 Column: 14"
	.zero 1
uuid_00000000000debb9:
	.ascii "File: SRC/cc-args.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000dec32:
	.ascii "for-arg-i"
	.zero 1
uuid_00000000000dec72:
	.ascii "for-arg"
	.zero 1
uuid_00000000000deca9:
	.ascii "File: SRC/blob-render.lm Line: 37 Column: 11"
	.zero 1
uuid_00000000000decdd:
	.ascii "for-atom"
	.zero 1
uuid_00000000000ded14:
	.ascii "File: SRC/blob-render.lm Line: 53 Column: 34"
	.zero 1
uuid_00000000000ded27:
	.ascii "range"
	.zero 1
uuid_00000000000ded3d:
	.ascii "uuid"
	.zero 1
uuid_00000000000ded50:
	.ascii "align"
	.zero 1
uuid_00000000000ded6c:
	.ascii "=="
	.zero 1
uuid_00000000000deda9:
	.ascii "/"
	.zero 1
uuid_00000000000dede0:
	.ascii "%"
	.zero 1
uuid_00000000000dee53:
	.ascii "File: SRC/blob-render.lm Line: 151 Column: 11"
	.zero 1
uuid_00000000000dee8d:
	.ascii "File: SRC/blob-render.lm Line: 175 Column: 14"
	.zero 1
uuid_00000000000dee94:
	.ascii "Unknown Render Term "
	.zero 1
uuid_00000000000dee95:
	.ascii "File: SRC/blob-render.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000def2f:
	.ascii "File: SRC/blob-render.lm Line: 205 Column: 5"
	.zero 1
uuid_00000000000def3c:
	.ascii " rvalue;rvalue;})"
	.zero 1
uuid_00000000000defa3:
	.ascii "File: SRC/extract-uuids.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000defe0:
	.ascii "File: SRC/index-typedefs.lm Line: 3 Column: 31"
	.zero 1
uuid_00000000000df059:
	.ascii "Invalid Typedef"
	.zero 1
uuid_00000000000df05a:
	.ascii "File: SRC/index-typedefs.lm Line: 17 Column: 5"
	.zero 1
uuid_00000000000df0d6:
	.ascii "Unrecognized Macro Pattern\n"
	.zero 1
uuid_00000000000df0d7:
	.ascii "File: SRC/is-macro-head.lm Line: 5 Column: 30"
	.zero 1
uuid_00000000000df129:
	.ascii "File: SRC/preprocess-apply-hard.lm Line: 11 Column: 11"
	.zero 1
uuid_00000000000df133:
	.ascii "File: SRC/preprocess-apply-hard.lm Line: 25 Column: 14"
	.zero 1
uuid_00000000000df13d:
	.ascii "File: SRC/preprocess-apply-hard.lm Line: 6 Column: 30"
	.zero 1
uuid_00000000000df147:
	.ascii "Invalid Macro Application\n"
	.zero 1
uuid_00000000000df19c:
	.ascii "_t"
	.zero 1
uuid_00000000000df19d:
	.ascii "Token"
	.zero 1
uuid_00000000000df19e:
	.ascii "Literal+Constant+String"
	.zero 1
uuid_00000000000df19f:
	.ascii "_"
	.zero 1
uuid_00000000000df1df:
	.ascii "File: SRC/preprocess-apply-literals.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000df1fe:
	.ascii ":Location:"
	.zero 1
uuid_00000000000df208:
	.ascii "p"
	.zero 1
uuid_00000000000df21b:
	.ascii "Location Unknown"
	.zero 1
uuid_00000000000df228:
	.ascii "File: "
	.zero 1
uuid_00000000000df229:
	.ascii " Line: "
	.zero 1
uuid_00000000000df22a:
	.ascii " Column: "
	.zero 1
uuid_00000000000df22b:
	.ascii "File: SRC/preprocess-apply-locations.lm Line: 8 Column: 11"
	.zero 1
uuid_00000000000df271:
	.ascii "File: SRC/preprocess-apply-locations.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000df3bf:
	.ascii "File: SRC/preprocess-apply.lm Line: 38 Column: 38"
	.zero 1
uuid_00000000000df3de:
	.ascii "File: SRC/preprocess-apply.lm Line: 56 Column: 38"
	.zero 1
uuid_00000000000df43f:
	.ascii "File: SRC/preprocess-apply.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000df482:
	.ascii "File: SRC/preprocess-is-suffixed.lm Line: 5 Column: 32"
	.zero 1
uuid_00000000000df4b3:
	.ascii "File: SRC/substitute-uuids.lm Line: 7 Column: 33"
	.zero 1
uuid_00000000000df505:
	.ascii "File: SRC/substitute-uuids.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000df5b4:
	.ascii ":Literal:"
	.zero 1
uuid_00000000000df627:
	.ascii "File: SRC/try-destructure-macro.lm Line: 13 Column: 14"
	.zero 1
uuid_00000000000df67f:
	.ascii ":Any:"
	.zero 1
uuid_00000000000df710:
	.ascii ":Variable:"
	.zero 1
uuid_00000000000df774:
	.ascii ":Tag:"
	.zero 1
uuid_00000000000df799:
	.ascii "Constant+Literal+U64"
	.zero 1
uuid_00000000000df79a:
	.ascii "Tag<"
	.zero 1
uuid_00000000000df7b0:
	.ascii "File: SRC/try-destructure-macro.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000df7fc:
	.ascii "Fragment Has No Type:\n"
	.zero 1
uuid_00000000000df800:
	.ascii "File: SRC/destructure-lhs.lm Line: 7 Column: 11"
	.zero 1
uuid_00000000000df83d:
	.ascii "File: SRC/destructure-lhs.lm Line: 24 Column: 11"
	.zero 1
uuid_00000000000df841:
	.ascii "Unexpected Destructure LHS: "
	.zero 1
uuid_00000000000df842:
	.ascii "File: SRC/destructure-lhs.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000df84f:
	.ascii ";\n})"
	.zero 1
uuid_00000000000df859:
	.ascii "File: SRC/fragment::chain.lm Line: 74 Column: 36"
	.zero 1
uuid_00000000000df860:
	.ascii "File: SRC/fragment::chain.lm Line: 85 Column: 5"
	.zero 1
uuid_00000000000df88e:
	.ascii "File: SRC/fragment::get.lm Line: 7 Column: 33"
	.zero 1
uuid_00000000000df895:
	.ascii "File: SRC/fragment::get.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000df899:
	.ascii "File: SRC/fragment::local-variable.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000df8b5:
	.ascii "File: SRC/fragment::set-context.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000df8ce:
	.ascii "File: SRC/fragment::set-offset.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000df8e7:
	.ascii "File: SRC/fragment::set-term.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000df900:
	.ascii "File: SRC/fragment::set-type.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000df919:
	.ascii "File: SRC/fragment::set-vararg.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000df932:
	.ascii "File: SRC/fragment::set.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000df936:
	.ascii "--c"
	.zero 1
uuid_00000000000df937:
	.ascii "PLATFORM/C/"
	.zero 1
uuid_00000000000df938:
	.ascii "tmp.c"
	.zero 1
uuid_00000000000df93c:
	.ascii "--blob"
	.zero 1
uuid_00000000000df93d:
	.ascii "tmp.txt"
	.zero 1
uuid_00000000000df941:
	.ascii "--gnu"
	.zero 1
uuid_00000000000df942:
	.ascii "PLATFORM/GNU-X86/"
	.zero 1
uuid_00000000000df943:
	.ascii "tmp.s"
	.zero 1
uuid_00000000000df947:
	.ascii "--tokenize"
	.zero 1
uuid_00000000000df948:
	.ascii "--parse"
	.zero 1
uuid_00000000000df949:
	.ascii "--preprocess"
	.zero 1
uuid_00000000000df94a:
	.ascii "--typecheck"
	.zero 1
uuid_00000000000df94b:
	.ascii "--compile"
	.zero 1
uuid_00000000000df94c:
	.ascii "--strict"
	.zero 1
uuid_00000000000df94d:
	.ascii "--gradual"
	.zero 1
uuid_00000000000df94e:
	.ascii "--macro"
	.zero 1
uuid_00000000000df94f:
	.ascii "--nomacro"
	.zero 1
uuid_00000000000df950:
	.ascii "--profile-invocations"
	.zero 1
uuid_00000000000df951:
	.ascii "-o"
	.zero 1
uuid_00000000000df952:
	.ascii "File: SRC/main.lm Line: 6 Column: 8"
	.zero 1
uuid_00000000000df9a1:
	.ascii "File: SRC/main.lm Line: 48 Column: 37"
	.zero 1
uuid_00000000000df9b9:
	.ascii "File: SRC/main.lm Line: 56 Column: 5"
	.zero 1
uuid_00000000000df9d9:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-list.lm Line: 57 Column: 25"
	.zero 1
uuid_00000000000dfa24:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-list.lm Line: 44 Column: 25"
	.zero 1
uuid_00000000000dfa3d:
	.ascii "List::head is fallible\n"
	.zero 1
uuid_00000000000dfa3e:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-list.lm Line: 10 Column: 5"
	.zero 1
uuid_00000000000dfa98:
	.ascii "File: PLATFORM/GNU-X86/LIB/hashtable.lm Line: 89 Column: 14"
	.zero 1
uuid_00000000000dfada:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-list.lm Line: 33 Column: 8"
	.zero 1
uuid_00000000000dfb5c:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-stdlib.lm Line: 29 Column: 5"
	.zero 1
uuid_00000000000dfb71:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-stdlib.lm Line: 61 Column: 5"
	.zero 1
uuid_00000000000dfcc3:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-list.lm Line: 20 Column: 26"
	.zero 1
uuid_00000000000dfd3a:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-list.lm Line: 71 Column: 8"
	.zero 1
uuid_00000000000dfd4d:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-list.lm Line: 78 Column: 5"
	.zero 1
uuid_00000000000e00a3:
	.ascii "File: PLATFORM/GNU-X86/LIB/hashtable.lm Line: 17 Column: 14"
	.zero 1
uuid_00000000000e017f:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-stdlib.lm Line: 44 Column: 5"
	.zero 1
