.global _start
.text
_start:
	mov %rsp,%rbp
	mov $malloc_SB_block_SB_head_CL_U64, %r15
	movq $0, 0(%r15)
	mov $malloc_SB_block_SB_tail_CL_U64, %r15
	movq $0, 0(%r15)
	mov $malloc_SB_first_SB_free_CL_U64, %r15
	movq $0, 0(%r15)
	mov $malloc_SB_page_SB_tail_CL_U64, %r15
	movq $0, 0(%r15)
	mov $malloc_SB_large_SB_size_CL_U64, %r15
	movq $1024, 0(%r15)
	mov $point_SB_of_SB_interest_CL_U64, %r15
	movq $0, 0(%r15)
	mov $rc_SB_magic_SB_number_CL_U64, %r15
	movq $423809104, 0(%r15)
	pushq $0
	pushq $0
	pushq $3
	movq $assemble_SB_text_SB_section_CL_SSCaseNumber3, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	pushq $0
	pushq $0
	pushq $3
	movq $assemble_SB_init_SB_section_CL_SSCaseNumber3, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	pushq $0
	pushq $0
	pushq $3
	movq $assemble_SB_data_SB_section_CL_SSCaseNumber3, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	pushq $0
	pushq $0
	pushq $3
	movq $assemble_SB_profile_SB_onexit_CL_SSCaseNumber3, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	mov $assemble_SB_final_CL_String, %r15
	movq $uuid_00000000000c0dfc, 0(%r15)
	mov $assemble_SB_argv_SB_referenced_CL_U8, %r15
	movb $0, 0(%r15)
	mov $main_SB_with_SB_argv_CL_U8, %r15
	movb $0, 0(%r15)
	mov $main_SB_with_CL_U8, %r15
	movb $0, 0(%r15)
	mov $config_SB_profile_SB_invocations_CL_U8, %r15
	movb $0, 0(%r15)
	mov $config_SB_strict_CL_U8, %r15
	movb $1, 0(%r15)
	mov $config_SB_preprocess_CL_U8, %r15
	movb $1, 0(%r15)
	mov $config_SB_target_CL_String, %r15
	movq $uuid_00000000000c0e51, 0(%r15)
	pushq $1
	movq $config_SB_assemble_SB_mode_CL_AssembleModeAssembleModeCaseNumber1, %R15
	popq 0(%R15)
	pushq $0
	movq $config_SB_mode_CL_CompileModeCompileModeCaseNumber0, %R15
	popq 0(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $preprocess_SB_macros_CL_MacroListMacroListCaseNumber1, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	popq 80(%R15)
	popq 88(%R15)
	popq 96(%R15)
	popq 104(%R15)
	popq 112(%R15)
	popq 120(%R15)
	popq 128(%R15)
	popq 136(%R15)
	popq 144(%R15)
	popq 152(%R15)
	popq 160(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	movq $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	movq $global_SB_type_SB_context_CL_TContextTContextCaseNumber2, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	popq 80(%R15)
	popq 88(%R15)
	popq 96(%R15)
	popq 104(%R15)
	popq 112(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $global_SB_ctx_CL_FContextFContextCaseNumber1, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	popq 80(%R15)
	popq 88(%R15)
	popq 96(%R15)
	popq 104(%R15)
	popq 112(%R15)
	popq 120(%R15)
	popq 128(%R15)
	popq 136(%R15)
	popq 144(%R15)
	popq 152(%R15)
	popq 160(%R15)
	popq 168(%R15)
	popq 176(%R15)
	popq 184(%R15)
	popq 192(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $parse_SB_suffixes_CL_SfxListSfxListCaseNumber1, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecializeCaseNumber1, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	popq 80(%R15)
	popq 88(%R15)
	popq 96(%R15)
	popq 104(%R15)
	popq 112(%R15)
	popq 120(%R15)
	popq 128(%R15)
	popq 136(%R15)
	popq 144(%R15)
	popq 152(%R15)
	popq 160(%R15)
	popq 168(%R15)
	popq 176(%R15)
	popq 184(%R15)
	popq 192(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $type_SB_index_CL_HashtableIsTypeAST, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $alias_SB_index_CL_ListTupleTypeTupleStringStringListTupleTypeTupleStringStringCaseNumber1, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $class_SB_exists_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	movq $parameter_SB_is_SB_flat_SB_index_CL_BTreeEqU64TupleU64TupleU64StringBTreeEqU64TupleU64TupleU64StringCaseNumber0, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	movq $is_SB_special_SB_index_CL_BTreeEqU64TupleTypeStringBTreeEqU64TupleTypeStringCaseNumber0, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	movq $lone_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	movq $tag_SB_is_SB_fragment_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	movq $global_SB_symbol_SB_registry_CL_BTreeEqU64TupleTypeStringBTreeEqU64TupleTypeStringCaseNumber0, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $class_SB_to_SB_only_SB_child_CL_HashtableEqStringString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	movq $tag_SB_to_SB_index_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	mov $unknown_SB_index_SB_of_SB_tag_CL_U64, %r15
	movq $99999, 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	movq $class_SB_to_SB_size_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $tag_SB_to_SB_class_SB_index_CL_HashtableEqTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $class_SB_to_SB_yes_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $tag_SB_to_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	movq $type_SB_constructors_SB_index_CL_BTreeEqTypeStringBTreeEqTypeStringCaseNumber0, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	movq $type_SB_complex_SB_fields_SB_index_CL_BTreeEqTupleTypeTypeStringBTreeEqTupleTypeTypeStringCaseNumber0, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	popq 80(%R15)
	popq 88(%R15)
	mov $types_SB_have_SB_changed_CL_U8, %r15
	movb $1, 0(%r15)
	pushq $0
	pushq $0
	pushq $1
	movq $already_SB_tokenized_CL_ListStringListStringCaseNumber1, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	mov $uuid_SB_counter_CL_U64, %r15
	movq $0, 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $cstring_SB_cache_CL_StringStringListStringStringListCaseNumber1, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	mov %rbp,%rsp
	popq %r8
	movq %rsp, %r9
	push %rbp
	mov %rsp, %rbp
	pushq %r8
	pushq %r9
	call main
	mov %rbp, %rsp
	pop %rbp
	mov $60, %rax
	mov $0, %rdi
	syscall
_EQ__EQ__CL_ArrowU64ConsStringString:
	pushq $0
	pushq $0
	pushq $0
	mov -8(%rbp), %R8
	mov -16(%rbp), %R9
	cmp %R8,%R9
	je uuid_00000000000c0ca2
	cmp $0,%R8
	je uuid_00000000000c0ca3
	cmp $0,%R9
	je uuid_00000000000c0ca3
uuid_00000000000c0ca1:
	mov %R8, %r14
	movb 0(%r14), %r15b
	movb %r15b, -32(%rbp)
	mov %R9, %r14
	movb 0(%r14), %r15b
	movb %r15b, -40(%rbp)
	mov -32(%RBP), %AL
	mov -40(%RBP), %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	movq %RAX, -48(%rbp)
	mov -48(%rbp), %R10
	cmp $0,%R10
	je uuid_00000000000c0ca3
	mov -32(%RBP), %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	movq %RAX, -48(%rbp)
	mov -48(%rbp), %R10
	cmp $0,%R10
	jne uuid_00000000000c0ca2
	inc %R8
	inc %R9
	jmp uuid_00000000000c0ca1
uuid_00000000000c0ca2:
	mov $1, %RAX
	jmp uuid_00000000000c0ca4
uuid_00000000000c0ca3:
	mov $0, %RAX
	jmp uuid_00000000000c0ca4
uuid_00000000000c0ca4:
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
_EX__EQ__CL_ArrowU64ConsStringString:
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
_AD__CL_ArrowSConsSS:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0ca8
	jmp uuid_00000000000c0caa
uuid_00000000000c0ca8:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0ca5
	movq -48(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -40(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -32(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c0ca7
uuid_00000000000c0ca5:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c0ca7:
	mov -72(%RBP),%RSP
	add $-72, %RSP
uuid_00000000000c0caa:
	mov -64(%RBP),%RSP
	add $-72, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
deep_SB_hash_CL_ArrowU64U64:
#call function hash : Arrow<Sized<8>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call hash_CL_ArrowU64Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
non_SB_zero_CL_ArrowU64S:
	pushq $1
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0cb0
	push %RBP
	jmp uuid_00000000000c0cad
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c0cac
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0caf
uuid_00000000000c0cad:
uuid_00000000000c0caf:
	mov -104(%RBP),%RSP
	add $-104, %RSP
	jmp uuid_00000000000c0cb2
uuid_00000000000c0cb0:
	movq $0, -40(%rbp)
uuid_00000000000c0cb2:
	mov -72(%RBP),%RSP
	add $-96, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
non_SB_zero_CL_ArrowU64String:
	pushq $0
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c0cb3
	jmp uuid_00000000000c0cb5
uuid_00000000000c0cb3:
	movq $1, -24(%rbp)
uuid_00000000000c0cb5:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_EQ__EQ__CL_ArrowU64ConsSS:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0cbc
	jmp uuid_00000000000c0cbe
uuid_00000000000c0cbc:
	push %RBP
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0cb9
	jmp uuid_00000000000c0cbb
uuid_00000000000c0cb9:
	push %RBP
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0cb6
	jmp uuid_00000000000c0cb8
uuid_00000000000c0cb6:
	movb $1, -192(%rbp)
uuid_00000000000c0cb8:
	mov -240(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c0cbb:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c0cbe:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d1a
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0cd1
	jmp uuid_00000000000c0cd3
uuid_00000000000c0cd1:
	push %RBP
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0cc2
	jmp uuid_00000000000c0cc4
uuid_00000000000c0cc2:
	push %RBP
	mov -368(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0cbf
	jmp uuid_00000000000c0cc1
uuid_00000000000c0cbf:
	movb $1, -384(%rbp)
uuid_00000000000c0cc1:
	mov -400(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000c0cc4:
	mov -392(%RBP),%RSP
	add $-408, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0cce
	jmp uuid_00000000000c0cd0
uuid_00000000000c0cce:
	push %RBP
	pushq -280(%RBP)
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq $0
	push %RBP
	mov -440(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0cc8
	jmp uuid_00000000000c0cca
uuid_00000000000c0cc8:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0cc5
	jmp uuid_00000000000c0cc7
uuid_00000000000c0cc5:
	movb $1, -448(%rbp)
uuid_00000000000c0cc7:
	mov -464(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000c0cca:
	mov -456(%RBP),%RSP
	add $-472, %RSP
	mov -448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ccb
	jmp uuid_00000000000c0ccd
uuid_00000000000c0ccb:
	movb $1, -336(%rbp)
uuid_00000000000c0ccd:
	mov -416(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000c0cd0:
	mov -352(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000c0cd3:
	mov -344(%RBP),%RSP
	add $-472, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d17
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0cec
	jmp uuid_00000000000c0cee
uuid_00000000000c0cec:
	push %RBP
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq $0
	push %RBP
	mov -584(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0cda
	jmp uuid_00000000000c0cdc
uuid_00000000000c0cda:
	push %RBP
	mov -576(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0cd7
	jmp uuid_00000000000c0cd9
uuid_00000000000c0cd7:
	push %RBP
	mov -568(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0cd4
	jmp uuid_00000000000c0cd6
uuid_00000000000c0cd4:
	movb $1, -592(%rbp)
uuid_00000000000c0cd6:
	mov -640(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c0cd9:
	mov -608(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c0cdc:
	mov -600(%RBP),%RSP
	add $-664, %RSP
	mov -592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ce9
	jmp uuid_00000000000c0ceb
uuid_00000000000c0ce9:
	push %RBP
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ce3
	jmp uuid_00000000000c0ce5
uuid_00000000000c0ce3:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0ce0
	jmp uuid_00000000000c0ce2
uuid_00000000000c0ce0:
	push %RBP
	mov -680(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0cdd
	jmp uuid_00000000000c0cdf
uuid_00000000000c0cdd:
	movb $1, -704(%rbp)
uuid_00000000000c0cdf:
	mov -752(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c0ce2:
	mov -720(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c0ce5:
	mov -712(%RBP),%RSP
	add $-776, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ce6
	jmp uuid_00000000000c0ce8
uuid_00000000000c0ce6:
	movb $1, -544(%rbp)
uuid_00000000000c0ce8:
	mov -672(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c0ceb:
	mov -560(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c0cee:
	mov -552(%RBP),%RSP
	add $-776, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d14
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -840(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d07
	jmp uuid_00000000000c0d09
uuid_00000000000c0d07:
	push %RBP
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq $0
	push %RBP
	mov -888(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0cf8
	jmp uuid_00000000000c0cfa
uuid_00000000000c0cf8:
	push %RBP
	mov -880(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0cf5
	jmp uuid_00000000000c0cf7
uuid_00000000000c0cf5:
	movb $1, -896(%rbp)
uuid_00000000000c0cf7:
	mov -912(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000c0cfa:
	mov -904(%RBP),%RSP
	add $-920, %RSP
	mov -896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d04
	jmp uuid_00000000000c0d06
uuid_00000000000c0d04:
	push %RBP
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq $0
	push %RBP
	mov -952(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0cfe
	jmp uuid_00000000000c0d00
uuid_00000000000c0cfe:
	push %RBP
	mov -944(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0cfb
	jmp uuid_00000000000c0cfd
uuid_00000000000c0cfb:
	movb $1, -960(%rbp)
uuid_00000000000c0cfd:
	mov -976(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c0d00:
	mov -968(%RBP),%RSP
	add $-984, %RSP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d01
	jmp uuid_00000000000c0d03
uuid_00000000000c0d01:
	movb $1, -848(%rbp)
uuid_00000000000c0d03:
	mov -928(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c0d06:
	mov -864(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c0d09:
	mov -856(%RBP),%RSP
	add $-984, %RSP
	mov -848(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d11
	push %RBP
	jmp uuid_00000000000c0d0e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c0d0d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0d10
uuid_00000000000c0d0e:
uuid_00000000000c0d10:
	mov -992(%RBP),%RSP
	add $-992, %RSP
	jmp uuid_00000000000c0d13
uuid_00000000000c0d11:
	push %RBP
	mov -984(%RBP), %RAX
	mov -920(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d0a
	jmp uuid_00000000000c0d0c
uuid_00000000000c0d0a:
	movq $1, -64(%rbp)
uuid_00000000000c0d0c:
	mov -992(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c0d13:
	mov -784(%RBP),%RSP
	add $-992, %RSP
	jmp uuid_00000000000c0d16
uuid_00000000000c0d14:
	push %RBP
#call function == : Arrow<Cons<S,S>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0cf2
	jmp uuid_00000000000c0cf4
uuid_00000000000c0cf2:
	push %RBP
#call function == : Arrow<Cons<S,S>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0cef
	jmp uuid_00000000000c0cf1
uuid_00000000000c0cef:
	movq $1, -64(%rbp)
uuid_00000000000c0cf1:
	mov -792(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c0cf4:
	mov -784(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c0d16:
	mov -480(%RBP),%RSP
	add $-792, %RSP
	jmp uuid_00000000000c0d19
uuid_00000000000c0d17:
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -408(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000c0d19:
	mov -272(%RBP),%RSP
	add $-472, %RSP
	jmp uuid_00000000000c0d1c
uuid_00000000000c0d1a:
	movq $1, -64(%rbp)
uuid_00000000000c0d1c:
	mov -128(%RBP),%RSP
	add $-264, %RSP
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
_EX__EQ__CL_ArrowU64ConsSS:
#call function == : Arrow<Cons<S,S>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
print_CL_ArrowNilS:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d42
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d21
	jmp uuid_00000000000c0d23
uuid_00000000000c0d21:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0d1e
	jmp uuid_00000000000c0d20
uuid_00000000000c0d1e:
	movb $1, -128(%rbp)
uuid_00000000000c0d20:
	mov -144(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000c0d23:
	mov -136(%RBP),%RSP
	add $-152, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d3f
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d2a
	jmp uuid_00000000000c0d2c
uuid_00000000000c0d2a:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0d27
	jmp uuid_00000000000c0d29
uuid_00000000000c0d27:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0d24
	jmp uuid_00000000000c0d26
uuid_00000000000c0d24:
	movb $1, -192(%rbp)
uuid_00000000000c0d26:
	mov -240(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c0d29:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c0d2c:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d3c
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d33
	jmp uuid_00000000000c0d35
uuid_00000000000c0d33:
	push %RBP
	mov -288(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0d30
	jmp uuid_00000000000c0d32
uuid_00000000000c0d30:
	movb $1, -304(%rbp)
uuid_00000000000c0d32:
	mov -320(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000c0d35:
	mov -312(%RBP),%RSP
	add $-328, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d39
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c0d38
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0d3b
uuid_00000000000c0d39:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d36
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d37
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c0d3b:
	mov -272(%RBP),%RSP
	add $-328, %RSP
	jmp uuid_00000000000c0d3e
uuid_00000000000c0d3c:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d2d
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<S,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d2e
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<S,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d2f
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c0d3e:
	mov -160(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000c0d41
uuid_00000000000c0d3f:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c0d41:
	mov -96(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000c0d44
uuid_00000000000c0d42:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d1d
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c0d44:
	mov -64(%RBP),%RSP
	add $-88, %RSP
	mov %rbp, %rsp
	sub $32, %rsp
	ret
fail_CL_ArrowNilString:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
fail_CL_ArrowNilConsStringString:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d45
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
exit_CL_ArrowNilU64:
	mov $60, %RAX
	mov -8(%rbp), %RDI
	syscall
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilString:
	mov -8(%rbp), %R15
	mov $0, %RDX
uuid_00000000000c0d46:
	mov 0(%R15), %R14B
	cmp $0,%R14B
	je uuid_00000000000c0d47
	inc %RDX
	inc %R15
	jmp uuid_00000000000c0d46
uuid_00000000000c0d47:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	pushq $1
	pushq -8(%rbp)
	push %RDX
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
eprint_CL_ArrowNilString:
	mov -8(%rbp), %R15
	mov $0, %RDX
uuid_00000000000c0d48:
	mov 0(%R15), %R14B
	cmp $0,%R14B
	je uuid_00000000000c0d49
	inc %RDX
	inc %R15
	jmp uuid_00000000000c0d48
uuid_00000000000c0d49:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	pushq $2
	pushq -8(%rbp)
	push %RDX
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilU64:
	pushq $0
	mov -8(%rbp), %R15
	mov $0, %R14
uuid_00000000000c0d4a:
	mov	%R15, %RAX
	mov $0, %RDX
	mov $10, %RCX
	div %RCX
	push %RDX
	inc %R14
	mov	%RAX, %R15
	cmp $0,%R15
	jne uuid_00000000000c0d4a
uuid_00000000000c0d4b:
	pop %RDX
	movb %DL, -24(%rbp)
	addb $48, -24(%rbp)
	dec %R14
	mov $1, %RAX
	mov $1, %RDI
	mov	%rbp, %r12
	addq $-24, %r12
	mov	%R12, %RSI
	mov $1, %RDX
	syscall
	cmp $0,%R14
	jne uuid_00000000000c0d4b
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilASCII:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	pushq $1
	mov	%rbp, %r12
	addq $0, %r12
	push %R12
	pushq $1
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
print_CL_ArrowNilI64:
	pushq $0
	mov -8(%rbp), %R15
	mov $0, %R14
	cmp $0,%R15
	jge uuid_00000000000c0d4c
	neg %R15
	movb $45, -24(%rbp)
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	pushq $1
	mov	%rbp, %r12
	addq $-24, %r12
	push %R12
	pushq $1
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c0d4c:
	mov	%R15, %RAX
	mov $0, %RDX
	mov $10, %RCX
	div %RCX
	push %RDX
	inc %R14
	mov	%RAX, %R15
	cmp $0,%R15
	jne uuid_00000000000c0d4c
uuid_00000000000c0d4d:
	pop %RDX
	movb %DL, -24(%rbp)
	addb $48, -24(%rbp)
	dec %R14
	mov $1, %RAX
	mov $1, %RDI
	mov	%rbp, %r12
	addq $-24, %r12
	mov	%R12, %RSI
	mov $1, %RDX
	syscall
	cmp $0,%R14
	jne uuid_00000000000c0d4d
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilU32:
	mov $0, %R15
	mov -8(%rbp), %R15D
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	push %R15
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilU16:
	mov $0, %R15
	mov -8(%rbp), %R15W
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	push %R15
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilU8:
	mov $0, %R15
	mov -8(%rbp), %R15B
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	push %R15
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilI32:
	mov $0, %R15
	mov -8(%rbp), %R15D
	movsx %R15D,%R15
#call function print : Arrow<I64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	push %R15
	mov %RBX, %RBP
	call print_CL_ArrowNilI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilI16:
	mov $0, %R15
	mov -8(%rbp), %R15W
	movsx %R15W,%R15
#call function print : Arrow<I64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	push %R15
	mov %RBX, %RBP
	call print_CL_ArrowNilI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilI8:
	mov $0, %R15
	mov -8(%rbp), %R15B
	movsx %R15B,%R15
#call function print : Arrow<I64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	push %R15
	mov %RBX, %RBP
	call print_CL_ArrowNilI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64:
	mov -8(%rbp), %RAX
	mov -16(%rbp), %RDI
	mov -24(%rbp), %RSI
	mov -32(%rbp), %RDX
	syscall
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
read_SB_file_CL_ArrowStringString:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $2
	pushq -8(%rbp)
	pushq $0
	pushq $0
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -24(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d53
	jmp uuid_00000000000c0d55
uuid_00000000000c0d53:
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d51
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c0d55:
	mov -32(%RBP),%RSP
	add $-32, %RSP
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1025
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $1024
uuid_00000000000c0d5b:
	mov -56(%RBP), %RAX
	mov $1024, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d5c
	jmp uuid_00000000000c0d5d
uuid_00000000000c0d5c:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -24(%rbp)
	mov -40(%RBP), %RAX
	mov -48(%RBP), %R14
	addq %R14,%RAX
	push %RAX
	pushq $1024
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -56(%rbp)
	push %RBP
	mov -56(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d58
	jmp uuid_00000000000c0d5a
uuid_00000000000c0d58:
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d56
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<I64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d57
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c0d5a:
	mov -64(%RBP),%RSP
	add $-64, %RSP
	mov -48(%RBP), %RAX
	mov -56(%RBP), %R14
	addq %R14,%RAX
	movq %RAX, -48(%rbp)
#call function realloc : Arrow<Cons<Array<?,?>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov -48(%RBP), %RAX
	mov $1025, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call realloc_CL_ArrowArray_QM__QM_ConsU64Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
	add $8, %RSP
	jmp uuid_00000000000c0d5b
uuid_00000000000c0d5d:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $3
	pushq -24(%rbp)
	pushq $0
	pushq $0
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov -48(%RBP), %R13
	mov -40(%RBP), %R15
	add %R13, %R15
	movb $0, 0(%R15)
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
clone_SB_rope_CL_ArrowStringS:
#call function malloc : Arrow<Cons<U64,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $1024
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function clone-rope-impl : Arrow<Cons<Cons<Array<?,?>,S>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $0
	mov %RBX, %RBP
	call clone_SB_rope_SB_impl_CL_ArrowU64ConsU64ConsSArray_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function realloc : Arrow<Cons<Array<?,?>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov -48(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call realloc_CL_ArrowArray_QM__QM_ConsU64Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
	mov -48(%RBP), %R13
	mov -40(%RBP), %R15
	add %R13, %R15
	movb $0, 0(%R15)
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
clone_SB_rope_SB_impl_CL_ArrowU64ConsU64ConsSArray_QM__QM_:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov -104(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d77
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d64
	jmp uuid_00000000000c0d66
uuid_00000000000c0d64:
	push %RBP
	mov -128(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0d61
	jmp uuid_00000000000c0d63
uuid_00000000000c0d61:
	push %RBP
	mov -120(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0d5e
	jmp uuid_00000000000c0d60
uuid_00000000000c0d5e:
	movb $1, -144(%rbp)
uuid_00000000000c0d60:
	mov -192(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000c0d63:
	mov -160(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000c0d66:
	mov -152(%RBP),%RSP
	add $-216, %RSP
	mov -144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d74
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d6a
	jmp uuid_00000000000c0d6c
uuid_00000000000c0d6a:
	push %RBP
	mov -240(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0d67
	jmp uuid_00000000000c0d69
uuid_00000000000c0d67:
	movb $1, -256(%rbp)
uuid_00000000000c0d69:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c0d6c:
	mov -264(%RBP),%RSP
	add $-280, %RSP
	mov -256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d71
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c0d70
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0d73
uuid_00000000000c0d71:
	pushq $0
	mov -280(%RBP), %R15
	mov -288(%RBP), %R14
	add %R14, %R15
	mov 0(%R15), %R15B
	mov %R15B, %AL
	push %RAX
uuid_00000000000c0d6d:
	mov -296(%RBP), %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	setne %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d6e
	jmp uuid_00000000000c0d6f
uuid_00000000000c0d6e:
#call function realloc : Arrow<Cons<Array<?,?>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov -40(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call realloc_CL_ArrowArray_QM__QM_ConsU64Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -8(%rbp)
	mov -296(%RBP), %R14B
	mov -40(%RBP), %R13
	mov -8(%RBP), %R15
	add %R13, %R15
	movb %R14B, 0(%R15)
	mov -288(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -288(%rbp)
	mov -40(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
	mov -280(%RBP), %R15
	mov -288(%RBP), %R14
	add %R14, %R15
	mov 0(%R15), %R15B
	movb %R15B, -296(%rbp)
	jmp uuid_00000000000c0d6d
uuid_00000000000c0d6f:
uuid_00000000000c0d73:
	mov -224(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000c0d76
uuid_00000000000c0d74:
#call function clone-rope-impl : Arrow<Cons<Cons<Array<?,?>,S>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_SB_impl_CL_ArrowU64ConsU64ConsSArray_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
#call function clone-rope-impl : Arrow<Cons<Cons<Array<?,?>,S>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_SB_impl_CL_ArrowU64ConsU64ConsSArray_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000c0d76:
	mov -112(%RBP),%RSP
	add $-216, %RSP
	jmp uuid_00000000000c0d79
uuid_00000000000c0d77:
uuid_00000000000c0d79:
	mov -80(%RBP),%RSP
	add $-104, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
clone_SB_rope_CL_ArrowStringU8:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $2
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -24(%rbp), %r14
	mov -8(%rbp),%r15b
	mov %r15b, 0(%r14)
	mov -24(%rbp), %r15
	movb $0, 1(%r15)
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
length_CL_ArrowU64String:
	pushq $0
uuid_00000000000c0d7a:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c0d7b
	jmp uuid_00000000000c0d7c
uuid_00000000000c0d7b:
	mov -24(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c0d7a
uuid_00000000000c0d7c:
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
write_SB_file_CL_ArrowNilConsStringString:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $2
	pushq -8(%rbp)
	pushq $577
	pushq $420
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	pushq -32(%rbp)
	pushq -16(%rbp)
#call function length : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	mov %RBX, %RBP
	call length_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $3
	pushq -32(%rbp)
	pushq $0
	pushq $0
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
to_SB_string_CL_ArrowStringU64:
	pushq $0
	pushq $0
	pushq $3
	pushq $0
uuid_00000000000c0d7d:
	mov -8(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d7e
	jmp uuid_00000000000c0d7f
uuid_00000000000c0d7e:
	mov -8(%RBP), %RAX
	mov $10, %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	mov %RAX, %RAX
	mov $48, %R14
	addq %R14,%RAX
	push %RAX
	mov -8(%RBP), %RAX
	mov $10, %R14
	mov $0, %RDX
	div %R14
	movq %RAX, -8(%rbp)
	mov -56(%rbp), %R8
	movb %R8B, -48(%rbp)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	add $8, %rsp
	jmp uuid_00000000000c0d7d
uuid_00000000000c0d7f:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0d81
	pushq $0
	pushq $uuid_00000000000c0d80
	pushq $2
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	jmp uuid_00000000000c0d83
uuid_00000000000c0d81:
uuid_00000000000c0d83:
	mov -56(%RBP),%RSP
	add $-56, %RSP
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
to_SB_string_CL_ArrowStringI64:
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	pushq $0
	pushq $3
	push %RBP
	mov -8(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d85
	jmp uuid_00000000000c0d87
uuid_00000000000c0d85:
	pushq $0
	pushq $uuid_00000000000c0d84
	pushq $2
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	mov $0, %RAX
	mov -8(%RBP), %R14
	subq %R14,%RAX
	movq %RAX, -8(%rbp)
uuid_00000000000c0d87:
	mov -72(%RBP),%RSP
	add $-72, %RSP
	pushq $0
uuid_00000000000c0d88:
	mov -8(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d89
	jmp uuid_00000000000c0d8a
uuid_00000000000c0d89:
	mov -8(%RBP), %RAX
	mov $10, %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	mov %RAX, %RAX
	mov $48, %R14
	addq %R14,%RAX
	push %RAX
	mov -8(%RBP), %RAX
	mov $10, %R14
	mov $0, %RDX
	div %R14
	movq %RAX, -8(%rbp)
	mov -88(%rbp), %R8
	movb %R8B, -80(%rbp)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	add $8, %rsp
	jmp uuid_00000000000c0d88
uuid_00000000000c0d8a:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0d8b
	pushq $0
	pushq $uuid_00000000000c0d80
	pushq $2
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	jmp uuid_00000000000c0d8d
uuid_00000000000c0d8b:
uuid_00000000000c0d8d:
	mov -88(%RBP),%RSP
	add $-88, %RSP
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
to_SB_i64_CL_ArrowI64String:
	pushq $0
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $45, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d8e
	jmp uuid_00000000000c0d90
uuid_00000000000c0d8e:
	movb $1, -24(%rbp)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
uuid_00000000000c0d90:
	mov -32(%RBP),%RSP
	add $-32, %RSP
#call function to-u64 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call to_SB_u64_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -24(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d91
	jmp uuid_00000000000c0d93
uuid_00000000000c0d91:
	mov $0, %RAX
	mov -40(%RBP), %R14
	subq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c0d93:
	mov -48(%RBP),%RSP
	add $-48, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
to_SB_u64_CL_ArrowU64String:
	pushq $0
uuid_00000000000c0db6:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c0db7
	jmp uuid_00000000000c0db8
uuid_00000000000c0db7:
	mov -24(%RBP), %RAX
	mov $10, %R14
	mul %R14
	movq %RAX, -24(%rbp)
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -32(%rbp)
	mov -48(%RBP), %AL
	mov $48, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0db3
	push %RBP
	pushq -32(%rbp)
	mov -64(%RBP), %AL
	mov $49, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0db0
	push %RBP
	pushq -32(%rbp)
	mov -80(%RBP), %AL
	mov $50, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0dad
	push %RBP
	pushq -32(%rbp)
	mov -96(%RBP), %AL
	mov $51, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0daa
	push %RBP
	pushq -32(%rbp)
	mov -112(%RBP), %AL
	mov $52, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0da7
	push %RBP
	pushq -32(%rbp)
	mov -128(%RBP), %AL
	mov $53, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0da4
	push %RBP
	pushq -32(%rbp)
	mov -144(%RBP), %AL
	mov $54, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0da1
	push %RBP
	pushq -32(%rbp)
	mov -160(%RBP), %AL
	mov $55, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d9e
	push %RBP
	pushq -32(%rbp)
	mov -176(%RBP), %AL
	mov $56, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d9b
	push %RBP
	pushq -32(%rbp)
	mov -192(%RBP), %AL
	mov $57, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d98
	push %RBP
	jmp uuid_00000000000c0d95
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c0d94
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0d97
uuid_00000000000c0d95:
uuid_00000000000c0d97:
	mov -200(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000c0d9a
uuid_00000000000c0d98:
	mov -24(%RBP), %RAX
	mov $9, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000c0d9a:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000c0d9d
uuid_00000000000c0d9b:
	mov -24(%RBP), %RAX
	mov $8, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000c0d9d:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000c0da0
uuid_00000000000c0d9e:
	mov -24(%RBP), %RAX
	mov $7, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000c0da0:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000c0da3
uuid_00000000000c0da1:
	mov -24(%RBP), %RAX
	mov $6, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000c0da3:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c0da6
uuid_00000000000c0da4:
	mov -24(%RBP), %RAX
	mov $5, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000c0da6:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000c0da9
uuid_00000000000c0da7:
	mov -24(%RBP), %RAX
	mov $4, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000c0da9:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000c0dac
uuid_00000000000c0daa:
	mov -24(%RBP), %RAX
	mov $3, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000c0dac:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000c0daf
uuid_00000000000c0dad:
	mov -24(%RBP), %RAX
	mov $2, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000c0daf:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000c0db2
uuid_00000000000c0db0:
	mov -24(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000c0db2:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000c0db5
uuid_00000000000c0db3:
uuid_00000000000c0db5:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000c0db6
uuid_00000000000c0db8:
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
to_SB_hex_CL_ArrowStringU64:
	pushq $0
	pushq $0
	pushq $3
	pushq $16
uuid_00000000000c0df9:
	mov -48(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0dfa
	jmp uuid_00000000000c0dfb
uuid_00000000000c0dfa:
	mov -8(%RBP), %RAX
	mov $16, %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	push %RBP
	pushq -56(%rbp)
	mov -72(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0df6
	push %RBP
	pushq -56(%rbp)
	mov -88(%RBP), %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0df3
	push %RBP
	pushq -56(%rbp)
	mov -104(%RBP), %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0df0
	push %RBP
	pushq -56(%rbp)
	mov -120(%RBP), %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ded
	push %RBP
	pushq -56(%rbp)
	mov -136(%RBP), %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0dea
	push %RBP
	pushq -56(%rbp)
	mov -152(%RBP), %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0de7
	push %RBP
	pushq -56(%rbp)
	mov -168(%RBP), %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0de4
	push %RBP
	pushq -56(%rbp)
	mov -184(%RBP), %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0de1
	push %RBP
	pushq -56(%rbp)
	mov -200(%RBP), %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0dde
	push %RBP
	pushq -56(%rbp)
	mov -216(%RBP), %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ddb
	push %RBP
	pushq -56(%rbp)
	mov -232(%RBP), %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0dd8
	push %RBP
	pushq -56(%rbp)
	mov -248(%RBP), %RAX
	mov $11, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0dd5
	push %RBP
	pushq -56(%rbp)
	mov -264(%RBP), %RAX
	mov $12, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0dd2
	push %RBP
	pushq -56(%rbp)
	mov -280(%RBP), %RAX
	mov $13, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0dcf
	push %RBP
	pushq -56(%rbp)
	mov -296(%RBP), %RAX
	mov $14, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0dcc
	push %RBP
	pushq -56(%rbp)
	mov -312(%RBP), %RAX
	mov $15, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0dc9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c0dc8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0dcb
uuid_00000000000c0dc9:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0dc7
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0dcb:
	mov -304(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000c0dce
uuid_00000000000c0dcc:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0dc6
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0dce:
	mov -288(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000c0dd1
uuid_00000000000c0dcf:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0dc5
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0dd1:
	mov -272(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c0dd4
uuid_00000000000c0dd2:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0dc4
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0dd4:
	mov -256(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000c0dd7
uuid_00000000000c0dd5:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0dc3
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0dd7:
	mov -240(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c0dda
uuid_00000000000c0dd8:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0dc2
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0dda:
	mov -224(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000c0ddd
uuid_00000000000c0ddb:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0dc1
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0ddd:
	mov -208(%RBP),%RSP
	add $-216, %RSP
	jmp uuid_00000000000c0de0
uuid_00000000000c0dde:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0dc0
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0de0:
	mov -192(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000c0de3
uuid_00000000000c0de1:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0dbf
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0de3:
	mov -176(%RBP),%RSP
	add $-184, %RSP
	jmp uuid_00000000000c0de6
uuid_00000000000c0de4:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0dbe
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0de6:
	mov -160(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000c0de9
uuid_00000000000c0de7:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0dbd
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0de9:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000c0dec
uuid_00000000000c0dea:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0dbc
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0dec:
	mov -128(%RBP),%RSP
	add $-136, %RSP
	jmp uuid_00000000000c0def
uuid_00000000000c0ded:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0dbb
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0def:
	mov -112(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000c0df2
uuid_00000000000c0df0:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0dba
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0df2:
	mov -96(%RBP),%RSP
	add $-104, %RSP
	jmp uuid_00000000000c0df5
uuid_00000000000c0df3:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0db9
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0df5:
	mov -80(%RBP),%RSP
	add $-88, %RSP
	jmp uuid_00000000000c0df8
uuid_00000000000c0df6:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0d80
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0df8:
	mov -64(%RBP),%RSP
	add $-72, %RSP
	mov -8(%RBP), %RAX
	mov $16, %R14
	mov $0, %RDX
	div %R14
	movq %RAX, -8(%rbp)
	mov -48(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -48(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000c0df9
uuid_00000000000c0dfb:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
has_SB_prefix_CL_ArrowU64ConsStringString:
	pushq $1
uuid_00000000000c0e03:
	mov -16(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c0e04
	jmp uuid_00000000000c0e05
uuid_00000000000c0e04:
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c0e00
	movq $0, -32(%rbp)
	movq $uuid_00000000000c0dfc, -16(%rbp)
	jmp uuid_00000000000c0e02
uuid_00000000000c0e00:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov -16(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	mov -48(%RBP), %AL
	mov -56(%RBP), %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0dfd
	movq $0, -32(%rbp)
	movq $uuid_00000000000c0dfc, -16(%rbp)
	jmp uuid_00000000000c0dff
uuid_00000000000c0dfd:
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	mov -16(%RBP), %RAX
	inc %RAX
	movq %RAX, -16(%rbp)
uuid_00000000000c0dff:
	mov -64(%RBP),%RSP
	add $-64, %RSP
uuid_00000000000c0e02:
	mov -40(%RBP),%RSP
	add $-64, %RSP
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c0e03
uuid_00000000000c0e05:
	mov -32(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
remove_SB_prefix_CL_ArrowStringConsStringString:
	push %RBP
#call function has-prefix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call has_SB_prefix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0e09
	jmp uuid_00000000000c0e0b
uuid_00000000000c0e09:
uuid_00000000000c0e06:
	mov -16(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c0e07
	jmp uuid_00000000000c0e08
uuid_00000000000c0e07:
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	mov -16(%RBP), %RAX
	inc %RAX
	movq %RAX, -16(%rbp)
	jmp uuid_00000000000c0e06
uuid_00000000000c0e08:
uuid_00000000000c0e0b:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -8(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
replace_CL_ArrowStringConsStringConsStringString:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000c0e0f:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c0e10
	jmp uuid_00000000000c0e11
uuid_00000000000c0e10:
	push %RBP
#call function has-prefix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call has_SB_prefix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0e0c
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c0e0e
uuid_00000000000c0e0c:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -24(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function remove-prefix : Arrow<Cons<String,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call remove_SB_prefix_CL_ArrowStringConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -8(%rbp)
uuid_00000000000c0e0e:
	mov -64(%RBP),%RSP
	add $-64, %RSP
	add $8, %RSP
	jmp uuid_00000000000c0e0f
uuid_00000000000c0e11:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
has_SB_suffix_CL_ArrowU64ConsStringString:
	pushq $0
uuid_00000000000c0e15:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c0e16
	jmp uuid_00000000000c0e17
uuid_00000000000c0e16:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0e12
	jmp uuid_00000000000c0e14
uuid_00000000000c0e12:
	movq $1, -32(%rbp)
uuid_00000000000c0e14:
	mov -40(%RBP),%RSP
	add $-40, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %RSP
	jmp uuid_00000000000c0e15
uuid_00000000000c0e17:
	mov -32(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
remove_SB_suffix_CL_ArrowStringConsStringString:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000c0e1b:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c0e1c
	jmp uuid_00000000000c0e1d
uuid_00000000000c0e1c:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0e18
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	jmp uuid_00000000000c0e1a
uuid_00000000000c0e18:
	movq $uuid_00000000000c0d80, -8(%rbp)
uuid_00000000000c0e1a:
	mov -56(%RBP),%RSP
	add $-56, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %RSP
	jmp uuid_00000000000c0e1b
uuid_00000000000c0e1d:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
deep_SB_hash_CL_ArrowU64String:
	pushq $0
	pushq $0
uuid_00000000000c0e1e:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c0e1f
	jmp uuid_00000000000c0e20
uuid_00000000000c0e1f:
	mov $0, %R14
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov -40(%rbp), %R14B
	mov %R14, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	mov -32(%RBP),%RAX
	shl $10,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%RBP),%RAX
	shr $6,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	xorq %R14,%RAX
	movq %RAX, -32(%rbp)
	add $8, %rsp
	jmp uuid_00000000000c0e1e
uuid_00000000000c0e20:
	mov -32(%RBP),%RAX
	shl $3,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%RBP),%RAX
	shr $11,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	xorq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%RBP),%RAX
	shl $15,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_ML__CL_ArrowStringConsU64String:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000c0e21:
	mov -16(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e22
	jmp uuid_00000000000c0e23
uuid_00000000000c0e22:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	pushq -8(%rbp)
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	mov -16(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -16(%rbp)
	jmp uuid_00000000000c0e21
uuid_00000000000c0e23:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
not_CL_ArrowU64U64:
	pushq $0
	push %RBP
	mov -8(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e24
	jmp uuid_00000000000c0e26
uuid_00000000000c0e24:
	movq $1, -24(%rbp)
uuid_00000000000c0e26:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
not_CL_ArrowU64U8:
	pushq $0
	push %RBP
	mov -8(%RBP), %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e27
	jmp uuid_00000000000c0e29
uuid_00000000000c0e27:
	movq $1, -24(%rbp)
uuid_00000000000c0e29:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_DT_block_SB_size_CL_ArrowU64Array_QM_MallocBlock:
	mov -8(%RBP), %R15
	add $0, %R15
	mov 0(%R15), %R15
	push %R15
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_DT_block_SB_prev_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock:
	mov -8(%RBP), %R15
	add $8, %R15
	mov 0(%R15), %R15
	push %R15
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_DT_block_SB_next_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock:
	mov -8(%RBP), %R15
	add $16, %R15
	mov 0(%R15), %R15
	push %R15
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_DT_block_SB_data_CL_ArrowArray_QM__QM_Array_QM_MallocBlock:
	mov -8(%RBP), %RAX
	mov $24, %R14
	addq %R14,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
set_DT_block_SB_size_CL_ArrowNilConsU64Array_QM_MallocBlock:
	mov -16(%RBP), %R14
	mov -8(%RBP), %R15
	mov %R14, 0(%R15)
	mov %rbp, %rsp
	sub $24, %rsp
	ret
set_DT_block_SB_prev_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock:
	mov -16(%RBP), %R14
	mov -8(%RBP), %R15
	mov %R14, 8(%R15)
	mov %rbp, %rsp
	sub $24, %rsp
	ret
set_DT_block_SB_next_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock:
	mov -16(%RBP), %R14
	mov -8(%RBP), %R15
	mov %R14, 16(%R15)
	mov %rbp, %rsp
	sub $24, %rsp
	ret
malloc_SB_new_SB_page_CL_ArrowNilNil:
	mov $12, %RAX
	mov $0, %RDI
	syscall
	mov	%RAX, %R8
	movq %R8, %r15
	movq $malloc_SB_block_SB_head_CL_U64, %r14
	movq %r15, 0(%r14)
	movq %R8, %r15
	movq $malloc_SB_block_SB_tail_CL_U64, %r14
	movq %r15, 0(%r14)
	addq $1073741824, %R8
	addq $1073741824, %R8
	addq $1073741824, %R8
	addq $1073741824, %R8
	addq $1073741824, %R8
	addq $1073741824, %R8
	addq $1073741824, %R8
	addq $1073741824, %R8
	mov $12, %RAX
	mov	%R8, %RDI
	syscall
	movq %R8, %r15
	movq $malloc_SB_page_SB_tail_CL_U64, %r14
	movq %r15, 0(%r14)
	mov %rbp, %rsp
	sub $8, %rsp
	ret
realloc_CL_ArrowArray_QM__QM_ConsU64Array_QM__QM_:
	mov -8(%RBP), %RAX
	mov $24, %R14
	subq %R14,%RAX
	push %RAX
#call function .block-size : Arrow<Array<MallocBlock,?>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_size_CL_ArrowU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -16(%RBP), %RAX
	subq %R14,%RAX
	push %RAX
	push %RBP
#call function .free-space : Arrow<Array<MallocBlock,?>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_free_SB_space_CL_ArrowU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -40(%RBP), %RAX
	cmp %R14,%RAX
	setle %AL
	andq $1,%RAX
	push %RAX
#call function .block-size : Arrow<Array<MallocBlock,?>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_size_CL_ArrowU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e30
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -56(%RBP), %RAX
	mov $24, %R14
	subq %R14,%RAX
	push %RAX
	pushq $0
uuid_00000000000c0e2d:
	mov -72(%RBP), %RAX
	mov -16(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e2e
	jmp uuid_00000000000c0e2f
uuid_00000000000c0e2e:
#call function .block-data : Arrow<Array<MallocBlock,?>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_data_CL_ArrowArray_QM__QM_Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function .block-data : Arrow<Array<MallocBlock,?>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_data_CL_ArrowArray_QM__QM_Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %R15B, %R14B
	mov -72(%RBP), %R13
	mov -80(%RBP), %R15
	add %R13, %R15
	mov %R14B, 0(%R15)
	mov -72(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -72(%rbp)
	add $8, %rsp
	add $8, %rsp
	jmp uuid_00000000000c0e2d
uuid_00000000000c0e2f:
#call function free : Arrow<Array<?,?>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function .block-data : Arrow<Array<MallocBlock,?>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_data_CL_ArrowArray_QM__QM_Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call free_CL_ArrowNilArray_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -64(%rbp), %r15
	movq %r15, -32(%rbp)
	mov -64(%rbp), %r15
	mov %r15, -32(%rbp)
	jmp uuid_00000000000c0e32
uuid_00000000000c0e30:
#call function set.block-size : Arrow<Cons<Array<MallocBlock,?>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_size_CL_ArrowNilConsU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
	mov -40(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e2a
	jmp uuid_00000000000c0e2c
uuid_00000000000c0e2a:
	mov $malloc_SB_block_SB_tail_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov -40(%RBP), %R14
	addq %R14,%RAX
	movq %RAX, %r15
	movq $malloc_SB_block_SB_tail_CL_U64, %r14
	movq %r15, 0(%r14)
uuid_00000000000c0e2c:
	mov -56(%RBP),%RSP
	add $-56, %RSP
uuid_00000000000c0e32:
	mov -48(%RBP),%RSP
	add $-56, %RSP
#call function .block-data : Arrow<Array<MallocBlock,?>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_data_CL_ArrowArray_QM__QM_Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
_DT_free_SB_space_CL_ArrowU64Array_QM_MallocBlock:
	pushq $0
	push %RBP
#call function .block-next : Arrow<Array<MallocBlock,?>,Array<MallocBlock,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_next_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e33
#call function .block-size : Arrow<Array<MallocBlock,?>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_size_CL_ArrowU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov $24, %RAX
	addq %R14,%RAX
	mov %RAX, %R14
	mov -8(%RBP), %RAX
	addq %R14,%RAX
	push %RAX
#call function .block-next : Arrow<Array<MallocBlock,?>,Array<MallocBlock,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_next_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	subq %R14,%RAX
	movq %RAX, -24(%rbp)
	jmp uuid_00000000000c0e35
uuid_00000000000c0e33:
	movq $1073741824, -24(%rbp)
uuid_00000000000c0e35:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
free_CL_ArrowNilArray_QM__QM_:
	mov -8(%RBP), %RAX
	mov $24, %R14
	subq %R14,%RAX
	push %RAX
#call function .block-prev : Arrow<Array<MallocBlock,?>,Array<MallocBlock,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_prev_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function .block-next : Arrow<Array<MallocBlock,?>,Array<MallocBlock,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_next_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -32(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e36
	jmp uuid_00000000000c0e38
uuid_00000000000c0e36:
#call function set.block-next : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_next_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c0e38:
	mov -48(%RBP),%RSP
	add $-48, %RSP
	push %RBP
	mov -40(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e39
	jmp uuid_00000000000c0e3b
uuid_00000000000c0e39:
#call function set.block-prev : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_prev_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c0e3b:
	mov -56(%RBP),%RSP
	add $-56, %RSP
	mov %rbp, %rsp
	sub $16, %rsp
	ret
malloc_CL_ArrowArray_QM__QM_U64:
#call function malloc : Arrow<Cons<U64,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -8(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
malloc_CL_ArrowArray_QM__QM_ConsU64U64:
	push %RBP
	mov $malloc_SB_block_SB_head_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e3c
	jmp uuid_00000000000c0e3e
uuid_00000000000c0e3c:
#call function malloc-new-page : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call malloc_SB_new_SB_page_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c0e3e:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov $malloc_SB_first_SB_free_CL_U64, %r15
	pushq 0(%r15)
	push %RBP
	mov -40(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e3f
	jmp uuid_00000000000c0e41
uuid_00000000000c0e3f:
	mov $malloc_SB_block_SB_head_CL_U64, %r14
	movq 0(%r14), %r15
	movq %r15, -40(%rbp)
	mov 0(%r14), %r15
	mov %r15, -40(%rbp)
uuid_00000000000c0e41:
	mov -48(%RBP),%RSP
	add $-48, %RSP
	pushq $0
uuid_00000000000c0e45:
#call function .free-space : Arrow<Array<MallocBlock,?>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _DT_free_SB_space_CL_ArrowU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -16(%RBP), %RAX
	mov $24, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e46
	jmp uuid_00000000000c0e47
uuid_00000000000c0e46:
#call function .block-next : Arrow<Array<MallocBlock,?>,Array<MallocBlock,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_next_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
	mov $malloc_SB_first_SB_free_CL_U64, %r14
	movq -40(%rbp), %r15
	movq %r15, 0(%r14)
	mov -40(%rbp), %r15
	mov %r15, 0(%r14)
	push %RBP
	mov -16(%RBP), %RAX
	mov $malloc_SB_large_SB_size_CL_U64, %R14
	mov 0(%R14), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e42
	mov -56(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
	jmp uuid_00000000000c0e44
uuid_00000000000c0e42:
uuid_00000000000c0e44:
	mov -64(%RBP),%RSP
	add $-64, %RSP
	add $8, %RSP
	jmp uuid_00000000000c0e45
uuid_00000000000c0e47:
	mov $malloc_SB_block_SB_tail_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov $8, %RAX
	mov -64(%RBP), %R14
	subq %R14,%RAX
	mov %RAX, %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov $malloc_SB_block_SB_tail_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov -72(%RBP), %R14
	addq %R14,%RAX
	movq %RAX, %r15
	movq $malloc_SB_block_SB_tail_CL_U64, %r14
	movq %r15, 0(%r14)
	mov $malloc_SB_block_SB_tail_CL_U64, %r15
	pushq 0(%r15)
	mov -80(%RBP), %RAX
	mov $24, %R14
	addq %R14,%RAX
	push %RAX
	mov -88(%RBP), %RAX
	mov -8(%RBP), %R14
	addq %R14,%RAX
	movq %RAX, %r15
	movq $malloc_SB_block_SB_tail_CL_U64, %r14
	movq %r15, 0(%r14)
#call function .block-next : Arrow<Array<MallocBlock,?>,Array<MallocBlock,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_next_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -96(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e48
	jmp uuid_00000000000c0e4a
uuid_00000000000c0e48:
#call function set.block-prev : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_prev_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c0e4a:
	mov -104(%RBP),%RSP
	add $-104, %RSP
#call function set.block-next : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_next_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function set.block-size : Arrow<Cons<Array<MallocBlock,?>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -8(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_size_CL_ArrowNilConsU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function set.block-next : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $0
	mov %RBX, %RBP
	call set_DT_block_SB_next_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
	mov -80(%RBP), %RAX
	mov -40(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e4b
#call function set.block-prev : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_prev_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0e4d
uuid_00000000000c0e4b:
#call function set.block-prev : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $0
	mov %RBX, %RBP
	call set_DT_block_SB_prev_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c0e4d:
	mov -112(%RBP),%RSP
	add $-112, %RSP
	mov -88(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_:
	pushq $0
uuid_00000000000c0e4e:
	mov -40(%RBP), %RAX
	mov -24(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e4f
	jmp uuid_00000000000c0e50
uuid_00000000000c0e4f:
	mov -16(%RBP), %R14B
	mov -40(%RBP), %R13
	mov -8(%RBP), %R15
	add %R13, %R15
	movb %R14B, 0(%R15)
	mov -40(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
	jmp uuid_00000000000c0e4e
uuid_00000000000c0e50:
	mov -8(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
non_SB_zero_CL_ArrowU64Type:
	mov $3, %RAX
	push %RAX
	mov -24(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
non_SB_zero_CL_ArrowU64AST:
	mov $10, %RAX
	push %RAX
	mov -72(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
non_SB_zero_CL_ArrowU64FragmentKV:
	mov $1, %RAX
	push %RAX
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
non_SB_zero_CL_ArrowU64FragmentList:
	mov $1, %RAX
	push %RAX
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
non_SB_zero_CL_ArrowU64Context:
	mov $2, %RAX
	push %RAX
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $104, %rsp
	ret
non_SB_zero_CL_ArrowU64TContext:
	mov $2, %RAX
	push %RAX
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $128, %rsp
	ret
non_SB_zero_CL_ArrowU64FContext:
	mov $1, %RAX
	push %RAX
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $208, %rsp
	ret
non_SB_zero_CL_ArrowU64STypeList:
	mov $1, %RAX
	push %RAX
	mov -64(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $72, %rsp
	ret
non_SB_zero_CL_ArrowU64StringTypeList:
	mov $1, %RAX
	push %RAX
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
non_SB_zero_CL_ArrowU64StringList:
	mov $1, %RAX
	push %RAX
	mov -24(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
non_SB_zero_CL_ArrowU64StringU64List:
	mov $1, %RAX
	push %RAX
	mov -32(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
non_SB_zero_CL_ArrowU64StringStringList:
	mov $1, %RAX
	push %RAX
	mov -32(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
non_SB_zero_CL_ArrowU64StringSList:
	mov $1, %RAX
	push %RAX
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
non_SB_zero_CL_ArrowU64MacroList:
	mov $1, %RAX
	push %RAX
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
non_SB_zero_CL_ArrowU64SfxList:
	mov $1, %RAX
	push %RAX
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
mangle_SB_identifier_CL_ArrowSString:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000c0eb6:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c0eb7
	jmp uuid_00000000000c0eb8
uuid_00000000000c0eb7:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -48(%rbp)
	mov -64(%RBP), %AL
	mov $33, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0eb3
	push %RBP
	pushq -48(%rbp)
	mov -80(%RBP), %AL
	mov $36, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0eb0
	push %RBP
	pushq -48(%rbp)
	mov -96(%RBP), %AL
	mov $37, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ead
	push %RBP
	pushq -48(%rbp)
	mov -112(%RBP), %AL
	mov $38, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0eaa
	push %RBP
	pushq -48(%rbp)
	mov -128(%RBP), %AL
	mov $42, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ea7
	push %RBP
	pushq -48(%rbp)
	mov -144(%RBP), %AL
	mov $43, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ea4
	push %RBP
	pushq -48(%rbp)
	mov -160(%RBP), %AL
	mov $45, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ea1
	push %RBP
	pushq -48(%rbp)
	mov -176(%RBP), %AL
	mov $46, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e9e
	push %RBP
	pushq -48(%rbp)
	mov -192(%RBP), %AL
	mov $47, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e9b
	push %RBP
	pushq -48(%rbp)
	mov -208(%RBP), %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e98
	push %RBP
	pushq -48(%rbp)
	mov -224(%RBP), %AL
	mov $59, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e95
	push %RBP
	pushq -48(%rbp)
	mov -240(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e92
	push %RBP
	pushq -48(%rbp)
	mov -256(%RBP), %AL
	mov $61, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e8f
	push %RBP
	pushq -48(%rbp)
	mov -272(%RBP), %AL
	mov $62, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e8c
	push %RBP
	pushq -48(%rbp)
	mov -288(%RBP), %AL
	mov $63, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e89
	push %RBP
	pushq -48(%rbp)
	mov -304(%RBP), %AL
	mov $64, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e86
	push %RBP
	pushq -48(%rbp)
	mov -320(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e83
	push %RBP
	pushq -48(%rbp)
	mov -336(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e80
	push %RBP
	pushq -48(%rbp)
	mov -352(%RBP), %AL
	mov $94, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e7d
	push %RBP
	pushq -48(%rbp)
	mov -368(%RBP), %AL
	mov $95, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e7a
	push %RBP
	pushq -48(%rbp)
	mov -384(%RBP), %AL
	mov $96, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e77
	push %RBP
	pushq -48(%rbp)
	mov -400(%RBP), %AL
	mov $124, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e74
	push %RBP
	pushq -48(%rbp)
	mov -416(%RBP), %AL
	mov $126, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e71
	push %RBP
	pushq -48(%rbp)
	jmp uuid_00000000000c0e6e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c0e6d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0e70
uuid_00000000000c0e6e:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -432(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0e70:
	mov -424(%RBP),%RSP
	add $-432, %RSP
	jmp uuid_00000000000c0e73
uuid_00000000000c0e71:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0e6c
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0e73:
	mov -408(%RBP),%RSP
	add $-416, %RSP
	jmp uuid_00000000000c0e76
uuid_00000000000c0e74:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0e6b
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0e76:
	mov -392(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000c0e79
uuid_00000000000c0e77:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0e6a
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0e79:
	mov -376(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000c0e7c
uuid_00000000000c0e7a:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0e69
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0e7c:
	mov -360(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000c0e7f
uuid_00000000000c0e7d:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0e68
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0e7f:
	mov -344(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000c0e82
uuid_00000000000c0e80:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0e67
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0e82:
	mov -328(%RBP),%RSP
	add $-336, %RSP
	jmp uuid_00000000000c0e85
uuid_00000000000c0e83:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0e66
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0e85:
	mov -312(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000c0e88
uuid_00000000000c0e86:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0e65
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0e88:
	mov -296(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000c0e8b
uuid_00000000000c0e89:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0e64
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0e8b:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000c0e8e
uuid_00000000000c0e8c:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0e63
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0e8e:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000c0e91
uuid_00000000000c0e8f:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0e62
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0e91:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c0e94
uuid_00000000000c0e92:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0e61
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0e94:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c0e97
uuid_00000000000c0e95:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0e60
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0e97:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000c0e9a
uuid_00000000000c0e98:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0e5f
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0e9a:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000c0e9d
uuid_00000000000c0e9b:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0e5e
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0e9d:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000c0ea0
uuid_00000000000c0e9e:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0e5d
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0ea0:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000c0ea3
uuid_00000000000c0ea1:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0e5c
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0ea3:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000c0ea6
uuid_00000000000c0ea4:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0e5b
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0ea6:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c0ea9
uuid_00000000000c0ea7:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0e5a
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0ea9:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000c0eac
uuid_00000000000c0eaa:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0e59
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0eac:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000c0eaf
uuid_00000000000c0ead:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0e58
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0eaf:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000c0eb2
uuid_00000000000c0eb0:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0e57
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0eb2:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000c0eb5
uuid_00000000000c0eb3:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0e56
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0eb5:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000c0eb6
uuid_00000000000c0eb8:
	subq $24, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
mangle_SB_identifier_CL_ArrowSType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0eec
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ebd
	jmp uuid_00000000000c0ebf
uuid_00000000000c0ebd:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0eba
	jmp uuid_00000000000c0ebc
uuid_00000000000c0eba:
	movb $1, -152(%rbp)
uuid_00000000000c0ebc:
	mov -168(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c0ebf:
	mov -160(%RBP),%RSP
	add $-176, %RSP
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ee9
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ec6
	jmp uuid_00000000000c0ec8
uuid_00000000000c0ec6:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0ec3
	jmp uuid_00000000000c0ec5
uuid_00000000000c0ec3:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0ec0
	jmp uuid_00000000000c0ec2
uuid_00000000000c0ec0:
	movb $1, -216(%rbp)
uuid_00000000000c0ec2:
	mov -280(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c0ec5:
	mov -232(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c0ec8:
	mov -224(%RBP),%RSP
	add $-288, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ee6
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -320(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0edf
	jmp uuid_00000000000c0ee1
uuid_00000000000c0edf:
	push %RBP
	mov -312(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0edc
	jmp uuid_00000000000c0ede
uuid_00000000000c0edc:
	push %RBP
	mov -304(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0ed9
	jmp uuid_00000000000c0edb
uuid_00000000000c0ed9:
	movb $1, -328(%rbp)
uuid_00000000000c0edb:
	mov -376(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000c0ede:
	mov -344(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000c0ee1:
	mov -336(%RBP),%RSP
	add $-400, %RSP
	mov -328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ee3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c0ee2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0ee5
uuid_00000000000c0ee3:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-identifier : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-identifier : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c0ee5:
	mov -296(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000c0ee8
uuid_00000000000c0ee6:
#call function mangle-identifier : Arrow<String,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c0ed6:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0ed7
	jmp uuid_00000000000c0ed8
uuid_00000000000c0ed7:
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ecf
	jmp uuid_00000000000c0ed1
uuid_00000000000c0ecf:
	push %RBP
	mov -368(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0ecc
	jmp uuid_00000000000c0ece
uuid_00000000000c0ecc:
	push %RBP
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	jmp uuid_00000000000c0ec9
	jmp uuid_00000000000c0ecb
uuid_00000000000c0ec9:
	movb $1, -384(%rbp)
uuid_00000000000c0ecb:
	mov -448(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000c0ece:
	mov -400(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000c0ed1:
	mov -392(%RBP),%RSP
	add $-472, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ed3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c0ed2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0ed5
uuid_00000000000c0ed3:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-identifier : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	movq -440(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -408(%rbp), %r15
	movq %r15, -240(%rbp)
uuid_00000000000c0ed5:
	mov -336(%RBP),%RSP
	add $-472, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c0ed6
uuid_00000000000c0ed8:
uuid_00000000000c0ee8:
	mov -184(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000c0eeb
uuid_00000000000c0ee9:
#call function mangle-identifier : Arrow<String,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c0eeb:
	mov -120(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000c0eee
uuid_00000000000c0eec:
#call function mangle-identifier : Arrow<String,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0eb9
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c0eee:
	mov -88(%RBP),%RSP
	add $-112, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
mangle_SB_identifier_CL_ArrowStringConsTypeString:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-identifier : Arrow<String,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0e5f
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-identifier : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
escape_SB_string_CL_ArrowStringString:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000c0f14:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c0f15
	jmp uuid_00000000000c0f16
uuid_00000000000c0f15:
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $92, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f11
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c0f13
uuid_00000000000c0f11:
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -56(%rbp)
	mov -72(%RBP), %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f0e
	push %RBP
	pushq -56(%rbp)
	mov -88(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f0b
	push %RBP
	pushq -56(%rbp)
	mov -104(%RBP), %AL
	mov $92, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f08
	push %RBP
	pushq -56(%rbp)
	mov -120(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f05
	push %RBP
	pushq -56(%rbp)
	mov -136(%RBP), %AL
	mov $96, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f02
	push %RBP
	pushq -56(%rbp)
	mov -152(%RBP), %AL
	mov $110, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0eff
	push %RBP
	pushq -56(%rbp)
	mov -168(%RBP), %AL
	mov $111, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0efc
	push %RBP
	pushq -56(%rbp)
	mov -184(%RBP), %AL
	mov $116, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ef9
	push %RBP
	pushq -56(%rbp)
	mov -200(%RBP), %AL
	mov $115, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ef6
	push %RBP
	pushq -56(%rbp)
	jmp uuid_00000000000c0ef3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c0ef2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0ef5
uuid_00000000000c0ef3:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0ef0
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<U8,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function fail : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0ef1
	mov %RBX, %RBP
	call fail_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c0ef5:
	mov -208(%RBP),%RSP
	add $-216, %RSP
	jmp uuid_00000000000c0ef8
uuid_00000000000c0ef6:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $32
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0ef8:
	mov -192(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000c0efb
uuid_00000000000c0ef9:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $9
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0efb:
	mov -176(%RBP),%RSP
	add $-184, %RSP
	jmp uuid_00000000000c0efe
uuid_00000000000c0efc:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $35
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0efe:
	mov -160(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000c0f01
uuid_00000000000c0eff:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $10
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0f01:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000c0f04
uuid_00000000000c0f02:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $39
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0f04:
	mov -128(%RBP),%RSP
	add $-136, %RSP
	jmp uuid_00000000000c0f07
uuid_00000000000c0f05:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $41
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0f07:
	mov -112(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000c0f0a
uuid_00000000000c0f08:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0eef
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0f0a:
	mov -96(%RBP),%RSP
	add $-104, %RSP
	jmp uuid_00000000000c0f0d
uuid_00000000000c0f0b:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $40
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0f0d:
	mov -80(%RBP),%RSP
	add $-88, %RSP
	jmp uuid_00000000000c0f10
uuid_00000000000c0f0e:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $59
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0f10:
	mov -64(%RBP),%RSP
	add $-72, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
uuid_00000000000c0f13:
	mov -48(%RBP),%RSP
	add $-72, %RSP
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c0f14
uuid_00000000000c0f16:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
escape_SB_literal_CL_ArrowStringString:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000c0f53:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c0f54
	jmp uuid_00000000000c0f55
uuid_00000000000c0f54:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -48(%rbp)
	mov -64(%RBP), %AL
	mov $34, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f50
	push %RBP
	pushq -48(%rbp)
	mov -80(%RBP), %AL
	mov $92, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f4d
	push %RBP
	pushq -48(%rbp)
	mov -96(%RBP), %AL
	mov $10, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f4a
	push %RBP
	pushq -48(%rbp)
	jmp uuid_00000000000c0f47
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c0f46
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0f49
uuid_00000000000c0f47:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0f49:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000c0f4c
uuid_00000000000c0f4a:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0f45
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0f4c:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000c0f4f
uuid_00000000000c0f4d:
	pushq $uuid_00000000000c0dfc
	mov -8(%RBP), %RAX
	inc %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -96(%rbp)
	mov -112(%RBP), %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f3e
	push %RBP
	pushq -96(%rbp)
	mov -128(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f3b
	push %RBP
	pushq -96(%rbp)
	mov -144(%RBP), %AL
	mov $92, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f38
	push %RBP
	pushq -96(%rbp)
	mov -160(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f35
	push %RBP
	pushq -96(%rbp)
	mov -176(%RBP), %AL
	mov $96, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f32
	push %RBP
	pushq -96(%rbp)
	mov -192(%RBP), %AL
	mov $108, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f2f
	push %RBP
	pushq -96(%rbp)
	mov -208(%RBP), %AL
	mov $110, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f2c
	push %RBP
	pushq -96(%rbp)
	mov -224(%RBP), %AL
	mov $111, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f29
	push %RBP
	pushq -96(%rbp)
	mov -240(%RBP), %AL
	mov $115, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f26
	push %RBP
	pushq -96(%rbp)
	mov -256(%RBP), %AL
	mov $116, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f23
	push %RBP
	jmp uuid_00000000000c0f20
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c0f1f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0f22
uuid_00000000000c0f20:
uuid_00000000000c0f22:
	mov -264(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000c0f25
uuid_00000000000c0f23:
	movq $uuid_00000000000c0f1e, -88(%rbp)
uuid_00000000000c0f25:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c0f28
uuid_00000000000c0f26:
	movq $uuid_00000000000c0d2e, -88(%rbp)
uuid_00000000000c0f28:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c0f2b
uuid_00000000000c0f29:
	movq $uuid_00000000000c0f1d, -88(%rbp)
uuid_00000000000c0f2b:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000c0f2e
uuid_00000000000c0f2c:
	movq $uuid_00000000000c0f1c, -88(%rbp)
uuid_00000000000c0f2e:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000c0f31
uuid_00000000000c0f2f:
	movq $uuid_00000000000c0f1b, -88(%rbp)
uuid_00000000000c0f31:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000c0f34
uuid_00000000000c0f32:
	movq $uuid_00000000000c0f1a, -88(%rbp)
uuid_00000000000c0f34:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000c0f37
uuid_00000000000c0f35:
	movq $uuid_00000000000c0d2f, -88(%rbp)
uuid_00000000000c0f37:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000c0f3a
uuid_00000000000c0f38:
	movq $uuid_00000000000c0f19, -88(%rbp)
uuid_00000000000c0f3a:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c0f3d
uuid_00000000000c0f3b:
	movq $uuid_00000000000c0d2d, -88(%rbp)
uuid_00000000000c0f3d:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000c0f40
uuid_00000000000c0f3e:
	movq $uuid_00000000000c0f18, -88(%rbp)
uuid_00000000000c0f40:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	push %RBP
	mov -88(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c0f42
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0f41
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	jmp uuid_00000000000c0f44
uuid_00000000000c0f42:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -88(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
uuid_00000000000c0f44:
	mov -120(%RBP),%RSP
	add $-120, %RSP
uuid_00000000000c0f4f:
	mov -72(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000c0f52
uuid_00000000000c0f50:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0f17
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c0f52:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000c0f53
uuid_00000000000c0f55:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
escape_SB_string_CL_ArrowSS:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f59
	jmp uuid_00000000000c0f5b
uuid_00000000000c0f59:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0f56
	jmp uuid_00000000000c0f58
uuid_00000000000c0f56:
	movb $1, -96(%rbp)
uuid_00000000000c0f58:
	mov -112(%RBP),%RSP
	add $-120, %RSP
uuid_00000000000c0f5b:
	mov -104(%RBP),%RSP
	add $-120, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f6c
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -152(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f62
	jmp uuid_00000000000c0f64
uuid_00000000000c0f62:
	push %RBP
	mov -144(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0f5f
	jmp uuid_00000000000c0f61
uuid_00000000000c0f5f:
	push %RBP
	mov -136(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0f5c
	jmp uuid_00000000000c0f5e
uuid_00000000000c0f5c:
	movb $1, -160(%rbp)
uuid_00000000000c0f5e:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c0f61:
	mov -176(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c0f64:
	mov -168(%RBP),%RSP
	add $-232, %RSP
	mov -160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f69
	push %RBP
	jmp uuid_00000000000c0f66
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c0f65
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0f68
uuid_00000000000c0f66:
uuid_00000000000c0f68:
	mov -240(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c0f6b
uuid_00000000000c0f69:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function escape-string : Arrow<S,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call escape_SB_string_CL_ArrowSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function escape-string : Arrow<S,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call escape_SB_string_CL_ArrowSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c0f6b:
	mov -128(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000c0f6e
uuid_00000000000c0f6c:
	pushq $0
#call function escape-string : Arrow<String,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	mov %RBX, %RBP
	call escape_SB_string_CL_ArrowStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c0f6e:
	mov -64(%RBP),%RSP
	add $-120, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
exit_SB_error_CL_ArrowNilConsASTString:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<SourceLocation,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f8e
	jmp uuid_00000000000c0f90
uuid_00000000000c0f8e:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f7b
	jmp uuid_00000000000c0f7d
uuid_00000000000c0f7b:
	push %RBP
	mov -328(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -432(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f72
	jmp uuid_00000000000c0f74
uuid_00000000000c0f72:
	push %RBP
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	jmp uuid_00000000000c0f6f
	jmp uuid_00000000000c0f71
uuid_00000000000c0f6f:
	movb $1, -440(%rbp)
uuid_00000000000c0f71:
	mov -456(%RBP),%RSP
	add $-480, %RSP
uuid_00000000000c0f74:
	mov -448(%RBP),%RSP
	add $-480, %RSP
	mov -440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f78
	jmp uuid_00000000000c0f7a
uuid_00000000000c0f78:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0f75
	jmp uuid_00000000000c0f77
uuid_00000000000c0f75:
	movb $1, -344(%rbp)
uuid_00000000000c0f77:
	mov -488(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c0f7a:
	mov -360(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c0f7d:
	mov -352(%RBP),%RSP
	add $-560, %RSP
	mov -344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f8b
	jmp uuid_00000000000c0f8d
uuid_00000000000c0f8b:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -640(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f85
	jmp uuid_00000000000c0f87
uuid_00000000000c0f85:
	push %RBP
	jmp uuid_00000000000c0f82
	jmp uuid_00000000000c0f84
uuid_00000000000c0f82:
	push %RBP
	mov -576(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq $uuid_00000000000c0f7e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0f7f
	jmp uuid_00000000000c0f81
uuid_00000000000c0f7f:
	movb $1, -648(%rbp)
uuid_00000000000c0f81:
	mov -672(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000c0f84:
	mov -664(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000c0f87:
	mov -656(%RBP),%RSP
	add $-680, %RSP
	mov -648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f88
	jmp uuid_00000000000c0f8a
uuid_00000000000c0f88:
	movb $1, -248(%rbp)
uuid_00000000000c0f8a:
	mov -568(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000c0f8d:
	mov -264(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000c0f90:
	mov -256(%RBP),%RSP
	add $-680, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fa6
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f9a
	jmp uuid_00000000000c0f9c
uuid_00000000000c0f9a:
	push %RBP
	mov -752(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0f97
	jmp uuid_00000000000c0f99
uuid_00000000000c0f97:
	push %RBP
	mov -744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0f94
	jmp uuid_00000000000c0f96
uuid_00000000000c0f94:
	movb $1, -768(%rbp)
uuid_00000000000c0f96:
	mov -864(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c0f99:
	mov -784(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c0f9c:
	mov -776(%RBP),%RSP
	add $-936, %RSP
	mov -768(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fa3
	push %RBP
	jmp uuid_00000000000c0fa0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c0f9f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0fa2
uuid_00000000000c0fa0:
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c0fa2:
	mov -944(%RBP),%RSP
	add $-944, %RSP
	jmp uuid_00000000000c0fa5
uuid_00000000000c0fa3:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0f9d
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0f92
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0f92
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0f9e
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c0fa5:
	mov -688(%RBP),%RSP
	add $-936, %RSP
	jmp uuid_00000000000c0fa8
uuid_00000000000c0fa6:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0f91
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0f92
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0f93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c0fa8:
	mov -168(%RBP),%RSP
	add $-680, %RSP
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
is_SB_variable_CL_ArrowU64String:
	pushq $0
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -32(%rbp)
	mov -48(%RBP), %AL
	mov $33, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1044
	push %RBP
	pushq -32(%rbp)
	mov -64(%RBP), %AL
	mov $36, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1041
	push %RBP
	pushq -32(%rbp)
	mov -80(%RBP), %AL
	mov $37, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c103e
	push %RBP
	pushq -32(%rbp)
	mov -96(%RBP), %AL
	mov $38, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c103b
	push %RBP
	pushq -32(%rbp)
	mov -112(%RBP), %AL
	mov $42, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1038
	push %RBP
	pushq -32(%rbp)
	mov -128(%RBP), %AL
	mov $43, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1035
	push %RBP
	pushq -32(%rbp)
	mov -144(%RBP), %AL
	mov $45, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1032
	push %RBP
	pushq -32(%rbp)
	mov -160(%RBP), %AL
	mov $46, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c102f
	push %RBP
	pushq -32(%rbp)
	mov -176(%RBP), %AL
	mov $47, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c102c
	push %RBP
	pushq -32(%rbp)
	mov -192(%RBP), %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1029
	push %RBP
	pushq -32(%rbp)
	mov -208(%RBP), %AL
	mov $59, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1026
	push %RBP
	pushq -32(%rbp)
	mov -224(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1023
	push %RBP
	pushq -32(%rbp)
	mov -240(%RBP), %AL
	mov $61, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1020
	push %RBP
	pushq -32(%rbp)
	mov -256(%RBP), %AL
	mov $62, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c101d
	push %RBP
	pushq -32(%rbp)
	mov -272(%RBP), %AL
	mov $63, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c101a
	push %RBP
	pushq -32(%rbp)
	mov -288(%RBP), %AL
	mov $64, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1017
	push %RBP
	pushq -32(%rbp)
	mov -304(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1014
	push %RBP
	pushq -32(%rbp)
	mov -320(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1011
	push %RBP
	pushq -32(%rbp)
	mov -336(%RBP), %AL
	mov $94, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c100e
	push %RBP
	pushq -32(%rbp)
	mov -352(%RBP), %AL
	mov $95, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c100b
	push %RBP
	pushq -32(%rbp)
	mov -368(%RBP), %AL
	mov $97, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1008
	push %RBP
	pushq -32(%rbp)
	mov -384(%RBP), %AL
	mov $98, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1005
	push %RBP
	pushq -32(%rbp)
	mov -400(%RBP), %AL
	mov $99, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1002
	push %RBP
	pushq -32(%rbp)
	mov -416(%RBP), %AL
	mov $100, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fff
	push %RBP
	pushq -32(%rbp)
	mov -432(%RBP), %AL
	mov $101, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ffc
	push %RBP
	pushq -32(%rbp)
	mov -448(%RBP), %AL
	mov $102, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ff9
	push %RBP
	pushq -32(%rbp)
	mov -464(%RBP), %AL
	mov $103, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ff6
	push %RBP
	pushq -32(%rbp)
	mov -480(%RBP), %AL
	mov $104, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ff3
	push %RBP
	pushq -32(%rbp)
	mov -496(%RBP), %AL
	mov $105, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ff0
	push %RBP
	pushq -32(%rbp)
	mov -512(%RBP), %AL
	mov $106, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fed
	push %RBP
	pushq -32(%rbp)
	mov -528(%RBP), %AL
	mov $107, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fea
	push %RBP
	pushq -32(%rbp)
	mov -544(%RBP), %AL
	mov $108, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fe7
	push %RBP
	pushq -32(%rbp)
	mov -560(%RBP), %AL
	mov $109, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fe4
	push %RBP
	pushq -32(%rbp)
	mov -576(%RBP), %AL
	mov $110, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fe1
	push %RBP
	pushq -32(%rbp)
	mov -592(%RBP), %AL
	mov $111, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fde
	push %RBP
	pushq -32(%rbp)
	mov -608(%RBP), %AL
	mov $112, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fdb
	push %RBP
	pushq -32(%rbp)
	mov -624(%RBP), %AL
	mov $113, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fd8
	push %RBP
	pushq -32(%rbp)
	mov -640(%RBP), %AL
	mov $114, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fd5
	push %RBP
	pushq -32(%rbp)
	mov -656(%RBP), %AL
	mov $115, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fd2
	push %RBP
	pushq -32(%rbp)
	mov -672(%RBP), %AL
	mov $116, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fcf
	push %RBP
	pushq -32(%rbp)
	mov -688(%RBP), %AL
	mov $117, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fcc
	push %RBP
	pushq -32(%rbp)
	mov -704(%RBP), %AL
	mov $118, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fc9
	push %RBP
	pushq -32(%rbp)
	mov -720(%RBP), %AL
	mov $119, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fc6
	push %RBP
	pushq -32(%rbp)
	mov -736(%RBP), %AL
	mov $120, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fc3
	push %RBP
	pushq -32(%rbp)
	mov -752(%RBP), %AL
	mov $121, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fc0
	push %RBP
	pushq -32(%rbp)
	mov -768(%RBP), %AL
	mov $122, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fbd
	push %RBP
	pushq -32(%rbp)
	mov -784(%RBP), %AL
	mov $124, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fba
	push %RBP
	pushq -32(%rbp)
	mov -800(%RBP), %AL
	mov $126, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fb7
	push %RBP
	jmp uuid_00000000000c0fb4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c0fb3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0fb6
uuid_00000000000c0fb4:
uuid_00000000000c0fb6:
	mov -808(%RBP),%RSP
	add $-808, %RSP
	jmp uuid_00000000000c0fb9
uuid_00000000000c0fb7:
	movb $1, -24(%rbp)
uuid_00000000000c0fb9:
	mov -792(%RBP),%RSP
	add $-800, %RSP
	jmp uuid_00000000000c0fbc
uuid_00000000000c0fba:
	movb $1, -24(%rbp)
uuid_00000000000c0fbc:
	mov -776(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000c0fbf
uuid_00000000000c0fbd:
	movb $1, -24(%rbp)
uuid_00000000000c0fbf:
	mov -760(%RBP),%RSP
	add $-768, %RSP
	jmp uuid_00000000000c0fc2
uuid_00000000000c0fc0:
	movb $1, -24(%rbp)
uuid_00000000000c0fc2:
	mov -744(%RBP),%RSP
	add $-752, %RSP
	jmp uuid_00000000000c0fc5
uuid_00000000000c0fc3:
	movb $1, -24(%rbp)
uuid_00000000000c0fc5:
	mov -728(%RBP),%RSP
	add $-736, %RSP
	jmp uuid_00000000000c0fc8
uuid_00000000000c0fc6:
	movb $1, -24(%rbp)
uuid_00000000000c0fc8:
	mov -712(%RBP),%RSP
	add $-720, %RSP
	jmp uuid_00000000000c0fcb
uuid_00000000000c0fc9:
	movb $1, -24(%rbp)
uuid_00000000000c0fcb:
	mov -696(%RBP),%RSP
	add $-704, %RSP
	jmp uuid_00000000000c0fce
uuid_00000000000c0fcc:
	movb $1, -24(%rbp)
uuid_00000000000c0fce:
	mov -680(%RBP),%RSP
	add $-688, %RSP
	jmp uuid_00000000000c0fd1
uuid_00000000000c0fcf:
	movb $1, -24(%rbp)
uuid_00000000000c0fd1:
	mov -664(%RBP),%RSP
	add $-672, %RSP
	jmp uuid_00000000000c0fd4
uuid_00000000000c0fd2:
	movb $1, -24(%rbp)
uuid_00000000000c0fd4:
	mov -648(%RBP),%RSP
	add $-656, %RSP
	jmp uuid_00000000000c0fd7
uuid_00000000000c0fd5:
	movb $1, -24(%rbp)
uuid_00000000000c0fd7:
	mov -632(%RBP),%RSP
	add $-640, %RSP
	jmp uuid_00000000000c0fda
uuid_00000000000c0fd8:
	movb $1, -24(%rbp)
uuid_00000000000c0fda:
	mov -616(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000c0fdd
uuid_00000000000c0fdb:
	movb $1, -24(%rbp)
uuid_00000000000c0fdd:
	mov -600(%RBP),%RSP
	add $-608, %RSP
	jmp uuid_00000000000c0fe0
uuid_00000000000c0fde:
	movb $1, -24(%rbp)
uuid_00000000000c0fe0:
	mov -584(%RBP),%RSP
	add $-592, %RSP
	jmp uuid_00000000000c0fe3
uuid_00000000000c0fe1:
	movb $1, -24(%rbp)
uuid_00000000000c0fe3:
	mov -568(%RBP),%RSP
	add $-576, %RSP
	jmp uuid_00000000000c0fe6
uuid_00000000000c0fe4:
	movb $1, -24(%rbp)
uuid_00000000000c0fe6:
	mov -552(%RBP),%RSP
	add $-560, %RSP
	jmp uuid_00000000000c0fe9
uuid_00000000000c0fe7:
	movb $1, -24(%rbp)
uuid_00000000000c0fe9:
	mov -536(%RBP),%RSP
	add $-544, %RSP
	jmp uuid_00000000000c0fec
uuid_00000000000c0fea:
	movb $1, -24(%rbp)
uuid_00000000000c0fec:
	mov -520(%RBP),%RSP
	add $-528, %RSP
	jmp uuid_00000000000c0fef
uuid_00000000000c0fed:
	movb $1, -24(%rbp)
uuid_00000000000c0fef:
	mov -504(%RBP),%RSP
	add $-512, %RSP
	jmp uuid_00000000000c0ff2
uuid_00000000000c0ff0:
	movb $1, -24(%rbp)
uuid_00000000000c0ff2:
	mov -488(%RBP),%RSP
	add $-496, %RSP
	jmp uuid_00000000000c0ff5
uuid_00000000000c0ff3:
	movb $1, -24(%rbp)
uuid_00000000000c0ff5:
	mov -472(%RBP),%RSP
	add $-480, %RSP
	jmp uuid_00000000000c0ff8
uuid_00000000000c0ff6:
	movb $1, -24(%rbp)
uuid_00000000000c0ff8:
	mov -456(%RBP),%RSP
	add $-464, %RSP
	jmp uuid_00000000000c0ffb
uuid_00000000000c0ff9:
	movb $1, -24(%rbp)
uuid_00000000000c0ffb:
	mov -440(%RBP),%RSP
	add $-448, %RSP
	jmp uuid_00000000000c0ffe
uuid_00000000000c0ffc:
	movb $1, -24(%rbp)
uuid_00000000000c0ffe:
	mov -424(%RBP),%RSP
	add $-432, %RSP
	jmp uuid_00000000000c1001
uuid_00000000000c0fff:
	movb $1, -24(%rbp)
uuid_00000000000c1001:
	mov -408(%RBP),%RSP
	add $-416, %RSP
	jmp uuid_00000000000c1004
uuid_00000000000c1002:
	movb $1, -24(%rbp)
uuid_00000000000c1004:
	mov -392(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000c1007
uuid_00000000000c1005:
	movb $1, -24(%rbp)
uuid_00000000000c1007:
	mov -376(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000c100a
uuid_00000000000c1008:
	movb $1, -24(%rbp)
uuid_00000000000c100a:
	mov -360(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000c100d
uuid_00000000000c100b:
	movb $1, -24(%rbp)
uuid_00000000000c100d:
	mov -344(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000c1010
uuid_00000000000c100e:
	movb $1, -24(%rbp)
uuid_00000000000c1010:
	mov -328(%RBP),%RSP
	add $-336, %RSP
	jmp uuid_00000000000c1013
uuid_00000000000c1011:
	movb $1, -24(%rbp)
uuid_00000000000c1013:
	mov -312(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000c1016
uuid_00000000000c1014:
	movb $1, -24(%rbp)
uuid_00000000000c1016:
	mov -296(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000c1019
uuid_00000000000c1017:
	movb $1, -24(%rbp)
uuid_00000000000c1019:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000c101c
uuid_00000000000c101a:
	movb $1, -24(%rbp)
uuid_00000000000c101c:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000c101f
uuid_00000000000c101d:
	movb $1, -24(%rbp)
uuid_00000000000c101f:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c1022
uuid_00000000000c1020:
	movb $1, -24(%rbp)
uuid_00000000000c1022:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c1025
uuid_00000000000c1023:
	movb $1, -24(%rbp)
uuid_00000000000c1025:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000c1028
uuid_00000000000c1026:
	movb $1, -24(%rbp)
uuid_00000000000c1028:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000c102b
uuid_00000000000c1029:
	push %RBP
	mov -8(%RBP), %RAX
	inc %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fad
	jmp uuid_00000000000c0faf
uuid_00000000000c0fad:
	movb $1, -24(%rbp)
uuid_00000000000c0faf:
	mov -200(%RBP),%RSP
	add $-200, %RSP
	push %RBP
#call function is-variable : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	inc %RAX
	push %RAX
	mov %RBX, %RBP
	call is_SB_variable_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0fb0
	jmp uuid_00000000000c0fb2
uuid_00000000000c0fb0:
	movb $1, -24(%rbp)
uuid_00000000000c0fb2:
	mov -208(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000c102b:
	mov -184(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000c102e
uuid_00000000000c102c:
	movb $1, -24(%rbp)
uuid_00000000000c102e:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000c1031
uuid_00000000000c102f:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq $uuid_00000000000c0fa9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0faa
	movb $1, -24(%rbp)
	jmp uuid_00000000000c0fac
uuid_00000000000c0faa:
uuid_00000000000c0fac:
	mov -168(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c1031:
	mov -152(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000c1034
uuid_00000000000c1032:
	movb $1, -24(%rbp)
uuid_00000000000c1034:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c1037
uuid_00000000000c1035:
	movb $1, -24(%rbp)
uuid_00000000000c1037:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000c103a
uuid_00000000000c1038:
	movb $1, -24(%rbp)
uuid_00000000000c103a:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000c103d
uuid_00000000000c103b:
	movb $1, -24(%rbp)
uuid_00000000000c103d:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000c1040
uuid_00000000000c103e:
	movb $1, -24(%rbp)
uuid_00000000000c1040:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000c1043
uuid_00000000000c1041:
	movb $1, -24(%rbp)
uuid_00000000000c1043:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000c1046
uuid_00000000000c1044:
	movb $1, -24(%rbp)
uuid_00000000000c1046:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq $uuid_00000000000c1047
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1048
	jmp uuid_00000000000c104a
uuid_00000000000c1048:
	movb $0, -24(%rbp)
uuid_00000000000c104a:
	mov -56(%RBP),%RSP
	add $-56, %RSP
	mov -24(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
to_SB_string_CL_ArrowStringIsUsed:
	pushq $uuid_00000000000c0dfc
	pushq -8(%rbp)
	push %RBP
	pushq -32(%rbp)
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c105d
	push %RBP
	pushq -32(%rbp)
	mov -64(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c105a
	push %RBP
	pushq -32(%rbp)
	mov -80(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1057
	push %RBP
	pushq -32(%rbp)
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1054
	push %RBP
	pushq -32(%rbp)
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1051
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c1050
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1053
uuid_00000000000c1051:
	movq $uuid_00000000000c104f, -24(%rbp)
uuid_00000000000c1053:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000c1056
uuid_00000000000c1054:
	movq $uuid_00000000000c104e, -24(%rbp)
uuid_00000000000c1056:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000c1059
uuid_00000000000c1057:
	movq $uuid_00000000000c104d, -24(%rbp)
uuid_00000000000c1059:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000c105c
uuid_00000000000c105a:
	movq $uuid_00000000000c104c, -24(%rbp)
uuid_00000000000c105c:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000c105f
uuid_00000000000c105d:
	movq $uuid_00000000000c104b, -24(%rbp)
uuid_00000000000c105f:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
to_SB_string_CL_ArrowStringType:
#call function to-string-impl : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call to_SB_string_SB_impl_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
to_SB_string_CL_ArrowSListType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c107c
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1068
	jmp uuid_00000000000c106a
uuid_00000000000c1068:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1065
	jmp uuid_00000000000c1067
uuid_00000000000c1065:
	push %RBP
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	jmp uuid_00000000000c1062
	jmp uuid_00000000000c1064
uuid_00000000000c1062:
	movb $1, -216(%rbp)
uuid_00000000000c1064:
	mov -280(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000c1067:
	mov -232(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000c106a:
	mov -224(%RBP),%RSP
	add $-304, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1079
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1071
	jmp uuid_00000000000c1073
uuid_00000000000c1071:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c106e
	jmp uuid_00000000000c1070
uuid_00000000000c106e:
	push %RBP
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	jmp uuid_00000000000c106b
	jmp uuid_00000000000c106d
uuid_00000000000c106b:
	movb $1, -360(%rbp)
uuid_00000000000c106d:
	mov -424(%RBP),%RSP
	add $-448, %RSP
uuid_00000000000c1070:
	mov -376(%RBP),%RSP
	add $-448, %RSP
uuid_00000000000c1073:
	mov -368(%RBP),%RSP
	add $-448, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1076
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c1075
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1078
uuid_00000000000c1076:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<List<Type>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowSListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c1074
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string-impl : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	mov %RBX, %RBP
	call to_SB_string_SB_impl_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c1078:
	mov -312(%RBP),%RSP
	add $-448, %RSP
	jmp uuid_00000000000c107b
uuid_00000000000c1079:
#call function to-string-impl : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call to_SB_string_SB_impl_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c107b:
	mov -168(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000c107e
uuid_00000000000c107c:
uuid_00000000000c107e:
	mov -120(%RBP),%RSP
	add $-160, %RSP
	subq $24, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
to_SB_string_SB_impl_CL_ArrowSType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c10c6
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1082
	jmp uuid_00000000000c1084
uuid_00000000000c1082:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c107f
	jmp uuid_00000000000c1081
uuid_00000000000c107f:
	movb $1, -152(%rbp)
uuid_00000000000c1081:
	mov -168(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c1084:
	mov -160(%RBP),%RSP
	add $-176, %RSP
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c10c3
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c108b
	jmp uuid_00000000000c108d
uuid_00000000000c108b:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1088
	jmp uuid_00000000000c108a
uuid_00000000000c1088:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1085
	jmp uuid_00000000000c1087
uuid_00000000000c1085:
	movb $1, -216(%rbp)
uuid_00000000000c1087:
	mov -264(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c108a:
	mov -232(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c108d:
	mov -224(%RBP),%RSP
	add $-288, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c10c0
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -320(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1095
	jmp uuid_00000000000c1097
uuid_00000000000c1095:
	push %RBP
	mov -312(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1092
	jmp uuid_00000000000c1094
uuid_00000000000c1092:
	push %RBP
	mov -304(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c108f
	jmp uuid_00000000000c1091
uuid_00000000000c108f:
	movb $1, -328(%rbp)
uuid_00000000000c1091:
	mov -392(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000c1094:
	mov -344(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000c1097:
	mov -336(%RBP),%RSP
	add $-400, %RSP
	mov -328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c10bd
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -432(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c10a8
	jmp uuid_00000000000c10aa
uuid_00000000000c10a8:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c109e
	jmp uuid_00000000000c10a0
uuid_00000000000c109e:
	push %RBP
	mov -488(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c109b
	jmp uuid_00000000000c109d
uuid_00000000000c109b:
	push %RBP
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	jmp uuid_00000000000c1098
	jmp uuid_00000000000c109a
uuid_00000000000c1098:
	movb $1, -504(%rbp)
uuid_00000000000c109a:
	mov -568(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c109d:
	mov -520(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c10a0:
	mov -512(%RBP),%RSP
	add $-592, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c10a5
	jmp uuid_00000000000c10a7
uuid_00000000000c10a5:
	push %RBP
	mov -416(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq $uuid_00000000000c10a1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c10a2
	jmp uuid_00000000000c10a4
uuid_00000000000c10a2:
	movb $1, -440(%rbp)
uuid_00000000000c10a4:
	mov -600(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000c10a7:
	mov -456(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000c10aa:
	mov -448(%RBP),%RSP
	add $-608, %RSP
	mov -440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c10ba
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -640(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c10b1
	jmp uuid_00000000000c10b3
uuid_00000000000c10b1:
	push %RBP
	mov -632(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c10ae
	jmp uuid_00000000000c10b0
uuid_00000000000c10ae:
	push %RBP
	mov -624(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c10ab
	jmp uuid_00000000000c10ad
uuid_00000000000c10ab:
	movb $1, -648(%rbp)
uuid_00000000000c10ad:
	mov -712(%RBP),%RSP
	add $-720, %RSP
uuid_00000000000c10b0:
	mov -664(%RBP),%RSP
	add $-720, %RSP
uuid_00000000000c10b3:
	mov -656(%RBP),%RSP
	add $-720, %RSP
	mov -648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c10b7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c10b6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c10b9
uuid_00000000000c10b7:
	pushq $0
	pushq -720(%rbp)
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c10b4
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<List<Type>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowSListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c10b5
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c10b9:
	mov -616(%RBP),%RSP
	add $-720, %RSP
	jmp uuid_00000000000c10bc
uuid_00000000000c10ba:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string-impl : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call to_SB_string_SB_impl_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c10a1
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c10bc:
	mov -408(%RBP),%RSP
	add $-608, %RSP
	jmp uuid_00000000000c10bf
uuid_00000000000c10bd:
	pushq $0
	pushq -400(%rbp)
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c10bf:
	mov -296(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000c10c2
uuid_00000000000c10c0:
#call function to-string-impl : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call to_SB_string_SB_impl_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function to-string-impl : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call to_SB_string_SB_impl_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c108e
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c10c2:
	mov -184(%RBP),%RSP
	add $-336, %RSP
	jmp uuid_00000000000c10c5
uuid_00000000000c10c3:
	pushq $0
	pushq -176(%rbp)
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c10c5:
	mov -120(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000c10c8
uuid_00000000000c10c6:
	pushq $0
	pushq $uuid_00000000000c0eb9
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c10c8:
	mov -88(%RBP),%RSP
	add $-112, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
_EQ__EQ__CL_ArrowU64ConsTypeType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c10cf
	jmp uuid_00000000000c10d1
uuid_00000000000c10cf:
	push %RBP
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c10cc
	jmp uuid_00000000000c10ce
uuid_00000000000c10cc:
	push %RBP
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c10c9
	jmp uuid_00000000000c10cb
uuid_00000000000c10c9:
	movb $1, -192(%rbp)
uuid_00000000000c10cb:
	mov -240(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c10ce:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c10d1:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1136
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c10e4
	jmp uuid_00000000000c10e6
uuid_00000000000c10e4:
	push %RBP
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c10d5
	jmp uuid_00000000000c10d7
uuid_00000000000c10d5:
	push %RBP
	mov -368(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c10d2
	jmp uuid_00000000000c10d4
uuid_00000000000c10d2:
	movb $1, -384(%rbp)
uuid_00000000000c10d4:
	mov -400(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000c10d7:
	mov -392(%RBP),%RSP
	add $-408, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c10e1
	jmp uuid_00000000000c10e3
uuid_00000000000c10e1:
	push %RBP
	pushq -280(%RBP)
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq $0
	push %RBP
	mov -440(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c10db
	jmp uuid_00000000000c10dd
uuid_00000000000c10db:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c10d8
	jmp uuid_00000000000c10da
uuid_00000000000c10d8:
	movb $1, -448(%rbp)
uuid_00000000000c10da:
	mov -464(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000c10dd:
	mov -456(%RBP),%RSP
	add $-472, %RSP
	mov -448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c10de
	jmp uuid_00000000000c10e0
uuid_00000000000c10de:
	movb $1, -336(%rbp)
uuid_00000000000c10e0:
	mov -416(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000c10e3:
	mov -352(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000c10e6:
	mov -344(%RBP),%RSP
	add $-472, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1133
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c10ff
	jmp uuid_00000000000c1101
uuid_00000000000c10ff:
	push %RBP
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq $0
	push %RBP
	mov -584(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c10ed
	jmp uuid_00000000000c10ef
uuid_00000000000c10ed:
	push %RBP
	mov -576(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c10ea
	jmp uuid_00000000000c10ec
uuid_00000000000c10ea:
	push %RBP
	mov -568(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c10e7
	jmp uuid_00000000000c10e9
uuid_00000000000c10e7:
	movb $1, -592(%rbp)
uuid_00000000000c10e9:
	mov -640(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c10ec:
	mov -608(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c10ef:
	mov -600(%RBP),%RSP
	add $-664, %RSP
	mov -592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c10fc
	jmp uuid_00000000000c10fe
uuid_00000000000c10fc:
	push %RBP
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c10f6
	jmp uuid_00000000000c10f8
uuid_00000000000c10f6:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c10f3
	jmp uuid_00000000000c10f5
uuid_00000000000c10f3:
	push %RBP
	mov -680(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c10f0
	jmp uuid_00000000000c10f2
uuid_00000000000c10f0:
	movb $1, -704(%rbp)
uuid_00000000000c10f2:
	mov -752(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c10f5:
	mov -720(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c10f8:
	mov -712(%RBP),%RSP
	add $-776, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c10f9
	jmp uuid_00000000000c10fb
uuid_00000000000c10f9:
	movb $1, -544(%rbp)
uuid_00000000000c10fb:
	mov -672(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c10fe:
	mov -560(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c1101:
	mov -552(%RBP),%RSP
	add $-776, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1130
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -840(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1120
	jmp uuid_00000000000c1122
uuid_00000000000c1120:
	push %RBP
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq $0
	push %RBP
	mov -888(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c110e
	jmp uuid_00000000000c1110
uuid_00000000000c110e:
	push %RBP
	mov -880(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c110b
	jmp uuid_00000000000c110d
uuid_00000000000c110b:
	push %RBP
	mov -872(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1108
	jmp uuid_00000000000c110a
uuid_00000000000c1108:
	movb $1, -896(%rbp)
uuid_00000000000c110a:
	mov -960(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c110d:
	mov -912(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c1110:
	mov -904(%RBP),%RSP
	add $-968, %RSP
	mov -896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c111d
	jmp uuid_00000000000c111f
uuid_00000000000c111d:
	push %RBP
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq $0
	push %RBP
	mov -1000(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1117
	jmp uuid_00000000000c1119
uuid_00000000000c1117:
	push %RBP
	mov -992(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1114
	jmp uuid_00000000000c1116
uuid_00000000000c1114:
	push %RBP
	mov -984(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1111
	jmp uuid_00000000000c1113
uuid_00000000000c1111:
	movb $1, -1008(%rbp)
uuid_00000000000c1113:
	mov -1072(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000c1116:
	mov -1024(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000c1119:
	mov -1016(%RBP),%RSP
	add $-1080, %RSP
	mov -1008(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c111a
	jmp uuid_00000000000c111c
uuid_00000000000c111a:
	movb $1, -848(%rbp)
uuid_00000000000c111c:
	mov -976(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000c111f:
	mov -864(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000c1122:
	mov -856(%RBP),%RSP
	add $-1080, %RSP
	mov -848(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c112d
	push %RBP
	jmp uuid_00000000000c112a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c1129
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c112c
uuid_00000000000c112a:
uuid_00000000000c112c:
	mov -1088(%RBP),%RSP
	add $-1088, %RSP
	jmp uuid_00000000000c112f
uuid_00000000000c112d:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -968(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1126
	jmp uuid_00000000000c1128
uuid_00000000000c1126:
	push %RBP
#call function == : Arrow<Cons<List<Type>,List<Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1123
	jmp uuid_00000000000c1125
uuid_00000000000c1123:
	movq $1, -64(%rbp)
uuid_00000000000c1125:
	mov -1096(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000c1128:
	mov -1088(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000c112f:
	mov -784(%RBP),%RSP
	add $-1096, %RSP
	jmp uuid_00000000000c1132
uuid_00000000000c1130:
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1105
	jmp uuid_00000000000c1107
uuid_00000000000c1105:
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1102
	jmp uuid_00000000000c1104
uuid_00000000000c1102:
	movq $1, -64(%rbp)
uuid_00000000000c1104:
	mov -792(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c1107:
	mov -784(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c1132:
	mov -480(%RBP),%RSP
	add $-792, %RSP
	jmp uuid_00000000000c1135
uuid_00000000000c1133:
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -408(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000c1135:
	mov -272(%RBP),%RSP
	add $-472, %RSP
	jmp uuid_00000000000c1138
uuid_00000000000c1136:
	movq $1, -64(%rbp)
uuid_00000000000c1138:
	mov -128(%RBP),%RSP
	add $-264, %RSP
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
typeof_CL_ArrowTypeAST:
#call function .lookup : Arrow<Cons<Cons<HashtableIs<AST,Type>,AST>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $type_SB_index_CL_HashtableIsTypeAST, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowTypeConsTypeConsASTHashtableIsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
ascript_CL_ArrowNilConsTypeAST:
#call function .bind : Arrow<Cons<Cons<HashtableIs<AST,Type>,AST>,Type>,HashtableIs<AST,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $type_SB_index_CL_HashtableIsTypeAST, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableIsTypeASTConsTypeConsASTHashtableIsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	mov $type_SB_index_CL_HashtableIsTypeAST, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $104, %rsp
	ret
infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c143b
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1438
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1140
	jmp uuid_00000000000c1142
uuid_00000000000c1140:
	push %RBP
	mov -544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c113d
	jmp uuid_00000000000c113f
uuid_00000000000c113d:
	push %RBP
	mov -536(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c113a
	jmp uuid_00000000000c113c
uuid_00000000000c113a:
	movb $1, -560(%rbp)
uuid_00000000000c113c:
	mov -656(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c113f:
	mov -576(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c1142:
	mov -568(%RBP),%RSP
	add $-728, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1435
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -808(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1149
	jmp uuid_00000000000c114b
uuid_00000000000c1149:
	push %RBP
	jmp uuid_00000000000c1146
	jmp uuid_00000000000c1148
uuid_00000000000c1146:
	push %RBP
	jmp uuid_00000000000c1143
	jmp uuid_00000000000c1145
uuid_00000000000c1143:
	movb $1, -816(%rbp)
uuid_00000000000c1145:
	mov -840(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000c1148:
	mov -832(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000c114b:
	mov -824(%RBP),%RSP
	add $-840, %RSP
	mov -816(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1432
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1152
	jmp uuid_00000000000c1154
uuid_00000000000c1152:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c114f
	jmp uuid_00000000000c1151
uuid_00000000000c114f:
	push %RBP
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	jmp uuid_00000000000c114c
	jmp uuid_00000000000c114e
uuid_00000000000c114c:
	movb $1, -928(%rbp)
uuid_00000000000c114e:
	mov -1024(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000c1151:
	mov -944(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000c1154:
	mov -936(%RBP),%RSP
	add $-1080, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c142f
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -1160(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1186
	jmp uuid_00000000000c1188
uuid_00000000000c1186:
	push %RBP
	mov -1152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1256(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1173
	jmp uuid_00000000000c1175
uuid_00000000000c1173:
	push %RBP
	mov -1248(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1352(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1161
	jmp uuid_00000000000c1163
uuid_00000000000c1161:
	push %RBP
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	jmp uuid_00000000000c115e
	jmp uuid_00000000000c1160
uuid_00000000000c115e:
	movb $1, -1360(%rbp)
uuid_00000000000c1160:
	mov -1376(%RBP),%RSP
	add $-1400, %RSP
uuid_00000000000c1163:
	mov -1368(%RBP),%RSP
	add $-1400, %RSP
	mov -1360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1170
	jmp uuid_00000000000c1172
uuid_00000000000c1170:
	push %RBP
	mov -1240(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1480(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c116a
	jmp uuid_00000000000c116c
uuid_00000000000c116a:
	push %RBP
	jmp uuid_00000000000c1167
	jmp uuid_00000000000c1169
uuid_00000000000c1167:
	push %RBP
	jmp uuid_00000000000c1164
	jmp uuid_00000000000c1166
uuid_00000000000c1164:
	movb $1, -1488(%rbp)
uuid_00000000000c1166:
	mov -1512(%RBP),%RSP
	add $-1512, %RSP
uuid_00000000000c1169:
	mov -1504(%RBP),%RSP
	add $-1512, %RSP
uuid_00000000000c116c:
	mov -1496(%RBP),%RSP
	add $-1512, %RSP
	mov -1488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c116d
	jmp uuid_00000000000c116f
uuid_00000000000c116d:
	movb $1, -1264(%rbp)
uuid_00000000000c116f:
	mov -1408(%RBP),%RSP
	add $-1512, %RSP
uuid_00000000000c1172:
	mov -1280(%RBP),%RSP
	add $-1512, %RSP
uuid_00000000000c1175:
	mov -1272(%RBP),%RSP
	add $-1512, %RSP
	mov -1264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1183
	jmp uuid_00000000000c1185
uuid_00000000000c1183:
	push %RBP
	mov -1144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1592(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c117d
	jmp uuid_00000000000c117f
uuid_00000000000c117d:
	push %RBP
	jmp uuid_00000000000c117a
	jmp uuid_00000000000c117c
uuid_00000000000c117a:
	push %RBP
	mov -1528(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1632(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1177
	jmp uuid_00000000000c1179
uuid_00000000000c1177:
	movb $1, -1600(%rbp)
uuid_00000000000c1179:
	mov -1624(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000c117c:
	mov -1616(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000c117f:
	mov -1608(%RBP),%RSP
	add $-1632, %RSP
	mov -1600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1180
	jmp uuid_00000000000c1182
uuid_00000000000c1180:
	movb $1, -1168(%rbp)
uuid_00000000000c1182:
	mov -1520(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000c1185:
	mov -1184(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000c1188:
	mov -1176(%RBP),%RSP
	add $-1632, %RSP
	mov -1168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c142c
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -1712(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c11c3
	jmp uuid_00000000000c11c5
uuid_00000000000c11c3:
	push %RBP
	mov -1704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1808(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c11b1
	jmp uuid_00000000000c11b3
uuid_00000000000c11b1:
	push %RBP
	mov -1800(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1904(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c11a8
	jmp uuid_00000000000c11aa
uuid_00000000000c11a8:
	push %RBP
	pushq -1880(%RBP)
	pushq -1888(%RBP)
	pushq -1896(%RBP)
	jmp uuid_00000000000c11a5
	jmp uuid_00000000000c11a7
uuid_00000000000c11a5:
	movb $1, -1912(%rbp)
uuid_00000000000c11a7:
	mov -1928(%RBP),%RSP
	add $-1952, %RSP
uuid_00000000000c11aa:
	mov -1920(%RBP),%RSP
	add $-1952, %RSP
	mov -1912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c11ae
	jmp uuid_00000000000c11b0
uuid_00000000000c11ae:
	push %RBP
	mov -1792(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c11ab
	jmp uuid_00000000000c11ad
uuid_00000000000c11ab:
	movb $1, -1816(%rbp)
uuid_00000000000c11ad:
	mov -1960(%RBP),%RSP
	add $-2032, %RSP
uuid_00000000000c11b0:
	mov -1832(%RBP),%RSP
	add $-2032, %RSP
uuid_00000000000c11b3:
	mov -1824(%RBP),%RSP
	add $-2032, %RSP
	mov -1816(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c11c0
	jmp uuid_00000000000c11c2
uuid_00000000000c11c0:
	push %RBP
	mov -1696(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2112(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c11ba
	jmp uuid_00000000000c11bc
uuid_00000000000c11ba:
	push %RBP
	jmp uuid_00000000000c11b7
	jmp uuid_00000000000c11b9
uuid_00000000000c11b7:
	push %RBP
	mov -2048(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2152(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c11b4
	jmp uuid_00000000000c11b6
uuid_00000000000c11b4:
	movb $1, -2120(%rbp)
uuid_00000000000c11b6:
	mov -2144(%RBP),%RSP
	add $-2152, %RSP
uuid_00000000000c11b9:
	mov -2136(%RBP),%RSP
	add $-2152, %RSP
uuid_00000000000c11bc:
	mov -2128(%RBP),%RSP
	add $-2152, %RSP
	mov -2120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c11bd
	jmp uuid_00000000000c11bf
uuid_00000000000c11bd:
	movb $1, -1720(%rbp)
uuid_00000000000c11bf:
	mov -2040(%RBP),%RSP
	add $-2152, %RSP
uuid_00000000000c11c2:
	mov -1736(%RBP),%RSP
	add $-2152, %RSP
uuid_00000000000c11c5:
	mov -1728(%RBP),%RSP
	add $-2152, %RSP
	mov -1720(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1429
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -2232(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c11f2
	jmp uuid_00000000000c11f4
uuid_00000000000c11f2:
	push %RBP
	mov -2224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2328(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c11df
	jmp uuid_00000000000c11e1
uuid_00000000000c11df:
	push %RBP
	jmp uuid_00000000000c11dc
	jmp uuid_00000000000c11de
uuid_00000000000c11dc:
	push %RBP
	mov -2264(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c11d9
	jmp uuid_00000000000c11db
uuid_00000000000c11d9:
	movb $1, -2336(%rbp)
uuid_00000000000c11db:
	mov -2360(%RBP),%RSP
	add $-2368, %RSP
uuid_00000000000c11de:
	mov -2352(%RBP),%RSP
	add $-2368, %RSP
uuid_00000000000c11e1:
	mov -2344(%RBP),%RSP
	add $-2368, %RSP
	mov -2336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c11ef
	jmp uuid_00000000000c11f1
uuid_00000000000c11ef:
	push %RBP
	mov -2216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2448(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c11e9
	jmp uuid_00000000000c11eb
uuid_00000000000c11e9:
	push %RBP
	jmp uuid_00000000000c11e6
	jmp uuid_00000000000c11e8
uuid_00000000000c11e6:
	push %RBP
	mov -2384(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2488(%rbp)
	pushq $uuid_00000000000c11e2
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c11e3
	jmp uuid_00000000000c11e5
uuid_00000000000c11e3:
	movb $1, -2456(%rbp)
uuid_00000000000c11e5:
	mov -2480(%RBP),%RSP
	add $-2488, %RSP
uuid_00000000000c11e8:
	mov -2472(%RBP),%RSP
	add $-2488, %RSP
uuid_00000000000c11eb:
	mov -2464(%RBP),%RSP
	add $-2488, %RSP
	mov -2456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c11ec
	jmp uuid_00000000000c11ee
uuid_00000000000c11ec:
	movb $1, -2240(%rbp)
uuid_00000000000c11ee:
	mov -2376(%RBP),%RSP
	add $-2488, %RSP
uuid_00000000000c11f1:
	mov -2256(%RBP),%RSP
	add $-2488, %RSP
uuid_00000000000c11f4:
	mov -2248(%RBP),%RSP
	add $-2488, %RSP
	mov -2240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1426
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -2568(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c120f
	jmp uuid_00000000000c1211
uuid_00000000000c120f:
	push %RBP
	mov -2560(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2664(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c11fc
	jmp uuid_00000000000c11fe
uuid_00000000000c11fc:
	push %RBP
	jmp uuid_00000000000c11f9
	jmp uuid_00000000000c11fb
uuid_00000000000c11f9:
	push %RBP
	mov -2600(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c11f6
	jmp uuid_00000000000c11f8
uuid_00000000000c11f6:
	movb $1, -2672(%rbp)
uuid_00000000000c11f8:
	mov -2696(%RBP),%RSP
	add $-2704, %RSP
uuid_00000000000c11fb:
	mov -2688(%RBP),%RSP
	add $-2704, %RSP
uuid_00000000000c11fe:
	mov -2680(%RBP),%RSP
	add $-2704, %RSP
	mov -2672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c120c
	jmp uuid_00000000000c120e
uuid_00000000000c120c:
	push %RBP
	mov -2552(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2784(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1206
	jmp uuid_00000000000c1208
uuid_00000000000c1206:
	push %RBP
	jmp uuid_00000000000c1203
	jmp uuid_00000000000c1205
uuid_00000000000c1203:
	push %RBP
	mov -2720(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2824(%rbp)
	pushq $uuid_00000000000c11ff
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1200
	jmp uuid_00000000000c1202
uuid_00000000000c1200:
	movb $1, -2792(%rbp)
uuid_00000000000c1202:
	mov -2816(%RBP),%RSP
	add $-2824, %RSP
uuid_00000000000c1205:
	mov -2808(%RBP),%RSP
	add $-2824, %RSP
uuid_00000000000c1208:
	mov -2800(%RBP),%RSP
	add $-2824, %RSP
	mov -2792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1209
	jmp uuid_00000000000c120b
uuid_00000000000c1209:
	movb $1, -2576(%rbp)
uuid_00000000000c120b:
	mov -2712(%RBP),%RSP
	add $-2824, %RSP
uuid_00000000000c120e:
	mov -2592(%RBP),%RSP
	add $-2824, %RSP
uuid_00000000000c1211:
	mov -2584(%RBP),%RSP
	add $-2824, %RSP
	mov -2576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1423
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -2904(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1234
	jmp uuid_00000000000c1236
uuid_00000000000c1234:
	push %RBP
	mov -2896(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1231
	jmp uuid_00000000000c1233
uuid_00000000000c1231:
	push %RBP
	mov -2888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3080(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c122b
	jmp uuid_00000000000c122d
uuid_00000000000c122b:
	push %RBP
	mov -3072(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1228
	jmp uuid_00000000000c122a
uuid_00000000000c1228:
	push %RBP
	mov -3064(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3256(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1222
	jmp uuid_00000000000c1224
uuid_00000000000c1222:
	push %RBP
	mov -3248(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c121f
	jmp uuid_00000000000c1221
uuid_00000000000c121f:
	push %RBP
	mov -3240(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3432(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1219
	jmp uuid_00000000000c121b
uuid_00000000000c1219:
	push %RBP
	jmp uuid_00000000000c1216
	jmp uuid_00000000000c1218
uuid_00000000000c1216:
	push %RBP
	mov -3368(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3472(%rbp)
	pushq $uuid_00000000000c1212
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1213
	jmp uuid_00000000000c1215
uuid_00000000000c1213:
	movb $1, -3440(%rbp)
uuid_00000000000c1215:
	mov -3464(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000c1218:
	mov -3456(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000c121b:
	mov -3448(%RBP),%RSP
	add $-3472, %RSP
	mov -3440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c121c
	jmp uuid_00000000000c121e
uuid_00000000000c121c:
	movb $1, -3264(%rbp)
uuid_00000000000c121e:
	mov -3360(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000c1221:
	mov -3280(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000c1224:
	mov -3272(%RBP),%RSP
	add $-3472, %RSP
	mov -3264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1225
	jmp uuid_00000000000c1227
uuid_00000000000c1225:
	movb $1, -3088(%rbp)
uuid_00000000000c1227:
	mov -3184(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000c122a:
	mov -3104(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000c122d:
	mov -3096(%RBP),%RSP
	add $-3472, %RSP
	mov -3088(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c122e
	jmp uuid_00000000000c1230
uuid_00000000000c122e:
	movb $1, -2912(%rbp)
uuid_00000000000c1230:
	mov -3008(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000c1233:
	mov -2928(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000c1236:
	mov -2920(%RBP),%RSP
	add $-3472, %RSP
	mov -2912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1420
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -3552(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1258
	jmp uuid_00000000000c125a
uuid_00000000000c1258:
	push %RBP
	mov -3544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3648(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1246
	jmp uuid_00000000000c1248
uuid_00000000000c1246:
	push %RBP
	mov -3640(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3744(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c123d
	jmp uuid_00000000000c123f
uuid_00000000000c123d:
	push %RBP
	pushq -3720(%RBP)
	pushq -3728(%RBP)
	pushq -3736(%RBP)
	jmp uuid_00000000000c123a
	jmp uuid_00000000000c123c
uuid_00000000000c123a:
	movb $1, -3752(%rbp)
uuid_00000000000c123c:
	mov -3768(%RBP),%RSP
	add $-3792, %RSP
uuid_00000000000c123f:
	mov -3760(%RBP),%RSP
	add $-3792, %RSP
	mov -3752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1243
	jmp uuid_00000000000c1245
uuid_00000000000c1243:
	push %RBP
	mov -3632(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1240
	jmp uuid_00000000000c1242
uuid_00000000000c1240:
	movb $1, -3656(%rbp)
uuid_00000000000c1242:
	mov -3800(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000c1245:
	mov -3672(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000c1248:
	mov -3664(%RBP),%RSP
	add $-3872, %RSP
	mov -3656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1255
	jmp uuid_00000000000c1257
uuid_00000000000c1255:
	push %RBP
	mov -3536(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3952(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c124f
	jmp uuid_00000000000c1251
uuid_00000000000c124f:
	push %RBP
	jmp uuid_00000000000c124c
	jmp uuid_00000000000c124e
uuid_00000000000c124c:
	push %RBP
	mov -3888(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3992(%rbp)
	pushq $uuid_00000000000c0f7e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1249
	jmp uuid_00000000000c124b
uuid_00000000000c1249:
	movb $1, -3960(%rbp)
uuid_00000000000c124b:
	mov -3984(%RBP),%RSP
	add $-3992, %RSP
uuid_00000000000c124e:
	mov -3976(%RBP),%RSP
	add $-3992, %RSP
uuid_00000000000c1251:
	mov -3968(%RBP),%RSP
	add $-3992, %RSP
	mov -3960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1252
	jmp uuid_00000000000c1254
uuid_00000000000c1252:
	movb $1, -3560(%rbp)
uuid_00000000000c1254:
	mov -3880(%RBP),%RSP
	add $-3992, %RSP
uuid_00000000000c1257:
	mov -3576(%RBP),%RSP
	add $-3992, %RSP
uuid_00000000000c125a:
	mov -3568(%RBP),%RSP
	add $-3992, %RSP
	mov -3560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c141d
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -4072(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c129a
	jmp uuid_00000000000c129c
uuid_00000000000c129a:
	push %RBP
	mov -4064(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4168(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1287
	jmp uuid_00000000000c1289
uuid_00000000000c1287:
	push %RBP
	jmp uuid_00000000000c1284
	jmp uuid_00000000000c1286
uuid_00000000000c1284:
	movb $1, -4176(%rbp)
uuid_00000000000c1286:
	mov -4192(%RBP),%RSP
	add $-4192, %RSP
uuid_00000000000c1289:
	mov -4184(%RBP),%RSP
	add $-4192, %RSP
	mov -4176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1297
	jmp uuid_00000000000c1299
uuid_00000000000c1297:
	push %RBP
	mov -4056(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4272(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1291
	jmp uuid_00000000000c1293
uuid_00000000000c1291:
	push %RBP
	jmp uuid_00000000000c128e
	jmp uuid_00000000000c1290
uuid_00000000000c128e:
	push %RBP
	mov -4208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4312(%rbp)
	pushq $uuid_00000000000c128a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c128b
	jmp uuid_00000000000c128d
uuid_00000000000c128b:
	movb $1, -4280(%rbp)
uuid_00000000000c128d:
	mov -4304(%RBP),%RSP
	add $-4312, %RSP
uuid_00000000000c1290:
	mov -4296(%RBP),%RSP
	add $-4312, %RSP
uuid_00000000000c1293:
	mov -4288(%RBP),%RSP
	add $-4312, %RSP
	mov -4280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1294
	jmp uuid_00000000000c1296
uuid_00000000000c1294:
	movb $1, -4080(%rbp)
uuid_00000000000c1296:
	mov -4200(%RBP),%RSP
	add $-4312, %RSP
uuid_00000000000c1299:
	mov -4096(%RBP),%RSP
	add $-4312, %RSP
uuid_00000000000c129c:
	mov -4088(%RBP),%RSP
	add $-4312, %RSP
	mov -4080(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c141a
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -4392(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c12bb
	jmp uuid_00000000000c12bd
uuid_00000000000c12bb:
	push %RBP
	mov -4384(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c12b8
	jmp uuid_00000000000c12ba
uuid_00000000000c12b8:
	push %RBP
	mov -4376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4568(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c12b2
	jmp uuid_00000000000c12b4
uuid_00000000000c12b2:
	push %RBP
	jmp uuid_00000000000c12af
	jmp uuid_00000000000c12b1
uuid_00000000000c12af:
	push %RBP
	mov -4504(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4608(%rbp)
	pushq $uuid_00000000000c12ab
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c12ac
	jmp uuid_00000000000c12ae
uuid_00000000000c12ac:
	movb $1, -4576(%rbp)
uuid_00000000000c12ae:
	mov -4600(%RBP),%RSP
	add $-4608, %RSP
uuid_00000000000c12b1:
	mov -4592(%RBP),%RSP
	add $-4608, %RSP
uuid_00000000000c12b4:
	mov -4584(%RBP),%RSP
	add $-4608, %RSP
	mov -4576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c12b5
	jmp uuid_00000000000c12b7
uuid_00000000000c12b5:
	movb $1, -4400(%rbp)
uuid_00000000000c12b7:
	mov -4496(%RBP),%RSP
	add $-4608, %RSP
uuid_00000000000c12ba:
	mov -4416(%RBP),%RSP
	add $-4608, %RSP
uuid_00000000000c12bd:
	mov -4408(%RBP),%RSP
	add $-4608, %RSP
	mov -4400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1417
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -4688(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c12ce
	jmp uuid_00000000000c12d0
uuid_00000000000c12ce:
	push %RBP
	mov -4680(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c12cb
	jmp uuid_00000000000c12cd
uuid_00000000000c12cb:
	push %RBP
	mov -4672(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4864(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c12c5
	jmp uuid_00000000000c12c7
uuid_00000000000c12c5:
	push %RBP
	jmp uuid_00000000000c12c2
	jmp uuid_00000000000c12c4
uuid_00000000000c12c2:
	push %RBP
	mov -4800(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4904(%rbp)
	pushq $uuid_00000000000c12be
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c12bf
	jmp uuid_00000000000c12c1
uuid_00000000000c12bf:
	movb $1, -4872(%rbp)
uuid_00000000000c12c1:
	mov -4896(%RBP),%RSP
	add $-4904, %RSP
uuid_00000000000c12c4:
	mov -4888(%RBP),%RSP
	add $-4904, %RSP
uuid_00000000000c12c7:
	mov -4880(%RBP),%RSP
	add $-4904, %RSP
	mov -4872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c12c8
	jmp uuid_00000000000c12ca
uuid_00000000000c12c8:
	movb $1, -4696(%rbp)
uuid_00000000000c12ca:
	mov -4792(%RBP),%RSP
	add $-4904, %RSP
uuid_00000000000c12cd:
	mov -4712(%RBP),%RSP
	add $-4904, %RSP
uuid_00000000000c12d0:
	mov -4704(%RBP),%RSP
	add $-4904, %RSP
	mov -4696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1414
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -4984(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c132f
	jmp uuid_00000000000c1331
uuid_00000000000c132f:
	push %RBP
	mov -4976(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c132c
	jmp uuid_00000000000c132e
uuid_00000000000c132c:
	push %RBP
	mov -4968(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5160(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1326
	jmp uuid_00000000000c1328
uuid_00000000000c1326:
	push %RBP
	pushq -5136(%RBP)
	pushq -5144(%RBP)
	pushq -5152(%RBP)
	jmp uuid_00000000000c1323
	jmp uuid_00000000000c1325
uuid_00000000000c1323:
	push %RBP
	mov -5128(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -5288(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1320
	jmp uuid_00000000000c1322
uuid_00000000000c1320:
	push %RBP
	mov -5120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5368(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c131a
	jmp uuid_00000000000c131c
uuid_00000000000c131a:
	push %RBP
	jmp uuid_00000000000c1317
	jmp uuid_00000000000c1319
uuid_00000000000c1317:
	push %RBP
	mov -5304(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1314
	jmp uuid_00000000000c1316
uuid_00000000000c1314:
	movb $1, -5376(%rbp)
uuid_00000000000c1316:
	mov -5400(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000c1319:
	mov -5392(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000c131c:
	mov -5384(%RBP),%RSP
	add $-5408, %RSP
	mov -5376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c131d
	jmp uuid_00000000000c131f
uuid_00000000000c131d:
	movb $1, -5168(%rbp)
uuid_00000000000c131f:
	mov -5296(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000c1322:
	mov -5216(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000c1325:
	mov -5184(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000c1328:
	mov -5176(%RBP),%RSP
	add $-5408, %RSP
	mov -5168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1329
	jmp uuid_00000000000c132b
uuid_00000000000c1329:
	movb $1, -4992(%rbp)
uuid_00000000000c132b:
	mov -5088(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000c132e:
	mov -5008(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000c1331:
	mov -5000(%RBP),%RSP
	add $-5408, %RSP
	mov -4992(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1411
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -5488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c135d
	jmp uuid_00000000000c135f
uuid_00000000000c135d:
	push %RBP
	mov -5480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c135a
	jmp uuid_00000000000c135c
uuid_00000000000c135a:
	push %RBP
	mov -5472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1357
	jmp uuid_00000000000c1359
uuid_00000000000c1357:
	movb $1, -5496(%rbp)
uuid_00000000000c1359:
	mov -5592(%RBP),%RSP
	add $-5664, %RSP
uuid_00000000000c135c:
	mov -5512(%RBP),%RSP
	add $-5664, %RSP
uuid_00000000000c135f:
	mov -5504(%RBP),%RSP
	add $-5664, %RSP
	mov -5496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c140e
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -5744(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c13a9
	jmp uuid_00000000000c13ab
uuid_00000000000c13a9:
	push %RBP
	pushq -5720(%RBP)
	pushq -5728(%RBP)
	pushq -5736(%RBP)
	jmp uuid_00000000000c13a6
	jmp uuid_00000000000c13a8
uuid_00000000000c13a6:
	push %RBP
	mov -5712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c13a3
	jmp uuid_00000000000c13a5
uuid_00000000000c13a3:
	push %RBP
	mov -5704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c13a0
	jmp uuid_00000000000c13a2
uuid_00000000000c13a0:
	movb $1, -5752(%rbp)
uuid_00000000000c13a2:
	mov -5880(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000c13a5:
	mov -5800(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000c13a8:
	mov -5768(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000c13ab:
	mov -5760(%RBP),%RSP
	add $-5952, %RSP
	mov -5752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c140b
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -6032(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c13df
	jmp uuid_00000000000c13e1
uuid_00000000000c13df:
	push %RBP
	pushq -5976(%RBP)
	pushq -5984(%RBP)
	pushq -5992(%RBP)
	pushq -6000(%RBP)
	pushq -6008(%RBP)
	pushq -6016(%RBP)
	pushq -6024(%RBP)
	jmp uuid_00000000000c13dc
	jmp uuid_00000000000c13de
uuid_00000000000c13dc:
	push %RBP
	mov -5968(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c13d9
	jmp uuid_00000000000c13db
uuid_00000000000c13d9:
	movb $1, -6040(%rbp)
uuid_00000000000c13db:
	mov -6120(%RBP),%RSP
	add $-6128, %RSP
uuid_00000000000c13de:
	mov -6056(%RBP),%RSP
	add $-6128, %RSP
uuid_00000000000c13e1:
	mov -6048(%RBP),%RSP
	add $-6128, %RSP
	mov -6040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1408
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -6208(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c13e8
	jmp uuid_00000000000c13ea
uuid_00000000000c13e8:
	push %RBP
	jmp uuid_00000000000c13e5
	jmp uuid_00000000000c13e7
uuid_00000000000c13e5:
	push %RBP
	mov -6144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c13e2
	jmp uuid_00000000000c13e4
uuid_00000000000c13e2:
	movb $1, -6216(%rbp)
uuid_00000000000c13e4:
	mov -6240(%RBP),%RSP
	add $-6248, %RSP
uuid_00000000000c13e7:
	mov -6232(%RBP),%RSP
	add $-6248, %RSP
uuid_00000000000c13ea:
	mov -6224(%RBP),%RSP
	add $-6248, %RSP
	mov -6216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1405
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -6328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c13fa
	jmp uuid_00000000000c13fc
uuid_00000000000c13fa:
	push %RBP
	jmp uuid_00000000000c13f7
	jmp uuid_00000000000c13f9
uuid_00000000000c13f7:
	movb $1, -6336(%rbp)
uuid_00000000000c13f9:
	mov -6352(%RBP),%RSP
	add $-6352, %RSP
uuid_00000000000c13fc:
	mov -6344(%RBP),%RSP
	add $-6352, %RSP
	mov -6336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1402
	push %RBP
	jmp uuid_00000000000c13ff
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c13fe
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1401
uuid_00000000000c13ff:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c13fd
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1401:
	mov -6360(%RBP),%RSP
	add $-6360, %RSP
	jmp uuid_00000000000c1404
uuid_00000000000c1402:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1139
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1404:
	mov -6256(%RBP),%RSP
	add $-6352, %RSP
	jmp uuid_00000000000c1407
uuid_00000000000c1405:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c13f4
#call function typeof-tag : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6248(%rbp)
	mov %RBX, %RBP
	call typeof_SB_tag_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c13f1
	jmp uuid_00000000000c13f3
uuid_00000000000c13f1:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c13eb
	jmp uuid_00000000000c13ed
uuid_00000000000c13eb:
#call function unify-hint : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	mov %RBX, %RBP
	call unify_SB_hint_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -6280(%RBP)
	popq -6272(%RBP)
	popq -6264(%RBP)
uuid_00000000000c13ed:
	mov -6296(%RBP),%RSP
	add $-6296, %RSP
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c13ee
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1395
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000c1395
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	pushq -6312(%rbp)
	pushq -6320(%rbp)
	pushq -6328(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	jmp uuid_00000000000c13f0
uuid_00000000000c13ee:
uuid_00000000000c13f0:
	mov -6304(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000c13f3:
	mov -6288(%RBP),%RSP
	add $-6304, %RSP
	jmp uuid_00000000000c13f6
uuid_00000000000c13f4:
uuid_00000000000c13f6:
	mov -6256(%RBP),%RSP
	add $-6256, %RSP
uuid_00000000000c1407:
	mov -6136(%RBP),%RSP
	add $-6256, %RSP
	jmp uuid_00000000000c140a
uuid_00000000000c1408:
#call function typeof-var : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -6128(%rbp)
	mov %RBX, %RBP
	call typeof_SB_var_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function typeof-var : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -6128(%rbp)
	mov %RBX, %RBP
	call typeof_SB_var_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c140a:
	mov -5960(%RBP),%RSP
	add $-6152, %RSP
	jmp uuid_00000000000c140d
uuid_00000000000c140b:
#call function infer-ctx : Arrow<Cons<TContext,AST>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5888(%rbp)
	pushq -5896(%rbp)
	pushq -5904(%rbp)
	pushq -5912(%rbp)
	pushq -5920(%rbp)
	pushq -5928(%rbp)
	pushq -5936(%rbp)
	pushq -5944(%rbp)
	pushq -5952(%rbp)
	mov %RBX, %RBP
	call infer_SB_ctx_CL_ArrowTContextConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5776(%rbp)
	pushq -5784(%rbp)
	pushq -5792(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c13d1
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -5840(%rbp)
	pushq -5848(%rbp)
	pushq -5856(%rbp)
	pushq -5864(%rbp)
	pushq -5872(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	jmp uuid_00000000000c13d3
uuid_00000000000c13d1:
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -5840(%rbp)
	pushq -5848(%rbp)
	pushq -5856(%rbp)
	pushq -5864(%rbp)
	pushq -5872(%rbp)
	push %RBP
	pushq -5968(%rbp)
	pushq -5976(%rbp)
	pushq -5984(%rbp)
	pushq -5992(%rbp)
	pushq -6000(%rbp)
	pushq -6008(%rbp)
	pushq -6016(%rbp)
	pushq -6024(%rbp)
	pushq -6032(%rbp)
	pushq $0
	push %RBP
	mov -6112(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c13ca
	jmp uuid_00000000000c13cc
uuid_00000000000c13ca:
	push %RBP
	mov -6104(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6208(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c13b8
	jmp uuid_00000000000c13ba
uuid_00000000000c13b8:
	push %RBP
	mov -6200(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6304(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c13af
	jmp uuid_00000000000c13b1
uuid_00000000000c13af:
	push %RBP
	pushq -6280(%RBP)
	pushq -6288(%RBP)
	pushq -6296(%RBP)
	jmp uuid_00000000000c13ac
	jmp uuid_00000000000c13ae
uuid_00000000000c13ac:
	movb $1, -6312(%rbp)
uuid_00000000000c13ae:
	mov -6328(%RBP),%RSP
	add $-6352, %RSP
uuid_00000000000c13b1:
	mov -6320(%RBP),%RSP
	add $-6352, %RSP
	mov -6312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c13b5
	jmp uuid_00000000000c13b7
uuid_00000000000c13b5:
	push %RBP
	mov -6192(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c13b2
	jmp uuid_00000000000c13b4
uuid_00000000000c13b2:
	movb $1, -6216(%rbp)
uuid_00000000000c13b4:
	mov -6360(%RBP),%RSP
	add $-6432, %RSP
uuid_00000000000c13b7:
	mov -6232(%RBP),%RSP
	add $-6432, %RSP
uuid_00000000000c13ba:
	mov -6224(%RBP),%RSP
	add $-6432, %RSP
	mov -6216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c13c7
	jmp uuid_00000000000c13c9
uuid_00000000000c13c7:
	push %RBP
	mov -6096(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6512(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c13c1
	jmp uuid_00000000000c13c3
uuid_00000000000c13c1:
	push %RBP
	jmp uuid_00000000000c13be
	jmp uuid_00000000000c13c0
uuid_00000000000c13be:
	push %RBP
	mov -6448(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6552(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c13bb
	jmp uuid_00000000000c13bd
uuid_00000000000c13bb:
	movb $1, -6520(%rbp)
uuid_00000000000c13bd:
	mov -6544(%RBP),%RSP
	add $-6552, %RSP
uuid_00000000000c13c0:
	mov -6536(%RBP),%RSP
	add $-6552, %RSP
uuid_00000000000c13c3:
	mov -6528(%RBP),%RSP
	add $-6552, %RSP
	mov -6520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c13c4
	jmp uuid_00000000000c13c6
uuid_00000000000c13c4:
	movb $1, -6120(%rbp)
uuid_00000000000c13c6:
	mov -6440(%RBP),%RSP
	add $-6552, %RSP
uuid_00000000000c13c9:
	mov -6136(%RBP),%RSP
	add $-6552, %RSP
uuid_00000000000c13cc:
	mov -6128(%RBP),%RSP
	add $-6552, %RSP
	mov -6120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c13ce
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c13cd
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c13d0
uuid_00000000000c13ce:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -6368(%rbp)
	pushq -6376(%rbp)
	pushq -6384(%rbp)
	pushq -6392(%rbp)
	pushq -6400(%rbp)
	pushq -6408(%rbp)
	pushq -6416(%rbp)
	pushq -6424(%rbp)
	pushq -6432(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -5840(%rbp)
	pushq -5848(%rbp)
	pushq -5856(%rbp)
	pushq -5864(%rbp)
	pushq -5872(%rbp)
	pushq -6336(%rbp)
	pushq -6344(%rbp)
	pushq -6352(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c13d0:
	mov -6040(%RBP),%RSP
	add $-6552, %RSP
uuid_00000000000c13d3:
	mov -5960(%RBP),%RSP
	add $-6552, %RSP
#call function typeof-lhs : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5888(%rbp)
	pushq -5896(%rbp)
	pushq -5904(%rbp)
	pushq -5912(%rbp)
	pushq -5920(%rbp)
	pushq -5928(%rbp)
	pushq -5936(%rbp)
	pushq -5944(%rbp)
	pushq -5952(%rbp)
	mov %RBX, %RBP
	call typeof_SB_lhs_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -5840(%rbp)
	pushq -5848(%rbp)
	pushq -5856(%rbp)
	pushq -5864(%rbp)
	pushq -5872(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function enrich : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c13d4
	pushq -6560(%rbp)
	pushq -6568(%rbp)
	pushq -6576(%rbp)
	pushq -6584(%rbp)
	pushq -6592(%rbp)
	pushq -6600(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq -5776(%rbp)
	pushq -5784(%rbp)
	pushq -5792(%rbp)
	mov %RBX, %RBP
	call enrich_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5776(%rbp)
	pushq -5784(%rbp)
	pushq -5792(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c13d6
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c13d5
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000c13d5
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	pushq -6584(%rbp)
	pushq -6592(%rbp)
	pushq -6600(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	jmp uuid_00000000000c13d8
uuid_00000000000c13d6:
uuid_00000000000c13d8:
	mov -6608(%RBP),%RSP
	add $-6608, %RSP
uuid_00000000000c140d:
	mov -5672(%RBP),%RSP
	add $-6608, %RSP
	mov %RSP, %R14
	add $72, %rsp
	add $8, %rsp
	add $24, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000c1410
uuid_00000000000c140e:
	pushq $3
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1360
	jmp uuid_00000000000c1362
uuid_00000000000c1360:
	pushq $0
	popq -5672(%RBP)
uuid_00000000000c1362:
	mov -5680(%RBP),%RSP
	add $-5680, %RSP
	pushq $4
	pushq $0
	pushq $0
	pushq $3
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	push %RBP
	pushq -5720(%rbp)
	pushq -5728(%rbp)
	pushq -5736(%rbp)
	pushq -5744(%rbp)
	pushq -5752(%rbp)
	pushq -5760(%rbp)
	pushq -5768(%rbp)
	pushq -5776(%rbp)
	pushq -5784(%rbp)
	pushq $0
	push %RBP
	mov -5864(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1369
	jmp uuid_00000000000c136b
uuid_00000000000c1369:
	push %RBP
	jmp uuid_00000000000c1366
	jmp uuid_00000000000c1368
uuid_00000000000c1366:
	push %RBP
	mov -5800(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1363
	jmp uuid_00000000000c1365
uuid_00000000000c1363:
	movb $1, -5872(%rbp)
uuid_00000000000c1365:
	mov -5896(%RBP),%RSP
	add $-5904, %RSP
uuid_00000000000c1368:
	mov -5888(%RBP),%RSP
	add $-5904, %RSP
uuid_00000000000c136b:
	mov -5880(%RBP),%RSP
	add $-5904, %RSP
	mov -5872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c137c
	push %RBP
	jmp uuid_00000000000c1379
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c1378
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c137b
uuid_00000000000c1379:
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq $3
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1372
	jmp uuid_00000000000c1374
uuid_00000000000c1372:
	pushq $3
	popq -5688(%RBP)
uuid_00000000000c1374:
	mov -5920(%RBP),%RSP
	add $-5920, %RSP
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq -5672(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1375
	jmp uuid_00000000000c1377
uuid_00000000000c1375:
	pushq $0
	popq -5688(%RBP)
uuid_00000000000c1377:
	mov -5928(%RBP),%RSP
	add $-5928, %RSP
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq -5688(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function apply-or-cons-and-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function var-name-if-var : Arrow<AST,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call var_SB_name_SB_if_SB_var_CL_ArrowStringAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call apply_SB_or_SB_cons_SB_and_SB_specialize_CL_ArrowTupleTypeTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	pushq -5960(%RBP)
	pushq -5968(%RBP)
	pushq -5976(%RBP)
	popq -5712(%RBP)
	popq -5704(%RBP)
	popq -5696(%RBP)
uuid_00000000000c137b:
	mov -5912(%RBP),%RSP
	add $-5984, %RSP
	jmp uuid_00000000000c137e
uuid_00000000000c137c:
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq $3
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c136c
	jmp uuid_00000000000c136e
uuid_00000000000c136c:
	pushq $3
	popq -5688(%RBP)
uuid_00000000000c136e:
	mov -5912(%RBP),%RSP
	add $-5912, %RSP
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq -5672(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c136f
	jmp uuid_00000000000c1371
uuid_00000000000c136f:
	pushq $0
	popq -5688(%RBP)
uuid_00000000000c1371:
	mov -5920(%RBP),%RSP
	add $-5920, %RSP
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq -5688(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function apply-or-cons-and-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function var-name-if-var : Arrow<AST,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call var_SB_name_SB_if_SB_var_CL_ArrowStringAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call apply_SB_or_SB_cons_SB_and_SB_specialize_CL_ArrowTupleTypeTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	pushq -5928(%RBP)
	pushq -5936(%RBP)
	pushq -5944(%RBP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	pushq -5984(%rbp)
	pushq -5992(%rbp)
	pushq -6000(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq -5952(%RBP)
	pushq -5960(%RBP)
	pushq -5968(%RBP)
	popq -5712(%RBP)
	popq -5704(%RBP)
	popq -5696(%RBP)
uuid_00000000000c137e:
	mov -5792(%RBP),%RSP
	add $-6000, %RSP
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5672(%rbp)
	pushq $3
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c137f
	jmp uuid_00000000000c1381
uuid_00000000000c137f:
#call function implicit-tail : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5696(%rbp)
	pushq -5704(%rbp)
	pushq -5712(%rbp)
	mov %RBX, %RBP
	call implicit_SB_tail_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -5712(%RBP)
	popq -5704(%RBP)
	popq -5696(%RBP)
uuid_00000000000c1381:
	mov -6008(%RBP),%RSP
	add $-6008, %RSP
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -5696(%rbp)
	pushq -5704(%rbp)
	pushq -5712(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function var-name-if-var : Arrow<AST,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call var_SB_name_SB_if_SB_var_CL_ArrowStringAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $uuid_00000000000c1382
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1385
	mov %RSP, %R14
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000c1387
uuid_00000000000c1385:
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1383
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000c1383
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1382
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function p1 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call p1_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $uuid_00000000000c12d1
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $uuid_00000000000c1384
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
uuid_00000000000c1387:
	mov -6016(%RBP),%RSP
	add $-6040, %RSP
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6048(%rbp)
	pushq -6056(%rbp)
	pushq -6064(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c139d
	mov %RSP, %R14
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000c139f
uuid_00000000000c139d:
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	push %RBP
	pushq -6080(%rbp)
	pushq -6088(%rbp)
	pushq -6096(%rbp)
	pushq -6104(%rbp)
	pushq -6112(%rbp)
	pushq -6120(%rbp)
	pushq -6128(%rbp)
	pushq -6136(%rbp)
	pushq -6144(%rbp)
	pushq $0
	push %RBP
	mov -6224(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c138e
	jmp uuid_00000000000c1390
uuid_00000000000c138e:
	push %RBP
	jmp uuid_00000000000c138b
	jmp uuid_00000000000c138d
uuid_00000000000c138b:
	push %RBP
	mov -6160(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1388
	jmp uuid_00000000000c138a
uuid_00000000000c1388:
	movb $1, -6232(%rbp)
uuid_00000000000c138a:
	mov -6256(%RBP),%RSP
	add $-6264, %RSP
uuid_00000000000c138d:
	mov -6248(%RBP),%RSP
	add $-6264, %RSP
uuid_00000000000c1390:
	mov -6240(%RBP),%RSP
	add $-6264, %RSP
	mov -6232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c139a
	push %RBP
	jmp uuid_00000000000c1397
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c1396
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1399
uuid_00000000000c1397:
uuid_00000000000c1399:
	mov -6272(%RBP),%RSP
	add $-6272, %RSP
	mov %RSP, %R14
	add $8, %RSP
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000c139c
uuid_00000000000c139a:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5696(%rbp)
	pushq -5704(%rbp)
	pushq -5712(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1391
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function var-name-if-var : Arrow<AST,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call var_SB_name_SB_if_SB_var_CL_ArrowStringAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6288(%rbp)
	pushq -6296(%rbp)
	pushq -6304(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1392
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6264(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -6304(%RBP)
	popq -6296(%RBP)
	popq -6288(%RBP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6288(%rbp)
	pushq -6296(%rbp)
	pushq -6304(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1393
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6280(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -6304(%RBP)
	popq -6296(%RBP)
	popq -6288(%RBP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6288(%rbp)
	pushq -6296(%rbp)
	pushq -6304(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1394
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6272(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -6304(%RBP)
	popq -6296(%RBP)
	popq -6288(%RBP)
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1395
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000c1395
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	pushq -6288(%rbp)
	pushq -6296(%rbp)
	pushq -6304(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
uuid_00000000000c139c:
	mov -6152(%RBP),%RSP
	add $-6328, %RSP
uuid_00000000000c139f:
	mov -6072(%RBP),%RSP
	add $-6328, %RSP
uuid_00000000000c1410:
	mov -5416(%RBP),%RSP
	add $-6328, %RSP
	mov %RSP, %R14
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %rsp
	add $24, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $56, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000c1413
uuid_00000000000c1411:
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5408(%rbp)
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5416(%rbp)
	pushq -5424(%rbp)
	pushq -5432(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1336
	jmp uuid_00000000000c1338
uuid_00000000000c1336:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5416(%rbp)
	pushq -5424(%rbp)
	pushq -5432(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1333
	jmp uuid_00000000000c1335
uuid_00000000000c1333:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1332
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1335:
	mov -5448(%RBP),%RSP
	add $-5448, %RSP
uuid_00000000000c1338:
	mov -5440(%RBP),%RSP
	add $-5448, %RSP
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c133a
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1339
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c133c
uuid_00000000000c133a:
uuid_00000000000c133c:
	mov -5480(%RBP),%RSP
	add $-5480, %RSP
#call function as-local-variable : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-constructor : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	mov %RBX, %RBP
	call without_SB_constructor_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call as_SB_local_SB_variable_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -5472(%RBP)
	popq -5464(%RBP)
	popq -5456(%RBP)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -5488(%rbp)
	pushq -5496(%rbp)
	pushq -5504(%rbp)
	pushq -5512(%rbp)
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq $0
	push %RBP
	mov -5632(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c134f
	jmp uuid_00000000000c1351
uuid_00000000000c134f:
	push %RBP
	jmp uuid_00000000000c134c
	jmp uuid_00000000000c134e
uuid_00000000000c134c:
	push %RBP
	mov -5616(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5736(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1346
	jmp uuid_00000000000c1348
uuid_00000000000c1346:
	push %RBP
	jmp uuid_00000000000c1343
	jmp uuid_00000000000c1345
uuid_00000000000c1343:
	push %RBP
	jmp uuid_00000000000c1340
	jmp uuid_00000000000c1342
uuid_00000000000c1340:
	push %RBP
	mov -5696(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c133d
	jmp uuid_00000000000c133f
uuid_00000000000c133d:
	movb $1, -5744(%rbp)
uuid_00000000000c133f:
	mov -5776(%RBP),%RSP
	add $-5848, %RSP
uuid_00000000000c1342:
	mov -5768(%RBP),%RSP
	add $-5848, %RSP
uuid_00000000000c1345:
	mov -5760(%RBP),%RSP
	add $-5848, %RSP
uuid_00000000000c1348:
	mov -5752(%RBP),%RSP
	add $-5848, %RSP
	mov -5744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1349
	jmp uuid_00000000000c134b
uuid_00000000000c1349:
	movb $1, -5640(%rbp)
uuid_00000000000c134b:
	mov -5664(%RBP),%RSP
	add $-5848, %RSP
uuid_00000000000c134e:
	mov -5656(%RBP),%RSP
	add $-5848, %RSP
uuid_00000000000c1351:
	mov -5648(%RBP),%RSP
	add $-5848, %RSP
	mov -5640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1353
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c1352
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1355
uuid_00000000000c1353:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5784(%rbp)
	pushq -5792(%rbp)
	pushq -5800(%rbp)
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -5840(%rbp)
	pushq -5848(%rbp)
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1355:
	mov -5560(%RBP),%RSP
	add $-5848, %RSP
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -5408(%rbp)
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1139
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1356
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000c1356
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
uuid_00000000000c1413:
	mov -4912(%RBP),%RSP
	add $-5872, %RSP
	jmp uuid_00000000000c1416
uuid_00000000000c1414:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq $uuid_00000000000c12d1
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq $0
	push %RBP
	mov -4984(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c12ea
	jmp uuid_00000000000c12ec
uuid_00000000000c12ea:
	push %RBP
	mov -4976(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5048(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c12e1
	jmp uuid_00000000000c12e3
uuid_00000000000c12e1:
	push %RBP
	mov -5040(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c12d8
	jmp uuid_00000000000c12da
uuid_00000000000c12d8:
	push %RBP
	mov -5104(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -5176(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c12d5
	jmp uuid_00000000000c12d7
uuid_00000000000c12d5:
	push %RBP
	pushq -5080(%RBP)
	pushq -5088(%RBP)
	pushq -5096(%RBP)
	mov -5208(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c12d2
	jmp uuid_00000000000c12d4
uuid_00000000000c12d2:
	movb $1, -5120(%rbp)
uuid_00000000000c12d4:
	mov -5184(%RBP),%RSP
	add $-5208, %RSP
uuid_00000000000c12d7:
	mov -5136(%RBP),%RSP
	add $-5208, %RSP
uuid_00000000000c12da:
	mov -5128(%RBP),%RSP
	add $-5208, %RSP
	mov -5120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c12de
	jmp uuid_00000000000c12e0
uuid_00000000000c12de:
	push %RBP
	jmp uuid_00000000000c12db
	jmp uuid_00000000000c12dd
uuid_00000000000c12db:
	movb $1, -5056(%rbp)
uuid_00000000000c12dd:
	mov -5216(%RBP),%RSP
	add $-5216, %RSP
uuid_00000000000c12e0:
	mov -5072(%RBP),%RSP
	add $-5216, %RSP
uuid_00000000000c12e3:
	mov -5064(%RBP),%RSP
	add $-5216, %RSP
	mov -5056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c12e7
	jmp uuid_00000000000c12e9
uuid_00000000000c12e7:
	push %RBP
	mov -4968(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5232(%rbp)
	pushq $uuid_00000000000c12d1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c12e4
	jmp uuid_00000000000c12e6
uuid_00000000000c12e4:
	movb $1, -4992(%rbp)
uuid_00000000000c12e6:
	mov -5224(%RBP),%RSP
	add $-5232, %RSP
uuid_00000000000c12e9:
	mov -5008(%RBP),%RSP
	add $-5232, %RSP
uuid_00000000000c12ec:
	mov -5000(%RBP),%RSP
	add $-5232, %RSP
	mov -4992(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1311
	push %RBP
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq $0
	push %RBP
	mov -5264(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1305
	jmp uuid_00000000000c1307
uuid_00000000000c1305:
	push %RBP
	mov -5256(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c12fc
	jmp uuid_00000000000c12fe
uuid_00000000000c12fc:
	push %RBP
	mov -5320(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5392(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c12f3
	jmp uuid_00000000000c12f5
uuid_00000000000c12f3:
	push %RBP
	mov -5384(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -5456(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c12f0
	jmp uuid_00000000000c12f2
uuid_00000000000c12f0:
	push %RBP
	pushq -5360(%RBP)
	pushq -5368(%RBP)
	pushq -5376(%RBP)
	jmp uuid_00000000000c12ed
	jmp uuid_00000000000c12ef
uuid_00000000000c12ed:
	movb $1, -5400(%rbp)
uuid_00000000000c12ef:
	mov -5464(%RBP),%RSP
	add $-5488, %RSP
uuid_00000000000c12f2:
	mov -5416(%RBP),%RSP
	add $-5488, %RSP
uuid_00000000000c12f5:
	mov -5408(%RBP),%RSP
	add $-5488, %RSP
	mov -5400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c12f9
	jmp uuid_00000000000c12fb
uuid_00000000000c12f9:
	push %RBP
	pushq -5296(%RBP)
	pushq -5304(%RBP)
	pushq -5312(%RBP)
	mov -5520(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c12f6
	jmp uuid_00000000000c12f8
uuid_00000000000c12f6:
	movb $1, -5336(%rbp)
uuid_00000000000c12f8:
	mov -5496(%RBP),%RSP
	add $-5520, %RSP
uuid_00000000000c12fb:
	mov -5352(%RBP),%RSP
	add $-5520, %RSP
uuid_00000000000c12fe:
	mov -5344(%RBP),%RSP
	add $-5520, %RSP
	mov -5336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1302
	jmp uuid_00000000000c1304
uuid_00000000000c1302:
	push %RBP
	mov -5248(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5536(%rbp)
	pushq $uuid_00000000000c12d1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c12ff
	jmp uuid_00000000000c1301
uuid_00000000000c12ff:
	movb $1, -5272(%rbp)
uuid_00000000000c1301:
	mov -5528(%RBP),%RSP
	add $-5536, %RSP
uuid_00000000000c1304:
	mov -5288(%RBP),%RSP
	add $-5536, %RSP
uuid_00000000000c1307:
	mov -5280(%RBP),%RSP
	add $-5536, %RSP
	mov -5272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c130e
	push %RBP
	jmp uuid_00000000000c130b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c130a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c130d
uuid_00000000000c130b:
uuid_00000000000c130d:
	mov -5544(%RBP),%RSP
	add $-5544, %RSP
	jmp uuid_00000000000c1310
uuid_00000000000c130e:
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1308
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000c1308
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5472(%rbp)
	pushq -5480(%rbp)
	pushq -5488(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1309
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -4928(%RBP)
	popq -4920(%RBP)
	popq -4912(%RBP)
uuid_00000000000c1310:
	mov -5240(%RBP),%RSP
	add $-5536, %RSP
	jmp uuid_00000000000c1313
uuid_00000000000c1311:
uuid_00000000000c1313:
	mov -4960(%RBP),%RSP
	add $-5232, %RSP
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1416:
	mov -4616(%RBP),%RSP
	add $-5232, %RSP
	jmp uuid_00000000000c1419
uuid_00000000000c1417:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq $1
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1419:
	mov -4320(%RBP),%RSP
	add $-4608, %RSP
	jmp uuid_00000000000c141c
uuid_00000000000c141a:
#call function as-constant : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c129d
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call as_SB_constant_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -4320(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	pushq -4408(%rbp)
	pushq $0
	push %RBP
	mov -4488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c12a4
	jmp uuid_00000000000c12a6
uuid_00000000000c12a4:
	push %RBP
	jmp uuid_00000000000c12a1
	jmp uuid_00000000000c12a3
uuid_00000000000c12a1:
	push %RBP
	mov -4472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c129e
	jmp uuid_00000000000c12a0
uuid_00000000000c129e:
	movb $1, -4496(%rbp)
uuid_00000000000c12a0:
	mov -4520(%RBP),%RSP
	add $-4592, %RSP
uuid_00000000000c12a3:
	mov -4512(%RBP),%RSP
	add $-4592, %RSP
uuid_00000000000c12a6:
	mov -4504(%RBP),%RSP
	add $-4592, %RSP
	mov -4496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c12a8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c12a7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c12aa
uuid_00000000000c12a8:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4528(%rbp)
	pushq -4536(%rbp)
	pushq -4544(%rbp)
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	pushq -4568(%rbp)
	pushq -4576(%rbp)
	pushq -4584(%rbp)
	pushq -4592(%rbp)
	pushq -4320(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c12aa:
	mov -4416(%RBP),%RSP
	add $-4592, %RSP
uuid_00000000000c141c:
	mov -4000(%RBP),%RSP
	add $-4592, %RSP
	jmp uuid_00000000000c141f
uuid_00000000000c141d:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3808(%rbp)
	pushq -3816(%rbp)
	pushq -3824(%rbp)
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq -232(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3808(%rbp)
	pushq -3816(%rbp)
	pushq -3824(%rbp)
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -3808(%rbp)
	pushq -3816(%rbp)
	pushq -3824(%rbp)
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	push %RBP
	pushq -4024(%rbp)
	pushq -4032(%rbp)
	pushq -4040(%rbp)
	pushq -4048(%rbp)
	pushq -4056(%rbp)
	pushq -4064(%rbp)
	pushq -4072(%rbp)
	pushq -4080(%rbp)
	pushq -4088(%rbp)
	pushq $0
	push %RBP
	mov -4168(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1261
	jmp uuid_00000000000c1263
uuid_00000000000c1261:
	push %RBP
	jmp uuid_00000000000c125e
	jmp uuid_00000000000c1260
uuid_00000000000c125e:
	push %RBP
	mov -4104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c125b
	jmp uuid_00000000000c125d
uuid_00000000000c125b:
	movb $1, -4176(%rbp)
uuid_00000000000c125d:
	mov -4200(%RBP),%RSP
	add $-4208, %RSP
uuid_00000000000c1260:
	mov -4192(%RBP),%RSP
	add $-4208, %RSP
uuid_00000000000c1263:
	mov -4184(%RBP),%RSP
	add $-4208, %RSP
	mov -4176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1278
	push %RBP
	jmp uuid_00000000000c1275
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c1274
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1277
uuid_00000000000c1275:
uuid_00000000000c1277:
	mov -4216(%RBP),%RSP
	add $-4216, %RSP
	jmp uuid_00000000000c127a
uuid_00000000000c1278:
	push %RBP
#call function is-reg8 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4208(%rbp)
	mov %RBX, %RBP
	call is_SB_reg8_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1265
	jmp uuid_00000000000c1267
uuid_00000000000c1265:
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1264
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -4016(%RBP)
	popq -4008(%RBP)
	popq -4000(%RBP)
uuid_00000000000c1267:
	mov -4216(%RBP),%RSP
	add $-4216, %RSP
	push %RBP
#call function is-reg16 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4208(%rbp)
	mov %RBX, %RBP
	call is_SB_reg16_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1269
	jmp uuid_00000000000c126b
uuid_00000000000c1269:
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1268
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -4016(%RBP)
	popq -4008(%RBP)
	popq -4000(%RBP)
uuid_00000000000c126b:
	mov -4224(%RBP),%RSP
	add $-4224, %RSP
	push %RBP
#call function is-reg32 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4208(%rbp)
	mov %RBX, %RBP
	call is_SB_reg32_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c126d
	jmp uuid_00000000000c126f
uuid_00000000000c126d:
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c126c
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -4016(%RBP)
	popq -4008(%RBP)
	popq -4000(%RBP)
uuid_00000000000c126f:
	mov -4232(%RBP),%RSP
	add $-4232, %RSP
	push %RBP
#call function is-reg64 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4208(%rbp)
	mov %RBX, %RBP
	call is_SB_reg64_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1271
	jmp uuid_00000000000c1273
uuid_00000000000c1271:
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1270
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -4016(%RBP)
	popq -4008(%RBP)
	popq -4000(%RBP)
uuid_00000000000c1273:
	mov -4240(%RBP),%RSP
	add $-4240, %RSP
uuid_00000000000c127a:
	mov -4096(%RBP),%RSP
	add $-4240, %RSP
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4000(%rbp)
	pushq -4008(%rbp)
	pushq -4016(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1281
	jmp uuid_00000000000c1283
uuid_00000000000c1281:
#call function with-only-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4000(%rbp)
	pushq -4008(%rbp)
	pushq -4016(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4256(%rbp)
	pushq -4264(%rbp)
	pushq -4272(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c127b
	jmp uuid_00000000000c127d
uuid_00000000000c127b:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3776(%rbp)
	pushq -3784(%rbp)
	pushq -3792(%rbp)
	pushq -4256(%rbp)
	pushq -4264(%rbp)
	pushq -4272(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -3792(%RBP)
	popq -3784(%RBP)
	popq -3776(%RBP)
uuid_00000000000c127d:
	mov -4280(%RBP),%RSP
	add $-4280, %RSP
#call function with-only-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4000(%rbp)
	pushq -4008(%rbp)
	pushq -4016(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4288(%rbp)
	pushq -4296(%rbp)
	pushq -4304(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c127e
	jmp uuid_00000000000c1280
uuid_00000000000c127e:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3776(%rbp)
	pushq -3784(%rbp)
	pushq -3792(%rbp)
	pushq -4288(%rbp)
	pushq -4296(%rbp)
	pushq -4304(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -3792(%RBP)
	popq -3784(%RBP)
	popq -3776(%RBP)
uuid_00000000000c1280:
	mov -4312(%RBP),%RSP
	add $-4312, %RSP
#call function with-fields : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3776(%rbp)
	pushq -3784(%rbp)
	pushq -3792(%rbp)
	mov %RBX, %RBP
	call with_SB_fields_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -3792(%RBP)
	popq -3784(%RBP)
	popq -3776(%RBP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -3776(%rbp)
	pushq -3784(%rbp)
	pushq -3792(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1283:
	mov -4248(%RBP),%RSP
	add $-4312, %RSP
uuid_00000000000c141f:
	mov -3480(%RBP),%RSP
	add $-4312, %RSP
	jmp uuid_00000000000c1422
uuid_00000000000c1420:
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq $1
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1237
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3288(%rbp)
	pushq -3296(%rbp)
	pushq -3304(%rbp)
	pushq -3312(%rbp)
	pushq -3320(%rbp)
	pushq -3328(%rbp)
	pushq -3336(%rbp)
	pushq -3344(%rbp)
	pushq -3352(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3112(%rbp)
	pushq -3120(%rbp)
	pushq -3128(%rbp)
	pushq -3136(%rbp)
	pushq -3144(%rbp)
	pushq -3152(%rbp)
	pushq -3160(%rbp)
	pushq -3168(%rbp)
	pushq -3176(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	mov %RSP, %R14
	movq 112(%R14), %R15
	movq %R15, 112(%RSP)
	movq 104(%R14), %R15
	movq %R15, 104(%RSP)
	movq 96(%R14), %R15
	movq %R15, 96(%RSP)
	movq 88(%R14), %R15
	movq %R15, 88(%RSP)
	movq 80(%R14), %R15
	movq %R15, 80(%RSP)
	movq 72(%R14), %R15
	movq %R15, 72(%RSP)
	movq 64(%R14), %R15
	movq %R15, 64(%RSP)
	movq 56(%R14), %R15
	movq %R15, 56(%RSP)
	movq 48(%R14), %R15
	movq %R15, 48(%RSP)
	movq 40(%R14), %R15
	movq %R15, 40(%RSP)
	movq 32(%R14), %R15
	movq %R15, 32(%RSP)
	movq 24(%R14), %R15
	movq %R15, 24(%RSP)
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000c1239
uuid_00000000000c1237:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3288(%rbp)
	pushq -3296(%rbp)
	pushq -3304(%rbp)
	pushq -3312(%rbp)
	pushq -3320(%rbp)
	pushq -3328(%rbp)
	pushq -3336(%rbp)
	pushq -3344(%rbp)
	pushq -3352(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3488(%rbp)
	pushq -3496(%rbp)
	pushq -3504(%rbp)
	pushq -3512(%rbp)
	pushq -3520(%rbp)
	pushq -3528(%rbp)
	pushq -3536(%rbp)
	pushq -3544(%rbp)
	pushq -3552(%rbp)
	pushq -3560(%rbp)
	pushq -3568(%rbp)
	pushq -3576(%rbp)
	pushq -3584(%rbp)
	pushq -3592(%rbp)
	pushq -3600(%rbp)
	pushq -3112(%rbp)
	pushq -3120(%rbp)
	pushq -3128(%rbp)
	pushq -3136(%rbp)
	pushq -3144(%rbp)
	pushq -3152(%rbp)
	pushq -3160(%rbp)
	pushq -3168(%rbp)
	pushq -3176(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
uuid_00000000000c1239:
	mov -3480(%RBP),%RSP
	add $-3720, %RSP
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2936(%rbp)
	pushq -2944(%rbp)
	pushq -2952(%rbp)
	pushq -2960(%rbp)
	pushq -2968(%rbp)
	pushq -2976(%rbp)
	pushq -2984(%rbp)
	pushq -2992(%rbp)
	pushq -3000(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function guess-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3112(%rbp)
	pushq -3120(%rbp)
	pushq -3128(%rbp)
	pushq -3136(%rbp)
	pushq -3144(%rbp)
	pushq -3152(%rbp)
	pushq -3160(%rbp)
	pushq -3168(%rbp)
	pushq -3176(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call guess_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1422:
	mov -2832(%RBP),%RSP
	add $-3720, %RSP
	jmp uuid_00000000000c1425
uuid_00000000000c1423:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1139
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1425:
	mov -2496(%RBP),%RSP
	add $-2824, %RSP
	jmp uuid_00000000000c1428
uuid_00000000000c1426:
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -2368(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c11f5
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1139
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1428:
	mov -2160(%RBP),%RSP
	add $-2488, %RSP
	jmp uuid_00000000000c142b
uuid_00000000000c1429:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq $0
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c11d6
	jmp uuid_00000000000c11d8
uuid_00000000000c11d6:
#call function with-only-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c11c6
	jmp uuid_00000000000c11c8
uuid_00000000000c11c6:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	movq -2240(%rbp), %r15
	movq %r15, -1952(%rbp)
	movq -2232(%rbp), %r15
	movq %r15, -1944(%rbp)
	movq -2224(%rbp), %r15
	movq %r15, -1936(%rbp)
uuid_00000000000c11c8:
	mov -2216(%RBP),%RSP
	add $-2240, %RSP
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	pushq -2312(%rbp)
	pushq $0
	push %RBP
	mov -2392(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c11cf
	jmp uuid_00000000000c11d1
uuid_00000000000c11cf:
	push %RBP
	mov -2384(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c11cc
	jmp uuid_00000000000c11ce
uuid_00000000000c11cc:
	push %RBP
	mov -2376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c11c9
	jmp uuid_00000000000c11cb
uuid_00000000000c11c9:
	movb $1, -2400(%rbp)
uuid_00000000000c11cb:
	mov -2496(%RBP),%RSP
	add $-2568, %RSP
uuid_00000000000c11ce:
	mov -2416(%RBP),%RSP
	add $-2568, %RSP
uuid_00000000000c11d1:
	mov -2408(%RBP),%RSP
	add $-2568, %RSP
	mov -2400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c11d3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c11d2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c11d5
uuid_00000000000c11d3:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2504(%rbp)
	pushq -2512(%rbp)
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	pushq -2568(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2424(%rbp)
	pushq -2432(%rbp)
	pushq -2440(%rbp)
	pushq -2448(%rbp)
	pushq -2456(%rbp)
	pushq -2464(%rbp)
	pushq -2472(%rbp)
	pushq -2480(%rbp)
	pushq -2488(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c11d5:
	mov -2320(%RBP),%RSP
	add $-2568, %RSP
uuid_00000000000c11d8:
	mov -2184(%RBP),%RSP
	add $-2568, %RSP
uuid_00000000000c142b:
	mov -1640(%RBP),%RSP
	add $-2568, %RSP
	jmp uuid_00000000000c142e
uuid_00000000000c142c:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq $0
	push %RBP
	mov -1784(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1198
	jmp uuid_00000000000c119a
uuid_00000000000c1198:
	push %RBP
	mov -1776(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1880(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c118f
	jmp uuid_00000000000c1191
uuid_00000000000c118f:
	push %RBP
	jmp uuid_00000000000c118c
	jmp uuid_00000000000c118e
uuid_00000000000c118c:
	push %RBP
	mov -1864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1189
	jmp uuid_00000000000c118b
uuid_00000000000c1189:
	movb $1, -1888(%rbp)
uuid_00000000000c118b:
	mov -1912(%RBP),%RSP
	add $-1984, %RSP
uuid_00000000000c118e:
	mov -1904(%RBP),%RSP
	add $-1984, %RSP
uuid_00000000000c1191:
	mov -1896(%RBP),%RSP
	add $-1984, %RSP
	mov -1888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1195
	jmp uuid_00000000000c1197
uuid_00000000000c1195:
	push %RBP
	jmp uuid_00000000000c1192
	jmp uuid_00000000000c1194
uuid_00000000000c1192:
	movb $1, -1792(%rbp)
uuid_00000000000c1194:
	mov -1992(%RBP),%RSP
	add $-1992, %RSP
uuid_00000000000c1197:
	mov -1808(%RBP),%RSP
	add $-1992, %RSP
uuid_00000000000c119a:
	mov -1800(%RBP),%RSP
	add $-1992, %RSP
	mov -1792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c11a2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c11a1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c11a4
uuid_00000000000c11a2:
	push %RBP
#call function is-string : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	mov %RBX, %RBP
	call is_SB_string_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c119b
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq $0
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	jmp uuid_00000000000c119d
uuid_00000000000c119b:
uuid_00000000000c119d:
	mov -2000(%RBP),%RSP
	add $-2000, %RSP
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c119e
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c11a0
uuid_00000000000c119e:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -1400(%RBP)
	popq -1392(%RBP)
	popq -1384(%RBP)
uuid_00000000000c11a0:
	mov -2032(%RBP),%RSP
	add $-2032, %RSP
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c11a4:
	mov -1712(%RBP),%RSP
	add $-2032, %RSP
uuid_00000000000c142e:
	mov -1088(%RBP),%RSP
	add $-2032, %RSP
	jmp uuid_00000000000c1431
uuid_00000000000c142f:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c115b
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1158
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1155
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1156
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000c1156
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1157
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	jmp uuid_00000000000c115a
uuid_00000000000c1158:
uuid_00000000000c115a:
	mov -1120(%RBP),%RSP
	add $-1120, %RSP
	jmp uuid_00000000000c115d
uuid_00000000000c115b:
uuid_00000000000c115d:
	mov -1088(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000c1431:
	mov -848(%RBP),%RSP
	add $-1088, %RSP
	jmp uuid_00000000000c1434
uuid_00000000000c1432:
uuid_00000000000c1434:
	mov -736(%RBP),%RSP
	add $-840, %RSP
	mov %RSP, %R14
	add $72, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	movq 112(%R14), %R15
	movq %R15, 112(%RSP)
	movq 104(%R14), %R15
	movq %R15, 104(%RSP)
	movq 96(%R14), %R15
	movq %R15, 96(%RSP)
	movq 88(%R14), %R15
	movq %R15, 88(%RSP)
	movq 80(%R14), %R15
	movq %R15, 80(%RSP)
	movq 72(%R14), %R15
	movq %R15, 72(%RSP)
	movq 64(%R14), %R15
	movq %R15, 64(%RSP)
	movq 56(%R14), %R15
	movq %R15, 56(%RSP)
	movq 48(%R14), %R15
	movq %R15, 48(%RSP)
	movq 40(%R14), %R15
	movq %R15, 40(%RSP)
	movq 32(%R14), %R15
	movq %R15, 32(%RSP)
	movq 24(%R14), %R15
	movq %R15, 24(%RSP)
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000c1437
uuid_00000000000c1435:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
uuid_00000000000c1437:
	mov -480(%RBP),%RSP
	add $-848, %RSP
	jmp uuid_00000000000c143a
uuid_00000000000c1438:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1139
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c143a:
	mov -400(%RBP),%RSP
	add $-472, %RSP
	jmp uuid_00000000000c143d
uuid_00000000000c143b:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1139
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c143d:
	mov -320(%RBP),%RSP
	add $-392, %RSP
	push %RBP
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c143e
	mov %RSP, %R14
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000c1440
uuid_00000000000c143e:
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1395
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000c1395
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
uuid_00000000000c1440:
	mov -400(%RBP),%RSP
	add $-424, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $240, %rsp
	ret
add_SB_alias_CL_ArrowNilConsTypeConsStringString:
#call function cons : Arrow<Cons<Tuple<Tuple<String,String>,Type>,List<Tuple<Tuple<String,String>,Type>>>,List<Tuple<Tuple<String,String>,Type>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq $0
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	mov $alias_SB_index_CL_ListTupleTypeTupleStringStringListTupleTypeTupleStringStringCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call cons_CL_ArrowListTupleTypeTupleStringStringConsListTupleTypeTupleStringStringTupleTypeTupleStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	mov $alias_SB_index_CL_ListTupleTypeTupleStringStringListTupleTypeTupleStringStringCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	mov %rbp, %rsp
	sub $48, %rsp
	ret
find_SB_alias_CL_ArrowStringConsTypeString:
	pushq -8(%rbp)
	mov $alias_SB_index_CL_ListTupleTypeTupleStringStringListTupleTypeTupleStringStringCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000c14a3:
#call function non-zero : Arrow<List<Tuple<Tuple<String,String>,Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListTupleTypeTupleStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c14a4
	jmp uuid_00000000000c14a5
uuid_00000000000c14a4:
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1465
	jmp uuid_00000000000c1467
uuid_00000000000c1465:
	push %RBP
	mov -264(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1462
	jmp uuid_00000000000c1464
uuid_00000000000c1462:
	push %RBP
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	jmp uuid_00000000000c145f
	jmp uuid_00000000000c1461
uuid_00000000000c145f:
	movb $1, -280(%rbp)
uuid_00000000000c1461:
	mov -376(%RBP),%RSP
	add $-432, %RSP
uuid_00000000000c1464:
	mov -296(%RBP),%RSP
	add $-432, %RSP
uuid_00000000000c1467:
	mov -288(%RBP),%RSP
	add $-432, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c14a0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c149f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c14a2
uuid_00000000000c14a0:
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	push %RBP
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1492
	jmp uuid_00000000000c1494
uuid_00000000000c1492:
	push %RBP
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq $0
	push %RBP
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1480
	jmp uuid_00000000000c1482
uuid_00000000000c1480:
	push %RBP
	mov -592(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1477
	jmp uuid_00000000000c1479
uuid_00000000000c1477:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -728(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c146e
	jmp uuid_00000000000c1470
uuid_00000000000c146e:
	push %RBP
	mov -720(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -792(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c146b
	jmp uuid_00000000000c146d
uuid_00000000000c146b:
	push %RBP
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	jmp uuid_00000000000c1468
	jmp uuid_00000000000c146a
uuid_00000000000c1468:
	movb $1, -736(%rbp)
uuid_00000000000c146a:
	mov -800(%RBP),%RSP
	add $-824, %RSP
uuid_00000000000c146d:
	mov -752(%RBP),%RSP
	add $-824, %RSP
uuid_00000000000c1470:
	mov -744(%RBP),%RSP
	add $-824, %RSP
	mov -736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1474
	jmp uuid_00000000000c1476
uuid_00000000000c1474:
	push %RBP
	jmp uuid_00000000000c1471
	jmp uuid_00000000000c1473
uuid_00000000000c1471:
	movb $1, -672(%rbp)
uuid_00000000000c1473:
	mov -832(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c1476:
	mov -688(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c1479:
	mov -680(%RBP),%RSP
	add $-832, %RSP
	mov -672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c147d
	jmp uuid_00000000000c147f
uuid_00000000000c147d:
	push %RBP
	mov -584(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -848(%rbp)
	pushq $uuid_00000000000c13d4
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c147a
	jmp uuid_00000000000c147c
uuid_00000000000c147a:
	movb $1, -608(%rbp)
uuid_00000000000c147c:
	mov -840(%RBP),%RSP
	add $-848, %RSP
uuid_00000000000c147f:
	mov -624(%RBP),%RSP
	add $-848, %RSP
uuid_00000000000c1482:
	mov -616(%RBP),%RSP
	add $-848, %RSP
	mov -608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c148f
	jmp uuid_00000000000c1491
uuid_00000000000c148f:
	push %RBP
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1489
	jmp uuid_00000000000c148b
uuid_00000000000c1489:
	push %RBP
	mov -872(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1486
	jmp uuid_00000000000c1488
uuid_00000000000c1486:
	push %RBP
	mov -864(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1483
	jmp uuid_00000000000c1485
uuid_00000000000c1483:
	movb $1, -888(%rbp)
uuid_00000000000c1485:
	mov -920(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c1488:
	mov -904(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c148b:
	mov -896(%RBP),%RSP
	add $-928, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c148c
	jmp uuid_00000000000c148e
uuid_00000000000c148c:
	movb $1, -560(%rbp)
uuid_00000000000c148e:
	mov -856(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c1491:
	mov -576(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c1494:
	mov -568(%RBP),%RSP
	add $-928, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c149c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c149b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c149e
uuid_00000000000c149c:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -928(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1498
	jmp uuid_00000000000c149a
uuid_00000000000c1498:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1495
	jmp uuid_00000000000c1497
uuid_00000000000c1495:
	movq -912(%rbp), %r15
	movq %r15, -48(%rbp)
	mov -912(%rbp), %r15
	mov %r15, -48(%rbp)
uuid_00000000000c1497:
	mov -944(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c149a:
	mov -936(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c149e:
	mov -496(%RBP),%RSP
	add $-944, %RSP
	movq -368(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -320(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -312(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -304(%rbp), %r15
	movq %r15, -56(%rbp)
uuid_00000000000c14a2:
	mov -200(%RBP),%RSP
	add $-944, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $56, %rsp
	add $56, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c14a3
uuid_00000000000c14a5:
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
find_SB_alias_SB_type_CL_ArrowTypeString:
	pushq $0
	pushq $0
	pushq $3
	mov $alias_SB_index_CL_ListTupleTypeTupleStringStringListTupleTypeTupleStringStringCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000c14db:
#call function non-zero : Arrow<List<Tuple<Tuple<String,String>,Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListTupleTypeTupleStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c14dc
	jmp uuid_00000000000c14dd
uuid_00000000000c14dc:
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c14b8
	jmp uuid_00000000000c14ba
uuid_00000000000c14b8:
	push %RBP
	mov -256(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c14b5
	jmp uuid_00000000000c14b7
uuid_00000000000c14b5:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq -240(%RBP)
	pushq -248(%RBP)
	jmp uuid_00000000000c14b2
	jmp uuid_00000000000c14b4
uuid_00000000000c14b2:
	movb $1, -272(%rbp)
uuid_00000000000c14b4:
	mov -368(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c14b7:
	mov -288(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c14ba:
	mov -280(%RBP),%RSP
	add $-424, %RSP
	mov -272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c14d8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c14d7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c14da
uuid_00000000000c14d8:
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	push %RBP
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c14ca
	jmp uuid_00000000000c14cc
uuid_00000000000c14ca:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000c14c7
	jmp uuid_00000000000c14c9
uuid_00000000000c14c7:
	push %RBP
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq $0
	push %RBP
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c14c1
	jmp uuid_00000000000c14c3
uuid_00000000000c14c1:
	push %RBP
	mov -616(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c14be
	jmp uuid_00000000000c14c0
uuid_00000000000c14be:
	push %RBP
	mov -608(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c14bb
	jmp uuid_00000000000c14bd
uuid_00000000000c14bb:
	movb $1, -632(%rbp)
uuid_00000000000c14bd:
	mov -664(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c14c0:
	mov -648(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c14c3:
	mov -640(%RBP),%RSP
	add $-672, %RSP
	mov -632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c14c4
	jmp uuid_00000000000c14c6
uuid_00000000000c14c4:
	movb $1, -552(%rbp)
uuid_00000000000c14c6:
	mov -600(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c14c9:
	mov -568(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c14cc:
	mov -560(%RBP),%RSP
	add $-672, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c14d4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c14d3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c14d6
uuid_00000000000c14d4:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -672(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c14d0
	jmp uuid_00000000000c14d2
uuid_00000000000c14d0:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c14cd
	movq -592(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -584(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -576(%rbp), %r15
	movq %r15, -24(%rbp)
	jmp uuid_00000000000c14cf
uuid_00000000000c14cd:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c14cf:
	mov -688(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000c14d2:
	mov -680(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000c14d6:
	mov -488(%RBP),%RSP
	add $-688, %RSP
	movq -360(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -320(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -312(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -304(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -296(%rbp), %r15
	movq %r15, -48(%rbp)
uuid_00000000000c14da:
	mov -192(%RBP),%RSP
	add $-688, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $56, %rsp
	add $56, %rsp
	add $8, %rsp
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c14db
uuid_00000000000c14dd:
	subq $24, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
mark_SB_class_SB_exists_CL_ArrowNilString:
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,HashtableEq<String,U64>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_exists_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqU64StringConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $class_SB_exists_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $16, %rsp
	ret
mark_SB_parameter_SB_flat_CL_ArrowNilConsU64ConsU64String:
#call function .bind : Arrow<Cons<Cons<Array<BTreeEq<Tuple<Tuple<String,U64>,U64>,U64>,?>,Tuple<Tuple<String,U64>,U64>>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov	$parameter_SB_is_SB_flat_SB_index_CL_BTreeEqU64TupleU64TupleU64StringBTreeEqU64TupleU64TupleU64StringCaseNumber0, %r12
	push %R12
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq $0
	pushq -24(%rbp)
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowNilConsU64ConsTupleU64TupleU64StringArray_QM_BTreeEqU64TupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_parameter_SB_flat_CL_ArrowU64ConsU64ConsU64String:
#call function .lookup : Arrow<Cons<Cons<BTreeEq<Tuple<Tuple<String,U64>,U64>,U64>,Tuple<Tuple<String,U64>,U64>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $parameter_SB_is_SB_flat_SB_index_CL_BTreeEqU64TupleU64TupleU64StringBTreeEqU64TupleU64TupleU64StringCaseNumber0, %r15
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq $0
	pushq -24(%rbp)
	pushq $0
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsTupleU64TupleU64StringBTreeEqU64TupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
mark_SB_as_SB_special_CL_ArrowNilConsTypeString:
#call function .bind : Arrow<Cons<Cons<Array<BTreeEq<Tuple<String,Type>,U64>,?>,Tuple<String,Type>>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov	$is_SB_special_SB_index_CL_BTreeEqU64TupleTypeStringBTreeEqU64TupleTypeStringCaseNumber0, %r12
	push %R12
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowNilConsU64ConsTupleTypeStringArray_QM_BTreeEqU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
is_SB_special_CL_ArrowU64ConsTypeString:
#call function .lookup : Arrow<Cons<Cons<BTreeEq<Tuple<String,Type>,U64>,Tuple<String,Type>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $is_SB_special_SB_index_CL_BTreeEqU64TupleTypeStringBTreeEqU64TupleTypeStringCaseNumber0, %r15
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsTupleTypeStringBTreeEqU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
index_SB_lone_SB_tag_CL_ArrowNilString:
#call function .bind : Arrow<Cons<Cons<Array<BTreeEq<String,U64>,?>,String>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov	$lone_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %r12
	push %R12
	pushq -8(%rbp)
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowNilConsU64ConsStringArray_QM_BTreeEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_lone_SB_tag_CL_ArrowU64String:
#call function .lookup : Arrow<Cons<Cons<BTreeEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $lone_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringBTreeEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
index_SB_tag_SB_is_SB_fragment_CL_ArrowNilString:
#call function .bind : Arrow<Cons<Cons<Array<BTreeEq<String,U64>,?>,String>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov	$tag_SB_is_SB_fragment_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %r12
	push %R12
	pushq -8(%rbp)
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowNilConsU64ConsStringArray_QM_BTreeEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_fragment_CL_ArrowU64String:
#call function .lookup : Arrow<Cons<Cons<BTreeEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_is_SB_fragment_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringBTreeEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_fragment_CL_ArrowU64Type:
#call function is-fragment : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function tag-of : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call tag_SB_of_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call is_SB_fragment_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
mark_SB_global_SB_as_SB_seen_CL_ArrowNilConsTypeConsTypeString:
	push %RBP
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function global-is-seen : Arrow<Cons<String,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call global_SB_is_SB_seen_CL_ArrowU64ConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1528
#call function .bind : Arrow<Cons<Cons<Array<BTreeEq<Tuple<String,Type>,U64>,?>,Tuple<String,Type>>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov	$global_SB_symbol_SB_registry_CL_BTreeEqU64TupleTypeStringBTreeEqU64TupleTypeStringCaseNumber0, %r12
	push %R12
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowNilConsU64ConsTupleTypeStringArray_QM_BTreeEqU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c152a
uuid_00000000000c1528:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1526
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1527
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c152a:
	mov -72(%RBP),%RSP
	add $-72, %RSP
	mov %rbp, %rsp
	sub $64, %rsp
	ret
global_SB_is_SB_seen_CL_ArrowU64ConsTypeString:
#call function .lookup : Arrow<Cons<Cons<BTreeEq<Tuple<String,Type>,U64>,Tuple<String,Type>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_symbol_SB_registry_CL_BTreeEqU64TupleTypeStringBTreeEqU64TupleTypeStringCaseNumber0, %r15
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsTupleTypeStringBTreeEqU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
has_SB_only_SB_child_CL_ArrowNilConsStringString:
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,String>,String>,String>,HashtableEq<String,String>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_to_SB_only_SB_child_CL_HashtableEqStringString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqStringStringConsStringConsStringHashtableEqStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $class_SB_to_SB_only_SB_child_CL_HashtableEqStringString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $24, %rsp
	ret
get_SB_only_SB_child_CL_ArrowStringString:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,String>,String>,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_to_SB_only_SB_child_CL_HashtableEqStringString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $uuid_00000000000c0dfc
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowStringConsStringConsStringHashtableEqStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
index_SB_of_SB_tag_CL_ArrowU64String:
#call function .lookup : Arrow<Cons<Cons<BTreeEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_to_SB_index_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	mov $unknown_SB_index_SB_of_SB_tag_CL_U64, %r15
	pushq 0(%r15)
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringBTreeEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
index_SB_index_SB_of_SB_tag_CL_ArrowNilConsU64String:
#call function .bind : Arrow<Cons<Cons<Array<BTreeEq<String,U64>,?>,String>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov	$tag_SB_to_SB_index_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %r12
	push %R12
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowNilConsU64ConsStringArray_QM_BTreeEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
index_SB_size_SB_of_SB_class_CL_ArrowNilConsU64String:
#call function .bind : Arrow<Cons<Cons<Array<BTreeEq<String,U64>,?>,String>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov	$class_SB_to_SB_size_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %r12
	push %R12
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowNilConsU64ConsStringArray_QM_BTreeEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
size_SB_of_SB_class_CL_ArrowU64String:
#call function .lookup : Arrow<Cons<Cons<BTreeEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_to_SB_size_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringBTreeEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
index_SB_class_SB_of_SB_tag_CL_ArrowNilConsTypeString:
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,Type>,String>,Type>,HashtableEq<String,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_to_SB_class_SB_index_CL_HashtableEqTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqTypeStringConsTypeConsStringHashtableEqTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov $tag_SB_to_SB_class_SB_index_CL_HashtableEqTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1555
	jmp uuid_00000000000c1557
uuid_00000000000c1555:
	push %RBP
	jmp uuid_00000000000c1552
	jmp uuid_00000000000c1554
uuid_00000000000c1552:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c154f
	jmp uuid_00000000000c1551
uuid_00000000000c154f:
	movb $1, -104(%rbp)
uuid_00000000000c1551:
	mov -128(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000c1554:
	mov -120(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000c1557:
	mov -112(%RBP),%RSP
	add $-136, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c155d
	push %RBP
	jmp uuid_00000000000c155a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c1559
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c155c
uuid_00000000000c155a:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1558
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c155c:
	mov -144(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c155f
uuid_00000000000c155d:
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,HashtableEq<String,U64>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_to_SB_yes_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -136(%rbp)
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqU64StringConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $class_SB_to_SB_yes_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
uuid_00000000000c155f:
	mov -72(%RBP),%RSP
	add $-136, %RSP
	mov %rbp, %rsp
	sub $40, %rsp
	ret
class_SB_of_SB_tag_CL_ArrowTypeString:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,Type>,String>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_to_SB_class_SB_index_CL_HashtableEqTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowTypeConsTypeConsStringHashtableEqTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	subq $24, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_class_CL_ArrowU64String:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_to_SB_yes_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
index_SB_fields_SB_of_SB_tag_CL_ArrowNilConsTypeConsTypeString:
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,Tuple<Type,Type>>,String>,Tuple<Type,Type>>,HashtableEq<String,Tuple<Type,Type>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_to_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqTupleTypeTypeStringConsTupleTypeTypeConsStringHashtableEqTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	mov $tag_SB_to_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $64, %rsp
	ret
fields_SB_of_SB_tag_CL_ArrowTupleTypeTypeString:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,Tuple<Type,Type>>,String>,Tuple<Type,Type>>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_to_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowTupleTypeTypeConsTupleTypeTypeConsStringHashtableEqTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	subq $56, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
fields_SB_of_SB_tag_CL_ArrowTypeConsTypeType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	push %RBP
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1579
	jmp uuid_00000000000c157b
uuid_00000000000c1579:
	push %RBP
	mov -128(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c156f
	jmp uuid_00000000000c1571
uuid_00000000000c156f:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c156c
	jmp uuid_00000000000c156e
uuid_00000000000c156c:
	push %RBP
	pushq -168(%RBP)
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1566
	jmp uuid_00000000000c1568
uuid_00000000000c1566:
	push %RBP
	jmp uuid_00000000000c1563
	jmp uuid_00000000000c1565
uuid_00000000000c1563:
	push %RBP
	mov -280(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1560
	jmp uuid_00000000000c1562
uuid_00000000000c1560:
	movb $1, -304(%rbp)
uuid_00000000000c1562:
	mov -328(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c1565:
	mov -320(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c1568:
	mov -312(%RBP),%RSP
	add $-336, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1569
	jmp uuid_00000000000c156b
uuid_00000000000c1569:
	movb $1, -208(%rbp)
uuid_00000000000c156b:
	mov -272(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c156e:
	mov -224(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c1571:
	mov -216(%RBP),%RSP
	add $-336, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1576
	jmp uuid_00000000000c1578
uuid_00000000000c1576:
	push %RBP
	mov -120(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -352(%rbp)
	pushq $uuid_00000000000c1572
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1573
	jmp uuid_00000000000c1575
uuid_00000000000c1573:
	movb $1, -144(%rbp)
uuid_00000000000c1575:
	mov -344(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c1578:
	mov -160(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c157b:
	mov -152(%RBP),%RSP
	add $-352, %RSP
	mov -144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c159a
	push %RBP
	jmp uuid_00000000000c1597
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c1596
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1599
uuid_00000000000c1597:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1595
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1599:
	mov -360(%RBP),%RSP
	add $-360, %RSP
	jmp uuid_00000000000c159c
uuid_00000000000c159a:
#call function fields-of-tag : Arrow<String,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	mov %RBX, %RBP
	call fields_SB_of_SB_tag_CL_ArrowTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push %RBP
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq $0
	push %RBP
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1582
	jmp uuid_00000000000c1584
uuid_00000000000c1582:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	mov -520(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c157f
	jmp uuid_00000000000c1581
uuid_00000000000c157f:
	push %RBP
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c157c
	jmp uuid_00000000000c157e
uuid_00000000000c157c:
	movb $1, -480(%rbp)
uuid_00000000000c157e:
	mov -528(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000c1581:
	mov -496(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000c1584:
	mov -488(%RBP),%RSP
	add $-552, %RSP
	mov -480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1592
	push %RBP
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c158b
	jmp uuid_00000000000c158d
uuid_00000000000c158b:
	push %RBP
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	jmp uuid_00000000000c1588
	jmp uuid_00000000000c158a
uuid_00000000000c1588:
	push %RBP
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	jmp uuid_00000000000c1585
	jmp uuid_00000000000c1587
uuid_00000000000c1585:
	movb $1, -624(%rbp)
uuid_00000000000c1587:
	mov -672(%RBP),%RSP
	add $-696, %RSP
uuid_00000000000c158a:
	mov -640(%RBP),%RSP
	add $-696, %RSP
uuid_00000000000c158d:
	mov -632(%RBP),%RSP
	add $-696, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c158f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c158e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1591
uuid_00000000000c158f:
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c1591:
	mov -560(%RBP),%RSP
	add $-696, %RSP
	jmp uuid_00000000000c1594
uuid_00000000000c1592:
uuid_00000000000c1594:
	mov -416(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000c159c:
	mov -112(%RBP),%RSP
	add $-552, %RSP
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	pushq $uuid_00000000000c159d
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fields-of-type : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1157
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c129d
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1393
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0dc0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call fields_SB_of_SB_type_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	subq $24, %rsp
	pushq -576(%rbp)
	pushq -568(%rbp)
	pushq -560(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
set_SB_type_SB_fields_CL_ArrowNilConsTypeType:
	pushq $uuid_00000000000c0dfc
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c15b2
	jmp uuid_00000000000c15b4
uuid_00000000000c15b2:
	push %RBP
	jmp uuid_00000000000c15af
	jmp uuid_00000000000c15b1
uuid_00000000000c15af:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c15ac
	jmp uuid_00000000000c15ae
uuid_00000000000c15ac:
	movb $1, -128(%rbp)
uuid_00000000000c15ae:
	mov -152(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000c15b1:
	mov -144(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000c15b4:
	mov -136(%RBP),%RSP
	add $-160, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c15ba
	push %RBP
	jmp uuid_00000000000c15b7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c15b6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c15b9
uuid_00000000000c15b7:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c15b5
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c15b9:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000c15bc
uuid_00000000000c15ba:
	movq -160(%rbp), %r15
	movq %r15, -64(%rbp)
	mov -160(%rbp), %r15
	mov %r15, -64(%rbp)
uuid_00000000000c15bc:
	mov -96(%RBP),%RSP
	add $-160, %RSP
#call function .bind : Arrow<Cons<Cons<Array<BTreeEq<String,Tuple<Type,Type>>,?>,String>,Tuple<Type,Type>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov	$type_SB_complex_SB_fields_SB_index_CL_BTreeEqTupleTypeTypeStringBTreeEqTupleTypeTypeStringCaseNumber0, %r12
	push %R12
	pushq -64(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowNilConsTupleTypeTypeConsStringArray_QM_BTreeEqTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
get_SB_vararg_SB_inner_CL_ArrowTypeType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c15c3
	jmp uuid_00000000000c15c5
uuid_00000000000c15c3:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c15c0
	jmp uuid_00000000000c15c2
uuid_00000000000c15c0:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c15bd
	jmp uuid_00000000000c15bf
uuid_00000000000c15bd:
	movb $1, -120(%rbp)
uuid_00000000000c15bf:
	mov -168(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000c15c2:
	mov -136(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000c15c5:
	mov -128(%RBP),%RSP
	add $-192, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c15e5
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c15db
	jmp uuid_00000000000c15dd
uuid_00000000000c15db:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -288(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c15d2
	jmp uuid_00000000000c15d4
uuid_00000000000c15d2:
	push %RBP
	jmp uuid_00000000000c15cf
	jmp uuid_00000000000c15d1
uuid_00000000000c15cf:
	push %RBP
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	jmp uuid_00000000000c15cc
	jmp uuid_00000000000c15ce
uuid_00000000000c15cc:
	movb $1, -296(%rbp)
uuid_00000000000c15ce:
	mov -320(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000c15d1:
	mov -312(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000c15d4:
	mov -304(%RBP),%RSP
	add $-344, %RSP
	mov -296(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c15d8
	jmp uuid_00000000000c15da
uuid_00000000000c15d8:
	push %RBP
	mov -208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq $uuid_00000000000c10a1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c15d5
	jmp uuid_00000000000c15d7
uuid_00000000000c15d5:
	movb $1, -232(%rbp)
uuid_00000000000c15d7:
	mov -352(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000c15da:
	mov -248(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000c15dd:
	mov -240(%RBP),%RSP
	add $-360, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c15e2
	push %RBP
	jmp uuid_00000000000c15df
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c15de
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c15e1
uuid_00000000000c15df:
uuid_00000000000c15e1:
	mov -368(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000c15e4
uuid_00000000000c15e2:
	movq -344(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000c15e4:
	mov -200(%RBP),%RSP
	add $-360, %RSP
	jmp uuid_00000000000c15e7
uuid_00000000000c15e5:
#call function get-vararg-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call get_SB_vararg_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c15c6
	jmp uuid_00000000000c15c8
uuid_00000000000c15c6:
	movq -192(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000c15c8:
	mov -200(%RBP),%RSP
	add $-200, %RSP
#call function get-vararg-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call get_SB_vararg_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c15c9
	jmp uuid_00000000000c15cb
uuid_00000000000c15c9:
	movq -160(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -152(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -144(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000c15cb:
	mov -208(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000c15e7:
	mov -88(%RBP),%RSP
	add $-208, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString:
#call function apply : Arrow<Cons<Cons<Cons<Cons<Cons<String,Type>,Type>,U64>,AST>,U64>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $1
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq $0
	mov %RBX, %RBP
	call apply_CL_ArrowTupleTypeTypeConsU64ConsASTConsU64ConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
is_SB_constructor_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c15ee
	jmp uuid_00000000000c15f0
uuid_00000000000c15ee:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c15eb
	jmp uuid_00000000000c15ed
uuid_00000000000c15eb:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c15e8
	jmp uuid_00000000000c15ea
uuid_00000000000c15e8:
	movb $1, -104(%rbp)
uuid_00000000000c15ea:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c15ed:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c15f0:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1619
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c15f7
	jmp uuid_00000000000c15f9
uuid_00000000000c15f7:
	push %RBP
	jmp uuid_00000000000c15f4
	jmp uuid_00000000000c15f6
uuid_00000000000c15f4:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c1391
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c15f1
	jmp uuid_00000000000c15f3
uuid_00000000000c15f1:
	movb $1, -216(%rbp)
uuid_00000000000c15f3:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c15f6:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c15f9:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1616
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1600
	jmp uuid_00000000000c1602
uuid_00000000000c1600:
	push %RBP
	jmp uuid_00000000000c15fd
	jmp uuid_00000000000c15ff
uuid_00000000000c15fd:
	push %RBP
	mov -264(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -320(%rbp)
	pushq $uuid_00000000000c13d4
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c15fa
	jmp uuid_00000000000c15fc
uuid_00000000000c15fa:
	movb $1, -288(%rbp)
uuid_00000000000c15fc:
	mov -312(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c15ff:
	mov -304(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c1602:
	mov -296(%RBP),%RSP
	add $-320, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1613
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1609
	jmp uuid_00000000000c160b
uuid_00000000000c1609:
	push %RBP
	jmp uuid_00000000000c1606
	jmp uuid_00000000000c1608
uuid_00000000000c1606:
	push %RBP
	mov -336(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -392(%rbp)
	pushq $uuid_00000000000c1157
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1603
	jmp uuid_00000000000c1605
uuid_00000000000c1603:
	movb $1, -360(%rbp)
uuid_00000000000c1605:
	mov -384(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000c1608:
	mov -376(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000c160b:
	mov -368(%RBP),%RSP
	add $-392, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1610
	push %RBP
	jmp uuid_00000000000c160d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c160c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c160f
uuid_00000000000c160d:
uuid_00000000000c160f:
	mov -400(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000c1612
uuid_00000000000c1610:
#call function is-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call is_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000c1612:
	mov -328(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000c1615
uuid_00000000000c1613:
#call function is-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call is_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000c1615:
	mov -256(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000c1618
uuid_00000000000c1616:
	movq $1, -40(%rbp)
uuid_00000000000c1618:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c161b
uuid_00000000000c1619:
#call function is-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c161b:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_simple_SB_constructor_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1622
	jmp uuid_00000000000c1624
uuid_00000000000c1622:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c161f
	jmp uuid_00000000000c1621
uuid_00000000000c161f:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c161c
	jmp uuid_00000000000c161e
uuid_00000000000c161c:
	movb $1, -104(%rbp)
uuid_00000000000c161e:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c1621:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c1624:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1635
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c162b
	jmp uuid_00000000000c162d
uuid_00000000000c162b:
	push %RBP
	jmp uuid_00000000000c1628
	jmp uuid_00000000000c162a
uuid_00000000000c1628:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c1391
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1625
	jmp uuid_00000000000c1627
uuid_00000000000c1625:
	movb $1, -216(%rbp)
uuid_00000000000c1627:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c162a:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c162d:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1632
	push %RBP
	jmp uuid_00000000000c162f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c162e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1631
uuid_00000000000c162f:
uuid_00000000000c1631:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c1634
uuid_00000000000c1632:
	movq $1, -40(%rbp)
uuid_00000000000c1634:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c1637
uuid_00000000000c1635:
#call function is-simple-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_simple_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-simple-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_simple_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c1637:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_tag_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c163e
	jmp uuid_00000000000c1640
uuid_00000000000c163e:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c163b
	jmp uuid_00000000000c163d
uuid_00000000000c163b:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1638
	jmp uuid_00000000000c163a
uuid_00000000000c1638:
	movb $1, -104(%rbp)
uuid_00000000000c163a:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c163d:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c1640:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1651
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1647
	jmp uuid_00000000000c1649
uuid_00000000000c1647:
	push %RBP
	jmp uuid_00000000000c1644
	jmp uuid_00000000000c1646
uuid_00000000000c1644:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c1572
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1641
	jmp uuid_00000000000c1643
uuid_00000000000c1641:
	movb $1, -216(%rbp)
uuid_00000000000c1643:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c1646:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c1649:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c164e
	push %RBP
	jmp uuid_00000000000c164b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c164a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c164d
uuid_00000000000c164b:
uuid_00000000000c164d:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c1650
uuid_00000000000c164e:
	movq $1, -40(%rbp)
uuid_00000000000c1650:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c1653
uuid_00000000000c1651:
#call function is-tag : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_tag_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-tag : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_tag_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c1653:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_open_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c16ea
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -128(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1657
	jmp uuid_00000000000c1659
uuid_00000000000c1657:
	push %RBP
	jmp uuid_00000000000c1654
	jmp uuid_00000000000c1656
uuid_00000000000c1654:
	movb $1, -136(%rbp)
uuid_00000000000c1656:
	mov -152(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000c1659:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	mov -136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c16e7
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1660
	jmp uuid_00000000000c1662
uuid_00000000000c1660:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c165d
	jmp uuid_00000000000c165f
uuid_00000000000c165d:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c165a
	jmp uuid_00000000000c165c
uuid_00000000000c165a:
	movb $1, -192(%rbp)
uuid_00000000000c165c:
	mov -240(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c165f:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c1662:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c16e4
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1681
	jmp uuid_00000000000c1683
uuid_00000000000c1681:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -360(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1678
	jmp uuid_00000000000c167a
uuid_00000000000c1678:
	push %RBP
	mov -352(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -424(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c166f
	jmp uuid_00000000000c1671
uuid_00000000000c166f:
	push %RBP
	mov -416(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c166c
	jmp uuid_00000000000c166e
uuid_00000000000c166c:
	push %RBP
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	mov -520(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1669
	jmp uuid_00000000000c166b
uuid_00000000000c1669:
	movb $1, -432(%rbp)
uuid_00000000000c166b:
	mov -496(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c166e:
	mov -448(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c1671:
	mov -440(%RBP),%RSP
	add $-520, %RSP
	mov -432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1675
	jmp uuid_00000000000c1677
uuid_00000000000c1675:
	push %RBP
	jmp uuid_00000000000c1672
	jmp uuid_00000000000c1674
uuid_00000000000c1672:
	movb $1, -368(%rbp)
uuid_00000000000c1674:
	mov -528(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000c1677:
	mov -384(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000c167a:
	mov -376(%RBP),%RSP
	add $-528, %RSP
	mov -368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c167e
	jmp uuid_00000000000c1680
uuid_00000000000c167e:
	push %RBP
	mov -280(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -544(%rbp)
	pushq $uuid_00000000000c12d1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c167b
	jmp uuid_00000000000c167d
uuid_00000000000c167b:
	movb $1, -304(%rbp)
uuid_00000000000c167d:
	mov -536(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000c1680:
	mov -320(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000c1683:
	mov -312(%RBP),%RSP
	add $-544, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c16e1
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -576(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c169c
	jmp uuid_00000000000c169e
uuid_00000000000c169c:
	push %RBP
	mov -568(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -640(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1693
	jmp uuid_00000000000c1695
uuid_00000000000c1693:
	push %RBP
	mov -632(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -704(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c168a
	jmp uuid_00000000000c168c
uuid_00000000000c168a:
	push %RBP
	mov -696(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -768(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1687
	jmp uuid_00000000000c1689
uuid_00000000000c1687:
	push %RBP
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq -688(%RBP)
	jmp uuid_00000000000c1684
	jmp uuid_00000000000c1686
uuid_00000000000c1684:
	movb $1, -712(%rbp)
uuid_00000000000c1686:
	mov -776(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c1689:
	mov -728(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c168c:
	mov -720(%RBP),%RSP
	add $-800, %RSP
	mov -712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1690
	jmp uuid_00000000000c1692
uuid_00000000000c1690:
	push %RBP
	jmp uuid_00000000000c168d
	jmp uuid_00000000000c168f
uuid_00000000000c168d:
	movb $1, -648(%rbp)
uuid_00000000000c168f:
	mov -808(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c1692:
	mov -664(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c1695:
	mov -656(%RBP),%RSP
	add $-808, %RSP
	mov -648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1699
	jmp uuid_00000000000c169b
uuid_00000000000c1699:
	push %RBP
	mov -560(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -824(%rbp)
	pushq $uuid_00000000000c12d1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1696
	jmp uuid_00000000000c1698
uuid_00000000000c1696:
	movb $1, -584(%rbp)
uuid_00000000000c1698:
	mov -816(%RBP),%RSP
	add $-824, %RSP
uuid_00000000000c169b:
	mov -600(%RBP),%RSP
	add $-824, %RSP
uuid_00000000000c169e:
	mov -592(%RBP),%RSP
	add $-824, %RSP
	mov -584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c16de
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -856(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c16b8
	jmp uuid_00000000000c16ba
uuid_00000000000c16b8:
	push %RBP
	mov -848(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c16ae
	jmp uuid_00000000000c16b0
uuid_00000000000c16ae:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -984(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c16a5
	jmp uuid_00000000000c16a7
uuid_00000000000c16a5:
	push %RBP
	mov -976(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1048(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c16a2
	jmp uuid_00000000000c16a4
uuid_00000000000c16a2:
	push %RBP
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	jmp uuid_00000000000c169f
	jmp uuid_00000000000c16a1
uuid_00000000000c169f:
	movb $1, -992(%rbp)
uuid_00000000000c16a1:
	mov -1056(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000c16a4:
	mov -1008(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000c16a7:
	mov -1000(%RBP),%RSP
	add $-1080, %RSP
	mov -992(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c16ab
	jmp uuid_00000000000c16ad
uuid_00000000000c16ab:
	push %RBP
	jmp uuid_00000000000c16a8
	jmp uuid_00000000000c16aa
uuid_00000000000c16a8:
	movb $1, -928(%rbp)
uuid_00000000000c16aa:
	mov -1088(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000c16ad:
	mov -944(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000c16b0:
	mov -936(%RBP),%RSP
	add $-1088, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c16b5
	jmp uuid_00000000000c16b7
uuid_00000000000c16b5:
	push %RBP
	mov -840(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1104(%rbp)
	pushq $uuid_00000000000c16b1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c16b2
	jmp uuid_00000000000c16b4
uuid_00000000000c16b2:
	movb $1, -864(%rbp)
uuid_00000000000c16b4:
	mov -1096(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000c16b7:
	mov -880(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000c16ba:
	mov -872(%RBP),%RSP
	add $-1104, %RSP
	mov -864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c16db
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c16c1
	jmp uuid_00000000000c16c3
uuid_00000000000c16c1:
	push %RBP
	mov -1128(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c16be
	jmp uuid_00000000000c16c0
uuid_00000000000c16be:
	push %RBP
	jmp uuid_00000000000c16bb
	jmp uuid_00000000000c16bd
uuid_00000000000c16bb:
	movb $1, -1144(%rbp)
uuid_00000000000c16bd:
	mov -1208(%RBP),%RSP
	add $-1208, %RSP
uuid_00000000000c16c0:
	mov -1160(%RBP),%RSP
	add $-1208, %RSP
uuid_00000000000c16c3:
	mov -1152(%RBP),%RSP
	add $-1208, %RSP
	mov -1144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c16d8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c16d7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c16da
uuid_00000000000c16d8:
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
uuid_00000000000c16d4:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c16d5
	jmp uuid_00000000000c16d6
uuid_00000000000c16d5:
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	push %RBP
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq $0
	push %RBP
	mov -1336(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c16ca
	jmp uuid_00000000000c16cc
uuid_00000000000c16ca:
	push %RBP
	mov -1328(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c16c7
	jmp uuid_00000000000c16c9
uuid_00000000000c16c7:
	push %RBP
	pushq -1304(%RBP)
	pushq -1312(%RBP)
	pushq -1320(%RBP)
	jmp uuid_00000000000c16c4
	jmp uuid_00000000000c16c6
uuid_00000000000c16c4:
	movb $1, -1344(%rbp)
uuid_00000000000c16c6:
	mov -1408(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000c16c9:
	mov -1360(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000c16cc:
	mov -1352(%RBP),%RSP
	add $-1432, %RSP
	mov -1344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c16d1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c16d0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c16d3
uuid_00000000000c16d1:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c16cd
	jmp uuid_00000000000c16cf
uuid_00000000000c16cd:
	movq $1, -40(%rbp)
uuid_00000000000c16cf:
	mov -1440(%RBP),%RSP
	add $-1440, %RSP
	movq -1400(%rbp), %r15
	movq %r15, -1248(%rbp)
	movq -1392(%rbp), %r15
	movq %r15, -1240(%rbp)
	movq -1384(%rbp), %r15
	movq %r15, -1232(%rbp)
	movq -1376(%rbp), %r15
	movq %r15, -1224(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -1216(%rbp)
uuid_00000000000c16d3:
	mov -1296(%RBP),%RSP
	add $-1440, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c16d4
uuid_00000000000c16d6:
uuid_00000000000c16da:
	mov -1112(%RBP),%RSP
	add $-1248, %RSP
	jmp uuid_00000000000c16dd
uuid_00000000000c16db:
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000c16dd:
	mov -832(%RBP),%RSP
	add $-1104, %RSP
	jmp uuid_00000000000c16e0
uuid_00000000000c16de:
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000c16e0:
	mov -552(%RBP),%RSP
	add $-824, %RSP
	jmp uuid_00000000000c16e3
uuid_00000000000c16e1:
uuid_00000000000c16e3:
	mov -272(%RBP),%RSP
	add $-544, %RSP
	jmp uuid_00000000000c16e6
uuid_00000000000c16e4:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1663
	jmp uuid_00000000000c1665
uuid_00000000000c1663:
	movq $1, -40(%rbp)
uuid_00000000000c1665:
	mov -272(%RBP),%RSP
	add $-272, %RSP
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1666
	jmp uuid_00000000000c1668
uuid_00000000000c1666:
	movq $1, -40(%rbp)
uuid_00000000000c1668:
	mov -280(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c16e6:
	mov -160(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c16e9
uuid_00000000000c16e7:
	movq $1, -40(%rbp)
uuid_00000000000c16e9:
	mov -104(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000c16ec
uuid_00000000000c16ea:
	movq $1, -40(%rbp)
uuid_00000000000c16ec:
	mov -72(%RBP),%RSP
	add $-96, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_vararg_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c16f3
	jmp uuid_00000000000c16f5
uuid_00000000000c16f3:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c16f0
	jmp uuid_00000000000c16f2
uuid_00000000000c16f0:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c16ed
	jmp uuid_00000000000c16ef
uuid_00000000000c16ed:
	movb $1, -104(%rbp)
uuid_00000000000c16ef:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c16f2:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c16f5:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1706
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c16fc
	jmp uuid_00000000000c16fe
uuid_00000000000c16fc:
	push %RBP
	jmp uuid_00000000000c16f9
	jmp uuid_00000000000c16fb
uuid_00000000000c16f9:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c10a1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c16f6
	jmp uuid_00000000000c16f8
uuid_00000000000c16f6:
	movb $1, -216(%rbp)
uuid_00000000000c16f8:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c16fb:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c16fe:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1703
	push %RBP
	jmp uuid_00000000000c1700
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c16ff
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1702
uuid_00000000000c1700:
uuid_00000000000c1702:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c1705
uuid_00000000000c1703:
	movq $1, -40(%rbp)
uuid_00000000000c1705:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c1708
uuid_00000000000c1706:
#call function is-vararg : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_vararg_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-vararg : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_vararg_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c1708:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_parameterized_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1718
	jmp uuid_00000000000c171a
uuid_00000000000c1718:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c170f
	jmp uuid_00000000000c1711
uuid_00000000000c170f:
	push %RBP
	jmp uuid_00000000000c170c
	jmp uuid_00000000000c170e
uuid_00000000000c170c:
	push %RBP
	jmp uuid_00000000000c1709
	jmp uuid_00000000000c170b
uuid_00000000000c1709:
	movb $1, -168(%rbp)
uuid_00000000000c170b:
	mov -192(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000c170e:
	mov -184(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000c1711:
	mov -176(%RBP),%RSP
	add $-192, %RSP
	mov -168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1715
	jmp uuid_00000000000c1717
uuid_00000000000c1715:
	push %RBP
	jmp uuid_00000000000c1712
	jmp uuid_00000000000c1714
uuid_00000000000c1712:
	movb $1, -104(%rbp)
uuid_00000000000c1714:
	mov -200(%RBP),%RSP
	add $-200, %RSP
uuid_00000000000c1717:
	mov -120(%RBP),%RSP
	add $-200, %RSP
uuid_00000000000c171a:
	mov -112(%RBP),%RSP
	add $-200, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1731
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1721
	jmp uuid_00000000000c1723
uuid_00000000000c1721:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c171e
	jmp uuid_00000000000c1720
uuid_00000000000c171e:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c171b
	jmp uuid_00000000000c171d
uuid_00000000000c171b:
	movb $1, -240(%rbp)
uuid_00000000000c171d:
	mov -288(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c1720:
	mov -256(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c1723:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c172e
	push %RBP
	jmp uuid_00000000000c172b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c172a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c172d
uuid_00000000000c172b:
uuid_00000000000c172d:
	mov -320(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000c1730
uuid_00000000000c172e:
	push %RBP
#call function is-parameterized : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call is_SB_parameterized_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1724
	jmp uuid_00000000000c1726
uuid_00000000000c1724:
	movq $1, -40(%rbp)
uuid_00000000000c1726:
	mov -320(%RBP),%RSP
	add $-320, %RSP
	push %RBP
#call function is-parameterized : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call is_SB_parameterized_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1727
	jmp uuid_00000000000c1729
uuid_00000000000c1727:
	movq $1, -40(%rbp)
uuid_00000000000c1729:
	mov -328(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000c1730:
	mov -208(%RBP),%RSP
	add $-328, %RSP
	jmp uuid_00000000000c1733
uuid_00000000000c1731:
	movq $1, -40(%rbp)
uuid_00000000000c1733:
	mov -72(%RBP),%RSP
	add $-200, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_sized_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1768
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -128(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c173a
	jmp uuid_00000000000c173c
uuid_00000000000c173a:
	push %RBP
	jmp uuid_00000000000c1737
	jmp uuid_00000000000c1739
uuid_00000000000c1737:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq $uuid_00000000000c1157
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1734
	jmp uuid_00000000000c1736
uuid_00000000000c1734:
	movb $1, -136(%rbp)
uuid_00000000000c1736:
	mov -160(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c1739:
	mov -152(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c173c:
	mov -144(%RBP),%RSP
	add $-168, %RSP
	mov -136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1765
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1743
	jmp uuid_00000000000c1745
uuid_00000000000c1743:
	push %RBP
	jmp uuid_00000000000c1740
	jmp uuid_00000000000c1742
uuid_00000000000c1740:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000c13d4
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c173d
	jmp uuid_00000000000c173f
uuid_00000000000c173d:
	movb $1, -208(%rbp)
uuid_00000000000c173f:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c1742:
	mov -224(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c1745:
	mov -216(%RBP),%RSP
	add $-240, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1762
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c174c
	jmp uuid_00000000000c174e
uuid_00000000000c174c:
	push %RBP
	jmp uuid_00000000000c1749
	jmp uuid_00000000000c174b
uuid_00000000000c1749:
	push %RBP
	mov -256(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq $uuid_00000000000c1393
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1746
	jmp uuid_00000000000c1748
uuid_00000000000c1746:
	movb $1, -280(%rbp)
uuid_00000000000c1748:
	mov -304(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c174b:
	mov -296(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c174e:
	mov -288(%RBP),%RSP
	add $-312, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c175f
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1755
	jmp uuid_00000000000c1757
uuid_00000000000c1755:
	push %RBP
	mov -336(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1752
	jmp uuid_00000000000c1754
uuid_00000000000c1752:
	push %RBP
	mov -328(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c174f
	jmp uuid_00000000000c1751
uuid_00000000000c174f:
	movb $1, -352(%rbp)
uuid_00000000000c1751:
	mov -400(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c1754:
	mov -368(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c1757:
	mov -360(%RBP),%RSP
	add $-424, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c175c
	push %RBP
	jmp uuid_00000000000c1759
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c1758
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c175b
uuid_00000000000c1759:
uuid_00000000000c175b:
	mov -432(%RBP),%RSP
	add $-432, %RSP
	jmp uuid_00000000000c175e
uuid_00000000000c175c:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function is-sized : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov %RBX, %RBP
	call is_SB_sized_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-sized : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	mov %RBX, %RBP
	call is_SB_sized_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000c175e:
	mov -320(%RBP),%RSP
	add $-424, %RSP
	jmp uuid_00000000000c1761
uuid_00000000000c175f:
	movq $1, -40(%rbp)
uuid_00000000000c1761:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000c1764
uuid_00000000000c1762:
	movq $1, -40(%rbp)
uuid_00000000000c1764:
	mov -176(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c1767
uuid_00000000000c1765:
	movq $1, -40(%rbp)
uuid_00000000000c1767:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000c176a
uuid_00000000000c1768:
	movq $1, -40(%rbp)
uuid_00000000000c176a:
	mov -72(%RBP),%RSP
	add $-96, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
has_SB_representation_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1771
	jmp uuid_00000000000c1773
uuid_00000000000c1771:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c176e
	jmp uuid_00000000000c1770
uuid_00000000000c176e:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c176b
	jmp uuid_00000000000c176d
uuid_00000000000c176b:
	movb $1, -104(%rbp)
uuid_00000000000c176d:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c1770:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c1773:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c17c1
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c177b
	jmp uuid_00000000000c177d
uuid_00000000000c177b:
	push %RBP
	jmp uuid_00000000000c1778
	jmp uuid_00000000000c177a
uuid_00000000000c1778:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c1774
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1775
	jmp uuid_00000000000c1777
uuid_00000000000c1775:
	movb $1, -216(%rbp)
uuid_00000000000c1777:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c177a:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c177d:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c17be
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1784
	jmp uuid_00000000000c1786
uuid_00000000000c1784:
	push %RBP
	jmp uuid_00000000000c1781
	jmp uuid_00000000000c1783
uuid_00000000000c1781:
	push %RBP
	mov -264(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -320(%rbp)
	pushq $uuid_00000000000c1264
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c177e
	jmp uuid_00000000000c1780
uuid_00000000000c177e:
	movb $1, -288(%rbp)
uuid_00000000000c1780:
	mov -312(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c1783:
	mov -304(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c1786:
	mov -296(%RBP),%RSP
	add $-320, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c17bb
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c178d
	jmp uuid_00000000000c178f
uuid_00000000000c178d:
	push %RBP
	jmp uuid_00000000000c178a
	jmp uuid_00000000000c178c
uuid_00000000000c178a:
	push %RBP
	mov -336(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -392(%rbp)
	pushq $uuid_00000000000c1268
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1787
	jmp uuid_00000000000c1789
uuid_00000000000c1787:
	movb $1, -360(%rbp)
uuid_00000000000c1789:
	mov -384(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000c178c:
	mov -376(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000c178f:
	mov -368(%RBP),%RSP
	add $-392, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c17b8
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -424(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1796
	jmp uuid_00000000000c1798
uuid_00000000000c1796:
	push %RBP
	jmp uuid_00000000000c1793
	jmp uuid_00000000000c1795
uuid_00000000000c1793:
	push %RBP
	mov -408(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -464(%rbp)
	pushq $uuid_00000000000c126c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1790
	jmp uuid_00000000000c1792
uuid_00000000000c1790:
	movb $1, -432(%rbp)
uuid_00000000000c1792:
	mov -456(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000c1795:
	mov -448(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000c1798:
	mov -440(%RBP),%RSP
	add $-464, %RSP
	mov -432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c17b5
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c179f
	jmp uuid_00000000000c17a1
uuid_00000000000c179f:
	push %RBP
	jmp uuid_00000000000c179c
	jmp uuid_00000000000c179e
uuid_00000000000c179c:
	push %RBP
	mov -480(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	pushq $uuid_00000000000c1270
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1799
	jmp uuid_00000000000c179b
uuid_00000000000c1799:
	movb $1, -504(%rbp)
uuid_00000000000c179b:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c179e:
	mov -520(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c17a1:
	mov -512(%RBP),%RSP
	add $-536, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c17b2
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -568(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c17a8
	jmp uuid_00000000000c17aa
uuid_00000000000c17a8:
	push %RBP
	jmp uuid_00000000000c17a5
	jmp uuid_00000000000c17a7
uuid_00000000000c17a5:
	push %RBP
	mov -552(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq $uuid_00000000000c1309
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c17a2
	jmp uuid_00000000000c17a4
uuid_00000000000c17a2:
	movb $1, -576(%rbp)
uuid_00000000000c17a4:
	mov -600(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000c17a7:
	mov -592(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000c17aa:
	mov -584(%RBP),%RSP
	add $-608, %RSP
	mov -576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c17af
	push %RBP
	jmp uuid_00000000000c17ac
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c17ab
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c17ae
uuid_00000000000c17ac:
uuid_00000000000c17ae:
	mov -616(%RBP),%RSP
	add $-616, %RSP
	jmp uuid_00000000000c17b1
uuid_00000000000c17af:
	movq $1, -40(%rbp)
uuid_00000000000c17b1:
	mov -544(%RBP),%RSP
	add $-608, %RSP
	jmp uuid_00000000000c17b4
uuid_00000000000c17b2:
	movq $1, -40(%rbp)
uuid_00000000000c17b4:
	mov -472(%RBP),%RSP
	add $-536, %RSP
	jmp uuid_00000000000c17b7
uuid_00000000000c17b5:
	movq $1, -40(%rbp)
uuid_00000000000c17b7:
	mov -400(%RBP),%RSP
	add $-464, %RSP
	jmp uuid_00000000000c17ba
uuid_00000000000c17b8:
	movq $1, -40(%rbp)
uuid_00000000000c17ba:
	mov -328(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000c17bd
uuid_00000000000c17bb:
	movq $1, -40(%rbp)
uuid_00000000000c17bd:
	mov -256(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000c17c0
uuid_00000000000c17be:
	movq $1, -40(%rbp)
uuid_00000000000c17c0:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c17c3
uuid_00000000000c17c1:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function has-representation : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call has_SB_representation_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function has-representation : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call has_SB_representation_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000c17c3:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
guess_SB_representation_CL_ArrowTypeType:
	push %RBP
#call function has-representation : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call has_SB_representation_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c17d7
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -48(%rbp)
	push %RBP
	pushq -56(%rbp)
	mov -72(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c17d4
	push %RBP
	pushq -56(%rbp)
	mov -88(%RBP), %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c17d1
	push %RBP
	pushq -56(%rbp)
	mov -104(%RBP), %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c17ce
	push %RBP
	pushq -56(%rbp)
	mov -120(%RBP), %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c17cb
	push %RBP
	pushq -56(%rbp)
	mov -136(%RBP), %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c17c8
	push %RBP
	jmp uuid_00000000000c17c5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c17c4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c17c7
uuid_00000000000c17c5:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1309
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c17c7:
	mov -144(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c17ca
uuid_00000000000c17c8:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1270
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c17ca:
	mov -128(%RBP),%RSP
	add $-136, %RSP
	jmp uuid_00000000000c17cd
uuid_00000000000c17cb:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c126c
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c17cd:
	mov -112(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000c17d0
uuid_00000000000c17ce:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1268
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c17d0:
	mov -96(%RBP),%RSP
	add $-104, %RSP
	jmp uuid_00000000000c17d3
uuid_00000000000c17d1:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1264
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c17d3:
	mov -80(%RBP),%RSP
	add $-88, %RSP
	jmp uuid_00000000000c17d6
uuid_00000000000c17d4:
uuid_00000000000c17d6:
	mov -64(%RBP),%RSP
	add $-72, %RSP
	jmp uuid_00000000000c17d9
uuid_00000000000c17d7:
uuid_00000000000c17d9:
	mov -40(%RBP),%RSP
	add $-40, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
as_SB_local_SB_variable_CL_ArrowTypeType:
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c17db
	jmp uuid_00000000000c17dd
uuid_00000000000c17db:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c17da
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c17dd:
	mov -40(%RBP),%RSP
	add $-40, %RSP
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
as_SB_constant_CL_ArrowTypeType:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c17de
	jmp uuid_00000000000c17e0
uuid_00000000000c17de:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1774
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c17e0:
	mov -40(%RBP),%RSP
	add $-40, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
deep_SB_hash_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1803
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -128(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c17e4
	jmp uuid_00000000000c17e6
uuid_00000000000c17e4:
	push %RBP
	mov -120(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c17e1
	jmp uuid_00000000000c17e3
uuid_00000000000c17e1:
	movb $1, -136(%rbp)
uuid_00000000000c17e3:
	mov -152(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000c17e6:
	mov -144(%RBP),%RSP
	add $-160, %RSP
	mov -136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1800
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c17ed
	jmp uuid_00000000000c17ef
uuid_00000000000c17ed:
	push %RBP
	mov -184(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c17ea
	jmp uuid_00000000000c17ec
uuid_00000000000c17ea:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c17e7
	jmp uuid_00000000000c17e9
uuid_00000000000c17e7:
	movb $1, -200(%rbp)
uuid_00000000000c17e9:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c17ec:
	mov -216(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c17ef:
	mov -208(%RBP),%RSP
	add $-272, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c17fd
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c17f6
	jmp uuid_00000000000c17f8
uuid_00000000000c17f6:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c17f3
	jmp uuid_00000000000c17f5
uuid_00000000000c17f3:
	push %RBP
	mov -288(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c17f0
	jmp uuid_00000000000c17f2
uuid_00000000000c17f0:
	movb $1, -312(%rbp)
uuid_00000000000c17f2:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c17f5:
	mov -328(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c17f8:
	mov -320(%RBP),%RSP
	add $-384, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c17fa
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c17f9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c17fc
uuid_00000000000c17fa:
#call function deep-hash : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c17fc:
	mov -280(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000c17ff
uuid_00000000000c17fd:
#call function deep-hash : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function deep-hash : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c17ff:
	mov -168(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000c1802
uuid_00000000000c1800:
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000c1802:
	mov -104(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000c1805
uuid_00000000000c1803:
uuid_00000000000c1805:
	mov -72(%RBP),%RSP
	add $-96, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
deep_SB_hash_CL_ArrowU64ListType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1815
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c180e
	jmp uuid_00000000000c1810
uuid_00000000000c180e:
	push %RBP
	mov -184(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c180b
	jmp uuid_00000000000c180d
uuid_00000000000c180b:
	push %RBP
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	jmp uuid_00000000000c1808
	jmp uuid_00000000000c180a
uuid_00000000000c1808:
	movb $1, -200(%rbp)
uuid_00000000000c180a:
	mov -264(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c180d:
	mov -216(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c1810:
	mov -208(%RBP),%RSP
	add $-288, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1812
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c1811
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1814
uuid_00000000000c1812:
#call function deep-hash : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function deep-hash : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
uuid_00000000000c1814:
	mov -152(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000c1817
uuid_00000000000c1815:
uuid_00000000000c1817:
	mov -104(%RBP),%RSP
	add $-144, %RSP
	mov -56(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
ascript_SB_normal_CL_ArrowNilConsTypeAST:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1823
	jmp uuid_00000000000c1825
uuid_00000000000c1823:
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1820
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
#call function ascript : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call ascript_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov $types_SB_have_SB_changed_CL_U8, %r15
	movb $1, 0(%r15)
	jmp uuid_00000000000c1822
uuid_00000000000c1820:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c181d
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c181a
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1818
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1819
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c181c
uuid_00000000000c181a:
uuid_00000000000c181c:
	mov -184(%RBP),%RSP
	add $-184, %RSP
	jmp uuid_00000000000c181f
uuid_00000000000c181d:
uuid_00000000000c181f:
	mov -152(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000c1822:
	mov -144(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000c1825:
	mov -112(%RBP),%RSP
	add $-152, %RSP
	mov %rbp, %rsp
	sub $104, %rsp
	ret
typeof_CL_ArrowTypeFragmentList:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c182c
	jmp uuid_00000000000c182e
uuid_00000000000c182c:
	push %RBP
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000c1829
	jmp uuid_00000000000c182b
uuid_00000000000c1829:
	push %RBP
	mov -384(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1826
	jmp uuid_00000000000c1828
uuid_00000000000c1826:
	movb $1, -552(%rbp)
uuid_00000000000c1828:
	mov -728(%RBP),%RSP
	add $-896, %RSP
uuid_00000000000c182b:
	mov -568(%RBP),%RSP
	add $-896, %RSP
uuid_00000000000c182e:
	mov -560(%RBP),%RSP
	add $-896, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1836
	push %RBP
	jmp uuid_00000000000c1833
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c1832
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1835
uuid_00000000000c1833:
uuid_00000000000c1835:
	mov -904(%RBP),%RSP
	add $-904, %RSP
	jmp uuid_00000000000c1838
uuid_00000000000c1836:
#call function typeof : Arrow<FragmentList,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeFragmentList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c182f
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	jmp uuid_00000000000c1831
uuid_00000000000c182f:
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1157
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c1831:
	mov -904(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000c1838:
	mov -376(%RBP),%RSP
	add $-904, %RSP
	subq $24, %rsp
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $176, %rsp
	ret
to_SB_s_CL_ArrowSAST:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c183f
	jmp uuid_00000000000c1841
uuid_00000000000c183f:
	push %RBP
	jmp uuid_00000000000c183c
	jmp uuid_00000000000c183e
uuid_00000000000c183c:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1839
	jmp uuid_00000000000c183b
uuid_00000000000c1839:
	movb $1, -264(%rbp)
uuid_00000000000c183b:
	mov -288(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000c183e:
	mov -280(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000c1841:
	mov -272(%RBP),%RSP
	add $-296, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c18b9
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1849
	jmp uuid_00000000000c184b
uuid_00000000000c1849:
	push %RBP
	jmp uuid_00000000000c1846
	jmp uuid_00000000000c1848
uuid_00000000000c1846:
	push %RBP
	mov -312(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1843
	jmp uuid_00000000000c1845
uuid_00000000000c1843:
	movb $1, -384(%rbp)
uuid_00000000000c1845:
	mov -408(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c1848:
	mov -400(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c184b:
	mov -392(%RBP),%RSP
	add $-416, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c18b6
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c186b
	jmp uuid_00000000000c186d
uuid_00000000000c186b:
	push %RBP
	mov -488(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -592(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1859
	jmp uuid_00000000000c185b
uuid_00000000000c1859:
	push %RBP
	mov -584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -688(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1850
	jmp uuid_00000000000c1852
uuid_00000000000c1850:
	push %RBP
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	jmp uuid_00000000000c184d
	jmp uuid_00000000000c184f
uuid_00000000000c184d:
	movb $1, -696(%rbp)
uuid_00000000000c184f:
	mov -712(%RBP),%RSP
	add $-736, %RSP
uuid_00000000000c1852:
	mov -704(%RBP),%RSP
	add $-736, %RSP
	mov -696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1856
	jmp uuid_00000000000c1858
uuid_00000000000c1856:
	push %RBP
	mov -576(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1853
	jmp uuid_00000000000c1855
uuid_00000000000c1853:
	movb $1, -600(%rbp)
uuid_00000000000c1855:
	mov -744(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000c1858:
	mov -616(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000c185b:
	mov -608(%RBP),%RSP
	add $-816, %RSP
	mov -600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1868
	jmp uuid_00000000000c186a
uuid_00000000000c1868:
	push %RBP
	mov -480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -896(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1862
	jmp uuid_00000000000c1864
uuid_00000000000c1862:
	push %RBP
	jmp uuid_00000000000c185f
	jmp uuid_00000000000c1861
uuid_00000000000c185f:
	push %RBP
	mov -832(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c185c
	jmp uuid_00000000000c185e
uuid_00000000000c185c:
	movb $1, -904(%rbp)
uuid_00000000000c185e:
	mov -928(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c1861:
	mov -920(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c1864:
	mov -912(%RBP),%RSP
	add $-936, %RSP
	mov -904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1865
	jmp uuid_00000000000c1867
uuid_00000000000c1865:
	movb $1, -504(%rbp)
uuid_00000000000c1867:
	mov -824(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c186a:
	mov -520(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c186d:
	mov -512(%RBP),%RSP
	add $-936, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c18b3
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -1016(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c188c
	jmp uuid_00000000000c188e
uuid_00000000000c188c:
	push %RBP
	mov -1008(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1112(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c187a
	jmp uuid_00000000000c187c
uuid_00000000000c187a:
	push %RBP
	mov -1104(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1208(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1871
	jmp uuid_00000000000c1873
uuid_00000000000c1871:
	push %RBP
	pushq -1184(%RBP)
	pushq -1192(%RBP)
	pushq -1200(%RBP)
	jmp uuid_00000000000c186e
	jmp uuid_00000000000c1870
uuid_00000000000c186e:
	movb $1, -1216(%rbp)
uuid_00000000000c1870:
	mov -1232(%RBP),%RSP
	add $-1256, %RSP
uuid_00000000000c1873:
	mov -1224(%RBP),%RSP
	add $-1256, %RSP
	mov -1216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1877
	jmp uuid_00000000000c1879
uuid_00000000000c1877:
	push %RBP
	mov -1096(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1874
	jmp uuid_00000000000c1876
uuid_00000000000c1874:
	movb $1, -1120(%rbp)
uuid_00000000000c1876:
	mov -1264(%RBP),%RSP
	add $-1336, %RSP
uuid_00000000000c1879:
	mov -1136(%RBP),%RSP
	add $-1336, %RSP
uuid_00000000000c187c:
	mov -1128(%RBP),%RSP
	add $-1336, %RSP
	mov -1120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1889
	jmp uuid_00000000000c188b
uuid_00000000000c1889:
	push %RBP
	mov -1000(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1416(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1883
	jmp uuid_00000000000c1885
uuid_00000000000c1883:
	push %RBP
	jmp uuid_00000000000c1880
	jmp uuid_00000000000c1882
uuid_00000000000c1880:
	push %RBP
	mov -1352(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1456(%rbp)
	pushq $uuid_00000000000c0f7e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c187d
	jmp uuid_00000000000c187f
uuid_00000000000c187d:
	movb $1, -1424(%rbp)
uuid_00000000000c187f:
	mov -1448(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c1882:
	mov -1440(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c1885:
	mov -1432(%RBP),%RSP
	add $-1456, %RSP
	mov -1424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1886
	jmp uuid_00000000000c1888
uuid_00000000000c1886:
	movb $1, -1024(%rbp)
uuid_00000000000c1888:
	mov -1344(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c188b:
	mov -1040(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c188e:
	mov -1032(%RBP),%RSP
	add $-1456, %RSP
	mov -1024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c18b0
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -1536(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1895
	jmp uuid_00000000000c1897
uuid_00000000000c1895:
	push %RBP
	mov -1528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1892
	jmp uuid_00000000000c1894
uuid_00000000000c1892:
	push %RBP
	mov -1520(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c188f
	jmp uuid_00000000000c1891
uuid_00000000000c188f:
	movb $1, -1544(%rbp)
uuid_00000000000c1891:
	mov -1640(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000c1894:
	mov -1560(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000c1897:
	mov -1552(%RBP),%RSP
	add $-1712, %RSP
	mov -1544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c18ad
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -1792(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c18a2
	jmp uuid_00000000000c18a4
uuid_00000000000c18a2:
	push %RBP
	pushq -1768(%RBP)
	pushq -1776(%RBP)
	pushq -1784(%RBP)
	jmp uuid_00000000000c189f
	jmp uuid_00000000000c18a1
uuid_00000000000c189f:
	push %RBP
	mov -1760(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c189c
	jmp uuid_00000000000c189e
uuid_00000000000c189c:
	push %RBP
	mov -1752(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1899
	jmp uuid_00000000000c189b
uuid_00000000000c1899:
	movb $1, -1800(%rbp)
uuid_00000000000c189b:
	mov -1928(%RBP),%RSP
	add $-2000, %RSP
uuid_00000000000c189e:
	mov -1848(%RBP),%RSP
	add $-2000, %RSP
uuid_00000000000c18a1:
	mov -1816(%RBP),%RSP
	add $-2000, %RSP
uuid_00000000000c18a4:
	mov -1808(%RBP),%RSP
	add $-2000, %RSP
	mov -1800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c18aa
	push %RBP
	jmp uuid_00000000000c18a7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c18a6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c18a9
uuid_00000000000c18a7:
uuid_00000000000c18a9:
	mov -2008(%RBP),%RSP
	add $-2008, %RSP
	jmp uuid_00000000000c18ac
uuid_00000000000c18aa:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c18a5
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-s : Arrow<AST,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	mov %RBX, %RBP
	call to_SB_s_CL_ArrowSAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-s : Arrow<AST,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	mov %RBX, %RBP
	call to_SB_s_CL_ArrowSAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c18ac:
	mov -1720(%RBP),%RSP
	add $-2000, %RSP
	jmp uuid_00000000000c18af
uuid_00000000000c18ad:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c1898
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-s : Arrow<AST,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	mov %RBX, %RBP
	call to_SB_s_CL_ArrowSAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-s : Arrow<AST,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	mov %RBX, %RBP
	call to_SB_s_CL_ArrowSAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c18af:
	mov -1464(%RBP),%RSP
	add $-1712, %RSP
	jmp uuid_00000000000c18b2
uuid_00000000000c18b0:
#call function to-s : Arrow<AST,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	mov %RBX, %RBP
	call to_SB_s_CL_ArrowSAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c18b2:
	mov -944(%RBP),%RSP
	add $-1456, %RSP
	jmp uuid_00000000000c18b5
uuid_00000000000c18b3:
#call function to-s : Arrow<AST,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	mov %RBX, %RBP
	call to_SB_s_CL_ArrowSAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c18b5:
	mov -424(%RBP),%RSP
	add $-936, %RSP
	jmp uuid_00000000000c18b8
uuid_00000000000c18b6:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c184c
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -416(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c18b8:
	mov -304(%RBP),%RSP
	add $-416, %RSP
	jmp uuid_00000000000c18bb
uuid_00000000000c18b9:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c1842
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -296(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c18bb:
	mov -184(%RBP),%RSP
	add $-296, %RSP
	subq $24, %rsp
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
domain_CL_ArrowTypeType:
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $uuid_00000000000c13d4
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
range_CL_ArrowTypeType:
#call function p1 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $uuid_00000000000c13d4
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call p1_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
t1_CL_ArrowTypeString:
	pushq -8(%rbp)
#call function close : Arrow<List<Type>+List<Type>+CaseNumber<1>,Array<List<Type>+List<Type>+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeCaseNumber1ListTypeListTypeCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
t2_CL_ArrowTypeConsTypeString:
	pushq -8(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $40, %rsp
	ret
t3_CL_ArrowTypeConsTypeConsTypeString:
	pushq -8(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $64, %rsp
	ret
p_CL_ArrowTypeConsU64Type:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c18ce
	jmp uuid_00000000000c18d0
uuid_00000000000c18ce:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c18cb
	jmp uuid_00000000000c18cd
uuid_00000000000c18cb:
	push %RBP
	jmp uuid_00000000000c18c8
	jmp uuid_00000000000c18ca
uuid_00000000000c18c8:
	movb $1, -104(%rbp)
uuid_00000000000c18ca:
	mov -168(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c18cd:
	mov -120(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c18d0:
	mov -112(%RBP),%RSP
	add $-168, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c18d5
	push %RBP
	jmp uuid_00000000000c18d2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c18d1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c18d4
uuid_00000000000c18d2:
uuid_00000000000c18d4:
	mov -176(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000c18d7
uuid_00000000000c18d5:
#call function .nth : Arrow<Cons<Cons<List<Type>,U64>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call _DT_nth_CL_ArrowTypeConsTypeConsU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c18d7:
	mov -72(%RBP),%RSP
	add $-168, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $40, %rsp
	ret
p1_CL_ArrowTypeType:
#call function p : Arrow<Cons<Type,U64>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $0
	mov %RBX, %RBP
	call p_CL_ArrowTypeConsU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
p2_CL_ArrowTypeType:
#call function p : Arrow<Cons<Type,U64>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $1
	mov %RBX, %RBP
	call p_CL_ArrowTypeConsU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
and_CL_ArrowTContextConsTContextTContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq $0
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c18de
	jmp uuid_00000000000c18e0
uuid_00000000000c18de:
	push %RBP
	jmp uuid_00000000000c18db
	jmp uuid_00000000000c18dd
uuid_00000000000c18db:
	push %RBP
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	mov -904(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c18d8
	jmp uuid_00000000000c18da
uuid_00000000000c18d8:
	movb $1, -760(%rbp)
uuid_00000000000c18da:
	mov -784(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000c18dd:
	mov -776(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000c18e0:
	mov -768(%RBP),%RSP
	add $-904, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c18f1
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq $0
	push %RBP
	mov -1160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c18e7
	jmp uuid_00000000000c18e9
uuid_00000000000c18e7:
	push %RBP
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	pushq -1152(%RBP)
	mov -1304(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c18e4
	jmp uuid_00000000000c18e6
uuid_00000000000c18e4:
	push %RBP
	jmp uuid_00000000000c18e1
	jmp uuid_00000000000c18e3
uuid_00000000000c18e1:
	movb $1, -1168(%rbp)
uuid_00000000000c18e3:
	mov -1312(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000c18e6:
	mov -1184(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000c18e9:
	mov -1176(%RBP),%RSP
	add $-1312, %RSP
	mov -1168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c18ee
	push %RBP
	jmp uuid_00000000000c18eb
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c18ea
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c18ed
uuid_00000000000c18eb:
#call function union : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c18ed:
	mov -1320(%RBP),%RSP
	add $-1320, %RSP
	jmp uuid_00000000000c18f0
uuid_00000000000c18ee:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c18f0:
	mov -912(%RBP),%RSP
	add $-1312, %RSP
	jmp uuid_00000000000c18f3
uuid_00000000000c18f1:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c18f3:
	mov -504(%RBP),%RSP
	add $-904, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $248, %rsp
	ret
and_CL_ArrowTypeConsTypeType:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	subq $24, %rsp
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
union_CL_ArrowTContextConsTContextTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c190a
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1907
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1900
	jmp uuid_00000000000c1902
uuid_00000000000c1900:
	push %RBP
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	jmp uuid_00000000000c18fd
	jmp uuid_00000000000c18ff
uuid_00000000000c18fd:
	push %RBP
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	jmp uuid_00000000000c18fa
	jmp uuid_00000000000c18fc
uuid_00000000000c18fa:
	push %RBP
	mov -648(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c18f7
	jmp uuid_00000000000c18f9
uuid_00000000000c18f7:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c18f4
	jmp uuid_00000000000c18f6
uuid_00000000000c18f4:
	movb $1, -760(%rbp)
uuid_00000000000c18f6:
	mov -904(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000c18f9:
	mov -888(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000c18fc:
	mov -856(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000c18ff:
	mov -776(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000c1902:
	mov -768(%RBP),%RSP
	add $-1024, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1904
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c1903
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1906
uuid_00000000000c1904:
#call function union : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -896(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c1906:
	mov -632(%RBP),%RSP
	add $-1024, %RSP
	jmp uuid_00000000000c1909
uuid_00000000000c1907:
uuid_00000000000c1909:
	mov -504(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000c190c
uuid_00000000000c190a:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c190c:
	mov -376(%RBP),%RSP
	add $-496, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $248, %rsp
	ret
union_CL_ArrowContextConsContextContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c190d
	jmp uuid_00000000000c190f
uuid_00000000000c190d:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
uuid_00000000000c190f:
	mov -304(%RBP),%RSP
	add $-304, %RSP
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1923
	jmp uuid_00000000000c1925
uuid_00000000000c1923:
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq $0
	push %RBP
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1919
	jmp uuid_00000000000c191b
uuid_00000000000c1919:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	jmp uuid_00000000000c1916
	jmp uuid_00000000000c1918
uuid_00000000000c1916:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1913
	jmp uuid_00000000000c1915
uuid_00000000000c1913:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1910
	jmp uuid_00000000000c1912
uuid_00000000000c1910:
	movb $1, -520(%rbp)
uuid_00000000000c1912:
	mov -632(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c1915:
	mov -616(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c1918:
	mov -536(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c191b:
	mov -528(%RBP),%RSP
	add $-728, %RSP
	mov -520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1920
	push %RBP
	jmp uuid_00000000000c191d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c191c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c191f
uuid_00000000000c191d:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
uuid_00000000000c191f:
	mov -736(%RBP),%RSP
	add $-736, %RSP
	jmp uuid_00000000000c1922
uuid_00000000000c1920:
#call function close : Arrow<Context,Array<Context,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function union : Arrow<Cons<Context,Context>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowContextConsContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -624(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq $0
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
uuid_00000000000c1922:
	mov -416(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c1925:
	mov -312(%RBP),%RSP
	add $-728, %RSP
	subq $96, %rsp
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	addq $96, %rsp
	mov %rbp, %rsp
	sub $200, %rsp
	ret
union_CL_ArrowFContextConsTContextFContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
uuid_00000000000c193d:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c193e
	jmp uuid_00000000000c193f
uuid_00000000000c193e:
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	push %RBP
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov -776(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c193a
	push %RBP
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq $0
	push %RBP
	mov -904(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1932
	jmp uuid_00000000000c1934
uuid_00000000000c1932:
	push %RBP
	jmp uuid_00000000000c192f
	jmp uuid_00000000000c1931
uuid_00000000000c192f:
	push %RBP
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	jmp uuid_00000000000c192c
	jmp uuid_00000000000c192e
uuid_00000000000c192c:
	push %RBP
	mov -800(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1929
	jmp uuid_00000000000c192b
uuid_00000000000c1929:
	push %RBP
	mov -792(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1926
	jmp uuid_00000000000c1928
uuid_00000000000c1926:
	movb $1, -912(%rbp)
uuid_00000000000c1928:
	mov -984(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000c192b:
	mov -968(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000c192e:
	mov -936(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000c1931:
	mov -928(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000c1934:
	mov -920(%RBP),%RSP
	add $-1104, %RSP
	mov -912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1937
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c1936
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1939
uuid_00000000000c1937:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq $uuid_00000000000c1935
	pushq $0
#call function to-string : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1256(%RBP)
	popq -1248(%RBP)
	popq -1240(%RBP)
	popq -1232(%RBP)
	popq -1224(%RBP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -976(%rbp)
	pushq $0
	pushq $0
	pushq $3
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq $0
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	movq -1104(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -208(%rbp)
uuid_00000000000c1939:
	mov -784(%RBP),%RSP
	add $-1256, %RSP
	jmp uuid_00000000000c193c
uuid_00000000000c193a:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
uuid_00000000000c193c:
	mov -656(%RBP),%RSP
	add $-776, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000c193d
uuid_00000000000c193f:
	subq $200, %rsp
	pushq -528(%rbp)
	pushq -520(%rbp)
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $328, %rsp
	ret
tag_SB_of_CL_ArrowStringType:
	pushq $uuid_00000000000c0dfc
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1946
	jmp uuid_00000000000c1948
uuid_00000000000c1946:
	push %RBP
	jmp uuid_00000000000c1943
	jmp uuid_00000000000c1945
uuid_00000000000c1943:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1940
	jmp uuid_00000000000c1942
uuid_00000000000c1940:
	movb $1, -104(%rbp)
uuid_00000000000c1942:
	mov -128(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000c1945:
	mov -120(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000c1948:
	mov -112(%RBP),%RSP
	add $-136, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c194d
	push %RBP
	jmp uuid_00000000000c194a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c1949
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c194c
uuid_00000000000c194a:
uuid_00000000000c194c:
	mov -144(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c194f
uuid_00000000000c194d:
	movq -136(%rbp), %r15
	movq %r15, -40(%rbp)
	mov -136(%rbp), %r15
	mov %r15, -40(%rbp)
uuid_00000000000c194f:
	mov -72(%RBP),%RSP
	add $-136, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
can_SB_unify_CL_ArrowU64ConsListTypeListType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c195b
	jmp uuid_00000000000c195d
uuid_00000000000c195b:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1958
	jmp uuid_00000000000c195a
uuid_00000000000c1958:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1955
	jmp uuid_00000000000c1957
uuid_00000000000c1955:
	movb $1, -288(%rbp)
uuid_00000000000c1957:
	mov -352(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000c195a:
	mov -304(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000c195d:
	mov -296(%RBP),%RSP
	add $-392, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1986
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1976
	jmp uuid_00000000000c1978
uuid_00000000000c1976:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1964
	jmp uuid_00000000000c1966
uuid_00000000000c1964:
	push %RBP
	mov -544(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1961
	jmp uuid_00000000000c1963
uuid_00000000000c1961:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000c195e
	jmp uuid_00000000000c1960
uuid_00000000000c195e:
	movb $1, -560(%rbp)
uuid_00000000000c1960:
	mov -624(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000c1963:
	mov -576(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000c1966:
	mov -568(%RBP),%RSP
	add $-648, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1973
	jmp uuid_00000000000c1975
uuid_00000000000c1973:
	push %RBP
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c196d
	jmp uuid_00000000000c196f
uuid_00000000000c196d:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c196a
	jmp uuid_00000000000c196c
uuid_00000000000c196a:
	push %RBP
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	jmp uuid_00000000000c1967
	jmp uuid_00000000000c1969
uuid_00000000000c1967:
	movb $1, -704(%rbp)
uuid_00000000000c1969:
	mov -768(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c196c:
	mov -720(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c196f:
	mov -712(%RBP),%RSP
	add $-792, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1970
	jmp uuid_00000000000c1972
uuid_00000000000c1970:
	movb $1, -496(%rbp)
uuid_00000000000c1972:
	mov -656(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c1975:
	mov -512(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c1978:
	mov -504(%RBP),%RSP
	add $-792, %RSP
	mov -496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1983
	push %RBP
	jmp uuid_00000000000c1980
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c197f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1982
uuid_00000000000c1980:
uuid_00000000000c1982:
	mov -800(%RBP),%RSP
	add $-800, %RSP
	jmp uuid_00000000000c1985
uuid_00000000000c1983:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c197c
	jmp uuid_00000000000c197e
uuid_00000000000c197c:
	push %RBP
#call function can-unify : Arrow<Cons<List<Type>,List<Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1979
	jmp uuid_00000000000c197b
uuid_00000000000c1979:
	movq $1, -96(%rbp)
uuid_00000000000c197b:
	mov -808(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c197e:
	mov -800(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c1985:
	mov -400(%RBP),%RSP
	add $-808, %RSP
	jmp uuid_00000000000c1988
uuid_00000000000c1986:
	movq $1, -96(%rbp)
uuid_00000000000c1988:
	mov -192(%RBP),%RSP
	add $-392, %RSP
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
can_SB_unify_CL_ArrowU64ConsTypeType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c198f
	jmp uuid_00000000000c1991
uuid_00000000000c198f:
	push %RBP
	jmp uuid_00000000000c198c
	jmp uuid_00000000000c198e
uuid_00000000000c198c:
	push %RBP
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1989
	jmp uuid_00000000000c198b
uuid_00000000000c1989:
	movb $1, -192(%rbp)
uuid_00000000000c198b:
	mov -216(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c198e:
	mov -208(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c1991:
	mov -200(%RBP),%RSP
	add $-240, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b66
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c19ab
	jmp uuid_00000000000c19ad
uuid_00000000000c19ab:
	push %RBP
	jmp uuid_00000000000c19a8
	jmp uuid_00000000000c19aa
uuid_00000000000c19a8:
	push %RBP
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	pushq $0
	push %RBP
	mov -360(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c19a2
	jmp uuid_00000000000c19a4
uuid_00000000000c19a2:
	push %RBP
	mov -352(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -424(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1998
	jmp uuid_00000000000c199a
uuid_00000000000c1998:
	push %RBP
	jmp uuid_00000000000c1995
	jmp uuid_00000000000c1997
uuid_00000000000c1995:
	push %RBP
	jmp uuid_00000000000c1992
	jmp uuid_00000000000c1994
uuid_00000000000c1992:
	movb $1, -432(%rbp)
uuid_00000000000c1994:
	mov -456(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000c1997:
	mov -448(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000c199a:
	mov -440(%RBP),%RSP
	add $-456, %RSP
	mov -432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c199f
	jmp uuid_00000000000c19a1
uuid_00000000000c199f:
	push %RBP
	mov -344(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq $uuid_00000000000c199b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c199c
	jmp uuid_00000000000c199e
uuid_00000000000c199c:
	movb $1, -368(%rbp)
uuid_00000000000c199e:
	mov -464(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000c19a1:
	mov -384(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000c19a4:
	mov -376(%RBP),%RSP
	add $-472, %RSP
	mov -368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c19a5
	jmp uuid_00000000000c19a7
uuid_00000000000c19a5:
	movb $1, -312(%rbp)
uuid_00000000000c19a7:
	mov -336(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000c19aa:
	mov -328(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000c19ad:
	mov -320(%RBP),%RSP
	add $-472, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b63
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c19ba
	jmp uuid_00000000000c19bc
uuid_00000000000c19ba:
	push %RBP
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	jmp uuid_00000000000c19b7
	jmp uuid_00000000000c19b9
uuid_00000000000c19b7:
	push %RBP
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c19b1
	jmp uuid_00000000000c19b3
uuid_00000000000c19b1:
	push %RBP
	mov -608(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c19ae
	jmp uuid_00000000000c19b0
uuid_00000000000c19ae:
	movb $1, -624(%rbp)
uuid_00000000000c19b0:
	mov -640(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000c19b3:
	mov -632(%RBP),%RSP
	add $-648, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c19b4
	jmp uuid_00000000000c19b6
uuid_00000000000c19b4:
	movb $1, -544(%rbp)
uuid_00000000000c19b6:
	mov -592(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000c19b9:
	mov -560(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000c19bc:
	mov -552(%RBP),%RSP
	add $-648, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b60
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -712(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c19cc
	jmp uuid_00000000000c19ce
uuid_00000000000c19cc:
	push %RBP
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	jmp uuid_00000000000c19c9
	jmp uuid_00000000000c19cb
uuid_00000000000c19c9:
	push %RBP
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq $0
	push %RBP
	mov -792(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c19c3
	jmp uuid_00000000000c19c5
uuid_00000000000c19c3:
	push %RBP
	mov -784(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c19c0
	jmp uuid_00000000000c19c2
uuid_00000000000c19c0:
	push %RBP
	mov -776(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c19bd
	jmp uuid_00000000000c19bf
uuid_00000000000c19bd:
	movb $1, -800(%rbp)
uuid_00000000000c19bf:
	mov -848(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c19c2:
	mov -816(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c19c5:
	mov -808(%RBP),%RSP
	add $-872, %RSP
	mov -800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c19c6
	jmp uuid_00000000000c19c8
uuid_00000000000c19c6:
	movb $1, -720(%rbp)
uuid_00000000000c19c8:
	mov -768(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c19cb:
	mov -736(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c19ce:
	mov -728(%RBP),%RSP
	add $-872, %RSP
	mov -720(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b5d
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -936(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c19e4
	jmp uuid_00000000000c19e6
uuid_00000000000c19e4:
	push %RBP
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq $0
	push %RBP
	mov -984(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c19db
	jmp uuid_00000000000c19dd
uuid_00000000000c19db:
	push %RBP
	mov -976(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c19d8
	jmp uuid_00000000000c19da
uuid_00000000000c19d8:
	push %RBP
	mov -968(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c19d5
	jmp uuid_00000000000c19d7
uuid_00000000000c19d5:
	movb $1, -992(%rbp)
uuid_00000000000c19d7:
	mov -1040(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000c19da:
	mov -1008(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000c19dd:
	mov -1000(%RBP),%RSP
	add $-1064, %RSP
	mov -992(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c19e1
	jmp uuid_00000000000c19e3
uuid_00000000000c19e1:
	push %RBP
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	jmp uuid_00000000000c19de
	jmp uuid_00000000000c19e0
uuid_00000000000c19de:
	movb $1, -944(%rbp)
uuid_00000000000c19e0:
	mov -1072(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000c19e3:
	mov -960(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000c19e6:
	mov -952(%RBP),%RSP
	add $-1096, %RSP
	mov -944(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b5a
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -1160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a3b
	jmp uuid_00000000000c1a3d
uuid_00000000000c1a3b:
	push %RBP
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	pushq -1152(%RBP)
	pushq $0
	push %RBP
	mov -1208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a05
	jmp uuid_00000000000c1a07
uuid_00000000000c1a05:
	push %RBP
	mov -1200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1272(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c19fc
	jmp uuid_00000000000c19fe
uuid_00000000000c19fc:
	push %RBP
	mov -1264(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1336(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c19f3
	jmp uuid_00000000000c19f5
uuid_00000000000c19f3:
	push %RBP
	mov -1328(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1400(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c19f0
	jmp uuid_00000000000c19f2
uuid_00000000000c19f0:
	push %RBP
	pushq -1304(%RBP)
	pushq -1312(%RBP)
	pushq -1320(%RBP)
	jmp uuid_00000000000c19ed
	jmp uuid_00000000000c19ef
uuid_00000000000c19ed:
	movb $1, -1344(%rbp)
uuid_00000000000c19ef:
	mov -1408(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000c19f2:
	mov -1360(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000c19f5:
	mov -1352(%RBP),%RSP
	add $-1432, %RSP
	mov -1344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c19f9
	jmp uuid_00000000000c19fb
uuid_00000000000c19f9:
	push %RBP
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	pushq -1256(%RBP)
	jmp uuid_00000000000c19f6
	jmp uuid_00000000000c19f8
uuid_00000000000c19f6:
	movb $1, -1280(%rbp)
uuid_00000000000c19f8:
	mov -1440(%RBP),%RSP
	add $-1464, %RSP
uuid_00000000000c19fb:
	mov -1296(%RBP),%RSP
	add $-1464, %RSP
uuid_00000000000c19fe:
	mov -1288(%RBP),%RSP
	add $-1464, %RSP
	mov -1280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a02
	jmp uuid_00000000000c1a04
uuid_00000000000c1a02:
	push %RBP
	mov -1192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1480(%rbp)
	pushq $uuid_00000000000c1157
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c19ff
	jmp uuid_00000000000c1a01
uuid_00000000000c19ff:
	movb $1, -1216(%rbp)
uuid_00000000000c1a01:
	mov -1472(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c1a04:
	mov -1232(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c1a07:
	mov -1224(%RBP),%RSP
	add $-1480, %RSP
	mov -1216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a38
	jmp uuid_00000000000c1a3a
uuid_00000000000c1a38:
	push %RBP
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq $0
	push %RBP
	mov -1512(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a32
	jmp uuid_00000000000c1a34
uuid_00000000000c1a32:
	push %RBP
	mov -1504(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1576(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a29
	jmp uuid_00000000000c1a2b
uuid_00000000000c1a29:
	push %RBP
	mov -1568(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1640(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a0e
	jmp uuid_00000000000c1a10
uuid_00000000000c1a0e:
	push %RBP
	mov -1632(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1704(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a0b
	jmp uuid_00000000000c1a0d
uuid_00000000000c1a0b:
	push %RBP
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	jmp uuid_00000000000c1a08
	jmp uuid_00000000000c1a0a
uuid_00000000000c1a08:
	movb $1, -1648(%rbp)
uuid_00000000000c1a0a:
	mov -1712(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000c1a0d:
	mov -1664(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000c1a10:
	mov -1656(%RBP),%RSP
	add $-1736, %RSP
	mov -1648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a26
	jmp uuid_00000000000c1a28
uuid_00000000000c1a26:
	push %RBP
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq $0
	push %RBP
	mov -1768(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a20
	jmp uuid_00000000000c1a22
uuid_00000000000c1a20:
	push %RBP
	mov -1760(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1832(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a17
	jmp uuid_00000000000c1a19
uuid_00000000000c1a17:
	push %RBP
	mov -1824(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1896(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a14
	jmp uuid_00000000000c1a16
uuid_00000000000c1a14:
	push %RBP
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	jmp uuid_00000000000c1a11
	jmp uuid_00000000000c1a13
uuid_00000000000c1a11:
	movb $1, -1840(%rbp)
uuid_00000000000c1a13:
	mov -1904(%RBP),%RSP
	add $-1928, %RSP
uuid_00000000000c1a16:
	mov -1856(%RBP),%RSP
	add $-1928, %RSP
uuid_00000000000c1a19:
	mov -1848(%RBP),%RSP
	add $-1928, %RSP
	mov -1840(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a1d
	jmp uuid_00000000000c1a1f
uuid_00000000000c1a1d:
	push %RBP
	mov -1752(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1944(%rbp)
	pushq $uuid_00000000000c10a1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1a1a
	jmp uuid_00000000000c1a1c
uuid_00000000000c1a1a:
	movb $1, -1776(%rbp)
uuid_00000000000c1a1c:
	mov -1936(%RBP),%RSP
	add $-1944, %RSP
uuid_00000000000c1a1f:
	mov -1792(%RBP),%RSP
	add $-1944, %RSP
uuid_00000000000c1a22:
	mov -1784(%RBP),%RSP
	add $-1944, %RSP
	mov -1776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a23
	jmp uuid_00000000000c1a25
uuid_00000000000c1a23:
	movb $1, -1584(%rbp)
uuid_00000000000c1a25:
	mov -1744(%RBP),%RSP
	add $-1944, %RSP
uuid_00000000000c1a28:
	mov -1600(%RBP),%RSP
	add $-1944, %RSP
uuid_00000000000c1a2b:
	mov -1592(%RBP),%RSP
	add $-1944, %RSP
	mov -1584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a2f
	jmp uuid_00000000000c1a31
uuid_00000000000c1a2f:
	push %RBP
	mov -1496(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1960(%rbp)
	pushq $uuid_00000000000c1157
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1a2c
	jmp uuid_00000000000c1a2e
uuid_00000000000c1a2c:
	movb $1, -1520(%rbp)
uuid_00000000000c1a2e:
	mov -1952(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000c1a31:
	mov -1536(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000c1a34:
	mov -1528(%RBP),%RSP
	add $-1960, %RSP
	mov -1520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a35
	jmp uuid_00000000000c1a37
uuid_00000000000c1a35:
	movb $1, -1168(%rbp)
uuid_00000000000c1a37:
	mov -1488(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000c1a3a:
	mov -1184(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000c1a3d:
	mov -1176(%RBP),%RSP
	add $-1960, %RSP
	mov -1168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b57
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -2024(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a74
	jmp uuid_00000000000c1a76
uuid_00000000000c1a74:
	push %RBP
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	jmp uuid_00000000000c1a71
	jmp uuid_00000000000c1a73
uuid_00000000000c1a71:
	push %RBP
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq $0
	push %RBP
	mov -2104(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a6b
	jmp uuid_00000000000c1a6d
uuid_00000000000c1a6b:
	push %RBP
	mov -2096(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2168(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a62
	jmp uuid_00000000000c1a64
uuid_00000000000c1a62:
	push %RBP
	mov -2160(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a47
	jmp uuid_00000000000c1a49
uuid_00000000000c1a47:
	push %RBP
	mov -2224(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2296(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a44
	jmp uuid_00000000000c1a46
uuid_00000000000c1a44:
	push %RBP
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	jmp uuid_00000000000c1a41
	jmp uuid_00000000000c1a43
uuid_00000000000c1a41:
	movb $1, -2240(%rbp)
uuid_00000000000c1a43:
	mov -2304(%RBP),%RSP
	add $-2328, %RSP
uuid_00000000000c1a46:
	mov -2256(%RBP),%RSP
	add $-2328, %RSP
uuid_00000000000c1a49:
	mov -2248(%RBP),%RSP
	add $-2328, %RSP
	mov -2240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a5f
	jmp uuid_00000000000c1a61
uuid_00000000000c1a5f:
	push %RBP
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2152(%RBP)
	pushq $0
	push %RBP
	mov -2360(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a59
	jmp uuid_00000000000c1a5b
uuid_00000000000c1a59:
	push %RBP
	mov -2352(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2424(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a50
	jmp uuid_00000000000c1a52
uuid_00000000000c1a50:
	push %RBP
	mov -2416(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2488(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a4d
	jmp uuid_00000000000c1a4f
uuid_00000000000c1a4d:
	push %RBP
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	jmp uuid_00000000000c1a4a
	jmp uuid_00000000000c1a4c
uuid_00000000000c1a4a:
	movb $1, -2432(%rbp)
uuid_00000000000c1a4c:
	mov -2496(%RBP),%RSP
	add $-2520, %RSP
uuid_00000000000c1a4f:
	mov -2448(%RBP),%RSP
	add $-2520, %RSP
uuid_00000000000c1a52:
	mov -2440(%RBP),%RSP
	add $-2520, %RSP
	mov -2432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a56
	jmp uuid_00000000000c1a58
uuid_00000000000c1a56:
	push %RBP
	mov -2344(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2536(%rbp)
	pushq $uuid_00000000000c10a1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1a53
	jmp uuid_00000000000c1a55
uuid_00000000000c1a53:
	movb $1, -2368(%rbp)
uuid_00000000000c1a55:
	mov -2528(%RBP),%RSP
	add $-2536, %RSP
uuid_00000000000c1a58:
	mov -2384(%RBP),%RSP
	add $-2536, %RSP
uuid_00000000000c1a5b:
	mov -2376(%RBP),%RSP
	add $-2536, %RSP
	mov -2368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a5c
	jmp uuid_00000000000c1a5e
uuid_00000000000c1a5c:
	movb $1, -2176(%rbp)
uuid_00000000000c1a5e:
	mov -2336(%RBP),%RSP
	add $-2536, %RSP
uuid_00000000000c1a61:
	mov -2192(%RBP),%RSP
	add $-2536, %RSP
uuid_00000000000c1a64:
	mov -2184(%RBP),%RSP
	add $-2536, %RSP
	mov -2176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a68
	jmp uuid_00000000000c1a6a
uuid_00000000000c1a68:
	push %RBP
	mov -2088(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2552(%rbp)
	pushq $uuid_00000000000c1157
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1a65
	jmp uuid_00000000000c1a67
uuid_00000000000c1a65:
	movb $1, -2112(%rbp)
uuid_00000000000c1a67:
	mov -2544(%RBP),%RSP
	add $-2552, %RSP
uuid_00000000000c1a6a:
	mov -2128(%RBP),%RSP
	add $-2552, %RSP
uuid_00000000000c1a6d:
	mov -2120(%RBP),%RSP
	add $-2552, %RSP
	mov -2112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a6e
	jmp uuid_00000000000c1a70
uuid_00000000000c1a6e:
	movb $1, -2032(%rbp)
uuid_00000000000c1a70:
	mov -2080(%RBP),%RSP
	add $-2552, %RSP
uuid_00000000000c1a73:
	mov -2048(%RBP),%RSP
	add $-2552, %RSP
uuid_00000000000c1a76:
	mov -2040(%RBP),%RSP
	add $-2552, %RSP
	mov -2032(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b54
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -2616(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1aad
	jmp uuid_00000000000c1aaf
uuid_00000000000c1aad:
	push %RBP
	pushq -2592(%RBP)
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq $0
	push %RBP
	mov -2664(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a92
	jmp uuid_00000000000c1a94
uuid_00000000000c1a92:
	push %RBP
	mov -2656(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2728(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a89
	jmp uuid_00000000000c1a8b
uuid_00000000000c1a89:
	push %RBP
	mov -2720(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2792(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a80
	jmp uuid_00000000000c1a82
uuid_00000000000c1a80:
	push %RBP
	mov -2784(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2856(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a7d
	jmp uuid_00000000000c1a7f
uuid_00000000000c1a7d:
	push %RBP
	pushq -2760(%RBP)
	pushq -2768(%RBP)
	pushq -2776(%RBP)
	jmp uuid_00000000000c1a7a
	jmp uuid_00000000000c1a7c
uuid_00000000000c1a7a:
	movb $1, -2800(%rbp)
uuid_00000000000c1a7c:
	mov -2864(%RBP),%RSP
	add $-2888, %RSP
uuid_00000000000c1a7f:
	mov -2816(%RBP),%RSP
	add $-2888, %RSP
uuid_00000000000c1a82:
	mov -2808(%RBP),%RSP
	add $-2888, %RSP
	mov -2800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a86
	jmp uuid_00000000000c1a88
uuid_00000000000c1a86:
	push %RBP
	pushq -2696(%RBP)
	pushq -2704(%RBP)
	pushq -2712(%RBP)
	jmp uuid_00000000000c1a83
	jmp uuid_00000000000c1a85
uuid_00000000000c1a83:
	movb $1, -2736(%rbp)
uuid_00000000000c1a85:
	mov -2896(%RBP),%RSP
	add $-2920, %RSP
uuid_00000000000c1a88:
	mov -2752(%RBP),%RSP
	add $-2920, %RSP
uuid_00000000000c1a8b:
	mov -2744(%RBP),%RSP
	add $-2920, %RSP
	mov -2736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a8f
	jmp uuid_00000000000c1a91
uuid_00000000000c1a8f:
	push %RBP
	mov -2648(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2936(%rbp)
	pushq $uuid_00000000000c1157
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1a8c
	jmp uuid_00000000000c1a8e
uuid_00000000000c1a8c:
	movb $1, -2672(%rbp)
uuid_00000000000c1a8e:
	mov -2928(%RBP),%RSP
	add $-2936, %RSP
uuid_00000000000c1a91:
	mov -2688(%RBP),%RSP
	add $-2936, %RSP
uuid_00000000000c1a94:
	mov -2680(%RBP),%RSP
	add $-2936, %RSP
	mov -2672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1aaa
	jmp uuid_00000000000c1aac
uuid_00000000000c1aaa:
	push %RBP
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq $0
	push %RBP
	mov -2968(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1aa4
	jmp uuid_00000000000c1aa6
uuid_00000000000c1aa4:
	push %RBP
	mov -2960(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3032(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a9b
	jmp uuid_00000000000c1a9d
uuid_00000000000c1a9b:
	push %RBP
	mov -3024(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3096(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a98
	jmp uuid_00000000000c1a9a
uuid_00000000000c1a98:
	push %RBP
	pushq -3000(%RBP)
	pushq -3008(%RBP)
	pushq -3016(%RBP)
	jmp uuid_00000000000c1a95
	jmp uuid_00000000000c1a97
uuid_00000000000c1a95:
	movb $1, -3040(%rbp)
uuid_00000000000c1a97:
	mov -3104(%RBP),%RSP
	add $-3128, %RSP
uuid_00000000000c1a9a:
	mov -3056(%RBP),%RSP
	add $-3128, %RSP
uuid_00000000000c1a9d:
	mov -3048(%RBP),%RSP
	add $-3128, %RSP
	mov -3040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1aa1
	jmp uuid_00000000000c1aa3
uuid_00000000000c1aa1:
	push %RBP
	mov -2952(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3144(%rbp)
	pushq $uuid_00000000000c10a1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1a9e
	jmp uuid_00000000000c1aa0
uuid_00000000000c1a9e:
	movb $1, -2976(%rbp)
uuid_00000000000c1aa0:
	mov -3136(%RBP),%RSP
	add $-3144, %RSP
uuid_00000000000c1aa3:
	mov -2992(%RBP),%RSP
	add $-3144, %RSP
uuid_00000000000c1aa6:
	mov -2984(%RBP),%RSP
	add $-3144, %RSP
	mov -2976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1aa7
	jmp uuid_00000000000c1aa9
uuid_00000000000c1aa7:
	movb $1, -2624(%rbp)
uuid_00000000000c1aa9:
	mov -2944(%RBP),%RSP
	add $-3144, %RSP
uuid_00000000000c1aac:
	mov -2640(%RBP),%RSP
	add $-3144, %RSP
uuid_00000000000c1aaf:
	mov -2632(%RBP),%RSP
	add $-3144, %RSP
	mov -2624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b51
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -3208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ad4
	jmp uuid_00000000000c1ad6
uuid_00000000000c1ad4:
	push %RBP
	pushq -3184(%RBP)
	pushq -3192(%RBP)
	pushq -3200(%RBP)
	pushq $0
	push %RBP
	mov -3256(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ab9
	jmp uuid_00000000000c1abb
uuid_00000000000c1ab9:
	push %RBP
	mov -3248(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3320(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ab6
	jmp uuid_00000000000c1ab8
uuid_00000000000c1ab6:
	push %RBP
	mov -3240(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3336(%rbp)
	pushq $uuid_00000000000c1139
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1ab3
	jmp uuid_00000000000c1ab5
uuid_00000000000c1ab3:
	movb $1, -3264(%rbp)
uuid_00000000000c1ab5:
	mov -3328(%RBP),%RSP
	add $-3336, %RSP
uuid_00000000000c1ab8:
	mov -3280(%RBP),%RSP
	add $-3336, %RSP
uuid_00000000000c1abb:
	mov -3272(%RBP),%RSP
	add $-3336, %RSP
	mov -3264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ad1
	jmp uuid_00000000000c1ad3
uuid_00000000000c1ad1:
	push %RBP
	pushq -3160(%RBP)
	pushq -3168(%RBP)
	pushq -3176(%RBP)
	pushq $0
	push %RBP
	mov -3368(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1acb
	jmp uuid_00000000000c1acd
uuid_00000000000c1acb:
	push %RBP
	mov -3360(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3432(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ac2
	jmp uuid_00000000000c1ac4
uuid_00000000000c1ac2:
	push %RBP
	mov -3424(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3496(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1abf
	jmp uuid_00000000000c1ac1
uuid_00000000000c1abf:
	push %RBP
	pushq -3400(%RBP)
	pushq -3408(%RBP)
	pushq -3416(%RBP)
	jmp uuid_00000000000c1abc
	jmp uuid_00000000000c1abe
uuid_00000000000c1abc:
	movb $1, -3440(%rbp)
uuid_00000000000c1abe:
	mov -3504(%RBP),%RSP
	add $-3528, %RSP
uuid_00000000000c1ac1:
	mov -3456(%RBP),%RSP
	add $-3528, %RSP
uuid_00000000000c1ac4:
	mov -3448(%RBP),%RSP
	add $-3528, %RSP
	mov -3440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ac8
	jmp uuid_00000000000c1aca
uuid_00000000000c1ac8:
	push %RBP
	mov -3352(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3544(%rbp)
	pushq $uuid_00000000000c10a1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1ac5
	jmp uuid_00000000000c1ac7
uuid_00000000000c1ac5:
	movb $1, -3376(%rbp)
uuid_00000000000c1ac7:
	mov -3536(%RBP),%RSP
	add $-3544, %RSP
uuid_00000000000c1aca:
	mov -3392(%RBP),%RSP
	add $-3544, %RSP
uuid_00000000000c1acd:
	mov -3384(%RBP),%RSP
	add $-3544, %RSP
	mov -3376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ace
	jmp uuid_00000000000c1ad0
uuid_00000000000c1ace:
	movb $1, -3216(%rbp)
uuid_00000000000c1ad0:
	mov -3344(%RBP),%RSP
	add $-3544, %RSP
uuid_00000000000c1ad3:
	mov -3232(%RBP),%RSP
	add $-3544, %RSP
uuid_00000000000c1ad6:
	mov -3224(%RBP),%RSP
	add $-3544, %RSP
	mov -3216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b4e
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -3608(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1aef
	jmp uuid_00000000000c1af1
uuid_00000000000c1aef:
	push %RBP
	pushq -3584(%RBP)
	pushq -3592(%RBP)
	pushq -3600(%RBP)
	jmp uuid_00000000000c1aec
	jmp uuid_00000000000c1aee
uuid_00000000000c1aec:
	push %RBP
	pushq -3560(%RBP)
	pushq -3568(%RBP)
	pushq -3576(%RBP)
	pushq $0
	push %RBP
	mov -3688(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ae6
	jmp uuid_00000000000c1ae8
uuid_00000000000c1ae6:
	push %RBP
	mov -3680(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3752(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1add
	jmp uuid_00000000000c1adf
uuid_00000000000c1add:
	push %RBP
	mov -3744(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3816(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ada
	jmp uuid_00000000000c1adc
uuid_00000000000c1ada:
	push %RBP
	pushq -3720(%RBP)
	pushq -3728(%RBP)
	pushq -3736(%RBP)
	jmp uuid_00000000000c1ad7
	jmp uuid_00000000000c1ad9
uuid_00000000000c1ad7:
	movb $1, -3760(%rbp)
uuid_00000000000c1ad9:
	mov -3824(%RBP),%RSP
	add $-3848, %RSP
uuid_00000000000c1adc:
	mov -3776(%RBP),%RSP
	add $-3848, %RSP
uuid_00000000000c1adf:
	mov -3768(%RBP),%RSP
	add $-3848, %RSP
	mov -3760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ae3
	jmp uuid_00000000000c1ae5
uuid_00000000000c1ae3:
	push %RBP
	mov -3672(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3864(%rbp)
	pushq $uuid_00000000000c10a1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1ae0
	jmp uuid_00000000000c1ae2
uuid_00000000000c1ae0:
	movb $1, -3696(%rbp)
uuid_00000000000c1ae2:
	mov -3856(%RBP),%RSP
	add $-3864, %RSP
uuid_00000000000c1ae5:
	mov -3712(%RBP),%RSP
	add $-3864, %RSP
uuid_00000000000c1ae8:
	mov -3704(%RBP),%RSP
	add $-3864, %RSP
	mov -3696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ae9
	jmp uuid_00000000000c1aeb
uuid_00000000000c1ae9:
	movb $1, -3616(%rbp)
uuid_00000000000c1aeb:
	mov -3664(%RBP),%RSP
	add $-3864, %RSP
uuid_00000000000c1aee:
	mov -3632(%RBP),%RSP
	add $-3864, %RSP
uuid_00000000000c1af1:
	mov -3624(%RBP),%RSP
	add $-3864, %RSP
	mov -3616(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b4b
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -3928(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b1d
	jmp uuid_00000000000c1b1f
uuid_00000000000c1b1d:
	push %RBP
	pushq -3904(%RBP)
	pushq -3912(%RBP)
	pushq -3920(%RBP)
	pushq $0
	push %RBP
	mov -3976(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1af8
	jmp uuid_00000000000c1afa
uuid_00000000000c1af8:
	push %RBP
	mov -3968(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4040(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1af5
	jmp uuid_00000000000c1af7
uuid_00000000000c1af5:
	push %RBP
	mov -3960(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1af2
	jmp uuid_00000000000c1af4
uuid_00000000000c1af2:
	movb $1, -3984(%rbp)
uuid_00000000000c1af4:
	mov -4048(%RBP),%RSP
	add $-4056, %RSP
uuid_00000000000c1af7:
	mov -4000(%RBP),%RSP
	add $-4056, %RSP
uuid_00000000000c1afa:
	mov -3992(%RBP),%RSP
	add $-4056, %RSP
	mov -3984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b1a
	jmp uuid_00000000000c1b1c
uuid_00000000000c1b1a:
	push %RBP
	pushq -3880(%RBP)
	pushq -3888(%RBP)
	pushq -3896(%RBP)
	pushq $0
	push %RBP
	mov -4088(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b14
	jmp uuid_00000000000c1b16
uuid_00000000000c1b14:
	push %RBP
	mov -4080(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4152(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b0a
	jmp uuid_00000000000c1b0c
uuid_00000000000c1b0a:
	push %RBP
	mov -4144(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4216(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b07
	jmp uuid_00000000000c1b09
uuid_00000000000c1b07:
	push %RBP
	pushq -4120(%RBP)
	pushq -4128(%RBP)
	pushq -4136(%RBP)
	pushq $0
	push %RBP
	mov -4248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b01
	jmp uuid_00000000000c1b03
uuid_00000000000c1b01:
	push %RBP
	mov -4240(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4312(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1afe
	jmp uuid_00000000000c1b00
uuid_00000000000c1afe:
	push %RBP
	mov -4232(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1afb
	jmp uuid_00000000000c1afd
uuid_00000000000c1afb:
	movb $1, -4256(%rbp)
uuid_00000000000c1afd:
	mov -4320(%RBP),%RSP
	add $-4328, %RSP
uuid_00000000000c1b00:
	mov -4272(%RBP),%RSP
	add $-4328, %RSP
uuid_00000000000c1b03:
	mov -4264(%RBP),%RSP
	add $-4328, %RSP
	mov -4256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b04
	jmp uuid_00000000000c1b06
uuid_00000000000c1b04:
	movb $1, -4160(%rbp)
uuid_00000000000c1b06:
	mov -4224(%RBP),%RSP
	add $-4328, %RSP
uuid_00000000000c1b09:
	mov -4176(%RBP),%RSP
	add $-4328, %RSP
uuid_00000000000c1b0c:
	mov -4168(%RBP),%RSP
	add $-4328, %RSP
	mov -4160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b11
	jmp uuid_00000000000c1b13
uuid_00000000000c1b11:
	push %RBP
	mov -4072(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4344(%rbp)
	pushq $uuid_00000000000c1b0d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1b0e
	jmp uuid_00000000000c1b10
uuid_00000000000c1b0e:
	movb $1, -4096(%rbp)
uuid_00000000000c1b10:
	mov -4336(%RBP),%RSP
	add $-4344, %RSP
uuid_00000000000c1b13:
	mov -4112(%RBP),%RSP
	add $-4344, %RSP
uuid_00000000000c1b16:
	mov -4104(%RBP),%RSP
	add $-4344, %RSP
	mov -4096(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b17
	jmp uuid_00000000000c1b19
uuid_00000000000c1b17:
	movb $1, -3936(%rbp)
uuid_00000000000c1b19:
	mov -4064(%RBP),%RSP
	add $-4344, %RSP
uuid_00000000000c1b1c:
	mov -3952(%RBP),%RSP
	add $-4344, %RSP
uuid_00000000000c1b1f:
	mov -3944(%RBP),%RSP
	add $-4344, %RSP
	mov -3936(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b48
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -4408(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b3b
	jmp uuid_00000000000c1b3d
uuid_00000000000c1b3b:
	push %RBP
	pushq -4384(%RBP)
	pushq -4392(%RBP)
	pushq -4400(%RBP)
	pushq $0
	push %RBP
	mov -4456(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b29
	jmp uuid_00000000000c1b2b
uuid_00000000000c1b29:
	push %RBP
	mov -4448(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1b26
	jmp uuid_00000000000c1b28
uuid_00000000000c1b26:
	push %RBP
	mov -4440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1b23
	jmp uuid_00000000000c1b25
uuid_00000000000c1b23:
	movb $1, -4464(%rbp)
uuid_00000000000c1b25:
	mov -4528(%RBP),%RSP
	add $-4536, %RSP
uuid_00000000000c1b28:
	mov -4480(%RBP),%RSP
	add $-4536, %RSP
uuid_00000000000c1b2b:
	mov -4472(%RBP),%RSP
	add $-4536, %RSP
	mov -4464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b38
	jmp uuid_00000000000c1b3a
uuid_00000000000c1b38:
	push %RBP
	pushq -4360(%RBP)
	pushq -4368(%RBP)
	pushq -4376(%RBP)
	pushq $0
	push %RBP
	mov -4568(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b32
	jmp uuid_00000000000c1b34
uuid_00000000000c1b32:
	push %RBP
	mov -4560(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1b2f
	jmp uuid_00000000000c1b31
uuid_00000000000c1b2f:
	push %RBP
	mov -4552(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1b2c
	jmp uuid_00000000000c1b2e
uuid_00000000000c1b2c:
	movb $1, -4576(%rbp)
uuid_00000000000c1b2e:
	mov -4640(%RBP),%RSP
	add $-4648, %RSP
uuid_00000000000c1b31:
	mov -4592(%RBP),%RSP
	add $-4648, %RSP
uuid_00000000000c1b34:
	mov -4584(%RBP),%RSP
	add $-4648, %RSP
	mov -4576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b35
	jmp uuid_00000000000c1b37
uuid_00000000000c1b35:
	movb $1, -4416(%rbp)
uuid_00000000000c1b37:
	mov -4544(%RBP),%RSP
	add $-4648, %RSP
uuid_00000000000c1b3a:
	mov -4432(%RBP),%RSP
	add $-4648, %RSP
uuid_00000000000c1b3d:
	mov -4424(%RBP),%RSP
	add $-4648, %RSP
	mov -4416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b45
	push %RBP
	jmp uuid_00000000000c1b42
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c1b41
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1b44
uuid_00000000000c1b42:
uuid_00000000000c1b44:
	mov -4656(%RBP),%RSP
	add $-4656, %RSP
	jmp uuid_00000000000c1b47
uuid_00000000000c1b45:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4648(%rbp)
	pushq -4536(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1b3e
	jmp uuid_00000000000c1b40
uuid_00000000000c1b3e:
#call function can-unify : Arrow<Cons<List<Type>,List<Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4600(%rbp)
	pushq -4608(%rbp)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000c1b40:
	mov -4656(%RBP),%RSP
	add $-4656, %RSP
uuid_00000000000c1b47:
	mov -4352(%RBP),%RSP
	add $-4656, %RSP
	jmp uuid_00000000000c1b4a
uuid_00000000000c1b48:
	push %RBP
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4328(%rbp)
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4056(%rbp)
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b20
	jmp uuid_00000000000c1b22
uuid_00000000000c1b20:
	movq $1, -64(%rbp)
uuid_00000000000c1b22:
	mov -4352(%RBP),%RSP
	add $-4352, %RSP
uuid_00000000000c1b4a:
	mov -3872(%RBP),%RSP
	add $-4352, %RSP
	jmp uuid_00000000000c1b4d
uuid_00000000000c1b4b:
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	pushq -3640(%rbp)
	pushq -3648(%rbp)
	pushq -3656(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000c1b4d:
	mov -3552(%RBP),%RSP
	add $-3864, %RSP
	jmp uuid_00000000000c1b50
uuid_00000000000c1b4e:
	movq $1, -64(%rbp)
uuid_00000000000c1b50:
	mov -3152(%RBP),%RSP
	add $-3544, %RSP
	jmp uuid_00000000000c1b53
uuid_00000000000c1b51:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3112(%rbp)
	pushq -3120(%rbp)
	pushq -3128(%rbp)
	pushq -2904(%rbp)
	pushq -2912(%rbp)
	pushq -2920(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1ab0
	jmp uuid_00000000000c1ab2
uuid_00000000000c1ab0:
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -2872(%rbp)
	pushq -2880(%rbp)
	pushq -2888(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000c1ab2:
	mov -3152(%RBP),%RSP
	add $-3152, %RSP
uuid_00000000000c1b53:
	mov -2560(%RBP),%RSP
	add $-3152, %RSP
	jmp uuid_00000000000c1b56
uuid_00000000000c1b54:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2504(%rbp)
	pushq -2512(%rbp)
	pushq -2520(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1a77
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
	jmp uuid_00000000000c1a79
uuid_00000000000c1a77:
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1139
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000c1a79:
	mov -2560(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c1b56:
	mov -1968(%RBP),%RSP
	add $-2560, %RSP
	jmp uuid_00000000000c1b59
uuid_00000000000c1b57:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1a3e
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
	jmp uuid_00000000000c1a40
uuid_00000000000c1a3e:
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000c1a40:
	mov -1968(%RBP),%RSP
	add $-1968, %RSP
uuid_00000000000c1b59:
	mov -1104(%RBP),%RSP
	add $-1968, %RSP
	jmp uuid_00000000000c1b5c
uuid_00000000000c1b5a:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c19e7
	jmp uuid_00000000000c19e9
uuid_00000000000c19e7:
	movq $1, -64(%rbp)
uuid_00000000000c19e9:
	mov -1104(%RBP),%RSP
	add $-1104, %RSP
	push %RBP
	mov -64(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000c19ea
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
	jmp uuid_00000000000c19ec
uuid_00000000000c19ea:
uuid_00000000000c19ec:
	mov -1112(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c1b5c:
	mov -880(%RBP),%RSP
	add $-1112, %RSP
	jmp uuid_00000000000c1b5f
uuid_00000000000c1b5d:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c19d2
	jmp uuid_00000000000c19d4
uuid_00000000000c19d2:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c19cf
	jmp uuid_00000000000c19d1
uuid_00000000000c19cf:
	movq $1, -64(%rbp)
uuid_00000000000c19d1:
	mov -888(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c19d4:
	mov -880(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c1b5f:
	mov -656(%RBP),%RSP
	add $-888, %RSP
	jmp uuid_00000000000c1b62
uuid_00000000000c1b60:
	movq $1, -64(%rbp)
uuid_00000000000c1b62:
	mov -480(%RBP),%RSP
	add $-648, %RSP
	jmp uuid_00000000000c1b65
uuid_00000000000c1b63:
	movq $1, -64(%rbp)
uuid_00000000000c1b65:
	mov -248(%RBP),%RSP
	add $-472, %RSP
	jmp uuid_00000000000c1b68
uuid_00000000000c1b66:
	movq $1, -64(%rbp)
uuid_00000000000c1b68:
	mov -128(%RBP),%RSP
	add $-240, %RSP
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
unify_CL_ArrowTContextConsTypeType:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1b69
	jmp uuid_00000000000c1b6b
uuid_00000000000c1b69:
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c1b6b:
	mov -184(%RBP),%RSP
	add $-184, %RSP
	subq $120, %rsp
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
unify_SB_inner_CL_ArrowTContextConsTypeType:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b72
	jmp uuid_00000000000c1b74
uuid_00000000000c1b72:
	push %RBP
	jmp uuid_00000000000c1b6f
	jmp uuid_00000000000c1b71
uuid_00000000000c1b6f:
	push %RBP
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b6c
	jmp uuid_00000000000c1b6e
uuid_00000000000c1b6c:
	movb $1, -304(%rbp)
uuid_00000000000c1b6e:
	mov -328(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c1b71:
	mov -320(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c1b74:
	mov -312(%RBP),%RSP
	add $-352, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1dac
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b8a
	jmp uuid_00000000000c1b8c
uuid_00000000000c1b8a:
	push %RBP
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq $0
	push %RBP
	mov -464(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b7b
	jmp uuid_00000000000c1b7d
uuid_00000000000c1b7b:
	push %RBP
	mov -456(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b78
	jmp uuid_00000000000c1b7a
uuid_00000000000c1b78:
	push %RBP
	mov -448(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1b75
	jmp uuid_00000000000c1b77
uuid_00000000000c1b75:
	movb $1, -472(%rbp)
uuid_00000000000c1b77:
	mov -536(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000c1b7a:
	mov -488(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000c1b7d:
	mov -480(%RBP),%RSP
	add $-544, %RSP
	mov -472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b87
	jmp uuid_00000000000c1b89
uuid_00000000000c1b87:
	push %RBP
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq $0
	push %RBP
	mov -576(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b81
	jmp uuid_00000000000c1b83
uuid_00000000000c1b81:
	push %RBP
	mov -568(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1b7e
	jmp uuid_00000000000c1b80
uuid_00000000000c1b7e:
	movb $1, -584(%rbp)
uuid_00000000000c1b80:
	mov -600(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000c1b83:
	mov -592(%RBP),%RSP
	add $-608, %RSP
	mov -584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b84
	jmp uuid_00000000000c1b86
uuid_00000000000c1b84:
	movb $1, -424(%rbp)
uuid_00000000000c1b86:
	mov -552(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000c1b89:
	mov -440(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000c1b8c:
	mov -432(%RBP),%RSP
	add $-608, %RSP
	mov -424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1da9
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ba5
	jmp uuid_00000000000c1ba7
uuid_00000000000c1ba5:
	push %RBP
	jmp uuid_00000000000c1ba2
	jmp uuid_00000000000c1ba4
uuid_00000000000c1ba2:
	push %RBP
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq $0
	push %RBP
	mov -728(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b9c
	jmp uuid_00000000000c1b9e
uuid_00000000000c1b9c:
	push %RBP
	mov -720(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -792(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b93
	jmp uuid_00000000000c1b95
uuid_00000000000c1b93:
	push %RBP
	mov -784(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -856(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b90
	jmp uuid_00000000000c1b92
uuid_00000000000c1b90:
	push %RBP
	pushq -760(%RBP)
	pushq -768(%RBP)
	pushq -776(%RBP)
	jmp uuid_00000000000c1b8d
	jmp uuid_00000000000c1b8f
uuid_00000000000c1b8d:
	movb $1, -800(%rbp)
uuid_00000000000c1b8f:
	mov -864(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c1b92:
	mov -816(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c1b95:
	mov -808(%RBP),%RSP
	add $-888, %RSP
	mov -800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b99
	jmp uuid_00000000000c1b9b
uuid_00000000000c1b99:
	push %RBP
	mov -712(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -904(%rbp)
	pushq $uuid_00000000000c199b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1b96
	jmp uuid_00000000000c1b98
uuid_00000000000c1b96:
	movb $1, -736(%rbp)
uuid_00000000000c1b98:
	mov -896(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000c1b9b:
	mov -752(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000c1b9e:
	mov -744(%RBP),%RSP
	add $-904, %RSP
	mov -736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b9f
	jmp uuid_00000000000c1ba1
uuid_00000000000c1b9f:
	movb $1, -680(%rbp)
uuid_00000000000c1ba1:
	mov -704(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000c1ba4:
	mov -696(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000c1ba7:
	mov -688(%RBP),%RSP
	add $-904, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1da6
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -968(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1bb4
	jmp uuid_00000000000c1bb6
uuid_00000000000c1bb4:
	push %RBP
	pushq -944(%RBP)
	pushq -952(%RBP)
	pushq -960(%RBP)
	jmp uuid_00000000000c1bb1
	jmp uuid_00000000000c1bb3
uuid_00000000000c1bb1:
	push %RBP
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	pushq $0
	push %RBP
	mov -1048(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1bab
	jmp uuid_00000000000c1bad
uuid_00000000000c1bab:
	push %RBP
	mov -1040(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1ba8
	jmp uuid_00000000000c1baa
uuid_00000000000c1ba8:
	movb $1, -1056(%rbp)
uuid_00000000000c1baa:
	mov -1072(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000c1bad:
	mov -1064(%RBP),%RSP
	add $-1080, %RSP
	mov -1056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1bae
	jmp uuid_00000000000c1bb0
uuid_00000000000c1bae:
	movb $1, -976(%rbp)
uuid_00000000000c1bb0:
	mov -1024(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000c1bb3:
	mov -992(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000c1bb6:
	mov -984(%RBP),%RSP
	add $-1080, %RSP
	mov -976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1da3
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -1144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1bc6
	jmp uuid_00000000000c1bc8
uuid_00000000000c1bc6:
	push %RBP
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	jmp uuid_00000000000c1bc3
	jmp uuid_00000000000c1bc5
uuid_00000000000c1bc3:
	push %RBP
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq $0
	push %RBP
	mov -1224(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1bbd
	jmp uuid_00000000000c1bbf
uuid_00000000000c1bbd:
	push %RBP
	mov -1216(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1bba
	jmp uuid_00000000000c1bbc
uuid_00000000000c1bba:
	push %RBP
	mov -1208(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1bb7
	jmp uuid_00000000000c1bb9
uuid_00000000000c1bb7:
	movb $1, -1232(%rbp)
uuid_00000000000c1bb9:
	mov -1280(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c1bbc:
	mov -1248(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c1bbf:
	mov -1240(%RBP),%RSP
	add $-1304, %RSP
	mov -1232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1bc0
	jmp uuid_00000000000c1bc2
uuid_00000000000c1bc0:
	movb $1, -1152(%rbp)
uuid_00000000000c1bc2:
	mov -1200(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c1bc5:
	mov -1168(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c1bc8:
	mov -1160(%RBP),%RSP
	add $-1304, %RSP
	mov -1152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1da0
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -1368(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1bfd
	jmp uuid_00000000000c1bff
uuid_00000000000c1bfd:
	push %RBP
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq $0
	push %RBP
	mov -1416(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1bf4
	jmp uuid_00000000000c1bf6
uuid_00000000000c1bf4:
	push %RBP
	mov -1408(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1bf1
	jmp uuid_00000000000c1bf3
uuid_00000000000c1bf1:
	push %RBP
	mov -1400(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1bee
	jmp uuid_00000000000c1bf0
uuid_00000000000c1bee:
	movb $1, -1424(%rbp)
uuid_00000000000c1bf0:
	mov -1472(%RBP),%RSP
	add $-1496, %RSP
uuid_00000000000c1bf3:
	mov -1440(%RBP),%RSP
	add $-1496, %RSP
uuid_00000000000c1bf6:
	mov -1432(%RBP),%RSP
	add $-1496, %RSP
	mov -1424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1bfa
	jmp uuid_00000000000c1bfc
uuid_00000000000c1bfa:
	push %RBP
	pushq -1320(%RBP)
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	jmp uuid_00000000000c1bf7
	jmp uuid_00000000000c1bf9
uuid_00000000000c1bf7:
	movb $1, -1376(%rbp)
uuid_00000000000c1bf9:
	mov -1504(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000c1bfc:
	mov -1392(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000c1bff:
	mov -1384(%RBP),%RSP
	add $-1528, %RSP
	mov -1376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d9d
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -1592(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c7f
	jmp uuid_00000000000c1c81
uuid_00000000000c1c7f:
	push %RBP
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq $0
	push %RBP
	mov -1640(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c49
	jmp uuid_00000000000c1c4b
uuid_00000000000c1c49:
	push %RBP
	mov -1632(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1704(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c40
	jmp uuid_00000000000c1c42
uuid_00000000000c1c40:
	push %RBP
	mov -1696(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1768(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c37
	jmp uuid_00000000000c1c39
uuid_00000000000c1c37:
	push %RBP
	mov -1760(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1832(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c34
	jmp uuid_00000000000c1c36
uuid_00000000000c1c34:
	push %RBP
	pushq -1736(%RBP)
	pushq -1744(%RBP)
	pushq -1752(%RBP)
	jmp uuid_00000000000c1c31
	jmp uuid_00000000000c1c33
uuid_00000000000c1c31:
	movb $1, -1776(%rbp)
uuid_00000000000c1c33:
	mov -1840(%RBP),%RSP
	add $-1864, %RSP
uuid_00000000000c1c36:
	mov -1792(%RBP),%RSP
	add $-1864, %RSP
uuid_00000000000c1c39:
	mov -1784(%RBP),%RSP
	add $-1864, %RSP
	mov -1776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c3d
	jmp uuid_00000000000c1c3f
uuid_00000000000c1c3d:
	push %RBP
	pushq -1672(%RBP)
	pushq -1680(%RBP)
	pushq -1688(%RBP)
	jmp uuid_00000000000c1c3a
	jmp uuid_00000000000c1c3c
uuid_00000000000c1c3a:
	movb $1, -1712(%rbp)
uuid_00000000000c1c3c:
	mov -1872(%RBP),%RSP
	add $-1896, %RSP
uuid_00000000000c1c3f:
	mov -1728(%RBP),%RSP
	add $-1896, %RSP
uuid_00000000000c1c42:
	mov -1720(%RBP),%RSP
	add $-1896, %RSP
	mov -1712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c46
	jmp uuid_00000000000c1c48
uuid_00000000000c1c46:
	push %RBP
	mov -1624(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1912(%rbp)
	pushq $uuid_00000000000c1157
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1c43
	jmp uuid_00000000000c1c45
uuid_00000000000c1c43:
	movb $1, -1648(%rbp)
uuid_00000000000c1c45:
	mov -1904(%RBP),%RSP
	add $-1912, %RSP
uuid_00000000000c1c48:
	mov -1664(%RBP),%RSP
	add $-1912, %RSP
uuid_00000000000c1c4b:
	mov -1656(%RBP),%RSP
	add $-1912, %RSP
	mov -1648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c7c
	jmp uuid_00000000000c1c7e
uuid_00000000000c1c7c:
	push %RBP
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq $0
	push %RBP
	mov -1944(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c76
	jmp uuid_00000000000c1c78
uuid_00000000000c1c76:
	push %RBP
	mov -1936(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2008(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c6d
	jmp uuid_00000000000c1c6f
uuid_00000000000c1c6d:
	push %RBP
	mov -2000(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2072(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c52
	jmp uuid_00000000000c1c54
uuid_00000000000c1c52:
	push %RBP
	mov -2064(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c4f
	jmp uuid_00000000000c1c51
uuid_00000000000c1c4f:
	push %RBP
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	jmp uuid_00000000000c1c4c
	jmp uuid_00000000000c1c4e
uuid_00000000000c1c4c:
	movb $1, -2080(%rbp)
uuid_00000000000c1c4e:
	mov -2144(%RBP),%RSP
	add $-2168, %RSP
uuid_00000000000c1c51:
	mov -2096(%RBP),%RSP
	add $-2168, %RSP
uuid_00000000000c1c54:
	mov -2088(%RBP),%RSP
	add $-2168, %RSP
	mov -2080(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c6a
	jmp uuid_00000000000c1c6c
uuid_00000000000c1c6a:
	push %RBP
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq $0
	push %RBP
	mov -2200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c64
	jmp uuid_00000000000c1c66
uuid_00000000000c1c64:
	push %RBP
	mov -2192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2264(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c5b
	jmp uuid_00000000000c1c5d
uuid_00000000000c1c5b:
	push %RBP
	mov -2256(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2328(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c58
	jmp uuid_00000000000c1c5a
uuid_00000000000c1c58:
	push %RBP
	pushq -2232(%RBP)
	pushq -2240(%RBP)
	pushq -2248(%RBP)
	jmp uuid_00000000000c1c55
	jmp uuid_00000000000c1c57
uuid_00000000000c1c55:
	movb $1, -2272(%rbp)
uuid_00000000000c1c57:
	mov -2336(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000c1c5a:
	mov -2288(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000c1c5d:
	mov -2280(%RBP),%RSP
	add $-2360, %RSP
	mov -2272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c61
	jmp uuid_00000000000c1c63
uuid_00000000000c1c61:
	push %RBP
	mov -2184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2376(%rbp)
	pushq $uuid_00000000000c10a1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1c5e
	jmp uuid_00000000000c1c60
uuid_00000000000c1c5e:
	movb $1, -2208(%rbp)
uuid_00000000000c1c60:
	mov -2368(%RBP),%RSP
	add $-2376, %RSP
uuid_00000000000c1c63:
	mov -2224(%RBP),%RSP
	add $-2376, %RSP
uuid_00000000000c1c66:
	mov -2216(%RBP),%RSP
	add $-2376, %RSP
	mov -2208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c67
	jmp uuid_00000000000c1c69
uuid_00000000000c1c67:
	movb $1, -2016(%rbp)
uuid_00000000000c1c69:
	mov -2176(%RBP),%RSP
	add $-2376, %RSP
uuid_00000000000c1c6c:
	mov -2032(%RBP),%RSP
	add $-2376, %RSP
uuid_00000000000c1c6f:
	mov -2024(%RBP),%RSP
	add $-2376, %RSP
	mov -2016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c73
	jmp uuid_00000000000c1c75
uuid_00000000000c1c73:
	push %RBP
	mov -1928(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2392(%rbp)
	pushq $uuid_00000000000c1157
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1c70
	jmp uuid_00000000000c1c72
uuid_00000000000c1c70:
	movb $1, -1952(%rbp)
uuid_00000000000c1c72:
	mov -2384(%RBP),%RSP
	add $-2392, %RSP
uuid_00000000000c1c75:
	mov -1968(%RBP),%RSP
	add $-2392, %RSP
uuid_00000000000c1c78:
	mov -1960(%RBP),%RSP
	add $-2392, %RSP
	mov -1952(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c79
	jmp uuid_00000000000c1c7b
uuid_00000000000c1c79:
	movb $1, -1600(%rbp)
uuid_00000000000c1c7b:
	mov -1920(%RBP),%RSP
	add $-2392, %RSP
uuid_00000000000c1c7e:
	mov -1616(%RBP),%RSP
	add $-2392, %RSP
uuid_00000000000c1c81:
	mov -1608(%RBP),%RSP
	add $-2392, %RSP
	mov -1600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d9a
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -2456(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1cb8
	jmp uuid_00000000000c1cba
uuid_00000000000c1cb8:
	push %RBP
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	jmp uuid_00000000000c1cb5
	jmp uuid_00000000000c1cb7
uuid_00000000000c1cb5:
	push %RBP
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq $0
	push %RBP
	mov -2536(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1caf
	jmp uuid_00000000000c1cb1
uuid_00000000000c1caf:
	push %RBP
	mov -2528(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2600(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ca6
	jmp uuid_00000000000c1ca8
uuid_00000000000c1ca6:
	push %RBP
	mov -2592(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c8b
	jmp uuid_00000000000c1c8d
uuid_00000000000c1c8b:
	push %RBP
	mov -2656(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2728(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c88
	jmp uuid_00000000000c1c8a
uuid_00000000000c1c88:
	push %RBP
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	jmp uuid_00000000000c1c85
	jmp uuid_00000000000c1c87
uuid_00000000000c1c85:
	movb $1, -2672(%rbp)
uuid_00000000000c1c87:
	mov -2736(%RBP),%RSP
	add $-2760, %RSP
uuid_00000000000c1c8a:
	mov -2688(%RBP),%RSP
	add $-2760, %RSP
uuid_00000000000c1c8d:
	mov -2680(%RBP),%RSP
	add $-2760, %RSP
	mov -2672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ca3
	jmp uuid_00000000000c1ca5
uuid_00000000000c1ca3:
	push %RBP
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq $0
	push %RBP
	mov -2792(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c9d
	jmp uuid_00000000000c1c9f
uuid_00000000000c1c9d:
	push %RBP
	mov -2784(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2856(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c94
	jmp uuid_00000000000c1c96
uuid_00000000000c1c94:
	push %RBP
	mov -2848(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2920(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c91
	jmp uuid_00000000000c1c93
uuid_00000000000c1c91:
	push %RBP
	pushq -2824(%RBP)
	pushq -2832(%RBP)
	pushq -2840(%RBP)
	jmp uuid_00000000000c1c8e
	jmp uuid_00000000000c1c90
uuid_00000000000c1c8e:
	movb $1, -2864(%rbp)
uuid_00000000000c1c90:
	mov -2928(%RBP),%RSP
	add $-2952, %RSP
uuid_00000000000c1c93:
	mov -2880(%RBP),%RSP
	add $-2952, %RSP
uuid_00000000000c1c96:
	mov -2872(%RBP),%RSP
	add $-2952, %RSP
	mov -2864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c9a
	jmp uuid_00000000000c1c9c
uuid_00000000000c1c9a:
	push %RBP
	mov -2776(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2968(%rbp)
	pushq $uuid_00000000000c10a1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1c97
	jmp uuid_00000000000c1c99
uuid_00000000000c1c97:
	movb $1, -2800(%rbp)
uuid_00000000000c1c99:
	mov -2960(%RBP),%RSP
	add $-2968, %RSP
uuid_00000000000c1c9c:
	mov -2816(%RBP),%RSP
	add $-2968, %RSP
uuid_00000000000c1c9f:
	mov -2808(%RBP),%RSP
	add $-2968, %RSP
	mov -2800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ca0
	jmp uuid_00000000000c1ca2
uuid_00000000000c1ca0:
	movb $1, -2608(%rbp)
uuid_00000000000c1ca2:
	mov -2768(%RBP),%RSP
	add $-2968, %RSP
uuid_00000000000c1ca5:
	mov -2624(%RBP),%RSP
	add $-2968, %RSP
uuid_00000000000c1ca8:
	mov -2616(%RBP),%RSP
	add $-2968, %RSP
	mov -2608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1cac
	jmp uuid_00000000000c1cae
uuid_00000000000c1cac:
	push %RBP
	mov -2520(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2984(%rbp)
	pushq $uuid_00000000000c1157
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1ca9
	jmp uuid_00000000000c1cab
uuid_00000000000c1ca9:
	movb $1, -2544(%rbp)
uuid_00000000000c1cab:
	mov -2976(%RBP),%RSP
	add $-2984, %RSP
uuid_00000000000c1cae:
	mov -2560(%RBP),%RSP
	add $-2984, %RSP
uuid_00000000000c1cb1:
	mov -2552(%RBP),%RSP
	add $-2984, %RSP
	mov -2544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1cb2
	jmp uuid_00000000000c1cb4
uuid_00000000000c1cb2:
	movb $1, -2464(%rbp)
uuid_00000000000c1cb4:
	mov -2512(%RBP),%RSP
	add $-2984, %RSP
uuid_00000000000c1cb7:
	mov -2480(%RBP),%RSP
	add $-2984, %RSP
uuid_00000000000c1cba:
	mov -2472(%RBP),%RSP
	add $-2984, %RSP
	mov -2464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d97
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -3048(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1cf1
	jmp uuid_00000000000c1cf3
uuid_00000000000c1cf1:
	push %RBP
	pushq -3024(%RBP)
	pushq -3032(%RBP)
	pushq -3040(%RBP)
	pushq $0
	push %RBP
	mov -3096(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1cd6
	jmp uuid_00000000000c1cd8
uuid_00000000000c1cd6:
	push %RBP
	mov -3088(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ccd
	jmp uuid_00000000000c1ccf
uuid_00000000000c1ccd:
	push %RBP
	mov -3152(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3224(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1cc4
	jmp uuid_00000000000c1cc6
uuid_00000000000c1cc4:
	push %RBP
	mov -3216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3288(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1cc1
	jmp uuid_00000000000c1cc3
uuid_00000000000c1cc1:
	push %RBP
	pushq -3192(%RBP)
	pushq -3200(%RBP)
	pushq -3208(%RBP)
	jmp uuid_00000000000c1cbe
	jmp uuid_00000000000c1cc0
uuid_00000000000c1cbe:
	movb $1, -3232(%rbp)
uuid_00000000000c1cc0:
	mov -3296(%RBP),%RSP
	add $-3320, %RSP
uuid_00000000000c1cc3:
	mov -3248(%RBP),%RSP
	add $-3320, %RSP
uuid_00000000000c1cc6:
	mov -3240(%RBP),%RSP
	add $-3320, %RSP
	mov -3232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1cca
	jmp uuid_00000000000c1ccc
uuid_00000000000c1cca:
	push %RBP
	pushq -3128(%RBP)
	pushq -3136(%RBP)
	pushq -3144(%RBP)
	jmp uuid_00000000000c1cc7
	jmp uuid_00000000000c1cc9
uuid_00000000000c1cc7:
	movb $1, -3168(%rbp)
uuid_00000000000c1cc9:
	mov -3328(%RBP),%RSP
	add $-3352, %RSP
uuid_00000000000c1ccc:
	mov -3184(%RBP),%RSP
	add $-3352, %RSP
uuid_00000000000c1ccf:
	mov -3176(%RBP),%RSP
	add $-3352, %RSP
	mov -3168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1cd3
	jmp uuid_00000000000c1cd5
uuid_00000000000c1cd3:
	push %RBP
	mov -3080(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3368(%rbp)
	pushq $uuid_00000000000c1157
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1cd0
	jmp uuid_00000000000c1cd2
uuid_00000000000c1cd0:
	movb $1, -3104(%rbp)
uuid_00000000000c1cd2:
	mov -3360(%RBP),%RSP
	add $-3368, %RSP
uuid_00000000000c1cd5:
	mov -3120(%RBP),%RSP
	add $-3368, %RSP
uuid_00000000000c1cd8:
	mov -3112(%RBP),%RSP
	add $-3368, %RSP
	mov -3104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1cee
	jmp uuid_00000000000c1cf0
uuid_00000000000c1cee:
	push %RBP
	pushq -3000(%RBP)
	pushq -3008(%RBP)
	pushq -3016(%RBP)
	pushq $0
	push %RBP
	mov -3400(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ce8
	jmp uuid_00000000000c1cea
uuid_00000000000c1ce8:
	push %RBP
	mov -3392(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3464(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1cdf
	jmp uuid_00000000000c1ce1
uuid_00000000000c1cdf:
	push %RBP
	mov -3456(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3528(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1cdc
	jmp uuid_00000000000c1cde
uuid_00000000000c1cdc:
	push %RBP
	pushq -3432(%RBP)
	pushq -3440(%RBP)
	pushq -3448(%RBP)
	jmp uuid_00000000000c1cd9
	jmp uuid_00000000000c1cdb
uuid_00000000000c1cd9:
	movb $1, -3472(%rbp)
uuid_00000000000c1cdb:
	mov -3536(%RBP),%RSP
	add $-3560, %RSP
uuid_00000000000c1cde:
	mov -3488(%RBP),%RSP
	add $-3560, %RSP
uuid_00000000000c1ce1:
	mov -3480(%RBP),%RSP
	add $-3560, %RSP
	mov -3472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ce5
	jmp uuid_00000000000c1ce7
uuid_00000000000c1ce5:
	push %RBP
	mov -3384(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3576(%rbp)
	pushq $uuid_00000000000c10a1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1ce2
	jmp uuid_00000000000c1ce4
uuid_00000000000c1ce2:
	movb $1, -3408(%rbp)
uuid_00000000000c1ce4:
	mov -3568(%RBP),%RSP
	add $-3576, %RSP
uuid_00000000000c1ce7:
	mov -3424(%RBP),%RSP
	add $-3576, %RSP
uuid_00000000000c1cea:
	mov -3416(%RBP),%RSP
	add $-3576, %RSP
	mov -3408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ceb
	jmp uuid_00000000000c1ced
uuid_00000000000c1ceb:
	movb $1, -3056(%rbp)
uuid_00000000000c1ced:
	mov -3376(%RBP),%RSP
	add $-3576, %RSP
uuid_00000000000c1cf0:
	mov -3072(%RBP),%RSP
	add $-3576, %RSP
uuid_00000000000c1cf3:
	mov -3064(%RBP),%RSP
	add $-3576, %RSP
	mov -3056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d94
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -3640(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d18
	jmp uuid_00000000000c1d1a
uuid_00000000000c1d18:
	push %RBP
	pushq -3616(%RBP)
	pushq -3624(%RBP)
	pushq -3632(%RBP)
	pushq $0
	push %RBP
	mov -3688(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1cfd
	jmp uuid_00000000000c1cff
uuid_00000000000c1cfd:
	push %RBP
	mov -3680(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3752(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1cfa
	jmp uuid_00000000000c1cfc
uuid_00000000000c1cfa:
	push %RBP
	mov -3672(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3768(%rbp)
	pushq $uuid_00000000000c1139
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1cf7
	jmp uuid_00000000000c1cf9
uuid_00000000000c1cf7:
	movb $1, -3696(%rbp)
uuid_00000000000c1cf9:
	mov -3760(%RBP),%RSP
	add $-3768, %RSP
uuid_00000000000c1cfc:
	mov -3712(%RBP),%RSP
	add $-3768, %RSP
uuid_00000000000c1cff:
	mov -3704(%RBP),%RSP
	add $-3768, %RSP
	mov -3696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d15
	jmp uuid_00000000000c1d17
uuid_00000000000c1d15:
	push %RBP
	pushq -3592(%RBP)
	pushq -3600(%RBP)
	pushq -3608(%RBP)
	pushq $0
	push %RBP
	mov -3800(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d0f
	jmp uuid_00000000000c1d11
uuid_00000000000c1d0f:
	push %RBP
	mov -3792(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3864(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d06
	jmp uuid_00000000000c1d08
uuid_00000000000c1d06:
	push %RBP
	mov -3856(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3928(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d03
	jmp uuid_00000000000c1d05
uuid_00000000000c1d03:
	push %RBP
	pushq -3832(%RBP)
	pushq -3840(%RBP)
	pushq -3848(%RBP)
	jmp uuid_00000000000c1d00
	jmp uuid_00000000000c1d02
uuid_00000000000c1d00:
	movb $1, -3872(%rbp)
uuid_00000000000c1d02:
	mov -3936(%RBP),%RSP
	add $-3960, %RSP
uuid_00000000000c1d05:
	mov -3888(%RBP),%RSP
	add $-3960, %RSP
uuid_00000000000c1d08:
	mov -3880(%RBP),%RSP
	add $-3960, %RSP
	mov -3872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d0c
	jmp uuid_00000000000c1d0e
uuid_00000000000c1d0c:
	push %RBP
	mov -3784(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3976(%rbp)
	pushq $uuid_00000000000c10a1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1d09
	jmp uuid_00000000000c1d0b
uuid_00000000000c1d09:
	movb $1, -3808(%rbp)
uuid_00000000000c1d0b:
	mov -3968(%RBP),%RSP
	add $-3976, %RSP
uuid_00000000000c1d0e:
	mov -3824(%RBP),%RSP
	add $-3976, %RSP
uuid_00000000000c1d11:
	mov -3816(%RBP),%RSP
	add $-3976, %RSP
	mov -3808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d12
	jmp uuid_00000000000c1d14
uuid_00000000000c1d12:
	movb $1, -3648(%rbp)
uuid_00000000000c1d14:
	mov -3776(%RBP),%RSP
	add $-3976, %RSP
uuid_00000000000c1d17:
	mov -3664(%RBP),%RSP
	add $-3976, %RSP
uuid_00000000000c1d1a:
	mov -3656(%RBP),%RSP
	add $-3976, %RSP
	mov -3648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d91
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -4040(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d33
	jmp uuid_00000000000c1d35
uuid_00000000000c1d33:
	push %RBP
	pushq -4016(%RBP)
	pushq -4024(%RBP)
	pushq -4032(%RBP)
	jmp uuid_00000000000c1d30
	jmp uuid_00000000000c1d32
uuid_00000000000c1d30:
	push %RBP
	pushq -3992(%RBP)
	pushq -4000(%RBP)
	pushq -4008(%RBP)
	pushq $0
	push %RBP
	mov -4120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d2a
	jmp uuid_00000000000c1d2c
uuid_00000000000c1d2a:
	push %RBP
	mov -4112(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d21
	jmp uuid_00000000000c1d23
uuid_00000000000c1d21:
	push %RBP
	mov -4176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d1e
	jmp uuid_00000000000c1d20
uuid_00000000000c1d1e:
	push %RBP
	pushq -4152(%RBP)
	pushq -4160(%RBP)
	pushq -4168(%RBP)
	jmp uuid_00000000000c1d1b
	jmp uuid_00000000000c1d1d
uuid_00000000000c1d1b:
	movb $1, -4192(%rbp)
uuid_00000000000c1d1d:
	mov -4256(%RBP),%RSP
	add $-4280, %RSP
uuid_00000000000c1d20:
	mov -4208(%RBP),%RSP
	add $-4280, %RSP
uuid_00000000000c1d23:
	mov -4200(%RBP),%RSP
	add $-4280, %RSP
	mov -4192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d27
	jmp uuid_00000000000c1d29
uuid_00000000000c1d27:
	push %RBP
	mov -4104(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4296(%rbp)
	pushq $uuid_00000000000c10a1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1d24
	jmp uuid_00000000000c1d26
uuid_00000000000c1d24:
	movb $1, -4128(%rbp)
uuid_00000000000c1d26:
	mov -4288(%RBP),%RSP
	add $-4296, %RSP
uuid_00000000000c1d29:
	mov -4144(%RBP),%RSP
	add $-4296, %RSP
uuid_00000000000c1d2c:
	mov -4136(%RBP),%RSP
	add $-4296, %RSP
	mov -4128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d2d
	jmp uuid_00000000000c1d2f
uuid_00000000000c1d2d:
	movb $1, -4048(%rbp)
uuid_00000000000c1d2f:
	mov -4096(%RBP),%RSP
	add $-4296, %RSP
uuid_00000000000c1d32:
	mov -4064(%RBP),%RSP
	add $-4296, %RSP
uuid_00000000000c1d35:
	mov -4056(%RBP),%RSP
	add $-4296, %RSP
	mov -4048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d8e
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -4360(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d60
	jmp uuid_00000000000c1d62
uuid_00000000000c1d60:
	push %RBP
	pushq -4336(%RBP)
	pushq -4344(%RBP)
	pushq -4352(%RBP)
	pushq $0
	push %RBP
	mov -4408(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d3c
	jmp uuid_00000000000c1d3e
uuid_00000000000c1d3c:
	push %RBP
	mov -4400(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4472(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d39
	jmp uuid_00000000000c1d3b
uuid_00000000000c1d39:
	push %RBP
	mov -4392(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1d36
	jmp uuid_00000000000c1d38
uuid_00000000000c1d36:
	movb $1, -4416(%rbp)
uuid_00000000000c1d38:
	mov -4480(%RBP),%RSP
	add $-4488, %RSP
uuid_00000000000c1d3b:
	mov -4432(%RBP),%RSP
	add $-4488, %RSP
uuid_00000000000c1d3e:
	mov -4424(%RBP),%RSP
	add $-4488, %RSP
	mov -4416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d5d
	jmp uuid_00000000000c1d5f
uuid_00000000000c1d5d:
	push %RBP
	pushq -4312(%RBP)
	pushq -4320(%RBP)
	pushq -4328(%RBP)
	pushq $0
	push %RBP
	mov -4520(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d57
	jmp uuid_00000000000c1d59
uuid_00000000000c1d57:
	push %RBP
	mov -4512(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4584(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d4e
	jmp uuid_00000000000c1d50
uuid_00000000000c1d4e:
	push %RBP
	mov -4576(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4648(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d4b
	jmp uuid_00000000000c1d4d
uuid_00000000000c1d4b:
	push %RBP
	pushq -4552(%RBP)
	pushq -4560(%RBP)
	pushq -4568(%RBP)
	pushq $0
	push %RBP
	mov -4680(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d45
	jmp uuid_00000000000c1d47
uuid_00000000000c1d45:
	push %RBP
	mov -4672(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4744(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d42
	jmp uuid_00000000000c1d44
uuid_00000000000c1d42:
	push %RBP
	mov -4664(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1d3f
	jmp uuid_00000000000c1d41
uuid_00000000000c1d3f:
	movb $1, -4688(%rbp)
uuid_00000000000c1d41:
	mov -4752(%RBP),%RSP
	add $-4760, %RSP
uuid_00000000000c1d44:
	mov -4704(%RBP),%RSP
	add $-4760, %RSP
uuid_00000000000c1d47:
	mov -4696(%RBP),%RSP
	add $-4760, %RSP
	mov -4688(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d48
	jmp uuid_00000000000c1d4a
uuid_00000000000c1d48:
	movb $1, -4592(%rbp)
uuid_00000000000c1d4a:
	mov -4656(%RBP),%RSP
	add $-4760, %RSP
uuid_00000000000c1d4d:
	mov -4608(%RBP),%RSP
	add $-4760, %RSP
uuid_00000000000c1d50:
	mov -4600(%RBP),%RSP
	add $-4760, %RSP
	mov -4592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d54
	jmp uuid_00000000000c1d56
uuid_00000000000c1d54:
	push %RBP
	mov -4504(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4776(%rbp)
	pushq $uuid_00000000000c1b0d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1d51
	jmp uuid_00000000000c1d53
uuid_00000000000c1d51:
	movb $1, -4528(%rbp)
uuid_00000000000c1d53:
	mov -4768(%RBP),%RSP
	add $-4776, %RSP
uuid_00000000000c1d56:
	mov -4544(%RBP),%RSP
	add $-4776, %RSP
uuid_00000000000c1d59:
	mov -4536(%RBP),%RSP
	add $-4776, %RSP
	mov -4528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d5a
	jmp uuid_00000000000c1d5c
uuid_00000000000c1d5a:
	movb $1, -4368(%rbp)
uuid_00000000000c1d5c:
	mov -4496(%RBP),%RSP
	add $-4776, %RSP
uuid_00000000000c1d5f:
	mov -4384(%RBP),%RSP
	add $-4776, %RSP
uuid_00000000000c1d62:
	mov -4376(%RBP),%RSP
	add $-4776, %RSP
	mov -4368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d8b
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -4840(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d7e
	jmp uuid_00000000000c1d80
uuid_00000000000c1d7e:
	push %RBP
	pushq -4816(%RBP)
	pushq -4824(%RBP)
	pushq -4832(%RBP)
	pushq $0
	push %RBP
	mov -4888(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d6c
	jmp uuid_00000000000c1d6e
uuid_00000000000c1d6c:
	push %RBP
	mov -4880(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1d69
	jmp uuid_00000000000c1d6b
uuid_00000000000c1d69:
	push %RBP
	mov -4872(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1d66
	jmp uuid_00000000000c1d68
uuid_00000000000c1d66:
	movb $1, -4896(%rbp)
uuid_00000000000c1d68:
	mov -4960(%RBP),%RSP
	add $-4968, %RSP
uuid_00000000000c1d6b:
	mov -4912(%RBP),%RSP
	add $-4968, %RSP
uuid_00000000000c1d6e:
	mov -4904(%RBP),%RSP
	add $-4968, %RSP
	mov -4896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d7b
	jmp uuid_00000000000c1d7d
uuid_00000000000c1d7b:
	push %RBP
	pushq -4792(%RBP)
	pushq -4800(%RBP)
	pushq -4808(%RBP)
	pushq $0
	push %RBP
	mov -5000(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d75
	jmp uuid_00000000000c1d77
uuid_00000000000c1d75:
	push %RBP
	mov -4992(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1d72
	jmp uuid_00000000000c1d74
uuid_00000000000c1d72:
	push %RBP
	mov -4984(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1d6f
	jmp uuid_00000000000c1d71
uuid_00000000000c1d6f:
	movb $1, -5008(%rbp)
uuid_00000000000c1d71:
	mov -5072(%RBP),%RSP
	add $-5080, %RSP
uuid_00000000000c1d74:
	mov -5024(%RBP),%RSP
	add $-5080, %RSP
uuid_00000000000c1d77:
	mov -5016(%RBP),%RSP
	add $-5080, %RSP
	mov -5008(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d78
	jmp uuid_00000000000c1d7a
uuid_00000000000c1d78:
	movb $1, -4848(%rbp)
uuid_00000000000c1d7a:
	mov -4976(%RBP),%RSP
	add $-5080, %RSP
uuid_00000000000c1d7d:
	mov -4864(%RBP),%RSP
	add $-5080, %RSP
uuid_00000000000c1d80:
	mov -4856(%RBP),%RSP
	add $-5080, %RSP
	mov -4848(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d88
	push %RBP
	jmp uuid_00000000000c1d85
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c1d84
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1d87
uuid_00000000000c1d85:
uuid_00000000000c1d87:
	mov -5088(%RBP),%RSP
	add $-5088, %RSP
	jmp uuid_00000000000c1d8a
uuid_00000000000c1d88:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5080(%rbp)
	pushq -4968(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1d81
	jmp uuid_00000000000c1d83
uuid_00000000000c1d81:
#call function unify : Arrow<Cons<List<Type>,List<Type>>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -5064(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c1d83:
	mov -5088(%RBP),%RSP
	add $-5088, %RSP
uuid_00000000000c1d8a:
	mov -4784(%RBP),%RSP
	add $-5088, %RSP
	jmp uuid_00000000000c1d8d
uuid_00000000000c1d8b:
	push %RBP
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4760(%rbp)
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4488(%rbp)
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d63
	jmp uuid_00000000000c1d65
uuid_00000000000c1d63:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c1d65:
	mov -4784(%RBP),%RSP
	add $-4784, %RSP
uuid_00000000000c1d8d:
	mov -4304(%RBP),%RSP
	add $-4784, %RSP
	jmp uuid_00000000000c1d90
uuid_00000000000c1d8e:
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4264(%rbp)
	pushq -4272(%rbp)
	pushq -4280(%rbp)
	pushq -4072(%rbp)
	pushq -4080(%rbp)
	pushq -4088(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c1d90:
	mov -3984(%RBP),%RSP
	add $-4296, %RSP
	jmp uuid_00000000000c1d93
uuid_00000000000c1d91:
uuid_00000000000c1d93:
	mov -3584(%RBP),%RSP
	add $-3976, %RSP
	jmp uuid_00000000000c1d96
uuid_00000000000c1d94:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3544(%rbp)
	pushq -3552(%rbp)
	pushq -3560(%rbp)
	pushq -3336(%rbp)
	pushq -3344(%rbp)
	pushq -3352(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1cf4
	jmp uuid_00000000000c1cf6
uuid_00000000000c1cf4:
#call function and : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -3304(%rbp)
	pushq -3312(%rbp)
	pushq -3320(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3544(%rbp)
	pushq -3552(%rbp)
	pushq -3560(%rbp)
	pushq -3336(%rbp)
	pushq -3344(%rbp)
	pushq -3352(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c1cf6:
	mov -3584(%RBP),%RSP
	add $-3584, %RSP
uuid_00000000000c1d96:
	mov -2992(%RBP),%RSP
	add $-3584, %RSP
	jmp uuid_00000000000c1d99
uuid_00000000000c1d97:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2936(%rbp)
	pushq -2944(%rbp)
	pushq -2952(%rbp)
	pushq -2488(%rbp)
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1cbb
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2744(%rbp)
	pushq -2752(%rbp)
	pushq -2760(%rbp)
	pushq -2488(%rbp)
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	jmp uuid_00000000000c1cbd
uuid_00000000000c1cbb:
#call function and : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2936(%rbp)
	pushq -2944(%rbp)
	pushq -2952(%rbp)
	pushq -2488(%rbp)
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2744(%rbp)
	pushq -2752(%rbp)
	pushq -2760(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1139
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c1cbd:
	mov -2992(%RBP),%RSP
	add $-2992, %RSP
uuid_00000000000c1d99:
	mov -2400(%RBP),%RSP
	add $-2992, %RSP
	jmp uuid_00000000000c1d9c
uuid_00000000000c1d9a:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1c82
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	jmp uuid_00000000000c1c84
uuid_00000000000c1c82:
#call function and : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c1c84:
	mov -2400(%RBP),%RSP
	add $-2400, %RSP
uuid_00000000000c1d9c:
	mov -1536(%RBP),%RSP
	add $-2400, %RSP
	jmp uuid_00000000000c1d9f
uuid_00000000000c1d9d:
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	push %RBP
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq $0
	push %RBP
	mov -2032(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c06
	jmp uuid_00000000000c1c08
uuid_00000000000c1c06:
	push %RBP
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	mov -2176(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c03
	jmp uuid_00000000000c1c05
uuid_00000000000c1c03:
	push %RBP
	pushq -1792(%RBP)
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	pushq -1824(%RBP)
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	pushq -1856(%RBP)
	pushq -1864(%RBP)
	pushq -1872(%RBP)
	pushq -1880(%RBP)
	pushq -1888(%RBP)
	pushq -1896(%RBP)
	pushq -1904(%RBP)
	mov -2304(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c00
	jmp uuid_00000000000c1c02
uuid_00000000000c1c00:
	movb $1, -2040(%rbp)
uuid_00000000000c1c02:
	mov -2184(%RBP),%RSP
	add $-2304, %RSP
uuid_00000000000c1c05:
	mov -2056(%RBP),%RSP
	add $-2304, %RSP
uuid_00000000000c1c08:
	mov -2048(%RBP),%RSP
	add $-2304, %RSP
	mov -2040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c2e
	push %RBP
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq $0
	push %RBP
	mov -2560(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c0f
	jmp uuid_00000000000c1c11
uuid_00000000000c1c0f:
	push %RBP
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	mov -2704(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c0c
	jmp uuid_00000000000c1c0e
uuid_00000000000c1c0c:
	push %RBP
	pushq -2320(%RBP)
	pushq -2328(%RBP)
	pushq -2336(%RBP)
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	pushq -2360(%RBP)
	pushq -2368(%RBP)
	pushq -2376(%RBP)
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	jmp uuid_00000000000c1c09
	jmp uuid_00000000000c1c0b
uuid_00000000000c1c09:
	movb $1, -2568(%rbp)
uuid_00000000000c1c0b:
	mov -2712(%RBP),%RSP
	add $-2832, %RSP
uuid_00000000000c1c0e:
	mov -2584(%RBP),%RSP
	add $-2832, %RSP
uuid_00000000000c1c11:
	mov -2576(%RBP),%RSP
	add $-2832, %RSP
	mov -2568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c2b
	push %RBP
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq $0
	push %RBP
	mov -3088(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c18
	jmp uuid_00000000000c1c1a
uuid_00000000000c1c18:
	push %RBP
	pushq -2968(%RBP)
	pushq -2976(%RBP)
	pushq -2984(%RBP)
	pushq -2992(%RBP)
	pushq -3000(%RBP)
	pushq -3008(%RBP)
	pushq -3016(%RBP)
	pushq -3024(%RBP)
	pushq -3032(%RBP)
	pushq -3040(%RBP)
	pushq -3048(%RBP)
	pushq -3056(%RBP)
	pushq -3064(%RBP)
	pushq -3072(%RBP)
	pushq -3080(%RBP)
	jmp uuid_00000000000c1c15
	jmp uuid_00000000000c1c17
uuid_00000000000c1c15:
	push %RBP
	pushq -2848(%RBP)
	pushq -2856(%RBP)
	pushq -2864(%RBP)
	pushq -2872(%RBP)
	pushq -2880(%RBP)
	pushq -2888(%RBP)
	pushq -2896(%RBP)
	pushq -2904(%RBP)
	pushq -2912(%RBP)
	pushq -2920(%RBP)
	pushq -2928(%RBP)
	pushq -2936(%RBP)
	pushq -2944(%RBP)
	pushq -2952(%RBP)
	pushq -2960(%RBP)
	mov -3360(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c12
	jmp uuid_00000000000c1c14
uuid_00000000000c1c12:
	movb $1, -3096(%rbp)
uuid_00000000000c1c14:
	mov -3240(%RBP),%RSP
	add $-3360, %RSP
uuid_00000000000c1c17:
	mov -3112(%RBP),%RSP
	add $-3360, %RSP
uuid_00000000000c1c1a:
	mov -3104(%RBP),%RSP
	add $-3360, %RSP
	mov -3096(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c28
	push %RBP
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq $0
	push %RBP
	mov -3616(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c21
	jmp uuid_00000000000c1c23
uuid_00000000000c1c21:
	push %RBP
	pushq -3496(%RBP)
	pushq -3504(%RBP)
	pushq -3512(%RBP)
	pushq -3520(%RBP)
	pushq -3528(%RBP)
	pushq -3536(%RBP)
	pushq -3544(%RBP)
	pushq -3552(%RBP)
	pushq -3560(%RBP)
	pushq -3568(%RBP)
	pushq -3576(%RBP)
	pushq -3584(%RBP)
	pushq -3592(%RBP)
	pushq -3600(%RBP)
	pushq -3608(%RBP)
	jmp uuid_00000000000c1c1e
	jmp uuid_00000000000c1c20
uuid_00000000000c1c1e:
	push %RBP
	pushq -3376(%RBP)
	pushq -3384(%RBP)
	pushq -3392(%RBP)
	pushq -3400(%RBP)
	pushq -3408(%RBP)
	pushq -3416(%RBP)
	pushq -3424(%RBP)
	pushq -3432(%RBP)
	pushq -3440(%RBP)
	pushq -3448(%RBP)
	pushq -3456(%RBP)
	pushq -3464(%RBP)
	pushq -3472(%RBP)
	pushq -3480(%RBP)
	pushq -3488(%RBP)
	jmp uuid_00000000000c1c1b
	jmp uuid_00000000000c1c1d
uuid_00000000000c1c1b:
	movb $1, -3624(%rbp)
uuid_00000000000c1c1d:
	mov -3768(%RBP),%RSP
	add $-3888, %RSP
uuid_00000000000c1c20:
	mov -3640(%RBP),%RSP
	add $-3888, %RSP
uuid_00000000000c1c23:
	mov -3632(%RBP),%RSP
	add $-3888, %RSP
	mov -3624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c25
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c1c24
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1c27
uuid_00000000000c1c25:
#call function union : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3776(%rbp)
	pushq -3784(%rbp)
	pushq -3792(%rbp)
	pushq -3800(%rbp)
	pushq -3808(%rbp)
	pushq -3816(%rbp)
	pushq -3824(%rbp)
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq -3880(%rbp)
	pushq -3888(%rbp)
	pushq -3648(%rbp)
	pushq -3656(%rbp)
	pushq -3664(%rbp)
	pushq -3672(%rbp)
	pushq -3680(%rbp)
	pushq -3688(%rbp)
	pushq -3696(%rbp)
	pushq -3704(%rbp)
	pushq -3712(%rbp)
	pushq -3720(%rbp)
	pushq -3728(%rbp)
	pushq -3736(%rbp)
	pushq -3744(%rbp)
	pushq -3752(%rbp)
	pushq -3760(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c1c27:
	mov -3368(%RBP),%RSP
	add $-3888, %RSP
	jmp uuid_00000000000c1c2a
uuid_00000000000c1c28:
	movq -3232(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -3224(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -3216(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -3208(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -3200(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -3192(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -3184(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -3176(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -3168(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -3160(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -3152(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -3144(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -3136(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -3128(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -3120(%rbp), %r15
	movq %r15, -64(%rbp)
uuid_00000000000c1c2a:
	mov -2840(%RBP),%RSP
	add $-3360, %RSP
	jmp uuid_00000000000c1c2d
uuid_00000000000c1c2b:
	movq -2832(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -2824(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -2816(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -2808(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -2800(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -2792(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -2784(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -2776(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -2768(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -2760(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -2752(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -2744(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -2736(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -2728(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2720(%rbp), %r15
	movq %r15, -64(%rbp)
uuid_00000000000c1c2d:
	mov -2312(%RBP),%RSP
	add $-2832, %RSP
	jmp uuid_00000000000c1c30
uuid_00000000000c1c2e:
uuid_00000000000c1c30:
	mov -1784(%RBP),%RSP
	add $-2304, %RSP
uuid_00000000000c1d9f:
	mov -1312(%RBP),%RSP
	add $-2304, %RSP
	jmp uuid_00000000000c1da2
uuid_00000000000c1da0:
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	push %RBP
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq $0
	push %RBP
	mov -1808(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1bcf
	jmp uuid_00000000000c1bd1
uuid_00000000000c1bcf:
	push %RBP
	jmp uuid_00000000000c1bcc
	jmp uuid_00000000000c1bce
uuid_00000000000c1bcc:
	push %RBP
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	pushq -1656(%RBP)
	pushq -1664(%RBP)
	pushq -1672(%RBP)
	pushq -1680(%RBP)
	mov -1960(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1bc9
	jmp uuid_00000000000c1bcb
uuid_00000000000c1bc9:
	movb $1, -1816(%rbp)
uuid_00000000000c1bcb:
	mov -1840(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000c1bce:
	mov -1832(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000c1bd1:
	mov -1824(%RBP),%RSP
	add $-1960, %RSP
	mov -1816(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1beb
	push %RBP
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq $0
	push %RBP
	mov -2216(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1bd8
	jmp uuid_00000000000c1bda
uuid_00000000000c1bd8:
	push %RBP
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2152(%RBP)
	pushq -2160(%RBP)
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	mov -2360(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1bd5
	jmp uuid_00000000000c1bd7
uuid_00000000000c1bd5:
	push %RBP
	jmp uuid_00000000000c1bd2
	jmp uuid_00000000000c1bd4
uuid_00000000000c1bd2:
	movb $1, -2224(%rbp)
uuid_00000000000c1bd4:
	mov -2368(%RBP),%RSP
	add $-2368, %RSP
uuid_00000000000c1bd7:
	mov -2240(%RBP),%RSP
	add $-2368, %RSP
uuid_00000000000c1bda:
	mov -2232(%RBP),%RSP
	add $-2368, %RSP
	mov -2224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1be8
	push %RBP
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq $0
	push %RBP
	mov -2624(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1be1
	jmp uuid_00000000000c1be3
uuid_00000000000c1be1:
	push %RBP
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq -2560(%RBP)
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq -2592(%RBP)
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	jmp uuid_00000000000c1bde
	jmp uuid_00000000000c1be0
uuid_00000000000c1bde:
	push %RBP
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	jmp uuid_00000000000c1bdb
	jmp uuid_00000000000c1bdd
uuid_00000000000c1bdb:
	movb $1, -2632(%rbp)
uuid_00000000000c1bdd:
	mov -2776(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000c1be0:
	mov -2648(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000c1be3:
	mov -2640(%RBP),%RSP
	add $-2896, %RSP
	mov -2632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1be5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c1be4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1be7
uuid_00000000000c1be5:
#call function union : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2784(%rbp)
	pushq -2792(%rbp)
	pushq -2800(%rbp)
	pushq -2808(%rbp)
	pushq -2816(%rbp)
	pushq -2824(%rbp)
	pushq -2832(%rbp)
	pushq -2840(%rbp)
	pushq -2848(%rbp)
	pushq -2856(%rbp)
	pushq -2864(%rbp)
	pushq -2872(%rbp)
	pushq -2880(%rbp)
	pushq -2888(%rbp)
	pushq -2896(%rbp)
	pushq -2656(%rbp)
	pushq -2664(%rbp)
	pushq -2672(%rbp)
	pushq -2680(%rbp)
	pushq -2688(%rbp)
	pushq -2696(%rbp)
	pushq -2704(%rbp)
	pushq -2712(%rbp)
	pushq -2720(%rbp)
	pushq -2728(%rbp)
	pushq -2736(%rbp)
	pushq -2744(%rbp)
	pushq -2752(%rbp)
	pushq -2760(%rbp)
	pushq -2768(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c1be7:
	mov -2376(%RBP),%RSP
	add $-2896, %RSP
	jmp uuid_00000000000c1bea
uuid_00000000000c1be8:
uuid_00000000000c1bea:
	mov -1968(%RBP),%RSP
	add $-2368, %RSP
	jmp uuid_00000000000c1bed
uuid_00000000000c1beb:
uuid_00000000000c1bed:
	mov -1560(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000c1da2:
	mov -1088(%RBP),%RSP
	add $-1960, %RSP
	jmp uuid_00000000000c1da5
uuid_00000000000c1da3:
#call function close : Arrow<TContext+CaseNumber<2>,Array<TContext+CaseNumber<2>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextCaseNumber2TContextCaseNumber2
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1080(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c1da5:
	mov -912(%RBP),%RSP
	add $-1080, %RSP
	jmp uuid_00000000000c1da8
uuid_00000000000c1da6:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c1da8:
	mov -616(%RBP),%RSP
	add $-904, %RSP
	jmp uuid_00000000000c1dab
uuid_00000000000c1da9:
#call function close : Arrow<TContext+CaseNumber<2>,Array<TContext+CaseNumber<2>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextCaseNumber2TContextCaseNumber2
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -608(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -544(%rbp)
#call function token::new : Arrow<String,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -544(%rbp)
	mov %RBX, %RBP
	call token_CL__CL_new_CL_ArrowTokenString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $6
	pushq $0
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c1dab:
	mov -360(%RBP),%RSP
	add $-608, %RSP
	jmp uuid_00000000000c1dae
uuid_00000000000c1dac:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c1dae:
	mov -240(%RBP),%RSP
	add $-352, %RSP
	subq $120, %rsp
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
unify_CL_ArrowTContextConsListTypeListType:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1dba
	jmp uuid_00000000000c1dbc
uuid_00000000000c1dba:
	push %RBP
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1db7
	jmp uuid_00000000000c1db9
uuid_00000000000c1db7:
	push %RBP
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	mov -504(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1db4
	jmp uuid_00000000000c1db6
uuid_00000000000c1db4:
	movb $1, -400(%rbp)
uuid_00000000000c1db6:
	mov -464(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c1db9:
	mov -416(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c1dbc:
	mov -408(%RBP),%RSP
	add $-504, %RSP
	mov -400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1de2
	push %RBP
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1dd5
	jmp uuid_00000000000c1dd7
uuid_00000000000c1dd5:
	push %RBP
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq $0
	push %RBP
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1dc3
	jmp uuid_00000000000c1dc5
uuid_00000000000c1dc3:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1dc0
	jmp uuid_00000000000c1dc2
uuid_00000000000c1dc0:
	push %RBP
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	jmp uuid_00000000000c1dbd
	jmp uuid_00000000000c1dbf
uuid_00000000000c1dbd:
	movb $1, -672(%rbp)
uuid_00000000000c1dbf:
	mov -736(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000c1dc2:
	mov -688(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000c1dc5:
	mov -680(%RBP),%RSP
	add $-760, %RSP
	mov -672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1dd2
	jmp uuid_00000000000c1dd4
uuid_00000000000c1dd2:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq $0
	push %RBP
	mov -808(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1dcc
	jmp uuid_00000000000c1dce
uuid_00000000000c1dcc:
	push %RBP
	mov -800(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1dc9
	jmp uuid_00000000000c1dcb
uuid_00000000000c1dc9:
	push %RBP
	pushq -776(%RBP)
	pushq -784(%RBP)
	pushq -792(%RBP)
	jmp uuid_00000000000c1dc6
	jmp uuid_00000000000c1dc8
uuid_00000000000c1dc6:
	movb $1, -816(%rbp)
uuid_00000000000c1dc8:
	mov -880(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000c1dcb:
	mov -832(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000c1dce:
	mov -824(%RBP),%RSP
	add $-904, %RSP
	mov -816(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1dcf
	jmp uuid_00000000000c1dd1
uuid_00000000000c1dcf:
	movb $1, -608(%rbp)
uuid_00000000000c1dd1:
	mov -768(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000c1dd4:
	mov -624(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000c1dd7:
	mov -616(%RBP),%RSP
	add $-904, %RSP
	mov -608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ddf
	push %RBP
	jmp uuid_00000000000c1ddc
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c1ddb
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1dde
uuid_00000000000c1ddc:
uuid_00000000000c1dde:
	mov -912(%RBP),%RSP
	add $-912, %RSP
	jmp uuid_00000000000c1de1
uuid_00000000000c1ddf:
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	push %RBP
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1dd8
	jmp uuid_00000000000c1dda
uuid_00000000000c1dd8:
#call function union : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
#call function unify : Arrow<Cons<List<Type>,List<Type>>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
uuid_00000000000c1dda:
	mov -912(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c1de1:
	mov -512(%RBP),%RSP
	add $-912, %RSP
	jmp uuid_00000000000c1de4
uuid_00000000000c1de2:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
uuid_00000000000c1de4:
	mov -304(%RBP),%RSP
	add $-504, %RSP
	subq $120, %rsp
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $88, %rsp
	ret
fields_SB_of_SB_type_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e0f
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1dfd
	jmp uuid_00000000000c1dff
uuid_00000000000c1dfd:
	push %RBP
	mov -112(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1df4
	jmp uuid_00000000000c1df6
uuid_00000000000c1df4:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1deb
	jmp uuid_00000000000c1ded
uuid_00000000000c1deb:
	push %RBP
	mov -240(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1de8
	jmp uuid_00000000000c1dea
uuid_00000000000c1de8:
	push %RBP
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	jmp uuid_00000000000c1de5
	jmp uuid_00000000000c1de7
uuid_00000000000c1de5:
	movb $1, -256(%rbp)
uuid_00000000000c1de7:
	mov -320(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000c1dea:
	mov -272(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000c1ded:
	mov -264(%RBP),%RSP
	add $-344, %RSP
	mov -256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1df1
	jmp uuid_00000000000c1df3
uuid_00000000000c1df1:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	jmp uuid_00000000000c1dee
	jmp uuid_00000000000c1df0
uuid_00000000000c1dee:
	movb $1, -192(%rbp)
uuid_00000000000c1df0:
	mov -352(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c1df3:
	mov -208(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c1df6:
	mov -200(%RBP),%RSP
	add $-376, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1dfa
	jmp uuid_00000000000c1dfc
uuid_00000000000c1dfa:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -392(%rbp)
	pushq $uuid_00000000000c1157
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1df7
	jmp uuid_00000000000c1df9
uuid_00000000000c1df7:
	movb $1, -128(%rbp)
uuid_00000000000c1df9:
	mov -384(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000c1dfc:
	mov -144(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000c1dff:
	mov -136(%RBP),%RSP
	add $-392, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e0c
	push %RBP
	jmp uuid_00000000000c1e09
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c1e08
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1e0b
uuid_00000000000c1e09:
	pushq $uuid_00000000000c1157
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1139
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c1e0b:
	mov -400(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000c1e0e
uuid_00000000000c1e0c:
	pushq $uuid_00000000000c1157
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fields-of-type : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call fields_SB_of_SB_type_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c1e0e:
	mov -96(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000c1e11
uuid_00000000000c1e0f:
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1139
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c1e11:
	mov -64(%RBP),%RSP
	add $-88, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
sizeof_SB_type_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1eed
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -128(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e15
	jmp uuid_00000000000c1e17
uuid_00000000000c1e15:
	push %RBP
	jmp uuid_00000000000c1e12
	jmp uuid_00000000000c1e14
uuid_00000000000c1e12:
	movb $1, -136(%rbp)
uuid_00000000000c1e14:
	mov -152(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000c1e17:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	mov -136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1eea
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e1e
	jmp uuid_00000000000c1e20
uuid_00000000000c1e1e:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e1b
	jmp uuid_00000000000c1e1d
uuid_00000000000c1e1b:
	push %RBP
	mov -168(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1e18
	jmp uuid_00000000000c1e1a
uuid_00000000000c1e18:
	movb $1, -192(%rbp)
uuid_00000000000c1e1a:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c1e1d:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c1e20:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ee7
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e39
	jmp uuid_00000000000c1e3b
uuid_00000000000c1e39:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -360(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e30
	jmp uuid_00000000000c1e32
uuid_00000000000c1e30:
	push %RBP
	mov -352(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -424(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e2d
	jmp uuid_00000000000c1e2f
uuid_00000000000c1e2d:
	push %RBP
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e27
	jmp uuid_00000000000c1e29
uuid_00000000000c1e27:
	push %RBP
	mov -448(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -520(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e24
	jmp uuid_00000000000c1e26
uuid_00000000000c1e24:
	push %RBP
	mov -440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1e21
	jmp uuid_00000000000c1e23
uuid_00000000000c1e21:
	movb $1, -464(%rbp)
uuid_00000000000c1e23:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c1e26:
	mov -480(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c1e29:
	mov -472(%RBP),%RSP
	add $-536, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e2a
	jmp uuid_00000000000c1e2c
uuid_00000000000c1e2a:
	movb $1, -368(%rbp)
uuid_00000000000c1e2c:
	mov -432(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c1e2f:
	mov -384(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c1e32:
	mov -376(%RBP),%RSP
	add $-536, %RSP
	mov -368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e36
	jmp uuid_00000000000c1e38
uuid_00000000000c1e36:
	push %RBP
	mov -280(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -552(%rbp)
	pushq $uuid_00000000000c1393
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1e33
	jmp uuid_00000000000c1e35
uuid_00000000000c1e33:
	movb $1, -304(%rbp)
uuid_00000000000c1e35:
	mov -544(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000c1e38:
	mov -320(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000c1e3b:
	mov -312(%RBP),%RSP
	add $-552, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ee4
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -584(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e54
	jmp uuid_00000000000c1e56
uuid_00000000000c1e54:
	push %RBP
	mov -576(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -648(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e4b
	jmp uuid_00000000000c1e4d
uuid_00000000000c1e4b:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -712(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e42
	jmp uuid_00000000000c1e44
uuid_00000000000c1e42:
	push %RBP
	mov -704(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -776(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e3f
	jmp uuid_00000000000c1e41
uuid_00000000000c1e3f:
	push %RBP
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	jmp uuid_00000000000c1e3c
	jmp uuid_00000000000c1e3e
uuid_00000000000c1e3c:
	movb $1, -720(%rbp)
uuid_00000000000c1e3e:
	mov -784(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c1e41:
	mov -736(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c1e44:
	mov -728(%RBP),%RSP
	add $-808, %RSP
	mov -720(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e48
	jmp uuid_00000000000c1e4a
uuid_00000000000c1e48:
	push %RBP
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	mov -840(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e45
	jmp uuid_00000000000c1e47
uuid_00000000000c1e45:
	movb $1, -656(%rbp)
uuid_00000000000c1e47:
	mov -816(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000c1e4a:
	mov -672(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000c1e4d:
	mov -664(%RBP),%RSP
	add $-840, %RSP
	mov -656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e51
	jmp uuid_00000000000c1e53
uuid_00000000000c1e51:
	push %RBP
	mov -568(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -856(%rbp)
	pushq $uuid_00000000000c12d1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1e4e
	jmp uuid_00000000000c1e50
uuid_00000000000c1e4e:
	movb $1, -592(%rbp)
uuid_00000000000c1e50:
	mov -848(%RBP),%RSP
	add $-856, %RSP
uuid_00000000000c1e53:
	mov -608(%RBP),%RSP
	add $-856, %RSP
uuid_00000000000c1e56:
	mov -600(%RBP),%RSP
	add $-856, %RSP
	mov -592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ee1
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -888(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e6f
	jmp uuid_00000000000c1e71
uuid_00000000000c1e6f:
	push %RBP
	mov -880(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -952(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e66
	jmp uuid_00000000000c1e68
uuid_00000000000c1e66:
	push %RBP
	mov -944(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1016(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e5d
	jmp uuid_00000000000c1e5f
uuid_00000000000c1e5d:
	push %RBP
	mov -1008(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1080(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e5a
	jmp uuid_00000000000c1e5c
uuid_00000000000c1e5a:
	push %RBP
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	jmp uuid_00000000000c1e57
	jmp uuid_00000000000c1e59
uuid_00000000000c1e57:
	movb $1, -1024(%rbp)
uuid_00000000000c1e59:
	mov -1088(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c1e5c:
	mov -1040(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c1e5f:
	mov -1032(%RBP),%RSP
	add $-1112, %RSP
	mov -1024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e63
	jmp uuid_00000000000c1e65
uuid_00000000000c1e63:
	push %RBP
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	jmp uuid_00000000000c1e60
	jmp uuid_00000000000c1e62
uuid_00000000000c1e60:
	movb $1, -960(%rbp)
uuid_00000000000c1e62:
	mov -1120(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000c1e65:
	mov -976(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000c1e68:
	mov -968(%RBP),%RSP
	add $-1144, %RSP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e6c
	jmp uuid_00000000000c1e6e
uuid_00000000000c1e6c:
	push %RBP
	mov -872(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1160(%rbp)
	pushq $uuid_00000000000c1157
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1e69
	jmp uuid_00000000000c1e6b
uuid_00000000000c1e69:
	movb $1, -896(%rbp)
uuid_00000000000c1e6b:
	mov -1152(%RBP),%RSP
	add $-1160, %RSP
uuid_00000000000c1e6e:
	mov -912(%RBP),%RSP
	add $-1160, %RSP
uuid_00000000000c1e71:
	mov -904(%RBP),%RSP
	add $-1160, %RSP
	mov -896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ede
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1192(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e93
	jmp uuid_00000000000c1e95
uuid_00000000000c1e93:
	push %RBP
	mov -1184(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1256(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e8a
	jmp uuid_00000000000c1e8c
uuid_00000000000c1e8a:
	push %RBP
	mov -1248(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1320(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e78
	jmp uuid_00000000000c1e7a
uuid_00000000000c1e78:
	push %RBP
	mov -1312(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1384(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e75
	jmp uuid_00000000000c1e77
uuid_00000000000c1e75:
	push %RBP
	pushq -1288(%RBP)
	pushq -1296(%RBP)
	pushq -1304(%RBP)
	jmp uuid_00000000000c1e72
	jmp uuid_00000000000c1e74
uuid_00000000000c1e72:
	movb $1, -1328(%rbp)
uuid_00000000000c1e74:
	mov -1392(%RBP),%RSP
	add $-1416, %RSP
uuid_00000000000c1e77:
	mov -1344(%RBP),%RSP
	add $-1416, %RSP
uuid_00000000000c1e7a:
	mov -1336(%RBP),%RSP
	add $-1416, %RSP
	mov -1328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e87
	jmp uuid_00000000000c1e89
uuid_00000000000c1e87:
	push %RBP
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq $0
	push %RBP
	mov -1448(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e81
	jmp uuid_00000000000c1e83
uuid_00000000000c1e81:
	push %RBP
	mov -1440(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1512(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e7e
	jmp uuid_00000000000c1e80
uuid_00000000000c1e7e:
	push %RBP
	mov -1432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1e7b
	jmp uuid_00000000000c1e7d
uuid_00000000000c1e7b:
	movb $1, -1456(%rbp)
uuid_00000000000c1e7d:
	mov -1520(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000c1e80:
	mov -1472(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000c1e83:
	mov -1464(%RBP),%RSP
	add $-1528, %RSP
	mov -1456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e84
	jmp uuid_00000000000c1e86
uuid_00000000000c1e84:
	movb $1, -1264(%rbp)
uuid_00000000000c1e86:
	mov -1424(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000c1e89:
	mov -1280(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000c1e8c:
	mov -1272(%RBP),%RSP
	add $-1528, %RSP
	mov -1264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e90
	jmp uuid_00000000000c1e92
uuid_00000000000c1e90:
	push %RBP
	mov -1176(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1544(%rbp)
	pushq $uuid_00000000000c16b1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1e8d
	jmp uuid_00000000000c1e8f
uuid_00000000000c1e8d:
	movb $1, -1200(%rbp)
uuid_00000000000c1e8f:
	mov -1536(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c1e92:
	mov -1216(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c1e95:
	mov -1208(%RBP),%RSP
	add $-1544, %RSP
	mov -1200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1edb
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1576(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e9c
	jmp uuid_00000000000c1e9e
uuid_00000000000c1e9c:
	push %RBP
	jmp uuid_00000000000c1e99
	jmp uuid_00000000000c1e9b
uuid_00000000000c1e99:
	push %RBP
	mov -1560(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1e96
	jmp uuid_00000000000c1e98
uuid_00000000000c1e96:
	movb $1, -1584(%rbp)
uuid_00000000000c1e98:
	mov -1608(%RBP),%RSP
	add $-1616, %RSP
uuid_00000000000c1e9b:
	mov -1600(%RBP),%RSP
	add $-1616, %RSP
uuid_00000000000c1e9e:
	mov -1592(%RBP),%RSP
	add $-1616, %RSP
	mov -1584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ed8
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1648(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1eca
	jmp uuid_00000000000c1ecc
uuid_00000000000c1eca:
	push %RBP
	mov -1640(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1ec7
	jmp uuid_00000000000c1ec9
uuid_00000000000c1ec7:
	push %RBP
	mov -1632(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1ec4
	jmp uuid_00000000000c1ec6
uuid_00000000000c1ec4:
	movb $1, -1656(%rbp)
uuid_00000000000c1ec6:
	mov -1704(%RBP),%RSP
	add $-1728, %RSP
uuid_00000000000c1ec9:
	mov -1672(%RBP),%RSP
	add $-1728, %RSP
uuid_00000000000c1ecc:
	mov -1664(%RBP),%RSP
	add $-1728, %RSP
	mov -1656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ed5
	push %RBP
	jmp uuid_00000000000c1ed2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c1ed1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1ed4
uuid_00000000000c1ed2:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1ed0
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1ed4:
	mov -1736(%RBP),%RSP
	add $-1736, %RSP
	jmp uuid_00000000000c1ed7
uuid_00000000000c1ed5:
	push %RBP
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1ecd
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
	jmp uuid_00000000000c1ecf
uuid_00000000000c1ecd:
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000c1ecf:
	mov -1736(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000c1ed7:
	mov -1624(%RBP),%RSP
	add $-1736, %RSP
	jmp uuid_00000000000c1eda
uuid_00000000000c1ed8:
#call function .lookup : Arrow<Cons<Cons<BTreeEq<String,Tuple<Type,Type>>,String>,Tuple<Type,Type>>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $type_SB_complex_SB_fields_SB_index_CL_BTreeEqTupleTypeTypeStringBTreeEqTupleTypeTypeStringCaseNumber0, %r15
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -1616(%rbp)
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowTupleTypeTypeConsTupleTypeTypeConsStringBTreeEqTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push %RBP
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq $0
	push %RBP
	mov -1736(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1eb1
	jmp uuid_00000000000c1eb3
uuid_00000000000c1eb1:
	push %RBP
	pushq -1712(%RBP)
	pushq -1720(%RBP)
	pushq -1728(%RBP)
	mov -1784(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1eae
	jmp uuid_00000000000c1eb0
uuid_00000000000c1eae:
	push %RBP
	pushq -1688(%RBP)
	pushq -1696(%RBP)
	pushq -1704(%RBP)
	mov -1816(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1eab
	jmp uuid_00000000000c1ead
uuid_00000000000c1eab:
	movb $1, -1744(%rbp)
uuid_00000000000c1ead:
	mov -1792(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000c1eb0:
	mov -1760(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000c1eb3:
	mov -1752(%RBP),%RSP
	add $-1816, %RSP
	mov -1744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ec1
	push %RBP
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq $0
	push %RBP
	mov -1880(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1eba
	jmp uuid_00000000000c1ebc
uuid_00000000000c1eba:
	push %RBP
	pushq -1856(%RBP)
	pushq -1864(%RBP)
	pushq -1872(%RBP)
	jmp uuid_00000000000c1eb7
	jmp uuid_00000000000c1eb9
uuid_00000000000c1eb7:
	push %RBP
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	jmp uuid_00000000000c1eb4
	jmp uuid_00000000000c1eb6
uuid_00000000000c1eb4:
	movb $1, -1888(%rbp)
uuid_00000000000c1eb6:
	mov -1936(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000c1eb9:
	mov -1904(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000c1ebc:
	mov -1896(%RBP),%RSP
	add $-1960, %RSP
	mov -1888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ebe
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c1ebd
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1ec0
uuid_00000000000c1ebe:
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov $8, %RAX
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c1ec0:
	mov -1824(%RBP),%RSP
	add $-2104, %RSP
	jmp uuid_00000000000c1ec3
uuid_00000000000c1ec1:
uuid_00000000000c1ec3:
	mov -1680(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000c1eda:
	mov -1552(%RBP),%RSP
	add $-1816, %RSP
	jmp uuid_00000000000c1edd
uuid_00000000000c1edb:
#call function to-u64 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1528(%rbp)
	mov %RBX, %RBP
	call to_SB_u64_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	mul %R14
	movq %RAX, -40(%rbp)
uuid_00000000000c1edd:
	mov -1168(%RBP),%RSP
	add $-1544, %RSP
	jmp uuid_00000000000c1ee0
uuid_00000000000c1ede:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c1ee0:
	mov -864(%RBP),%RSP
	add $-1160, %RSP
	jmp uuid_00000000000c1ee3
uuid_00000000000c1ee1:
	movq $8, -40(%rbp)
uuid_00000000000c1ee3:
	mov -560(%RBP),%RSP
	add $-856, %RSP
	jmp uuid_00000000000c1ee6
uuid_00000000000c1ee4:
#call function to-u64 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	mov %RBX, %RBP
	call to_SB_u64_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000c1ee6:
	mov -272(%RBP),%RSP
	add $-552, %RSP
	jmp uuid_00000000000c1ee9
uuid_00000000000c1ee7:
#call function size-of-class : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	mov %RBX, %RBP
	call size_SB_of_SB_class_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000c1ee9:
	mov -160(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000c1eec
uuid_00000000000c1eea:
uuid_00000000000c1eec:
	mov -104(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000c1eef
uuid_00000000000c1eed:
uuid_00000000000c1eef:
	mov -72(%RBP),%RSP
	add $-96, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
sizeof_SB_aligned_CL_ArrowU64Type:
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -40(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ef0
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $8
	pushq -40(%rbp)
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
	jmp uuid_00000000000c1ef2
uuid_00000000000c1ef0:
uuid_00000000000c1ef2:
	mov -48(%RBP),%RSP
	add $-48, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
has_SB_infinite_CL_ArrowU64ConsU64ConsListTypeConsU64ConsStringType:
	pushq $0
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f09
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1efc
	jmp uuid_00000000000c1efe
uuid_00000000000c1efc:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1ef9
	jmp uuid_00000000000c1efb
uuid_00000000000c1ef9:
	push %RBP
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	jmp uuid_00000000000c1ef6
	jmp uuid_00000000000c1ef8
uuid_00000000000c1ef6:
	movb $1, -248(%rbp)
uuid_00000000000c1ef8:
	mov -312(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c1efb:
	mov -264(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c1efe:
	mov -256(%RBP),%RSP
	add $-336, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f06
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c1f05
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1f08
uuid_00000000000c1f06:
	push %RBP
#call function is-parameter-flat : Arrow<Cons<Cons<String,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call is_SB_parameter_SB_flat_CL_ArrowU64ConsU64ConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1f02
	jmp uuid_00000000000c1f04
uuid_00000000000c1f02:
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1eff
	jmp uuid_00000000000c1f01
uuid_00000000000c1eff:
	movq $1, -104(%rbp)
uuid_00000000000c1f01:
	mov -352(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c1f04:
	mov -344(%RBP),%RSP
	add $-352, %RSP
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function has-infinite : Arrow<Cons<Cons<Cons<Cons<Type,String>,U64>,List<Type>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov -88(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsU64ConsListTypeConsU64ConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -104(%rbp)
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -104(%rbp)
uuid_00000000000c1f08:
	mov -200(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000c1f0b
uuid_00000000000c1f09:
uuid_00000000000c1f0b:
	mov -152(%RBP),%RSP
	add $-192, %RSP
	mov -104(%rbp), %RAX
	mov %rbp, %rsp
	sub $96, %rsp
	ret
has_SB_infinite_CL_ArrowU64ConsTypeType:
	pushq $0
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f12
	jmp uuid_00000000000c1f14
uuid_00000000000c1f12:
	push %RBP
	jmp uuid_00000000000c1f0f
	jmp uuid_00000000000c1f11
uuid_00000000000c1f0f:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $uuid_00000000000c12d1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1f0c
	jmp uuid_00000000000c1f0e
uuid_00000000000c1f0c:
	movb $1, -128(%rbp)
uuid_00000000000c1f0e:
	mov -152(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000c1f11:
	mov -144(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000c1f14:
	mov -136(%RBP),%RSP
	add $-160, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f6d
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f2d
	jmp uuid_00000000000c1f2f
uuid_00000000000c1f2d:
	push %RBP
	mov -184(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f24
	jmp uuid_00000000000c1f26
uuid_00000000000c1f24:
	push %RBP
	mov -248(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -320(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f1b
	jmp uuid_00000000000c1f1d
uuid_00000000000c1f1b:
	push %RBP
	mov -312(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f18
	jmp uuid_00000000000c1f1a
uuid_00000000000c1f18:
	push %RBP
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq -304(%RBP)
	jmp uuid_00000000000c1f15
	jmp uuid_00000000000c1f17
uuid_00000000000c1f15:
	movb $1, -328(%rbp)
uuid_00000000000c1f17:
	mov -392(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c1f1a:
	mov -344(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c1f1d:
	mov -336(%RBP),%RSP
	add $-416, %RSP
	mov -328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f21
	jmp uuid_00000000000c1f23
uuid_00000000000c1f21:
	push %RBP
	jmp uuid_00000000000c1f1e
	jmp uuid_00000000000c1f20
uuid_00000000000c1f1e:
	movb $1, -264(%rbp)
uuid_00000000000c1f20:
	mov -424(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c1f23:
	mov -280(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c1f26:
	mov -272(%RBP),%RSP
	add $-424, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f2a
	jmp uuid_00000000000c1f2c
uuid_00000000000c1f2a:
	push %RBP
	mov -176(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -440(%rbp)
	pushq $uuid_00000000000c16b1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1f27
	jmp uuid_00000000000c1f29
uuid_00000000000c1f27:
	movb $1, -200(%rbp)
uuid_00000000000c1f29:
	mov -432(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c1f2c:
	mov -216(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c1f2f:
	mov -208(%RBP),%RSP
	add $-440, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f6a
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f48
	jmp uuid_00000000000c1f4a
uuid_00000000000c1f48:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f3f
	jmp uuid_00000000000c1f41
uuid_00000000000c1f3f:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f36
	jmp uuid_00000000000c1f38
uuid_00000000000c1f36:
	push %RBP
	mov -592(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f33
	jmp uuid_00000000000c1f35
uuid_00000000000c1f33:
	push %RBP
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	jmp uuid_00000000000c1f30
	jmp uuid_00000000000c1f32
uuid_00000000000c1f30:
	movb $1, -608(%rbp)
uuid_00000000000c1f32:
	mov -672(%RBP),%RSP
	add $-696, %RSP
uuid_00000000000c1f35:
	mov -624(%RBP),%RSP
	add $-696, %RSP
uuid_00000000000c1f38:
	mov -616(%RBP),%RSP
	add $-696, %RSP
	mov -608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f3c
	jmp uuid_00000000000c1f3e
uuid_00000000000c1f3c:
	push %RBP
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	jmp uuid_00000000000c1f39
	jmp uuid_00000000000c1f3b
uuid_00000000000c1f39:
	movb $1, -544(%rbp)
uuid_00000000000c1f3b:
	mov -704(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c1f3e:
	mov -560(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c1f41:
	mov -552(%RBP),%RSP
	add $-728, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f45
	jmp uuid_00000000000c1f47
uuid_00000000000c1f45:
	push %RBP
	mov -456(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -744(%rbp)
	pushq $uuid_00000000000c1157
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1f42
	jmp uuid_00000000000c1f44
uuid_00000000000c1f42:
	movb $1, -480(%rbp)
uuid_00000000000c1f44:
	mov -736(%RBP),%RSP
	add $-744, %RSP
uuid_00000000000c1f47:
	mov -496(%RBP),%RSP
	add $-744, %RSP
uuid_00000000000c1f4a:
	mov -488(%RBP),%RSP
	add $-744, %RSP
	mov -480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f67
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -776(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f51
	jmp uuid_00000000000c1f53
uuid_00000000000c1f51:
	push %RBP
	mov -768(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1f4e
	jmp uuid_00000000000c1f50
uuid_00000000000c1f4e:
	push %RBP
	mov -760(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1f4b
	jmp uuid_00000000000c1f4d
uuid_00000000000c1f4b:
	movb $1, -784(%rbp)
uuid_00000000000c1f4d:
	mov -848(%RBP),%RSP
	add $-856, %RSP
uuid_00000000000c1f50:
	mov -800(%RBP),%RSP
	add $-856, %RSP
uuid_00000000000c1f53:
	mov -792(%RBP),%RSP
	add $-856, %RSP
	mov -784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f64
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -888(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f5a
	jmp uuid_00000000000c1f5c
uuid_00000000000c1f5a:
	push %RBP
	mov -880(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1f57
	jmp uuid_00000000000c1f59
uuid_00000000000c1f57:
	push %RBP
	mov -872(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1f54
	jmp uuid_00000000000c1f56
uuid_00000000000c1f54:
	movb $1, -896(%rbp)
uuid_00000000000c1f56:
	mov -944(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c1f59:
	mov -912(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c1f5c:
	mov -904(%RBP),%RSP
	add $-968, %RSP
	mov -896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f61
	push %RBP
	jmp uuid_00000000000c1f5e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c1f5d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1f60
uuid_00000000000c1f5e:
uuid_00000000000c1f60:
	mov -976(%RBP),%RSP
	add $-976, %RSP
	jmp uuid_00000000000c1f63
uuid_00000000000c1f61:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function has-infinite : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function has-infinite : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000c1f63:
	mov -864(%RBP),%RSP
	add $-968, %RSP
	jmp uuid_00000000000c1f66
uuid_00000000000c1f64:
#call function has-infinite : Arrow<Cons<Cons<Cons<Cons<Type,String>,U64>,List<Type>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function tag-of : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call tag_SB_of_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function arity : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call arity_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq $1
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsU64ConsListTypeConsU64ConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000c1f66:
	mov -752(%RBP),%RSP
	add $-856, %RSP
	jmp uuid_00000000000c1f69
uuid_00000000000c1f67:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function has-infinite : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function has-infinite : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000c1f69:
	mov -448(%RBP),%RSP
	add $-744, %RSP
	jmp uuid_00000000000c1f6c
uuid_00000000000c1f6a:
#call function has-infinite : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000c1f6c:
	mov -168(%RBP),%RSP
	add $-440, %RSP
	jmp uuid_00000000000c1f6f
uuid_00000000000c1f6d:
uuid_00000000000c1f6f:
	mov -96(%RBP),%RSP
	add $-160, %RSP
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1f70
	jmp uuid_00000000000c1f72
uuid_00000000000c1f70:
	movq $1, -64(%rbp)
uuid_00000000000c1f72:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
has_SB_forward_CL_ArrowU64ListType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f82
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f7b
	jmp uuid_00000000000c1f7d
uuid_00000000000c1f7b:
	push %RBP
	mov -184(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1f78
	jmp uuid_00000000000c1f7a
uuid_00000000000c1f78:
	push %RBP
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	jmp uuid_00000000000c1f75
	jmp uuid_00000000000c1f77
uuid_00000000000c1f75:
	movb $1, -200(%rbp)
uuid_00000000000c1f77:
	mov -264(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c1f7a:
	mov -216(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c1f7d:
	mov -208(%RBP),%RSP
	add $-288, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f7f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c1f7e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1f81
uuid_00000000000c1f7f:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function has-forward : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function has-forward : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -56(%rbp)
uuid_00000000000c1f81:
	mov -152(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000c1f84
uuid_00000000000c1f82:
uuid_00000000000c1f84:
	mov -104(%RBP),%RSP
	add $-144, %RSP
	mov -56(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
has_SB_forward_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f8b
	jmp uuid_00000000000c1f8d
uuid_00000000000c1f8b:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1f88
	jmp uuid_00000000000c1f8a
uuid_00000000000c1f88:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq $uuid_00000000000c12d1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1f85
	jmp uuid_00000000000c1f87
uuid_00000000000c1f85:
	movb $1, -104(%rbp)
uuid_00000000000c1f87:
	mov -168(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c1f8a:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c1f8d:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1fd7
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f94
	jmp uuid_00000000000c1f96
uuid_00000000000c1f94:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1f91
	jmp uuid_00000000000c1f93
uuid_00000000000c1f91:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $uuid_00000000000c1157
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1f8e
	jmp uuid_00000000000c1f90
uuid_00000000000c1f8e:
	movb $1, -216(%rbp)
uuid_00000000000c1f90:
	mov -280(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c1f93:
	mov -232(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c1f96:
	mov -224(%RBP),%RSP
	add $-288, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1fd4
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -320(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1faf
	jmp uuid_00000000000c1fb1
uuid_00000000000c1faf:
	push %RBP
	mov -312(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1fa6
	jmp uuid_00000000000c1fa8
uuid_00000000000c1fa6:
	push %RBP
	mov -376(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f9d
	jmp uuid_00000000000c1f9f
uuid_00000000000c1f9d:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f9a
	jmp uuid_00000000000c1f9c
uuid_00000000000c1f9a:
	push %RBP
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	jmp uuid_00000000000c1f97
	jmp uuid_00000000000c1f99
uuid_00000000000c1f97:
	movb $1, -456(%rbp)
uuid_00000000000c1f99:
	mov -520(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000c1f9c:
	mov -472(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000c1f9f:
	mov -464(%RBP),%RSP
	add $-544, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1fa3
	jmp uuid_00000000000c1fa5
uuid_00000000000c1fa3:
	push %RBP
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	jmp uuid_00000000000c1fa0
	jmp uuid_00000000000c1fa2
uuid_00000000000c1fa0:
	movb $1, -392(%rbp)
uuid_00000000000c1fa2:
	mov -552(%RBP),%RSP
	add $-576, %RSP
uuid_00000000000c1fa5:
	mov -408(%RBP),%RSP
	add $-576, %RSP
uuid_00000000000c1fa8:
	mov -400(%RBP),%RSP
	add $-576, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1fac
	jmp uuid_00000000000c1fae
uuid_00000000000c1fac:
	push %RBP
	mov -304(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -592(%rbp)
	pushq $uuid_00000000000c16b1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1fa9
	jmp uuid_00000000000c1fab
uuid_00000000000c1fa9:
	movb $1, -328(%rbp)
uuid_00000000000c1fab:
	mov -584(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c1fae:
	mov -344(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c1fb1:
	mov -336(%RBP),%RSP
	add $-592, %RSP
	mov -328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1fd1
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1fb8
	jmp uuid_00000000000c1fba
uuid_00000000000c1fb8:
	push %RBP
	mov -616(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1fb5
	jmp uuid_00000000000c1fb7
uuid_00000000000c1fb5:
	push %RBP
	mov -608(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1fb2
	jmp uuid_00000000000c1fb4
uuid_00000000000c1fb2:
	movb $1, -632(%rbp)
uuid_00000000000c1fb4:
	mov -696(%RBP),%RSP
	add $-704, %RSP
uuid_00000000000c1fb7:
	mov -648(%RBP),%RSP
	add $-704, %RSP
uuid_00000000000c1fba:
	mov -640(%RBP),%RSP
	add $-704, %RSP
	mov -632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1fce
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -736(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1fc4
	jmp uuid_00000000000c1fc6
uuid_00000000000c1fc4:
	push %RBP
	mov -728(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1fc1
	jmp uuid_00000000000c1fc3
uuid_00000000000c1fc1:
	push %RBP
	mov -720(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1fbe
	jmp uuid_00000000000c1fc0
uuid_00000000000c1fbe:
	movb $1, -744(%rbp)
uuid_00000000000c1fc0:
	mov -792(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000c1fc3:
	mov -760(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000c1fc6:
	mov -752(%RBP),%RSP
	add $-816, %RSP
	mov -744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1fcb
	push %RBP
	jmp uuid_00000000000c1fc8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c1fc7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1fca
uuid_00000000000c1fc8:
uuid_00000000000c1fca:
	mov -824(%RBP),%RSP
	add $-824, %RSP
	jmp uuid_00000000000c1fcd
uuid_00000000000c1fcb:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function has-forward : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function has-forward : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000c1fcd:
	mov -712(%RBP),%RSP
	add $-816, %RSP
	jmp uuid_00000000000c1fd0
uuid_00000000000c1fce:
#call function has-forward : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
	push %RBP
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_exists_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -704(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1fbb
	jmp uuid_00000000000c1fbd
uuid_00000000000c1fbb:
	movq $1, -40(%rbp)
uuid_00000000000c1fbd:
	mov -712(%RBP),%RSP
	add $-712, %RSP
uuid_00000000000c1fd0:
	mov -600(%RBP),%RSP
	add $-712, %RSP
	jmp uuid_00000000000c1fd3
uuid_00000000000c1fd1:
#call function has-forward : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000c1fd3:
	mov -296(%RBP),%RSP
	add $-592, %RSP
	jmp uuid_00000000000c1fd6
uuid_00000000000c1fd4:
#call function has-forward : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000c1fd6:
	mov -184(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000c1fd9
uuid_00000000000c1fd7:
uuid_00000000000c1fd9:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_reg8_CL_ArrowU64String:
	pushq $0
	pushq -8(%rbp)
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq $uuid_00000000000c1fda
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c201b
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq $uuid_00000000000c1fdb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2018
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $uuid_00000000000c1fdc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2015
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq $uuid_00000000000c1fdd
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2012
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $uuid_00000000000c1fde
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c200f
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000c1fdf
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c200c
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $uuid_00000000000c1fe0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2009
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $uuid_00000000000c1fe1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2006
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq $uuid_00000000000c1fe2
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2003
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq $uuid_00000000000c1fe3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2000
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000c1fe4
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1ffd
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq $uuid_00000000000c1fe5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1ffa
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000c1fe6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1ff7
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq $uuid_00000000000c1fe7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1ff4
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq $uuid_00000000000c1fe8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1ff1
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $uuid_00000000000c1fe9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1fee
	push %RBP
	jmp uuid_00000000000c1feb
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c1fea
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1fed
uuid_00000000000c1feb:
uuid_00000000000c1fed:
	mov -296(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000c1ff0
uuid_00000000000c1fee:
	movq $1, -24(%rbp)
uuid_00000000000c1ff0:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000c1ff3
uuid_00000000000c1ff1:
	movq $1, -24(%rbp)
uuid_00000000000c1ff3:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000c1ff6
uuid_00000000000c1ff4:
	movq $1, -24(%rbp)
uuid_00000000000c1ff6:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c1ff9
uuid_00000000000c1ff7:
	movq $1, -24(%rbp)
uuid_00000000000c1ff9:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c1ffc
uuid_00000000000c1ffa:
	movq $1, -24(%rbp)
uuid_00000000000c1ffc:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000c1fff
uuid_00000000000c1ffd:
	movq $1, -24(%rbp)
uuid_00000000000c1fff:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000c2002
uuid_00000000000c2000:
	movq $1, -24(%rbp)
uuid_00000000000c2002:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000c2005
uuid_00000000000c2003:
	movq $1, -24(%rbp)
uuid_00000000000c2005:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000c2008
uuid_00000000000c2006:
	movq $1, -24(%rbp)
uuid_00000000000c2008:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000c200b
uuid_00000000000c2009:
	movq $1, -24(%rbp)
uuid_00000000000c200b:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c200e
uuid_00000000000c200c:
	movq $1, -24(%rbp)
uuid_00000000000c200e:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000c2011
uuid_00000000000c200f:
	movq $1, -24(%rbp)
uuid_00000000000c2011:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000c2014
uuid_00000000000c2012:
	movq $1, -24(%rbp)
uuid_00000000000c2014:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000c2017
uuid_00000000000c2015:
	movq $1, -24(%rbp)
uuid_00000000000c2017:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000c201a
uuid_00000000000c2018:
	movq $1, -24(%rbp)
uuid_00000000000c201a:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000c201d
uuid_00000000000c201b:
	movq $1, -24(%rbp)
uuid_00000000000c201d:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_reg8_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2024
	jmp uuid_00000000000c2026
uuid_00000000000c2024:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2021
	jmp uuid_00000000000c2023
uuid_00000000000c2021:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c201e
	jmp uuid_00000000000c2020
uuid_00000000000c201e:
	movb $1, -104(%rbp)
uuid_00000000000c2020:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c2023:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c2026:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2037
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c202d
	jmp uuid_00000000000c202f
uuid_00000000000c202d:
	push %RBP
	jmp uuid_00000000000c202a
	jmp uuid_00000000000c202c
uuid_00000000000c202a:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c1264
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2027
	jmp uuid_00000000000c2029
uuid_00000000000c2027:
	movb $1, -216(%rbp)
uuid_00000000000c2029:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c202c:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c202f:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2034
	push %RBP
	jmp uuid_00000000000c2031
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2030
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2033
uuid_00000000000c2031:
uuid_00000000000c2033:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c2036
uuid_00000000000c2034:
	movq $1, -40(%rbp)
uuid_00000000000c2036:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c2039
uuid_00000000000c2037:
#call function is-reg8 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_reg8_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-reg8 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_reg8_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c2039:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_reg16_CL_ArrowU64String:
	pushq $0
	pushq -8(%rbp)
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq $uuid_00000000000c203a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c207b
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq $uuid_00000000000c203b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2078
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $uuid_00000000000c203c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2075
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq $uuid_00000000000c203d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2072
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $uuid_00000000000c203e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c206f
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000c203f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c206c
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $uuid_00000000000c2040
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2069
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $uuid_00000000000c2041
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2066
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq $uuid_00000000000c2042
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2063
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq $uuid_00000000000c2043
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2060
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000c2044
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c205d
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq $uuid_00000000000c2045
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c205a
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000c2046
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2057
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq $uuid_00000000000c2047
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2054
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq $uuid_00000000000c2048
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2051
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $uuid_00000000000c2049
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c204e
	push %RBP
	jmp uuid_00000000000c204b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c204a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c204d
uuid_00000000000c204b:
uuid_00000000000c204d:
	mov -296(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000c2050
uuid_00000000000c204e:
	movq $1, -24(%rbp)
uuid_00000000000c2050:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000c2053
uuid_00000000000c2051:
	movq $1, -24(%rbp)
uuid_00000000000c2053:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000c2056
uuid_00000000000c2054:
	movq $1, -24(%rbp)
uuid_00000000000c2056:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c2059
uuid_00000000000c2057:
	movq $1, -24(%rbp)
uuid_00000000000c2059:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c205c
uuid_00000000000c205a:
	movq $1, -24(%rbp)
uuid_00000000000c205c:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000c205f
uuid_00000000000c205d:
	movq $1, -24(%rbp)
uuid_00000000000c205f:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000c2062
uuid_00000000000c2060:
	movq $1, -24(%rbp)
uuid_00000000000c2062:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000c2065
uuid_00000000000c2063:
	movq $1, -24(%rbp)
uuid_00000000000c2065:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000c2068
uuid_00000000000c2066:
	movq $1, -24(%rbp)
uuid_00000000000c2068:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000c206b
uuid_00000000000c2069:
	movq $1, -24(%rbp)
uuid_00000000000c206b:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c206e
uuid_00000000000c206c:
	movq $1, -24(%rbp)
uuid_00000000000c206e:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000c2071
uuid_00000000000c206f:
	movq $1, -24(%rbp)
uuid_00000000000c2071:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000c2074
uuid_00000000000c2072:
	movq $1, -24(%rbp)
uuid_00000000000c2074:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000c2077
uuid_00000000000c2075:
	movq $1, -24(%rbp)
uuid_00000000000c2077:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000c207a
uuid_00000000000c2078:
	movq $1, -24(%rbp)
uuid_00000000000c207a:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000c207d
uuid_00000000000c207b:
	movq $1, -24(%rbp)
uuid_00000000000c207d:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_reg16_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2084
	jmp uuid_00000000000c2086
uuid_00000000000c2084:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2081
	jmp uuid_00000000000c2083
uuid_00000000000c2081:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c207e
	jmp uuid_00000000000c2080
uuid_00000000000c207e:
	movb $1, -104(%rbp)
uuid_00000000000c2080:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c2083:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c2086:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2097
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c208d
	jmp uuid_00000000000c208f
uuid_00000000000c208d:
	push %RBP
	jmp uuid_00000000000c208a
	jmp uuid_00000000000c208c
uuid_00000000000c208a:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c1268
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2087
	jmp uuid_00000000000c2089
uuid_00000000000c2087:
	movb $1, -216(%rbp)
uuid_00000000000c2089:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c208c:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c208f:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2094
	push %RBP
	jmp uuid_00000000000c2091
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2090
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2093
uuid_00000000000c2091:
uuid_00000000000c2093:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c2096
uuid_00000000000c2094:
	movq $1, -40(%rbp)
uuid_00000000000c2096:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c2099
uuid_00000000000c2097:
#call function is-reg16 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_reg16_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-reg16 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_reg16_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c2099:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_reg32_CL_ArrowU64String:
	pushq $0
	pushq -8(%rbp)
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq $uuid_00000000000c209a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c20db
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq $uuid_00000000000c209b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c20d8
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $uuid_00000000000c209c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c20d5
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq $uuid_00000000000c209d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c20d2
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $uuid_00000000000c209e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c20cf
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000c209f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c20cc
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $uuid_00000000000c20a0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c20c9
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $uuid_00000000000c20a1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c20c6
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq $uuid_00000000000c20a2
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c20c3
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq $uuid_00000000000c20a3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c20c0
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000c20a4
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c20bd
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq $uuid_00000000000c20a5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c20ba
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000c20a6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c20b7
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq $uuid_00000000000c20a7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c20b4
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq $uuid_00000000000c20a8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c20b1
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $uuid_00000000000c20a9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c20ae
	push %RBP
	jmp uuid_00000000000c20ab
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c20aa
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c20ad
uuid_00000000000c20ab:
uuid_00000000000c20ad:
	mov -296(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000c20b0
uuid_00000000000c20ae:
	movq $1, -24(%rbp)
uuid_00000000000c20b0:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000c20b3
uuid_00000000000c20b1:
	movq $1, -24(%rbp)
uuid_00000000000c20b3:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000c20b6
uuid_00000000000c20b4:
	movq $1, -24(%rbp)
uuid_00000000000c20b6:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c20b9
uuid_00000000000c20b7:
	movq $1, -24(%rbp)
uuid_00000000000c20b9:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c20bc
uuid_00000000000c20ba:
	movq $1, -24(%rbp)
uuid_00000000000c20bc:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000c20bf
uuid_00000000000c20bd:
	movq $1, -24(%rbp)
uuid_00000000000c20bf:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000c20c2
uuid_00000000000c20c0:
	movq $1, -24(%rbp)
uuid_00000000000c20c2:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000c20c5
uuid_00000000000c20c3:
	movq $1, -24(%rbp)
uuid_00000000000c20c5:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000c20c8
uuid_00000000000c20c6:
	movq $1, -24(%rbp)
uuid_00000000000c20c8:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000c20cb
uuid_00000000000c20c9:
	movq $1, -24(%rbp)
uuid_00000000000c20cb:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c20ce
uuid_00000000000c20cc:
	movq $1, -24(%rbp)
uuid_00000000000c20ce:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000c20d1
uuid_00000000000c20cf:
	movq $1, -24(%rbp)
uuid_00000000000c20d1:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000c20d4
uuid_00000000000c20d2:
	movq $1, -24(%rbp)
uuid_00000000000c20d4:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000c20d7
uuid_00000000000c20d5:
	movq $1, -24(%rbp)
uuid_00000000000c20d7:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000c20da
uuid_00000000000c20d8:
	movq $1, -24(%rbp)
uuid_00000000000c20da:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000c20dd
uuid_00000000000c20db:
	movq $1, -24(%rbp)
uuid_00000000000c20dd:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_reg32_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c20e4
	jmp uuid_00000000000c20e6
uuid_00000000000c20e4:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c20e1
	jmp uuid_00000000000c20e3
uuid_00000000000c20e1:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c20de
	jmp uuid_00000000000c20e0
uuid_00000000000c20de:
	movb $1, -104(%rbp)
uuid_00000000000c20e0:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c20e3:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c20e6:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c20f7
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c20ed
	jmp uuid_00000000000c20ef
uuid_00000000000c20ed:
	push %RBP
	jmp uuid_00000000000c20ea
	jmp uuid_00000000000c20ec
uuid_00000000000c20ea:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c126c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c20e7
	jmp uuid_00000000000c20e9
uuid_00000000000c20e7:
	movb $1, -216(%rbp)
uuid_00000000000c20e9:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c20ec:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c20ef:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c20f4
	push %RBP
	jmp uuid_00000000000c20f1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c20f0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c20f3
uuid_00000000000c20f1:
uuid_00000000000c20f3:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c20f6
uuid_00000000000c20f4:
	movq $1, -40(%rbp)
uuid_00000000000c20f6:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c20f9
uuid_00000000000c20f7:
#call function is-reg32 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_reg32_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-reg32 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_reg32_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c20f9:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_reg64_CL_ArrowU64String:
	pushq $0
	pushq -8(%rbp)
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq $uuid_00000000000c20fa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c213b
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq $uuid_00000000000c20fb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2138
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $uuid_00000000000c20fc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2135
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq $uuid_00000000000c20fd
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2132
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $uuid_00000000000c20fe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c212f
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000c20ff
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c212c
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $uuid_00000000000c2100
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2129
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $uuid_00000000000c2101
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2126
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq $uuid_00000000000c2102
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2123
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq $uuid_00000000000c2103
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2120
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000c2104
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c211d
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq $uuid_00000000000c2105
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c211a
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000c2106
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2117
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq $uuid_00000000000c2107
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2114
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq $uuid_00000000000c2108
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2111
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $uuid_00000000000c2109
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c210e
	push %RBP
	jmp uuid_00000000000c210b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c210a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c210d
uuid_00000000000c210b:
uuid_00000000000c210d:
	mov -296(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000c2110
uuid_00000000000c210e:
	movq $1, -24(%rbp)
uuid_00000000000c2110:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000c2113
uuid_00000000000c2111:
	movq $1, -24(%rbp)
uuid_00000000000c2113:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000c2116
uuid_00000000000c2114:
	movq $1, -24(%rbp)
uuid_00000000000c2116:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c2119
uuid_00000000000c2117:
	movq $1, -24(%rbp)
uuid_00000000000c2119:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c211c
uuid_00000000000c211a:
	movq $1, -24(%rbp)
uuid_00000000000c211c:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000c211f
uuid_00000000000c211d:
	movq $1, -24(%rbp)
uuid_00000000000c211f:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000c2122
uuid_00000000000c2120:
	movq $1, -24(%rbp)
uuid_00000000000c2122:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000c2125
uuid_00000000000c2123:
	movq $1, -24(%rbp)
uuid_00000000000c2125:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000c2128
uuid_00000000000c2126:
	movq $1, -24(%rbp)
uuid_00000000000c2128:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000c212b
uuid_00000000000c2129:
	movq $1, -24(%rbp)
uuid_00000000000c212b:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c212e
uuid_00000000000c212c:
	movq $1, -24(%rbp)
uuid_00000000000c212e:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000c2131
uuid_00000000000c212f:
	movq $1, -24(%rbp)
uuid_00000000000c2131:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000c2134
uuid_00000000000c2132:
	movq $1, -24(%rbp)
uuid_00000000000c2134:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000c2137
uuid_00000000000c2135:
	movq $1, -24(%rbp)
uuid_00000000000c2137:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000c213a
uuid_00000000000c2138:
	movq $1, -24(%rbp)
uuid_00000000000c213a:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000c213d
uuid_00000000000c213b:
	movq $1, -24(%rbp)
uuid_00000000000c213d:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_reg64_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2144
	jmp uuid_00000000000c2146
uuid_00000000000c2144:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2141
	jmp uuid_00000000000c2143
uuid_00000000000c2141:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c213e
	jmp uuid_00000000000c2140
uuid_00000000000c213e:
	movb $1, -104(%rbp)
uuid_00000000000c2140:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c2143:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c2146:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2157
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c214d
	jmp uuid_00000000000c214f
uuid_00000000000c214d:
	push %RBP
	jmp uuid_00000000000c214a
	jmp uuid_00000000000c214c
uuid_00000000000c214a:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c1270
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2147
	jmp uuid_00000000000c2149
uuid_00000000000c2147:
	movb $1, -216(%rbp)
uuid_00000000000c2149:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c214c:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c214f:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2154
	push %RBP
	jmp uuid_00000000000c2151
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2150
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2153
uuid_00000000000c2151:
uuid_00000000000c2153:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c2156
uuid_00000000000c2154:
	movq $1, -40(%rbp)
uuid_00000000000c2156:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c2159
uuid_00000000000c2157:
#call function is-reg64 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_reg64_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-reg64 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_reg64_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c2159:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_tag_CL_ArrowTypeType:
#call function with-only-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c216d
	jmp uuid_00000000000c216f
uuid_00000000000c216d:
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2160
	jmp uuid_00000000000c2162
uuid_00000000000c2160:
	push %RBP
	jmp uuid_00000000000c215d
	jmp uuid_00000000000c215f
uuid_00000000000c215d:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c215a
	jmp uuid_00000000000c215c
uuid_00000000000c215a:
	movb $1, -128(%rbp)
uuid_00000000000c215c:
	mov -152(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000c215f:
	mov -144(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000c2162:
	mov -136(%RBP),%RSP
	add $-160, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c216a
	push %RBP
	jmp uuid_00000000000c2167
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2166
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2169
uuid_00000000000c2167:
uuid_00000000000c2169:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000c216c
uuid_00000000000c216a:
#call function get-only-child : Arrow<String,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	mov %RBX, %RBP
	call get_SB_only_SB_child_CL_ArrowStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -168(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c2163
	jmp uuid_00000000000c2165
uuid_00000000000c2163:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1572
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2165:
	mov -176(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c216c:
	mov -96(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c216f:
	mov -64(%RBP),%RSP
	add $-176, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_size_CL_ArrowTypeType:
	push %RBP
#call function is-sized : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call is_SB_sized_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2170
	jmp uuid_00000000000c2172
uuid_00000000000c2170:
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function with-size-recurse : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_size_SB_recurse_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1393
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2172:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -104(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c218b
	jmp uuid_00000000000c218d
uuid_00000000000c218b:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2182
	jmp uuid_00000000000c2184
uuid_00000000000c2182:
	push %RBP
	mov -160(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2179
	jmp uuid_00000000000c217b
uuid_00000000000c2179:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2176
	jmp uuid_00000000000c2178
uuid_00000000000c2176:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	jmp uuid_00000000000c2173
	jmp uuid_00000000000c2175
uuid_00000000000c2173:
	movb $1, -240(%rbp)
uuid_00000000000c2175:
	mov -304(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000c2178:
	mov -256(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000c217b:
	mov -248(%RBP),%RSP
	add $-328, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c217f
	jmp uuid_00000000000c2181
uuid_00000000000c217f:
	push %RBP
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	jmp uuid_00000000000c217c
	jmp uuid_00000000000c217e
uuid_00000000000c217c:
	movb $1, -176(%rbp)
uuid_00000000000c217e:
	mov -336(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000c2181:
	mov -192(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000c2184:
	mov -184(%RBP),%RSP
	add $-360, %RSP
	mov -176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2188
	jmp uuid_00000000000c218a
uuid_00000000000c2188:
	push %RBP
	mov -88(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -376(%rbp)
	pushq $uuid_00000000000c1157
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2185
	jmp uuid_00000000000c2187
uuid_00000000000c2185:
	movb $1, -112(%rbp)
uuid_00000000000c2187:
	mov -368(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c218a:
	mov -128(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c218d:
	mov -120(%RBP),%RSP
	add $-376, %RSP
	mov -112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2192
	push %RBP
	jmp uuid_00000000000c218f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c218e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2191
uuid_00000000000c218f:
uuid_00000000000c2191:
	mov -384(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000c2194
uuid_00000000000c2192:
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1157
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2194:
	mov -80(%RBP),%RSP
	add $-376, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_size_CL_ArrowListTypeListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c21a4
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c219d
	jmp uuid_00000000000c219f
uuid_00000000000c219d:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c219a
	jmp uuid_00000000000c219c
uuid_00000000000c219a:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	jmp uuid_00000000000c2197
	jmp uuid_00000000000c2199
uuid_00000000000c2197:
	movb $1, -192(%rbp)
uuid_00000000000c2199:
	mov -256(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c219c:
	mov -208(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c219f:
	mov -200(%RBP),%RSP
	add $-280, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c21a1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c21a0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c21a3
uuid_00000000000c21a1:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function with-size : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c21a3:
	mov -144(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c21a6
uuid_00000000000c21a4:
uuid_00000000000c21a6:
	mov -96(%RBP),%RSP
	add $-136, %RSP
	subq $40, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
with_SB_size_SB_recurse_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c21ad
	jmp uuid_00000000000c21af
uuid_00000000000c21ad:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c21aa
	jmp uuid_00000000000c21ac
uuid_00000000000c21aa:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c21a7
	jmp uuid_00000000000c21a9
uuid_00000000000c21a7:
	movb $1, -96(%rbp)
uuid_00000000000c21a9:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c21ac:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c21af:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c21fc
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c21b6
	jmp uuid_00000000000c21b8
uuid_00000000000c21b6:
	push %RBP
	jmp uuid_00000000000c21b3
	jmp uuid_00000000000c21b5
uuid_00000000000c21b3:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000c1572
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c21b0
	jmp uuid_00000000000c21b2
uuid_00000000000c21b0:
	movb $1, -208(%rbp)
uuid_00000000000c21b2:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c21b5:
	mov -224(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c21b8:
	mov -216(%RBP),%RSP
	add $-240, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c21f9
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c21bf
	jmp uuid_00000000000c21c1
uuid_00000000000c21bf:
	push %RBP
	jmp uuid_00000000000c21bc
	jmp uuid_00000000000c21be
uuid_00000000000c21bc:
	push %RBP
	mov -256(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq $uuid_00000000000c1393
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c21b9
	jmp uuid_00000000000c21bb
uuid_00000000000c21b9:
	movb $1, -280(%rbp)
uuid_00000000000c21bb:
	mov -304(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c21be:
	mov -296(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c21c1:
	mov -288(%RBP),%RSP
	add $-312, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c21f6
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c21c8
	jmp uuid_00000000000c21ca
uuid_00000000000c21c8:
	push %RBP
	jmp uuid_00000000000c21c5
	jmp uuid_00000000000c21c7
uuid_00000000000c21c5:
	push %RBP
	mov -328(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000c1392
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c21c2
	jmp uuid_00000000000c21c4
uuid_00000000000c21c2:
	movb $1, -352(%rbp)
uuid_00000000000c21c4:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c21c7:
	mov -368(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c21ca:
	mov -360(%RBP),%RSP
	add $-384, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c21f3
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c21d1
	jmp uuid_00000000000c21d3
uuid_00000000000c21d1:
	push %RBP
	jmp uuid_00000000000c21ce
	jmp uuid_00000000000c21d0
uuid_00000000000c21ce:
	push %RBP
	mov -400(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq $uuid_00000000000c159d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c21cb
	jmp uuid_00000000000c21cd
uuid_00000000000c21cb:
	movb $1, -424(%rbp)
uuid_00000000000c21cd:
	mov -448(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000c21d0:
	mov -440(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000c21d3:
	mov -432(%RBP),%RSP
	add $-456, %RSP
	mov -424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c21f0
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c21da
	jmp uuid_00000000000c21dc
uuid_00000000000c21da:
	push %RBP
	jmp uuid_00000000000c21d7
	jmp uuid_00000000000c21d9
uuid_00000000000c21d7:
	push %RBP
	mov -472(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq $uuid_00000000000c1394
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c21d4
	jmp uuid_00000000000c21d6
uuid_00000000000c21d4:
	movb $1, -496(%rbp)
uuid_00000000000c21d6:
	mov -520(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000c21d9:
	mov -512(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000c21dc:
	mov -504(%RBP),%RSP
	add $-528, %RSP
	mov -496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c21ed
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c21e3
	jmp uuid_00000000000c21e5
uuid_00000000000c21e3:
	push %RBP
	mov -552(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c21e0
	jmp uuid_00000000000c21e2
uuid_00000000000c21e0:
	push %RBP
	mov -544(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c21dd
	jmp uuid_00000000000c21df
uuid_00000000000c21dd:
	movb $1, -568(%rbp)
uuid_00000000000c21df:
	mov -632(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000c21e2:
	mov -584(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000c21e5:
	mov -576(%RBP),%RSP
	add $-640, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c21ea
	push %RBP
	jmp uuid_00000000000c21e7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c21e6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c21e9
uuid_00000000000c21e7:
uuid_00000000000c21e9:
	mov -648(%RBP),%RSP
	add $-648, %RSP
	jmp uuid_00000000000c21ec
uuid_00000000000c21ea:
	pushq -640(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-size : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c21ec:
	mov -536(%RBP),%RSP
	add $-640, %RSP
	jmp uuid_00000000000c21ef
uuid_00000000000c21ed:
uuid_00000000000c21ef:
	mov -464(%RBP),%RSP
	add $-528, %RSP
	jmp uuid_00000000000c21f2
uuid_00000000000c21f0:
uuid_00000000000c21f2:
	mov -392(%RBP),%RSP
	add $-456, %RSP
	jmp uuid_00000000000c21f5
uuid_00000000000c21f3:
uuid_00000000000c21f5:
	mov -320(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000c21f8
uuid_00000000000c21f6:
uuid_00000000000c21f8:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000c21fb
uuid_00000000000c21f9:
uuid_00000000000c21fb:
	mov -176(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c21fe
uuid_00000000000c21fc:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-size-recurse : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call with_SB_size_SB_recurse_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function with-size-recurse : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call with_SB_size_SB_recurse_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c21fe:
	mov -64(%RBP),%RSP
	add $-168, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_fields_CL_ArrowTypeType:
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $uuid_00000000000c159d
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2205
	jmp uuid_00000000000c2207
uuid_00000000000c2205:
	push %RBP
	jmp uuid_00000000000c2202
	jmp uuid_00000000000c2204
uuid_00000000000c2202:
	push %RBP
	mov -72(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000c159d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c21ff
	jmp uuid_00000000000c2201
uuid_00000000000c21ff:
	movb $1, -96(%rbp)
uuid_00000000000c2201:
	mov -120(%RBP),%RSP
	add $-128, %RSP
uuid_00000000000c2204:
	mov -112(%RBP),%RSP
	add $-128, %RSP
uuid_00000000000c2207:
	mov -104(%RBP),%RSP
	add $-128, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c220f
	push %RBP
	jmp uuid_00000000000c220c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c220b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c220e
uuid_00000000000c220c:
#call function with-only-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function with-only-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2208
	jmp uuid_00000000000c220a
uuid_00000000000c2208:
#call function fields-of-tag : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call fields_SB_of_SB_tag_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c220a:
	mov -192(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000c220e:
	mov -136(%RBP),%RSP
	add $-216, %RSP
	jmp uuid_00000000000c2211
uuid_00000000000c220f:
uuid_00000000000c2211:
	mov -64(%RBP),%RSP
	add $-128, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_tag_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2218
	jmp uuid_00000000000c221a
uuid_00000000000c2218:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2215
	jmp uuid_00000000000c2217
uuid_00000000000c2215:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2212
	jmp uuid_00000000000c2214
uuid_00000000000c2212:
	movb $1, -96(%rbp)
uuid_00000000000c2214:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c2217:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c221a:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2274
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2246
	jmp uuid_00000000000c2248
uuid_00000000000c2246:
	push %RBP
	jmp uuid_00000000000c2243
	jmp uuid_00000000000c2245
uuid_00000000000c2243:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000c1391
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2240
	jmp uuid_00000000000c2242
uuid_00000000000c2240:
	movb $1, -208(%rbp)
uuid_00000000000c2242:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c2245:
	mov -224(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c2248:
	mov -216(%RBP),%RSP
	add $-240, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2271
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c224f
	jmp uuid_00000000000c2251
uuid_00000000000c224f:
	push %RBP
	jmp uuid_00000000000c224c
	jmp uuid_00000000000c224e
uuid_00000000000c224c:
	push %RBP
	mov -256(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq $uuid_00000000000c1572
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2249
	jmp uuid_00000000000c224b
uuid_00000000000c2249:
	movb $1, -280(%rbp)
uuid_00000000000c224b:
	mov -304(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c224e:
	mov -296(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c2251:
	mov -288(%RBP),%RSP
	add $-312, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c226e
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2258
	jmp uuid_00000000000c225a
uuid_00000000000c2258:
	push %RBP
	jmp uuid_00000000000c2255
	jmp uuid_00000000000c2257
uuid_00000000000c2255:
	push %RBP
	mov -328(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000c159d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2252
	jmp uuid_00000000000c2254
uuid_00000000000c2252:
	movb $1, -352(%rbp)
uuid_00000000000c2254:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c2257:
	mov -368(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c225a:
	mov -360(%RBP),%RSP
	add $-384, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c226b
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2261
	jmp uuid_00000000000c2263
uuid_00000000000c2261:
	push %RBP
	jmp uuid_00000000000c225e
	jmp uuid_00000000000c2260
uuid_00000000000c225e:
	push %RBP
	mov -400(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq $uuid_00000000000c1394
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c225b
	jmp uuid_00000000000c225d
uuid_00000000000c225b:
	movb $1, -424(%rbp)
uuid_00000000000c225d:
	mov -448(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000c2260:
	mov -440(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000c2263:
	mov -432(%RBP),%RSP
	add $-456, %RSP
	mov -424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2268
	push %RBP
	jmp uuid_00000000000c2265
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2264
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2267
uuid_00000000000c2265:
uuid_00000000000c2267:
	mov -464(%RBP),%RSP
	add $-464, %RSP
	jmp uuid_00000000000c226a
uuid_00000000000c2268:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c226a:
	mov -392(%RBP),%RSP
	add $-456, %RSP
	jmp uuid_00000000000c226d
uuid_00000000000c226b:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c226d:
	mov -320(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000c2270
uuid_00000000000c226e:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2270:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000c2273
uuid_00000000000c2271:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2273:
	mov -176(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c2276
uuid_00000000000c2274:
#call function without-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq $0
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2221
	jmp uuid_00000000000c2223
uuid_00000000000c2221:
	push %RBP
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	jmp uuid_00000000000c221e
	jmp uuid_00000000000c2220
uuid_00000000000c221e:
	push %RBP
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq -304(%RBP)
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c221b
	jmp uuid_00000000000c221d
uuid_00000000000c221b:
	movb $1, -344(%rbp)
uuid_00000000000c221d:
	mov -392(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c2220:
	mov -360(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c2223:
	mov -352(%RBP),%RSP
	add $-416, %RSP
	mov -344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c223d
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -480(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c222a
	jmp uuid_00000000000c222c
uuid_00000000000c222a:
	push %RBP
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2227
	jmp uuid_00000000000c2229
uuid_00000000000c2227:
	push %RBP
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	jmp uuid_00000000000c2224
	jmp uuid_00000000000c2226
uuid_00000000000c2224:
	movb $1, -488(%rbp)
uuid_00000000000c2226:
	mov -536(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c2229:
	mov -504(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c222c:
	mov -496(%RBP),%RSP
	add $-560, %RSP
	mov -488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c223a
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2233
	jmp uuid_00000000000c2235
uuid_00000000000c2233:
	push %RBP
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	jmp uuid_00000000000c2230
	jmp uuid_00000000000c2232
uuid_00000000000c2230:
	push %RBP
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	jmp uuid_00000000000c222d
	jmp uuid_00000000000c222f
uuid_00000000000c222d:
	movb $1, -632(%rbp)
uuid_00000000000c222f:
	mov -680(%RBP),%RSP
	add $-704, %RSP
uuid_00000000000c2232:
	mov -648(%RBP),%RSP
	add $-704, %RSP
uuid_00000000000c2235:
	mov -640(%RBP),%RSP
	add $-704, %RSP
	mov -632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2237
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2236
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2239
uuid_00000000000c2237:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2239:
	mov -568(%RBP),%RSP
	add $-704, %RSP
	jmp uuid_00000000000c223c
uuid_00000000000c223a:
	movq -560(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -552(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -544(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c223c:
	mov -424(%RBP),%RSP
	add $-560, %RSP
	jmp uuid_00000000000c223f
uuid_00000000000c223d:
	movq -384(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c223f:
	mov -280(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c2276:
	mov -64(%RBP),%RSP
	add $-416, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_tag_CL_ArrowListTypeListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c227f
	jmp uuid_00000000000c2281
uuid_00000000000c227f:
	push %RBP
	mov -128(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c227c
	jmp uuid_00000000000c227e
uuid_00000000000c227c:
	push %RBP
	pushq -104(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	jmp uuid_00000000000c2279
	jmp uuid_00000000000c227b
uuid_00000000000c2279:
	movb $1, -144(%rbp)
uuid_00000000000c227b:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c227e:
	mov -160(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c2281:
	mov -152(%RBP),%RSP
	add $-232, %RSP
	mov -144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2286
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2283
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2282
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2285
uuid_00000000000c2283:
uuid_00000000000c2285:
	mov -240(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c2288
uuid_00000000000c2286:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call without_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-tag : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call without_SB_tag_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2288:
	mov -96(%RBP),%RSP
	add $-232, %RSP
	subq $40, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
without_SB_constructor_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c228f
	jmp uuid_00000000000c2291
uuid_00000000000c228f:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c228c
	jmp uuid_00000000000c228e
uuid_00000000000c228c:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2289
	jmp uuid_00000000000c228b
uuid_00000000000c2289:
	movb $1, -96(%rbp)
uuid_00000000000c228b:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c228e:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c2291:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c22b4
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c229e
	jmp uuid_00000000000c22a0
uuid_00000000000c229e:
	push %RBP
	jmp uuid_00000000000c229b
	jmp uuid_00000000000c229d
uuid_00000000000c229b:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000c1391
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2298
	jmp uuid_00000000000c229a
uuid_00000000000c2298:
	movb $1, -208(%rbp)
uuid_00000000000c229a:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c229d:
	mov -224(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c22a0:
	mov -216(%RBP),%RSP
	add $-240, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c22b1
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c22a7
	jmp uuid_00000000000c22a9
uuid_00000000000c22a7:
	push %RBP
	jmp uuid_00000000000c22a4
	jmp uuid_00000000000c22a6
uuid_00000000000c22a4:
	push %RBP
	mov -256(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq $uuid_00000000000c1392
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c22a1
	jmp uuid_00000000000c22a3
uuid_00000000000c22a1:
	movb $1, -280(%rbp)
uuid_00000000000c22a3:
	mov -304(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c22a6:
	mov -296(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c22a9:
	mov -288(%RBP),%RSP
	add $-312, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c22ae
	push %RBP
	jmp uuid_00000000000c22ab
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c22aa
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c22ad
uuid_00000000000c22ab:
uuid_00000000000c22ad:
	mov -320(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000c22b0
uuid_00000000000c22ae:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c22b0:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000c22b3
uuid_00000000000c22b1:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c22b3:
	mov -176(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c22b6
uuid_00000000000c22b4:
#call function without-constructor : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_constructor_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
#call function without-constructor : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_constructor_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2295
	movq -136(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -128(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -120(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c2297
uuid_00000000000c2295:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2292
	movq -168(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -160(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -152(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c2294
uuid_00000000000c2292:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2294:
	mov -184(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000c2297:
	mov -176(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000c22b6:
	mov -64(%RBP),%RSP
	add $-184, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_representation_CL_ArrowListTypeListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c22bf
	jmp uuid_00000000000c22c1
uuid_00000000000c22bf:
	push %RBP
	mov -128(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c22bc
	jmp uuid_00000000000c22be
uuid_00000000000c22bc:
	push %RBP
	pushq -104(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	jmp uuid_00000000000c22b9
	jmp uuid_00000000000c22bb
uuid_00000000000c22b9:
	movb $1, -144(%rbp)
uuid_00000000000c22bb:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c22be:
	mov -160(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c22c1:
	mov -152(%RBP),%RSP
	add $-232, %RSP
	mov -144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c22c6
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c22c3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c22c2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c22c5
uuid_00000000000c22c3:
uuid_00000000000c22c5:
	mov -240(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c22c8
uuid_00000000000c22c6:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-representation : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c22c8:
	mov -96(%RBP),%RSP
	add $-232, %RSP
	subq $40, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
without_SB_representation_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c22cf
	jmp uuid_00000000000c22d1
uuid_00000000000c22cf:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c22cc
	jmp uuid_00000000000c22ce
uuid_00000000000c22cc:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c22c9
	jmp uuid_00000000000c22cb
uuid_00000000000c22c9:
	movb $1, -96(%rbp)
uuid_00000000000c22cb:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c22ce:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c22d1:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2361
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c22e1
	jmp uuid_00000000000c22e3
uuid_00000000000c22e1:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c22de
	jmp uuid_00000000000c22e0
uuid_00000000000c22de:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq $uuid_00000000000c1774
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c22db
	jmp uuid_00000000000c22dd
uuid_00000000000c22db:
	movb $1, -208(%rbp)
uuid_00000000000c22dd:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c22e0:
	mov -224(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c22e3:
	mov -216(%RBP),%RSP
	add $-280, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c235e
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c22eb
	jmp uuid_00000000000c22ed
uuid_00000000000c22eb:
	push %RBP
	mov -304(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c22e8
	jmp uuid_00000000000c22ea
uuid_00000000000c22e8:
	push %RBP
	mov -296(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -392(%rbp)
	pushq $uuid_00000000000c22e4
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c22e5
	jmp uuid_00000000000c22e7
uuid_00000000000c22e5:
	movb $1, -320(%rbp)
uuid_00000000000c22e7:
	mov -384(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000c22ea:
	mov -336(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000c22ed:
	mov -328(%RBP),%RSP
	add $-392, %RSP
	mov -320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c235b
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -424(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c22f4
	jmp uuid_00000000000c22f6
uuid_00000000000c22f4:
	push %RBP
	mov -416(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c22f1
	jmp uuid_00000000000c22f3
uuid_00000000000c22f1:
	push %RBP
	mov -408(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -504(%rbp)
	pushq $uuid_00000000000c1309
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c22ee
	jmp uuid_00000000000c22f0
uuid_00000000000c22ee:
	movb $1, -432(%rbp)
uuid_00000000000c22f0:
	mov -496(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c22f3:
	mov -448(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c22f6:
	mov -440(%RBP),%RSP
	add $-504, %RSP
	mov -432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2358
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c22fd
	jmp uuid_00000000000c22ff
uuid_00000000000c22fd:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c22fa
	jmp uuid_00000000000c22fc
uuid_00000000000c22fa:
	push %RBP
	mov -520(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -616(%rbp)
	pushq $uuid_00000000000c17da
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c22f7
	jmp uuid_00000000000c22f9
uuid_00000000000c22f7:
	movb $1, -544(%rbp)
uuid_00000000000c22f9:
	mov -608(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c22fc:
	mov -560(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c22ff:
	mov -552(%RBP),%RSP
	add $-616, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2355
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -648(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2306
	jmp uuid_00000000000c2308
uuid_00000000000c2306:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -712(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2303
	jmp uuid_00000000000c2305
uuid_00000000000c2303:
	push %RBP
	mov -632(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq $uuid_00000000000c1155
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2300
	jmp uuid_00000000000c2302
uuid_00000000000c2300:
	movb $1, -656(%rbp)
uuid_00000000000c2302:
	mov -720(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c2305:
	mov -672(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c2308:
	mov -664(%RBP),%RSP
	add $-728, %RSP
	mov -656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2352
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c230f
	jmp uuid_00000000000c2311
uuid_00000000000c230f:
	push %RBP
	mov -752(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -824(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c230c
	jmp uuid_00000000000c230e
uuid_00000000000c230c:
	push %RBP
	mov -744(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -840(%rbp)
	pushq $uuid_00000000000c1264
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2309
	jmp uuid_00000000000c230b
uuid_00000000000c2309:
	movb $1, -768(%rbp)
uuid_00000000000c230b:
	mov -832(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000c230e:
	mov -784(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000c2311:
	mov -776(%RBP),%RSP
	add $-840, %RSP
	mov -768(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c234f
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -872(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2318
	jmp uuid_00000000000c231a
uuid_00000000000c2318:
	push %RBP
	mov -864(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -936(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2315
	jmp uuid_00000000000c2317
uuid_00000000000c2315:
	push %RBP
	mov -856(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -952(%rbp)
	pushq $uuid_00000000000c1268
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2312
	jmp uuid_00000000000c2314
uuid_00000000000c2312:
	movb $1, -880(%rbp)
uuid_00000000000c2314:
	mov -944(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c2317:
	mov -896(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c231a:
	mov -888(%RBP),%RSP
	add $-952, %RSP
	mov -880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c234c
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -984(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2321
	jmp uuid_00000000000c2323
uuid_00000000000c2321:
	push %RBP
	mov -976(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1048(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c231e
	jmp uuid_00000000000c2320
uuid_00000000000c231e:
	push %RBP
	mov -968(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	pushq $uuid_00000000000c126c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c231b
	jmp uuid_00000000000c231d
uuid_00000000000c231b:
	movb $1, -992(%rbp)
uuid_00000000000c231d:
	mov -1056(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000c2320:
	mov -1008(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000c2323:
	mov -1000(%RBP),%RSP
	add $-1064, %RSP
	mov -992(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2349
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -1096(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c232a
	jmp uuid_00000000000c232c
uuid_00000000000c232a:
	push %RBP
	mov -1088(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1160(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2327
	jmp uuid_00000000000c2329
uuid_00000000000c2327:
	push %RBP
	mov -1080(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1176(%rbp)
	pushq $uuid_00000000000c1270
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2324
	jmp uuid_00000000000c2326
uuid_00000000000c2324:
	movb $1, -1104(%rbp)
uuid_00000000000c2326:
	mov -1168(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000c2329:
	mov -1120(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000c232c:
	mov -1112(%RBP),%RSP
	add $-1176, %RSP
	mov -1104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2346
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -1208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2333
	jmp uuid_00000000000c2335
uuid_00000000000c2333:
	push %RBP
	mov -1200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2330
	jmp uuid_00000000000c2332
uuid_00000000000c2330:
	push %RBP
	mov -1192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c232d
	jmp uuid_00000000000c232f
uuid_00000000000c232d:
	movb $1, -1216(%rbp)
uuid_00000000000c232f:
	mov -1280(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000c2332:
	mov -1232(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000c2335:
	mov -1224(%RBP),%RSP
	add $-1288, %RSP
	mov -1216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2343
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -1320(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2340
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -1352(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2339
	jmp uuid_00000000000c233b
uuid_00000000000c2339:
	push %RBP
	jmp uuid_00000000000c2336
	jmp uuid_00000000000c2338
uuid_00000000000c2336:
	movb $1, -1360(%rbp)
uuid_00000000000c2338:
	mov -1376(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000c233b:
	mov -1368(%RBP),%RSP
	add $-1376, %RSP
	mov -1360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c233d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c233c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c233f
uuid_00000000000c233d:
uuid_00000000000c233f:
	mov -1328(%RBP),%RSP
	add $-1376, %RSP
	jmp uuid_00000000000c2342
uuid_00000000000c2340:
uuid_00000000000c2342:
	mov -1296(%RBP),%RSP
	add $-1320, %RSP
	jmp uuid_00000000000c2345
uuid_00000000000c2343:
	pushq -1288(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2345:
	mov -1184(%RBP),%RSP
	add $-1288, %RSP
	jmp uuid_00000000000c2348
uuid_00000000000c2346:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2348:
	mov -1072(%RBP),%RSP
	add $-1176, %RSP
	jmp uuid_00000000000c234b
uuid_00000000000c2349:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c234b:
	mov -960(%RBP),%RSP
	add $-1064, %RSP
	jmp uuid_00000000000c234e
uuid_00000000000c234c:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c234e:
	mov -848(%RBP),%RSP
	add $-952, %RSP
	jmp uuid_00000000000c2351
uuid_00000000000c234f:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2351:
	mov -736(%RBP),%RSP
	add $-840, %RSP
	jmp uuid_00000000000c2354
uuid_00000000000c2352:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2354:
	mov -624(%RBP),%RSP
	add $-728, %RSP
	jmp uuid_00000000000c2357
uuid_00000000000c2355:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2357:
	mov -512(%RBP),%RSP
	add $-616, %RSP
	jmp uuid_00000000000c235a
uuid_00000000000c2358:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c235a:
	mov -400(%RBP),%RSP
	add $-504, %RSP
	jmp uuid_00000000000c235d
uuid_00000000000c235b:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c235d:
	mov -288(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000c2360
uuid_00000000000c235e:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2360:
	mov -176(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c2363
uuid_00000000000c2361:
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c22d8
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c22d5
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c22d7
uuid_00000000000c22d5:
	movq -216(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c22d7:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000c22da
uuid_00000000000c22d8:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c22d2
	movq -192(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c22d4
uuid_00000000000c22d2:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c22d4:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c22da:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c2363:
	mov -64(%RBP),%RSP
	add $-232, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_size_SB_unless_SB_class_CL_ArrowListTypeListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c236c
	jmp uuid_00000000000c236e
uuid_00000000000c236c:
	push %RBP
	mov -128(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2369
	jmp uuid_00000000000c236b
uuid_00000000000c2369:
	push %RBP
	pushq -104(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	jmp uuid_00000000000c2366
	jmp uuid_00000000000c2368
uuid_00000000000c2366:
	movb $1, -144(%rbp)
uuid_00000000000c2368:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c236b:
	mov -160(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c236e:
	mov -152(%RBP),%RSP
	add $-232, %RSP
	mov -144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2373
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2370
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c236f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2372
uuid_00000000000c2370:
uuid_00000000000c2372:
	mov -240(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c2375
uuid_00000000000c2373:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-size-unless-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-size-unless-class : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2375:
	mov -96(%RBP),%RSP
	add $-232, %RSP
	subq $40, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
without_SB_size_SB_unless_SB_class_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c237c
	jmp uuid_00000000000c237e
uuid_00000000000c237c:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2379
	jmp uuid_00000000000c237b
uuid_00000000000c2379:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2376
	jmp uuid_00000000000c2378
uuid_00000000000c2376:
	movb $1, -96(%rbp)
uuid_00000000000c2378:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c237b:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c237e:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c23a1
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c238e
	jmp uuid_00000000000c2390
uuid_00000000000c238e:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c238b
	jmp uuid_00000000000c238d
uuid_00000000000c238b:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2388
	jmp uuid_00000000000c238a
uuid_00000000000c2388:
	movb $1, -208(%rbp)
uuid_00000000000c238a:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c238d:
	mov -224(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c2390:
	mov -216(%RBP),%RSP
	add $-280, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c239e
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c239b
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2394
	jmp uuid_00000000000c2396
uuid_00000000000c2394:
	push %RBP
	jmp uuid_00000000000c2391
	jmp uuid_00000000000c2393
uuid_00000000000c2391:
	movb $1, -352(%rbp)
uuid_00000000000c2393:
	mov -368(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c2396:
	mov -360(%RBP),%RSP
	add $-368, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2398
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2397
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c239a
uuid_00000000000c2398:
uuid_00000000000c239a:
	mov -320(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000c239d
uuid_00000000000c239b:
uuid_00000000000c239d:
	mov -288(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000c23a0
uuid_00000000000c239e:
	pushq -280(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-size-unless-class : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c23a0:
	mov -176(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c23a3
uuid_00000000000c23a1:
#call function without-size-unless-class-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-size-unless-class-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2385
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2382
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c2384
uuid_00000000000c2382:
	movq -216(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c2384:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000c2387
uuid_00000000000c2385:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c237f
	movq -192(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c2381
uuid_00000000000c237f:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2381:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c2387:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c23a3:
	mov -64(%RBP),%RSP
	add $-232, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_size_SB_unless_SB_class_SB_inner_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c23aa
	jmp uuid_00000000000c23ac
uuid_00000000000c23aa:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c23a7
	jmp uuid_00000000000c23a9
uuid_00000000000c23a7:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c23a4
	jmp uuid_00000000000c23a6
uuid_00000000000c23a4:
	movb $1, -96(%rbp)
uuid_00000000000c23a6:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c23a9:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c23ac:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c23e7
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c23bc
	jmp uuid_00000000000c23be
uuid_00000000000c23bc:
	push %RBP
	jmp uuid_00000000000c23b9
	jmp uuid_00000000000c23bb
uuid_00000000000c23b9:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000c1394
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c23b6
	jmp uuid_00000000000c23b8
uuid_00000000000c23b6:
	movb $1, -208(%rbp)
uuid_00000000000c23b8:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c23bb:
	mov -224(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c23be:
	mov -216(%RBP),%RSP
	add $-240, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c23e4
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c23c5
	jmp uuid_00000000000c23c7
uuid_00000000000c23c5:
	push %RBP
	jmp uuid_00000000000c23c2
	jmp uuid_00000000000c23c4
uuid_00000000000c23c2:
	push %RBP
	mov -256(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq $uuid_00000000000c1393
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c23bf
	jmp uuid_00000000000c23c1
uuid_00000000000c23bf:
	movb $1, -280(%rbp)
uuid_00000000000c23c1:
	mov -304(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c23c4:
	mov -296(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c23c7:
	mov -288(%RBP),%RSP
	add $-312, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c23e1
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c23ce
	jmp uuid_00000000000c23d0
uuid_00000000000c23ce:
	push %RBP
	mov -336(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c23cb
	jmp uuid_00000000000c23cd
uuid_00000000000c23cb:
	push %RBP
	mov -328(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c23c8
	jmp uuid_00000000000c23ca
uuid_00000000000c23c8:
	movb $1, -352(%rbp)
uuid_00000000000c23ca:
	mov -416(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c23cd:
	mov -368(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c23d0:
	mov -360(%RBP),%RSP
	add $-424, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c23de
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c23db
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c23d4
	jmp uuid_00000000000c23d6
uuid_00000000000c23d4:
	push %RBP
	jmp uuid_00000000000c23d1
	jmp uuid_00000000000c23d3
uuid_00000000000c23d1:
	movb $1, -496(%rbp)
uuid_00000000000c23d3:
	mov -512(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000c23d6:
	mov -504(%RBP),%RSP
	add $-512, %RSP
	mov -496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c23d8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c23d7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c23da
uuid_00000000000c23d8:
uuid_00000000000c23da:
	mov -464(%RBP),%RSP
	add $-512, %RSP
	jmp uuid_00000000000c23dd
uuid_00000000000c23db:
uuid_00000000000c23dd:
	mov -432(%RBP),%RSP
	add $-456, %RSP
	jmp uuid_00000000000c23e0
uuid_00000000000c23de:
	pushq -424(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-size-unless-class : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c23e0:
	mov -320(%RBP),%RSP
	add $-424, %RSP
	jmp uuid_00000000000c23e3
uuid_00000000000c23e1:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c23e3:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000c23e6
uuid_00000000000c23e4:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c23e6:
	mov -176(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c23e9
uuid_00000000000c23e7:
#call function without-size-unless-class-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-size-unless-class-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c23b3
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c23b0
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c23b2
uuid_00000000000c23b0:
	movq -216(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c23b2:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000c23b5
uuid_00000000000c23b3:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c23ad
	movq -192(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c23af
uuid_00000000000c23ad:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c23af:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c23b5:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c23e9:
	mov -64(%RBP),%RSP
	add $-232, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_size_CL_ArrowListTypeListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c23f2
	jmp uuid_00000000000c23f4
uuid_00000000000c23f2:
	push %RBP
	mov -128(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c23ef
	jmp uuid_00000000000c23f1
uuid_00000000000c23ef:
	push %RBP
	pushq -104(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	jmp uuid_00000000000c23ec
	jmp uuid_00000000000c23ee
uuid_00000000000c23ec:
	movb $1, -144(%rbp)
uuid_00000000000c23ee:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c23f1:
	mov -160(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c23f4:
	mov -152(%RBP),%RSP
	add $-232, %RSP
	mov -144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c23f9
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c23f6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c23f5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c23f8
uuid_00000000000c23f6:
uuid_00000000000c23f8:
	mov -240(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c23fb
uuid_00000000000c23f9:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call without_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-size : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call without_SB_size_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c23fb:
	mov -96(%RBP),%RSP
	add $-232, %RSP
	subq $40, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
without_SB_size_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2402
	jmp uuid_00000000000c2404
uuid_00000000000c2402:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c23ff
	jmp uuid_00000000000c2401
uuid_00000000000c23ff:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c23fc
	jmp uuid_00000000000c23fe
uuid_00000000000c23fc:
	movb $1, -96(%rbp)
uuid_00000000000c23fe:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c2401:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c2404:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c243f
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2414
	jmp uuid_00000000000c2416
uuid_00000000000c2414:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2411
	jmp uuid_00000000000c2413
uuid_00000000000c2411:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq $uuid_00000000000c1393
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c240e
	jmp uuid_00000000000c2410
uuid_00000000000c240e:
	movb $1, -208(%rbp)
uuid_00000000000c2410:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c2413:
	mov -224(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c2416:
	mov -216(%RBP),%RSP
	add $-280, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c243c
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c241d
	jmp uuid_00000000000c241f
uuid_00000000000c241d:
	push %RBP
	mov -304(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c241a
	jmp uuid_00000000000c241c
uuid_00000000000c241a:
	push %RBP
	mov -296(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -392(%rbp)
	pushq $uuid_00000000000c1394
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2417
	jmp uuid_00000000000c2419
uuid_00000000000c2417:
	movb $1, -320(%rbp)
uuid_00000000000c2419:
	mov -384(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000c241c:
	mov -336(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000c241f:
	mov -328(%RBP),%RSP
	add $-392, %RSP
	mov -320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2439
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -424(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2426
	jmp uuid_00000000000c2428
uuid_00000000000c2426:
	push %RBP
	mov -416(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2423
	jmp uuid_00000000000c2425
uuid_00000000000c2423:
	push %RBP
	mov -408(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2420
	jmp uuid_00000000000c2422
uuid_00000000000c2420:
	movb $1, -432(%rbp)
uuid_00000000000c2422:
	mov -496(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c2425:
	mov -448(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c2428:
	mov -440(%RBP),%RSP
	add $-504, %RSP
	mov -432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2436
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2433
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -568(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c242c
	jmp uuid_00000000000c242e
uuid_00000000000c242c:
	push %RBP
	jmp uuid_00000000000c2429
	jmp uuid_00000000000c242b
uuid_00000000000c2429:
	movb $1, -576(%rbp)
uuid_00000000000c242b:
	mov -592(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c242e:
	mov -584(%RBP),%RSP
	add $-592, %RSP
	mov -576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2430
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c242f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2432
uuid_00000000000c2430:
uuid_00000000000c2432:
	mov -544(%RBP),%RSP
	add $-592, %RSP
	jmp uuid_00000000000c2435
uuid_00000000000c2433:
uuid_00000000000c2435:
	mov -512(%RBP),%RSP
	add $-536, %RSP
	jmp uuid_00000000000c2438
uuid_00000000000c2436:
	pushq -504(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-size : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call without_SB_size_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2438:
	mov -400(%RBP),%RSP
	add $-504, %RSP
	jmp uuid_00000000000c243b
uuid_00000000000c2439:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c243b:
	mov -288(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000c243e
uuid_00000000000c243c:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c243e:
	mov -176(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c2441
uuid_00000000000c243f:
#call function without-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c240b
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2408
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c240a
uuid_00000000000c2408:
	movq -216(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c240a:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000c240d
uuid_00000000000c240b:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2405
	movq -192(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c2407
uuid_00000000000c2405:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2407:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c240d:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c2441:
	mov -64(%RBP),%RSP
	add $-232, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_only_SB_tag_CL_ArrowTypeType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2448
	jmp uuid_00000000000c244a
uuid_00000000000c2448:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2445
	jmp uuid_00000000000c2447
uuid_00000000000c2445:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2442
	jmp uuid_00000000000c2444
uuid_00000000000c2442:
	movb $1, -120(%rbp)
uuid_00000000000c2444:
	mov -168(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000c2447:
	mov -136(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000c244a:
	mov -128(%RBP),%RSP
	add $-192, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2461
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2457
	jmp uuid_00000000000c2459
uuid_00000000000c2457:
	push %RBP
	jmp uuid_00000000000c2454
	jmp uuid_00000000000c2456
uuid_00000000000c2454:
	push %RBP
	mov -208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq $uuid_00000000000c1572
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2451
	jmp uuid_00000000000c2453
uuid_00000000000c2451:
	movb $1, -232(%rbp)
uuid_00000000000c2453:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c2456:
	mov -248(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c2459:
	mov -240(%RBP),%RSP
	add $-264, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c245e
	push %RBP
	jmp uuid_00000000000c245b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c245a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c245d
uuid_00000000000c245b:
uuid_00000000000c245d:
	mov -272(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000c2460
uuid_00000000000c245e:
	movq -24(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000c2460:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000c2463
uuid_00000000000c2461:
#call function with-only-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c244e
#call function with-only-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c244b
	jmp uuid_00000000000c244d
uuid_00000000000c244b:
	movq -248(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -240(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -232(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000c244d:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c2450
uuid_00000000000c244e:
	movq -216(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000c2450:
	mov -224(%RBP),%RSP
	add $-224, %RSP
uuid_00000000000c2463:
	mov -88(%RBP),%RSP
	add $-224, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_only_SB_class_CL_ArrowTypeType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c246a
	jmp uuid_00000000000c246c
uuid_00000000000c246a:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2467
	jmp uuid_00000000000c2469
uuid_00000000000c2467:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2464
	jmp uuid_00000000000c2466
uuid_00000000000c2464:
	movb $1, -120(%rbp)
uuid_00000000000c2466:
	mov -168(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000c2469:
	mov -136(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000c246c:
	mov -128(%RBP),%RSP
	add $-192, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2489
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2479
	jmp uuid_00000000000c247b
uuid_00000000000c2479:
	push %RBP
	jmp uuid_00000000000c2476
	jmp uuid_00000000000c2478
uuid_00000000000c2476:
	push %RBP
	mov -208(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2473
	jmp uuid_00000000000c2475
uuid_00000000000c2473:
	movb $1, -232(%rbp)
uuid_00000000000c2475:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c2478:
	mov -248(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c247b:
	mov -240(%RBP),%RSP
	add $-264, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2486
	push %RBP
	jmp uuid_00000000000c2483
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2482
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2485
uuid_00000000000c2483:
uuid_00000000000c2485:
	mov -272(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000c2488
uuid_00000000000c2486:
	push %RBP
#call function is-class : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	mov %RBX, %RBP
	call is_SB_class_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c247f
	jmp uuid_00000000000c2481
uuid_00000000000c247f:
	push %RBP
#call function is-fragment : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	mov %RBX, %RBP
	call is_SB_fragment_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c247c
	jmp uuid_00000000000c247e
uuid_00000000000c247c:
	movq -24(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000c247e:
	mov -280(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c2481:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c2488:
	mov -200(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c248b
uuid_00000000000c2489:
#call function with-only-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c246d
	jmp uuid_00000000000c246f
uuid_00000000000c246d:
	movq -216(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000c246f:
	mov -224(%RBP),%RSP
	add $-224, %RSP
#call function with-only-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2470
	jmp uuid_00000000000c2472
uuid_00000000000c2470:
	movq -248(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -240(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -232(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000c2472:
	mov -256(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000c248b:
	mov -88(%RBP),%RSP
	add $-256, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_only_SB_representation_CL_ArrowListTypeListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2494
	jmp uuid_00000000000c2496
uuid_00000000000c2494:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2491
	jmp uuid_00000000000c2493
uuid_00000000000c2491:
	push %RBP
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	jmp uuid_00000000000c248e
	jmp uuid_00000000000c2490
uuid_00000000000c248e:
	movb $1, -184(%rbp)
uuid_00000000000c2490:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c2493:
	mov -200(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c2496:
	mov -192(%RBP),%RSP
	add $-272, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c249b
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov -320(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2498
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2497
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c249a
uuid_00000000000c2498:
uuid_00000000000c249a:
	mov -280(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000c249d
uuid_00000000000c249b:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-only-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function with-only-representation : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_representation_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c249d:
	mov -136(%RBP),%RSP
	add $-272, %RSP
	subq $40, %rsp
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
with_SB_only_SB_representation_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c24a4
	jmp uuid_00000000000c24a6
uuid_00000000000c24a4:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c24a1
	jmp uuid_00000000000c24a3
uuid_00000000000c24a1:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c249e
	jmp uuid_00000000000c24a0
uuid_00000000000c249e:
	movb $1, -120(%rbp)
uuid_00000000000c24a0:
	mov -168(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000c24a3:
	mov -136(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000c24a6:
	mov -128(%RBP),%RSP
	add $-192, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2535
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c24b6
	jmp uuid_00000000000c24b8
uuid_00000000000c24b6:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -288(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c24b3
	jmp uuid_00000000000c24b5
uuid_00000000000c24b3:
	push %RBP
	mov -208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq $uuid_00000000000c1774
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c24b0
	jmp uuid_00000000000c24b2
uuid_00000000000c24b0:
	movb $1, -232(%rbp)
uuid_00000000000c24b2:
	mov -296(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000c24b5:
	mov -248(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000c24b8:
	mov -240(%RBP),%RSP
	add $-304, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2532
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c24bf
	jmp uuid_00000000000c24c1
uuid_00000000000c24bf:
	push %RBP
	mov -328(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c24bc
	jmp uuid_00000000000c24be
uuid_00000000000c24bc:
	push %RBP
	mov -320(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -416(%rbp)
	pushq $uuid_00000000000c22e4
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c24b9
	jmp uuid_00000000000c24bb
uuid_00000000000c24b9:
	movb $1, -344(%rbp)
uuid_00000000000c24bb:
	mov -408(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c24be:
	mov -360(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c24c1:
	mov -352(%RBP),%RSP
	add $-416, %RSP
	mov -344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c252f
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c24c8
	jmp uuid_00000000000c24ca
uuid_00000000000c24c8:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c24c5
	jmp uuid_00000000000c24c7
uuid_00000000000c24c5:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq $uuid_00000000000c1309
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c24c2
	jmp uuid_00000000000c24c4
uuid_00000000000c24c2:
	movb $1, -456(%rbp)
uuid_00000000000c24c4:
	mov -520(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000c24c7:
	mov -472(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000c24ca:
	mov -464(%RBP),%RSP
	add $-528, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c252c
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c24d1
	jmp uuid_00000000000c24d3
uuid_00000000000c24d1:
	push %RBP
	mov -552(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c24ce
	jmp uuid_00000000000c24d0
uuid_00000000000c24ce:
	push %RBP
	mov -544(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -640(%rbp)
	pushq $uuid_00000000000c17da
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c24cb
	jmp uuid_00000000000c24cd
uuid_00000000000c24cb:
	movb $1, -568(%rbp)
uuid_00000000000c24cd:
	mov -632(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000c24d0:
	mov -584(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000c24d3:
	mov -576(%RBP),%RSP
	add $-640, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2529
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c24da
	jmp uuid_00000000000c24dc
uuid_00000000000c24da:
	push %RBP
	mov -664(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -736(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c24d7
	jmp uuid_00000000000c24d9
uuid_00000000000c24d7:
	push %RBP
	mov -656(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -752(%rbp)
	pushq $uuid_00000000000c1155
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c24d4
	jmp uuid_00000000000c24d6
uuid_00000000000c24d4:
	movb $1, -680(%rbp)
uuid_00000000000c24d6:
	mov -744(%RBP),%RSP
	add $-752, %RSP
uuid_00000000000c24d9:
	mov -696(%RBP),%RSP
	add $-752, %RSP
uuid_00000000000c24dc:
	mov -688(%RBP),%RSP
	add $-752, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2526
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -784(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c24e3
	jmp uuid_00000000000c24e5
uuid_00000000000c24e3:
	push %RBP
	mov -776(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c24e0
	jmp uuid_00000000000c24e2
uuid_00000000000c24e0:
	push %RBP
	mov -768(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
	pushq $uuid_00000000000c1264
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c24dd
	jmp uuid_00000000000c24df
uuid_00000000000c24dd:
	movb $1, -792(%rbp)
uuid_00000000000c24df:
	mov -856(%RBP),%RSP
	add $-864, %RSP
uuid_00000000000c24e2:
	mov -808(%RBP),%RSP
	add $-864, %RSP
uuid_00000000000c24e5:
	mov -800(%RBP),%RSP
	add $-864, %RSP
	mov -792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2523
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -896(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c24ec
	jmp uuid_00000000000c24ee
uuid_00000000000c24ec:
	push %RBP
	mov -888(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -960(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c24e9
	jmp uuid_00000000000c24eb
uuid_00000000000c24e9:
	push %RBP
	mov -880(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq $uuid_00000000000c1268
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c24e6
	jmp uuid_00000000000c24e8
uuid_00000000000c24e6:
	movb $1, -904(%rbp)
uuid_00000000000c24e8:
	mov -968(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000c24eb:
	mov -920(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000c24ee:
	mov -912(%RBP),%RSP
	add $-976, %RSP
	mov -904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2520
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -1008(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c24f5
	jmp uuid_00000000000c24f7
uuid_00000000000c24f5:
	push %RBP
	mov -1000(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1072(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c24f2
	jmp uuid_00000000000c24f4
uuid_00000000000c24f2:
	push %RBP
	mov -992(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1088(%rbp)
	pushq $uuid_00000000000c126c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c24ef
	jmp uuid_00000000000c24f1
uuid_00000000000c24ef:
	movb $1, -1016(%rbp)
uuid_00000000000c24f1:
	mov -1080(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000c24f4:
	mov -1032(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000c24f7:
	mov -1024(%RBP),%RSP
	add $-1088, %RSP
	mov -1016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c251d
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -1120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c24fe
	jmp uuid_00000000000c2500
uuid_00000000000c24fe:
	push %RBP
	mov -1112(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1184(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c24fb
	jmp uuid_00000000000c24fd
uuid_00000000000c24fb:
	push %RBP
	mov -1104(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1200(%rbp)
	pushq $uuid_00000000000c1270
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c24f8
	jmp uuid_00000000000c24fa
uuid_00000000000c24f8:
	movb $1, -1128(%rbp)
uuid_00000000000c24fa:
	mov -1192(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000c24fd:
	mov -1144(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000c2500:
	mov -1136(%RBP),%RSP
	add $-1200, %RSP
	mov -1128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c251a
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -1232(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2507
	jmp uuid_00000000000c2509
uuid_00000000000c2507:
	push %RBP
	mov -1224(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2504
	jmp uuid_00000000000c2506
uuid_00000000000c2504:
	push %RBP
	mov -1216(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2501
	jmp uuid_00000000000c2503
uuid_00000000000c2501:
	movb $1, -1240(%rbp)
uuid_00000000000c2503:
	mov -1304(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000c2506:
	mov -1256(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000c2509:
	mov -1248(%RBP),%RSP
	add $-1312, %RSP
	mov -1240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2517
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov -1344(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2514
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -1376(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c250d
	jmp uuid_00000000000c250f
uuid_00000000000c250d:
	push %RBP
	jmp uuid_00000000000c250a
	jmp uuid_00000000000c250c
uuid_00000000000c250a:
	movb $1, -1384(%rbp)
uuid_00000000000c250c:
	mov -1400(%RBP),%RSP
	add $-1400, %RSP
uuid_00000000000c250f:
	mov -1392(%RBP),%RSP
	add $-1400, %RSP
	mov -1384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2511
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2510
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2513
uuid_00000000000c2511:
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c2513:
	mov -1352(%RBP),%RSP
	add $-1400, %RSP
	jmp uuid_00000000000c2516
uuid_00000000000c2514:
uuid_00000000000c2516:
	mov -1320(%RBP),%RSP
	add $-1344, %RSP
	jmp uuid_00000000000c2519
uuid_00000000000c2517:
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c2519:
	mov -1208(%RBP),%RSP
	add $-1312, %RSP
	jmp uuid_00000000000c251c
uuid_00000000000c251a:
uuid_00000000000c251c:
	mov -1096(%RBP),%RSP
	add $-1200, %RSP
	jmp uuid_00000000000c251f
uuid_00000000000c251d:
uuid_00000000000c251f:
	mov -984(%RBP),%RSP
	add $-1088, %RSP
	jmp uuid_00000000000c2522
uuid_00000000000c2520:
uuid_00000000000c2522:
	mov -872(%RBP),%RSP
	add $-976, %RSP
	jmp uuid_00000000000c2525
uuid_00000000000c2523:
uuid_00000000000c2525:
	mov -760(%RBP),%RSP
	add $-864, %RSP
	jmp uuid_00000000000c2528
uuid_00000000000c2526:
uuid_00000000000c2528:
	mov -648(%RBP),%RSP
	add $-752, %RSP
	jmp uuid_00000000000c252b
uuid_00000000000c2529:
uuid_00000000000c252b:
	mov -536(%RBP),%RSP
	add $-640, %RSP
	jmp uuid_00000000000c252e
uuid_00000000000c252c:
uuid_00000000000c252e:
	mov -424(%RBP),%RSP
	add $-528, %RSP
	jmp uuid_00000000000c2531
uuid_00000000000c252f:
uuid_00000000000c2531:
	mov -312(%RBP),%RSP
	add $-416, %RSP
	jmp uuid_00000000000c2534
uuid_00000000000c2532:
uuid_00000000000c2534:
	mov -200(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000c2537
uuid_00000000000c2535:
#call function with-only-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function with-only-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c24ad
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c24aa
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	jmp uuid_00000000000c24ac
uuid_00000000000c24aa:
	movq -240(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -232(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -224(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000c24ac:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c24af
uuid_00000000000c24ad:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c24a7
	movq -216(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -40(%rbp)
	jmp uuid_00000000000c24a9
uuid_00000000000c24a7:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c24a9:
	mov -256(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000c24af:
	mov -248(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000c2537:
	mov -88(%RBP),%RSP
	add $-256, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
normalize_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function without-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call without_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function without-size-unless-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
normalize_CL_ArrowTContextTContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c254e
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov -504(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c254b
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2544
	jmp uuid_00000000000c2546
uuid_00000000000c2544:
	push %RBP
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	jmp uuid_00000000000c2541
	jmp uuid_00000000000c2543
uuid_00000000000c2541:
	push %RBP
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	jmp uuid_00000000000c253e
	jmp uuid_00000000000c2540
uuid_00000000000c253e:
	push %RBP
	mov -528(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c253b
	jmp uuid_00000000000c253d
uuid_00000000000c253b:
	push %RBP
	mov -520(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2538
	jmp uuid_00000000000c253a
uuid_00000000000c2538:
	movb $1, -640(%rbp)
uuid_00000000000c253a:
	mov -784(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000c253d:
	mov -768(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000c2540:
	mov -736(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000c2543:
	mov -656(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000c2546:
	mov -648(%RBP),%RSP
	add $-904, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2548
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2547
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c254a
uuid_00000000000c2548:
#call function normalize : Arrow<TContext,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	popq -904(%RBP)
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -776(%rbp)
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c254a:
	mov -512(%RBP),%RSP
	add $-904, %RSP
	jmp uuid_00000000000c254d
uuid_00000000000c254b:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c254d:
	mov -384(%RBP),%RSP
	add $-504, %RSP
	jmp uuid_00000000000c2550
uuid_00000000000c254e:
uuid_00000000000c2550:
	mov -256(%RBP),%RSP
	add $-376, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $128, %rsp
	ret
denormalize_CL_ArrowTypeType:
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function with-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function with-fields : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_fields_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
enrich_CL_ArrowTypeConsTypeType:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2551
	jmp uuid_00000000000c2553
uuid_00000000000c2551:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2553:
	mov -64(%RBP),%RSP
	add $-64, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
type_SB_of_SB_s_CL_ArrowTypeAST:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c255a
	jmp uuid_00000000000c255c
uuid_00000000000c255a:
	push %RBP
	jmp uuid_00000000000c2557
	jmp uuid_00000000000c2559
uuid_00000000000c2557:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2554
	jmp uuid_00000000000c2556
uuid_00000000000c2554:
	movb $1, -264(%rbp)
uuid_00000000000c2556:
	mov -288(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000c2559:
	mov -280(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000c255c:
	mov -272(%RBP),%RSP
	add $-296, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c258c
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2563
	jmp uuid_00000000000c2565
uuid_00000000000c2563:
	push %RBP
	jmp uuid_00000000000c2560
	jmp uuid_00000000000c2562
uuid_00000000000c2560:
	push %RBP
	mov -312(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c255d
	jmp uuid_00000000000c255f
uuid_00000000000c255d:
	movb $1, -384(%rbp)
uuid_00000000000c255f:
	mov -408(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c2562:
	mov -400(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c2565:
	mov -392(%RBP),%RSP
	add $-416, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2589
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c257e
	jmp uuid_00000000000c2580
uuid_00000000000c257e:
	push %RBP
	mov -488(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c257b
	jmp uuid_00000000000c257d
uuid_00000000000c257b:
	push %RBP
	mov -480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2575
	jmp uuid_00000000000c2577
uuid_00000000000c2575:
	push %RBP
	mov -664(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -768(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c256c
	jmp uuid_00000000000c256e
uuid_00000000000c256c:
	push %RBP
	jmp uuid_00000000000c2569
	jmp uuid_00000000000c256b
uuid_00000000000c2569:
	push %RBP
	mov -704(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -808(%rbp)
	pushq $uuid_00000000000c1074
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2566
	jmp uuid_00000000000c2568
uuid_00000000000c2566:
	movb $1, -776(%rbp)
uuid_00000000000c2568:
	mov -800(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c256b:
	mov -792(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c256e:
	mov -784(%RBP),%RSP
	add $-808, %RSP
	mov -776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2572
	jmp uuid_00000000000c2574
uuid_00000000000c2572:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c256f
	jmp uuid_00000000000c2571
uuid_00000000000c256f:
	movb $1, -680(%rbp)
uuid_00000000000c2571:
	mov -816(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c2574:
	mov -696(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c2577:
	mov -688(%RBP),%RSP
	add $-888, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2578
	jmp uuid_00000000000c257a
uuid_00000000000c2578:
	movb $1, -504(%rbp)
uuid_00000000000c257a:
	mov -600(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c257d:
	mov -520(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c2580:
	mov -512(%RBP),%RSP
	add $-888, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2586
	push %RBP
	jmp uuid_00000000000c2583
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2582
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2585
uuid_00000000000c2583:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c2581
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2585:
	mov -896(%RBP),%RSP
	add $-896, %RSP
	jmp uuid_00000000000c2588
uuid_00000000000c2586:
#call function type-of-s : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	mov %RBX, %RBP
	call type_SB_of_SB_s_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function type-of-s : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call type_SB_of_SB_s_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1157
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c2588:
	mov -424(%RBP),%RSP
	add $-936, %RSP
	jmp uuid_00000000000c258b
uuid_00000000000c2589:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -416(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	movq -440(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000c258b:
	mov -304(%RBP),%RSP
	add $-440, %RSP
	jmp uuid_00000000000c258e
uuid_00000000000c258c:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	movq -320(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -312(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -304(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000c258e:
	mov -184(%RBP),%RSP
	add $-320, %RSP
	subq $24, %rsp
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
type_SB_of_SB_s_SB_with_SB_fields_CL_ArrowTypeConsU64ConsASTConsStringType:
	pushq $0
	pushq $0
	pushq $3
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	push %RBP
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2595
	jmp uuid_00000000000c2597
uuid_00000000000c2595:
	push %RBP
	jmp uuid_00000000000c2592
	jmp uuid_00000000000c2594
uuid_00000000000c2592:
	push %RBP
	mov -232(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c258f
	jmp uuid_00000000000c2591
uuid_00000000000c258f:
	movb $1, -304(%rbp)
uuid_00000000000c2591:
	mov -328(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c2594:
	mov -320(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c2597:
	mov -312(%RBP),%RSP
	add $-336, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c25f9
	push %RBP
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq $0
	push %RBP
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c25b8
	jmp uuid_00000000000c25ba
uuid_00000000000c25b8:
	push %RBP
	jmp uuid_00000000000c25b5
	jmp uuid_00000000000c25b7
uuid_00000000000c25b5:
	push %RBP
	mov -352(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c25b2
	jmp uuid_00000000000c25b4
uuid_00000000000c25b2:
	movb $1, -424(%rbp)
uuid_00000000000c25b4:
	mov -448(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000c25b7:
	mov -440(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000c25ba:
	mov -432(%RBP),%RSP
	add $-456, %RSP
	mov -424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c25f6
	push %RBP
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c25ec
	jmp uuid_00000000000c25ee
uuid_00000000000c25ec:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c25e9
	jmp uuid_00000000000c25eb
uuid_00000000000c25e9:
	push %RBP
	mov -520(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -712(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c25e3
	jmp uuid_00000000000c25e5
uuid_00000000000c25e3:
	push %RBP
	mov -704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -808(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c25da
	jmp uuid_00000000000c25dc
uuid_00000000000c25da:
	push %RBP
	jmp uuid_00000000000c25d7
	jmp uuid_00000000000c25d9
uuid_00000000000c25d7:
	push %RBP
	mov -744(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -848(%rbp)
	pushq $uuid_00000000000c1074
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c25d4
	jmp uuid_00000000000c25d6
uuid_00000000000c25d4:
	movb $1, -816(%rbp)
uuid_00000000000c25d6:
	mov -840(%RBP),%RSP
	add $-848, %RSP
uuid_00000000000c25d9:
	mov -832(%RBP),%RSP
	add $-848, %RSP
uuid_00000000000c25dc:
	mov -824(%RBP),%RSP
	add $-848, %RSP
	mov -816(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c25e0
	jmp uuid_00000000000c25e2
uuid_00000000000c25e0:
	push %RBP
	mov -696(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c25dd
	jmp uuid_00000000000c25df
uuid_00000000000c25dd:
	movb $1, -720(%rbp)
uuid_00000000000c25df:
	mov -856(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c25e2:
	mov -736(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c25e5:
	mov -728(%RBP),%RSP
	add $-928, %RSP
	mov -720(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c25e6
	jmp uuid_00000000000c25e8
uuid_00000000000c25e6:
	movb $1, -544(%rbp)
uuid_00000000000c25e8:
	mov -640(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c25eb:
	mov -560(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c25ee:
	mov -552(%RBP),%RSP
	add $-928, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c25f3
	push %RBP
	jmp uuid_00000000000c25f0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c25ef
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c25f2
uuid_00000000000c25f0:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c2581
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c25f2:
	mov -936(%RBP),%RSP
	add $-936, %RSP
	jmp uuid_00000000000c25f5
uuid_00000000000c25f3:
#call function type-of-s-with-fields : Arrow<Cons<Cons<Cons<Type,String>,AST>,U64>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	mov -112(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call type_SB_of_SB_s_SB_with_SB_fields_CL_ArrowTypeConsU64ConsASTConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -144(%RSP)
	push -144(%RSP)
	push -144(%RSP)
#call function type-of-s-with-fields : Arrow<Cons<Cons<Cons<Type,String>,AST>,U64>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call type_SB_of_SB_s_SB_with_SB_fields_CL_ArrowTypeConsU64ConsASTConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -144(%RSP)
	push -144(%RSP)
	push -144(%RSP)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1157
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c25f5:
	mov -464(%RBP),%RSP
	add $-976, %RSP
	jmp uuid_00000000000c25f8
uuid_00000000000c25f6:
	pushq $0
	pushq $0
	pushq $3
#call function parse-field-of : Arrow<String,Tuple<String,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	mov %RBX, %RBP
	call parse_SB_field_SB_of_CL_ArrowTupleTypeStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push %RBP
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -568(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c25c1
	jmp uuid_00000000000c25c3
uuid_00000000000c25c1:
	push %RBP
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	jmp uuid_00000000000c25be
	jmp uuid_00000000000c25c0
uuid_00000000000c25be:
	push %RBP
	mov -536(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq $uuid_00000000000c0dfc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c25bb
	jmp uuid_00000000000c25bd
uuid_00000000000c25bb:
	movb $1, -576(%rbp)
uuid_00000000000c25bd:
	mov -624(%RBP),%RSP
	add $-632, %RSP
uuid_00000000000c25c0:
	mov -592(%RBP),%RSP
	add $-632, %RSP
uuid_00000000000c25c3:
	mov -584(%RBP),%RSP
	add $-632, %RSP
	mov -576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c25d1
	push %RBP
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -680(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c25ca
	jmp uuid_00000000000c25cc
uuid_00000000000c25ca:
	push %RBP
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	jmp uuid_00000000000c25c7
	jmp uuid_00000000000c25c9
uuid_00000000000c25c7:
	push %RBP
	mov -648(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c25c4
	jmp uuid_00000000000c25c6
uuid_00000000000c25c4:
	movb $1, -688(%rbp)
uuid_00000000000c25c6:
	mov -736(%RBP),%RSP
	add $-744, %RSP
uuid_00000000000c25c9:
	mov -704(%RBP),%RSP
	add $-744, %RSP
uuid_00000000000c25cc:
	mov -696(%RBP),%RSP
	add $-744, %RSP
	mov -688(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c25ce
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c25cd
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c25d0
uuid_00000000000c25ce:
#call function add-alias : Arrow<Cons<Cons<String,String>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0fa9
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -744(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0fa9
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c13d4
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call add_SB_alias_CL_ArrowNilConsTypeConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -728(%rbp), %r15
	movq %r15, -480(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -472(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -464(%rbp)
uuid_00000000000c25d0:
	mov -640(%RBP),%RSP
	add $-744, %RSP
	jmp uuid_00000000000c25d3
uuid_00000000000c25d1:
	movq -616(%rbp), %r15
	movq %r15, -480(%rbp)
	movq -608(%rbp), %r15
	movq %r15, -472(%rbp)
	movq -600(%rbp), %r15
	movq %r15, -464(%rbp)
uuid_00000000000c25d3:
	mov -528(%RBP),%RSP
	add $-632, %RSP
	movq -480(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -128(%rbp)
uuid_00000000000c25f8:
	mov -344(%RBP),%RSP
	add $-632, %RSP
	jmp uuid_00000000000c25fb
uuid_00000000000c25f9:
	pushq $0
	pushq $0
	pushq $3
#call function parse-field-of : Arrow<String,Tuple<String,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	mov %RBX, %RBP
	call parse_SB_field_SB_of_CL_ArrowTupleTypeStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push %RBP
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c259e
	jmp uuid_00000000000c25a0
uuid_00000000000c259e:
	push %RBP
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	jmp uuid_00000000000c259b
	jmp uuid_00000000000c259d
uuid_00000000000c259b:
	push %RBP
	mov -416(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -512(%rbp)
	pushq $uuid_00000000000c0dfc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2598
	jmp uuid_00000000000c259a
uuid_00000000000c2598:
	movb $1, -456(%rbp)
uuid_00000000000c259a:
	mov -504(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000c259d:
	mov -472(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000c25a0:
	mov -464(%RBP),%RSP
	add $-512, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c25af
	push %RBP
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c25a7
	jmp uuid_00000000000c25a9
uuid_00000000000c25a7:
	push %RBP
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	jmp uuid_00000000000c25a4
	jmp uuid_00000000000c25a6
uuid_00000000000c25a4:
	push %RBP
	mov -528(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c25a1
	jmp uuid_00000000000c25a3
uuid_00000000000c25a1:
	movb $1, -568(%rbp)
uuid_00000000000c25a3:
	mov -616(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000c25a6:
	mov -584(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000c25a9:
	mov -576(%RBP),%RSP
	add $-624, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c25ac
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c25ab
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c25ae
uuid_00000000000c25ac:
#call function add-alias : Arrow<Cons<Cons<String,String>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0fa9
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -624(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0fa9
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c13d4
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call add_SB_alias_CL_ArrowNilConsTypeConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c25aa
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -624(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1527
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -608(%rbp), %r15
	movq %r15, -360(%rbp)
	movq -600(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -592(%rbp), %r15
	movq %r15, -344(%rbp)
uuid_00000000000c25ae:
	mov -520(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000c25b1
uuid_00000000000c25af:
	movq -496(%rbp), %r15
	movq %r15, -360(%rbp)
	movq -488(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -344(%rbp)
uuid_00000000000c25b1:
	mov -408(%RBP),%RSP
	add $-512, %RSP
	movq -360(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -128(%rbp)
uuid_00000000000c25fb:
	mov -224(%RBP),%RSP
	add $-512, %RSP
	subq $24, %rsp
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $120, %rsp
	ret
typeof_SB_lhs_CL_ArrowTypeAST:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c261a
	jmp uuid_00000000000c261c
uuid_00000000000c261a:
	push %RBP
	mov -248(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2608
	jmp uuid_00000000000c260a
uuid_00000000000c2608:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c25ff
	jmp uuid_00000000000c2601
uuid_00000000000c25ff:
	push %RBP
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	jmp uuid_00000000000c25fc
	jmp uuid_00000000000c25fe
uuid_00000000000c25fc:
	movb $1, -456(%rbp)
uuid_00000000000c25fe:
	mov -472(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000c2601:
	mov -464(%RBP),%RSP
	add $-496, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2605
	jmp uuid_00000000000c2607
uuid_00000000000c2605:
	push %RBP
	jmp uuid_00000000000c2602
	jmp uuid_00000000000c2604
uuid_00000000000c2602:
	movb $1, -360(%rbp)
uuid_00000000000c2604:
	mov -504(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c2607:
	mov -376(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c260a:
	mov -368(%RBP),%RSP
	add $-504, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2617
	jmp uuid_00000000000c2619
uuid_00000000000c2617:
	push %RBP
	mov -240(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -584(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2611
	jmp uuid_00000000000c2613
uuid_00000000000c2611:
	push %RBP
	jmp uuid_00000000000c260e
	jmp uuid_00000000000c2610
uuid_00000000000c260e:
	push %RBP
	mov -520(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -624(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c260b
	jmp uuid_00000000000c260d
uuid_00000000000c260b:
	movb $1, -592(%rbp)
uuid_00000000000c260d:
	mov -616(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000c2610:
	mov -608(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000c2613:
	mov -600(%RBP),%RSP
	add $-624, %RSP
	mov -592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2614
	jmp uuid_00000000000c2616
uuid_00000000000c2614:
	movb $1, -264(%rbp)
uuid_00000000000c2616:
	mov -512(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000c2619:
	mov -280(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000c261c:
	mov -272(%RBP),%RSP
	add $-624, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2652
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -704(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2644
	jmp uuid_00000000000c2646
uuid_00000000000c2644:
	push %RBP
	mov -696(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -800(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c263b
	jmp uuid_00000000000c263d
uuid_00000000000c263b:
	push %RBP
	mov -792(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -896(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2629
	jmp uuid_00000000000c262b
uuid_00000000000c2629:
	push %RBP
	mov -888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -992(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2620
	jmp uuid_00000000000c2622
uuid_00000000000c2620:
	push %RBP
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	jmp uuid_00000000000c261d
	jmp uuid_00000000000c261f
uuid_00000000000c261d:
	movb $1, -1000(%rbp)
uuid_00000000000c261f:
	mov -1016(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c2622:
	mov -1008(%RBP),%RSP
	add $-1040, %RSP
	mov -1000(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2626
	jmp uuid_00000000000c2628
uuid_00000000000c2626:
	push %RBP
	jmp uuid_00000000000c2623
	jmp uuid_00000000000c2625
uuid_00000000000c2623:
	movb $1, -904(%rbp)
uuid_00000000000c2625:
	mov -1048(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000c2628:
	mov -920(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000c262b:
	mov -912(%RBP),%RSP
	add $-1048, %RSP
	mov -904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2638
	jmp uuid_00000000000c263a
uuid_00000000000c2638:
	push %RBP
	mov -784(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1128(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2632
	jmp uuid_00000000000c2634
uuid_00000000000c2632:
	push %RBP
	jmp uuid_00000000000c262f
	jmp uuid_00000000000c2631
uuid_00000000000c262f:
	push %RBP
	mov -1064(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1168(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c262c
	jmp uuid_00000000000c262e
uuid_00000000000c262c:
	movb $1, -1136(%rbp)
uuid_00000000000c262e:
	mov -1160(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c2631:
	mov -1152(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c2634:
	mov -1144(%RBP),%RSP
	add $-1168, %RSP
	mov -1136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2635
	jmp uuid_00000000000c2637
uuid_00000000000c2635:
	movb $1, -808(%rbp)
uuid_00000000000c2637:
	mov -1056(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c263a:
	mov -824(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c263d:
	mov -816(%RBP),%RSP
	add $-1168, %RSP
	mov -808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2641
	jmp uuid_00000000000c2643
uuid_00000000000c2641:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c263e
	jmp uuid_00000000000c2640
uuid_00000000000c263e:
	movb $1, -712(%rbp)
uuid_00000000000c2640:
	mov -1176(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c2643:
	mov -728(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c2646:
	mov -720(%RBP),%RSP
	add $-1248, %RSP
	mov -712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c264f
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov -1328(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c264c
	push %RBP
	jmp uuid_00000000000c2649
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2648
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c264b
uuid_00000000000c2649:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c2647
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c264b:
	mov -1336(%RBP),%RSP
	add $-1336, %RSP
	jmp uuid_00000000000c264e
uuid_00000000000c264c:
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1139
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c264e:
	mov -1256(%RBP),%RSP
	add $-1328, %RSP
	jmp uuid_00000000000c2651
uuid_00000000000c264f:
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1157
#call function typeof-lhs : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	mov %RBX, %RBP
	call typeof_SB_lhs_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c2651:
	mov -632(%RBP),%RSP
	add $-1248, %RSP
	jmp uuid_00000000000c2654
uuid_00000000000c2652:
	movq -496(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -488(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000c2654:
	mov -184(%RBP),%RSP
	add $-624, %RSP
	subq $24, %rsp
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
typeof_SB_tag_CL_ArrowTypeString:
#call function .lookup : Arrow<Cons<Cons<BTreeEq<String,Type>,String>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $type_SB_constructors_SB_index_CL_BTreeEqTypeStringBTreeEqTypeStringCaseNumber0, %r15
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowTypeConsTypeConsStringBTreeEqTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	subq $24, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
cons_SB_head_CL_ArrowTypeType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2675
	jmp uuid_00000000000c2677
uuid_00000000000c2675:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c266c
	jmp uuid_00000000000c266e
uuid_00000000000c266c:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2663
	jmp uuid_00000000000c2665
uuid_00000000000c2663:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2660
	jmp uuid_00000000000c2662
uuid_00000000000c2660:
	push %RBP
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	jmp uuid_00000000000c265d
	jmp uuid_00000000000c265f
uuid_00000000000c265d:
	movb $1, -248(%rbp)
uuid_00000000000c265f:
	mov -312(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c2662:
	mov -264(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c2665:
	mov -256(%RBP),%RSP
	add $-336, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2669
	jmp uuid_00000000000c266b
uuid_00000000000c2669:
	push %RBP
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	jmp uuid_00000000000c2666
	jmp uuid_00000000000c2668
uuid_00000000000c2666:
	movb $1, -184(%rbp)
uuid_00000000000c2668:
	mov -344(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c266b:
	mov -200(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c266e:
	mov -192(%RBP),%RSP
	add $-368, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2672
	jmp uuid_00000000000c2674
uuid_00000000000c2672:
	push %RBP
	mov -96(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000c1157
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c266f
	jmp uuid_00000000000c2671
uuid_00000000000c266f:
	movb $1, -120(%rbp)
uuid_00000000000c2671:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c2674:
	mov -136(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c2677:
	mov -128(%RBP),%RSP
	add $-384, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c267c
	push %RBP
	jmp uuid_00000000000c2679
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2678
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c267b
uuid_00000000000c2679:
uuid_00000000000c267b:
	mov -392(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000c267e
uuid_00000000000c267c:
	movq -336(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -320(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000c267e:
	mov -88(%RBP),%RSP
	add $-384, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
cons_SB_tail_CL_ArrowTypeType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2697
	jmp uuid_00000000000c2699
uuid_00000000000c2697:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c268e
	jmp uuid_00000000000c2690
uuid_00000000000c268e:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2685
	jmp uuid_00000000000c2687
uuid_00000000000c2685:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2682
	jmp uuid_00000000000c2684
uuid_00000000000c2682:
	push %RBP
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	jmp uuid_00000000000c267f
	jmp uuid_00000000000c2681
uuid_00000000000c267f:
	movb $1, -248(%rbp)
uuid_00000000000c2681:
	mov -312(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c2684:
	mov -264(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c2687:
	mov -256(%RBP),%RSP
	add $-336, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c268b
	jmp uuid_00000000000c268d
uuid_00000000000c268b:
	push %RBP
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	jmp uuid_00000000000c2688
	jmp uuid_00000000000c268a
uuid_00000000000c2688:
	movb $1, -184(%rbp)
uuid_00000000000c268a:
	mov -344(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c268d:
	mov -200(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c2690:
	mov -192(%RBP),%RSP
	add $-368, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2694
	jmp uuid_00000000000c2696
uuid_00000000000c2694:
	push %RBP
	mov -96(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000c1157
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2691
	jmp uuid_00000000000c2693
uuid_00000000000c2691:
	movb $1, -120(%rbp)
uuid_00000000000c2693:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c2696:
	mov -136(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c2699:
	mov -128(%RBP),%RSP
	add $-384, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c269e
	push %RBP
	jmp uuid_00000000000c269b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c269a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c269d
uuid_00000000000c269b:
uuid_00000000000c269d:
	mov -392(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000c26a0
uuid_00000000000c269e:
	movq -368(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000c26a0:
	mov -88(%RBP),%RSP
	add $-384, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
parameter_SB_number_CL_ArrowU64ConsStringType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -104(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c26a7
	jmp uuid_00000000000c26a9
uuid_00000000000c26a7:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c26a4
	jmp uuid_00000000000c26a6
uuid_00000000000c26a4:
	push %RBP
	jmp uuid_00000000000c26a1
	jmp uuid_00000000000c26a3
uuid_00000000000c26a1:
	movb $1, -112(%rbp)
uuid_00000000000c26a3:
	mov -176(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c26a6:
	mov -128(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c26a9:
	mov -120(%RBP),%RSP
	add $-176, %RSP
	mov -112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c26ae
	push %RBP
	jmp uuid_00000000000c26ab
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c26aa
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c26ad
uuid_00000000000c26ab:
uuid_00000000000c26ad:
	mov -184(%RBP),%RSP
	add $-184, %RSP
	jmp uuid_00000000000c26b0
uuid_00000000000c26ae:
#call function parameter-number : Arrow<Cons<Cons<List<Type>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -32(%rbp)
	pushq $1
	mov %RBX, %RBP
	call parameter_SB_number_CL_ArrowU64ConsU64ConsStringListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -48(%rbp)
uuid_00000000000c26b0:
	mov -80(%RBP),%RSP
	add $-176, %RSP
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
parameter_SB_number_CL_ArrowU64ConsU64ConsStringListType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	push %RBP
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c26c1
	jmp uuid_00000000000c26c3
uuid_00000000000c26c1:
	push %RBP
	mov -152(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c26be
	jmp uuid_00000000000c26c0
uuid_00000000000c26be:
	push %RBP
	pushq -128(%RBP)
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c26b8
	jmp uuid_00000000000c26ba
uuid_00000000000c26b8:
	push %RBP
	mov -248(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c26b5
	jmp uuid_00000000000c26b7
uuid_00000000000c26b5:
	movb $1, -264(%rbp)
uuid_00000000000c26b7:
	mov -280(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c26ba:
	mov -272(%RBP),%RSP
	add $-288, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c26bb
	jmp uuid_00000000000c26bd
uuid_00000000000c26bb:
	movb $1, -168(%rbp)
uuid_00000000000c26bd:
	mov -232(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c26c0:
	mov -184(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c26c3:
	mov -176(%RBP),%RSP
	add $-288, %RSP
	mov -168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c26cb
	push %RBP
	jmp uuid_00000000000c26c8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c26c7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c26ca
uuid_00000000000c26c8:
uuid_00000000000c26ca:
	mov -296(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000c26cd
uuid_00000000000c26cb:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c26c4
#call function parameter-number : Arrow<Cons<Cons<List<Type>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -48(%rbp)
	mov -56(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call parameter_SB_number_CL_ArrowU64ConsU64ConsStringListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -72(%rbp)
	jmp uuid_00000000000c26c6
uuid_00000000000c26c4:
	movq -56(%rbp), %r15
	movq %r15, -72(%rbp)
	mov -56(%rbp), %r15
	mov %r15, -72(%rbp)
uuid_00000000000c26c6:
	mov -296(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000c26cd:
	mov -120(%RBP),%RSP
	add $-296, %RSP
	mov -72(%rbp), %RAX
	mov %rbp, %rsp
	sub $64, %rsp
	ret
apply_CL_ArrowTupleTypeTypeConsASTConsTypeConsTypeString:
#call function apply : Arrow<Cons<Cons<Cons<Cons<String,Type>,Type>,U64>,AST>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowTupleTypeTypeConsASTConsU64ConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	subq $56, %rsp
	pushq 56(%rsp)
	pushq 72(%rsp)
	pushq 88(%rsp)
	pushq 104(%rsp)
	pushq 120(%rsp)
	pushq 136(%rsp)
	pushq 152(%rsp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
apply_CL_ArrowTupleTypeTypeConsASTConsU64ConsTypeConsTypeString:
#call function apply : Arrow<Cons<Cons<Cons<Cons<Cons<String,Type>,Type>,U64>,AST>,U64>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq $1
	mov %RBX, %RBP
	call apply_CL_ArrowTupleTypeTypeConsU64ConsASTConsU64ConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	subq $56, %rsp
	pushq 56(%rsp)
	pushq 72(%rsp)
	pushq 88(%rsp)
	pushq 104(%rsp)
	pushq 120(%rsp)
	pushq 136(%rsp)
	pushq 152(%rsp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $144, %rsp
	ret
apply_CL_ArrowTupleTypeTypeConsU64ConsASTConsU64ConsTypeConsTypeString:
	pushq $0
	pushq $0
	pushq $3
#call function apply-plural : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call apply_SB_plural_CL_ArrowListTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push %RBP
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c26ce
	jmp uuid_00000000000c26d0
uuid_00000000000c26ce:
#call function reduce-plural : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call reduce_SB_plural_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c26d0:
	mov -224(%RBP),%RSP
	add $-224, %RSP
	push %RBP
#call function .length : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call _DT_length_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	mov %RAX, %RAX
	mov -144(%RBP), %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c26d4
	jmp uuid_00000000000c26d6
uuid_00000000000c26d4:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c26d1
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c26d2
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<SourceLocation,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c26d3
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c26d6:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	push %RBP
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function .length : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call _DT_length_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c26ea
	jmp uuid_00000000000c26ec
uuid_00000000000c26ea:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c26d7
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1527
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c26d8
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<SourceLocation,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
uuid_00000000000c26e7:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c26e8
	jmp uuid_00000000000c26e9
uuid_00000000000c26e8:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c26d9
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -368(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c26e0
	jmp uuid_00000000000c26e2
uuid_00000000000c26e0:
	push %RBP
	mov -360(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c26dd
	jmp uuid_00000000000c26df
uuid_00000000000c26dd:
	push %RBP
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	jmp uuid_00000000000c26da
	jmp uuid_00000000000c26dc
uuid_00000000000c26da:
	movb $1, -376(%rbp)
uuid_00000000000c26dc:
	mov -440(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000c26df:
	mov -392(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000c26e2:
	mov -384(%RBP),%RSP
	add $-464, %RSP
	mov -376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c26e4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c26e3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c26e6
uuid_00000000000c26e4:
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -432(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -408(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -400(%rbp), %r15
	movq %r15, -248(%rbp)
uuid_00000000000c26e6:
	mov -328(%RBP),%RSP
	add $-464, %RSP
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c26e7
uuid_00000000000c26e9:
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c26ec:
	mov -240(%RBP),%RSP
	add $-280, %RSP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
uuid_00000000000c2726:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2727
	jmp uuid_00000000000c2728
uuid_00000000000c2727:
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c26f3
	jmp uuid_00000000000c26f5
uuid_00000000000c26f3:
	push %RBP
	mov -400(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c26f0
	jmp uuid_00000000000c26f2
uuid_00000000000c26f0:
	push %RBP
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	jmp uuid_00000000000c26ed
	jmp uuid_00000000000c26ef
uuid_00000000000c26ed:
	movb $1, -416(%rbp)
uuid_00000000000c26ef:
	mov -480(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c26f2:
	mov -432(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c26f5:
	mov -424(%RBP),%RSP
	add $-504, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2723
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2722
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2725
uuid_00000000000c2723:
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	push %RBP
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c270e
	jmp uuid_00000000000c2710
uuid_00000000000c270e:
	push %RBP
	mov -552(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2705
	jmp uuid_00000000000c2707
uuid_00000000000c2705:
	push %RBP
	mov -616(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -688(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c26fc
	jmp uuid_00000000000c26fe
uuid_00000000000c26fc:
	push %RBP
	mov -680(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c26f9
	jmp uuid_00000000000c26fb
uuid_00000000000c26f9:
	push %RBP
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	jmp uuid_00000000000c26f6
	jmp uuid_00000000000c26f8
uuid_00000000000c26f6:
	movb $1, -696(%rbp)
uuid_00000000000c26f8:
	mov -760(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000c26fb:
	mov -712(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000c26fe:
	mov -704(%RBP),%RSP
	add $-784, %RSP
	mov -696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2702
	jmp uuid_00000000000c2704
uuid_00000000000c2702:
	push %RBP
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	jmp uuid_00000000000c26ff
	jmp uuid_00000000000c2701
uuid_00000000000c26ff:
	movb $1, -632(%rbp)
uuid_00000000000c2701:
	mov -792(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000c2704:
	mov -648(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000c2707:
	mov -640(%RBP),%RSP
	add $-816, %RSP
	mov -632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c270b
	jmp uuid_00000000000c270d
uuid_00000000000c270b:
	push %RBP
	mov -544(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -832(%rbp)
	pushq $uuid_00000000000c13d4
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2708
	jmp uuid_00000000000c270a
uuid_00000000000c2708:
	movb $1, -568(%rbp)
uuid_00000000000c270a:
	mov -824(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c270d:
	mov -584(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c2710:
	mov -576(%RBP),%RSP
	add $-832, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c271f
	push %RBP
	jmp uuid_00000000000c271c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c271b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c271e
uuid_00000000000c271c:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c271a
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c271e:
	mov -840(%RBP),%RSP
	add $-840, %RSP
	jmp uuid_00000000000c2721
uuid_00000000000c271f:
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function normalize : Arrow<TContext,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
	popq -912(%RBP)
	popq -904(%RBP)
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	movq -976(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -968(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -960(%rbp), %r15
	movq %r15, -16(%rbp)
#call function guess-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	mov %RBX, %RBP
	call guess_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -64(%RBP), %RAX
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2717
	jmp uuid_00000000000c2719
uuid_00000000000c2717:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2714
	jmp uuid_00000000000c2716
uuid_00000000000c2714:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c2711
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c2712
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1527
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c2713
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<SourceLocation,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2716:
	mov -992(%RBP),%RSP
	add $-992, %RSP
#call function try-specialize : Arrow<Cons<Cons<Cons<String,Type>,TContext>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	mov %RBX, %RBP
	call try_SB_specialize_CL_ArrowNilConsTypeConsTContextConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2719:
	mov -984(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c2721:
	mov -536(%RBP),%RSP
	add $-992, %RSP
	movq -472(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -288(%rbp)
uuid_00000000000c2725:
	mov -368(%RBP),%RSP
	add $-992, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $120, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2726
uuid_00000000000c2728:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	subq $56, %rsp
	pushq 56(%rsp)
	pushq 72(%rsp)
	pushq 88(%rsp)
	pushq 104(%rsp)
	pushq 120(%rsp)
	pushq 136(%rsp)
	pushq 152(%rsp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $152, %rsp
	ret
apply_CL_ArrowASTConsASTContext:
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c27a6
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov -480(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c27a3
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c272f
	jmp uuid_00000000000c2731
uuid_00000000000c272f:
	push %RBP
	jmp uuid_00000000000c272c
	jmp uuid_00000000000c272e
uuid_00000000000c272c:
	push %RBP
	jmp uuid_00000000000c2729
	jmp uuid_00000000000c272b
uuid_00000000000c2729:
	movb $1, -568(%rbp)
uuid_00000000000c272b:
	mov -592(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c272e:
	mov -584(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c2731:
	mov -576(%RBP),%RSP
	add $-592, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c27a0
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2735
	jmp uuid_00000000000c2737
uuid_00000000000c2735:
	push %RBP
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	jmp uuid_00000000000c2732
	jmp uuid_00000000000c2734
uuid_00000000000c2732:
	movb $1, -680(%rbp)
uuid_00000000000c2734:
	mov -696(%RBP),%RSP
	add $-720, %RSP
uuid_00000000000c2737:
	mov -688(%RBP),%RSP
	add $-720, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c279d
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -800(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c273e
	jmp uuid_00000000000c2740
uuid_00000000000c273e:
	push %RBP
	jmp uuid_00000000000c273b
	jmp uuid_00000000000c273d
uuid_00000000000c273b:
	push %RBP
	mov -736(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2738
	jmp uuid_00000000000c273a
uuid_00000000000c2738:
	movb $1, -808(%rbp)
uuid_00000000000c273a:
	mov -832(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000c273d:
	mov -824(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000c2740:
	mov -816(%RBP),%RSP
	add $-840, %RSP
	mov -808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c279a
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2760
	jmp uuid_00000000000c2762
uuid_00000000000c2760:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c275d
	jmp uuid_00000000000c275f
uuid_00000000000c275d:
	push %RBP
	mov -904(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c275a
	jmp uuid_00000000000c275c
uuid_00000000000c275a:
	movb $1, -928(%rbp)
uuid_00000000000c275c:
	mov -1024(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000c275f:
	mov -944(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000c2762:
	mov -936(%RBP),%RSP
	add $-1096, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2797
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1176(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c276c
	jmp uuid_00000000000c276e
uuid_00000000000c276c:
	push %RBP
	pushq -1152(%RBP)
	pushq -1160(%RBP)
	pushq -1168(%RBP)
	jmp uuid_00000000000c2769
	jmp uuid_00000000000c276b
uuid_00000000000c2769:
	push %RBP
	mov -1144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2766
	jmp uuid_00000000000c2768
uuid_00000000000c2766:
	push %RBP
	mov -1136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2763
	jmp uuid_00000000000c2765
uuid_00000000000c2763:
	movb $1, -1184(%rbp)
uuid_00000000000c2765:
	mov -1312(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000c2768:
	mov -1232(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000c276b:
	mov -1200(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000c276e:
	mov -1192(%RBP),%RSP
	add $-1384, %RSP
	mov -1184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2794
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1464(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2775
	jmp uuid_00000000000c2777
uuid_00000000000c2775:
	push %RBP
	mov -1456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2772
	jmp uuid_00000000000c2774
uuid_00000000000c2772:
	push %RBP
	mov -1448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c276f
	jmp uuid_00000000000c2771
uuid_00000000000c276f:
	movb $1, -1472(%rbp)
uuid_00000000000c2771:
	mov -1568(%RBP),%RSP
	add $-1640, %RSP
uuid_00000000000c2774:
	mov -1488(%RBP),%RSP
	add $-1640, %RSP
uuid_00000000000c2777:
	mov -1480(%RBP),%RSP
	add $-1640, %RSP
	mov -1472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2791
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1720(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c277e
	jmp uuid_00000000000c2780
uuid_00000000000c277e:
	push %RBP
	mov -1712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c277b
	jmp uuid_00000000000c277d
uuid_00000000000c277b:
	push %RBP
	mov -1704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2778
	jmp uuid_00000000000c277a
uuid_00000000000c2778:
	movb $1, -1728(%rbp)
uuid_00000000000c277a:
	mov -1824(%RBP),%RSP
	add $-1896, %RSP
uuid_00000000000c277d:
	mov -1744(%RBP),%RSP
	add $-1896, %RSP
uuid_00000000000c2780:
	mov -1736(%RBP),%RSP
	add $-1896, %RSP
	mov -1728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c278e
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1976(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2787
	jmp uuid_00000000000c2789
uuid_00000000000c2787:
	push %RBP
	mov -1968(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2784
	jmp uuid_00000000000c2786
uuid_00000000000c2784:
	push %RBP
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	jmp uuid_00000000000c2781
	jmp uuid_00000000000c2783
uuid_00000000000c2781:
	movb $1, -1984(%rbp)
uuid_00000000000c2783:
	mov -2080(%RBP),%RSP
	add $-2136, %RSP
uuid_00000000000c2786:
	mov -2000(%RBP),%RSP
	add $-2136, %RSP
uuid_00000000000c2789:
	mov -1992(%RBP),%RSP
	add $-2136, %RSP
	mov -1984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c278b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c278a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c278d
uuid_00000000000c278b:
#call function substitute : Arrow<Cons<Context,Token>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTokenConsTokenContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -184(%RSP)
	push -184(%RSP)
	push -184(%RSP)
	push -184(%RSP)
	push -184(%RSP)
	push -184(%RSP)
	push -184(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c278d:
	mov -1904(%RBP),%RSP
	add $-2136, %RSP
	jmp uuid_00000000000c2790
uuid_00000000000c278e:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c2790:
	mov -1648(%RBP),%RSP
	add $-1896, %RSP
	jmp uuid_00000000000c2793
uuid_00000000000c2791:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c2793:
	mov -1392(%RBP),%RSP
	add $-1640, %RSP
	jmp uuid_00000000000c2796
uuid_00000000000c2794:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq $5
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c2796:
	mov -1104(%RBP),%RSP
	add $-1384, %RSP
	jmp uuid_00000000000c2799
uuid_00000000000c2797:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c2799:
	mov -848(%RBP),%RSP
	add $-1096, %RSP
	jmp uuid_00000000000c279c
uuid_00000000000c279a:
uuid_00000000000c2757:
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2758
	jmp uuid_00000000000c2759
uuid_00000000000c2758:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq $0
	push %RBP
	mov -1040(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c274a
	jmp uuid_00000000000c274c
uuid_00000000000c274a:
	push %RBP
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	jmp uuid_00000000000c2747
	jmp uuid_00000000000c2749
uuid_00000000000c2747:
	push %RBP
	mov -960(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2744
	jmp uuid_00000000000c2746
uuid_00000000000c2744:
	push %RBP
	mov -952(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2741
	jmp uuid_00000000000c2743
uuid_00000000000c2741:
	movb $1, -1048(%rbp)
uuid_00000000000c2743:
	mov -1160(%RBP),%RSP
	add $-1256, %RSP
uuid_00000000000c2746:
	mov -1144(%RBP),%RSP
	add $-1256, %RSP
uuid_00000000000c2749:
	mov -1064(%RBP),%RSP
	add $-1256, %RSP
uuid_00000000000c274c:
	mov -1056(%RBP),%RSP
	add $-1256, %RSP
	mov -1048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2754
	push %RBP
	jmp uuid_00000000000c2751
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2750
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2753
uuid_00000000000c2751:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2753:
	mov -1264(%RBP),%RSP
	add $-1264, %RSP
	jmp uuid_00000000000c2756
uuid_00000000000c2754:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1152(%rbp)
	pushq -840(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c274d
	movq -1256(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c274f
uuid_00000000000c274d:
	movq -1136(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -184(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c274f:
	mov -1264(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c2756:
	mov -944(%RBP),%RSP
	add $-1264, %RSP
	add $96, %rsp
	add $96, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $96, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2757
uuid_00000000000c2759:
uuid_00000000000c279c:
	mov -728(%RBP),%RSP
	add $-840, %RSP
	jmp uuid_00000000000c279f
uuid_00000000000c279d:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<Context,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	pushq $4
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c279f:
	mov -600(%RBP),%RSP
	add $-720, %RSP
	jmp uuid_00000000000c27a2
uuid_00000000000c27a0:
uuid_00000000000c27a2:
	mov -488(%RBP),%RSP
	add $-592, %RSP
	jmp uuid_00000000000c27a5
uuid_00000000000c27a3:
uuid_00000000000c27a5:
	mov -408(%RBP),%RSP
	add $-480, %RSP
	jmp uuid_00000000000c27a8
uuid_00000000000c27a6:
uuid_00000000000c27a8:
	mov -328(%RBP),%RSP
	add $-400, %RSP
	subq $72, %rsp
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $176, %rsp
	ret
apply_SB_and_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString:
#call function apply : Arrow<Cons<Cons<Cons<Cons<String,Type>,Type>,U64>,AST>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $1
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowTupleTypeTypeConsASTConsU64ConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	subq $24, %rsp
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
apply_SB_plural_CL_ArrowListTypeConsASTConsTypeConsTypeString:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c27b1
	jmp uuid_00000000000c27b3
uuid_00000000000c27b1:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c27ae
	jmp uuid_00000000000c27b0
uuid_00000000000c27ae:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c27ab
	jmp uuid_00000000000c27ad
uuid_00000000000c27ab:
	movb $1, -240(%rbp)
uuid_00000000000c27ad:
	mov -288(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c27b0:
	mov -256(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c27b3:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c27d9
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c27cc
	jmp uuid_00000000000c27ce
uuid_00000000000c27cc:
	push %RBP
	mov -336(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c27c3
	jmp uuid_00000000000c27c5
uuid_00000000000c27c3:
	push %RBP
	mov -400(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c27ba
	jmp uuid_00000000000c27bc
uuid_00000000000c27ba:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c27b7
	jmp uuid_00000000000c27b9
uuid_00000000000c27b7:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000c27b4
	jmp uuid_00000000000c27b6
uuid_00000000000c27b4:
	movb $1, -480(%rbp)
uuid_00000000000c27b6:
	mov -544(%RBP),%RSP
	add $-568, %RSP
uuid_00000000000c27b9:
	mov -496(%RBP),%RSP
	add $-568, %RSP
uuid_00000000000c27bc:
	mov -488(%RBP),%RSP
	add $-568, %RSP
	mov -480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c27c0
	jmp uuid_00000000000c27c2
uuid_00000000000c27c0:
	push %RBP
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	jmp uuid_00000000000c27bd
	jmp uuid_00000000000c27bf
uuid_00000000000c27bd:
	movb $1, -416(%rbp)
uuid_00000000000c27bf:
	mov -576(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000c27c2:
	mov -432(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000c27c5:
	mov -424(%RBP),%RSP
	add $-600, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c27c9
	jmp uuid_00000000000c27cb
uuid_00000000000c27c9:
	push %RBP
	mov -328(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -616(%rbp)
	pushq $uuid_00000000000c13d4
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c27c6
	jmp uuid_00000000000c27c8
uuid_00000000000c27c6:
	movb $1, -352(%rbp)
uuid_00000000000c27c8:
	mov -608(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c27cb:
	mov -368(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c27ce:
	mov -360(%RBP),%RSP
	add $-616, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c27d6
	push %RBP
	jmp uuid_00000000000c27d3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c27d2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c27d5
uuid_00000000000c27d3:
uuid_00000000000c27d5:
	mov -624(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000c27d8
uuid_00000000000c27d6:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c27cf
	jmp uuid_00000000000c27d1
uuid_00000000000c27cf:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
uuid_00000000000c27d1:
	mov -624(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000c27d8:
	mov -320(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000c27db
uuid_00000000000c27d9:
#call function + : Arrow<Cons<List<Type>,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply-plural : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call apply_SB_plural_CL_ArrowListTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
#call function apply-plural : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call apply_SB_plural_CL_ArrowListTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowListTypeConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
uuid_00000000000c27db:
	mov -208(%RBP),%RSP
	add $-312, %RSP
	subq $40, %rsp
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
reduce_SB_plural_CL_ArrowListTypeListType:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
uuid_00000000000c27f0:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c27f1
	jmp uuid_00000000000c27f2
uuid_00000000000c27f1:
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $0
	push %RBP
	mov -216(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c27e6
	jmp uuid_00000000000c27e8
uuid_00000000000c27e6:
	push %RBP
	mov -208(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c27e3
	jmp uuid_00000000000c27e5
uuid_00000000000c27e3:
	push %RBP
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	jmp uuid_00000000000c27e0
	jmp uuid_00000000000c27e2
uuid_00000000000c27e0:
	movb $1, -224(%rbp)
uuid_00000000000c27e2:
	mov -288(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c27e5:
	mov -240(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c27e8:
	mov -232(%RBP),%RSP
	add $-312, %RSP
	mov -224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c27ed
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c27ec
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c27ef
uuid_00000000000c27ed:
	push %RBP
#call function is-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call is_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c27e9
	jmp uuid_00000000000c27eb
uuid_00000000000c27e9:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c27eb:
	mov -320(%RBP),%RSP
	add $-320, %RSP
	movq -280(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -264(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -256(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -248(%rbp), %r15
	movq %r15, -96(%rbp)
uuid_00000000000c27ef:
	mov -176(%RBP),%RSP
	add $-320, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c27f0
uuid_00000000000c27f2:
	push %RBP
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c27f3
	jmp uuid_00000000000c27f5
uuid_00000000000c27f3:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c27f5:
	mov -136(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000c281c:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c281d
	jmp uuid_00000000000c281e
uuid_00000000000c281d:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c27fc
	jmp uuid_00000000000c27fe
uuid_00000000000c27fc:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c27f9
	jmp uuid_00000000000c27fb
uuid_00000000000c27f9:
	push %RBP
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	jmp uuid_00000000000c27f6
	jmp uuid_00000000000c27f8
uuid_00000000000c27f6:
	movb $1, -232(%rbp)
uuid_00000000000c27f8:
	mov -296(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c27fb:
	mov -248(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c27fe:
	mov -240(%RBP),%RSP
	add $-320, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2819
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2818
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c281b
uuid_00000000000c2819:
	movq -288(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -264(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -256(%rbp), %r15
	movq %r15, -8(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
uuid_00000000000c2812:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2813
	jmp uuid_00000000000c2814
uuid_00000000000c2813:
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	push %RBP
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2805
	jmp uuid_00000000000c2807
uuid_00000000000c2805:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2802
	jmp uuid_00000000000c2804
uuid_00000000000c2802:
	push %RBP
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	jmp uuid_00000000000c27ff
	jmp uuid_00000000000c2801
uuid_00000000000c27ff:
	movb $1, -456(%rbp)
uuid_00000000000c2801:
	mov -520(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000c2804:
	mov -472(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000c2807:
	mov -464(%RBP),%RSP
	add $-544, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c280f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c280e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2811
uuid_00000000000c280f:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c280b
	jmp uuid_00000000000c280d
uuid_00000000000c280b:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2808
	jmp uuid_00000000000c280a
uuid_00000000000c2808:
	pushq $0
	pushq $0
	pushq $3
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c280a:
	mov -560(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c280d:
	mov -552(%RBP),%RSP
	add $-560, %RSP
	movq -512(%rbp), %r15
	movq %r15, -360(%rbp)
	movq -504(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -496(%rbp), %r15
	movq %r15, -344(%rbp)
	movq -488(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -328(%rbp)
uuid_00000000000c2811:
	mov -408(%RBP),%RSP
	add $-560, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2812
uuid_00000000000c2814:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2815
	jmp uuid_00000000000c2817
uuid_00000000000c2815:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c2817:
	mov -368(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c281b:
	mov -184(%RBP),%RSP
	add $-368, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $40, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c281c
uuid_00000000000c281e:
	movq -88(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -80(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -72(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -64(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -56(%rbp), %r15
	movq %r15, -8(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c2845:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2846
	jmp uuid_00000000000c2847
uuid_00000000000c2846:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2825
	jmp uuid_00000000000c2827
uuid_00000000000c2825:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2822
	jmp uuid_00000000000c2824
uuid_00000000000c2822:
	push %RBP
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	jmp uuid_00000000000c281f
	jmp uuid_00000000000c2821
uuid_00000000000c281f:
	movb $1, -232(%rbp)
uuid_00000000000c2821:
	mov -296(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c2824:
	mov -248(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c2827:
	mov -240(%RBP),%RSP
	add $-320, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2842
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2841
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2844
uuid_00000000000c2842:
	movq -288(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -264(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -256(%rbp), %r15
	movq %r15, -8(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
uuid_00000000000c283b:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c283c
	jmp uuid_00000000000c283d
uuid_00000000000c283c:
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	push %RBP
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c282e
	jmp uuid_00000000000c2830
uuid_00000000000c282e:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c282b
	jmp uuid_00000000000c282d
uuid_00000000000c282b:
	push %RBP
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	jmp uuid_00000000000c2828
	jmp uuid_00000000000c282a
uuid_00000000000c2828:
	movb $1, -456(%rbp)
uuid_00000000000c282a:
	mov -520(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000c282d:
	mov -472(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000c2830:
	mov -464(%RBP),%RSP
	add $-544, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2838
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2837
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c283a
uuid_00000000000c2838:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2834
	jmp uuid_00000000000c2836
uuid_00000000000c2834:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2831
	jmp uuid_00000000000c2833
uuid_00000000000c2831:
	pushq $0
	pushq $0
	pushq $3
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c2833:
	mov -560(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c2836:
	mov -552(%RBP),%RSP
	add $-560, %RSP
	movq -512(%rbp), %r15
	movq %r15, -360(%rbp)
	movq -504(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -496(%rbp), %r15
	movq %r15, -344(%rbp)
	movq -488(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -328(%rbp)
uuid_00000000000c283a:
	mov -408(%RBP),%RSP
	add $-560, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c283b
uuid_00000000000c283d:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c283e
	jmp uuid_00000000000c2840
uuid_00000000000c283e:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c2840:
	mov -368(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c2844:
	mov -184(%RBP),%RSP
	add $-368, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $40, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2845
uuid_00000000000c2847:
	subq $40, %rsp
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
apply_SB_or_SB_cons_SB_and_SB_specialize_CL_ArrowTupleTypeTypeConsASTConsTypeConsTypeString:
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c284b
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2848
	jmp uuid_00000000000c284a
uuid_00000000000c2848:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1157
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $0
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
uuid_00000000000c284a:
	mov -208(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000c284d
uuid_00000000000c284b:
#call function apply : Arrow<Cons<Cons<Cons<Cons<String,Type>,Type>,U64>,AST>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $1
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowTupleTypeTypeConsASTConsU64ConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
uuid_00000000000c284d:
	mov -200(%RBP),%RSP
	add $-200, %RSP
	subq $56, %rsp
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
try_SB_specialize_CL_ArrowNilConsTypeConsTContextConsTypeString:
	mov $global_SB_type_SB_context_CL_TContextTContextCaseNumber2, %r15
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000c2890:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2891
	jmp uuid_00000000000c2892
uuid_00000000000c2891:
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c288d
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq $0
	push %RBP
	mov -680(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c285a
	jmp uuid_00000000000c285c
uuid_00000000000c285a:
	push %RBP
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	jmp uuid_00000000000c2857
	jmp uuid_00000000000c2859
uuid_00000000000c2857:
	push %RBP
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	jmp uuid_00000000000c2854
	jmp uuid_00000000000c2856
uuid_00000000000c2854:
	push %RBP
	mov -576(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2851
	jmp uuid_00000000000c2853
uuid_00000000000c2851:
	push %RBP
	mov -568(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c284e
	jmp uuid_00000000000c2850
uuid_00000000000c284e:
	movb $1, -688(%rbp)
uuid_00000000000c2850:
	mov -832(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c2853:
	mov -816(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c2856:
	mov -784(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c2859:
	mov -704(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c285c:
	mov -696(%RBP),%RSP
	add $-952, %RSP
	mov -688(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c288a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2889
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c288c
uuid_00000000000c288a:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -824(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2886
	jmp uuid_00000000000c2888
uuid_00000000000c2886:
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c285d
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -984(%RBP)
	popq -976(%RBP)
	popq -968(%RBP)
	jmp uuid_00000000000c285f
uuid_00000000000c285d:
uuid_00000000000c285f:
	mov -992(%RBP),%RSP
	add $-992, %RSP
	push %RBP
#call function is-special : Arrow<Cons<String,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	mov %RBX, %RBP
	call is_SB_special_CL_ArrowU64ConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2883
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq $uuid_00000000000c13d4
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2880
	jmp uuid_00000000000c2882
uuid_00000000000c2880:
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	push %RBP
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq $0
	push %RBP
	mov -1160(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2872
	jmp uuid_00000000000c2874
uuid_00000000000c2872:
	push %RBP
	mov -1152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1256(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2869
	jmp uuid_00000000000c286b
uuid_00000000000c2869:
	push %RBP
	jmp uuid_00000000000c2866
	jmp uuid_00000000000c2868
uuid_00000000000c2866:
	push %RBP
	jmp uuid_00000000000c2863
	jmp uuid_00000000000c2865
uuid_00000000000c2863:
	push %RBP
	jmp uuid_00000000000c2860
	jmp uuid_00000000000c2862
uuid_00000000000c2860:
	movb $1, -1264(%rbp)
uuid_00000000000c2862:
	mov -1296(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000c2865:
	mov -1288(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000c2868:
	mov -1280(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000c286b:
	mov -1272(%RBP),%RSP
	add $-1296, %RSP
	mov -1264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c286f
	jmp uuid_00000000000c2871
uuid_00000000000c286f:
	push %RBP
	jmp uuid_00000000000c286c
	jmp uuid_00000000000c286e
uuid_00000000000c286c:
	movb $1, -1168(%rbp)
uuid_00000000000c286e:
	mov -1304(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c2871:
	mov -1184(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c2874:
	mov -1176(%RBP),%RSP
	add $-1304, %RSP
	mov -1168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c287d
	push %RBP
	jmp uuid_00000000000c287a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2879
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c287c
uuid_00000000000c287a:
uuid_00000000000c287c:
	mov -1312(%RBP),%RSP
	add $-1312, %RSP
	jmp uuid_00000000000c287f
uuid_00000000000c287d:
#call function cons : Arrow<Cons<StackToSpecialize,List<StackToSpecialize>>,List<StackToSpecialize>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq $0
	mov $stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecializeCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call cons_CL_ArrowListStackToSpecializeConsListStackToSpecializeStackToSpecialize
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecializeCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
uuid_00000000000c287f:
	mov -1088(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c2882:
	mov -1008(%RBP),%RSP
	add $-1304, %RSP
	jmp uuid_00000000000c2885
uuid_00000000000c2883:
uuid_00000000000c2885:
	mov -1000(%RBP),%RSP
	add $-1000, %RSP
uuid_00000000000c2888:
	mov -960(%RBP),%RSP
	add $-1000, %RSP
	movq -952(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -944(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -936(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -928(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -920(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -912(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -904(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -896(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -888(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -880(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -872(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -864(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -856(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -848(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -840(%rbp), %r15
	movq %r15, -192(%rbp)
uuid_00000000000c288c:
	mov -560(%RBP),%RSP
	add $-1000, %RSP
	jmp uuid_00000000000c288f
uuid_00000000000c288d:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c288f:
	mov -432(%RBP),%RSP
	add $-552, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000c2890
uuid_00000000000c2892:
	mov %rbp, %rsp
	sub $184, %rsp
	ret
unify_SB_hint_CL_ArrowTypeConsTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c28ab
	jmp uuid_00000000000c28ad
uuid_00000000000c28ab:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2899
	jmp uuid_00000000000c289b
uuid_00000000000c2899:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2896
	jmp uuid_00000000000c2898
uuid_00000000000c2896:
	push %RBP
	mov -208(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2893
	jmp uuid_00000000000c2895
uuid_00000000000c2893:
	movb $1, -232(%rbp)
uuid_00000000000c2895:
	mov -296(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000c2898:
	mov -248(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000c289b:
	mov -240(%RBP),%RSP
	add $-304, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c28a8
	jmp uuid_00000000000c28aa
uuid_00000000000c28a8:
	push %RBP
	pushq -128(%RBP)
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq $0
	push %RBP
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c28a2
	jmp uuid_00000000000c28a4
uuid_00000000000c28a2:
	push %RBP
	mov -328(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c289f
	jmp uuid_00000000000c28a1
uuid_00000000000c289f:
	push %RBP
	mov -320(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c289c
	jmp uuid_00000000000c289e
uuid_00000000000c289c:
	movb $1, -344(%rbp)
uuid_00000000000c289e:
	mov -408(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c28a1:
	mov -360(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c28a4:
	mov -352(%RBP),%RSP
	add $-416, %RSP
	mov -344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c28a5
	jmp uuid_00000000000c28a7
uuid_00000000000c28a5:
	movb $1, -184(%rbp)
uuid_00000000000c28a7:
	mov -312(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c28aa:
	mov -200(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c28ad:
	mov -192(%RBP),%RSP
	add $-416, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c28ca
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	push %RBP
	mov -480(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c28c0
	jmp uuid_00000000000c28c2
uuid_00000000000c28c0:
	push %RBP
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq $0
	push %RBP
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c28b7
	jmp uuid_00000000000c28b9
uuid_00000000000c28b7:
	push %RBP
	mov -520(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c28b4
	jmp uuid_00000000000c28b6
uuid_00000000000c28b4:
	push %RBP
	mov -512(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c28b1
	jmp uuid_00000000000c28b3
uuid_00000000000c28b1:
	movb $1, -536(%rbp)
uuid_00000000000c28b3:
	mov -584(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000c28b6:
	mov -552(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000c28b9:
	mov -544(%RBP),%RSP
	add $-608, %RSP
	mov -536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c28bd
	jmp uuid_00000000000c28bf
uuid_00000000000c28bd:
	push %RBP
	jmp uuid_00000000000c28ba
	jmp uuid_00000000000c28bc
uuid_00000000000c28ba:
	movb $1, -488(%rbp)
uuid_00000000000c28bc:
	mov -616(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c28bf:
	mov -504(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c28c2:
	mov -496(%RBP),%RSP
	add $-616, %RSP
	mov -488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c28c7
	push %RBP
	jmp uuid_00000000000c28c4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c28c3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c28c6
uuid_00000000000c28c4:
uuid_00000000000c28c6:
	mov -624(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000c28c9
uuid_00000000000c28c7:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-hint : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	mov %RBX, %RBP
	call unify_SB_hint_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-hint : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	mov %RBX, %RBP
	call unify_SB_hint_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
uuid_00000000000c28c9:
	mov -424(%RBP),%RSP
	add $-616, %RSP
	jmp uuid_00000000000c28cc
uuid_00000000000c28ca:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -416(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c28ae
	pushq -304(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-hint : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call unify_SB_hint_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	jmp uuid_00000000000c28b0
uuid_00000000000c28ae:
	movq -24(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -32(%rbp)
uuid_00000000000c28b0:
	mov -424(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c28cc:
	mov -120(%RBP),%RSP
	add $-424, %RSP
	subq $24, %rsp
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
unify_SB_hint_CL_ArrowListTypeConsListTypeType:
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c28df
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c28d5
	jmp uuid_00000000000c28d7
uuid_00000000000c28d5:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c28d2
	jmp uuid_00000000000c28d4
uuid_00000000000c28d2:
	push %RBP
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	jmp uuid_00000000000c28cf
	jmp uuid_00000000000c28d1
uuid_00000000000c28cf:
	movb $1, -216(%rbp)
uuid_00000000000c28d1:
	mov -280(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000c28d4:
	mov -232(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000c28d7:
	mov -224(%RBP),%RSP
	add $-304, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c28dc
	push %RBP
	jmp uuid_00000000000c28d9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c28d8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c28db
uuid_00000000000c28d9:
uuid_00000000000c28db:
	mov -312(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000c28de
uuid_00000000000c28dc:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-hint : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call unify_SB_hint_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function unify-hint : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call unify_SB_hint_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
uuid_00000000000c28de:
	mov -168(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000c28e1
uuid_00000000000c28df:
uuid_00000000000c28e1:
	mov -120(%RBP),%RSP
	add $-160, %RSP
	subq $40, %rsp
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $72, %rsp
	ret
infer_SB_type_SB_definition_CL_ArrowU64ConsU64ConsASTType:
#call function mark-class-exists : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function tag-of : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call tag_SB_of_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call mark_SB_class_SB_exists_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c28fb
	jmp uuid_00000000000c28fd
uuid_00000000000c28fb:
	push %RBP
	mov -264(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c28f8
	jmp uuid_00000000000c28fa
uuid_00000000000c28f8:
	push %RBP
	mov -256(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c28f2
	jmp uuid_00000000000c28f4
uuid_00000000000c28f2:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c28e9
	jmp uuid_00000000000c28eb
uuid_00000000000c28e9:
	push %RBP
	jmp uuid_00000000000c28e6
	jmp uuid_00000000000c28e8
uuid_00000000000c28e6:
	push %RBP
	mov -480(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -584(%rbp)
	pushq $uuid_00000000000c28e2
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c28e3
	jmp uuid_00000000000c28e5
uuid_00000000000c28e3:
	movb $1, -552(%rbp)
uuid_00000000000c28e5:
	mov -576(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c28e8:
	mov -568(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c28eb:
	mov -560(%RBP),%RSP
	add $-584, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c28ef
	jmp uuid_00000000000c28f1
uuid_00000000000c28ef:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c28ec
	jmp uuid_00000000000c28ee
uuid_00000000000c28ec:
	movb $1, -456(%rbp)
uuid_00000000000c28ee:
	mov -592(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c28f1:
	mov -472(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c28f4:
	mov -464(%RBP),%RSP
	add $-664, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c28f5
	jmp uuid_00000000000c28f7
uuid_00000000000c28f5:
	movb $1, -280(%rbp)
uuid_00000000000c28f7:
	mov -376(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c28fa:
	mov -296(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c28fd:
	mov -288(%RBP),%RSP
	add $-664, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c293a
	push %RBP
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	jmp uuid_00000000000c2937
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2936
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2939
uuid_00000000000c2937:
#call function infer-type-constructor : Arrow<Cons<Type,AST>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call infer_SB_type_SB_constructor_CL_ArrowU64ConsASTType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -120(%rbp)
	push %RBP
	mov -104(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2933
	jmp uuid_00000000000c2935
uuid_00000000000c2933:
	pushq $uuid_00000000000c0dfc
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	push %RBP
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq $0
	push %RBP
	mov -912(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2904
	jmp uuid_00000000000c2906
uuid_00000000000c2904:
	push %RBP
	jmp uuid_00000000000c2901
	jmp uuid_00000000000c2903
uuid_00000000000c2901:
	push %RBP
	mov -848(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c28fe
	jmp uuid_00000000000c2900
uuid_00000000000c28fe:
	movb $1, -920(%rbp)
uuid_00000000000c2900:
	mov -944(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c2903:
	mov -936(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c2906:
	mov -928(%RBP),%RSP
	add $-952, %RSP
	mov -920(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2920
	push %RBP
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq $0
	push %RBP
	mov -1032(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2916
	jmp uuid_00000000000c2918
uuid_00000000000c2916:
	push %RBP
	mov -1024(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2913
	jmp uuid_00000000000c2915
uuid_00000000000c2913:
	push %RBP
	mov -1016(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1208(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c290d
	jmp uuid_00000000000c290f
uuid_00000000000c290d:
	push %RBP
	jmp uuid_00000000000c290a
	jmp uuid_00000000000c290c
uuid_00000000000c290a:
	push %RBP
	mov -1144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2907
	jmp uuid_00000000000c2909
uuid_00000000000c2907:
	movb $1, -1216(%rbp)
uuid_00000000000c2909:
	mov -1240(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c290c:
	mov -1232(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c290f:
	mov -1224(%RBP),%RSP
	add $-1248, %RSP
	mov -1216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2910
	jmp uuid_00000000000c2912
uuid_00000000000c2910:
	movb $1, -1040(%rbp)
uuid_00000000000c2912:
	mov -1136(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c2915:
	mov -1056(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c2918:
	mov -1048(%RBP),%RSP
	add $-1248, %RSP
	mov -1040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c291d
	push %RBP
	jmp uuid_00000000000c291a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2919
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c291c
uuid_00000000000c291a:
uuid_00000000000c291c:
	mov -1256(%RBP),%RSP
	add $-1256, %RSP
	jmp uuid_00000000000c291f
uuid_00000000000c291d:
	movq -1248(%rbp), %r15
	movq %r15, -760(%rbp)
	mov -1248(%rbp), %r15
	mov %r15, -760(%rbp)
uuid_00000000000c291f:
	mov -960(%RBP),%RSP
	add $-1248, %RSP
	jmp uuid_00000000000c2922
uuid_00000000000c2920:
	movq -952(%rbp), %r15
	movq %r15, -760(%rbp)
	mov -952(%rbp), %r15
	mov %r15, -760(%rbp)
uuid_00000000000c2922:
	mov -840(%RBP),%RSP
	add $-952, %RSP
	push %RBP
	mov -760(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c2930
	jmp uuid_00000000000c2932
uuid_00000000000c2930:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq $0
	push %RBP
	mov -1016(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2929
	jmp uuid_00000000000c292b
uuid_00000000000c2929:
	push %RBP
	jmp uuid_00000000000c2926
	jmp uuid_00000000000c2928
uuid_00000000000c2926:
	push %RBP
	mov -1000(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2923
	jmp uuid_00000000000c2925
uuid_00000000000c2923:
	movb $1, -1024(%rbp)
uuid_00000000000c2925:
	mov -1048(%RBP),%RSP
	add $-1056, %RSP
uuid_00000000000c2928:
	mov -1040(%RBP),%RSP
	add $-1056, %RSP
uuid_00000000000c292b:
	mov -1032(%RBP),%RSP
	add $-1056, %RSP
	mov -1024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c292d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c292c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c292f
uuid_00000000000c292d:
#call function has-only-child : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1056(%rbp)
	pushq -760(%rbp)
	mov %RBX, %RBP
	call has_SB_only_SB_child_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c292f:
	mov -992(%RBP),%RSP
	add $-1056, %RSP
uuid_00000000000c2932:
	mov -960(%RBP),%RSP
	add $-1056, %RSP
uuid_00000000000c2935:
	mov -752(%RBP),%RSP
	add $-1056, %RSP
uuid_00000000000c2939:
	mov -672(%RBP),%RSP
	add $-1056, %RSP
	jmp uuid_00000000000c293c
uuid_00000000000c293a:
#call function infer-type-definition : Arrow<Cons<Cons<Type,AST>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov -104(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call infer_SB_type_SB_definition_CL_ArrowU64ConsU64ConsASTType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function infer-type-constructor : Arrow<Cons<Type,AST>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call infer_SB_type_SB_constructor_CL_ArrowU64ConsASTType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq -680(%rbp)
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -120(%rbp)
uuid_00000000000c293c:
	mov -200(%RBP),%RSP
	add $-680, %RSP
	mov -120(%rbp), %RAX
	mov %rbp, %rsp
	sub $112, %rsp
	ret
arity_CL_ArrowU64ListType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c294c
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2945
	jmp uuid_00000000000c2947
uuid_00000000000c2945:
	push %RBP
	mov -184(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2942
	jmp uuid_00000000000c2944
uuid_00000000000c2942:
	push %RBP
	jmp uuid_00000000000c293f
	jmp uuid_00000000000c2941
uuid_00000000000c293f:
	movb $1, -200(%rbp)
uuid_00000000000c2941:
	mov -264(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c2944:
	mov -216(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c2947:
	mov -208(%RBP),%RSP
	add $-264, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2949
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2948
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c294b
uuid_00000000000c2949:
#call function arity : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call arity_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
uuid_00000000000c294b:
	mov -152(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000c294e
uuid_00000000000c294c:
uuid_00000000000c294e:
	mov -104(%RBP),%RSP
	add $-144, %RSP
	mov -56(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
arity_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2955
	jmp uuid_00000000000c2957
uuid_00000000000c2955:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2952
	jmp uuid_00000000000c2954
uuid_00000000000c2952:
	push %RBP
	jmp uuid_00000000000c294f
	jmp uuid_00000000000c2951
uuid_00000000000c294f:
	movb $1, -104(%rbp)
uuid_00000000000c2951:
	mov -168(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c2954:
	mov -120(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c2957:
	mov -112(%RBP),%RSP
	add $-168, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c295c
	push %RBP
	jmp uuid_00000000000c2959
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2958
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c295b
uuid_00000000000c2959:
uuid_00000000000c295b:
	mov -176(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000c295e
uuid_00000000000c295c:
#call function arity : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call arity_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000c295e:
	mov -72(%RBP),%RSP
	add $-168, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
cons_SB_arity_CL_ArrowU64Type:
	pushq $1
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2977
	jmp uuid_00000000000c2979
uuid_00000000000c2977:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c296e
	jmp uuid_00000000000c2970
uuid_00000000000c296e:
	push %RBP
	mov -152(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2965
	jmp uuid_00000000000c2967
uuid_00000000000c2965:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -288(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2962
	jmp uuid_00000000000c2964
uuid_00000000000c2962:
	push %RBP
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	jmp uuid_00000000000c295f
	jmp uuid_00000000000c2961
uuid_00000000000c295f:
	movb $1, -232(%rbp)
uuid_00000000000c2961:
	mov -296(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c2964:
	mov -248(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c2967:
	mov -240(%RBP),%RSP
	add $-320, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c296b
	jmp uuid_00000000000c296d
uuid_00000000000c296b:
	push %RBP
	pushq -128(%RBP)
	pushq -136(%RBP)
	pushq -144(%RBP)
	jmp uuid_00000000000c2968
	jmp uuid_00000000000c296a
uuid_00000000000c2968:
	movb $1, -168(%rbp)
uuid_00000000000c296a:
	mov -328(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c296d:
	mov -184(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c2970:
	mov -176(%RBP),%RSP
	add $-352, %RSP
	mov -168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2974
	jmp uuid_00000000000c2976
uuid_00000000000c2974:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -368(%rbp)
	pushq $uuid_00000000000c1157
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2971
	jmp uuid_00000000000c2973
uuid_00000000000c2971:
	movb $1, -104(%rbp)
uuid_00000000000c2973:
	mov -360(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c2976:
	mov -120(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c2979:
	mov -112(%RBP),%RSP
	add $-368, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c297e
	push %RBP
	jmp uuid_00000000000c297b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c297a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c297d
uuid_00000000000c297b:
uuid_00000000000c297d:
	mov -376(%RBP),%RSP
	add $-376, %RSP
	jmp uuid_00000000000c2980
uuid_00000000000c297e:
#call function cons-arity : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call cons_SB_arity_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c2980:
	mov -72(%RBP),%RSP
	add $-368, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
parse_SB_field_SB_of_CL_ArrowTupleTypeStringString:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $uuid_00000000000c0dfc
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000c2984:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	setne %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2985
	jmp uuid_00000000000c2986
uuid_00000000000c2985:
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2981
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c2983
uuid_00000000000c2981:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -48(%rbp)
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	inc %RAX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	movq $uuid_00000000000c0dfc, -8(%rbp)
uuid_00000000000c2983:
	mov -80(%RBP),%RSP
	add $-80, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2984
uuid_00000000000c2986:
	pushq -48(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	subq $40, %rsp
	pushq 40(%rsp)
	pushq 56(%rsp)
	pushq 72(%rsp)
	pushq 88(%rsp)
	pushq 104(%rsp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
implicit_SB_tail_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c299f
	jmp uuid_00000000000c29a1
uuid_00000000000c299f:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -152(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2996
	jmp uuid_00000000000c2998
uuid_00000000000c2996:
	push %RBP
	mov -144(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -216(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c298d
	jmp uuid_00000000000c298f
uuid_00000000000c298d:
	push %RBP
	mov -208(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c298a
	jmp uuid_00000000000c298c
uuid_00000000000c298a:
	push %RBP
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	jmp uuid_00000000000c2987
	jmp uuid_00000000000c2989
uuid_00000000000c2987:
	movb $1, -224(%rbp)
uuid_00000000000c2989:
	mov -288(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c298c:
	mov -240(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c298f:
	mov -232(%RBP),%RSP
	add $-312, %RSP
	mov -224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2993
	jmp uuid_00000000000c2995
uuid_00000000000c2993:
	push %RBP
	pushq -120(%RBP)
	pushq -128(%RBP)
	pushq -136(%RBP)
	jmp uuid_00000000000c2990
	jmp uuid_00000000000c2992
uuid_00000000000c2990:
	movb $1, -160(%rbp)
uuid_00000000000c2992:
	mov -320(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000c2995:
	mov -176(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000c2998:
	mov -168(%RBP),%RSP
	add $-344, %RSP
	mov -160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c299c
	jmp uuid_00000000000c299e
uuid_00000000000c299c:
	push %RBP
	mov -72(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq $uuid_00000000000c1157
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2999
	jmp uuid_00000000000c299b
uuid_00000000000c2999:
	movb $1, -96(%rbp)
uuid_00000000000c299b:
	mov -352(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000c299e:
	mov -112(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000c29a1:
	mov -104(%RBP),%RSP
	add $-360, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c29a6
	push %RBP
	jmp uuid_00000000000c29a3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c29a2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c29a5
uuid_00000000000c29a3:
uuid_00000000000c29a5:
	mov -368(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000c29a8
uuid_00000000000c29a6:
	movq -344(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c29a8:
	mov -64(%RBP),%RSP
	add $-360, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
typeof_SB_var_CL_ArrowTypeConsStringConsTContextAST:
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c29aa
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c29a9
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c29ac
uuid_00000000000c29aa:
uuid_00000000000c29ac:
	mov -240(%RBP),%RSP
	add $-240, %RSP
	subq $24, %rsp
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $208, %rsp
	ret
typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST:
#call function find-alias-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	mov %RBX, %RBP
	call find_SB_alias_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
uuid_00000000000c29cf:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c29d0
	jmp uuid_00000000000c29d1
uuid_00000000000c29d0:
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	mov -480(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c29cc
	push %RBP
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq $0
	push %RBP
	mov -608(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c29b9
	jmp uuid_00000000000c29bb
uuid_00000000000c29b9:
	push %RBP
	jmp uuid_00000000000c29b6
	jmp uuid_00000000000c29b8
uuid_00000000000c29b6:
	push %RBP
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	jmp uuid_00000000000c29b3
	jmp uuid_00000000000c29b5
uuid_00000000000c29b3:
	push %RBP
	mov -504(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c29b0
	jmp uuid_00000000000c29b2
uuid_00000000000c29b0:
	push %RBP
	mov -496(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c29ad
	jmp uuid_00000000000c29af
uuid_00000000000c29ad:
	movb $1, -616(%rbp)
uuid_00000000000c29af:
	mov -688(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c29b2:
	mov -672(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c29b5:
	mov -640(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c29b8:
	mov -632(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c29bb:
	mov -624(%RBP),%RSP
	add $-808, %RSP
	mov -616(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c29c9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c29c8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c29cb
uuid_00000000000c29c9:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c29c5
	movq -808(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -800(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -792(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -784(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -776(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -768(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -696(%rbp), %r15
	movq %r15, -80(%rbp)
	jmp uuid_00000000000c29c7
uuid_00000000000c29c5:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c29bf
	movq -664(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -656(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -648(%rbp), %r15
	movq %r15, -216(%rbp)
	jmp uuid_00000000000c29c1
uuid_00000000000c29bf:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c29bc
	movq -664(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -656(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -648(%rbp), %r15
	movq %r15, -216(%rbp)
	jmp uuid_00000000000c29be
uuid_00000000000c29bc:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
uuid_00000000000c29be:
	mov -832(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c29c1:
	mov -824(%RBP),%RSP
	add $-832, %RSP
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c29c2
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	jmp uuid_00000000000c29c4
uuid_00000000000c29c2:
	movq -808(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -800(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -792(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -784(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -776(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -768(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -696(%rbp), %r15
	movq %r15, -80(%rbp)
uuid_00000000000c29c4:
	mov -840(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000c29c7:
	mov -816(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000c29cb:
	mov -488(%RBP),%RSP
	add $-840, %RSP
	jmp uuid_00000000000c29ce
uuid_00000000000c29cc:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
uuid_00000000000c29ce:
	mov -360(%RBP),%RSP
	add $-480, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000c29cf
uuid_00000000000c29d1:
	subq $24, %rsp
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $208, %rsp
	ret
typecheck_CL_ArrowNilNil:
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
uuid_00000000000c29df:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c29e0
	jmp uuid_00000000000c29e1
uuid_00000000000c29e0:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c29d8
	jmp uuid_00000000000c29da
uuid_00000000000c29d8:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c29d5
	jmp uuid_00000000000c29d7
uuid_00000000000c29d5:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c29d2
	jmp uuid_00000000000c29d4
uuid_00000000000c29d2:
	movb $1, -312(%rbp)
uuid_00000000000c29d4:
	mov -408(%RBP),%RSP
	add $-480, %RSP
uuid_00000000000c29d7:
	mov -328(%RBP),%RSP
	add $-480, %RSP
uuid_00000000000c29da:
	mov -320(%RBP),%RSP
	add $-480, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c29dc
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c29db
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c29de
uuid_00000000000c29dc:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -480(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c29de:
	mov -232(%RBP),%RSP
	add $-480, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c29df
uuid_00000000000c29e1:
uuid_00000000000c29ef:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c29f0
	jmp uuid_00000000000c29f1
uuid_00000000000c29f0:
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c29e8
	jmp uuid_00000000000c29ea
uuid_00000000000c29e8:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c29e5
	jmp uuid_00000000000c29e7
uuid_00000000000c29e5:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c29e2
	jmp uuid_00000000000c29e4
uuid_00000000000c29e2:
	movb $1, -312(%rbp)
uuid_00000000000c29e4:
	mov -408(%RBP),%RSP
	add $-480, %RSP
uuid_00000000000c29e7:
	mov -328(%RBP),%RSP
	add $-480, %RSP
uuid_00000000000c29ea:
	mov -320(%RBP),%RSP
	add $-480, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c29ec
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c29eb
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c29ee
uuid_00000000000c29ec:
#call function infer-global-context : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call infer_SB_global_SB_context_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -480(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000c29ee:
	mov -232(%RBP),%RSP
	add $-480, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c29ef
uuid_00000000000c29f1:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_type_SB_context_CL_TContextTContextCaseNumber2, %r15
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2a16:
#call function non-zero : Arrow<List<StackToSpecialize>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecializeCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListStackToSpecialize
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2a17
	jmp uuid_00000000000c2a18
uuid_00000000000c2a17:
	mov $stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecializeCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a0f
	jmp uuid_00000000000c2a11
uuid_00000000000c2a0f:
	push %RBP
	mov -552(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2a0c
	jmp uuid_00000000000c2a0e
uuid_00000000000c2a0c:
	push %RBP
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq $0
	push %RBP
	mov -976(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a06
	jmp uuid_00000000000c2a08
uuid_00000000000c2a06:
	push %RBP
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	jmp uuid_00000000000c2a03
	jmp uuid_00000000000c2a05
uuid_00000000000c2a03:
	push %RBP
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	pushq -944(%RBP)
	jmp uuid_00000000000c2a00
	jmp uuid_00000000000c2a02
uuid_00000000000c2a00:
	push %RBP
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	jmp uuid_00000000000c29fd
	jmp uuid_00000000000c29ff
uuid_00000000000c29fd:
	push %RBP
	mov -800(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c29fa
	jmp uuid_00000000000c29fc
uuid_00000000000c29fa:
	movb $1, -984(%rbp)
uuid_00000000000c29fc:
	mov -1192(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000c29ff:
	mov -1160(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000c2a02:
	mov -1032(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000c2a05:
	mov -1000(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000c2a08:
	mov -992(%RBP),%RSP
	add $-1200, %RSP
	mov -984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a09
	jmp uuid_00000000000c2a0b
uuid_00000000000c2a09:
	movb $1, -568(%rbp)
uuid_00000000000c2a0b:
	mov -792(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000c2a0e:
	mov -584(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000c2a11:
	mov -576(%RBP),%RSP
	add $-1200, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a13
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2a12
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2a15
uuid_00000000000c2a13:
	mov $stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecializeCaseNumber1, %r14
	movq -784(%rbp), %r15
	movq %r15, 0(%r14)
	movq -776(%rbp), %r15
	movq %r15, 8(%r14)
	movq -768(%rbp), %r15
	movq %r15, 16(%r14)
	movq -760(%rbp), %r15
	movq %r15, 24(%r14)
	movq -752(%rbp), %r15
	movq %r15, 32(%r14)
	movq -744(%rbp), %r15
	movq %r15, 40(%r14)
	movq -736(%rbp), %r15
	movq %r15, 48(%r14)
	movq -728(%rbp), %r15
	movq %r15, 56(%r14)
	movq -720(%rbp), %r15
	movq %r15, 64(%r14)
	movq -712(%rbp), %r15
	movq %r15, 72(%r14)
	movq -704(%rbp), %r15
	movq %r15, 80(%r14)
	movq -696(%rbp), %r15
	movq %r15, 88(%r14)
	movq -688(%rbp), %r15
	movq %r15, 96(%r14)
	movq -680(%rbp), %r15
	movq %r15, 104(%r14)
	movq -672(%rbp), %r15
	movq %r15, 112(%r14)
	movq -664(%rbp), %r15
	movq %r15, 120(%r14)
	movq -656(%rbp), %r15
	movq %r15, 128(%r14)
	movq -648(%rbp), %r15
	movq %r15, 136(%r14)
	movq -640(%rbp), %r15
	movq %r15, 144(%r14)
	movq -632(%rbp), %r15
	movq %r15, 152(%r14)
	movq -624(%rbp), %r15
	movq %r15, 160(%r14)
	movq -616(%rbp), %r15
	movq %r15, 168(%r14)
	movq -608(%rbp), %r15
	movq %r15, 176(%r14)
	movq -600(%rbp), %r15
	movq %r15, 184(%r14)
	movq -592(%rbp), %r15
	movq %r15, 192(%r14)
#call function specialize : Arrow<Cons<Cons<Cons<String,Type>,TContext>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1200(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov %RBX, %RBP
	call specialize_CL_ArrowNilConsTypeConsTContextConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2a15:
	mov -360(%RBP),%RSP
	add $-1200, %RSP
	add $200, %rsp
	add $200, %rsp
	add $8, %rsp
	add $200, %rsp
	add $184, %rsp
	add $8, %rsp
	add $24, %rsp
	add $120, %rsp
	add $24, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2a16
uuid_00000000000c2a18:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
substitute_CL_ArrowTokenConsTokenContext:
	mov -104(%RBP), %RAX
	push %RAX
uuid_00000000000c2a62:
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2a63
	jmp uuid_00000000000c2a64
uuid_00000000000c2a63:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov -368(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a5f
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq $0
	push %RBP
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a2b
	jmp uuid_00000000000c2a2d
uuid_00000000000c2a2b:
	push %RBP
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq $0
	push %RBP
	mov -568(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a1f
	jmp uuid_00000000000c2a21
uuid_00000000000c2a1f:
	push %RBP
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	jmp uuid_00000000000c2a1c
	jmp uuid_00000000000c2a1e
uuid_00000000000c2a1c:
	push %RBP
	jmp uuid_00000000000c2a19
	jmp uuid_00000000000c2a1b
uuid_00000000000c2a19:
	movb $1, -576(%rbp)
uuid_00000000000c2a1b:
	mov -656(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c2a1e:
	mov -592(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c2a21:
	mov -584(%RBP),%RSP
	add $-656, %RSP
	mov -576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a28
	jmp uuid_00000000000c2a2a
uuid_00000000000c2a28:
	push %RBP
	mov -392(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2a25
	jmp uuid_00000000000c2a27
uuid_00000000000c2a25:
	push %RBP
	mov -384(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2a22
	jmp uuid_00000000000c2a24
uuid_00000000000c2a22:
	movb $1, -480(%rbp)
uuid_00000000000c2a24:
	mov -680(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c2a27:
	mov -664(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c2a2a:
	mov -496(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c2a2d:
	mov -488(%RBP),%RSP
	add $-776, %RSP
	mov -480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a5c
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a43
	jmp uuid_00000000000c2a45
uuid_00000000000c2a43:
	push %RBP
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq $0
	push %RBP
	mov -976(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a37
	jmp uuid_00000000000c2a39
uuid_00000000000c2a37:
	push %RBP
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	pushq -944(%RBP)
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	jmp uuid_00000000000c2a34
	jmp uuid_00000000000c2a36
uuid_00000000000c2a34:
	push %RBP
	jmp uuid_00000000000c2a31
	jmp uuid_00000000000c2a33
uuid_00000000000c2a31:
	movb $1, -984(%rbp)
uuid_00000000000c2a33:
	mov -1064(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000c2a36:
	mov -1000(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000c2a39:
	mov -992(%RBP),%RSP
	add $-1064, %RSP
	mov -984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a40
	jmp uuid_00000000000c2a42
uuid_00000000000c2a40:
	push %RBP
	mov -800(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2a3d
	jmp uuid_00000000000c2a3f
uuid_00000000000c2a3d:
	push %RBP
	mov -792(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2a3a
	jmp uuid_00000000000c2a3c
uuid_00000000000c2a3a:
	movb $1, -888(%rbp)
uuid_00000000000c2a3c:
	mov -1088(%RBP),%RSP
	add $-1184, %RSP
uuid_00000000000c2a3f:
	mov -1072(%RBP),%RSP
	add $-1184, %RSP
uuid_00000000000c2a42:
	mov -904(%RBP),%RSP
	add $-1184, %RSP
uuid_00000000000c2a45:
	mov -896(%RBP),%RSP
	add $-1184, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a59
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq $0
	push %RBP
	mov -1288(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a52
	jmp uuid_00000000000c2a54
uuid_00000000000c2a52:
	push %RBP
	pushq -1216(%RBP)
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	pushq -1256(%RBP)
	pushq -1264(%RBP)
	pushq -1272(%RBP)
	pushq -1280(%RBP)
	jmp uuid_00000000000c2a4f
	jmp uuid_00000000000c2a51
uuid_00000000000c2a4f:
	push %RBP
	mov -1208(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2a4c
	jmp uuid_00000000000c2a4e
uuid_00000000000c2a4c:
	push %RBP
	mov -1200(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2a49
	jmp uuid_00000000000c2a4b
uuid_00000000000c2a49:
	movb $1, -1296(%rbp)
uuid_00000000000c2a4b:
	mov -1408(%RBP),%RSP
	add $-1504, %RSP
uuid_00000000000c2a4e:
	mov -1392(%RBP),%RSP
	add $-1504, %RSP
uuid_00000000000c2a51:
	mov -1312(%RBP),%RSP
	add $-1504, %RSP
uuid_00000000000c2a54:
	mov -1304(%RBP),%RSP
	add $-1504, %RSP
	mov -1296(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a56
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2a55
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2a58
uuid_00000000000c2a56:
	movq -1504(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c2a58:
	mov -1192(%RBP),%RSP
	add $-1504, %RSP
	jmp uuid_00000000000c2a5b
uuid_00000000000c2a59:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2a46
	movq -1184(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c2a48
uuid_00000000000c2a46:
	movq -1056(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -104(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2a48:
	mov -1192(%RBP),%RSP
	add $-1192, %RSP
uuid_00000000000c2a5b:
	mov -784(%RBP),%RSP
	add $-1192, %RSP
	jmp uuid_00000000000c2a5e
uuid_00000000000c2a5c:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2a2e
	movq -776(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -768(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -696(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -688(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c2a30
uuid_00000000000c2a2e:
	movq -648(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -640(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -632(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -624(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -616(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -608(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -600(%rbp), %r15
	movq %r15, -104(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2a30:
	mov -784(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000c2a5e:
	mov -376(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000c2a61
uuid_00000000000c2a5f:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2a61:
	mov -272(%RBP),%RSP
	add $-368, %RSP
	add $96, %rsp
	add $96, %rsp
	add $8, %RSP
	jmp uuid_00000000000c2a62
uuid_00000000000c2a64:
	subq $56, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $160, %rsp
	ret
substitute_CL_ArrowListTypeConsListTypeTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a74
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a6d
	jmp uuid_00000000000c2a6f
uuid_00000000000c2a6d:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2a6a
	jmp uuid_00000000000c2a6c
uuid_00000000000c2a6a:
	push %RBP
	pushq -272(%RBP)
	pushq -280(%RBP)
	pushq -288(%RBP)
	jmp uuid_00000000000c2a67
	jmp uuid_00000000000c2a69
uuid_00000000000c2a67:
	movb $1, -312(%rbp)
uuid_00000000000c2a69:
	mov -376(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000c2a6c:
	mov -328(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000c2a6f:
	mov -320(%RBP),%RSP
	add $-400, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a71
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2a70
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2a73
uuid_00000000000c2a71:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
#call function substitute : Arrow<Cons<TContext,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowListTypeConsListTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c2a73:
	mov -264(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000c2a76
uuid_00000000000c2a74:
uuid_00000000000c2a76:
	mov -216(%RBP),%RSP
	add $-256, %RSP
	subq $40, %rsp
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $168, %rsp
	ret
substitute_CL_ArrowTypeConsTypeTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a7a
	jmp uuid_00000000000c2a7c
uuid_00000000000c2a7a:
	push %RBP
	mov -200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2a77
	jmp uuid_00000000000c2a79
uuid_00000000000c2a77:
	movb $1, -216(%rbp)
uuid_00000000000c2a79:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c2a7c:
	mov -224(%RBP),%RSP
	add $-240, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ab5
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a9f
	jmp uuid_00000000000c2aa1
uuid_00000000000c2a9f:
	push %RBP
	mov -264(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2a9c
	jmp uuid_00000000000c2a9e
uuid_00000000000c2a9c:
	push %RBP
	mov -256(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2a99
	jmp uuid_00000000000c2a9b
uuid_00000000000c2a99:
	movb $1, -280(%rbp)
uuid_00000000000c2a9b:
	mov -344(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c2a9e:
	mov -296(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c2aa1:
	mov -288(%RBP),%RSP
	add $-352, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ab2
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2aa8
	jmp uuid_00000000000c2aaa
uuid_00000000000c2aa8:
	push %RBP
	mov -376(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2aa5
	jmp uuid_00000000000c2aa7
uuid_00000000000c2aa5:
	push %RBP
	mov -368(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2aa2
	jmp uuid_00000000000c2aa4
uuid_00000000000c2aa2:
	movb $1, -392(%rbp)
uuid_00000000000c2aa4:
	mov -440(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000c2aa7:
	mov -408(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000c2aaa:
	mov -400(%RBP),%RSP
	add $-464, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2aaf
	push %RBP
	jmp uuid_00000000000c2aac
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2aab
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2aae
uuid_00000000000c2aac:
uuid_00000000000c2aae:
	mov -472(%RBP),%RSP
	add $-472, %RSP
	jmp uuid_00000000000c2ab1
uuid_00000000000c2aaf:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c2ab1:
	mov -360(%RBP),%RSP
	add $-464, %RSP
	jmp uuid_00000000000c2ab4
uuid_00000000000c2ab2:
	pushq -352(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowListTypeConsListTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c2ab4:
	mov -248(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000c2ab7
uuid_00000000000c2ab5:
uuid_00000000000c2a96:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2a97
	jmp uuid_00000000000c2a98
uuid_00000000000c2a97:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a93
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a89
	jmp uuid_00000000000c2a8b
uuid_00000000000c2a89:
	push %RBP
	jmp uuid_00000000000c2a86
	jmp uuid_00000000000c2a88
uuid_00000000000c2a86:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000c2a83
	jmp uuid_00000000000c2a85
uuid_00000000000c2a83:
	push %RBP
	mov -512(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2a80
	jmp uuid_00000000000c2a82
uuid_00000000000c2a80:
	push %RBP
	mov -504(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2a7d
	jmp uuid_00000000000c2a7f
uuid_00000000000c2a7d:
	movb $1, -624(%rbp)
uuid_00000000000c2a7f:
	mov -696(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000c2a82:
	mov -680(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000c2a85:
	mov -648(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000c2a88:
	mov -640(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000c2a8b:
	mov -632(%RBP),%RSP
	add $-816, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a90
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2a8f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2a92
uuid_00000000000c2a90:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2a8c
	movq -816(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -808(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -800(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -792(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -784(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -776(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -768(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c2a8e
uuid_00000000000c2a8c:
	movq -672(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -664(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -656(%rbp), %r15
	movq %r15, -128(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2a8e:
	mov -824(%RBP),%RSP
	add $-824, %RSP
uuid_00000000000c2a92:
	mov -496(%RBP),%RSP
	add $-824, %RSP
	jmp uuid_00000000000c2a95
uuid_00000000000c2a93:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2a95:
	mov -368(%RBP),%RSP
	add $-488, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000c2a96
uuid_00000000000c2a98:
uuid_00000000000c2ab7:
	mov -184(%RBP),%RSP
	add $-240, %RSP
	subq $24, %rsp
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $152, %rsp
	ret
substitute_CL_ArrowListTypeConsListTypeContext:
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	push %RBP
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ac7
	push %RBP
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ac0
	jmp uuid_00000000000c2ac2
uuid_00000000000c2ac0:
	push %RBP
	mov -272(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2abd
	jmp uuid_00000000000c2abf
uuid_00000000000c2abd:
	push %RBP
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	jmp uuid_00000000000c2aba
	jmp uuid_00000000000c2abc
uuid_00000000000c2aba:
	movb $1, -288(%rbp)
uuid_00000000000c2abc:
	mov -352(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c2abf:
	mov -304(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c2ac2:
	mov -296(%RBP),%RSP
	add $-376, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ac4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2ac3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2ac6
uuid_00000000000c2ac4:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<Context,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
#call function substitute : Arrow<Cons<Context,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowListTypeConsListTypeContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
uuid_00000000000c2ac6:
	mov -240(%RBP),%RSP
	add $-376, %RSP
	jmp uuid_00000000000c2ac9
uuid_00000000000c2ac7:
uuid_00000000000c2ac9:
	mov -192(%RBP),%RSP
	add $-232, %RSP
	subq $40, %rsp
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $144, %rsp
	ret
substitute_CL_ArrowTypeConsTypeContext:
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2acd
	jmp uuid_00000000000c2acf
uuid_00000000000c2acd:
	push %RBP
	mov -176(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2aca
	jmp uuid_00000000000c2acc
uuid_00000000000c2aca:
	movb $1, -192(%rbp)
uuid_00000000000c2acc:
	mov -208(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000c2acf:
	mov -200(%RBP),%RSP
	add $-216, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b38
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b22
	jmp uuid_00000000000c2b24
uuid_00000000000c2b22:
	push %RBP
	mov -240(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2b1f
	jmp uuid_00000000000c2b21
uuid_00000000000c2b1f:
	push %RBP
	mov -232(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2b1c
	jmp uuid_00000000000c2b1e
uuid_00000000000c2b1c:
	movb $1, -256(%rbp)
uuid_00000000000c2b1e:
	mov -320(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000c2b21:
	mov -272(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000c2b24:
	mov -264(%RBP),%RSP
	add $-328, %RSP
	mov -256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b35
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -360(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b2b
	jmp uuid_00000000000c2b2d
uuid_00000000000c2b2b:
	push %RBP
	mov -352(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2b28
	jmp uuid_00000000000c2b2a
uuid_00000000000c2b28:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2b25
	jmp uuid_00000000000c2b27
uuid_00000000000c2b25:
	movb $1, -368(%rbp)
uuid_00000000000c2b27:
	mov -416(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c2b2a:
	mov -384(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c2b2d:
	mov -376(%RBP),%RSP
	add $-440, %RSP
	mov -368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b32
	push %RBP
	jmp uuid_00000000000c2b2f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2b2e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2b31
uuid_00000000000c2b2f:
uuid_00000000000c2b31:
	mov -448(%RBP),%RSP
	add $-448, %RSP
	jmp uuid_00000000000c2b34
uuid_00000000000c2b32:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<Context,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<Context,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
uuid_00000000000c2b34:
	mov -336(%RBP),%RSP
	add $-440, %RSP
	jmp uuid_00000000000c2b37
uuid_00000000000c2b35:
	pushq -328(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<Context,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowListTypeConsListTypeContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
uuid_00000000000c2b37:
	mov -224(%RBP),%RSP
	add $-328, %RSP
	jmp uuid_00000000000c2b3a
uuid_00000000000c2b38:
uuid_00000000000c2b19:
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2b1a
	jmp uuid_00000000000c2b1b
uuid_00000000000c2b1a:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b16
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -520(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ae2
	jmp uuid_00000000000c2ae4
uuid_00000000000c2ae2:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ad6
	jmp uuid_00000000000c2ad8
uuid_00000000000c2ad6:
	push %RBP
	jmp uuid_00000000000c2ad3
	jmp uuid_00000000000c2ad5
uuid_00000000000c2ad3:
	push %RBP
	mov -552(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2ad0
	jmp uuid_00000000000c2ad2
uuid_00000000000c2ad0:
	movb $1, -624(%rbp)
uuid_00000000000c2ad2:
	mov -648(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c2ad5:
	mov -640(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c2ad8:
	mov -632(%RBP),%RSP
	add $-656, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2adf
	jmp uuid_00000000000c2ae1
uuid_00000000000c2adf:
	push %RBP
	mov -440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2adc
	jmp uuid_00000000000c2ade
uuid_00000000000c2adc:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2ad9
	jmp uuid_00000000000c2adb
uuid_00000000000c2ad9:
	movb $1, -528(%rbp)
uuid_00000000000c2adb:
	mov -680(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c2ade:
	mov -664(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c2ae1:
	mov -544(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c2ae4:
	mov -536(%RBP),%RSP
	add $-776, %RSP
	mov -528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b13
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2afa
	jmp uuid_00000000000c2afc
uuid_00000000000c2afa:
	push %RBP
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq $0
	push %RBP
	mov -976(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2aee
	jmp uuid_00000000000c2af0
uuid_00000000000c2aee:
	push %RBP
	jmp uuid_00000000000c2aeb
	jmp uuid_00000000000c2aed
uuid_00000000000c2aeb:
	push %RBP
	mov -912(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2ae8
	jmp uuid_00000000000c2aea
uuid_00000000000c2ae8:
	movb $1, -984(%rbp)
uuid_00000000000c2aea:
	mov -1008(%RBP),%RSP
	add $-1016, %RSP
uuid_00000000000c2aed:
	mov -1000(%RBP),%RSP
	add $-1016, %RSP
uuid_00000000000c2af0:
	mov -992(%RBP),%RSP
	add $-1016, %RSP
	mov -984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2af7
	jmp uuid_00000000000c2af9
uuid_00000000000c2af7:
	push %RBP
	mov -800(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2af4
	jmp uuid_00000000000c2af6
uuid_00000000000c2af4:
	push %RBP
	mov -792(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2af1
	jmp uuid_00000000000c2af3
uuid_00000000000c2af1:
	movb $1, -888(%rbp)
uuid_00000000000c2af3:
	mov -1040(%RBP),%RSP
	add $-1136, %RSP
uuid_00000000000c2af6:
	mov -1024(%RBP),%RSP
	add $-1136, %RSP
uuid_00000000000c2af9:
	mov -904(%RBP),%RSP
	add $-1136, %RSP
uuid_00000000000c2afc:
	mov -896(%RBP),%RSP
	add $-1136, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b10
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -1240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b09
	jmp uuid_00000000000c2b0b
uuid_00000000000c2b09:
	push %RBP
	pushq -1168(%RBP)
	pushq -1176(%RBP)
	pushq -1184(%RBP)
	pushq -1192(%RBP)
	pushq -1200(%RBP)
	pushq -1208(%RBP)
	pushq -1216(%RBP)
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	jmp uuid_00000000000c2b06
	jmp uuid_00000000000c2b08
uuid_00000000000c2b06:
	push %RBP
	mov -1160(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2b03
	jmp uuid_00000000000c2b05
uuid_00000000000c2b03:
	push %RBP
	mov -1152(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2b00
	jmp uuid_00000000000c2b02
uuid_00000000000c2b00:
	movb $1, -1248(%rbp)
uuid_00000000000c2b02:
	mov -1360(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c2b05:
	mov -1344(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c2b08:
	mov -1264(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c2b0b:
	mov -1256(%RBP),%RSP
	add $-1456, %RSP
	mov -1248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b0d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2b0c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2b0f
uuid_00000000000c2b0d:
	movq -1456(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1408(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1400(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1392(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1384(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1376(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c2b0f:
	mov -1144(%RBP),%RSP
	add $-1456, %RSP
	jmp uuid_00000000000c2b12
uuid_00000000000c2b10:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1032(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2afd
	movq -1136(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c2aff
uuid_00000000000c2afd:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1016(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2aff:
	mov -1144(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000c2b12:
	mov -784(%RBP),%RSP
	add $-1144, %RSP
	jmp uuid_00000000000c2b15
uuid_00000000000c2b13:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2ae5
	movq -776(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -768(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -696(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -688(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c2ae7
uuid_00000000000c2ae5:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2ae7:
	mov -784(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000c2b15:
	mov -424(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000c2b18
uuid_00000000000c2b16:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2b18:
	mov -320(%RBP),%RSP
	add $-416, %RSP
	add $96, %rsp
	add $96, %rsp
	add $8, %RSP
	jmp uuid_00000000000c2b19
uuid_00000000000c2b1b:
uuid_00000000000c2b3a:
	mov -160(%RBP),%RSP
	add $-216, %RSP
	subq $24, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $128, %rsp
	ret
substitute_SB_lhs_CL_ArrowASTConsASTTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b6b
	jmp uuid_00000000000c2b6d
uuid_00000000000c2b6b:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b62
	jmp uuid_00000000000c2b64
uuid_00000000000c2b62:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b50
	jmp uuid_00000000000c2b52
uuid_00000000000c2b50:
	push %RBP
	mov -536(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -640(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b3e
	jmp uuid_00000000000c2b40
uuid_00000000000c2b3e:
	push %RBP
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	jmp uuid_00000000000c2b3b
	jmp uuid_00000000000c2b3d
uuid_00000000000c2b3b:
	movb $1, -648(%rbp)
uuid_00000000000c2b3d:
	mov -664(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000c2b40:
	mov -656(%RBP),%RSP
	add $-688, %RSP
	mov -648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b4d
	jmp uuid_00000000000c2b4f
uuid_00000000000c2b4d:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -768(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b47
	jmp uuid_00000000000c2b49
uuid_00000000000c2b47:
	push %RBP
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq -752(%RBP)
	pushq -760(%RBP)
	jmp uuid_00000000000c2b44
	jmp uuid_00000000000c2b46
uuid_00000000000c2b44:
	push %RBP
	mov -704(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2b41
	jmp uuid_00000000000c2b43
uuid_00000000000c2b41:
	movb $1, -776(%rbp)
uuid_00000000000c2b43:
	mov -856(%RBP),%RSP
	add $-864, %RSP
uuid_00000000000c2b46:
	mov -792(%RBP),%RSP
	add $-864, %RSP
uuid_00000000000c2b49:
	mov -784(%RBP),%RSP
	add $-864, %RSP
	mov -776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b4a
	jmp uuid_00000000000c2b4c
uuid_00000000000c2b4a:
	movb $1, -552(%rbp)
uuid_00000000000c2b4c:
	mov -696(%RBP),%RSP
	add $-864, %RSP
uuid_00000000000c2b4f:
	mov -568(%RBP),%RSP
	add $-864, %RSP
uuid_00000000000c2b52:
	mov -560(%RBP),%RSP
	add $-864, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b5f
	jmp uuid_00000000000c2b61
uuid_00000000000c2b5f:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -944(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b59
	jmp uuid_00000000000c2b5b
uuid_00000000000c2b59:
	push %RBP
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	jmp uuid_00000000000c2b56
	jmp uuid_00000000000c2b58
uuid_00000000000c2b56:
	push %RBP
	mov -880(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2b53
	jmp uuid_00000000000c2b55
uuid_00000000000c2b53:
	movb $1, -952(%rbp)
uuid_00000000000c2b55:
	mov -1032(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c2b58:
	mov -968(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c2b5b:
	mov -960(%RBP),%RSP
	add $-1040, %RSP
	mov -952(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b5c
	jmp uuid_00000000000c2b5e
uuid_00000000000c2b5c:
	movb $1, -456(%rbp)
uuid_00000000000c2b5e:
	mov -872(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c2b61:
	mov -472(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c2b64:
	mov -464(%RBP),%RSP
	add $-1040, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b68
	jmp uuid_00000000000c2b6a
uuid_00000000000c2b68:
	push %RBP
	mov -336(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2b65
	jmp uuid_00000000000c2b67
uuid_00000000000c2b65:
	movb $1, -360(%rbp)
uuid_00000000000c2b67:
	mov -1048(%RBP),%RSP
	add $-1120, %RSP
uuid_00000000000c2b6a:
	mov -376(%RBP),%RSP
	add $-1120, %RSP
uuid_00000000000c2b6d:
	mov -368(%RBP),%RSP
	add $-1120, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2bc4
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -1200(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b95
	jmp uuid_00000000000c2b97
uuid_00000000000c2b95:
	push %RBP
	mov -1192(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1296(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b83
	jmp uuid_00000000000c2b85
uuid_00000000000c2b83:
	push %RBP
	mov -1288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1392(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b71
	jmp uuid_00000000000c2b73
uuid_00000000000c2b71:
	push %RBP
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	jmp uuid_00000000000c2b6e
	jmp uuid_00000000000c2b70
uuid_00000000000c2b6e:
	movb $1, -1400(%rbp)
uuid_00000000000c2b70:
	mov -1416(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000c2b73:
	mov -1408(%RBP),%RSP
	add $-1440, %RSP
	mov -1400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b80
	jmp uuid_00000000000c2b82
uuid_00000000000c2b80:
	push %RBP
	mov -1280(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1520(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b7a
	jmp uuid_00000000000c2b7c
uuid_00000000000c2b7a:
	push %RBP
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	jmp uuid_00000000000c2b77
	jmp uuid_00000000000c2b79
uuid_00000000000c2b77:
	push %RBP
	mov -1456(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2b74
	jmp uuid_00000000000c2b76
uuid_00000000000c2b74:
	movb $1, -1528(%rbp)
uuid_00000000000c2b76:
	mov -1608(%RBP),%RSP
	add $-1616, %RSP
uuid_00000000000c2b79:
	mov -1544(%RBP),%RSP
	add $-1616, %RSP
uuid_00000000000c2b7c:
	mov -1536(%RBP),%RSP
	add $-1616, %RSP
	mov -1528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b7d
	jmp uuid_00000000000c2b7f
uuid_00000000000c2b7d:
	movb $1, -1304(%rbp)
uuid_00000000000c2b7f:
	mov -1448(%RBP),%RSP
	add $-1616, %RSP
uuid_00000000000c2b82:
	mov -1320(%RBP),%RSP
	add $-1616, %RSP
uuid_00000000000c2b85:
	mov -1312(%RBP),%RSP
	add $-1616, %RSP
	mov -1304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b92
	jmp uuid_00000000000c2b94
uuid_00000000000c2b92:
	push %RBP
	mov -1184(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1696(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b8c
	jmp uuid_00000000000c2b8e
uuid_00000000000c2b8c:
	push %RBP
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	pushq -1656(%RBP)
	pushq -1664(%RBP)
	pushq -1672(%RBP)
	pushq -1680(%RBP)
	pushq -1688(%RBP)
	jmp uuid_00000000000c2b89
	jmp uuid_00000000000c2b8b
uuid_00000000000c2b89:
	push %RBP
	mov -1632(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1792(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2b86
	jmp uuid_00000000000c2b88
uuid_00000000000c2b86:
	movb $1, -1704(%rbp)
uuid_00000000000c2b88:
	mov -1784(%RBP),%RSP
	add $-1792, %RSP
uuid_00000000000c2b8b:
	mov -1720(%RBP),%RSP
	add $-1792, %RSP
uuid_00000000000c2b8e:
	mov -1712(%RBP),%RSP
	add $-1792, %RSP
	mov -1704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b8f
	jmp uuid_00000000000c2b91
uuid_00000000000c2b8f:
	movb $1, -1208(%rbp)
uuid_00000000000c2b91:
	mov -1624(%RBP),%RSP
	add $-1792, %RSP
uuid_00000000000c2b94:
	mov -1224(%RBP),%RSP
	add $-1792, %RSP
uuid_00000000000c2b97:
	mov -1216(%RBP),%RSP
	add $-1792, %RSP
	mov -1208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2bc1
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -1872(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ba7
	jmp uuid_00000000000c2ba9
uuid_00000000000c2ba7:
	push %RBP
	mov -1864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1968(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b9e
	jmp uuid_00000000000c2ba0
uuid_00000000000c2b9e:
	push %RBP
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	jmp uuid_00000000000c2b9b
	jmp uuid_00000000000c2b9d
uuid_00000000000c2b9b:
	push %RBP
	mov -1904(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2b98
	jmp uuid_00000000000c2b9a
uuid_00000000000c2b98:
	movb $1, -1976(%rbp)
uuid_00000000000c2b9a:
	mov -2056(%RBP),%RSP
	add $-2064, %RSP
uuid_00000000000c2b9d:
	mov -1992(%RBP),%RSP
	add $-2064, %RSP
uuid_00000000000c2ba0:
	mov -1984(%RBP),%RSP
	add $-2064, %RSP
	mov -1976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ba4
	jmp uuid_00000000000c2ba6
uuid_00000000000c2ba4:
	push %RBP
	mov -1856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2ba1
	jmp uuid_00000000000c2ba3
uuid_00000000000c2ba1:
	movb $1, -1880(%rbp)
uuid_00000000000c2ba3:
	mov -2072(%RBP),%RSP
	add $-2144, %RSP
uuid_00000000000c2ba6:
	mov -1896(%RBP),%RSP
	add $-2144, %RSP
uuid_00000000000c2ba9:
	mov -1888(%RBP),%RSP
	add $-2144, %RSP
	mov -1880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2bbe
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -2224(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2bb0
	jmp uuid_00000000000c2bb2
uuid_00000000000c2bb0:
	push %RBP
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	jmp uuid_00000000000c2bad
	jmp uuid_00000000000c2baf
uuid_00000000000c2bad:
	push %RBP
	mov -2160(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2baa
	jmp uuid_00000000000c2bac
uuid_00000000000c2baa:
	movb $1, -2232(%rbp)
uuid_00000000000c2bac:
	mov -2312(%RBP),%RSP
	add $-2320, %RSP
uuid_00000000000c2baf:
	mov -2248(%RBP),%RSP
	add $-2320, %RSP
uuid_00000000000c2bb2:
	mov -2240(%RBP),%RSP
	add $-2320, %RSP
	mov -2232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2bbb
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov -2400(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2bb8
	push %RBP
	jmp uuid_00000000000c2bb5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2bb4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2bb7
uuid_00000000000c2bb5:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c2bb3
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2bb7:
	mov -2408(%RBP),%RSP
	add $-2408, %RSP
	jmp uuid_00000000000c2bba
uuid_00000000000c2bb8:
uuid_00000000000c2bba:
	mov -2328(%RBP),%RSP
	add $-2400, %RSP
	jmp uuid_00000000000c2bbd
uuid_00000000000c2bbb:
	pushq -2320(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c2bbd:
	mov -2152(%RBP),%RSP
	add $-2320, %RSP
	jmp uuid_00000000000c2bc0
uuid_00000000000c2bbe:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-lhs : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	mov %RBX, %RBP
	call substitute_SB_lhs_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2064(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c2bc0:
	mov -1800(%RBP),%RSP
	add $-2144, %RSP
	jmp uuid_00000000000c2bc3
uuid_00000000000c2bc1:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1176
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1616(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c2bc3:
	mov -1128(%RBP),%RSP
	add $-1792, %RSP
	jmp uuid_00000000000c2bc6
uuid_00000000000c2bc4:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-lhs : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	mov %RBX, %RBP
	call substitute_SB_lhs_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1176
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c2bc6:
	mov -280(%RBP),%RSP
	add $-1120, %RSP
	subq $72, %rsp
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $200, %rsp
	ret
substitute_CL_ArrowASTConsASTTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2cc1
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov -432(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2cbe
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2bee
	jmp uuid_00000000000c2bf0
uuid_00000000000c2bee:
	push %RBP
	mov -504(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -608(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2bdc
	jmp uuid_00000000000c2bde
uuid_00000000000c2bdc:
	push %RBP
	mov -600(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -704(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2bca
	jmp uuid_00000000000c2bcc
uuid_00000000000c2bca:
	push %RBP
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	jmp uuid_00000000000c2bc7
	jmp uuid_00000000000c2bc9
uuid_00000000000c2bc7:
	movb $1, -712(%rbp)
uuid_00000000000c2bc9:
	mov -728(%RBP),%RSP
	add $-752, %RSP
uuid_00000000000c2bcc:
	mov -720(%RBP),%RSP
	add $-752, %RSP
	mov -712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2bd9
	jmp uuid_00000000000c2bdb
uuid_00000000000c2bd9:
	push %RBP
	mov -592(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -832(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2bd3
	jmp uuid_00000000000c2bd5
uuid_00000000000c2bd3:
	push %RBP
	pushq -776(%RBP)
	pushq -784(%RBP)
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	jmp uuid_00000000000c2bd0
	jmp uuid_00000000000c2bd2
uuid_00000000000c2bd0:
	push %RBP
	mov -768(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2bcd
	jmp uuid_00000000000c2bcf
uuid_00000000000c2bcd:
	movb $1, -840(%rbp)
uuid_00000000000c2bcf:
	mov -920(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c2bd2:
	mov -856(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c2bd5:
	mov -848(%RBP),%RSP
	add $-928, %RSP
	mov -840(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2bd6
	jmp uuid_00000000000c2bd8
uuid_00000000000c2bd6:
	movb $1, -616(%rbp)
uuid_00000000000c2bd8:
	mov -760(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c2bdb:
	mov -632(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c2bde:
	mov -624(%RBP),%RSP
	add $-928, %RSP
	mov -616(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2beb
	jmp uuid_00000000000c2bed
uuid_00000000000c2beb:
	push %RBP
	mov -496(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1008(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2be5
	jmp uuid_00000000000c2be7
uuid_00000000000c2be5:
	push %RBP
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	jmp uuid_00000000000c2be2
	jmp uuid_00000000000c2be4
uuid_00000000000c2be2:
	push %RBP
	mov -944(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1104(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2bdf
	jmp uuid_00000000000c2be1
uuid_00000000000c2bdf:
	movb $1, -1016(%rbp)
uuid_00000000000c2be1:
	mov -1096(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000c2be4:
	mov -1032(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000c2be7:
	mov -1024(%RBP),%RSP
	add $-1104, %RSP
	mov -1016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2be8
	jmp uuid_00000000000c2bea
uuid_00000000000c2be8:
	movb $1, -520(%rbp)
uuid_00000000000c2bea:
	mov -936(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000c2bed:
	mov -536(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000c2bf0:
	mov -528(%RBP),%RSP
	add $-1104, %RSP
	mov -520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2cbb
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -1184(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c34
	jmp uuid_00000000000c2c36
uuid_00000000000c2c34:
	push %RBP
	mov -1176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1280(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c22
	jmp uuid_00000000000c2c24
uuid_00000000000c2c22:
	push %RBP
	mov -1272(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1376(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c10
	jmp uuid_00000000000c2c12
uuid_00000000000c2c10:
	push %RBP
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	jmp uuid_00000000000c2c0d
	jmp uuid_00000000000c2c0f
uuid_00000000000c2c0d:
	movb $1, -1384(%rbp)
uuid_00000000000c2c0f:
	mov -1400(%RBP),%RSP
	add $-1424, %RSP
uuid_00000000000c2c12:
	mov -1392(%RBP),%RSP
	add $-1424, %RSP
	mov -1384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c1f
	jmp uuid_00000000000c2c21
uuid_00000000000c2c1f:
	push %RBP
	mov -1264(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1504(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c19
	jmp uuid_00000000000c2c1b
uuid_00000000000c2c19:
	push %RBP
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	jmp uuid_00000000000c2c16
	jmp uuid_00000000000c2c18
uuid_00000000000c2c16:
	push %RBP
	mov -1440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2c13
	jmp uuid_00000000000c2c15
uuid_00000000000c2c13:
	movb $1, -1512(%rbp)
uuid_00000000000c2c15:
	mov -1592(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000c2c18:
	mov -1528(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000c2c1b:
	mov -1520(%RBP),%RSP
	add $-1600, %RSP
	mov -1512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c1c
	jmp uuid_00000000000c2c1e
uuid_00000000000c2c1c:
	movb $1, -1288(%rbp)
uuid_00000000000c2c1e:
	mov -1432(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000c2c21:
	mov -1304(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000c2c24:
	mov -1296(%RBP),%RSP
	add $-1600, %RSP
	mov -1288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c31
	jmp uuid_00000000000c2c33
uuid_00000000000c2c31:
	push %RBP
	mov -1168(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1680(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c2b
	jmp uuid_00000000000c2c2d
uuid_00000000000c2c2b:
	push %RBP
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	pushq -1656(%RBP)
	pushq -1664(%RBP)
	pushq -1672(%RBP)
	jmp uuid_00000000000c2c28
	jmp uuid_00000000000c2c2a
uuid_00000000000c2c28:
	push %RBP
	mov -1616(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1776(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2c25
	jmp uuid_00000000000c2c27
uuid_00000000000c2c25:
	movb $1, -1688(%rbp)
uuid_00000000000c2c27:
	mov -1768(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c2c2a:
	mov -1704(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c2c2d:
	mov -1696(%RBP),%RSP
	add $-1776, %RSP
	mov -1688(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c2e
	jmp uuid_00000000000c2c30
uuid_00000000000c2c2e:
	movb $1, -1192(%rbp)
uuid_00000000000c2c30:
	mov -1608(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c2c33:
	mov -1208(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c2c36:
	mov -1200(%RBP),%RSP
	add $-1776, %RSP
	mov -1192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2cb8
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -1856(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c59
	jmp uuid_00000000000c2c5b
uuid_00000000000c2c59:
	push %RBP
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	pushq -1824(%RBP)
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	jmp uuid_00000000000c2c56
	jmp uuid_00000000000c2c58
uuid_00000000000c2c56:
	push %RBP
	mov -1792(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2c53
	jmp uuid_00000000000c2c55
uuid_00000000000c2c53:
	movb $1, -1864(%rbp)
uuid_00000000000c2c55:
	mov -1944(%RBP),%RSP
	add $-1952, %RSP
uuid_00000000000c2c58:
	mov -1880(%RBP),%RSP
	add $-1952, %RSP
uuid_00000000000c2c5b:
	mov -1872(%RBP),%RSP
	add $-1952, %RSP
	mov -1864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2cb5
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -2032(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c62
	jmp uuid_00000000000c2c64
uuid_00000000000c2c62:
	push %RBP
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	jmp uuid_00000000000c2c5f
	jmp uuid_00000000000c2c61
uuid_00000000000c2c5f:
	push %RBP
	mov -1968(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2c5c
	jmp uuid_00000000000c2c5e
uuid_00000000000c2c5c:
	movb $1, -2040(%rbp)
uuid_00000000000c2c5e:
	mov -2120(%RBP),%RSP
	add $-2128, %RSP
uuid_00000000000c2c61:
	mov -2056(%RBP),%RSP
	add $-2128, %RSP
uuid_00000000000c2c64:
	mov -2048(%RBP),%RSP
	add $-2128, %RSP
	mov -2040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2cb2
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -2208(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c6e
	jmp uuid_00000000000c2c70
uuid_00000000000c2c6e:
	push %RBP
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	jmp uuid_00000000000c2c6b
	jmp uuid_00000000000c2c6d
uuid_00000000000c2c6b:
	push %RBP
	mov -2176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2c68
	jmp uuid_00000000000c2c6a
uuid_00000000000c2c68:
	push %RBP
	mov -2168(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2c65
	jmp uuid_00000000000c2c67
uuid_00000000000c2c65:
	movb $1, -2216(%rbp)
uuid_00000000000c2c67:
	mov -2344(%RBP),%RSP
	add $-2416, %RSP
uuid_00000000000c2c6a:
	mov -2264(%RBP),%RSP
	add $-2416, %RSP
uuid_00000000000c2c6d:
	mov -2232(%RBP),%RSP
	add $-2416, %RSP
uuid_00000000000c2c70:
	mov -2224(%RBP),%RSP
	add $-2416, %RSP
	mov -2216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2caf
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -2496(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c74
	jmp uuid_00000000000c2c76
uuid_00000000000c2c74:
	push %RBP
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	jmp uuid_00000000000c2c71
	jmp uuid_00000000000c2c73
uuid_00000000000c2c71:
	movb $1, -2504(%rbp)
uuid_00000000000c2c73:
	mov -2520(%RBP),%RSP
	add $-2544, %RSP
uuid_00000000000c2c76:
	mov -2512(%RBP),%RSP
	add $-2544, %RSP
	mov -2504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2cac
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -2624(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c7d
	jmp uuid_00000000000c2c7f
uuid_00000000000c2c7d:
	push %RBP
	mov -2616(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2c7a
	jmp uuid_00000000000c2c7c
uuid_00000000000c2c7a:
	push %RBP
	mov -2608(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2c77
	jmp uuid_00000000000c2c79
uuid_00000000000c2c77:
	movb $1, -2632(%rbp)
uuid_00000000000c2c79:
	mov -2728(%RBP),%RSP
	add $-2800, %RSP
uuid_00000000000c2c7c:
	mov -2648(%RBP),%RSP
	add $-2800, %RSP
uuid_00000000000c2c7f:
	mov -2640(%RBP),%RSP
	add $-2800, %RSP
	mov -2632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ca9
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -2880(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c86
	jmp uuid_00000000000c2c88
uuid_00000000000c2c86:
	push %RBP
	mov -2872(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2c83
	jmp uuid_00000000000c2c85
uuid_00000000000c2c83:
	push %RBP
	mov -2864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2c80
	jmp uuid_00000000000c2c82
uuid_00000000000c2c80:
	movb $1, -2888(%rbp)
uuid_00000000000c2c82:
	mov -2984(%RBP),%RSP
	add $-3056, %RSP
uuid_00000000000c2c85:
	mov -2904(%RBP),%RSP
	add $-3056, %RSP
uuid_00000000000c2c88:
	mov -2896(%RBP),%RSP
	add $-3056, %RSP
	mov -2888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ca6
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -3136(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c8f
	jmp uuid_00000000000c2c91
uuid_00000000000c2c8f:
	push %RBP
	mov -3128(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2c8c
	jmp uuid_00000000000c2c8e
uuid_00000000000c2c8c:
	push %RBP
	pushq -3072(%RBP)
	pushq -3080(%RBP)
	pushq -3088(%RBP)
	pushq -3096(%RBP)
	pushq -3104(%RBP)
	pushq -3112(%RBP)
	pushq -3120(%RBP)
	jmp uuid_00000000000c2c89
	jmp uuid_00000000000c2c8b
uuid_00000000000c2c89:
	movb $1, -3144(%rbp)
uuid_00000000000c2c8b:
	mov -3240(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000c2c8e:
	mov -3160(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000c2c91:
	mov -3152(%RBP),%RSP
	add $-3296, %RSP
	mov -3144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ca3
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -3376(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c98
	jmp uuid_00000000000c2c9a
uuid_00000000000c2c98:
	push %RBP
	mov -3368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2c95
	jmp uuid_00000000000c2c97
uuid_00000000000c2c95:
	push %RBP
	mov -3360(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2c92
	jmp uuid_00000000000c2c94
uuid_00000000000c2c92:
	movb $1, -3384(%rbp)
uuid_00000000000c2c94:
	mov -3480(%RBP),%RSP
	add $-3552, %RSP
uuid_00000000000c2c97:
	mov -3400(%RBP),%RSP
	add $-3552, %RSP
uuid_00000000000c2c9a:
	mov -3392(%RBP),%RSP
	add $-3552, %RSP
	mov -3384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ca0
	push %RBP
	jmp uuid_00000000000c2c9d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2c9c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2c9f
uuid_00000000000c2c9d:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c2c9b
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2c9f:
	mov -3560(%RBP),%RSP
	add $-3560, %RSP
	jmp uuid_00000000000c2ca2
uuid_00000000000c2ca0:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3488(%rbp)
	pushq -3496(%rbp)
	pushq -3504(%rbp)
	pushq -3512(%rbp)
	pushq -3520(%rbp)
	pushq -3528(%rbp)
	pushq -3536(%rbp)
	pushq -3544(%rbp)
	pushq -3552(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3408(%rbp)
	pushq -3416(%rbp)
	pushq -3424(%rbp)
	pushq -3432(%rbp)
	pushq -3440(%rbp)
	pushq -3448(%rbp)
	pushq -3456(%rbp)
	pushq -3464(%rbp)
	pushq -3472(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c2ca2:
	mov -3304(%RBP),%RSP
	add $-3552, %RSP
	jmp uuid_00000000000c2ca5
uuid_00000000000c2ca3:
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3248(%rbp)
	pushq -3256(%rbp)
	pushq -3264(%rbp)
	pushq -3272(%rbp)
	pushq -3280(%rbp)
	pushq -3288(%rbp)
	pushq -3296(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3168(%rbp)
	pushq -3176(%rbp)
	pushq -3184(%rbp)
	pushq -3192(%rbp)
	pushq -3200(%rbp)
	pushq -3208(%rbp)
	pushq -3216(%rbp)
	pushq -3224(%rbp)
	pushq -3232(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c2ca5:
	mov -3064(%RBP),%RSP
	add $-3296, %RSP
	jmp uuid_00000000000c2ca8
uuid_00000000000c2ca6:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2992(%rbp)
	pushq -3000(%rbp)
	pushq -3008(%rbp)
	pushq -3016(%rbp)
	pushq -3024(%rbp)
	pushq -3032(%rbp)
	pushq -3040(%rbp)
	pushq -3048(%rbp)
	pushq -3056(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2912(%rbp)
	pushq -2920(%rbp)
	pushq -2928(%rbp)
	pushq -2936(%rbp)
	pushq -2944(%rbp)
	pushq -2952(%rbp)
	pushq -2960(%rbp)
	pushq -2968(%rbp)
	pushq -2976(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c2ca8:
	mov -2808(%RBP),%RSP
	add $-3056, %RSP
	jmp uuid_00000000000c2cab
uuid_00000000000c2ca9:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2736(%rbp)
	pushq -2744(%rbp)
	pushq -2752(%rbp)
	pushq -2760(%rbp)
	pushq -2768(%rbp)
	pushq -2776(%rbp)
	pushq -2784(%rbp)
	pushq -2792(%rbp)
	pushq -2800(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2656(%rbp)
	pushq -2664(%rbp)
	pushq -2672(%rbp)
	pushq -2680(%rbp)
	pushq -2688(%rbp)
	pushq -2696(%rbp)
	pushq -2704(%rbp)
	pushq -2712(%rbp)
	pushq -2720(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c2cab:
	mov -2552(%RBP),%RSP
	add $-2800, %RSP
	jmp uuid_00000000000c2cae
uuid_00000000000c2cac:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c2cae:
	mov -2424(%RBP),%RSP
	add $-2544, %RSP
	jmp uuid_00000000000c2cb1
uuid_00000000000c2caf:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-lhs : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	pushq -2408(%rbp)
	pushq -2416(%rbp)
	mov %RBX, %RBP
	call substitute_SB_lhs_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
	pushq -2336(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $5
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c2cb1:
	mov -2136(%RBP),%RSP
	add $-2416, %RSP
	jmp uuid_00000000000c2cb4
uuid_00000000000c2cb2:
	pushq -2128(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c2cb4:
	mov -1960(%RBP),%RSP
	add $-2128, %RSP
	jmp uuid_00000000000c2cb7
uuid_00000000000c2cb5:
	pushq -1952(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c2cb7:
	mov -1784(%RBP),%RSP
	add $-1952, %RSP
	jmp uuid_00000000000c2cba
uuid_00000000000c2cb8:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1176
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1600(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c2c50:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2c51
	jmp uuid_00000000000c2c52
uuid_00000000000c2c51:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	mov -2024(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c4d
	push %RBP
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq $0
	push %RBP
	mov -2152(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c43
	jmp uuid_00000000000c2c45
uuid_00000000000c2c43:
	push %RBP
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	jmp uuid_00000000000c2c40
	jmp uuid_00000000000c2c42
uuid_00000000000c2c40:
	push %RBP
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	jmp uuid_00000000000c2c3d
	jmp uuid_00000000000c2c3f
uuid_00000000000c2c3d:
	push %RBP
	mov -2048(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2c3a
	jmp uuid_00000000000c2c3c
uuid_00000000000c2c3a:
	push %RBP
	mov -2040(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2c37
	jmp uuid_00000000000c2c39
uuid_00000000000c2c37:
	movb $1, -2160(%rbp)
uuid_00000000000c2c39:
	mov -2304(%RBP),%RSP
	add $-2424, %RSP
uuid_00000000000c2c3c:
	mov -2288(%RBP),%RSP
	add $-2424, %RSP
uuid_00000000000c2c3f:
	mov -2256(%RBP),%RSP
	add $-2424, %RSP
uuid_00000000000c2c42:
	mov -2176(%RBP),%RSP
	add $-2424, %RSP
uuid_00000000000c2c45:
	mov -2168(%RBP),%RSP
	add $-2424, %RSP
	mov -2160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c4a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2c49
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2c4c
uuid_00000000000c2c4a:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2296(%rbp)
	pushq -1600(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2c46
	movq -2424(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -2416(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -2408(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -2400(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -2392(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -2384(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -2376(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2368(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -2360(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -2352(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -2344(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -2336(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -2328(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -2320(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -2312(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c2c48
uuid_00000000000c2c46:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1176
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2c48:
	mov -2432(%RBP),%RSP
	add $-2432, %RSP
uuid_00000000000c2c4c:
	mov -2032(%RBP),%RSP
	add $-2432, %RSP
	jmp uuid_00000000000c2c4f
uuid_00000000000c2c4d:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2c4f:
	mov -1904(%RBP),%RSP
	add $-2024, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000c2c50
uuid_00000000000c2c52:
uuid_00000000000c2cba:
	mov -1112(%RBP),%RSP
	add $-1776, %RSP
	jmp uuid_00000000000c2cbd
uuid_00000000000c2cbb:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1176
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c2c0a:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2c0b
	jmp uuid_00000000000c2c0c
uuid_00000000000c2c0b:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	mov -1352(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c07
	push %RBP
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq $0
	push %RBP
	mov -1480(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2bfd
	jmp uuid_00000000000c2bff
uuid_00000000000c2bfd:
	push %RBP
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	jmp uuid_00000000000c2bfa
	jmp uuid_00000000000c2bfc
uuid_00000000000c2bfa:
	push %RBP
	pushq -1384(%RBP)
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	jmp uuid_00000000000c2bf7
	jmp uuid_00000000000c2bf9
uuid_00000000000c2bf7:
	push %RBP
	mov -1376(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2bf4
	jmp uuid_00000000000c2bf6
uuid_00000000000c2bf4:
	push %RBP
	mov -1368(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2bf1
	jmp uuid_00000000000c2bf3
uuid_00000000000c2bf1:
	movb $1, -1488(%rbp)
uuid_00000000000c2bf3:
	mov -1632(%RBP),%RSP
	add $-1752, %RSP
uuid_00000000000c2bf6:
	mov -1616(%RBP),%RSP
	add $-1752, %RSP
uuid_00000000000c2bf9:
	mov -1584(%RBP),%RSP
	add $-1752, %RSP
uuid_00000000000c2bfc:
	mov -1504(%RBP),%RSP
	add $-1752, %RSP
uuid_00000000000c2bff:
	mov -1496(%RBP),%RSP
	add $-1752, %RSP
	mov -1488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c04
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2c03
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2c06
uuid_00000000000c2c04:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1624(%rbp)
	pushq -928(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2c00
	movq -1752(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1744(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1736(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1728(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1720(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1712(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1704(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1696(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1688(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1680(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1672(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1664(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1656(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1648(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1640(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c2c02
uuid_00000000000c2c00:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1176
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2c02:
	mov -1760(%RBP),%RSP
	add $-1760, %RSP
uuid_00000000000c2c06:
	mov -1360(%RBP),%RSP
	add $-1760, %RSP
	jmp uuid_00000000000c2c09
uuid_00000000000c2c07:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2c09:
	mov -1232(%RBP),%RSP
	add $-1352, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000c2c0a
uuid_00000000000c2c0c:
uuid_00000000000c2cbd:
	mov -440(%RBP),%RSP
	add $-1104, %RSP
	jmp uuid_00000000000c2cc0
uuid_00000000000c2cbe:
uuid_00000000000c2cc0:
	mov -360(%RBP),%RSP
	add $-432, %RSP
	jmp uuid_00000000000c2cc3
uuid_00000000000c2cc1:
uuid_00000000000c2cc3:
	mov -280(%RBP),%RSP
	add $-352, %RSP
	subq $72, %rsp
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $200, %rsp
	ret
substitute_CL_ArrowSConsSStringSList:
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2cf0
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	push %RBP
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2cc7
	jmp uuid_00000000000c2cc9
uuid_00000000000c2cc7:
	push %RBP
	mov -160(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2cc4
	jmp uuid_00000000000c2cc6
uuid_00000000000c2cc4:
	movb $1, -176(%rbp)
uuid_00000000000c2cc6:
	mov -192(%RBP),%RSP
	add $-200, %RSP
uuid_00000000000c2cc9:
	mov -184(%RBP),%RSP
	add $-200, %RSP
	mov -176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ced
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ce6
	jmp uuid_00000000000c2ce8
uuid_00000000000c2ce6:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2ce3
	jmp uuid_00000000000c2ce5
uuid_00000000000c2ce3:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2ce0
	jmp uuid_00000000000c2ce2
uuid_00000000000c2ce0:
	movb $1, -240(%rbp)
uuid_00000000000c2ce2:
	mov -288(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c2ce5:
	mov -256(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c2ce8:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2cea
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2ce9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2cec
uuid_00000000000c2cea:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<StringSList,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowSConsSStringSList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<StringSList,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowSConsSStringSList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c2cec:
	mov -208(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000c2cef
uuid_00000000000c2ced:
uuid_00000000000c2cdd:
#call function non-zero : Arrow<StringSList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64StringSList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2cde
	jmp uuid_00000000000c2cdf
uuid_00000000000c2cde:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2cd3
	jmp uuid_00000000000c2cd5
uuid_00000000000c2cd3:
	push %RBP
	pushq -280(%RBP)
	pushq -288(%RBP)
	pushq -296(%RBP)
	jmp uuid_00000000000c2cd0
	jmp uuid_00000000000c2cd2
uuid_00000000000c2cd0:
	push %RBP
	mov -272(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2ccd
	jmp uuid_00000000000c2ccf
uuid_00000000000c2ccd:
	push %RBP
	mov -264(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2cca
	jmp uuid_00000000000c2ccc
uuid_00000000000c2cca:
	movb $1, -312(%rbp)
uuid_00000000000c2ccc:
	mov -376(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c2ccf:
	mov -360(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c2cd2:
	mov -328(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c2cd5:
	mov -320(%RBP),%RSP
	add $-424, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2cda
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2cd9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2cdc
uuid_00000000000c2cda:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2cd6
	jmp uuid_00000000000c2cd8
uuid_00000000000c2cd6:
	movq -352(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -56(%rbp)
uuid_00000000000c2cd8:
	mov -432(%RBP),%RSP
	add $-432, %RSP
	movq -424(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -408(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -400(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -392(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c2cdc:
	mov -256(%RBP),%RSP
	add $-432, %RSP
	add $48, %rsp
	add $48, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2cdd
uuid_00000000000c2cdf:
uuid_00000000000c2cef:
	mov -144(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000c2cf2
uuid_00000000000c2cf0:
	pushq $0
	pushq $0
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c2cf2:
	mov -112(%RBP),%RSP
	add $-136, %RSP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	subq $24, %rsp
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
specialize_CL_ArrowNilConsTypeConsTContextConsTypeString:
	push %RBP
#call function is-special : Arrow<Cons<String,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_special_CL_ArrowU64ConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2d31
#call function normalize : Arrow<TContext,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	mov $global_SB_type_SB_context_CL_TContextTContextCaseNumber2, %r15
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000c2d2b:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2d2c
	jmp uuid_00000000000c2d2d
uuid_00000000000c2d2c:
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	push %RBP
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d28
	push %RBP
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq $0
	push %RBP
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2cff
	jmp uuid_00000000000c2d01
uuid_00000000000c2cff:
	push %RBP
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq -752(%RBP)
	jmp uuid_00000000000c2cfc
	jmp uuid_00000000000c2cfe
uuid_00000000000c2cfc:
	push %RBP
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	jmp uuid_00000000000c2cf9
	jmp uuid_00000000000c2cfb
uuid_00000000000c2cf9:
	push %RBP
	mov -656(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2cf6
	jmp uuid_00000000000c2cf8
uuid_00000000000c2cf6:
	push %RBP
	mov -648(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2cf3
	jmp uuid_00000000000c2cf5
uuid_00000000000c2cf3:
	movb $1, -768(%rbp)
uuid_00000000000c2cf5:
	mov -912(%RBP),%RSP
	add $-1032, %RSP
uuid_00000000000c2cf8:
	mov -896(%RBP),%RSP
	add $-1032, %RSP
uuid_00000000000c2cfb:
	mov -864(%RBP),%RSP
	add $-1032, %RSP
uuid_00000000000c2cfe:
	mov -784(%RBP),%RSP
	add $-1032, %RSP
uuid_00000000000c2d01:
	mov -776(%RBP),%RSP
	add $-1032, %RSP
	mov -768(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d25
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2d24
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2d27
uuid_00000000000c2d25:
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq $uuid_00000000000c13d4
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	popq -888(%RBP)
	popq -880(%RBP)
	popq -872(%RBP)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -904(%rbp)
	pushq -8(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2d21
	jmp uuid_00000000000c2d23
uuid_00000000000c2d21:
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2d1e
	jmp uuid_00000000000c2d20
uuid_00000000000c2d1e:
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	push %RBP
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq $0
	push %RBP
	mov -1200(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d14
	jmp uuid_00000000000c2d16
uuid_00000000000c2d14:
	push %RBP
	mov -1192(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1296(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d0b
	jmp uuid_00000000000c2d0d
uuid_00000000000c2d0b:
	push %RBP
	jmp uuid_00000000000c2d08
	jmp uuid_00000000000c2d0a
uuid_00000000000c2d08:
	push %RBP
	jmp uuid_00000000000c2d05
	jmp uuid_00000000000c2d07
uuid_00000000000c2d05:
	push %RBP
	jmp uuid_00000000000c2d02
	jmp uuid_00000000000c2d04
uuid_00000000000c2d02:
	movb $1, -1304(%rbp)
uuid_00000000000c2d04:
	mov -1336(%RBP),%RSP
	add $-1336, %RSP
uuid_00000000000c2d07:
	mov -1328(%RBP),%RSP
	add $-1336, %RSP
uuid_00000000000c2d0a:
	mov -1320(%RBP),%RSP
	add $-1336, %RSP
uuid_00000000000c2d0d:
	mov -1312(%RBP),%RSP
	add $-1336, %RSP
	mov -1304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d11
	jmp uuid_00000000000c2d13
uuid_00000000000c2d11:
	push %RBP
	jmp uuid_00000000000c2d0e
	jmp uuid_00000000000c2d10
uuid_00000000000c2d0e:
	movb $1, -1208(%rbp)
uuid_00000000000c2d10:
	mov -1344(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c2d13:
	mov -1224(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c2d16:
	mov -1216(%RBP),%RSP
	add $-1344, %RSP
	mov -1208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d1b
	push %RBP
	jmp uuid_00000000000c2d18
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2d17
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2d1a
uuid_00000000000c2d18:
uuid_00000000000c2d1a:
	mov -1352(%RBP),%RSP
	add $-1352, %RSP
	jmp uuid_00000000000c2d1d
uuid_00000000000c2d1b:
	movq -856(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -848(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -840(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -832(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -824(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -816(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -808(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -800(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -792(%rbp), %r15
	movq %r15, -200(%rbp)
uuid_00000000000c2d1d:
	mov -1128(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c2d20:
	mov -1048(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c2d23:
	mov -1040(%RBP),%RSP
	add $-1344, %RSP
	movq -1032(%rbp), %r15
	movq %r15, -384(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -376(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -368(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -360(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -344(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -976(%rbp), %r15
	movq %r15, -328(%rbp)
	movq -968(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -960(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -952(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -944(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -936(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -928(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -920(%rbp), %r15
	movq %r15, -272(%rbp)
uuid_00000000000c2d27:
	mov -640(%RBP),%RSP
	add $-1344, %RSP
	jmp uuid_00000000000c2d2a
uuid_00000000000c2d28:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
uuid_00000000000c2d2a:
	mov -512(%RBP),%RSP
	add $-632, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000c2d2b
uuid_00000000000c2d2d:
#call function mark-as-special : Arrow<Cons<String,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call mark_SB_as_SB_special_CL_ArrowNilConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2d2e
	jmp uuid_00000000000c2d30
uuid_00000000000c2d2e:
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
#call function infer-global-context : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call infer_SB_global_SB_context_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_type_SB_context_CL_TContextTContextCaseNumber2, %r15
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
uuid_00000000000c2d30:
	mov -392(%RBP),%RSP
	add $-464, %RSP
	jmp uuid_00000000000c2d33
uuid_00000000000c2d31:
uuid_00000000000c2d33:
	mov -192(%RBP),%RSP
	add $-192, %RSP
	mov %rbp, %rsp
	sub $184, %rsp
	ret
mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsU64ConsListTypeConsU64ConsStringType:
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d47
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d3d
	jmp uuid_00000000000c2d3f
uuid_00000000000c2d3d:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2d3a
	jmp uuid_00000000000c2d3c
uuid_00000000000c2d3a:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	jmp uuid_00000000000c2d37
	jmp uuid_00000000000c2d39
uuid_00000000000c2d37:
	movb $1, -240(%rbp)
uuid_00000000000c2d39:
	mov -304(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000c2d3c:
	mov -256(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000c2d3f:
	mov -248(%RBP),%RSP
	add $-328, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d44
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2d43
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2d46
uuid_00000000000c2d44:
	push %RBP
#call function is-parameter-flat : Arrow<Cons<Cons<String,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call is_SB_parameter_SB_flat_CL_ArrowU64ConsU64ConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2d40
	jmp uuid_00000000000c2d42
uuid_00000000000c2d40:
#call function mark-constructor-flat-parameters : Arrow<Cons<Type,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2d42:
	mov -336(%RBP),%RSP
	add $-336, %RSP
#call function mark-constructor-flat-parameters : Arrow<Cons<Cons<Cons<Cons<Type,String>,U64>,List<Type>>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	mov -88(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsU64ConsListTypeConsU64ConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2d46:
	mov -192(%RBP),%RSP
	add $-336, %RSP
	jmp uuid_00000000000c2d49
uuid_00000000000c2d47:
uuid_00000000000c2d49:
	mov -144(%RBP),%RSP
	add $-184, %RSP
	mov %rbp, %rsp
	sub $96, %rsp
	ret
mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsTypeType:
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d62
	jmp uuid_00000000000c2d64
uuid_00000000000c2d62:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d59
	jmp uuid_00000000000c2d5b
uuid_00000000000c2d59:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d50
	jmp uuid_00000000000c2d52
uuid_00000000000c2d50:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d4d
	jmp uuid_00000000000c2d4f
uuid_00000000000c2d4d:
	push %RBP
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	jmp uuid_00000000000c2d4a
	jmp uuid_00000000000c2d4c
uuid_00000000000c2d4a:
	movb $1, -248(%rbp)
uuid_00000000000c2d4c:
	mov -312(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c2d4f:
	mov -264(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c2d52:
	mov -256(%RBP),%RSP
	add $-336, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d56
	jmp uuid_00000000000c2d58
uuid_00000000000c2d56:
	push %RBP
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	jmp uuid_00000000000c2d53
	jmp uuid_00000000000c2d55
uuid_00000000000c2d53:
	movb $1, -184(%rbp)
uuid_00000000000c2d55:
	mov -344(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c2d58:
	mov -200(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c2d5b:
	mov -192(%RBP),%RSP
	add $-368, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d5f
	jmp uuid_00000000000c2d61
uuid_00000000000c2d5f:
	push %RBP
	mov -96(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000c1157
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2d5c
	jmp uuid_00000000000c2d5e
uuid_00000000000c2d5c:
	movb $1, -120(%rbp)
uuid_00000000000c2d5e:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c2d61:
	mov -136(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c2d64:
	mov -128(%RBP),%RSP
	add $-384, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d7e
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d6b
	jmp uuid_00000000000c2d6d
uuid_00000000000c2d6b:
	push %RBP
	mov -408(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2d68
	jmp uuid_00000000000c2d6a
uuid_00000000000c2d68:
	push %RBP
	mov -400(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2d65
	jmp uuid_00000000000c2d67
uuid_00000000000c2d65:
	movb $1, -424(%rbp)
uuid_00000000000c2d67:
	mov -488(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000c2d6a:
	mov -440(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000c2d6d:
	mov -432(%RBP),%RSP
	add $-496, %RSP
	mov -424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d7b
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d71
	jmp uuid_00000000000c2d73
uuid_00000000000c2d71:
	push %RBP
	mov -520(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2d6e
	jmp uuid_00000000000c2d70
uuid_00000000000c2d6e:
	movb $1, -536(%rbp)
uuid_00000000000c2d70:
	mov -552(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c2d73:
	mov -544(%RBP),%RSP
	add $-560, %RSP
	mov -536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d78
	push %RBP
	jmp uuid_00000000000c2d75
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2d74
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2d77
uuid_00000000000c2d75:
uuid_00000000000c2d77:
	mov -568(%RBP),%RSP
	add $-568, %RSP
	jmp uuid_00000000000c2d7a
uuid_00000000000c2d78:
#call function mark-parameter-flat : Arrow<Cons<Cons<String,U64>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function tag-of : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call tag_SB_of_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function arity : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call arity_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function parameter-number : Arrow<Cons<Type,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -560(%rbp)
	mov %RBX, %RBP
	call parameter_SB_number_CL_ArrowU64ConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call mark_SB_parameter_SB_flat_CL_ArrowNilConsU64ConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2d7a:
	mov -504(%RBP),%RSP
	add $-560, %RSP
	jmp uuid_00000000000c2d7d
uuid_00000000000c2d7b:
#call function mark-constructor-flat-parameters : Arrow<Cons<Cons<Cons<Cons<Type,String>,U64>,List<Type>>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -496(%rbp)
#call function arity : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call arity_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq $1
	mov %RBX, %RBP
	call mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsU64ConsListTypeConsU64ConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2d7d:
	mov -392(%RBP),%RSP
	add $-496, %RSP
	jmp uuid_00000000000c2d80
uuid_00000000000c2d7e:
#call function mark-constructor-flat-parameters : Arrow<Cons<Type,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	mov %RBX, %RBP
	call mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function mark-constructor-flat-parameters : Arrow<Cons<Type,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2d80:
	mov -88(%RBP),%RSP
	add $-384, %RSP
	mov %rbp, %rsp
	sub $56, %rsp
	ret
infer_SB_type_SB_constructor_CL_ArrowU64ConsASTType:
	pushq $0
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d87
	jmp uuid_00000000000c2d89
uuid_00000000000c2d87:
	push %RBP
	jmp uuid_00000000000c2d84
	jmp uuid_00000000000c2d86
uuid_00000000000c2d84:
	push %RBP
	mov -200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2d81
	jmp uuid_00000000000c2d83
uuid_00000000000c2d81:
	movb $1, -272(%rbp)
uuid_00000000000c2d83:
	mov -296(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000c2d86:
	mov -288(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000c2d89:
	mov -280(%RBP),%RSP
	add $-304, %RSP
	mov -272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2dab
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d99
	jmp uuid_00000000000c2d9b
uuid_00000000000c2d99:
	push %RBP
	mov -376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2d96
	jmp uuid_00000000000c2d98
uuid_00000000000c2d96:
	push %RBP
	mov -368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d90
	jmp uuid_00000000000c2d92
uuid_00000000000c2d90:
	push %RBP
	jmp uuid_00000000000c2d8d
	jmp uuid_00000000000c2d8f
uuid_00000000000c2d8d:
	push %RBP
	mov -496(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2d8a
	jmp uuid_00000000000c2d8c
uuid_00000000000c2d8a:
	movb $1, -568(%rbp)
uuid_00000000000c2d8c:
	mov -592(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000c2d8f:
	mov -584(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000c2d92:
	mov -576(%RBP),%RSP
	add $-600, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d93
	jmp uuid_00000000000c2d95
uuid_00000000000c2d93:
	movb $1, -392(%rbp)
uuid_00000000000c2d95:
	mov -488(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000c2d98:
	mov -408(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000c2d9b:
	mov -400(%RBP),%RSP
	add $-600, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2da8
	push %RBP
	jmp uuid_00000000000c2da5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2da4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2da7
uuid_00000000000c2da5:
uuid_00000000000c2da7:
	mov -608(%RBP),%RSP
	add $-608, %RSP
	jmp uuid_00000000000c2daa
uuid_00000000000c2da8:
#call function type-of-s-with-fields : Arrow<Cons<Cons<Cons<Type,String>,AST>,U64>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -600(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq $1
	mov %RBX, %RBP
	call type_SB_of_SB_s_SB_with_SB_fields_CL_ArrowTypeConsU64ConsASTConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -144(%RSP)
	push -144(%RSP)
	push -144(%RSP)
#call function mark-constructor-flat-parameters : Arrow<Cons<Type,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
#call function has-forward : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2d9d
	jmp uuid_00000000000c2d9f
uuid_00000000000c2d9d:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c2d9c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -600(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2d9f:
	mov -632(%RBP),%RSP
	add $-632, %RSP
	push %RBP
#call function has-infinite : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2da1
	jmp uuid_00000000000c2da3
uuid_00000000000c2da1:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c2da0
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -600(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2da3:
	mov -640(%RBP),%RSP
	add $-640, %RSP
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1572
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -600(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function set-type-fields : Arrow<Cons<Type,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call set_SB_type_SB_fields_CL_ArrowNilConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-class-of-tag : Arrow<Cons<String,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -600(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call index_SB_class_SB_of_SB_tag_CL_ArrowNilConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-fields-of-tag : Arrow<Cons<Cons<String,Type>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -600(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call index_SB_fields_SB_of_SB_tag_CL_ArrowNilConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function .bind : Arrow<Cons<Cons<Array<BTreeEq<String,Type>,?>,String>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov	$type_SB_constructors_SB_index_CL_BTreeEqTypeStringBTreeEqTypeStringCaseNumber0, %r12
	push %R12
	pushq -600(%rbp)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c13d4
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowNilConsTypeConsStringArray_QM_BTreeEqTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -112(%rbp)
	mov -112(%RBP), %RAX
	mov $8, %R14
	addq %R14,%RAX
	movq %RAX, -112(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1391
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -600(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
uuid_00000000000c2daa:
	mov -312(%RBP),%RSP
	add $-688, %RSP
	jmp uuid_00000000000c2dad
uuid_00000000000c2dab:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1572
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1774
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1391
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1392
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1394
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d80
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function index-class-of-tag : Arrow<Cons<String,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call index_SB_class_SB_of_SB_tag_CL_ArrowNilConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-fields-of-tag : Arrow<Cons<Cons<String,Type>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq $0
	pushq $0
	pushq $3
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1139
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call index_SB_fields_SB_of_SB_tag_CL_ArrowNilConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function .bind : Arrow<Cons<Cons<Array<BTreeEq<String,Type>,?>,String>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov	$type_SB_constructors_SB_index_CL_BTreeEqTypeStringBTreeEqTypeStringCaseNumber0, %r12
	push %R12
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowNilConsTypeConsStringArray_QM_BTreeEqTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq $8, -112(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1391
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
uuid_00000000000c2dad:
	mov -192(%RBP),%RSP
	add $-352, %RSP
	mov -112(%rbp), %RAX
	mov %rbp, %rsp
	sub $104, %rsp
	ret
infer_SB_global_SB_context_CL_ArrowNilAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2dbd
	jmp uuid_00000000000c2dbf
uuid_00000000000c2dbd:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2dba
	jmp uuid_00000000000c2dbc
uuid_00000000000c2dba:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2db4
	jmp uuid_00000000000c2db6
uuid_00000000000c2db4:
	push %RBP
	jmp uuid_00000000000c2db1
	jmp uuid_00000000000c2db3
uuid_00000000000c2db1:
	push %RBP
	mov -344(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2dae
	jmp uuid_00000000000c2db0
uuid_00000000000c2dae:
	movb $1, -416(%rbp)
uuid_00000000000c2db0:
	mov -440(%RBP),%RSP
	add $-448, %RSP
uuid_00000000000c2db3:
	mov -432(%RBP),%RSP
	add $-448, %RSP
uuid_00000000000c2db6:
	mov -424(%RBP),%RSP
	add $-448, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2db7
	jmp uuid_00000000000c2db9
uuid_00000000000c2db7:
	movb $1, -240(%rbp)
uuid_00000000000c2db9:
	mov -336(%RBP),%RSP
	add $-448, %RSP
uuid_00000000000c2dbc:
	mov -256(%RBP),%RSP
	add $-448, %RSP
uuid_00000000000c2dbf:
	mov -248(%RBP),%RSP
	add $-448, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e66
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e0f
	jmp uuid_00000000000c2e11
uuid_00000000000c2e0f:
	push %RBP
	mov -520(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2dfa
	jmp uuid_00000000000c2dfc
uuid_00000000000c2dfa:
	push %RBP
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq -688(%RBP)
	jmp uuid_00000000000c2df7
	jmp uuid_00000000000c2df9
uuid_00000000000c2df7:
	push %RBP
	mov -664(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -824(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2dee
	jmp uuid_00000000000c2df0
uuid_00000000000c2dee:
	push %RBP
	mov -816(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ddc
	jmp uuid_00000000000c2dde
uuid_00000000000c2ddc:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1016(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2dd3
	jmp uuid_00000000000c2dd5
uuid_00000000000c2dd3:
	push %RBP
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	jmp uuid_00000000000c2dd0
	jmp uuid_00000000000c2dd2
uuid_00000000000c2dd0:
	movb $1, -1024(%rbp)
uuid_00000000000c2dd2:
	mov -1040(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000c2dd5:
	mov -1032(%RBP),%RSP
	add $-1064, %RSP
	mov -1024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2dd9
	jmp uuid_00000000000c2ddb
uuid_00000000000c2dd9:
	push %RBP
	mov -904(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2dd6
	jmp uuid_00000000000c2dd8
uuid_00000000000c2dd6:
	movb $1, -928(%rbp)
uuid_00000000000c2dd8:
	mov -1072(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000c2ddb:
	mov -944(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000c2dde:
	mov -936(%RBP),%RSP
	add $-1144, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2deb
	jmp uuid_00000000000c2ded
uuid_00000000000c2deb:
	push %RBP
	mov -808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1224(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2de5
	jmp uuid_00000000000c2de7
uuid_00000000000c2de5:
	push %RBP
	jmp uuid_00000000000c2de2
	jmp uuid_00000000000c2de4
uuid_00000000000c2de2:
	push %RBP
	mov -1160(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1264(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2ddf
	jmp uuid_00000000000c2de1
uuid_00000000000c2ddf:
	movb $1, -1232(%rbp)
uuid_00000000000c2de1:
	mov -1256(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c2de4:
	mov -1248(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c2de7:
	mov -1240(%RBP),%RSP
	add $-1264, %RSP
	mov -1232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2de8
	jmp uuid_00000000000c2dea
uuid_00000000000c2de8:
	movb $1, -832(%rbp)
uuid_00000000000c2dea:
	mov -1152(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c2ded:
	mov -848(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c2df0:
	mov -840(%RBP),%RSP
	add $-1264, %RSP
	mov -832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2df4
	jmp uuid_00000000000c2df6
uuid_00000000000c2df4:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2df1
	jmp uuid_00000000000c2df3
uuid_00000000000c2df1:
	movb $1, -704(%rbp)
uuid_00000000000c2df3:
	mov -1272(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c2df6:
	mov -752(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c2df9:
	mov -720(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c2dfc:
	mov -712(%RBP),%RSP
	add $-1344, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e0c
	jmp uuid_00000000000c2e0e
uuid_00000000000c2e0c:
	push %RBP
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq $0
	push %RBP
	mov -1408(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e06
	jmp uuid_00000000000c2e08
uuid_00000000000c2e06:
	push %RBP
	jmp uuid_00000000000c2e03
	jmp uuid_00000000000c2e05
uuid_00000000000c2e03:
	push %RBP
	jmp uuid_00000000000c2e00
	jmp uuid_00000000000c2e02
uuid_00000000000c2e00:
	push %RBP
	mov -1360(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2dfd
	jmp uuid_00000000000c2dff
uuid_00000000000c2dfd:
	movb $1, -1416(%rbp)
uuid_00000000000c2dff:
	mov -1448(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c2e02:
	mov -1440(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c2e05:
	mov -1432(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c2e08:
	mov -1424(%RBP),%RSP
	add $-1456, %RSP
	mov -1416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e09
	jmp uuid_00000000000c2e0b
uuid_00000000000c2e09:
	movb $1, -536(%rbp)
uuid_00000000000c2e0b:
	mov -1352(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c2e0e:
	mov -552(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c2e11:
	mov -544(%RBP),%RSP
	add $-1456, %RSP
	mov -536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e63
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1536(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e4c
	jmp uuid_00000000000c2e4e
uuid_00000000000c2e4c:
	push %RBP
	mov -1528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1632(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e37
	jmp uuid_00000000000c2e39
uuid_00000000000c2e37:
	push %RBP
	mov -1624(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1728(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e25
	jmp uuid_00000000000c2e27
uuid_00000000000c2e25:
	push %RBP
	mov -1720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1824(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e1c
	jmp uuid_00000000000c2e1e
uuid_00000000000c2e1c:
	push %RBP
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	jmp uuid_00000000000c2e19
	jmp uuid_00000000000c2e1b
uuid_00000000000c2e19:
	movb $1, -1832(%rbp)
uuid_00000000000c2e1b:
	mov -1848(%RBP),%RSP
	add $-1872, %RSP
uuid_00000000000c2e1e:
	mov -1840(%RBP),%RSP
	add $-1872, %RSP
	mov -1832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e22
	jmp uuid_00000000000c2e24
uuid_00000000000c2e22:
	push %RBP
	mov -1712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2e1f
	jmp uuid_00000000000c2e21
uuid_00000000000c2e1f:
	movb $1, -1736(%rbp)
uuid_00000000000c2e21:
	mov -1880(%RBP),%RSP
	add $-1952, %RSP
uuid_00000000000c2e24:
	mov -1752(%RBP),%RSP
	add $-1952, %RSP
uuid_00000000000c2e27:
	mov -1744(%RBP),%RSP
	add $-1952, %RSP
	mov -1736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e34
	jmp uuid_00000000000c2e36
uuid_00000000000c2e34:
	push %RBP
	mov -1616(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2032(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e2e
	jmp uuid_00000000000c2e30
uuid_00000000000c2e2e:
	push %RBP
	jmp uuid_00000000000c2e2b
	jmp uuid_00000000000c2e2d
uuid_00000000000c2e2b:
	push %RBP
	mov -1968(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2072(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2e28
	jmp uuid_00000000000c2e2a
uuid_00000000000c2e28:
	movb $1, -2040(%rbp)
uuid_00000000000c2e2a:
	mov -2064(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000c2e2d:
	mov -2056(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000c2e30:
	mov -2048(%RBP),%RSP
	add $-2072, %RSP
	mov -2040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e31
	jmp uuid_00000000000c2e33
uuid_00000000000c2e31:
	movb $1, -1640(%rbp)
uuid_00000000000c2e33:
	mov -1960(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000c2e36:
	mov -1656(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000c2e39:
	mov -1648(%RBP),%RSP
	add $-2072, %RSP
	mov -1640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e49
	jmp uuid_00000000000c2e4b
uuid_00000000000c2e49:
	push %RBP
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	pushq $0
	push %RBP
	mov -2136(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e43
	jmp uuid_00000000000c2e45
uuid_00000000000c2e43:
	push %RBP
	jmp uuid_00000000000c2e40
	jmp uuid_00000000000c2e42
uuid_00000000000c2e40:
	push %RBP
	jmp uuid_00000000000c2e3d
	jmp uuid_00000000000c2e3f
uuid_00000000000c2e3d:
	push %RBP
	mov -2088(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2e3a
	jmp uuid_00000000000c2e3c
uuid_00000000000c2e3a:
	movb $1, -2144(%rbp)
uuid_00000000000c2e3c:
	mov -2176(%RBP),%RSP
	add $-2184, %RSP
uuid_00000000000c2e3f:
	mov -2168(%RBP),%RSP
	add $-2184, %RSP
uuid_00000000000c2e42:
	mov -2160(%RBP),%RSP
	add $-2184, %RSP
uuid_00000000000c2e45:
	mov -2152(%RBP),%RSP
	add $-2184, %RSP
	mov -2144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e46
	jmp uuid_00000000000c2e48
uuid_00000000000c2e46:
	movb $1, -1544(%rbp)
uuid_00000000000c2e48:
	mov -2080(%RBP),%RSP
	add $-2184, %RSP
uuid_00000000000c2e4b:
	mov -1560(%RBP),%RSP
	add $-2184, %RSP
uuid_00000000000c2e4e:
	mov -1552(%RBP),%RSP
	add $-2184, %RSP
	mov -1544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e60
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -2264(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e55
	jmp uuid_00000000000c2e57
uuid_00000000000c2e55:
	push %RBP
	jmp uuid_00000000000c2e52
	jmp uuid_00000000000c2e54
uuid_00000000000c2e52:
	push %RBP
	jmp uuid_00000000000c2e4f
	jmp uuid_00000000000c2e51
uuid_00000000000c2e4f:
	movb $1, -2272(%rbp)
uuid_00000000000c2e51:
	mov -2296(%RBP),%RSP
	add $-2296, %RSP
uuid_00000000000c2e54:
	mov -2288(%RBP),%RSP
	add $-2296, %RSP
uuid_00000000000c2e57:
	mov -2280(%RBP),%RSP
	add $-2296, %RSP
	mov -2272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e5d
	push %RBP
	jmp uuid_00000000000c2e5a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2e59
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2e5c
uuid_00000000000c2e5a:
uuid_00000000000c2e5c:
	mov -2304(%RBP),%RSP
	add $-2304, %RSP
	jmp uuid_00000000000c2e5f
uuid_00000000000c2e5d:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c2e58
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2e5f:
	mov -2192(%RBP),%RSP
	add $-2296, %RSP
	jmp uuid_00000000000c2e62
uuid_00000000000c2e60:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1155
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_type_SB_context_CL_TContextTContextCaseNumber2, %r15
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	mov $global_SB_type_SB_context_CL_TContextTContextCaseNumber2, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
#call function mark-global-as-seen : Arrow<Cons<Cons<String,Type>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call mark_SB_global_SB_as_SB_seen_CL_ArrowNilConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2e62:
	mov -1464(%RBP),%RSP
	add $-2208, %RSP
	jmp uuid_00000000000c2e65
uuid_00000000000c2e63:
#call function typeof-lhs : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	mov %RBX, %RBP
	call typeof_SB_lhs_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2e12
#call function guess-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call guess_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1504(%RBP)
	popq -1496(%RBP)
	popq -1488(%RBP)
	jmp uuid_00000000000c2e14
uuid_00000000000c2e12:
uuid_00000000000c2e14:
	mov -1512(%RBP),%RSP
	add $-1512, %RSP
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c13d4
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function enrich : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call enrich_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -1536(%RBP)
	popq -1528(%RBP)
	popq -1520(%RBP)
	push %RBP
#call function is-nil : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	mov %RBX, %RBP
	call is_SB_nil_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e16
	jmp uuid_00000000000c2e18
uuid_00000000000c2e16:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c2e15
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2e18:
	mov -1544(%RBP),%RSP
	add $-1544, %RSP
#call function mark-global-as-seen : Arrow<Cons<Cons<String,Type>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1456(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call mark_SB_global_SB_as_SB_seen_CL_ArrowNilConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_type_SB_context_CL_TContextTContextCaseNumber2, %r15
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1456(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	mov $global_SB_type_SB_context_CL_TContextTContextCaseNumber2, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
uuid_00000000000c2e65:
	mov -456(%RBP),%RSP
	add $-1544, %RSP
	jmp uuid_00000000000c2e68
uuid_00000000000c2e66:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -448(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
#call function infer-type-definition : Arrow<Cons<Cons<Type,AST>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq $0
	mov %RBX, %RBP
	call infer_SB_type_SB_definition_CL_ArrowU64ConsU64ConsASTType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	push %RBP
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2dc6
	jmp uuid_00000000000c2dc8
uuid_00000000000c2dc6:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2dc3
	jmp uuid_00000000000c2dc5
uuid_00000000000c2dc3:
	push %RBP
	mov -520(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2dc0
	jmp uuid_00000000000c2dc2
uuid_00000000000c2dc0:
	movb $1, -544(%rbp)
uuid_00000000000c2dc2:
	mov -608(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c2dc5:
	mov -560(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c2dc8:
	mov -552(%RBP),%RSP
	add $-616, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2dcd
	push %RBP
	jmp uuid_00000000000c2dca
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2dc9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2dcc
uuid_00000000000c2dca:
uuid_00000000000c2dcc:
	mov -624(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000c2dcf
uuid_00000000000c2dcd:
#call function index-size-of-class : Arrow<Cons<String,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -616(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call index_SB_size_SB_of_SB_class_CL_ArrowNilConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2dcf:
	mov -512(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c2e68:
	mov -160(%RBP),%RSP
	add $-616, %RSP
	mov %rbp, %rsp
	sub $80, %rsp
	ret
assert_SB_well_SB_typed_CL_ArrowNilAST:
uuid_00000000000c2e76:
#call function is-seq : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call is_SB_seq_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2e77
	jmp uuid_00000000000c2e78
uuid_00000000000c2e77:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e6f
	jmp uuid_00000000000c2e71
uuid_00000000000c2e6f:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2e6c
	jmp uuid_00000000000c2e6e
uuid_00000000000c2e6c:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2e69
	jmp uuid_00000000000c2e6b
uuid_00000000000c2e69:
	movb $1, -240(%rbp)
uuid_00000000000c2e6b:
	mov -336(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000c2e6e:
	mov -256(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000c2e71:
	mov -248(%RBP),%RSP
	add $-408, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e73
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2e72
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2e75
uuid_00000000000c2e73:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -408(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -400(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -392(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c2e75:
	mov -160(%RBP),%RSP
	add $-408, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2e76
uuid_00000000000c2e78:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ff9
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ff6
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e7f
	jmp uuid_00000000000c2e81
uuid_00000000000c2e7f:
	push %RBP
	mov -384(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2e7c
	jmp uuid_00000000000c2e7e
uuid_00000000000c2e7c:
	push %RBP
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	jmp uuid_00000000000c2e79
	jmp uuid_00000000000c2e7b
uuid_00000000000c2e79:
	movb $1, -400(%rbp)
uuid_00000000000c2e7b:
	mov -496(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000c2e7e:
	mov -416(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000c2e81:
	mov -408(%RBP),%RSP
	add $-552, %RSP
	mov -400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ff3
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e8b
	jmp uuid_00000000000c2e8d
uuid_00000000000c2e8b:
	push %RBP
	jmp uuid_00000000000c2e88
	jmp uuid_00000000000c2e8a
uuid_00000000000c2e88:
	push %RBP
	jmp uuid_00000000000c2e85
	jmp uuid_00000000000c2e87
uuid_00000000000c2e85:
	movb $1, -640(%rbp)
uuid_00000000000c2e87:
	mov -664(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c2e8a:
	mov -656(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c2e8d:
	mov -648(%RBP),%RSP
	add $-664, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ff0
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -744(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ea9
	jmp uuid_00000000000c2eab
uuid_00000000000c2ea9:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2ea6
	jmp uuid_00000000000c2ea8
uuid_00000000000c2ea6:
	push %RBP
	mov -728(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ea0
	jmp uuid_00000000000c2ea2
uuid_00000000000c2ea0:
	push %RBP
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	jmp uuid_00000000000c2e9d
	jmp uuid_00000000000c2e9f
uuid_00000000000c2e9d:
	push %RBP
	mov -888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1048(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e9a
	jmp uuid_00000000000c2e9c
uuid_00000000000c2e9a:
	push %RBP
	mov -880(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1128(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e94
	jmp uuid_00000000000c2e96
uuid_00000000000c2e94:
	push %RBP
	jmp uuid_00000000000c2e91
	jmp uuid_00000000000c2e93
uuid_00000000000c2e91:
	push %RBP
	mov -1064(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2e8e
	jmp uuid_00000000000c2e90
uuid_00000000000c2e8e:
	movb $1, -1136(%rbp)
uuid_00000000000c2e90:
	mov -1160(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c2e93:
	mov -1152(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c2e96:
	mov -1144(%RBP),%RSP
	add $-1168, %RSP
	mov -1136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e97
	jmp uuid_00000000000c2e99
uuid_00000000000c2e97:
	movb $1, -928(%rbp)
uuid_00000000000c2e99:
	mov -1056(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c2e9c:
	mov -976(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c2e9f:
	mov -944(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c2ea2:
	mov -936(%RBP),%RSP
	add $-1168, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ea3
	jmp uuid_00000000000c2ea5
uuid_00000000000c2ea3:
	movb $1, -752(%rbp)
uuid_00000000000c2ea5:
	mov -848(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c2ea8:
	mov -768(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c2eab:
	mov -760(%RBP),%RSP
	add $-1168, %RSP
	mov -752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2fed
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1248(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ebb
	jmp uuid_00000000000c2ebd
uuid_00000000000c2ebb:
	push %RBP
	jmp uuid_00000000000c2eb8
	jmp uuid_00000000000c2eba
uuid_00000000000c2eb8:
	push %RBP
	mov -1232(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1352(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2eb2
	jmp uuid_00000000000c2eb4
uuid_00000000000c2eb2:
	push %RBP
	jmp uuid_00000000000c2eaf
	jmp uuid_00000000000c2eb1
uuid_00000000000c2eaf:
	push %RBP
	mov -1288(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1392(%rbp)
	pushq $uuid_00000000000c11e2
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2eac
	jmp uuid_00000000000c2eae
uuid_00000000000c2eac:
	movb $1, -1360(%rbp)
uuid_00000000000c2eae:
	mov -1384(%RBP),%RSP
	add $-1392, %RSP
uuid_00000000000c2eb1:
	mov -1376(%RBP),%RSP
	add $-1392, %RSP
uuid_00000000000c2eb4:
	mov -1368(%RBP),%RSP
	add $-1392, %RSP
	mov -1360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2eb5
	jmp uuid_00000000000c2eb7
uuid_00000000000c2eb5:
	movb $1, -1256(%rbp)
uuid_00000000000c2eb7:
	mov -1280(%RBP),%RSP
	add $-1392, %RSP
uuid_00000000000c2eba:
	mov -1272(%RBP),%RSP
	add $-1392, %RSP
uuid_00000000000c2ebd:
	mov -1264(%RBP),%RSP
	add $-1392, %RSP
	mov -1256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2fea
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1472(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ed6
	jmp uuid_00000000000c2ed8
uuid_00000000000c2ed6:
	push %RBP
	mov -1464(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1568(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ec4
	jmp uuid_00000000000c2ec6
uuid_00000000000c2ec4:
	push %RBP
	jmp uuid_00000000000c2ec1
	jmp uuid_00000000000c2ec3
uuid_00000000000c2ec1:
	push %RBP
	jmp uuid_00000000000c2ebe
	jmp uuid_00000000000c2ec0
uuid_00000000000c2ebe:
	movb $1, -1576(%rbp)
uuid_00000000000c2ec0:
	mov -1600(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000c2ec3:
	mov -1592(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000c2ec6:
	mov -1584(%RBP),%RSP
	add $-1600, %RSP
	mov -1576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ed3
	jmp uuid_00000000000c2ed5
uuid_00000000000c2ed3:
	push %RBP
	mov -1456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1680(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ecd
	jmp uuid_00000000000c2ecf
uuid_00000000000c2ecd:
	push %RBP
	jmp uuid_00000000000c2eca
	jmp uuid_00000000000c2ecc
uuid_00000000000c2eca:
	push %RBP
	mov -1616(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1720(%rbp)
	pushq $uuid_00000000000c11ff
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2ec7
	jmp uuid_00000000000c2ec9
uuid_00000000000c2ec7:
	movb $1, -1688(%rbp)
uuid_00000000000c2ec9:
	mov -1712(%RBP),%RSP
	add $-1720, %RSP
uuid_00000000000c2ecc:
	mov -1704(%RBP),%RSP
	add $-1720, %RSP
uuid_00000000000c2ecf:
	mov -1696(%RBP),%RSP
	add $-1720, %RSP
	mov -1688(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ed0
	jmp uuid_00000000000c2ed2
uuid_00000000000c2ed0:
	movb $1, -1480(%rbp)
uuid_00000000000c2ed2:
	mov -1608(%RBP),%RSP
	add $-1720, %RSP
uuid_00000000000c2ed5:
	mov -1496(%RBP),%RSP
	add $-1720, %RSP
uuid_00000000000c2ed8:
	mov -1488(%RBP),%RSP
	add $-1720, %RSP
	mov -1480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2fe7
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1800(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ef7
	jmp uuid_00000000000c2ef9
uuid_00000000000c2ef7:
	push %RBP
	mov -1792(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1896(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ee5
	jmp uuid_00000000000c2ee7
uuid_00000000000c2ee5:
	push %RBP
	mov -1888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1992(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2edc
	jmp uuid_00000000000c2ede
uuid_00000000000c2edc:
	push %RBP
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	jmp uuid_00000000000c2ed9
	jmp uuid_00000000000c2edb
uuid_00000000000c2ed9:
	movb $1, -2000(%rbp)
uuid_00000000000c2edb:
	mov -2016(%RBP),%RSP
	add $-2040, %RSP
uuid_00000000000c2ede:
	mov -2008(%RBP),%RSP
	add $-2040, %RSP
	mov -2000(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ee2
	jmp uuid_00000000000c2ee4
uuid_00000000000c2ee2:
	push %RBP
	mov -1880(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2edf
	jmp uuid_00000000000c2ee1
uuid_00000000000c2edf:
	movb $1, -1904(%rbp)
uuid_00000000000c2ee1:
	mov -2048(%RBP),%RSP
	add $-2120, %RSP
uuid_00000000000c2ee4:
	mov -1920(%RBP),%RSP
	add $-2120, %RSP
uuid_00000000000c2ee7:
	mov -1912(%RBP),%RSP
	add $-2120, %RSP
	mov -1904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ef4
	jmp uuid_00000000000c2ef6
uuid_00000000000c2ef4:
	push %RBP
	mov -1784(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2200(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2eee
	jmp uuid_00000000000c2ef0
uuid_00000000000c2eee:
	push %RBP
	jmp uuid_00000000000c2eeb
	jmp uuid_00000000000c2eed
uuid_00000000000c2eeb:
	push %RBP
	mov -2136(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2240(%rbp)
	pushq $uuid_00000000000c0f7e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2ee8
	jmp uuid_00000000000c2eea
uuid_00000000000c2ee8:
	movb $1, -2208(%rbp)
uuid_00000000000c2eea:
	mov -2232(%RBP),%RSP
	add $-2240, %RSP
uuid_00000000000c2eed:
	mov -2224(%RBP),%RSP
	add $-2240, %RSP
uuid_00000000000c2ef0:
	mov -2216(%RBP),%RSP
	add $-2240, %RSP
	mov -2208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ef1
	jmp uuid_00000000000c2ef3
uuid_00000000000c2ef1:
	movb $1, -1808(%rbp)
uuid_00000000000c2ef3:
	mov -2128(%RBP),%RSP
	add $-2240, %RSP
uuid_00000000000c2ef6:
	mov -1824(%RBP),%RSP
	add $-2240, %RSP
uuid_00000000000c2ef9:
	mov -1816(%RBP),%RSP
	add $-2240, %RSP
	mov -1808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2fe4
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -2320(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f18
	jmp uuid_00000000000c2f1a
uuid_00000000000c2f18:
	push %RBP
	mov -2312(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2416(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f06
	jmp uuid_00000000000c2f08
uuid_00000000000c2f06:
	push %RBP
	mov -2408(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2512(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2efd
	jmp uuid_00000000000c2eff
uuid_00000000000c2efd:
	push %RBP
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	jmp uuid_00000000000c2efa
	jmp uuid_00000000000c2efc
uuid_00000000000c2efa:
	movb $1, -2520(%rbp)
uuid_00000000000c2efc:
	mov -2536(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c2eff:
	mov -2528(%RBP),%RSP
	add $-2560, %RSP
	mov -2520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f03
	jmp uuid_00000000000c2f05
uuid_00000000000c2f03:
	push %RBP
	mov -2400(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2f00
	jmp uuid_00000000000c2f02
uuid_00000000000c2f00:
	movb $1, -2424(%rbp)
uuid_00000000000c2f02:
	mov -2568(%RBP),%RSP
	add $-2640, %RSP
uuid_00000000000c2f05:
	mov -2440(%RBP),%RSP
	add $-2640, %RSP
uuid_00000000000c2f08:
	mov -2432(%RBP),%RSP
	add $-2640, %RSP
	mov -2424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f15
	jmp uuid_00000000000c2f17
uuid_00000000000c2f15:
	push %RBP
	mov -2304(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2720(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f0f
	jmp uuid_00000000000c2f11
uuid_00000000000c2f0f:
	push %RBP
	jmp uuid_00000000000c2f0c
	jmp uuid_00000000000c2f0e
uuid_00000000000c2f0c:
	push %RBP
	mov -2656(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2760(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2f09
	jmp uuid_00000000000c2f0b
uuid_00000000000c2f09:
	movb $1, -2728(%rbp)
uuid_00000000000c2f0b:
	mov -2752(%RBP),%RSP
	add $-2760, %RSP
uuid_00000000000c2f0e:
	mov -2744(%RBP),%RSP
	add $-2760, %RSP
uuid_00000000000c2f11:
	mov -2736(%RBP),%RSP
	add $-2760, %RSP
	mov -2728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f12
	jmp uuid_00000000000c2f14
uuid_00000000000c2f12:
	movb $1, -2328(%rbp)
uuid_00000000000c2f14:
	mov -2648(%RBP),%RSP
	add $-2760, %RSP
uuid_00000000000c2f17:
	mov -2344(%RBP),%RSP
	add $-2760, %RSP
uuid_00000000000c2f1a:
	mov -2336(%RBP),%RSP
	add $-2760, %RSP
	mov -2328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2fe1
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -2840(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f3c
	jmp uuid_00000000000c2f3e
uuid_00000000000c2f3c:
	push %RBP
	mov -2832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2f39
	jmp uuid_00000000000c2f3b
uuid_00000000000c2f39:
	push %RBP
	mov -2824(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3016(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f33
	jmp uuid_00000000000c2f35
uuid_00000000000c2f33:
	push %RBP
	mov -3008(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2f30
	jmp uuid_00000000000c2f32
uuid_00000000000c2f30:
	push %RBP
	mov -3000(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3192(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f2a
	jmp uuid_00000000000c2f2c
uuid_00000000000c2f2a:
	push %RBP
	mov -3184(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2f27
	jmp uuid_00000000000c2f29
uuid_00000000000c2f27:
	push %RBP
	mov -3176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3368(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f21
	jmp uuid_00000000000c2f23
uuid_00000000000c2f21:
	push %RBP
	jmp uuid_00000000000c2f1e
	jmp uuid_00000000000c2f20
uuid_00000000000c2f1e:
	push %RBP
	mov -3304(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3408(%rbp)
	pushq $uuid_00000000000c1212
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2f1b
	jmp uuid_00000000000c2f1d
uuid_00000000000c2f1b:
	movb $1, -3376(%rbp)
uuid_00000000000c2f1d:
	mov -3400(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000c2f20:
	mov -3392(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000c2f23:
	mov -3384(%RBP),%RSP
	add $-3408, %RSP
	mov -3376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f24
	jmp uuid_00000000000c2f26
uuid_00000000000c2f24:
	movb $1, -3200(%rbp)
uuid_00000000000c2f26:
	mov -3296(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000c2f29:
	mov -3216(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000c2f2c:
	mov -3208(%RBP),%RSP
	add $-3408, %RSP
	mov -3200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f2d
	jmp uuid_00000000000c2f2f
uuid_00000000000c2f2d:
	movb $1, -3024(%rbp)
uuid_00000000000c2f2f:
	mov -3120(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000c2f32:
	mov -3040(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000c2f35:
	mov -3032(%RBP),%RSP
	add $-3408, %RSP
	mov -3024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f36
	jmp uuid_00000000000c2f38
uuid_00000000000c2f36:
	movb $1, -2848(%rbp)
uuid_00000000000c2f38:
	mov -2944(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000c2f3b:
	mov -2864(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000c2f3e:
	mov -2856(%RBP),%RSP
	add $-3408, %RSP
	mov -2848(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2fde
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -3488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f58
	jmp uuid_00000000000c2f5a
uuid_00000000000c2f58:
	push %RBP
	mov -3480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2f55
	jmp uuid_00000000000c2f57
uuid_00000000000c2f55:
	push %RBP
	mov -3472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3664(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f4f
	jmp uuid_00000000000c2f51
uuid_00000000000c2f4f:
	push %RBP
	mov -3656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2f4c
	jmp uuid_00000000000c2f4e
uuid_00000000000c2f4c:
	push %RBP
	mov -3648(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3840(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f46
	jmp uuid_00000000000c2f48
uuid_00000000000c2f46:
	push %RBP
	jmp uuid_00000000000c2f43
	jmp uuid_00000000000c2f45
uuid_00000000000c2f43:
	push %RBP
	mov -3776(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3880(%rbp)
	pushq $uuid_00000000000c2f3f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2f40
	jmp uuid_00000000000c2f42
uuid_00000000000c2f40:
	movb $1, -3848(%rbp)
uuid_00000000000c2f42:
	mov -3872(%RBP),%RSP
	add $-3880, %RSP
uuid_00000000000c2f45:
	mov -3864(%RBP),%RSP
	add $-3880, %RSP
uuid_00000000000c2f48:
	mov -3856(%RBP),%RSP
	add $-3880, %RSP
	mov -3848(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f49
	jmp uuid_00000000000c2f4b
uuid_00000000000c2f49:
	movb $1, -3672(%rbp)
uuid_00000000000c2f4b:
	mov -3768(%RBP),%RSP
	add $-3880, %RSP
uuid_00000000000c2f4e:
	mov -3688(%RBP),%RSP
	add $-3880, %RSP
uuid_00000000000c2f51:
	mov -3680(%RBP),%RSP
	add $-3880, %RSP
	mov -3672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f52
	jmp uuid_00000000000c2f54
uuid_00000000000c2f52:
	movb $1, -3496(%rbp)
uuid_00000000000c2f54:
	mov -3592(%RBP),%RSP
	add $-3880, %RSP
uuid_00000000000c2f57:
	mov -3512(%RBP),%RSP
	add $-3880, %RSP
uuid_00000000000c2f5a:
	mov -3504(%RBP),%RSP
	add $-3880, %RSP
	mov -3496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2fdb
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -3960(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f5e
	jmp uuid_00000000000c2f60
uuid_00000000000c2f5e:
	push %RBP
	jmp uuid_00000000000c2f5b
	jmp uuid_00000000000c2f5d
uuid_00000000000c2f5b:
	movb $1, -3968(%rbp)
uuid_00000000000c2f5d:
	mov -3984(%RBP),%RSP
	add $-3984, %RSP
uuid_00000000000c2f60:
	mov -3976(%RBP),%RSP
	add $-3984, %RSP
	mov -3968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2fd8
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -4064(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f70
	jmp uuid_00000000000c2f72
uuid_00000000000c2f70:
	push %RBP
	mov -4056(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2f6d
	jmp uuid_00000000000c2f6f
uuid_00000000000c2f6d:
	push %RBP
	mov -4048(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4240(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f67
	jmp uuid_00000000000c2f69
uuid_00000000000c2f67:
	push %RBP
	jmp uuid_00000000000c2f64
	jmp uuid_00000000000c2f66
uuid_00000000000c2f64:
	push %RBP
	mov -4176(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4280(%rbp)
	pushq $uuid_00000000000c12be
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2f61
	jmp uuid_00000000000c2f63
uuid_00000000000c2f61:
	movb $1, -4248(%rbp)
uuid_00000000000c2f63:
	mov -4272(%RBP),%RSP
	add $-4280, %RSP
uuid_00000000000c2f66:
	mov -4264(%RBP),%RSP
	add $-4280, %RSP
uuid_00000000000c2f69:
	mov -4256(%RBP),%RSP
	add $-4280, %RSP
	mov -4248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f6a
	jmp uuid_00000000000c2f6c
uuid_00000000000c2f6a:
	movb $1, -4072(%rbp)
uuid_00000000000c2f6c:
	mov -4168(%RBP),%RSP
	add $-4280, %RSP
uuid_00000000000c2f6f:
	mov -4088(%RBP),%RSP
	add $-4280, %RSP
uuid_00000000000c2f72:
	mov -4080(%RBP),%RSP
	add $-4280, %RSP
	mov -4072(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2fd5
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -4360(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f82
	jmp uuid_00000000000c2f84
uuid_00000000000c2f82:
	push %RBP
	mov -4352(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2f7f
	jmp uuid_00000000000c2f81
uuid_00000000000c2f7f:
	push %RBP
	mov -4344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4536(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f79
	jmp uuid_00000000000c2f7b
uuid_00000000000c2f79:
	push %RBP
	jmp uuid_00000000000c2f76
	jmp uuid_00000000000c2f78
uuid_00000000000c2f76:
	push %RBP
	mov -4472(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4576(%rbp)
	pushq $uuid_00000000000c12ab
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2f73
	jmp uuid_00000000000c2f75
uuid_00000000000c2f73:
	movb $1, -4544(%rbp)
uuid_00000000000c2f75:
	mov -4568(%RBP),%RSP
	add $-4576, %RSP
uuid_00000000000c2f78:
	mov -4560(%RBP),%RSP
	add $-4576, %RSP
uuid_00000000000c2f7b:
	mov -4552(%RBP),%RSP
	add $-4576, %RSP
	mov -4544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f7c
	jmp uuid_00000000000c2f7e
uuid_00000000000c2f7c:
	movb $1, -4368(%rbp)
uuid_00000000000c2f7e:
	mov -4464(%RBP),%RSP
	add $-4576, %RSP
uuid_00000000000c2f81:
	mov -4384(%RBP),%RSP
	add $-4576, %RSP
uuid_00000000000c2f84:
	mov -4376(%RBP),%RSP
	add $-4576, %RSP
	mov -4368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2fd2
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -4656(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f8b
	jmp uuid_00000000000c2f8d
uuid_00000000000c2f8b:
	push %RBP
	jmp uuid_00000000000c2f88
	jmp uuid_00000000000c2f8a
uuid_00000000000c2f88:
	push %RBP
	mov -4592(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2f85
	jmp uuid_00000000000c2f87
uuid_00000000000c2f85:
	movb $1, -4664(%rbp)
uuid_00000000000c2f87:
	mov -4688(%RBP),%RSP
	add $-4696, %RSP
uuid_00000000000c2f8a:
	mov -4680(%RBP),%RSP
	add $-4696, %RSP
uuid_00000000000c2f8d:
	mov -4672(%RBP),%RSP
	add $-4696, %RSP
	mov -4664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2fcf
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -4776(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f94
	jmp uuid_00000000000c2f96
uuid_00000000000c2f94:
	push %RBP
	jmp uuid_00000000000c2f91
	jmp uuid_00000000000c2f93
uuid_00000000000c2f91:
	push %RBP
	mov -4712(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2f8e
	jmp uuid_00000000000c2f90
uuid_00000000000c2f8e:
	movb $1, -4784(%rbp)
uuid_00000000000c2f90:
	mov -4808(%RBP),%RSP
	add $-4816, %RSP
uuid_00000000000c2f93:
	mov -4800(%RBP),%RSP
	add $-4816, %RSP
uuid_00000000000c2f96:
	mov -4792(%RBP),%RSP
	add $-4816, %RSP
	mov -4784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2fcc
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -4896(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2fa0
	jmp uuid_00000000000c2fa2
uuid_00000000000c2fa0:
	push %RBP
	pushq -4872(%RBP)
	pushq -4880(%RBP)
	pushq -4888(%RBP)
	jmp uuid_00000000000c2f9d
	jmp uuid_00000000000c2f9f
uuid_00000000000c2f9d:
	push %RBP
	mov -4864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2f9a
	jmp uuid_00000000000c2f9c
uuid_00000000000c2f9a:
	push %RBP
	mov -4856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2f97
	jmp uuid_00000000000c2f99
uuid_00000000000c2f97:
	movb $1, -4904(%rbp)
uuid_00000000000c2f99:
	mov -5032(%RBP),%RSP
	add $-5104, %RSP
uuid_00000000000c2f9c:
	mov -4952(%RBP),%RSP
	add $-5104, %RSP
uuid_00000000000c2f9f:
	mov -4920(%RBP),%RSP
	add $-5104, %RSP
uuid_00000000000c2fa2:
	mov -4912(%RBP),%RSP
	add $-5104, %RSP
	mov -4904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2fc9
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -5184(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2fa9
	jmp uuid_00000000000c2fab
uuid_00000000000c2fa9:
	push %RBP
	mov -5176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2fa6
	jmp uuid_00000000000c2fa8
uuid_00000000000c2fa6:
	push %RBP
	mov -5168(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2fa3
	jmp uuid_00000000000c2fa5
uuid_00000000000c2fa3:
	movb $1, -5192(%rbp)
uuid_00000000000c2fa5:
	mov -5288(%RBP),%RSP
	add $-5360, %RSP
uuid_00000000000c2fa8:
	mov -5208(%RBP),%RSP
	add $-5360, %RSP
uuid_00000000000c2fab:
	mov -5200(%RBP),%RSP
	add $-5360, %RSP
	mov -5192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2fc6
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -5440(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2fb2
	jmp uuid_00000000000c2fb4
uuid_00000000000c2fb2:
	push %RBP
	mov -5432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2faf
	jmp uuid_00000000000c2fb1
uuid_00000000000c2faf:
	push %RBP
	mov -5424(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2fac
	jmp uuid_00000000000c2fae
uuid_00000000000c2fac:
	movb $1, -5448(%rbp)
uuid_00000000000c2fae:
	mov -5544(%RBP),%RSP
	add $-5616, %RSP
uuid_00000000000c2fb1:
	mov -5464(%RBP),%RSP
	add $-5616, %RSP
uuid_00000000000c2fb4:
	mov -5456(%RBP),%RSP
	add $-5616, %RSP
	mov -5448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2fc3
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -5696(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2fb8
	jmp uuid_00000000000c2fba
uuid_00000000000c2fb8:
	push %RBP
	jmp uuid_00000000000c2fb5
	jmp uuid_00000000000c2fb7
uuid_00000000000c2fb5:
	movb $1, -5704(%rbp)
uuid_00000000000c2fb7:
	mov -5720(%RBP),%RSP
	add $-5720, %RSP
uuid_00000000000c2fba:
	mov -5712(%RBP),%RSP
	add $-5720, %RSP
	mov -5704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2fc0
	push %RBP
	jmp uuid_00000000000c2fbd
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c2fbc
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2fbf
uuid_00000000000c2fbd:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c2fbb
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2fbf:
	mov -5728(%RBP),%RSP
	add $-5728, %RSP
	jmp uuid_00000000000c2fc2
uuid_00000000000c2fc0:
uuid_00000000000c2fc2:
	mov -5624(%RBP),%RSP
	add $-5720, %RSP
	jmp uuid_00000000000c2fc5
uuid_00000000000c2fc3:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	pushq -5592(%rbp)
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5472(%rbp)
	pushq -5480(%rbp)
	pushq -5488(%rbp)
	pushq -5496(%rbp)
	pushq -5504(%rbp)
	pushq -5512(%rbp)
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2fc5:
	mov -5368(%RBP),%RSP
	add $-5616, %RSP
	jmp uuid_00000000000c2fc8
uuid_00000000000c2fc6:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5296(%rbp)
	pushq -5304(%rbp)
	pushq -5312(%rbp)
	pushq -5320(%rbp)
	pushq -5328(%rbp)
	pushq -5336(%rbp)
	pushq -5344(%rbp)
	pushq -5352(%rbp)
	pushq -5360(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	pushq -5264(%rbp)
	pushq -5272(%rbp)
	pushq -5280(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2fc8:
	mov -5112(%RBP),%RSP
	add $-5360, %RSP
	jmp uuid_00000000000c2fcb
uuid_00000000000c2fc9:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -4976(%rbp)
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2fcb:
	mov -4824(%RBP),%RSP
	add $-5104, %RSP
	jmp uuid_00000000000c2fce
uuid_00000000000c2fcc:
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2fce:
	mov -4704(%RBP),%RSP
	add $-4816, %RSP
	jmp uuid_00000000000c2fd1
uuid_00000000000c2fcf:
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2fd1:
	mov -4584(%RBP),%RSP
	add $-4696, %RSP
	jmp uuid_00000000000c2fd4
uuid_00000000000c2fd2:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	pushq -4408(%rbp)
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2fd4:
	mov -4288(%RBP),%RSP
	add $-4576, %RSP
	jmp uuid_00000000000c2fd7
uuid_00000000000c2fd5:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4096(%rbp)
	pushq -4104(%rbp)
	pushq -4112(%rbp)
	pushq -4120(%rbp)
	pushq -4128(%rbp)
	pushq -4136(%rbp)
	pushq -4144(%rbp)
	pushq -4152(%rbp)
	pushq -4160(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2fd7:
	mov -3992(%RBP),%RSP
	add $-4280, %RSP
	jmp uuid_00000000000c2fda
uuid_00000000000c2fd8:
uuid_00000000000c2fda:
	mov -3888(%RBP),%RSP
	add $-3984, %RSP
	jmp uuid_00000000000c2fdd
uuid_00000000000c2fdb:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3520(%rbp)
	pushq -3528(%rbp)
	pushq -3536(%rbp)
	pushq -3544(%rbp)
	pushq -3552(%rbp)
	pushq -3560(%rbp)
	pushq -3568(%rbp)
	pushq -3576(%rbp)
	pushq -3584(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2fdd:
	mov -3416(%RBP),%RSP
	add $-3880, %RSP
	jmp uuid_00000000000c2fe0
uuid_00000000000c2fde:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3224(%rbp)
	pushq -3232(%rbp)
	pushq -3240(%rbp)
	pushq -3248(%rbp)
	pushq -3256(%rbp)
	pushq -3264(%rbp)
	pushq -3272(%rbp)
	pushq -3280(%rbp)
	pushq -3288(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3048(%rbp)
	pushq -3056(%rbp)
	pushq -3064(%rbp)
	pushq -3072(%rbp)
	pushq -3080(%rbp)
	pushq -3088(%rbp)
	pushq -3096(%rbp)
	pushq -3104(%rbp)
	pushq -3112(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2872(%rbp)
	pushq -2880(%rbp)
	pushq -2888(%rbp)
	pushq -2896(%rbp)
	pushq -2904(%rbp)
	pushq -2912(%rbp)
	pushq -2920(%rbp)
	pushq -2928(%rbp)
	pushq -2936(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2fe0:
	mov -2768(%RBP),%RSP
	add $-3408, %RSP
	jmp uuid_00000000000c2fe3
uuid_00000000000c2fe1:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	pushq -2592(%rbp)
	pushq -2600(%rbp)
	pushq -2608(%rbp)
	pushq -2616(%rbp)
	pushq -2624(%rbp)
	pushq -2632(%rbp)
	pushq -2640(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2fe3:
	mov -2248(%RBP),%RSP
	add $-2760, %RSP
	jmp uuid_00000000000c2fe6
uuid_00000000000c2fe4:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2fe6:
	mov -1728(%RBP),%RSP
	add $-2240, %RSP
	jmp uuid_00000000000c2fe9
uuid_00000000000c2fe7:
uuid_00000000000c2fe9:
	mov -1400(%RBP),%RSP
	add $-1720, %RSP
	jmp uuid_00000000000c2fec
uuid_00000000000c2fea:
uuid_00000000000c2fec:
	mov -1176(%RBP),%RSP
	add $-1392, %RSP
	jmp uuid_00000000000c2fef
uuid_00000000000c2fed:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2fef:
	mov -672(%RBP),%RSP
	add $-1168, %RSP
	jmp uuid_00000000000c2ff2
uuid_00000000000c2ff0:
uuid_00000000000c2ff2:
	mov -560(%RBP),%RSP
	add $-664, %RSP
	jmp uuid_00000000000c2ff5
uuid_00000000000c2ff3:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2e82
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2e84
uuid_00000000000c2e82:
uuid_00000000000c2e84:
	mov -560(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c2ff5:
	mov -320(%RBP),%RSP
	add $-560, %RSP
	jmp uuid_00000000000c2ff8
uuid_00000000000c2ff6:
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2ff8:
	mov -240(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000c2ffb
uuid_00000000000c2ff9:
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2ffb:
	mov -160(%RBP),%RSP
	add $-232, %RSP
	mov %rbp, %rsp
	sub $80, %rsp
	ret
assert_SB_one_SB_typed_CL_ArrowNilAST:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2ffc
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1339
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2ffe
uuid_00000000000c2ffc:
uuid_00000000000c2ffe:
	mov -88(%RBP),%RSP
	add $-88, %RSP
	mov %rbp, %rsp
	sub $80, %rsp
	ret
infer_SB_ctx_CL_ArrowTContextConsASTTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3026
	jmp uuid_00000000000c3028
uuid_00000000000c3026:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3014
	jmp uuid_00000000000c3016
uuid_00000000000c3014:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3002
	jmp uuid_00000000000c3004
uuid_00000000000c3002:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000c2fff
	jmp uuid_00000000000c3001
uuid_00000000000c2fff:
	movb $1, -552(%rbp)
uuid_00000000000c3001:
	mov -568(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c3004:
	mov -560(%RBP),%RSP
	add $-592, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3011
	jmp uuid_00000000000c3013
uuid_00000000000c3011:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c300b
	jmp uuid_00000000000c300d
uuid_00000000000c300b:
	push %RBP
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	jmp uuid_00000000000c3008
	jmp uuid_00000000000c300a
uuid_00000000000c3008:
	push %RBP
	mov -608(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3005
	jmp uuid_00000000000c3007
uuid_00000000000c3005:
	movb $1, -680(%rbp)
uuid_00000000000c3007:
	mov -760(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c300a:
	mov -696(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c300d:
	mov -688(%RBP),%RSP
	add $-768, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c300e
	jmp uuid_00000000000c3010
uuid_00000000000c300e:
	movb $1, -456(%rbp)
uuid_00000000000c3010:
	mov -600(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c3013:
	mov -472(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c3016:
	mov -464(%RBP),%RSP
	add $-768, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3023
	jmp uuid_00000000000c3025
uuid_00000000000c3023:
	push %RBP
	mov -336(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c301d
	jmp uuid_00000000000c301f
uuid_00000000000c301d:
	push %RBP
	jmp uuid_00000000000c301a
	jmp uuid_00000000000c301c
uuid_00000000000c301a:
	push %RBP
	mov -784(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -888(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3017
	jmp uuid_00000000000c3019
uuid_00000000000c3017:
	movb $1, -856(%rbp)
uuid_00000000000c3019:
	mov -880(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c301c:
	mov -872(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c301f:
	mov -864(%RBP),%RSP
	add $-888, %RSP
	mov -856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3020
	jmp uuid_00000000000c3022
uuid_00000000000c3020:
	movb $1, -360(%rbp)
uuid_00000000000c3022:
	mov -776(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c3025:
	mov -376(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c3028:
	mov -368(%RBP),%RSP
	add $-888, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3067
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -968(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3059
	jmp uuid_00000000000c305b
uuid_00000000000c3059:
	push %RBP
	mov -960(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1064(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3050
	jmp uuid_00000000000c3052
uuid_00000000000c3050:
	push %RBP
	mov -1056(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1160(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c303e
	jmp uuid_00000000000c3040
uuid_00000000000c303e:
	push %RBP
	mov -1152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1256(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c302c
	jmp uuid_00000000000c302e
uuid_00000000000c302c:
	push %RBP
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	jmp uuid_00000000000c3029
	jmp uuid_00000000000c302b
uuid_00000000000c3029:
	movb $1, -1264(%rbp)
uuid_00000000000c302b:
	mov -1280(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c302e:
	mov -1272(%RBP),%RSP
	add $-1304, %RSP
	mov -1264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c303b
	jmp uuid_00000000000c303d
uuid_00000000000c303b:
	push %RBP
	mov -1144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1384(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3035
	jmp uuid_00000000000c3037
uuid_00000000000c3035:
	push %RBP
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	jmp uuid_00000000000c3032
	jmp uuid_00000000000c3034
uuid_00000000000c3032:
	push %RBP
	mov -1320(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c302f
	jmp uuid_00000000000c3031
uuid_00000000000c302f:
	movb $1, -1392(%rbp)
uuid_00000000000c3031:
	mov -1472(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c3034:
	mov -1408(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c3037:
	mov -1400(%RBP),%RSP
	add $-1480, %RSP
	mov -1392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3038
	jmp uuid_00000000000c303a
uuid_00000000000c3038:
	movb $1, -1168(%rbp)
uuid_00000000000c303a:
	mov -1312(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c303d:
	mov -1184(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c3040:
	mov -1176(%RBP),%RSP
	add $-1480, %RSP
	mov -1168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c304d
	jmp uuid_00000000000c304f
uuid_00000000000c304d:
	push %RBP
	mov -1048(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1560(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3047
	jmp uuid_00000000000c3049
uuid_00000000000c3047:
	push %RBP
	jmp uuid_00000000000c3044
	jmp uuid_00000000000c3046
uuid_00000000000c3044:
	push %RBP
	mov -1496(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1600(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3041
	jmp uuid_00000000000c3043
uuid_00000000000c3041:
	movb $1, -1568(%rbp)
uuid_00000000000c3043:
	mov -1592(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000c3046:
	mov -1584(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000c3049:
	mov -1576(%RBP),%RSP
	add $-1600, %RSP
	mov -1568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c304a
	jmp uuid_00000000000c304c
uuid_00000000000c304a:
	movb $1, -1072(%rbp)
uuid_00000000000c304c:
	mov -1488(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000c304f:
	mov -1088(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000c3052:
	mov -1080(%RBP),%RSP
	add $-1600, %RSP
	mov -1072(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3056
	jmp uuid_00000000000c3058
uuid_00000000000c3056:
	push %RBP
	mov -952(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3053
	jmp uuid_00000000000c3055
uuid_00000000000c3053:
	movb $1, -976(%rbp)
uuid_00000000000c3055:
	mov -1608(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000c3058:
	mov -992(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000c305b:
	mov -984(%RBP),%RSP
	add $-1680, %RSP
	mov -976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3064
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov -1760(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3061
	push %RBP
	jmp uuid_00000000000c305e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c305d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3060
uuid_00000000000c305e:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c305c
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c3060:
	mov -1768(%RBP),%RSP
	add $-1768, %RSP
	jmp uuid_00000000000c3063
uuid_00000000000c3061:
uuid_00000000000c3063:
	mov -1688(%RBP),%RSP
	add $-1760, %RSP
	jmp uuid_00000000000c3066
uuid_00000000000c3064:
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1304(%RBP)
	popq -1296(%RBP)
	popq -1288(%RBP)
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1480(%rbp)
#call function as-local-variable : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	mov %RBX, %RBP
	call as_SB_local_SB_variable_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -1480(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq $7
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function infer-ctx : Arrow<Cons<TContext,AST>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	mov %RBX, %RBP
	call infer_SB_ctx_CL_ArrowTContextConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function infer-tctx : Arrow<Cons<TContext,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c3066:
	mov -896(%RBP),%RSP
	add $-1680, %RSP
	jmp uuid_00000000000c3069
uuid_00000000000c3067:
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -768(%rbp)
#call function as-local-variable : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call as_SB_local_SB_variable_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -768(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq $7
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function infer-tctx : Arrow<Cons<TContext,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c3069:
	mov -280(%RBP),%RSP
	add $-888, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $200, %rsp
	ret
infer_SB_tctx_CL_ArrowTContextConsListTypeTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3079
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3072
	jmp uuid_00000000000c3074
uuid_00000000000c3072:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c306f
	jmp uuid_00000000000c3071
uuid_00000000000c306f:
	push %RBP
	pushq -272(%RBP)
	pushq -280(%RBP)
	pushq -288(%RBP)
	jmp uuid_00000000000c306c
	jmp uuid_00000000000c306e
uuid_00000000000c306c:
	movb $1, -312(%rbp)
uuid_00000000000c306e:
	mov -376(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000c3071:
	mov -328(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000c3074:
	mov -320(%RBP),%RSP
	add $-400, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3076
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3075
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3078
uuid_00000000000c3076:
#call function infer-tctx : Arrow<Cons<TContext,List<Type>>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsListTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function infer-tctx : Arrow<Cons<TContext,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c3078:
	mov -264(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000c307b
uuid_00000000000c3079:
uuid_00000000000c307b:
	mov -216(%RBP),%RSP
	add $-256, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $168, %rsp
	ret
infer_SB_tctx_CL_ArrowTContextConsTypeTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3082
	jmp uuid_00000000000c3084
uuid_00000000000c3082:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c307f
	jmp uuid_00000000000c3081
uuid_00000000000c307f:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c307c
	jmp uuid_00000000000c307e
uuid_00000000000c307c:
	movb $1, -216(%rbp)
uuid_00000000000c307e:
	mov -264(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c3081:
	mov -232(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c3084:
	mov -224(%RBP),%RSP
	add $-288, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c309e
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -320(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3088
	jmp uuid_00000000000c308a
uuid_00000000000c3088:
	push %RBP
	mov -312(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3085
	jmp uuid_00000000000c3087
uuid_00000000000c3085:
	movb $1, -328(%rbp)
uuid_00000000000c3087:
	mov -344(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c308a:
	mov -336(%RBP),%RSP
	add $-352, %RSP
	mov -328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c309b
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3091
	jmp uuid_00000000000c3093
uuid_00000000000c3091:
	push %RBP
	mov -376(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c308e
	jmp uuid_00000000000c3090
uuid_00000000000c308e:
	push %RBP
	jmp uuid_00000000000c308b
	jmp uuid_00000000000c308d
uuid_00000000000c308b:
	movb $1, -392(%rbp)
uuid_00000000000c308d:
	mov -456(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000c3090:
	mov -408(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000c3093:
	mov -400(%RBP),%RSP
	add $-456, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3098
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3095
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3094
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3097
uuid_00000000000c3095:
uuid_00000000000c3097:
	mov -464(%RBP),%RSP
	add $-488, %RSP
	jmp uuid_00000000000c309a
uuid_00000000000c3098:
#call function infer-tctx : Arrow<Cons<TContext,List<Type>>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsListTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c309a:
	mov -360(%RBP),%RSP
	add $-456, %RSP
	jmp uuid_00000000000c309d
uuid_00000000000c309b:
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -352(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1774
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c309d:
	mov -296(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000c30a0
uuid_00000000000c309e:
#call function infer-tctx : Arrow<Cons<TContext,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function infer-tctx : Arrow<Cons<TContext,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c30a0:
	mov -184(%RBP),%RSP
	add $-288, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $152, %rsp
	ret
compile_SB_exit_SB_cleanup_CL_ArrowSNil:
	pushq $0
	pushq $0
	pushq $3
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c30a1
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c30a2
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c30a3
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	subq $24, %rsp
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_data_SB_header_CL_ArrowSNil:
	pushq $0
	pushq $0
	pushq $3
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c30a4
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	subq $24, %rsp
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_text_SB_header_CL_ArrowSNil:
	pushq $0
	pushq $0
	pushq $3
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c30a5
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c30a6
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c30a7
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_init_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c30aa
	jmp uuid_00000000000c30ac
uuid_00000000000c30aa:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c30a8
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_init_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c30a9
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
uuid_00000000000c30ac:
	mov -40(%RBP),%RSP
	add $-40, %RSP
	push %RBP
	mov $main_SB_with_SB_argv_CL_U8, %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c30af
	jmp uuid_00000000000c30b1
uuid_00000000000c30af:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c30ad
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c30ae
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
uuid_00000000000c30b1:
	mov -48(%RBP),%RSP
	add $-48, %RSP
	push %RBP
	mov $main_SB_with_CL_U8, %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c30bc
	jmp uuid_00000000000c30be
uuid_00000000000c30bc:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c30b2
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c30b3
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	push %RBP
	mov $main_SB_with_SB_argv_CL_U8, %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c30b6
	jmp uuid_00000000000c30b8
uuid_00000000000c30b6:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c30b4
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c30b5
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
uuid_00000000000c30b8:
	mov -64(%RBP),%RSP
	add $-64, %RSP
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c30b9
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c30ba
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c30bb
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
uuid_00000000000c30be:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	subq $24, %rsp
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_CL_ArrowNilNil:
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleModeCaseNumber1, %r15
	pushq 0(%r15)
	push %RBP
	pushq -16(%rbp)
	mov -32(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c30c3
	push %RBP
	pushq -16(%rbp)
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c30c0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c30bf
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c30c2
uuid_00000000000c30c0:
#call function compile-blob : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_blob_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c30c2:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	jmp uuid_00000000000c30c5
uuid_00000000000c30c3:
#call function compile-gnu : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_gnu_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c30c5:
	mov -24(%RBP),%RSP
	add $-32, %RSP
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_blob_CL_ArrowNilNil:
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000c311e:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c311f
	jmp uuid_00000000000c3120
uuid_00000000000c311f:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c30d5
	jmp uuid_00000000000c30d7
uuid_00000000000c30d5:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c30cc
	jmp uuid_00000000000c30ce
uuid_00000000000c30cc:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c30c9
	jmp uuid_00000000000c30cb
uuid_00000000000c30c9:
	push %RBP
	mov -312(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c30c6
	jmp uuid_00000000000c30c8
uuid_00000000000c30c6:
	movb $1, -336(%rbp)
uuid_00000000000c30c8:
	mov -432(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c30cb:
	mov -352(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c30ce:
	mov -344(%RBP),%RSP
	add $-504, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c30d2
	jmp uuid_00000000000c30d4
uuid_00000000000c30d2:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c30cf
	jmp uuid_00000000000c30d1
uuid_00000000000c30cf:
	movb $1, -240(%rbp)
uuid_00000000000c30d1:
	mov -512(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c30d4:
	mov -256(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c30d7:
	mov -248(%RBP),%RSP
	add $-584, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c311b
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c30f3
	jmp uuid_00000000000c30f5
uuid_00000000000c30f3:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c30ea
	jmp uuid_00000000000c30ec
uuid_00000000000c30ea:
	push %RBP
	mov -752(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c30e7
	jmp uuid_00000000000c30e9
uuid_00000000000c30e7:
	push %RBP
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c30e1
	jmp uuid_00000000000c30e3
uuid_00000000000c30e1:
	push %RBP
	jmp uuid_00000000000c30de
	jmp uuid_00000000000c30e0
uuid_00000000000c30de:
	push %RBP
	jmp uuid_00000000000c30db
	jmp uuid_00000000000c30dd
uuid_00000000000c30db:
	push %RBP
	mov -872(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c30d8
	jmp uuid_00000000000c30da
uuid_00000000000c30d8:
	movb $1, -928(%rbp)
uuid_00000000000c30da:
	mov -960(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c30dd:
	mov -952(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c30e0:
	mov -944(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c30e3:
	mov -936(%RBP),%RSP
	add $-968, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c30e4
	jmp uuid_00000000000c30e6
uuid_00000000000c30e4:
	movb $1, -768(%rbp)
uuid_00000000000c30e6:
	mov -864(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c30e9:
	mov -784(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c30ec:
	mov -776(%RBP),%RSP
	add $-968, %RSP
	mov -768(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c30f0
	jmp uuid_00000000000c30f2
uuid_00000000000c30f0:
	push %RBP
	mov -648(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c30ed
	jmp uuid_00000000000c30ef
uuid_00000000000c30ed:
	movb $1, -672(%rbp)
uuid_00000000000c30ef:
	mov -976(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000c30f2:
	mov -688(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000c30f5:
	mov -680(%RBP),%RSP
	add $-1048, %RSP
	mov -672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3118
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1128(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3111
	jmp uuid_00000000000c3113
uuid_00000000000c3111:
	push %RBP
	mov -1120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c310e
	jmp uuid_00000000000c3110
uuid_00000000000c310e:
	push %RBP
	mov -1112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c310b
	jmp uuid_00000000000c310d
uuid_00000000000c310b:
	movb $1, -1136(%rbp)
uuid_00000000000c310d:
	mov -1232(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c3110:
	mov -1152(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c3113:
	mov -1144(%RBP),%RSP
	add $-1304, %RSP
	mov -1136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3115
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3114
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3117
uuid_00000000000c3115:
	movq -1304(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1296(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1288(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c3117:
	mov -1056(%RBP),%RSP
	add $-1304, %RSP
	jmp uuid_00000000000c311a
uuid_00000000000c3118:
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	push %RBP
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq $0
	push %RBP
	mov -1200(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c30ff
	jmp uuid_00000000000c3101
uuid_00000000000c30ff:
	push %RBP
	jmp uuid_00000000000c30fc
	jmp uuid_00000000000c30fe
uuid_00000000000c30fc:
	push %RBP
	jmp uuid_00000000000c30f9
	jmp uuid_00000000000c30fb
uuid_00000000000c30f9:
	push %RBP
	jmp uuid_00000000000c30f6
	jmp uuid_00000000000c30f8
uuid_00000000000c30f6:
	movb $1, -1208(%rbp)
uuid_00000000000c30f8:
	mov -1240(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000c30fb:
	mov -1232(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000c30fe:
	mov -1224(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000c3101:
	mov -1216(%RBP),%RSP
	add $-1240, %RSP
	mov -1208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3108
	push %RBP
	jmp uuid_00000000000c3105
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3104
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3107
uuid_00000000000c3105:
uuid_00000000000c3107:
	mov -1248(%RBP),%RSP
	add $-1248, %RSP
	jmp uuid_00000000000c310a
uuid_00000000000c3108:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq $uuid_00000000000c3102
	pushq $0
	pushq $uuid_00000000000c3103
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1392(%RBP)
	popq -1384(%RBP)
	popq -1376(%RBP)
	popq -1368(%RBP)
	popq -1360(%RBP)
	popq -1352(%RBP)
	popq -1344(%RBP)
	popq -1336(%RBP)
	popq -1328(%RBP)
	popq -1320(%RBP)
	popq -1312(%RBP)
	popq -1304(%RBP)
	popq -1296(%RBP)
	popq -1288(%RBP)
	popq -1280(%RBP)
	popq -1272(%RBP)
	popq -1264(%RBP)
	popq -1256(%RBP)
	popq -1248(%RBP)
#call function fragment::set-term : Arrow<Cons<Fragment,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_term_CL_ArrowFragmentConsASTFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	popq -1392(%RBP)
	popq -1384(%RBP)
	popq -1376(%RBP)
	popq -1368(%RBP)
	popq -1360(%RBP)
	popq -1352(%RBP)
	popq -1344(%RBP)
	popq -1336(%RBP)
	popq -1328(%RBP)
	popq -1320(%RBP)
	popq -1312(%RBP)
	popq -1304(%RBP)
	popq -1296(%RBP)
	popq -1288(%RBP)
	popq -1280(%RBP)
	popq -1272(%RBP)
	popq -1264(%RBP)
	popq -1256(%RBP)
	popq -1248(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -1392(%RBP)
	popq -1384(%RBP)
	popq -1376(%RBP)
	popq -1368(%RBP)
	popq -1360(%RBP)
	popq -1352(%RBP)
	popq -1344(%RBP)
	popq -1336(%RBP)
	popq -1328(%RBP)
	popq -1320(%RBP)
	popq -1312(%RBP)
	popq -1304(%RBP)
	popq -1296(%RBP)
	popq -1288(%RBP)
	popq -1280(%RBP)
	popq -1272(%RBP)
	popq -1264(%RBP)
	popq -1256(%RBP)
	popq -1248(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -968(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
uuid_00000000000c310a:
	mov -1128(%RBP),%RSP
	add $-1392, %RSP
	movq -1048(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c311a:
	mov -592(%RBP),%RSP
	add $-1392, %RSP
	jmp uuid_00000000000c311d
uuid_00000000000c311b:
	movq -584(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -576(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -568(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -560(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -552(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -544(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -536(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -528(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -520(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c311d:
	mov -160(%RBP),%RSP
	add $-584, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c311e
uuid_00000000000c3120:
	pushq $0
	pushq $0
	pushq $3
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r14
	movq 0(%r14), %r15
	movq %r15, -80(%rbp)
	movq 8(%r14), %r15
	movq %r15, -72(%rbp)
	movq 16(%r14), %r15
	movq %r15, -64(%rbp)
	movq 24(%r14), %r15
	movq %r15, -56(%rbp)
	movq 32(%r14), %r15
	movq %r15, -48(%rbp)
	movq 40(%r14), %r15
	movq %r15, -40(%rbp)
	movq 48(%r14), %r15
	movq %r15, -32(%rbp)
	movq 56(%r14), %r15
	movq %r15, -24(%rbp)
	movq 64(%r14), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c3177:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3178
	jmp uuid_00000000000c3179
uuid_00000000000c3178:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c313c
	jmp uuid_00000000000c313e
uuid_00000000000c313c:
	push %RBP
	mov -248(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3133
	jmp uuid_00000000000c3135
uuid_00000000000c3133:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3130
	jmp uuid_00000000000c3132
uuid_00000000000c3130:
	push %RBP
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq $0
	push %RBP
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c312a
	jmp uuid_00000000000c312c
uuid_00000000000c312a:
	push %RBP
	jmp uuid_00000000000c3127
	jmp uuid_00000000000c3129
uuid_00000000000c3127:
	push %RBP
	jmp uuid_00000000000c3124
	jmp uuid_00000000000c3126
uuid_00000000000c3124:
	push %RBP
	mov -464(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3121
	jmp uuid_00000000000c3123
uuid_00000000000c3121:
	movb $1, -520(%rbp)
uuid_00000000000c3123:
	mov -552(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c3126:
	mov -544(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c3129:
	mov -536(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c312c:
	mov -528(%RBP),%RSP
	add $-560, %RSP
	mov -520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c312d
	jmp uuid_00000000000c312f
uuid_00000000000c312d:
	movb $1, -360(%rbp)
uuid_00000000000c312f:
	mov -456(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c3132:
	mov -376(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c3135:
	mov -368(%RBP),%RSP
	add $-560, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3139
	jmp uuid_00000000000c313b
uuid_00000000000c3139:
	push %RBP
	mov -240(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3136
	jmp uuid_00000000000c3138
uuid_00000000000c3136:
	movb $1, -264(%rbp)
uuid_00000000000c3138:
	mov -568(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000c313b:
	mov -280(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000c313e:
	mov -272(%RBP),%RSP
	add $-640, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3174
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -720(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c314e
	jmp uuid_00000000000c3150
uuid_00000000000c314e:
	push %RBP
	mov -712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -816(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3145
	jmp uuid_00000000000c3147
uuid_00000000000c3145:
	push %RBP
	mov -808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3142
	jmp uuid_00000000000c3144
uuid_00000000000c3142:
	push %RBP
	mov -800(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c313f
	jmp uuid_00000000000c3141
uuid_00000000000c313f:
	movb $1, -824(%rbp)
uuid_00000000000c3141:
	mov -920(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c3144:
	mov -840(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c3147:
	mov -832(%RBP),%RSP
	add $-992, %RSP
	mov -824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c314b
	jmp uuid_00000000000c314d
uuid_00000000000c314b:
	push %RBP
	mov -704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3148
	jmp uuid_00000000000c314a
uuid_00000000000c3148:
	movb $1, -728(%rbp)
uuid_00000000000c314a:
	mov -1000(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c314d:
	mov -744(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c3150:
	mov -736(%RBP),%RSP
	add $-1072, %RSP
	mov -728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3171
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -1152(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c315d
	jmp uuid_00000000000c315f
uuid_00000000000c315d:
	push %RBP
	mov -1144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1248(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3154
	jmp uuid_00000000000c3156
uuid_00000000000c3154:
	push %RBP
	jmp uuid_00000000000c3151
	jmp uuid_00000000000c3153
uuid_00000000000c3151:
	movb $1, -1256(%rbp)
uuid_00000000000c3153:
	mov -1272(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000c3156:
	mov -1264(%RBP),%RSP
	add $-1272, %RSP
	mov -1256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c315a
	jmp uuid_00000000000c315c
uuid_00000000000c315a:
	push %RBP
	mov -1136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3157
	jmp uuid_00000000000c3159
uuid_00000000000c3157:
	movb $1, -1160(%rbp)
uuid_00000000000c3159:
	mov -1280(%RBP),%RSP
	add $-1352, %RSP
uuid_00000000000c315c:
	mov -1176(%RBP),%RSP
	add $-1352, %RSP
uuid_00000000000c315f:
	mov -1168(%RBP),%RSP
	add $-1352, %RSP
	mov -1160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c316e
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -1432(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3166
	jmp uuid_00000000000c3168
uuid_00000000000c3166:
	push %RBP
	mov -1424(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3163
	jmp uuid_00000000000c3165
uuid_00000000000c3163:
	push %RBP
	mov -1416(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3160
	jmp uuid_00000000000c3162
uuid_00000000000c3160:
	movb $1, -1440(%rbp)
uuid_00000000000c3162:
	mov -1536(%RBP),%RSP
	add $-1608, %RSP
uuid_00000000000c3165:
	mov -1456(%RBP),%RSP
	add $-1608, %RSP
uuid_00000000000c3168:
	mov -1448(%RBP),%RSP
	add $-1608, %RSP
	mov -1440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c316b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c316a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c316d
uuid_00000000000c316b:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $uuid_00000000000c3169
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq $0
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1816(%RBP)
	pushq -1824(%RBP)
	pushq -1832(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -1608(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1600(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1592(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1584(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1576(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1568(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1560(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1552(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1544(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c316d:
	mov -1360(%RBP),%RSP
	add $-1864, %RSP
	jmp uuid_00000000000c3170
uuid_00000000000c316e:
	movq -1352(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1344(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1336(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1328(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1320(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1312(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1304(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1296(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1288(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c3170:
	mov -1080(%RBP),%RSP
	add $-1352, %RSP
	jmp uuid_00000000000c3173
uuid_00000000000c3171:
	movq -1072(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c3173:
	mov -648(%RBP),%RSP
	add $-1072, %RSP
	jmp uuid_00000000000c3176
uuid_00000000000c3174:
	movq -640(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -632(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -624(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -616(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -608(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -600(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -592(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -584(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -576(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c3176:
	mov -184(%RBP),%RSP
	add $-640, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c3177
uuid_00000000000c3179:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function escape-string : Arrow<S,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call escape_SB_string_CL_ArrowSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, %r15
	movq $assemble_SB_final_CL_String, %r14
	movq %r15, 0(%r14)
#call function compile-write : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_write_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_gnu_CL_ArrowNilNil:
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000c31cb:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c31cc
	jmp uuid_00000000000c31cd
uuid_00000000000c31cc:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3195
	jmp uuid_00000000000c3197
uuid_00000000000c3195:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c318c
	jmp uuid_00000000000c318e
uuid_00000000000c318c:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3189
	jmp uuid_00000000000c318b
uuid_00000000000c3189:
	push %RBP
	pushq -264(%RBP)
	pushq -272(%RBP)
	pushq -280(%RBP)
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq $0
	push %RBP
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3183
	jmp uuid_00000000000c3185
uuid_00000000000c3183:
	push %RBP
	jmp uuid_00000000000c3180
	jmp uuid_00000000000c3182
uuid_00000000000c3180:
	push %RBP
	jmp uuid_00000000000c317d
	jmp uuid_00000000000c317f
uuid_00000000000c317d:
	push %RBP
	mov -440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c317a
	jmp uuid_00000000000c317c
uuid_00000000000c317a:
	movb $1, -496(%rbp)
uuid_00000000000c317c:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c317f:
	mov -520(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c3182:
	mov -512(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c3185:
	mov -504(%RBP),%RSP
	add $-536, %RSP
	mov -496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3186
	jmp uuid_00000000000c3188
uuid_00000000000c3186:
	movb $1, -336(%rbp)
uuid_00000000000c3188:
	mov -432(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c318b:
	mov -352(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c318e:
	mov -344(%RBP),%RSP
	add $-536, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3192
	jmp uuid_00000000000c3194
uuid_00000000000c3192:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c318f
	jmp uuid_00000000000c3191
uuid_00000000000c318f:
	movb $1, -240(%rbp)
uuid_00000000000c3191:
	mov -544(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c3194:
	mov -256(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c3197:
	mov -248(%RBP),%RSP
	add $-616, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c31c8
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c31b5
	jmp uuid_00000000000c31b7
uuid_00000000000c31b5:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -792(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c31ac
	jmp uuid_00000000000c31ae
uuid_00000000000c31ac:
	push %RBP
	mov -784(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c31a9
	jmp uuid_00000000000c31ab
uuid_00000000000c31a9:
	push %RBP
	mov -776(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c31a6
	jmp uuid_00000000000c31a8
uuid_00000000000c31a6:
	movb $1, -800(%rbp)
uuid_00000000000c31a8:
	mov -896(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c31ab:
	mov -816(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c31ae:
	mov -808(%RBP),%RSP
	add $-968, %RSP
	mov -800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c31b2
	jmp uuid_00000000000c31b4
uuid_00000000000c31b2:
	push %RBP
	mov -680(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c31af
	jmp uuid_00000000000c31b1
uuid_00000000000c31af:
	movb $1, -704(%rbp)
uuid_00000000000c31b1:
	mov -976(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000c31b4:
	mov -720(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000c31b7:
	mov -712(%RBP),%RSP
	add $-1048, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c31c5
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1128(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c31be
	jmp uuid_00000000000c31c0
uuid_00000000000c31be:
	push %RBP
	jmp uuid_00000000000c31bb
	jmp uuid_00000000000c31bd
uuid_00000000000c31bb:
	push %RBP
	mov -1112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c31b8
	jmp uuid_00000000000c31ba
uuid_00000000000c31b8:
	movb $1, -1136(%rbp)
uuid_00000000000c31ba:
	mov -1160(%RBP),%RSP
	add $-1232, %RSP
uuid_00000000000c31bd:
	mov -1152(%RBP),%RSP
	add $-1232, %RSP
uuid_00000000000c31c0:
	mov -1144(%RBP),%RSP
	add $-1232, %RSP
	mov -1136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c31c2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c31c1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c31c4
uuid_00000000000c31c2:
	movq -1232(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c31c4:
	mov -1056(%RBP),%RSP
	add $-1232, %RSP
	jmp uuid_00000000000c31c7
uuid_00000000000c31c5:
	movq -1048(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c31c7:
	mov -624(%RBP),%RSP
	add $-1048, %RSP
	jmp uuid_00000000000c31ca
uuid_00000000000c31c8:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	pushq $uuid_00000000000c3198
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3199
	jmp uuid_00000000000c319b
uuid_00000000000c3199:
	mov $assemble_SB_argv_SB_referenced_CL_U8, %r15
	movb $1, 0(%r15)
uuid_00000000000c319b:
	mov -624(%RBP),%RSP
	add $-624, %RSP
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c31a3
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c31a0
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq $uuid_00000000000c3102
	pushq $0
	pushq $uuid_00000000000c319c
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c319d
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1155
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
#call function without-constructor : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	mov %RBX, %RBP
	call without_SB_constructor_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq $uuid_00000000000c3169
	pushq $0
	pushq -880(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -536(%rbp)
#call function without-constructor : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	mov %RBX, %RBP
	call without_SB_constructor_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
	jmp uuid_00000000000c319f
uuid_00000000000c319d:
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -536(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
uuid_00000000000c319f:
	mov -824(%RBP),%RSP
	add $-824, %RSP
	jmp uuid_00000000000c31a2
uuid_00000000000c31a0:
#call function fragment::set-term : Arrow<Cons<Fragment,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_term_CL_ArrowFragmentConsASTFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -536(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
uuid_00000000000c31a2:
	mov -816(%RBP),%RSP
	add $-816, %RSP
	jmp uuid_00000000000c31a5
uuid_00000000000c31a3:
uuid_00000000000c31a5:
	mov -808(%RBP),%RSP
	add $-808, %RSP
	movq -616(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -608(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -600(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -592(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -584(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -576(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -568(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -560(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -552(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c31ca:
	mov -160(%RBP),%RSP
	add $-808, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $152, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c31cb
uuid_00000000000c31cd:
#call function compile-program-ordered : Arrow<Cons<FContext,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call compile_SB_program_SB_ordered_CL_ArrowNilConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function compile-finish : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_finish_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function compile-write : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_write_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_finish_CL_ArrowNilNil:
	pushq $0
	pushq $0
	pushq $3
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function compile-text-header : Arrow<Nil,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_text_SB_header_CL_ArrowSNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_profile_SB_onexit_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function compile-exit-cleanup : Arrow<Nil,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_exit_SB_cleanup_CL_ArrowSNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_text_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c31ce
	jmp uuid_00000000000c31d0
uuid_00000000000c31ce:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function compile-data-header : Arrow<Nil,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_data_SB_header_CL_ArrowSNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
uuid_00000000000c31d0:
	mov -40(%RBP),%RSP
	add $-40, %RSP
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function escape-string : Arrow<S,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call escape_SB_string_CL_ArrowSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, %r15
	movq $assemble_SB_final_CL_String, %r14
	movq %r15, 0(%r14)
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_program_SB_ordered_CL_ArrowNilConsASTFContext:
	pushq $0
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq $0
	push %RBP
	mov -440(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c31d7
	jmp uuid_00000000000c31d9
uuid_00000000000c31d7:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c31d4
	jmp uuid_00000000000c31d6
uuid_00000000000c31d4:
	push %RBP
	jmp uuid_00000000000c31d1
	jmp uuid_00000000000c31d3
uuid_00000000000c31d1:
	movb $1, -448(%rbp)
uuid_00000000000c31d3:
	mov -544(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000c31d6:
	mov -464(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000c31d9:
	mov -456(%RBP),%RSP
	add $-544, %RSP
	mov -448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c31e1
	push %RBP
	jmp uuid_00000000000c31de
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c31dd
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c31e0
uuid_00000000000c31de:
uuid_00000000000c31e0:
	mov -552(%RBP),%RSP
	add $-552, %RSP
	jmp uuid_00000000000c31e3
uuid_00000000000c31e1:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c31da
	jmp uuid_00000000000c31dc
uuid_00000000000c31da:
	movq $1, -288(%rbp)
uuid_00000000000c31dc:
	mov -552(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000c31e3:
	mov -368(%RBP),%RSP
	add $-552, %RSP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq $0
	push %RBP
	mov -704(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c31ff
	jmp uuid_00000000000c3201
uuid_00000000000c31ff:
	push %RBP
	mov -696(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -800(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c31f6
	jmp uuid_00000000000c31f8
uuid_00000000000c31f6:
	push %RBP
	mov -792(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c31f3
	jmp uuid_00000000000c31f5
uuid_00000000000c31f3:
	push %RBP
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq -752(%RBP)
	pushq -760(%RBP)
	pushq -768(%RBP)
	pushq -776(%RBP)
	pushq -784(%RBP)
	pushq $0
	push %RBP
	mov -960(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c31ed
	jmp uuid_00000000000c31ef
uuid_00000000000c31ed:
	push %RBP
	jmp uuid_00000000000c31ea
	jmp uuid_00000000000c31ec
uuid_00000000000c31ea:
	push %RBP
	jmp uuid_00000000000c31e7
	jmp uuid_00000000000c31e9
uuid_00000000000c31e7:
	push %RBP
	mov -912(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c31e4
	jmp uuid_00000000000c31e6
uuid_00000000000c31e4:
	movb $1, -968(%rbp)
uuid_00000000000c31e6:
	mov -1000(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c31e9:
	mov -992(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c31ec:
	mov -984(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c31ef:
	mov -976(%RBP),%RSP
	add $-1008, %RSP
	mov -968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c31f0
	jmp uuid_00000000000c31f2
uuid_00000000000c31f0:
	movb $1, -808(%rbp)
uuid_00000000000c31f2:
	mov -904(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c31f5:
	mov -824(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c31f8:
	mov -816(%RBP),%RSP
	add $-1008, %RSP
	mov -808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c31fc
	jmp uuid_00000000000c31fe
uuid_00000000000c31fc:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c31f9
	jmp uuid_00000000000c31fb
uuid_00000000000c31f9:
	movb $1, -712(%rbp)
uuid_00000000000c31fb:
	mov -1016(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000c31fe:
	mov -728(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000c3201:
	mov -720(%RBP),%RSP
	add $-1088, %RSP
	mov -712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3215
	push %RBP
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq $0
	push %RBP
	mov -1168(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c320b
	jmp uuid_00000000000c320d
uuid_00000000000c320b:
	push %RBP
	jmp uuid_00000000000c3208
	jmp uuid_00000000000c320a
uuid_00000000000c3208:
	push %RBP
	mov -1152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3205
	jmp uuid_00000000000c3207
uuid_00000000000c3205:
	movb $1, -1176(%rbp)
uuid_00000000000c3207:
	mov -1200(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000c320a:
	mov -1192(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000c320d:
	mov -1184(%RBP),%RSP
	add $-1272, %RSP
	mov -1176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3212
	push %RBP
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov -1352(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c320f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c320e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3211
uuid_00000000000c320f:
uuid_00000000000c3211:
	mov -1280(%RBP),%RSP
	add $-1352, %RSP
	jmp uuid_00000000000c3214
uuid_00000000000c3212:
#call function compile-program-ordered : Arrow<Cons<FContext,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	mov %RBX, %RBP
	call compile_SB_program_SB_ordered_CL_ArrowNilConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c3214:
	mov -1096(%RBP),%RSP
	add $-1272, %RSP
	jmp uuid_00000000000c3217
uuid_00000000000c3215:
#call function compile-program-ordered : Arrow<Cons<FContext,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	mov %RBX, %RBP
	call compile_SB_program_SB_ordered_CL_ArrowNilConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
	mov -288(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3202
#call function compile-global : Arrow<Cons<Cons<FContext,String>,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1008(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call compile_SB_global_CL_ArrowNilConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3204
uuid_00000000000c3202:
uuid_00000000000c3204:
	mov -1096(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000c3217:
	mov -632(%RBP),%RSP
	add $-1096, %RSP
	mov %rbp, %rsp
	sub $280, %rsp
	ret
compile_SB_write_CL_ArrowNilNil:
#call function write-file : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_target_CL_String, %r15
	pushq 0(%r15)
	mov $assemble_SB_final_CL_String, %r15
	pushq 0(%r15)
	mov %RBX, %RBP
	call write_SB_file_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
fragment_SB_context_CL__CL_new_CL_ArrowFContextNil:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	subq $200, %rsp
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,AST>,U8>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $1
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsU8ConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	subq $152, %rsp
	pushq 152(%rsp)
	pushq 168(%rsp)
	pushq 184(%rsp)
	pushq 200(%rsp)
	pushq 216(%rsp)
	pushq 232(%rsp)
	pushq 248(%rsp)
	pushq 264(%rsp)
	pushq 280(%rsp)
	pushq 296(%rsp)
	pushq 312(%rsp)
	pushq 328(%rsp)
	pushq 344(%rsp)
	pushq 360(%rsp)
	pushq 376(%rsp)
	pushq 392(%rsp)
	pushq 408(%rsp)
	pushq 424(%rsp)
	pushq 440(%rsp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsU8ConsASTConsTypeConsStringFContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function find-alias : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call find_SB_alias_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -208(%rbp)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000c323a:
#call function non-zero : Arrow<FContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c323b
	jmp uuid_00000000000c323c
uuid_00000000000c323b:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq $0
	push %RBP
	mov -1104(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3224
	jmp uuid_00000000000c3226
uuid_00000000000c3224:
	push %RBP
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	jmp uuid_00000000000c3221
	jmp uuid_00000000000c3223
uuid_00000000000c3221:
	push %RBP
	pushq -928(%RBP)
	pushq -936(%RBP)
	pushq -944(%RBP)
	jmp uuid_00000000000c321e
	jmp uuid_00000000000c3220
uuid_00000000000c321e:
	push %RBP
	mov -920(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c321b
	jmp uuid_00000000000c321d
uuid_00000000000c321b:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3218
	jmp uuid_00000000000c321a
uuid_00000000000c3218:
	movb $1, -1112(%rbp)
uuid_00000000000c321a:
	mov -1336(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c321d:
	mov -1320(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c3220:
	mov -1288(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c3223:
	mov -1128(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c3226:
	mov -1120(%RBP),%RSP
	add $-1536, %RSP
	mov -1112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3237
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3236
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3239
uuid_00000000000c3237:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -1328(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3233
	movq -1536(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1528(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1520(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1512(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1504(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1408(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1400(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1392(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1384(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1376(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1360(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1352(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1344(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c3235
uuid_00000000000c3233:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3230
	movq -1280(%rbp), %r15
	movq %r15, -672(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -664(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -656(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -648(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -640(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -632(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -624(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -616(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -608(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -600(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -592(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -584(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -576(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -568(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -560(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -552(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -544(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -536(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -528(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c17da
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c3232
uuid_00000000000c3230:
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function range : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	mov %RBX, %RBP
	call range_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c322d
	jmp uuid_00000000000c322f
uuid_00000000000c322d:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c322a
	movq -1280(%rbp), %r15
	movq %r15, -672(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -664(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -656(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -648(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -640(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -632(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -624(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -616(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -608(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -600(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -592(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -584(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -576(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -568(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -560(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -552(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -544(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -536(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -528(%rbp)
	movq -1576(%rbp), %r15
	movq %r15, -696(%rbp)
	movq -1568(%rbp), %r15
	movq %r15, -688(%rbp)
	movq -1560(%rbp), %r15
	movq %r15, -680(%rbp)
	jmp uuid_00000000000c322c
uuid_00000000000c322a:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3227
	jmp uuid_00000000000c3229
uuid_00000000000c3227:
	movq -1280(%rbp), %r15
	movq %r15, -672(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -664(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -656(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -648(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -640(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -632(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -624(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -616(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -608(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -600(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -592(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -584(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -576(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -568(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -560(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -552(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -544(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -536(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -528(%rbp)
	movq -1576(%rbp), %r15
	movq %r15, -696(%rbp)
	movq -1568(%rbp), %r15
	movq %r15, -688(%rbp)
	movq -1560(%rbp), %r15
	movq %r15, -680(%rbp)
uuid_00000000000c3229:
	mov -1624(%RBP),%RSP
	add $-1624, %RSP
uuid_00000000000c322c:
	mov -1616(%RBP),%RSP
	add $-1624, %RSP
uuid_00000000000c322f:
	mov -1608(%RBP),%RSP
	add $-1624, %RSP
	movq -1536(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1528(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1520(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1512(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1504(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1408(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1400(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1392(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1384(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1376(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1360(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1352(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1344(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c3232:
	mov -1552(%RBP),%RSP
	add $-1624, %RSP
uuid_00000000000c3235:
	mov -1544(%RBP),%RSP
	add $-1624, %RSP
uuid_00000000000c3239:
	mov -904(%RBP),%RSP
	add $-1624, %RSP
	add $200, %rsp
	add $200, %rsp
	add $8, %rsp
	add $152, %rsp
	add $24, %rsp
	add $8, %rsp
	add $200, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c323a
uuid_00000000000c323c:
	push %RBP
	mov -312(%RBP), %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	push %RAX
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3259
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c323d
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1527
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c323e
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -520(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -512(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -504(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -496(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -488(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -408(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -400(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -392(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c3255:
#call function non-zero : Arrow<FContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3256
	jmp uuid_00000000000c3257
uuid_00000000000c3256:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq $0
	push %RBP
	mov -1112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c324b
	jmp uuid_00000000000c324d
uuid_00000000000c324b:
	push %RBP
	pushq -960(%RBP)
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	jmp uuid_00000000000c3248
	jmp uuid_00000000000c324a
uuid_00000000000c3248:
	push %RBP
	pushq -936(%RBP)
	pushq -944(%RBP)
	pushq -952(%RBP)
	jmp uuid_00000000000c3245
	jmp uuid_00000000000c3247
uuid_00000000000c3245:
	push %RBP
	mov -928(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3242
	jmp uuid_00000000000c3244
uuid_00000000000c3242:
	push %RBP
	mov -920(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c323f
	jmp uuid_00000000000c3241
uuid_00000000000c323f:
	movb $1, -1120(%rbp)
uuid_00000000000c3241:
	mov -1344(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c3244:
	mov -1328(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c3247:
	mov -1296(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c324a:
	mov -1136(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c324d:
	mov -1128(%RBP),%RSP
	add $-1544, %RSP
	mov -1120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3252
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3251
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3254
uuid_00000000000c3252:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -1336(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c324e
	jmp uuid_00000000000c3250
uuid_00000000000c324e:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1527
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c3250:
	mov -1552(%RBP),%RSP
	add $-1552, %RSP
	movq -1544(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1536(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1528(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1520(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1512(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1504(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1408(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1400(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1392(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1384(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1376(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1360(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1352(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c3254:
	mov -912(%RBP),%RSP
	add $-1552, %RSP
	add $200, %rsp
	add $200, %rsp
	add $8, %rsp
	add $152, %rsp
	add $24, %rsp
	add $8, %rsp
	add $200, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c3255
uuid_00000000000c3257:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3258
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c325b
uuid_00000000000c3259:
uuid_00000000000c325b:
	mov -704(%RBP),%RSP
	add $-704, %RSP
	subq $152, %rsp
	pushq -672(%rbp)
	pushq -664(%rbp)
	pushq -656(%rbp)
	pushq -648(%rbp)
	pushq -640(%rbp)
	pushq -632(%rbp)
	pushq -624(%rbp)
	pushq -616(%rbp)
	pushq -608(%rbp)
	pushq -600(%rbp)
	pushq -592(%rbp)
	pushq -584(%rbp)
	pushq -576(%rbp)
	pushq -568(%rbp)
	pushq -560(%rbp)
	pushq -552(%rbp)
	pushq -544(%rbp)
	pushq -536(%rbp)
	pushq -528(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $320, %rsp
	ret
fragment_SB_context_CL__CL_lookup_SB_soft_CL_ArrowFragmentConsASTConsTypeConsStringFContext:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,AST>,U8>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $0
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsU8ConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	subq $152, %rsp
	pushq 152(%rsp)
	pushq 168(%rsp)
	pushq 184(%rsp)
	pushq 200(%rsp)
	pushq 216(%rsp)
	pushq 232(%rsp)
	pushq 248(%rsp)
	pushq 264(%rsp)
	pushq 280(%rsp)
	pushq 296(%rsp)
	pushq 312(%rsp)
	pushq 328(%rsp)
	pushq 344(%rsp)
	pushq 360(%rsp)
	pushq 376(%rsp)
	pushq 392(%rsp)
	pushq 408(%rsp)
	pushq 424(%rsp)
	pushq 440(%rsp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
fragment_SB_context_CL__CL_lookups_CL_ArrowListFragmentConsASTConsTypeConsTypeConsStringFContext:
#call function fragment-context::lookups : Arrow<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,U8>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq $1
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookups_CL_ArrowListFragmentConsU8ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	subq $168, %rsp
	pushq 168(%rsp)
	pushq 184(%rsp)
	pushq 200(%rsp)
	pushq 216(%rsp)
	pushq 232(%rsp)
	pushq 248(%rsp)
	pushq 264(%rsp)
	pushq 280(%rsp)
	pushq 296(%rsp)
	pushq 312(%rsp)
	pushq 328(%rsp)
	pushq 344(%rsp)
	pushq 360(%rsp)
	pushq 376(%rsp)
	pushq 392(%rsp)
	pushq 408(%rsp)
	pushq 424(%rsp)
	pushq 440(%rsp)
	pushq 456(%rsp)
	pushq 472(%rsp)
	pushq 488(%rsp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	addq $168, %rsp
	mov %rbp, %rsp
	sub $336, %rsp
	ret
fragment_SB_context_CL__CL_lookups_CL_ArrowListFragmentConsU8ConsASTConsTypeConsTypeConsStringFContext:
#call function find-alias : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call find_SB_alias_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -208(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000c329c:
#call function non-zero : Arrow<FContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c329d
	jmp uuid_00000000000c329e
uuid_00000000000c329d:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq $0
	push %RBP
	mov -944(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c326a
	jmp uuid_00000000000c326c
uuid_00000000000c326a:
	push %RBP
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	jmp uuid_00000000000c3267
	jmp uuid_00000000000c3269
uuid_00000000000c3267:
	push %RBP
	pushq -768(%RBP)
	pushq -776(%RBP)
	pushq -784(%RBP)
	jmp uuid_00000000000c3264
	jmp uuid_00000000000c3266
uuid_00000000000c3264:
	push %RBP
	mov -760(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3261
	jmp uuid_00000000000c3263
uuid_00000000000c3261:
	push %RBP
	mov -752(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c325e
	jmp uuid_00000000000c3260
uuid_00000000000c325e:
	movb $1, -952(%rbp)
uuid_00000000000c3260:
	mov -1176(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000c3263:
	mov -1160(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000c3266:
	mov -1128(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000c3269:
	mov -968(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000c326c:
	mov -960(%RBP),%RSP
	add $-1376, %RSP
	mov -952(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3299
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3298
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c329b
uuid_00000000000c3299:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -1168(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3295
	movq -1376(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1360(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1352(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1344(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1336(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1328(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1320(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1312(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1304(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1296(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1288(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c3297
uuid_00000000000c3295:
	push %RBP
#call function is : Arrow<Cons<Sized<24>,Sized<24>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized24Sized24
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3292
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c328f
	push %RBP
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c328c
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c17da
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	jmp uuid_00000000000c328e
uuid_00000000000c328c:
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
uuid_00000000000c328e:
	mov -1408(%RBP),%RSP
	add $-1408, %RSP
	jmp uuid_00000000000c3291
uuid_00000000000c328f:
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function range : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	mov %RBX, %RBP
	call range_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3285
	jmp uuid_00000000000c3287
uuid_00000000000c3285:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3282
	push %RBP
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c327f
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	movq -1424(%rbp), %r15
	movq %r15, -536(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -528(%rbp)
	movq -1408(%rbp), %r15
	movq %r15, -520(%rbp)
	jmp uuid_00000000000c3281
uuid_00000000000c327f:
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
uuid_00000000000c3281:
	mov -1472(%RBP),%RSP
	add $-1472, %RSP
	jmp uuid_00000000000c3284
uuid_00000000000c3282:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3278
	jmp uuid_00000000000c327a
uuid_00000000000c3278:
	push %RBP
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3275
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	movq -1424(%rbp), %r15
	movq %r15, -536(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -528(%rbp)
	movq -1408(%rbp), %r15
	movq %r15, -520(%rbp)
	jmp uuid_00000000000c3277
uuid_00000000000c3275:
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
uuid_00000000000c3277:
	mov -1480(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c327a:
	mov -1472(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c3284:
	mov -1464(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c3287:
	mov -1456(%RBP),%RSP
	add $-1480, %RSP
	movq -1376(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1360(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1352(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1344(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1336(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1328(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1320(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1312(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1304(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1296(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1288(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c3291:
	mov -1400(%RBP),%RSP
	add $-1480, %RSP
	jmp uuid_00000000000c3294
uuid_00000000000c3292:
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c3294:
	mov -1392(%RBP),%RSP
	add $-1392, %RSP
uuid_00000000000c3297:
	mov -1384(%RBP),%RSP
	add $-1392, %RSP
uuid_00000000000c329b:
	mov -744(%RBP),%RSP
	add $-1392, %RSP
	add $200, %rsp
	add $200, %rsp
	add $8, %rsp
	add $152, %rsp
	add $24, %rsp
	add $8, %rsp
	add $200, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c329c
uuid_00000000000c329e:
	push %RBP
	mov -336(%RBP), %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	push %RAX
#call function .length : Arrow<List<Fragment>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call _DT_length_CL_ArrowU64ListFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c32a0
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c329f
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1527
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3258
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c32a2
uuid_00000000000c32a0:
uuid_00000000000c32a2:
	mov -544(%RBP),%RSP
	add $-544, %RSP
	subq $168, %rsp
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	addq $168, %rsp
	mov %rbp, %rsp
	sub $344, %rsp
	ret
fragment_SB_context_CL__CL_lookup_SB_vararg_CL_ArrowFragmentListConsASTConsTypeConsStringFContext:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000c32b9:
#call function non-zero : Arrow<FContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c32ba
	jmp uuid_00000000000c32bb
uuid_00000000000c32ba:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq $0
	push %RBP
	mov -888(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c32af
	jmp uuid_00000000000c32b1
uuid_00000000000c32af:
	push %RBP
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq -752(%RBP)
	pushq -760(%RBP)
	pushq -768(%RBP)
	pushq -776(%RBP)
	pushq -784(%RBP)
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	jmp uuid_00000000000c32ac
	jmp uuid_00000000000c32ae
uuid_00000000000c32ac:
	push %RBP
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	jmp uuid_00000000000c32a9
	jmp uuid_00000000000c32ab
uuid_00000000000c32a9:
	push %RBP
	mov -704(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c32a6
	jmp uuid_00000000000c32a8
uuid_00000000000c32a6:
	push %RBP
	mov -696(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c32a3
	jmp uuid_00000000000c32a5
uuid_00000000000c32a3:
	movb $1, -896(%rbp)
uuid_00000000000c32a5:
	mov -1120(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000c32a8:
	mov -1104(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000c32ab:
	mov -1072(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000c32ae:
	mov -912(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000c32b1:
	mov -904(%RBP),%RSP
	add $-1320, %RSP
	mov -896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c32b6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c32b5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c32b8
uuid_00000000000c32b6:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c32b2
	jmp uuid_00000000000c32b4
uuid_00000000000c32b2:
#call function close : Arrow<FragmentList,Array<FragmentList,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentListFragmentList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq $0
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
uuid_00000000000c32b4:
	mov -1328(%RBP),%RSP
	add $-1328, %RSP
	movq -1320(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1312(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1304(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1296(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1288(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c32b8:
	mov -688(%RBP),%RSP
	add $-1328, %RSP
	add $200, %rsp
	add $200, %rsp
	add $8, %rsp
	add $152, %rsp
	add $24, %rsp
	add $8, %rsp
	add $200, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c32b9
uuid_00000000000c32bb:
	subq $168, %rsp
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	addq $168, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext:
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	subq $200, %rsp
	pushq -592(%rbp)
	pushq -584(%rbp)
	pushq -576(%rbp)
	pushq -568(%rbp)
	pushq -560(%rbp)
	pushq -552(%rbp)
	pushq -544(%rbp)
	pushq -536(%rbp)
	pushq -528(%rbp)
	pushq -520(%rbp)
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $392, %rsp
	ret
bind_SB_vararg_CL_ArrowFContextConsFragmentConsTypeConsStringFContext:
#call function fragment-context::lookup-soft : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_SB_soft_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function fragment::set-vararg : Arrow<Cons<Fragment,List<Array<Fragment,?>>>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
#call function cons : Arrow<Cons<Array<Fragment,?>,List<Array<Fragment,?>>>,List<Array<Fragment,?>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<Fragment,Array<Fragment,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	mov %RBX, %RBP
	call cons_CL_ArrowListArray_QM_FragmentConsListArray_QM_FragmentArray_QM_Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_vararg_CL_ArrowFragmentConsListArray_QM_FragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	subq $200, %rsp
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $392, %rsp
	ret
with_SB_location_CL_ArrowASTConsSourceLocationAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3329
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3326
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c32c2
	jmp uuid_00000000000c32c4
uuid_00000000000c32c2:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	jmp uuid_00000000000c32bf
	jmp uuid_00000000000c32c1
uuid_00000000000c32bf:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c32bc
	jmp uuid_00000000000c32be
uuid_00000000000c32bc:
	movb $1, -504(%rbp)
uuid_00000000000c32be:
	mov -584(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c32c1:
	mov -520(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c32c4:
	mov -512(%RBP),%RSP
	add $-592, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3323
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c32ce
	jmp uuid_00000000000c32d0
uuid_00000000000c32ce:
	push %RBP
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	jmp uuid_00000000000c32cb
	jmp uuid_00000000000c32cd
uuid_00000000000c32cb:
	push %RBP
	mov -608(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c32c8
	jmp uuid_00000000000c32ca
uuid_00000000000c32c8:
	movb $1, -680(%rbp)
uuid_00000000000c32ca:
	mov -760(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c32cd:
	mov -696(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c32d0:
	mov -688(%RBP),%RSP
	add $-768, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3320
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c32d7
	jmp uuid_00000000000c32d9
uuid_00000000000c32d7:
	push %RBP
	jmp uuid_00000000000c32d4
	jmp uuid_00000000000c32d6
uuid_00000000000c32d4:
	movb $1, -856(%rbp)
uuid_00000000000c32d6:
	mov -872(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c32d9:
	mov -864(%RBP),%RSP
	add $-872, %RSP
	mov -856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c331d
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -952(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c32e0
	jmp uuid_00000000000c32e2
uuid_00000000000c32e0:
	push %RBP
	mov -944(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c32dd
	jmp uuid_00000000000c32df
uuid_00000000000c32dd:
	push %RBP
	mov -936(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c32da
	jmp uuid_00000000000c32dc
uuid_00000000000c32da:
	movb $1, -960(%rbp)
uuid_00000000000c32dc:
	mov -1056(%RBP),%RSP
	add $-1128, %RSP
uuid_00000000000c32df:
	mov -976(%RBP),%RSP
	add $-1128, %RSP
uuid_00000000000c32e2:
	mov -968(%RBP),%RSP
	add $-1128, %RSP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c331a
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -1208(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c32ec
	jmp uuid_00000000000c32ee
uuid_00000000000c32ec:
	push %RBP
	pushq -1184(%RBP)
	pushq -1192(%RBP)
	pushq -1200(%RBP)
	jmp uuid_00000000000c32e9
	jmp uuid_00000000000c32eb
uuid_00000000000c32e9:
	push %RBP
	mov -1176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c32e6
	jmp uuid_00000000000c32e8
uuid_00000000000c32e6:
	push %RBP
	mov -1168(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c32e3
	jmp uuid_00000000000c32e5
uuid_00000000000c32e3:
	movb $1, -1216(%rbp)
uuid_00000000000c32e5:
	mov -1344(%RBP),%RSP
	add $-1416, %RSP
uuid_00000000000c32e8:
	mov -1264(%RBP),%RSP
	add $-1416, %RSP
uuid_00000000000c32eb:
	mov -1232(%RBP),%RSP
	add $-1416, %RSP
uuid_00000000000c32ee:
	mov -1224(%RBP),%RSP
	add $-1416, %RSP
	mov -1216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3317
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -1496(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c32f5
	jmp uuid_00000000000c32f7
uuid_00000000000c32f5:
	push %RBP
	mov -1488(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c32f2
	jmp uuid_00000000000c32f4
uuid_00000000000c32f2:
	push %RBP
	mov -1480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c32ef
	jmp uuid_00000000000c32f1
uuid_00000000000c32ef:
	movb $1, -1504(%rbp)
uuid_00000000000c32f1:
	mov -1600(%RBP),%RSP
	add $-1672, %RSP
uuid_00000000000c32f4:
	mov -1520(%RBP),%RSP
	add $-1672, %RSP
uuid_00000000000c32f7:
	mov -1512(%RBP),%RSP
	add $-1672, %RSP
	mov -1504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3314
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -1752(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c32fe
	jmp uuid_00000000000c3300
uuid_00000000000c32fe:
	push %RBP
	mov -1744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c32fb
	jmp uuid_00000000000c32fd
uuid_00000000000c32fb:
	push %RBP
	mov -1736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c32f8
	jmp uuid_00000000000c32fa
uuid_00000000000c32f8:
	movb $1, -1760(%rbp)
uuid_00000000000c32fa:
	mov -1856(%RBP),%RSP
	add $-1928, %RSP
uuid_00000000000c32fd:
	mov -1776(%RBP),%RSP
	add $-1928, %RSP
uuid_00000000000c3300:
	mov -1768(%RBP),%RSP
	add $-1928, %RSP
	mov -1760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3311
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -2008(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3307
	jmp uuid_00000000000c3309
uuid_00000000000c3307:
	push %RBP
	mov -2000(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3304
	jmp uuid_00000000000c3306
uuid_00000000000c3304:
	push %RBP
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	jmp uuid_00000000000c3301
	jmp uuid_00000000000c3303
uuid_00000000000c3301:
	movb $1, -2016(%rbp)
uuid_00000000000c3303:
	mov -2112(%RBP),%RSP
	add $-2168, %RSP
uuid_00000000000c3306:
	mov -2032(%RBP),%RSP
	add $-2168, %RSP
uuid_00000000000c3309:
	mov -2024(%RBP),%RSP
	add $-2168, %RSP
	mov -2016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c330e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c330d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3310
uuid_00000000000c330e:
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c330a
#call function with-location : Arrow<Cons<Token,SourceLocation>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowTokenConsSourceLocationToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	popq -2168(%RBP)
	popq -2160(%RBP)
	popq -2152(%RBP)
	popq -2144(%RBP)
	popq -2136(%RBP)
	popq -2128(%RBP)
	popq -2120(%RBP)
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	popq -2104(%RBP)
	popq -2096(%RBP)
	popq -2088(%RBP)
	popq -2080(%RBP)
	popq -2072(%RBP)
	popq -2064(%RBP)
	popq -2056(%RBP)
	popq -2048(%RBP)
	popq -2040(%RBP)
	jmp uuid_00000000000c330c
uuid_00000000000c330a:
uuid_00000000000c330c:
	mov -2176(%RBP),%RSP
	add $-2176, %RSP
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
uuid_00000000000c3310:
	mov -1936(%RBP),%RSP
	add $-2176, %RSP
	jmp uuid_00000000000c3313
uuid_00000000000c3311:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
uuid_00000000000c3313:
	mov -1680(%RBP),%RSP
	add $-1928, %RSP
	jmp uuid_00000000000c3316
uuid_00000000000c3314:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
uuid_00000000000c3316:
	mov -1424(%RBP),%RSP
	add $-1672, %RSP
	jmp uuid_00000000000c3319
uuid_00000000000c3317:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq $5
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
uuid_00000000000c3319:
	mov -1136(%RBP),%RSP
	add $-1416, %RSP
	jmp uuid_00000000000c331c
uuid_00000000000c331a:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
uuid_00000000000c331c:
	mov -880(%RBP),%RSP
	add $-1128, %RSP
	jmp uuid_00000000000c331f
uuid_00000000000c331d:
uuid_00000000000c331f:
	mov -776(%RBP),%RSP
	add $-872, %RSP
	jmp uuid_00000000000c3322
uuid_00000000000c3320:
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c32d1
	pushq -768(%rbp)
#call function with-location : Arrow<Cons<Token,SourceLocation>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowTokenConsSourceLocationToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	pushq $6
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	jmp uuid_00000000000c32d3
uuid_00000000000c32d1:
uuid_00000000000c32d3:
	mov -776(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c3322:
	mov -600(%RBP),%RSP
	add $-776, %RSP
	jmp uuid_00000000000c3325
uuid_00000000000c3323:
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c32c5
	pushq -592(%rbp)
#call function with-location : Arrow<Cons<Token,SourceLocation>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowTokenConsSourceLocationToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	pushq $7
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	jmp uuid_00000000000c32c7
uuid_00000000000c32c5:
uuid_00000000000c32c7:
	mov -600(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000c3325:
	mov -424(%RBP),%RSP
	add $-600, %RSP
	jmp uuid_00000000000c3328
uuid_00000000000c3326:
uuid_00000000000c3328:
	mov -344(%RBP),%RSP
	add $-416, %RSP
	jmp uuid_00000000000c332b
uuid_00000000000c3329:
uuid_00000000000c332b:
	mov -264(%RBP),%RSP
	add $-336, %RSP
	subq $72, %rsp
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $112, %rsp
	ret
with_SB_location_CL_ArrowTokenConsSourceLocationToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -216(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3335
	jmp uuid_00000000000c3337
uuid_00000000000c3335:
	push %RBP
	jmp uuid_00000000000c3332
	jmp uuid_00000000000c3334
uuid_00000000000c3332:
	push %RBP
	jmp uuid_00000000000c332f
	jmp uuid_00000000000c3331
uuid_00000000000c332f:
	push %RBP
	mov -168(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c332c
	jmp uuid_00000000000c332e
uuid_00000000000c332c:
	movb $1, -224(%rbp)
uuid_00000000000c332e:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c3331:
	mov -248(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c3334:
	mov -240(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c3337:
	mov -232(%RBP),%RSP
	add $-264, %RSP
	mov -224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3339
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3338
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c333b
uuid_00000000000c3339:
	pushq -264(%rbp)
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c333b:
	mov -160(%RBP),%RSP
	add $-264, %RSP
	subq $56, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $96, %rsp
	ret
without_SB_location_CL_ArrowASTAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c33a0
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c339d
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -464(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3342
	jmp uuid_00000000000c3344
uuid_00000000000c3342:
	push %RBP
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000c333f
	jmp uuid_00000000000c3341
uuid_00000000000c333f:
	push %RBP
	mov -400(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c333c
	jmp uuid_00000000000c333e
uuid_00000000000c333c:
	movb $1, -472(%rbp)
uuid_00000000000c333e:
	mov -552(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c3341:
	mov -488(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c3344:
	mov -480(%RBP),%RSP
	add $-560, %RSP
	mov -472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c339a
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -640(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c334b
	jmp uuid_00000000000c334d
uuid_00000000000c334b:
	push %RBP
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	jmp uuid_00000000000c3348
	jmp uuid_00000000000c334a
uuid_00000000000c3348:
	push %RBP
	mov -576(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3345
	jmp uuid_00000000000c3347
uuid_00000000000c3345:
	movb $1, -648(%rbp)
uuid_00000000000c3347:
	mov -728(%RBP),%RSP
	add $-736, %RSP
uuid_00000000000c334a:
	mov -664(%RBP),%RSP
	add $-736, %RSP
uuid_00000000000c334d:
	mov -656(%RBP),%RSP
	add $-736, %RSP
	mov -648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3397
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -816(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3351
	jmp uuid_00000000000c3353
uuid_00000000000c3351:
	push %RBP
	jmp uuid_00000000000c334e
	jmp uuid_00000000000c3350
uuid_00000000000c334e:
	movb $1, -824(%rbp)
uuid_00000000000c3350:
	mov -840(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000c3353:
	mov -832(%RBP),%RSP
	add $-840, %RSP
	mov -824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3394
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c335a
	jmp uuid_00000000000c335c
uuid_00000000000c335a:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3357
	jmp uuid_00000000000c3359
uuid_00000000000c3357:
	push %RBP
	mov -904(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3354
	jmp uuid_00000000000c3356
uuid_00000000000c3354:
	movb $1, -928(%rbp)
uuid_00000000000c3356:
	mov -1024(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000c3359:
	mov -944(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000c335c:
	mov -936(%RBP),%RSP
	add $-1096, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3391
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1176(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3366
	jmp uuid_00000000000c3368
uuid_00000000000c3366:
	push %RBP
	pushq -1152(%RBP)
	pushq -1160(%RBP)
	pushq -1168(%RBP)
	jmp uuid_00000000000c3363
	jmp uuid_00000000000c3365
uuid_00000000000c3363:
	push %RBP
	mov -1144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3360
	jmp uuid_00000000000c3362
uuid_00000000000c3360:
	push %RBP
	mov -1136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c335d
	jmp uuid_00000000000c335f
uuid_00000000000c335d:
	movb $1, -1184(%rbp)
uuid_00000000000c335f:
	mov -1312(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000c3362:
	mov -1232(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000c3365:
	mov -1200(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000c3368:
	mov -1192(%RBP),%RSP
	add $-1384, %RSP
	mov -1184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c338e
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1464(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c336f
	jmp uuid_00000000000c3371
uuid_00000000000c336f:
	push %RBP
	mov -1456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c336c
	jmp uuid_00000000000c336e
uuid_00000000000c336c:
	push %RBP
	mov -1448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3369
	jmp uuid_00000000000c336b
uuid_00000000000c3369:
	movb $1, -1472(%rbp)
uuid_00000000000c336b:
	mov -1568(%RBP),%RSP
	add $-1640, %RSP
uuid_00000000000c336e:
	mov -1488(%RBP),%RSP
	add $-1640, %RSP
uuid_00000000000c3371:
	mov -1480(%RBP),%RSP
	add $-1640, %RSP
	mov -1472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c338b
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1720(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3378
	jmp uuid_00000000000c337a
uuid_00000000000c3378:
	push %RBP
	mov -1712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3375
	jmp uuid_00000000000c3377
uuid_00000000000c3375:
	push %RBP
	mov -1704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3372
	jmp uuid_00000000000c3374
uuid_00000000000c3372:
	movb $1, -1728(%rbp)
uuid_00000000000c3374:
	mov -1824(%RBP),%RSP
	add $-1896, %RSP
uuid_00000000000c3377:
	mov -1744(%RBP),%RSP
	add $-1896, %RSP
uuid_00000000000c337a:
	mov -1736(%RBP),%RSP
	add $-1896, %RSP
	mov -1728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3388
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1976(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3381
	jmp uuid_00000000000c3383
uuid_00000000000c3381:
	push %RBP
	mov -1968(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c337e
	jmp uuid_00000000000c3380
uuid_00000000000c337e:
	push %RBP
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	jmp uuid_00000000000c337b
	jmp uuid_00000000000c337d
uuid_00000000000c337b:
	movb $1, -1984(%rbp)
uuid_00000000000c337d:
	mov -2080(%RBP),%RSP
	add $-2136, %RSP
uuid_00000000000c3380:
	mov -2000(%RBP),%RSP
	add $-2136, %RSP
uuid_00000000000c3383:
	mov -1992(%RBP),%RSP
	add $-2136, %RSP
	mov -1984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3385
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3384
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3387
uuid_00000000000c3385:
#call function without-location : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c3387:
	mov -1904(%RBP),%RSP
	add $-2136, %RSP
	jmp uuid_00000000000c338a
uuid_00000000000c3388:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c338a:
	mov -1648(%RBP),%RSP
	add $-1896, %RSP
	jmp uuid_00000000000c338d
uuid_00000000000c338b:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c338d:
	mov -1392(%RBP),%RSP
	add $-1640, %RSP
	jmp uuid_00000000000c3390
uuid_00000000000c338e:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq $5
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c3390:
	mov -1104(%RBP),%RSP
	add $-1384, %RSP
	jmp uuid_00000000000c3393
uuid_00000000000c3391:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c3393:
	mov -848(%RBP),%RSP
	add $-1096, %RSP
	jmp uuid_00000000000c3396
uuid_00000000000c3394:
uuid_00000000000c3396:
	mov -744(%RBP),%RSP
	add $-840, %RSP
	jmp uuid_00000000000c3399
uuid_00000000000c3397:
	pushq -736(%rbp)
#call function without-location : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c3399:
	mov -568(%RBP),%RSP
	add $-736, %RSP
	jmp uuid_00000000000c339c
uuid_00000000000c339a:
	pushq -560(%rbp)
#call function without-location : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c339c:
	mov -392(%RBP),%RSP
	add $-560, %RSP
	jmp uuid_00000000000c339f
uuid_00000000000c339d:
uuid_00000000000c339f:
	mov -312(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000c33a2
uuid_00000000000c33a0:
uuid_00000000000c33a2:
	mov -232(%RBP),%RSP
	add $-304, %RSP
	subq $72, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
without_SB_location_CL_ArrowTokenToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c33ac
	jmp uuid_00000000000c33ae
uuid_00000000000c33ac:
	push %RBP
	jmp uuid_00000000000c33a9
	jmp uuid_00000000000c33ab
uuid_00000000000c33a9:
	push %RBP
	mov -144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c33a6
	jmp uuid_00000000000c33a8
uuid_00000000000c33a6:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c33a3
	jmp uuid_00000000000c33a5
uuid_00000000000c33a3:
	movb $1, -192(%rbp)
uuid_00000000000c33a5:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c33a8:
	mov -216(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c33ab:
	mov -208(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c33ae:
	mov -200(%RBP),%RSP
	add $-240, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c33b0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c33af
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c33b2
uuid_00000000000c33b0:
	pushq -240(%rbp)
	pushq -224(%rbp)
	pushq $uuid_00000000000c0dfc
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c33b2:
	mov -128(%RBP),%RSP
	add $-240, %RSP
	subq $56, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $64, %rsp
	ret
with_SB_key_CL_ArrowTokenConsStringToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c33bc
	jmp uuid_00000000000c33be
uuid_00000000000c33bc:
	push %RBP
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	pushq -184(%RBP)
	jmp uuid_00000000000c33b9
	jmp uuid_00000000000c33bb
uuid_00000000000c33b9:
	push %RBP
	jmp uuid_00000000000c33b6
	jmp uuid_00000000000c33b8
uuid_00000000000c33b6:
	push %RBP
	jmp uuid_00000000000c33b3
	jmp uuid_00000000000c33b5
uuid_00000000000c33b3:
	movb $1, -200(%rbp)
uuid_00000000000c33b5:
	mov -264(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c33b8:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c33bb:
	mov -216(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c33be:
	mov -208(%RBP),%RSP
	add $-264, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c33c0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c33bf
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c33c2
uuid_00000000000c33c0:
	pushq -64(%rbp)
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq $0
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c33c2:
	mov -136(%RBP),%RSP
	add $-264, %RSP
	subq $56, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $72, %rsp
	ret
location_SB_of_CL_ArrowSourceLocationAST:
	pushq $uuid_00000000000c33c3
	pushq $0
	pushq $0
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c33ca
	jmp uuid_00000000000c33cc
uuid_00000000000c33ca:
	push %RBP
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	jmp uuid_00000000000c33c7
	jmp uuid_00000000000c33c9
uuid_00000000000c33c7:
	push %RBP
	jmp uuid_00000000000c33c4
	jmp uuid_00000000000c33c6
uuid_00000000000c33c4:
	movb $1, -272(%rbp)
uuid_00000000000c33c6:
	mov -352(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c33c9:
	mov -288(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c33cc:
	mov -280(%RBP),%RSP
	add $-352, %RSP
	mov -272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c342b
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -432(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c33d3
	jmp uuid_00000000000c33d5
uuid_00000000000c33d3:
	push %RBP
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	jmp uuid_00000000000c33d0
	jmp uuid_00000000000c33d2
uuid_00000000000c33d0:
	push %RBP
	jmp uuid_00000000000c33cd
	jmp uuid_00000000000c33cf
uuid_00000000000c33cd:
	movb $1, -440(%rbp)
uuid_00000000000c33cf:
	mov -520(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c33d2:
	mov -456(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c33d5:
	mov -448(%RBP),%RSP
	add $-520, %RSP
	mov -440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3428
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c33dc
	jmp uuid_00000000000c33de
uuid_00000000000c33dc:
	push %RBP
	mov -592(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c33d9
	jmp uuid_00000000000c33db
uuid_00000000000c33d9:
	push %RBP
	mov -584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c33d6
	jmp uuid_00000000000c33d8
uuid_00000000000c33d6:
	movb $1, -608(%rbp)
uuid_00000000000c33d8:
	mov -704(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c33db:
	mov -624(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c33de:
	mov -616(%RBP),%RSP
	add $-776, %RSP
	mov -608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3425
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -856(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c33eb
	jmp uuid_00000000000c33ed
uuid_00000000000c33eb:
	push %RBP
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	jmp uuid_00000000000c33e8
	jmp uuid_00000000000c33ea
uuid_00000000000c33e8:
	push %RBP
	mov -824(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c33e5
	jmp uuid_00000000000c33e7
uuid_00000000000c33e5:
	push %RBP
	mov -816(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c33e2
	jmp uuid_00000000000c33e4
uuid_00000000000c33e2:
	movb $1, -864(%rbp)
uuid_00000000000c33e4:
	mov -992(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000c33e7:
	mov -912(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000c33ea:
	mov -880(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000c33ed:
	mov -872(%RBP),%RSP
	add $-1064, %RSP
	mov -864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3422
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -1144(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c33f7
	jmp uuid_00000000000c33f9
uuid_00000000000c33f7:
	push %RBP
	mov -1136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c33f4
	jmp uuid_00000000000c33f6
uuid_00000000000c33f4:
	push %RBP
	mov -1128(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c33f1
	jmp uuid_00000000000c33f3
uuid_00000000000c33f1:
	movb $1, -1152(%rbp)
uuid_00000000000c33f3:
	mov -1248(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000c33f6:
	mov -1168(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000c33f9:
	mov -1160(%RBP),%RSP
	add $-1320, %RSP
	mov -1152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c341f
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -1400(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3403
	jmp uuid_00000000000c3405
uuid_00000000000c3403:
	push %RBP
	mov -1392(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3400
	jmp uuid_00000000000c3402
uuid_00000000000c3400:
	push %RBP
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	jmp uuid_00000000000c33fd
	jmp uuid_00000000000c33ff
uuid_00000000000c33fd:
	movb $1, -1408(%rbp)
uuid_00000000000c33ff:
	mov -1504(%RBP),%RSP
	add $-1560, %RSP
uuid_00000000000c3402:
	mov -1424(%RBP),%RSP
	add $-1560, %RSP
uuid_00000000000c3405:
	mov -1416(%RBP),%RSP
	add $-1560, %RSP
	mov -1408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c341c
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -1640(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c340f
	jmp uuid_00000000000c3411
uuid_00000000000c340f:
	push %RBP
	mov -1632(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c340c
	jmp uuid_00000000000c340e
uuid_00000000000c340c:
	push %RBP
	mov -1624(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3409
	jmp uuid_00000000000c340b
uuid_00000000000c3409:
	movb $1, -1648(%rbp)
uuid_00000000000c340b:
	mov -1744(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000c340e:
	mov -1664(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000c3411:
	mov -1656(%RBP),%RSP
	add $-1816, %RSP
	mov -1648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3419
	push %RBP
	jmp uuid_00000000000c3416
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3415
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3418
uuid_00000000000c3416:
uuid_00000000000c3418:
	mov -1824(%RBP),%RSP
	add $-1824, %RSP
	jmp uuid_00000000000c341b
uuid_00000000000c3419:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3412
	jmp uuid_00000000000c3414
uuid_00000000000c3412:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c3414:
	mov -1824(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000c341b:
	mov -1568(%RBP),%RSP
	add $-1824, %RSP
	jmp uuid_00000000000c341e
uuid_00000000000c341c:
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3406
	jmp uuid_00000000000c3408
uuid_00000000000c3406:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c3408:
	mov -1568(%RBP),%RSP
	add $-1568, %RSP
uuid_00000000000c341e:
	mov -1328(%RBP),%RSP
	add $-1568, %RSP
	jmp uuid_00000000000c3421
uuid_00000000000c341f:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c33fa
	jmp uuid_00000000000c33fc
uuid_00000000000c33fa:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c33fc:
	mov -1328(%RBP),%RSP
	add $-1328, %RSP
uuid_00000000000c3421:
	mov -1072(%RBP),%RSP
	add $-1328, %RSP
	jmp uuid_00000000000c3424
uuid_00000000000c3422:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c33ee
	jmp uuid_00000000000c33f0
uuid_00000000000c33ee:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c33f0:
	mov -1072(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c3424:
	mov -784(%RBP),%RSP
	add $-1072, %RSP
	jmp uuid_00000000000c3427
uuid_00000000000c3425:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c33df
	jmp uuid_00000000000c33e1
uuid_00000000000c33df:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c33e1:
	mov -784(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000c3427:
	mov -528(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000c342a
uuid_00000000000c3428:
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c342a:
	mov -360(%RBP),%RSP
	add $-520, %RSP
	jmp uuid_00000000000c342d
uuid_00000000000c342b:
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c342d:
	mov -192(%RBP),%RSP
	add $-352, %RSP
	subq $32, %rsp
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
unique_CL_ArrowTokenToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3437
	jmp uuid_00000000000c3439
uuid_00000000000c3437:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	jmp uuid_00000000000c3434
	jmp uuid_00000000000c3436
uuid_00000000000c3434:
	push %RBP
	mov -144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3431
	jmp uuid_00000000000c3433
uuid_00000000000c3431:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c342e
	jmp uuid_00000000000c3430
uuid_00000000000c342e:
	movb $1, -192(%rbp)
uuid_00000000000c3430:
	mov -264(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c3433:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c3436:
	mov -208(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c3439:
	mov -200(%RBP),%RSP
	add $-272, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c343b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c343a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c343d
uuid_00000000000c343b:
	pushq -272(%rbp)
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq $0
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c343d:
	mov -128(%RBP),%RSP
	add $-272, %RSP
	subq $56, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $64, %rsp
	ret
print_SB_verbose_CL_ArrowNilToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3447
	jmp uuid_00000000000c3449
uuid_00000000000c3447:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	jmp uuid_00000000000c3444
	jmp uuid_00000000000c3446
uuid_00000000000c3444:
	push %RBP
	mov -144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3441
	jmp uuid_00000000000c3443
uuid_00000000000c3441:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c343e
	jmp uuid_00000000000c3440
uuid_00000000000c343e:
	movb $1, -192(%rbp)
uuid_00000000000c3440:
	mov -264(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c3443:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c3446:
	mov -208(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c3449:
	mov -200(%RBP),%RSP
	add $-272, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c344b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c344a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c344d
uuid_00000000000c344b:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0f1d
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c344d:
	mov -128(%RBP),%RSP
	add $-272, %RSP
	mov %rbp, %rsp
	sub $64, %rsp
	ret
token_CL__CL_new_CL_ArrowTokenString:
	pushq -8(%rbp)
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function location::new : Arrow<Nil,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call location_CL__CL_new_CL_ArrowSourceLocationNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq $0
	subq $56, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
location_CL__CL_new_CL_ArrowSourceLocationNil:
	pushq $uuid_00000000000c33c3
	pushq $0
	pushq $0
	pushq $0
	subq $32, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
non_SB_zero_CL_ArrowU64SourceLocation:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3457
	jmp uuid_00000000000c3459
uuid_00000000000c3457:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3454
	jmp uuid_00000000000c3456
uuid_00000000000c3454:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3451
	jmp uuid_00000000000c3453
uuid_00000000000c3451:
	push %RBP
	mov -96(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c344e
	jmp uuid_00000000000c3450
uuid_00000000000c344e:
	movb $1, -128(%rbp)
uuid_00000000000c3450:
	mov -176(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000c3453:
	mov -160(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000c3456:
	mov -144(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000c3459:
	mov -136(%RBP),%RSP
	add $-184, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c345e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c345d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3460
uuid_00000000000c345e:
	push %RBP
	mov -168(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c345a
	jmp uuid_00000000000c345c
uuid_00000000000c345a:
	movq $1, -48(%rbp)
uuid_00000000000c345c:
	mov -192(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000c3460:
	mov -88(%RBP),%RSP
	add $-192, %RSP
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
is_SB_already_SB_tokenized_CL_ArrowU64String:
	pushq $0
	mov $already_SB_tokenized_CL_ListStringListStringCaseNumber1, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000c3477:
#call function non-zero : Arrow<List<String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3478
	jmp uuid_00000000000c3479
uuid_00000000000c3478:
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -104(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c346d
	jmp uuid_00000000000c346f
uuid_00000000000c346d:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c346a
	jmp uuid_00000000000c346c
uuid_00000000000c346a:
	push %RBP
	mov -88(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3467
	jmp uuid_00000000000c3469
uuid_00000000000c3467:
	movb $1, -112(%rbp)
uuid_00000000000c3469:
	mov -160(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c346c:
	mov -128(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c346f:
	mov -120(%RBP),%RSP
	add $-168, %RSP
	mov -112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3474
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3473
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3476
uuid_00000000000c3474:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3470
	jmp uuid_00000000000c3472
uuid_00000000000c3470:
	movq $1, -24(%rbp)
uuid_00000000000c3472:
	mov -176(%RBP),%RSP
	add $-176, %RSP
	movq -152(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -144(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -136(%rbp), %r15
	movq %r15, -32(%rbp)
uuid_00000000000c3476:
	mov -80(%RBP),%RSP
	add $-176, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c3477
uuid_00000000000c3479:
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
tokenize_CL_ArrowNilString:
	pushq $uuid_00000000000c0dfc
	push %RBP
#call function is-already-tokenized : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call is_SB_already_SB_tokenized_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c347e
#call function read-file : Arrow<String,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call read_SB_file_CL_ArrowStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -24(%rbp)
#call function cons : Arrow<Cons<String,List<String>>,List<String>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov $already_SB_tokenized_CL_ListStringListStringCaseNumber1, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call cons_CL_ArrowListStringConsListStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov $already_SB_tokenized_CL_ListStringListStringCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	jmp uuid_00000000000c3480
uuid_00000000000c347e:
uuid_00000000000c3480:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $1
	pushq $1
	pushq $1
	pushq $1
	pushq $0
uuid_00000000000c3502:
	mov -24(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c3503
	jmp uuid_00000000000c3504
uuid_00000000000c3503:
	mov -24(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -112(%rbp)
	mov -128(%RBP), %AL
	mov $10, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3485
	push %RBP
	jmp uuid_00000000000c3482
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3481
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3484
uuid_00000000000c3482:
	mov -80(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -80(%rbp)
uuid_00000000000c3484:
	mov -136(%RBP),%RSP
	add $-136, %RSP
	jmp uuid_00000000000c3487
uuid_00000000000c3485:
	mov -72(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -72(%rbp)
	movq $1, -80(%rbp)
uuid_00000000000c3487:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	mov -24(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -136(%rbp)
	mov -152(%RBP), %AL
	mov $35, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c34ff
	push %RBP
	pushq -136(%rbp)
	mov -168(%RBP), %AL
	mov $10, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c34fc
	push %RBP
	pushq -136(%rbp)
	mov -184(%RBP), %AL
	mov $9, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c34f9
	push %RBP
	pushq -136(%rbp)
	mov -200(%RBP), %AL
	mov $32, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c34f6
	push %RBP
	pushq -136(%rbp)
	mov -216(%RBP), %AL
	mov $40, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c34f3
	push %RBP
	pushq -136(%rbp)
	mov -232(%RBP), %AL
	mov $41, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c34f0
	push %RBP
	pushq -136(%rbp)
	mov -248(%RBP), %AL
	mov $39, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c34ed
	push %RBP
	pushq -136(%rbp)
	mov -264(%RBP), %AL
	mov $59, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c34ea
	push %RBP
	pushq -136(%rbp)
	jmp uuid_00000000000c34e7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c34e6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c34e9
uuid_00000000000c34e7:
	push %RBP
	mov -40(%RBP), %AL
	cmp $0, %AL
	jne uuid_00000000000c34e3
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0f1b
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c34e0
	jmp uuid_00000000000c34e2
uuid_00000000000c34e0:
	pushq $uuid_00000000000c0f1b
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	pushq $0
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
uuid_00000000000c34e2:
	mov -296(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000c34e5
uuid_00000000000c34e3:
uuid_00000000000c34e5:
	mov -288(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c34e9:
	mov -272(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000c34ec
uuid_00000000000c34ea:
	push %RBP
	mov -40(%RBP), %AL
	cmp $0, %AL
	jne uuid_00000000000c34d9
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c34d2
	jmp uuid_00000000000c34d4
uuid_00000000000c34d2:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	pushq $0
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
uuid_00000000000c34d4:
	mov -280(%RBP),%RSP
	add $-336, %RSP
	pushq $uuid_00000000000c0f18
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	pushq $0
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	jmp uuid_00000000000c34db
uuid_00000000000c34d9:
uuid_00000000000c34db:
	mov -272(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c34ec:
	mov -256(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000c34ef
uuid_00000000000c34ed:
	push %RBP
	mov -40(%RBP), %AL
	cmp $0, %AL
	jne uuid_00000000000c34cb
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c34c4
	jmp uuid_00000000000c34c6
uuid_00000000000c34c4:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	pushq $0
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
uuid_00000000000c34c6:
	mov -264(%RBP),%RSP
	add $-320, %RSP
	pushq $uuid_00000000000c0f1a
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	pushq $0
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	jmp uuid_00000000000c34cd
uuid_00000000000c34cb:
uuid_00000000000c34cd:
	mov -256(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000c34ef:
	mov -240(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c34f2
uuid_00000000000c34f0:
	push %RBP
	mov -40(%RBP), %AL
	cmp $0, %AL
	jne uuid_00000000000c34bd
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c34b6
	jmp uuid_00000000000c34b8
uuid_00000000000c34b6:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	pushq $0
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
uuid_00000000000c34b8:
	mov -248(%RBP),%RSP
	add $-304, %RSP
	mov -104(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -104(%rbp)
	pushq $uuid_00000000000c0d2f
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	pushq $0
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	jmp uuid_00000000000c34bf
uuid_00000000000c34bd:
uuid_00000000000c34bf:
	mov -240(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c34f2:
	mov -224(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c34f5
uuid_00000000000c34f3:
	push %RBP
	mov -40(%RBP), %AL
	cmp $0, %AL
	jne uuid_00000000000c34af
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c34a8
	jmp uuid_00000000000c34aa
uuid_00000000000c34a8:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	pushq $0
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
uuid_00000000000c34aa:
	mov -232(%RBP),%RSP
	add $-288, %RSP
	mov -104(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -104(%rbp)
	pushq $uuid_00000000000c0d2d
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	pushq $0
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	movq -72(%rbp), %r15
	movq %r15, -88(%rbp)
	mov -72(%rbp), %r15
	mov %r15, -88(%rbp)
	movq -80(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -80(%rbp), %r15
	mov %r15, -96(%rbp)
	jmp uuid_00000000000c34b1
uuid_00000000000c34af:
uuid_00000000000c34b1:
	mov -224(%RBP),%RSP
	add $-224, %RSP
uuid_00000000000c34f5:
	mov -208(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000c34f8
uuid_00000000000c34f6:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c34a1
	jmp uuid_00000000000c34a3
uuid_00000000000c34a1:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	pushq $0
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
uuid_00000000000c34a3:
	mov -208(%RBP),%RSP
	add $-264, %RSP
	movq -72(%rbp), %r15
	movq %r15, -88(%rbp)
	mov -72(%rbp), %r15
	mov %r15, -88(%rbp)
	movq -80(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -80(%rbp), %r15
	mov %r15, -96(%rbp)
uuid_00000000000c34f8:
	mov -192(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000c34fb
uuid_00000000000c34f9:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c349a
	jmp uuid_00000000000c349c
uuid_00000000000c349a:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	pushq $0
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
uuid_00000000000c349c:
	mov -192(%RBP),%RSP
	add $-248, %RSP
	movq -72(%rbp), %r15
	movq %r15, -88(%rbp)
	mov -72(%rbp), %r15
	mov %r15, -88(%rbp)
	movq -80(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -80(%rbp), %r15
	mov %r15, -96(%rbp)
uuid_00000000000c34fb:
	mov -176(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c34fe
uuid_00000000000c34fc:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3493
	jmp uuid_00000000000c3495
uuid_00000000000c3493:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	pushq $0
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
uuid_00000000000c3495:
	mov -176(%RBP),%RSP
	add $-232, %RSP
	movq -72(%rbp), %r15
	movq %r15, -88(%rbp)
	mov -72(%rbp), %r15
	mov %r15, -88(%rbp)
	movq -80(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -80(%rbp), %r15
	mov %r15, -96(%rbp)
	movb $0, -40(%rbp)
uuid_00000000000c34fe:
	mov -160(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000c3501
uuid_00000000000c34ff:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c348c
	jmp uuid_00000000000c348e
uuid_00000000000c348c:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	pushq $0
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
uuid_00000000000c348e:
	mov -160(%RBP),%RSP
	add $-216, %RSP
	movq -72(%rbp), %r15
	movq %r15, -88(%rbp)
	mov -72(%rbp), %r15
	mov %r15, -88(%rbp)
	movq -80(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -80(%rbp), %r15
	mov %r15, -96(%rbp)
	movb $1, -40(%rbp)
uuid_00000000000c3501:
	mov -144(%RBP),%RSP
	add $-216, %RSP
	mov -24(%RBP), %RAX
	inc %RAX
	movq %RAX, -24(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %rsp
	add $8, %rsp
	add $56, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c3502
uuid_00000000000c3504:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3509
	jmp uuid_00000000000c350b
uuid_00000000000c3509:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	pushq $0
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
uuid_00000000000c350b:
	mov -112(%RBP),%RSP
	add $-168, %RSP
#call function reverse : Arrow<List<Token>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call reverse_CL_ArrowListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	push %RBP
	mov -104(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3512
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3510
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3511
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<I64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -104(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3514
uuid_00000000000c3512:
uuid_00000000000c3514:
	mov -176(%RBP),%RSP
	add $-176, %RSP
	mov %rbp, %rsp
	sub $16, %rsp
	ret
align_CL_ArrowI64I64:
#call function max : Arrow<Cons<I64,I64>,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq $8
	mov %RBX, %RBP
	call max_CL_ArrowI64ConsI64I64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_nil_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c351b
	jmp uuid_00000000000c351d
uuid_00000000000c351b:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3518
	jmp uuid_00000000000c351a
uuid_00000000000c3518:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3515
	jmp uuid_00000000000c3517
uuid_00000000000c3515:
	movb $1, -104(%rbp)
uuid_00000000000c3517:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c351a:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c351d:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c352e
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3524
	jmp uuid_00000000000c3526
uuid_00000000000c3524:
	push %RBP
	jmp uuid_00000000000c3521
	jmp uuid_00000000000c3523
uuid_00000000000c3521:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c1139
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c351e
	jmp uuid_00000000000c3520
uuid_00000000000c351e:
	movb $1, -216(%rbp)
uuid_00000000000c3520:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c3523:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c3526:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c352b
	push %RBP
	jmp uuid_00000000000c3528
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3527
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c352a
uuid_00000000000c3528:
uuid_00000000000c352a:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c352d
uuid_00000000000c352b:
	movq $1, -40(%rbp)
uuid_00000000000c352d:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c3530
uuid_00000000000c352e:
#call function is-nil : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_nil_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-nil : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_nil_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c3530:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_seq_CL_ArrowU64AST:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3537
	jmp uuid_00000000000c3539
uuid_00000000000c3537:
	push %RBP
	jmp uuid_00000000000c3534
	jmp uuid_00000000000c3536
uuid_00000000000c3534:
	push %RBP
	jmp uuid_00000000000c3531
	jmp uuid_00000000000c3533
uuid_00000000000c3531:
	movb $1, -248(%rbp)
uuid_00000000000c3533:
	mov -272(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c3536:
	mov -264(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c3539:
	mov -256(%RBP),%RSP
	add $-272, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c353e
	push %RBP
	jmp uuid_00000000000c353b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c353a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c353d
uuid_00000000000c353b:
uuid_00000000000c353d:
	mov -280(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c3540
uuid_00000000000c353e:
	movq $1, -88(%rbp)
uuid_00000000000c3540:
	mov -168(%RBP),%RSP
	add $-272, %RSP
	mov -88(%rbp), %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
is_SB_arrow_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3547
	jmp uuid_00000000000c3549
uuid_00000000000c3547:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3544
	jmp uuid_00000000000c3546
uuid_00000000000c3544:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3541
	jmp uuid_00000000000c3543
uuid_00000000000c3541:
	movb $1, -104(%rbp)
uuid_00000000000c3543:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c3546:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c3549:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c355a
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3550
	jmp uuid_00000000000c3552
uuid_00000000000c3550:
	push %RBP
	jmp uuid_00000000000c354d
	jmp uuid_00000000000c354f
uuid_00000000000c354d:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c13d4
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c354a
	jmp uuid_00000000000c354c
uuid_00000000000c354a:
	movb $1, -216(%rbp)
uuid_00000000000c354c:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c354f:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c3552:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3557
	push %RBP
	jmp uuid_00000000000c3554
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3553
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3556
uuid_00000000000c3554:
uuid_00000000000c3556:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c3559
uuid_00000000000c3557:
	movq $1, -40(%rbp)
uuid_00000000000c3559:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c355c
uuid_00000000000c355a:
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c355c:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_array_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3563
	jmp uuid_00000000000c3565
uuid_00000000000c3563:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3560
	jmp uuid_00000000000c3562
uuid_00000000000c3560:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c355d
	jmp uuid_00000000000c355f
uuid_00000000000c355d:
	movb $1, -104(%rbp)
uuid_00000000000c355f:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c3562:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c3565:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3576
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c356c
	jmp uuid_00000000000c356e
uuid_00000000000c356c:
	push %RBP
	jmp uuid_00000000000c3569
	jmp uuid_00000000000c356b
uuid_00000000000c3569:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c12d1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3566
	jmp uuid_00000000000c3568
uuid_00000000000c3566:
	movb $1, -216(%rbp)
uuid_00000000000c3568:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c356b:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c356e:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3573
	push %RBP
	jmp uuid_00000000000c3570
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c356f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3572
uuid_00000000000c3570:
uuid_00000000000c3572:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c3575
uuid_00000000000c3573:
	movq $1, -40(%rbp)
uuid_00000000000c3575:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c3578
uuid_00000000000c3576:
#call function is-array : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_array_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-array : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_array_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c3578:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_hook_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c357f
	jmp uuid_00000000000c3581
uuid_00000000000c357f:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c357c
	jmp uuid_00000000000c357e
uuid_00000000000c357c:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3579
	jmp uuid_00000000000c357b
uuid_00000000000c3579:
	movb $1, -104(%rbp)
uuid_00000000000c357b:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c357e:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c3581:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3593
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3589
	jmp uuid_00000000000c358b
uuid_00000000000c3589:
	push %RBP
	jmp uuid_00000000000c3586
	jmp uuid_00000000000c3588
uuid_00000000000c3586:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c3582
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3583
	jmp uuid_00000000000c3585
uuid_00000000000c3583:
	movb $1, -216(%rbp)
uuid_00000000000c3585:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c3588:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c358b:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3590
	push %RBP
	jmp uuid_00000000000c358d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c358c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c358f
uuid_00000000000c358d:
uuid_00000000000c358f:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c3592
uuid_00000000000c3590:
	movq $1, -40(%rbp)
uuid_00000000000c3592:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c3595
uuid_00000000000c3593:
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c3595:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_blob_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c359c
	jmp uuid_00000000000c359e
uuid_00000000000c359c:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3599
	jmp uuid_00000000000c359b
uuid_00000000000c3599:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3596
	jmp uuid_00000000000c3598
uuid_00000000000c3596:
	movb $1, -104(%rbp)
uuid_00000000000c3598:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c359b:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c359e:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c35b0
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c35a6
	jmp uuid_00000000000c35a8
uuid_00000000000c35a6:
	push %RBP
	jmp uuid_00000000000c35a3
	jmp uuid_00000000000c35a5
uuid_00000000000c35a3:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c359f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c35a0
	jmp uuid_00000000000c35a2
uuid_00000000000c35a0:
	movb $1, -216(%rbp)
uuid_00000000000c35a2:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c35a5:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c35a8:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c35ad
	push %RBP
	jmp uuid_00000000000c35aa
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c35a9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c35ac
uuid_00000000000c35aa:
uuid_00000000000c35ac:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c35af
uuid_00000000000c35ad:
	movq $1, -40(%rbp)
uuid_00000000000c35af:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c35b2
uuid_00000000000c35b0:
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c35b2:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_stack_SB_variable_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c35b9
	jmp uuid_00000000000c35bb
uuid_00000000000c35b9:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c35b6
	jmp uuid_00000000000c35b8
uuid_00000000000c35b6:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c35b3
	jmp uuid_00000000000c35b5
uuid_00000000000c35b3:
	movb $1, -104(%rbp)
uuid_00000000000c35b5:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c35b8:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c35bb:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c35cc
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c35c2
	jmp uuid_00000000000c35c4
uuid_00000000000c35c2:
	push %RBP
	jmp uuid_00000000000c35bf
	jmp uuid_00000000000c35c1
uuid_00000000000c35bf:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c1309
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c35bc
	jmp uuid_00000000000c35be
uuid_00000000000c35bc:
	movb $1, -216(%rbp)
uuid_00000000000c35be:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c35c1:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c35c4:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c35c9
	push %RBP
	jmp uuid_00000000000c35c6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c35c5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c35c8
uuid_00000000000c35c6:
uuid_00000000000c35c8:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c35cb
uuid_00000000000c35c9:
	movq $1, -40(%rbp)
uuid_00000000000c35cb:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c35ce
uuid_00000000000c35cc:
#call function is-stack-variable : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_stack_SB_variable_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-stack-variable : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_stack_SB_variable_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c35ce:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_cons_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c35d5
	jmp uuid_00000000000c35d7
uuid_00000000000c35d5:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c35d2
	jmp uuid_00000000000c35d4
uuid_00000000000c35d2:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c35cf
	jmp uuid_00000000000c35d1
uuid_00000000000c35cf:
	movb $1, -104(%rbp)
uuid_00000000000c35d1:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c35d4:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c35d7:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c35e8
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c35de
	jmp uuid_00000000000c35e0
uuid_00000000000c35de:
	push %RBP
	jmp uuid_00000000000c35db
	jmp uuid_00000000000c35dd
uuid_00000000000c35db:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c1157
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c35d8
	jmp uuid_00000000000c35da
uuid_00000000000c35d8:
	movb $1, -216(%rbp)
uuid_00000000000c35da:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c35dd:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c35e0:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c35e5
	push %RBP
	jmp uuid_00000000000c35e2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c35e1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c35e4
uuid_00000000000c35e2:
uuid_00000000000c35e4:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c35e7
uuid_00000000000c35e5:
	movq $1, -40(%rbp)
uuid_00000000000c35e7:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c35ea
uuid_00000000000c35e8:
#call function is-cons : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_cons_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-cons : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_cons_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c35ea:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_impure_SB_ctx_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c35f1
	jmp uuid_00000000000c35f3
uuid_00000000000c35f1:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c35ee
	jmp uuid_00000000000c35f0
uuid_00000000000c35ee:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c35eb
	jmp uuid_00000000000c35ed
uuid_00000000000c35eb:
	movb $1, -104(%rbp)
uuid_00000000000c35ed:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c35f0:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c35f3:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3605
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c35fb
	jmp uuid_00000000000c35fd
uuid_00000000000c35fb:
	push %RBP
	jmp uuid_00000000000c35f8
	jmp uuid_00000000000c35fa
uuid_00000000000c35f8:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c35f4
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c35f5
	jmp uuid_00000000000c35f7
uuid_00000000000c35f5:
	movb $1, -216(%rbp)
uuid_00000000000c35f7:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c35fa:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c35fd:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3602
	push %RBP
	jmp uuid_00000000000c35ff
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c35fe
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3601
uuid_00000000000c35ff:
uuid_00000000000c3601:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c3604
uuid_00000000000c3602:
	movq $1, -40(%rbp)
uuid_00000000000c3604:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c3607
uuid_00000000000c3605:
#call function is-impure-ctx : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_impure_SB_ctx_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-impure-ctx : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_impure_SB_ctx_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c3607:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_string_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c360e
	jmp uuid_00000000000c3610
uuid_00000000000c360e:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c360b
	jmp uuid_00000000000c360d
uuid_00000000000c360b:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3608
	jmp uuid_00000000000c360a
uuid_00000000000c3608:
	movb $1, -104(%rbp)
uuid_00000000000c360a:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c360d:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c3610:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3622
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3618
	jmp uuid_00000000000c361a
uuid_00000000000c3618:
	push %RBP
	jmp uuid_00000000000c3615
	jmp uuid_00000000000c3617
uuid_00000000000c3615:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c3611
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3612
	jmp uuid_00000000000c3614
uuid_00000000000c3612:
	movb $1, -216(%rbp)
uuid_00000000000c3614:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c3617:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c361a:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c361f
	push %RBP
	jmp uuid_00000000000c361c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c361b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c361e
uuid_00000000000c361c:
uuid_00000000000c361e:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c3621
uuid_00000000000c361f:
	movq $1, -40(%rbp)
uuid_00000000000c3621:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c3624
uuid_00000000000c3622:
#call function is-string : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_string_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-string : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_string_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c3624:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_rc_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c362b
	jmp uuid_00000000000c362d
uuid_00000000000c362b:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3628
	jmp uuid_00000000000c362a
uuid_00000000000c3628:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3625
	jmp uuid_00000000000c3627
uuid_00000000000c3625:
	movb $1, -104(%rbp)
uuid_00000000000c3627:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c362a:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c362d:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c363e
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3634
	jmp uuid_00000000000c3636
uuid_00000000000c3634:
	push %RBP
	jmp uuid_00000000000c3631
	jmp uuid_00000000000c3633
uuid_00000000000c3631:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c1382
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c362e
	jmp uuid_00000000000c3630
uuid_00000000000c362e:
	movb $1, -216(%rbp)
uuid_00000000000c3630:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c3633:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c3636:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c363b
	push %RBP
	jmp uuid_00000000000c3638
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3637
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c363a
uuid_00000000000c3638:
uuid_00000000000c363a:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c363d
uuid_00000000000c363b:
	movq $1, -40(%rbp)
uuid_00000000000c363d:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c3640
uuid_00000000000c363e:
#call function is-rc : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_rc_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-rc : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_rc_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c3640:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_onto_SB_stack_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3647
	jmp uuid_00000000000c3649
uuid_00000000000c3647:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3644
	jmp uuid_00000000000c3646
uuid_00000000000c3644:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3641
	jmp uuid_00000000000c3643
uuid_00000000000c3641:
	movb $1, -104(%rbp)
uuid_00000000000c3643:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c3646:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c3649:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c366d
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3663
	jmp uuid_00000000000c3665
uuid_00000000000c3663:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c365a
	jmp uuid_00000000000c365c
uuid_00000000000c365a:
	push %RBP
	jmp uuid_00000000000c3657
	jmp uuid_00000000000c3659
uuid_00000000000c3657:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3651
	jmp uuid_00000000000c3653
uuid_00000000000c3651:
	push %RBP
	jmp uuid_00000000000c364e
	jmp uuid_00000000000c3650
uuid_00000000000c364e:
	push %RBP
	mov -312(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -368(%rbp)
	pushq $uuid_00000000000c364a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c364b
	jmp uuid_00000000000c364d
uuid_00000000000c364b:
	movb $1, -336(%rbp)
uuid_00000000000c364d:
	mov -360(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c3650:
	mov -352(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c3653:
	mov -344(%RBP),%RSP
	add $-368, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3654
	jmp uuid_00000000000c3656
uuid_00000000000c3654:
	movb $1, -280(%rbp)
uuid_00000000000c3656:
	mov -304(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c3659:
	mov -296(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c365c:
	mov -288(%RBP),%RSP
	add $-368, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3660
	jmp uuid_00000000000c3662
uuid_00000000000c3660:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000c199b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c365d
	jmp uuid_00000000000c365f
uuid_00000000000c365d:
	movb $1, -216(%rbp)
uuid_00000000000c365f:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c3662:
	mov -232(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c3665:
	mov -224(%RBP),%RSP
	add $-384, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c366a
	push %RBP
	jmp uuid_00000000000c3667
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3666
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3669
uuid_00000000000c3667:
uuid_00000000000c3669:
	mov -392(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000c366c
uuid_00000000000c366a:
	movq $1, -40(%rbp)
uuid_00000000000c366c:
	mov -184(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000c366f
uuid_00000000000c366d:
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c366f:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_impure_SB_offset_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3676
	jmp uuid_00000000000c3678
uuid_00000000000c3676:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3673
	jmp uuid_00000000000c3675
uuid_00000000000c3673:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3670
	jmp uuid_00000000000c3672
uuid_00000000000c3670:
	movb $1, -104(%rbp)
uuid_00000000000c3672:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c3675:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c3678:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c369c
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3692
	jmp uuid_00000000000c3694
uuid_00000000000c3692:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3689
	jmp uuid_00000000000c368b
uuid_00000000000c3689:
	push %RBP
	jmp uuid_00000000000c3686
	jmp uuid_00000000000c3688
uuid_00000000000c3686:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3680
	jmp uuid_00000000000c3682
uuid_00000000000c3680:
	push %RBP
	jmp uuid_00000000000c367d
	jmp uuid_00000000000c367f
uuid_00000000000c367d:
	push %RBP
	mov -312(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -368(%rbp)
	pushq $uuid_00000000000c3679
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c367a
	jmp uuid_00000000000c367c
uuid_00000000000c367a:
	movb $1, -336(%rbp)
uuid_00000000000c367c:
	mov -360(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c367f:
	mov -352(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c3682:
	mov -344(%RBP),%RSP
	add $-368, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3683
	jmp uuid_00000000000c3685
uuid_00000000000c3683:
	movb $1, -280(%rbp)
uuid_00000000000c3685:
	mov -304(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c3688:
	mov -296(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c368b:
	mov -288(%RBP),%RSP
	add $-368, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c368f
	jmp uuid_00000000000c3691
uuid_00000000000c368f:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000c199b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c368c
	jmp uuid_00000000000c368e
uuid_00000000000c368c:
	movb $1, -216(%rbp)
uuid_00000000000c368e:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c3691:
	mov -232(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c3694:
	mov -224(%RBP),%RSP
	add $-384, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3699
	push %RBP
	jmp uuid_00000000000c3696
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3695
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3698
uuid_00000000000c3696:
uuid_00000000000c3698:
	mov -392(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000c369b
uuid_00000000000c3699:
	movq $1, -40(%rbp)
uuid_00000000000c369b:
	mov -184(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000c369e
uuid_00000000000c369c:
#call function is-impure-offset : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_impure_SB_offset_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-impure-offset : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_impure_SB_offset_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c369e:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_branchconditional_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c36a5
	jmp uuid_00000000000c36a7
uuid_00000000000c36a5:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c36a2
	jmp uuid_00000000000c36a4
uuid_00000000000c36a2:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c369f
	jmp uuid_00000000000c36a1
uuid_00000000000c369f:
	movb $1, -104(%rbp)
uuid_00000000000c36a1:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c36a4:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c36a7:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c36b9
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c36af
	jmp uuid_00000000000c36b1
uuid_00000000000c36af:
	push %RBP
	jmp uuid_00000000000c36ac
	jmp uuid_00000000000c36ae
uuid_00000000000c36ac:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c36a8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c36a9
	jmp uuid_00000000000c36ab
uuid_00000000000c36a9:
	movb $1, -216(%rbp)
uuid_00000000000c36ab:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c36ae:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c36b1:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c36b6
	push %RBP
	jmp uuid_00000000000c36b3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c36b2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c36b5
uuid_00000000000c36b3:
uuid_00000000000c36b5:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c36b8
uuid_00000000000c36b6:
	movq $1, -40(%rbp)
uuid_00000000000c36b8:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c36bb
uuid_00000000000c36b9:
#call function is-branchconditional : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_branchconditional_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-branchconditional : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_branchconditional_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c36bb:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
_AD__CL_ArrowASTConsASTAST:
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c36cc
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c36c2
	jmp uuid_00000000000c36c4
uuid_00000000000c36c2:
	push %RBP
	mov -376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c36bf
	jmp uuid_00000000000c36c1
uuid_00000000000c36bf:
	push %RBP
	mov -368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c36bc
	jmp uuid_00000000000c36be
uuid_00000000000c36bc:
	movb $1, -392(%rbp)
uuid_00000000000c36be:
	mov -488(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c36c1:
	mov -408(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c36c4:
	mov -400(%RBP),%RSP
	add $-560, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c36c9
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	jmp uuid_00000000000c36c6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c36c5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c36c8
uuid_00000000000c36c6:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c36c8:
	mov -568(%RBP),%RSP
	add $-640, %RSP
	jmp uuid_00000000000c36cb
uuid_00000000000c36c9:
#call function + : Arrow<Cons<AST,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	mov %RBX, %RBP
	call _AD__CL_ArrowASTConsASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function + : Arrow<Cons<AST,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call _AD__CL_ArrowASTConsASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c36cb:
	mov -312(%RBP),%RSP
	add $-560, %RSP
	jmp uuid_00000000000c36ce
uuid_00000000000c36cc:
uuid_00000000000c36ce:
	mov -232(%RBP),%RSP
	add $-304, %RSP
	subq $72, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $152, %rsp
	ret
print_CL_ArrowNilToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c36d8
	jmp uuid_00000000000c36da
uuid_00000000000c36d8:
	push %RBP
	jmp uuid_00000000000c36d5
	jmp uuid_00000000000c36d7
uuid_00000000000c36d5:
	push %RBP
	jmp uuid_00000000000c36d2
	jmp uuid_00000000000c36d4
uuid_00000000000c36d2:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c36cf
	jmp uuid_00000000000c36d1
uuid_00000000000c36cf:
	movb $1, -192(%rbp)
uuid_00000000000c36d1:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c36d4:
	mov -216(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c36d7:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c36da:
	mov -200(%RBP),%RSP
	add $-232, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c36dc
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c36db
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c36de
uuid_00000000000c36dc:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c36de:
	mov -128(%RBP),%RSP
	add $-232, %RSP
	mov %rbp, %rsp
	sub $64, %rsp
	ret
print_CL_ArrowNilContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c36f4
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c36f1
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $0
	push %RBP
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c36e8
	jmp uuid_00000000000c36ea
uuid_00000000000c36e8:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	jmp uuid_00000000000c36e5
	jmp uuid_00000000000c36e7
uuid_00000000000c36e5:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c36e2
	jmp uuid_00000000000c36e4
uuid_00000000000c36e2:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c36df
	jmp uuid_00000000000c36e1
uuid_00000000000c36df:
	movb $1, -520(%rbp)
uuid_00000000000c36e1:
	mov -632(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c36e4:
	mov -616(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c36e7:
	mov -536(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c36ea:
	mov -528(%RBP),%RSP
	add $-728, %RSP
	mov -520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c36ee
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c36ed
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c36f0
uuid_00000000000c36ee:
#call function print : Arrow<Context,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -624(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c36eb
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c36ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c36f0:
	mov -416(%RBP),%RSP
	add $-728, %RSP
	jmp uuid_00000000000c36f3
uuid_00000000000c36f1:
uuid_00000000000c36f3:
	mov -312(%RBP),%RSP
	add $-408, %RSP
	jmp uuid_00000000000c36f6
uuid_00000000000c36f4:
uuid_00000000000c36f6:
	mov -208(%RBP),%RSP
	add $-304, %RSP
	mov %rbp, %rsp
	sub $104, %rsp
	ret
print_CL_ArrowNilTContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c370d
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov -504(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c370a
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3703
	jmp uuid_00000000000c3705
uuid_00000000000c3703:
	push %RBP
	jmp uuid_00000000000c3700
	jmp uuid_00000000000c3702
uuid_00000000000c3700:
	push %RBP
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	jmp uuid_00000000000c36fd
	jmp uuid_00000000000c36ff
uuid_00000000000c36fd:
	push %RBP
	mov -528(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c36fa
	jmp uuid_00000000000c36fc
uuid_00000000000c36fa:
	push %RBP
	mov -520(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c36f7
	jmp uuid_00000000000c36f9
uuid_00000000000c36f7:
	movb $1, -640(%rbp)
uuid_00000000000c36f9:
	mov -712(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c36fc:
	mov -696(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c36ff:
	mov -664(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c3702:
	mov -656(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c3705:
	mov -648(%RBP),%RSP
	add $-832, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3707
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3706
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3709
uuid_00000000000c3707:
#call function print : Arrow<TContext,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -704(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1527
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c36ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c3709:
	mov -512(%RBP),%RSP
	add $-832, %RSP
	jmp uuid_00000000000c370c
uuid_00000000000c370a:
uuid_00000000000c370c:
	mov -384(%RBP),%RSP
	add $-504, %RSP
	jmp uuid_00000000000c370f
uuid_00000000000c370d:
uuid_00000000000c370f:
	mov -256(%RBP),%RSP
	add $-376, %RSP
	mov %rbp, %rsp
	sub $128, %rsp
	ret
print_CL_ArrowNilAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3780
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c377d
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3717
	jmp uuid_00000000000c3719
uuid_00000000000c3717:
	push %RBP
	jmp uuid_00000000000c3714
	jmp uuid_00000000000c3716
uuid_00000000000c3714:
	push %RBP
	mov -328(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3711
	jmp uuid_00000000000c3713
uuid_00000000000c3711:
	movb $1, -400(%rbp)
uuid_00000000000c3713:
	mov -424(%RBP),%RSP
	add $-432, %RSP
uuid_00000000000c3716:
	mov -416(%RBP),%RSP
	add $-432, %RSP
uuid_00000000000c3719:
	mov -408(%RBP),%RSP
	add $-432, %RSP
	mov -400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c377a
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3720
	jmp uuid_00000000000c3722
uuid_00000000000c3720:
	push %RBP
	jmp uuid_00000000000c371d
	jmp uuid_00000000000c371f
uuid_00000000000c371d:
	push %RBP
	mov -448(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c371a
	jmp uuid_00000000000c371c
uuid_00000000000c371a:
	movb $1, -520(%rbp)
uuid_00000000000c371c:
	mov -544(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000c371f:
	mov -536(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000c3722:
	mov -528(%RBP),%RSP
	add $-552, %RSP
	mov -520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3777
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3726
	jmp uuid_00000000000c3728
uuid_00000000000c3726:
	push %RBP
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	jmp uuid_00000000000c3723
	jmp uuid_00000000000c3725
uuid_00000000000c3723:
	movb $1, -640(%rbp)
uuid_00000000000c3725:
	mov -656(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000c3728:
	mov -648(%RBP),%RSP
	add $-680, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3774
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c372c
	jmp uuid_00000000000c372e
uuid_00000000000c372c:
	push %RBP
	jmp uuid_00000000000c3729
	jmp uuid_00000000000c372b
uuid_00000000000c3729:
	movb $1, -768(%rbp)
uuid_00000000000c372b:
	mov -784(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000c372e:
	mov -776(%RBP),%RSP
	add $-784, %RSP
	mov -768(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3771
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -864(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3735
	jmp uuid_00000000000c3737
uuid_00000000000c3735:
	push %RBP
	mov -856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3732
	jmp uuid_00000000000c3734
uuid_00000000000c3732:
	push %RBP
	mov -848(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c372f
	jmp uuid_00000000000c3731
uuid_00000000000c372f:
	movb $1, -872(%rbp)
uuid_00000000000c3731:
	mov -968(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c3734:
	mov -888(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c3737:
	mov -880(%RBP),%RSP
	add $-1040, %RSP
	mov -872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c376e
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1120(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c373f
	jmp uuid_00000000000c3741
uuid_00000000000c373f:
	push %RBP
	mov -1112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c373c
	jmp uuid_00000000000c373e
uuid_00000000000c373c:
	push %RBP
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	jmp uuid_00000000000c3739
	jmp uuid_00000000000c373b
uuid_00000000000c3739:
	movb $1, -1128(%rbp)
uuid_00000000000c373b:
	mov -1224(%RBP),%RSP
	add $-1280, %RSP
uuid_00000000000c373e:
	mov -1144(%RBP),%RSP
	add $-1280, %RSP
uuid_00000000000c3741:
	mov -1136(%RBP),%RSP
	add $-1280, %RSP
	mov -1128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c376b
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1360(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3749
	jmp uuid_00000000000c374b
uuid_00000000000c3749:
	push %RBP
	mov -1352(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3746
	jmp uuid_00000000000c3748
uuid_00000000000c3746:
	push %RBP
	mov -1344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3743
	jmp uuid_00000000000c3745
uuid_00000000000c3743:
	movb $1, -1368(%rbp)
uuid_00000000000c3745:
	mov -1464(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c3748:
	mov -1384(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c374b:
	mov -1376(%RBP),%RSP
	add $-1536, %RSP
	mov -1368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3768
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1616(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3755
	jmp uuid_00000000000c3757
uuid_00000000000c3755:
	push %RBP
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	jmp uuid_00000000000c3752
	jmp uuid_00000000000c3754
uuid_00000000000c3752:
	push %RBP
	mov -1584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c374f
	jmp uuid_00000000000c3751
uuid_00000000000c374f:
	push %RBP
	mov -1576(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c374c
	jmp uuid_00000000000c374e
uuid_00000000000c374c:
	movb $1, -1624(%rbp)
uuid_00000000000c374e:
	mov -1752(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000c3751:
	mov -1672(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000c3754:
	mov -1640(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000c3757:
	mov -1632(%RBP),%RSP
	add $-1824, %RSP
	mov -1624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3765
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1904(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c375e
	jmp uuid_00000000000c3760
uuid_00000000000c375e:
	push %RBP
	mov -1896(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c375b
	jmp uuid_00000000000c375d
uuid_00000000000c375b:
	push %RBP
	mov -1888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3758
	jmp uuid_00000000000c375a
uuid_00000000000c3758:
	movb $1, -1912(%rbp)
uuid_00000000000c375a:
	mov -2008(%RBP),%RSP
	add $-2080, %RSP
uuid_00000000000c375d:
	mov -1928(%RBP),%RSP
	add $-2080, %RSP
uuid_00000000000c3760:
	mov -1920(%RBP),%RSP
	add $-2080, %RSP
	mov -1912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3762
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3761
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3764
uuid_00000000000c3762:
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c36ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c3764:
	mov -1832(%RBP),%RSP
	add $-2080, %RSP
	jmp uuid_00000000000c3767
uuid_00000000000c3765:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d2d
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0f1b
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0fa9
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d2f
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c3767:
	mov -1544(%RBP),%RSP
	add $-1824, %RSP
	jmp uuid_00000000000c376a
uuid_00000000000c3768:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d2d
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d2e
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d2f
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c376a:
	mov -1288(%RBP),%RSP
	add $-1536, %RSP
	jmp uuid_00000000000c376d
uuid_00000000000c376b:
#call function print : Arrow<Token,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3742
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c376d:
	mov -1048(%RBP),%RSP
	add $-1280, %RSP
	jmp uuid_00000000000c3770
uuid_00000000000c376e:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3738
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c36eb
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c3770:
	mov -792(%RBP),%RSP
	add $-1040, %RSP
	jmp uuid_00000000000c3773
uuid_00000000000c3771:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c199b
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c3773:
	mov -688(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000c3776
uuid_00000000000c3774:
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c3776:
	mov -560(%RBP),%RSP
	add $-680, %RSP
	jmp uuid_00000000000c3779
uuid_00000000000c3777:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0f1a
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -552(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c3779:
	mov -440(%RBP),%RSP
	add $-552, %RSP
	jmp uuid_00000000000c377c
uuid_00000000000c377a:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -432(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c377c:
	mov -320(%RBP),%RSP
	add $-432, %RSP
	jmp uuid_00000000000c377f
uuid_00000000000c377d:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d1d
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c377f:
	mov -240(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000c3782
uuid_00000000000c3780:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3710
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c3782:
	mov -160(%RBP),%RSP
	add $-232, %RSP
	mov %rbp, %rsp
	sub $80, %rsp
	ret
print_CL_ArrowNilFContext:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3783
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c3797:
#call function non-zero : Arrow<FContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3798
	jmp uuid_00000000000c3799
uuid_00000000000c3798:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3790
	jmp uuid_00000000000c3792
uuid_00000000000c3790:
	push %RBP
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	jmp uuid_00000000000c378d
	jmp uuid_00000000000c378f
uuid_00000000000c378d:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000c378a
	jmp uuid_00000000000c378c
uuid_00000000000c378a:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3787
	jmp uuid_00000000000c3789
uuid_00000000000c3787:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3784
	jmp uuid_00000000000c3786
uuid_00000000000c3784:
	movb $1, -624(%rbp)
uuid_00000000000c3786:
	mov -848(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000c3789:
	mov -832(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000c378c:
	mov -800(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000c378f:
	mov -640(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000c3792:
	mov -632(%RBP),%RSP
	add $-1048, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3794
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3793
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3796
uuid_00000000000c3794:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -840(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1527
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Fragment,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -1048(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -976(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -968(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -960(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -952(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -944(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -936(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -928(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -920(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -912(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -904(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -896(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -888(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -880(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -872(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -864(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -856(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c3796:
	mov -416(%RBP),%RSP
	add $-1048, %RSP
	add $200, %rsp
	add $200, %rsp
	add $8, %rsp
	add $152, %rsp
	add $24, %rsp
	add $8, %rsp
	add $200, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c3797
uuid_00000000000c3799:
	mov %rbp, %rsp
	sub $208, %rsp
	ret
print_CL_ArrowNilFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c37ac
	jmp uuid_00000000000c37ae
uuid_00000000000c37ac:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	jmp uuid_00000000000c37a9
	jmp uuid_00000000000c37ab
uuid_00000000000c37a9:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c37a6
	jmp uuid_00000000000c37a8
uuid_00000000000c37a6:
	push %RBP
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	jmp uuid_00000000000c37a3
	jmp uuid_00000000000c37a5
uuid_00000000000c37a3:
	push %RBP
	mov -408(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c37a0
	jmp uuid_00000000000c37a2
uuid_00000000000c37a0:
	push %RBP
	mov -400(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c379d
	jmp uuid_00000000000c379f
uuid_00000000000c379d:
	push %RBP
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	jmp uuid_00000000000c379a
	jmp uuid_00000000000c379c
uuid_00000000000c379a:
	movb $1, -480(%rbp)
uuid_00000000000c379c:
	mov -840(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c379f:
	mov -784(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c37a2:
	mov -768(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c37a5:
	mov -736(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c37a8:
	mov -528(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c37ab:
	mov -496(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c37ae:
	mov -488(%RBP),%RSP
	add $-912, %RSP
	mov -480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c37c5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c37c4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c37c7
uuid_00000000000c37c5:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c37af
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c37b0
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<I64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -776(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c37c1:
#call function non-zero : Arrow<FragmentKV,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c37c2
	jmp uuid_00000000000c37c3
uuid_00000000000c37c2:
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	push %RBP
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq $0
	push %RBP
	mov -1016(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c37ba
	jmp uuid_00000000000c37bc
uuid_00000000000c37ba:
	push %RBP
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	jmp uuid_00000000000c37b7
	jmp uuid_00000000000c37b9
uuid_00000000000c37b7:
	push %RBP
	mov -984(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c37b4
	jmp uuid_00000000000c37b6
uuid_00000000000c37b4:
	push %RBP
	mov -976(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c37b1
	jmp uuid_00000000000c37b3
uuid_00000000000c37b1:
	movb $1, -1024(%rbp)
uuid_00000000000c37b3:
	mov -1088(%RBP),%RSP
	add $-1136, %RSP
uuid_00000000000c37b6:
	mov -1072(%RBP),%RSP
	add $-1136, %RSP
uuid_00000000000c37b9:
	mov -1040(%RBP),%RSP
	add $-1136, %RSP
uuid_00000000000c37bc:
	mov -1032(%RBP),%RSP
	add $-1136, %RSP
	mov -1024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c37be
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c37bd
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c37c0
uuid_00000000000c37be:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0f1e
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c36eb
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<S,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -1136(%rbp), %r15
	movq %r15, -832(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -824(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -816(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -808(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -800(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -792(%rbp)
uuid_00000000000c37c0:
	mov -968(%RBP),%RSP
	add $-1136, %RSP
	add $48, %rsp
	add $48, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c37c1
uuid_00000000000c37c3:
uuid_00000000000c37c7:
	mov -320(%RBP),%RSP
	add $-912, %RSP
	mov %rbp, %rsp
	sub $160, %rsp
	ret
print_CL_ArrowNilFragmentList:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq $0
	push %RBP
	mov -520(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c37ce
	jmp uuid_00000000000c37d0
uuid_00000000000c37ce:
	push %RBP
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	jmp uuid_00000000000c37cb
	jmp uuid_00000000000c37cd
uuid_00000000000c37cb:
	push %RBP
	mov -360(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c37c8
	jmp uuid_00000000000c37ca
uuid_00000000000c37c8:
	movb $1, -528(%rbp)
uuid_00000000000c37ca:
	mov -704(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c37cd:
	mov -544(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c37d0:
	mov -536(%RBP),%RSP
	add $-872, %RSP
	mov -528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c37d5
	push %RBP
	jmp uuid_00000000000c37d2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c37d1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c37d4
uuid_00000000000c37d2:
uuid_00000000000c37d4:
	mov -880(%RBP),%RSP
	add $-880, %RSP
	jmp uuid_00000000000c37d7
uuid_00000000000c37d5:
#call function print : Arrow<FragmentList,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilFragmentList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Fragment,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c37d7:
	mov -352(%RBP),%RSP
	add $-872, %RSP
	mov %rbp, %rsp
	sub $176, %rsp
	ret
print_CL_ArrowNilSourceLocation:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c37e1
	jmp uuid_00000000000c37e3
uuid_00000000000c37e1:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c37de
	jmp uuid_00000000000c37e0
uuid_00000000000c37de:
	push %RBP
	mov -96(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c37db
	jmp uuid_00000000000c37dd
uuid_00000000000c37db:
	push %RBP
	mov -88(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c37d8
	jmp uuid_00000000000c37da
uuid_00000000000c37d8:
	movb $1, -120(%rbp)
uuid_00000000000c37da:
	mov -168(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c37dd:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c37e0:
	mov -136(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c37e3:
	mov -128(%RBP),%RSP
	add $-176, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c37e8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c37e7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c37ea
uuid_00000000000c37e8:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c37e4
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c37e5
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c37e6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c37ea:
	mov -80(%RBP),%RSP
	add $-176, %RSP
	mov %rbp, %rsp
	sub $40, %rsp
	ret
print_CL_ArrowNilType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c381e
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c37ee
	jmp uuid_00000000000c37f0
uuid_00000000000c37ee:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c37eb
	jmp uuid_00000000000c37ed
uuid_00000000000c37eb:
	movb $1, -128(%rbp)
uuid_00000000000c37ed:
	mov -144(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000c37f0:
	mov -136(%RBP),%RSP
	add $-152, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c381b
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c37f7
	jmp uuid_00000000000c37f9
uuid_00000000000c37f7:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c37f4
	jmp uuid_00000000000c37f6
uuid_00000000000c37f4:
	push %RBP
	mov -168(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c37f1
	jmp uuid_00000000000c37f3
uuid_00000000000c37f1:
	movb $1, -192(%rbp)
uuid_00000000000c37f3:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c37f6:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c37f9:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3818
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3800
	jmp uuid_00000000000c3802
uuid_00000000000c3800:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c37fd
	jmp uuid_00000000000c37ff
uuid_00000000000c37fd:
	push %RBP
	mov -280(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c37fa
	jmp uuid_00000000000c37fc
uuid_00000000000c37fa:
	movb $1, -304(%rbp)
uuid_00000000000c37fc:
	mov -352(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c37ff:
	mov -320(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c3802:
	mov -312(%RBP),%RSP
	add $-376, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3815
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c380e
	jmp uuid_00000000000c3810
uuid_00000000000c380e:
	push %RBP
	mov -400(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c380b
	jmp uuid_00000000000c380d
uuid_00000000000c380b:
	push %RBP
	mov -392(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3808
	jmp uuid_00000000000c380a
uuid_00000000000c3808:
	movb $1, -416(%rbp)
uuid_00000000000c380a:
	mov -480(%RBP),%RSP
	add $-488, %RSP
uuid_00000000000c380d:
	mov -432(%RBP),%RSP
	add $-488, %RSP
uuid_00000000000c3810:
	mov -424(%RBP),%RSP
	add $-488, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3812
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3811
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3814
uuid_00000000000c3812:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c10b4
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<List<Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c10b5
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c3814:
	mov -384(%RBP),%RSP
	add $-488, %RSP
	jmp uuid_00000000000c3817
uuid_00000000000c3815:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3805
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3804
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3807
uuid_00000000000c3805:
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3803
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c3807:
	mov -384(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c3817:
	mov -272(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000c381a
uuid_00000000000c3818:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c381a:
	mov -160(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000c381d
uuid_00000000000c381b:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c381d:
	mov -96(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000c3820
uuid_00000000000c381e:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0eb9
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c3820:
	mov -64(%RBP),%RSP
	add $-88, %RSP
	mov %rbp, %rsp
	sub $32, %rsp
	ret
print_CL_ArrowNilListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c383c
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3829
	jmp uuid_00000000000c382b
uuid_00000000000c3829:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3826
	jmp uuid_00000000000c3828
uuid_00000000000c3826:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	jmp uuid_00000000000c3823
	jmp uuid_00000000000c3825
uuid_00000000000c3823:
	movb $1, -192(%rbp)
uuid_00000000000c3825:
	mov -256(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c3828:
	mov -208(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c382b:
	mov -200(%RBP),%RSP
	add $-280, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3839
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3832
	jmp uuid_00000000000c3834
uuid_00000000000c3832:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c382f
	jmp uuid_00000000000c3831
uuid_00000000000c382f:
	push %RBP
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	jmp uuid_00000000000c382c
	jmp uuid_00000000000c382e
uuid_00000000000c382c:
	movb $1, -336(%rbp)
uuid_00000000000c382e:
	mov -400(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c3831:
	mov -352(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c3834:
	mov -344(%RBP),%RSP
	add $-424, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3836
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3835
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3838
uuid_00000000000c3836:
#call function print : Arrow<List<Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1074
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c3838:
	mov -288(%RBP),%RSP
	add $-424, %RSP
	jmp uuid_00000000000c383b
uuid_00000000000c3839:
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c383b:
	mov -144(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c383e
uuid_00000000000c383c:
uuid_00000000000c383e:
	mov -96(%RBP),%RSP
	add $-136, %RSP
	mov %rbp, %rsp
	sub $48, %rsp
	ret
reverse_CL_ArrowFragmentListFragmentList:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000c384c:
#call function non-zero : Arrow<FragmentList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FragmentList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c384d
	jmp uuid_00000000000c384e
uuid_00000000000c384d:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	push %RBP
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq $0
	push %RBP
	mov -688(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3845
	jmp uuid_00000000000c3847
uuid_00000000000c3845:
	push %RBP
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	jmp uuid_00000000000c3842
	jmp uuid_00000000000c3844
uuid_00000000000c3842:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c383f
	jmp uuid_00000000000c3841
uuid_00000000000c383f:
	movb $1, -696(%rbp)
uuid_00000000000c3841:
	mov -872(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c3844:
	mov -712(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c3847:
	mov -704(%RBP),%RSP
	add $-1040, %RSP
	mov -696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3849
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3848
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c384b
uuid_00000000000c3849:
#call function close : Arrow<FragmentList,Array<FragmentList,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentListFragmentList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq $0
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	movq -1040(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -976(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -968(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -960(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -952(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -944(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -936(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -928(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -920(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -912(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -904(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -896(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -888(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -880(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c384b:
	mov -520(%RBP),%RSP
	add $-1040, %RSP
	add $168, %rsp
	add $168, %rsp
	add $8, %rsp
	add $152, %rsp
	add $168, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c384c
uuid_00000000000c384e:
	subq $168, %rsp
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	addq $168, %rsp
	mov %rbp, %rsp
	sub $176, %rsp
	ret
serialize_SB_ast_CL_ArrowNilAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c38cf
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c38cc
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3852
	jmp uuid_00000000000c3854
uuid_00000000000c3852:
	push %RBP
	jmp uuid_00000000000c384f
	jmp uuid_00000000000c3851
uuid_00000000000c384f:
	movb $1, -400(%rbp)
uuid_00000000000c3851:
	mov -416(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c3854:
	mov -408(%RBP),%RSP
	add $-416, %RSP
	mov -400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c38c9
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c385b
	jmp uuid_00000000000c385d
uuid_00000000000c385b:
	push %RBP
	jmp uuid_00000000000c3858
	jmp uuid_00000000000c385a
uuid_00000000000c3858:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3855
	jmp uuid_00000000000c3857
uuid_00000000000c3855:
	movb $1, -504(%rbp)
uuid_00000000000c3857:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c385a:
	mov -520(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c385d:
	mov -512(%RBP),%RSP
	add $-536, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c38c6
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3865
	jmp uuid_00000000000c3867
uuid_00000000000c3865:
	push %RBP
	jmp uuid_00000000000c3862
	jmp uuid_00000000000c3864
uuid_00000000000c3862:
	push %RBP
	mov -552(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c385f
	jmp uuid_00000000000c3861
uuid_00000000000c385f:
	movb $1, -624(%rbp)
uuid_00000000000c3861:
	mov -648(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c3864:
	mov -640(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c3867:
	mov -632(%RBP),%RSP
	add $-656, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c38c3
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -736(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c386c
	jmp uuid_00000000000c386e
uuid_00000000000c386c:
	push %RBP
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	jmp uuid_00000000000c3869
	jmp uuid_00000000000c386b
uuid_00000000000c3869:
	movb $1, -744(%rbp)
uuid_00000000000c386b:
	mov -760(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000c386e:
	mov -752(%RBP),%RSP
	add $-784, %RSP
	mov -744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c38c0
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -864(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3875
	jmp uuid_00000000000c3877
uuid_00000000000c3875:
	push %RBP
	mov -856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3872
	jmp uuid_00000000000c3874
uuid_00000000000c3872:
	push %RBP
	mov -848(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c386f
	jmp uuid_00000000000c3871
uuid_00000000000c386f:
	movb $1, -872(%rbp)
uuid_00000000000c3871:
	mov -968(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c3874:
	mov -888(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c3877:
	mov -880(%RBP),%RSP
	add $-1040, %RSP
	mov -872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c38bd
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1120(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3880
	jmp uuid_00000000000c3882
uuid_00000000000c3880:
	push %RBP
	mov -1112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c387d
	jmp uuid_00000000000c387f
uuid_00000000000c387d:
	push %RBP
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	jmp uuid_00000000000c387a
	jmp uuid_00000000000c387c
uuid_00000000000c387a:
	movb $1, -1128(%rbp)
uuid_00000000000c387c:
	mov -1224(%RBP),%RSP
	add $-1280, %RSP
uuid_00000000000c387f:
	mov -1144(%RBP),%RSP
	add $-1280, %RSP
uuid_00000000000c3882:
	mov -1136(%RBP),%RSP
	add $-1280, %RSP
	mov -1128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c38ba
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1360(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c388a
	jmp uuid_00000000000c388c
uuid_00000000000c388a:
	push %RBP
	mov -1352(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3887
	jmp uuid_00000000000c3889
uuid_00000000000c3887:
	push %RBP
	mov -1344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3884
	jmp uuid_00000000000c3886
uuid_00000000000c3884:
	movb $1, -1368(%rbp)
uuid_00000000000c3886:
	mov -1464(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c3889:
	mov -1384(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c388c:
	mov -1376(%RBP),%RSP
	add $-1536, %RSP
	mov -1368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c38b7
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1616(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3897
	jmp uuid_00000000000c3899
uuid_00000000000c3897:
	push %RBP
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	jmp uuid_00000000000c3894
	jmp uuid_00000000000c3896
uuid_00000000000c3894:
	push %RBP
	mov -1584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3891
	jmp uuid_00000000000c3893
uuid_00000000000c3891:
	push %RBP
	mov -1576(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c388e
	jmp uuid_00000000000c3890
uuid_00000000000c388e:
	movb $1, -1624(%rbp)
uuid_00000000000c3890:
	mov -1752(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000c3893:
	mov -1672(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000c3896:
	mov -1640(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000c3899:
	mov -1632(%RBP),%RSP
	add $-1824, %RSP
	mov -1624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c38b4
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1904(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c38a1
	jmp uuid_00000000000c38a3
uuid_00000000000c38a1:
	push %RBP
	mov -1896(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c389e
	jmp uuid_00000000000c38a0
uuid_00000000000c389e:
	push %RBP
	mov -1888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2080(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c389b
	jmp uuid_00000000000c389d
uuid_00000000000c389b:
	movb $1, -1912(%rbp)
uuid_00000000000c389d:
	mov -2008(%RBP),%RSP
	add $-2080, %RSP
uuid_00000000000c38a0:
	mov -1928(%RBP),%RSP
	add $-2080, %RSP
uuid_00000000000c38a3:
	mov -1920(%RBP),%RSP
	add $-2080, %RSP
	mov -1912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c38b1
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -2160(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c38aa
	jmp uuid_00000000000c38ac
uuid_00000000000c38aa:
	push %RBP
	mov -2152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c38a7
	jmp uuid_00000000000c38a9
uuid_00000000000c38a7:
	push %RBP
	mov -2144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c38a4
	jmp uuid_00000000000c38a6
uuid_00000000000c38a4:
	movb $1, -2168(%rbp)
uuid_00000000000c38a6:
	mov -2264(%RBP),%RSP
	add $-2336, %RSP
uuid_00000000000c38a9:
	mov -2184(%RBP),%RSP
	add $-2336, %RSP
uuid_00000000000c38ac:
	mov -2176(%RBP),%RSP
	add $-2336, %RSP
	mov -2168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c38ae
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c38ad
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c38b0
uuid_00000000000c38ae:
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
	pushq -2336(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c38b0:
	mov -2088(%RBP),%RSP
	add $-2336, %RSP
	jmp uuid_00000000000c38b3
uuid_00000000000c38b1:
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c38b3:
	mov -1832(%RBP),%RSP
	add $-2080, %RSP
	jmp uuid_00000000000c38b6
uuid_00000000000c38b4:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c389a
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d2e
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3879
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c38b6:
	mov -1544(%RBP),%RSP
	add $-1824, %RSP
	jmp uuid_00000000000c38b9
uuid_00000000000c38b7:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c388d
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d2e
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3879
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c38b9:
	mov -1288(%RBP),%RSP
	add $-1536, %RSP
	jmp uuid_00000000000c38bc
uuid_00000000000c38ba:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3883
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Token,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d2e
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3879
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c38bc:
	mov -1048(%RBP),%RSP
	add $-1280, %RSP
	jmp uuid_00000000000c38bf
uuid_00000000000c38bd:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3878
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d2e
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3879
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c38bf:
	mov -792(%RBP),%RSP
	add $-1040, %RSP
	jmp uuid_00000000000c38c2
uuid_00000000000c38c0:
#call function serialize-ast : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c38c2:
	mov -664(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000c38c5
uuid_00000000000c38c3:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3868
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d2f
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c38c5:
	mov -544(%RBP),%RSP
	add $-656, %RSP
	jmp uuid_00000000000c38c8
uuid_00000000000c38c6:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c385e
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d2f
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c38c8:
	mov -424(%RBP),%RSP
	add $-536, %RSP
	jmp uuid_00000000000c38cb
uuid_00000000000c38c9:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c199b
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c38cb:
	mov -320(%RBP),%RSP
	add $-416, %RSP
	jmp uuid_00000000000c38ce
uuid_00000000000c38cc:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1139
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c38ce:
	mov -240(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000c38d1
uuid_00000000000c38cf:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d1d
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c38d1:
	mov -160(%RBP),%RSP
	add $-232, %RSP
	mov %rbp, %rsp
	sub $80, %rsp
	ret
serialize_SB_ast_CL_ArrowNilListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c38ed
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c38da
	jmp uuid_00000000000c38dc
uuid_00000000000c38da:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c38d7
	jmp uuid_00000000000c38d9
uuid_00000000000c38d7:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	jmp uuid_00000000000c38d4
	jmp uuid_00000000000c38d6
uuid_00000000000c38d4:
	movb $1, -192(%rbp)
uuid_00000000000c38d6:
	mov -256(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c38d9:
	mov -208(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c38dc:
	mov -200(%RBP),%RSP
	add $-280, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c38ea
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c38e3
	jmp uuid_00000000000c38e5
uuid_00000000000c38e3:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c38e0
	jmp uuid_00000000000c38e2
uuid_00000000000c38e0:
	push %RBP
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	jmp uuid_00000000000c38dd
	jmp uuid_00000000000c38df
uuid_00000000000c38dd:
	movb $1, -336(%rbp)
uuid_00000000000c38df:
	mov -400(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c38e2:
	mov -352(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c38e5:
	mov -344(%RBP),%RSP
	add $-424, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c38e7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c38e6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c38e9
uuid_00000000000c38e7:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c388d
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<List<Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d2e
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3879
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c38e9:
	mov -288(%RBP),%RSP
	add $-424, %RSP
	jmp uuid_00000000000c38ec
uuid_00000000000c38ea:
#call function serialize-ast : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c38ec:
	mov -144(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c38ef
uuid_00000000000c38ed:
uuid_00000000000c38ef:
	mov -96(%RBP),%RSP
	add $-136, %RSP
	mov %rbp, %rsp
	sub $48, %rsp
	ret
serialize_SB_ast_CL_ArrowNilType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3921
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c38f4
	jmp uuid_00000000000c38f6
uuid_00000000000c38f4:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c38f1
	jmp uuid_00000000000c38f3
uuid_00000000000c38f1:
	movb $1, -128(%rbp)
uuid_00000000000c38f3:
	mov -144(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000c38f6:
	mov -136(%RBP),%RSP
	add $-152, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c391e
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c38fd
	jmp uuid_00000000000c38ff
uuid_00000000000c38fd:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c38fa
	jmp uuid_00000000000c38fc
uuid_00000000000c38fa:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c38f7
	jmp uuid_00000000000c38f9
uuid_00000000000c38f7:
	movb $1, -192(%rbp)
uuid_00000000000c38f9:
	mov -240(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c38fc:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c38ff:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c391b
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3907
	jmp uuid_00000000000c3909
uuid_00000000000c3907:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -360(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3904
	jmp uuid_00000000000c3906
uuid_00000000000c3904:
	push %RBP
	mov -280(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3901
	jmp uuid_00000000000c3903
uuid_00000000000c3901:
	movb $1, -304(%rbp)
uuid_00000000000c3903:
	mov -368(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c3906:
	mov -320(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c3909:
	mov -312(%RBP),%RSP
	add $-376, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3918
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3910
	jmp uuid_00000000000c3912
uuid_00000000000c3910:
	push %RBP
	mov -400(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c390d
	jmp uuid_00000000000c390f
uuid_00000000000c390d:
	push %RBP
	mov -392(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c390a
	jmp uuid_00000000000c390c
uuid_00000000000c390a:
	movb $1, -416(%rbp)
uuid_00000000000c390c:
	mov -480(%RBP),%RSP
	add $-488, %RSP
uuid_00000000000c390f:
	mov -432(%RBP),%RSP
	add $-488, %RSP
uuid_00000000000c3912:
	mov -424(%RBP),%RSP
	add $-488, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3915
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3914
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3917
uuid_00000000000c3915:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c388d
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3868
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3913
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<List<Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3879
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c3917:
	mov -384(%RBP),%RSP
	add $-488, %RSP
	jmp uuid_00000000000c391a
uuid_00000000000c3918:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3868
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -376(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d2f
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c391a:
	mov -272(%RBP),%RSP
	add $-376, %RSP
	jmp uuid_00000000000c391d
uuid_00000000000c391b:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c388d
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3900
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c388d
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d2e
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3879
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3879
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c391d:
	mov -160(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000c3920
uuid_00000000000c391e:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c385e
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d2f
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c3920:
	mov -96(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000c3923
uuid_00000000000c3921:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c38f0
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c3923:
	mov -64(%RBP),%RSP
	add $-88, %RSP
	mov %rbp, %rsp
	sub $32, %rsp
	ret
slot_CL_ArrowTypeConsStringType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c392a
	jmp uuid_00000000000c392c
uuid_00000000000c392a:
	push %RBP
	jmp uuid_00000000000c3927
	jmp uuid_00000000000c3929
uuid_00000000000c3927:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3924
	jmp uuid_00000000000c3926
uuid_00000000000c3924:
	movb $1, -128(%rbp)
uuid_00000000000c3926:
	mov -152(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000c3929:
	mov -144(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000c392c:
	mov -136(%RBP),%RSP
	add $-160, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3943
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3936
	jmp uuid_00000000000c3938
uuid_00000000000c3936:
	push %RBP
	mov -184(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3933
	jmp uuid_00000000000c3935
uuid_00000000000c3933:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3930
	jmp uuid_00000000000c3932
uuid_00000000000c3930:
	movb $1, -200(%rbp)
uuid_00000000000c3932:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c3935:
	mov -216(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c3938:
	mov -208(%RBP),%RSP
	add $-272, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3940
	push %RBP
	jmp uuid_00000000000c393d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c393c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c393f
uuid_00000000000c393d:
uuid_00000000000c393f:
	mov -280(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c3942
uuid_00000000000c3940:
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3939
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	movq -328(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -320(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -312(%rbp), %r15
	movq %r15, -48(%rbp)
	jmp uuid_00000000000c393b
uuid_00000000000c3939:
	movq -296(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -288(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -48(%rbp)
uuid_00000000000c393b:
	mov -304(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000c3942:
	mov -168(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000c3945
uuid_00000000000c3943:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c392d
	jmp uuid_00000000000c392f
uuid_00000000000c392d:
	movq -24(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -48(%rbp)
uuid_00000000000c392f:
	mov -168(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c3945:
	mov -96(%RBP),%RSP
	add $-168, %RSP
	subq $24, %rsp
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $40, %rsp
	ret
slot_CL_ArrowTypeConsStringConsStringType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -128(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c394c
	jmp uuid_00000000000c394e
uuid_00000000000c394c:
	push %RBP
	mov -120(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3949
	jmp uuid_00000000000c394b
uuid_00000000000c3949:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3946
	jmp uuid_00000000000c3948
uuid_00000000000c3946:
	movb $1, -136(%rbp)
uuid_00000000000c3948:
	mov -200(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000c394b:
	mov -152(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000c394e:
	mov -144(%RBP),%RSP
	add $-208, %RSP
	mov -136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3978
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c396b
	jmp uuid_00000000000c396d
uuid_00000000000c396b:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3968
	jmp uuid_00000000000c396a
uuid_00000000000c3968:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3965
	jmp uuid_00000000000c3967
uuid_00000000000c3965:
	movb $1, -248(%rbp)
uuid_00000000000c3967:
	mov -296(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c396a:
	mov -264(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c396d:
	mov -256(%RBP),%RSP
	add $-320, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3975
	push %RBP
	jmp uuid_00000000000c3972
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3971
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3974
uuid_00000000000c3972:
uuid_00000000000c3974:
	mov -328(%RBP),%RSP
	add $-328, %RSP
	jmp uuid_00000000000c3977
uuid_00000000000c3975:
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c396e
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	movq -376(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -56(%rbp)
	jmp uuid_00000000000c3970
uuid_00000000000c396e:
	movq -344(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -56(%rbp)
uuid_00000000000c3970:
	mov -352(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c3977:
	mov -216(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000c397a
uuid_00000000000c3978:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3962
	jmp uuid_00000000000c3964
uuid_00000000000c3962:
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3955
	jmp uuid_00000000000c3957
uuid_00000000000c3955:
	push %RBP
	jmp uuid_00000000000c3952
	jmp uuid_00000000000c3954
uuid_00000000000c3952:
	push %RBP
	mov -288(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c394f
	jmp uuid_00000000000c3951
uuid_00000000000c394f:
	movb $1, -312(%rbp)
uuid_00000000000c3951:
	mov -336(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000c3954:
	mov -328(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000c3957:
	mov -320(%RBP),%RSP
	add $-344, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c395f
	push %RBP
	jmp uuid_00000000000c395c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c395b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c395e
uuid_00000000000c395c:
uuid_00000000000c395e:
	mov -352(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000c3961
uuid_00000000000c395f:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -344(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3958
	jmp uuid_00000000000c395a
uuid_00000000000c3958:
	movq -24(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -56(%rbp)
uuid_00000000000c395a:
	mov -352(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c3961:
	mov -264(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c3964:
	mov -216(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c397a:
	mov -104(%RBP),%RSP
	add $-352, %RSP
	subq $24, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
uuid_CL_ArrowStringNil:
	mov $uuid_SB_counter_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, %r15
	movq $uuid_SB_counter_CL_U64, %r14
	movq %r15, 0(%r14)
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c397b
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-hex : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $uuid_SB_counter_CL_U64, %r15
	pushq 0(%r15)
	mov %RBX, %RBP
	call to_SB_hex_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
iuid_CL_ArrowU64Nil:
	mov $uuid_SB_counter_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, %r15
	movq $uuid_SB_counter_CL_U64, %r14
	movq %r15, 0(%r14)
	mov $uuid_SB_counter_CL_U64, %r15
	pushq 0(%r15)
	mov -16(%rbp), %RAX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
var_SB_name_SB_if_SB_var_CL_ArrowStringAST:
	pushq $uuid_00000000000c0dfc
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3982
	jmp uuid_00000000000c3984
uuid_00000000000c3982:
	push %RBP
	jmp uuid_00000000000c397f
	jmp uuid_00000000000c3981
uuid_00000000000c397f:
	push %RBP
	mov -176(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c397c
	jmp uuid_00000000000c397e
uuid_00000000000c397c:
	movb $1, -248(%rbp)
uuid_00000000000c397e:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c3981:
	mov -264(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c3984:
	mov -256(%RBP),%RSP
	add $-280, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3995
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -360(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c398b
	jmp uuid_00000000000c398d
uuid_00000000000c398b:
	push %RBP
	jmp uuid_00000000000c3988
	jmp uuid_00000000000c398a
uuid_00000000000c3988:
	push %RBP
	mov -296(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3985
	jmp uuid_00000000000c3987
uuid_00000000000c3985:
	movb $1, -368(%rbp)
uuid_00000000000c3987:
	mov -392(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000c398a:
	mov -384(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000c398d:
	mov -376(%RBP),%RSP
	add $-400, %RSP
	mov -368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3992
	push %RBP
	jmp uuid_00000000000c398f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c398e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3991
uuid_00000000000c398f:
uuid_00000000000c3991:
	mov -408(%RBP),%RSP
	add $-408, %RSP
	jmp uuid_00000000000c3994
uuid_00000000000c3992:
	movq -400(%rbp), %r15
	movq %r15, -88(%rbp)
	mov -400(%rbp), %r15
	mov %r15, -88(%rbp)
uuid_00000000000c3994:
	mov -288(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000c3997
uuid_00000000000c3995:
	movq -280(%rbp), %r15
	movq %r15, -88(%rbp)
	mov -280(%rbp), %r15
	mov %r15, -88(%rbp)
uuid_00000000000c3997:
	mov -168(%RBP),%RSP
	add $-280, %RSP
	mov -88(%rbp), %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
parse_SB_expect_CL_ArrowNilConsListTokenString:
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<List<Token>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
parse_SB_lambda_CL_ArrowParsePartialListToken:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c39c3
	jmp uuid_00000000000c39c5
uuid_00000000000c39c3:
	push %RBP
	mov -248(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c39ae
	jmp uuid_00000000000c39b0
uuid_00000000000c39ae:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c39ab
	jmp uuid_00000000000c39ad
uuid_00000000000c39ab:
	push %RBP
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq $0
	push %RBP
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c39a5
	jmp uuid_00000000000c39a7
uuid_00000000000c39a5:
	push %RBP
	jmp uuid_00000000000c39a2
	jmp uuid_00000000000c39a4
uuid_00000000000c39a2:
	push %RBP
	jmp uuid_00000000000c399f
	jmp uuid_00000000000c39a1
uuid_00000000000c399f:
	push %RBP
	mov -464(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c399c
	jmp uuid_00000000000c399e
uuid_00000000000c399c:
	movb $1, -520(%rbp)
uuid_00000000000c399e:
	mov -552(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c39a1:
	mov -544(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c39a4:
	mov -536(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c39a7:
	mov -528(%RBP),%RSP
	add $-560, %RSP
	mov -520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c39a8
	jmp uuid_00000000000c39aa
uuid_00000000000c39a8:
	movb $1, -360(%rbp)
uuid_00000000000c39aa:
	mov -456(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c39ad:
	mov -376(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c39b0:
	mov -368(%RBP),%RSP
	add $-560, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c39c0
	jmp uuid_00000000000c39c2
uuid_00000000000c39c0:
	push %RBP
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq -240(%RBP)
	pushq $0
	push %RBP
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c39ba
	jmp uuid_00000000000c39bc
uuid_00000000000c39ba:
	push %RBP
	jmp uuid_00000000000c39b7
	jmp uuid_00000000000c39b9
uuid_00000000000c39b7:
	push %RBP
	jmp uuid_00000000000c39b4
	jmp uuid_00000000000c39b6
uuid_00000000000c39b4:
	push %RBP
	mov -576(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c39b1
	jmp uuid_00000000000c39b3
uuid_00000000000c39b1:
	movb $1, -632(%rbp)
uuid_00000000000c39b3:
	mov -664(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c39b6:
	mov -656(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c39b9:
	mov -648(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c39bc:
	mov -640(%RBP),%RSP
	add $-672, %RSP
	mov -632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c39bd
	jmp uuid_00000000000c39bf
uuid_00000000000c39bd:
	movb $1, -264(%rbp)
uuid_00000000000c39bf:
	mov -568(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c39c2:
	mov -280(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c39c5:
	mov -272(%RBP),%RSP
	add $-672, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c39ca
	push %RBP
	jmp uuid_00000000000c39c7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c39c6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c39c9
uuid_00000000000c39c7:
uuid_00000000000c39c9:
	mov -680(%RBP),%RSP
	add $-680, %RSP
	jmp uuid_00000000000c39cc
uuid_00000000000c39ca:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -560(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -448(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -408(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -400(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -392(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c39cc:
	mov -184(%RBP),%RSP
	add $-672, %RSP
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
#call function parse-one-expression : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call parse_SB_one_SB_expression_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq $0
	push %RBP
	mov -1128(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c39de
	jmp uuid_00000000000c39e0
uuid_00000000000c39de:
	push %RBP
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	jmp uuid_00000000000c39db
	jmp uuid_00000000000c39dd
uuid_00000000000c39db:
	push %RBP
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq $0
	push %RBP
	mov -1304(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c39d5
	jmp uuid_00000000000c39d7
uuid_00000000000c39d5:
	push %RBP
	jmp uuid_00000000000c39d2
	jmp uuid_00000000000c39d4
uuid_00000000000c39d2:
	push %RBP
	mov -1240(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1344(%rbp)
	pushq $uuid_00000000000c0fa9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c39cf
	jmp uuid_00000000000c39d1
uuid_00000000000c39cf:
	movb $1, -1312(%rbp)
uuid_00000000000c39d1:
	mov -1336(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c39d4:
	mov -1328(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c39d7:
	mov -1320(%RBP),%RSP
	add $-1344, %RSP
	mov -1312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c39d8
	jmp uuid_00000000000c39da
uuid_00000000000c39d8:
	movb $1, -1136(%rbp)
uuid_00000000000c39da:
	mov -1232(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c39dd:
	mov -1152(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c39e0:
	mov -1144(%RBP),%RSP
	add $-1344, %RSP
	mov -1136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c39fb
	push %RBP
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq $0
	push %RBP
	mov -1504(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c39f4
	jmp uuid_00000000000c39f6
uuid_00000000000c39f4:
	push %RBP
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	jmp uuid_00000000000c39f1
	jmp uuid_00000000000c39f3
uuid_00000000000c39f1:
	push %RBP
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	jmp uuid_00000000000c39ee
	jmp uuid_00000000000c39f0
uuid_00000000000c39ee:
	movb $1, -1512(%rbp)
uuid_00000000000c39f0:
	mov -1608(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000c39f3:
	mov -1528(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000c39f6:
	mov -1520(%RBP),%RSP
	add $-1680, %RSP
	mov -1512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c39f8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c39f7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c39fa
uuid_00000000000c39f8:
	movq -1680(%rbp), %r15
	movq %r15, -744(%rbp)
	movq -1672(%rbp), %r15
	movq %r15, -736(%rbp)
	movq -1664(%rbp), %r15
	movq %r15, -728(%rbp)
	movq -1656(%rbp), %r15
	movq %r15, -720(%rbp)
	movq -1648(%rbp), %r15
	movq %r15, -712(%rbp)
	movq -1640(%rbp), %r15
	movq %r15, -704(%rbp)
	movq -1632(%rbp), %r15
	movq %r15, -696(%rbp)
	movq -1624(%rbp), %r15
	movq %r15, -688(%rbp)
	movq -1616(%rbp), %r15
	movq %r15, -680(%rbp)
	movq -1600(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1592(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1584(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1576(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1568(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1560(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1552(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1544(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1536(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c39fa:
	mov -1352(%RBP),%RSP
	add $-1680, %RSP
	jmp uuid_00000000000c39fd
uuid_00000000000c39fb:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq $0
	push %RBP
	mov -1656(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c39e7
	jmp uuid_00000000000c39e9
uuid_00000000000c39e7:
	push %RBP
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	jmp uuid_00000000000c39e4
	jmp uuid_00000000000c39e6
uuid_00000000000c39e4:
	push %RBP
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	jmp uuid_00000000000c39e1
	jmp uuid_00000000000c39e3
uuid_00000000000c39e1:
	movb $1, -1664(%rbp)
uuid_00000000000c39e3:
	mov -1760(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000c39e6:
	mov -1680(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000c39e9:
	mov -1672(%RBP),%RSP
	add $-1832, %RSP
	mov -1664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c39eb
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c39ea
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c39ed
uuid_00000000000c39eb:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST+CaseNumber<9>,Array<AST+CaseNumber<9>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $9
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTCaseNumber9ASTCaseNumber9
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $5
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	movq -1752(%rbp), %r15
	movq %r15, -816(%rbp)
	movq -1744(%rbp), %r15
	movq %r15, -808(%rbp)
	movq -1736(%rbp), %r15
	movq %r15, -800(%rbp)
	movq -1728(%rbp), %r15
	movq %r15, -792(%rbp)
	movq -1720(%rbp), %r15
	movq %r15, -784(%rbp)
	movq -1712(%rbp), %r15
	movq %r15, -776(%rbp)
	movq -1704(%rbp), %r15
	movq %r15, -768(%rbp)
	movq -1696(%rbp), %r15
	movq %r15, -760(%rbp)
	movq -1688(%rbp), %r15
	movq %r15, -752(%rbp)
uuid_00000000000c39ed:
	mov -1504(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000c39fd:
	mov -976(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000c3a3a:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3a3b
	jmp uuid_00000000000c3a3c
uuid_00000000000c3a3b:
#call function parse-one-expression : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call parse_SB_one_SB_expression_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq $0
	push %RBP
	mov -2144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3a0d
	jmp uuid_00000000000c3a0f
uuid_00000000000c3a0d:
	push %RBP
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	jmp uuid_00000000000c3a0a
	jmp uuid_00000000000c3a0c
uuid_00000000000c3a0a:
	push %RBP
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	pushq -2032(%RBP)
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq $0
	push %RBP
	mov -2320(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3a04
	jmp uuid_00000000000c3a06
uuid_00000000000c3a04:
	push %RBP
	jmp uuid_00000000000c3a01
	jmp uuid_00000000000c3a03
uuid_00000000000c3a01:
	push %RBP
	mov -2256(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2360(%rbp)
	pushq $uuid_00000000000c0fa9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c39fe
	jmp uuid_00000000000c3a00
uuid_00000000000c39fe:
	movb $1, -2328(%rbp)
uuid_00000000000c3a00:
	mov -2352(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000c3a03:
	mov -2344(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000c3a06:
	mov -2336(%RBP),%RSP
	add $-2360, %RSP
	mov -2328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3a07
	jmp uuid_00000000000c3a09
uuid_00000000000c3a07:
	movb $1, -2152(%rbp)
uuid_00000000000c3a09:
	mov -2248(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000c3a0c:
	mov -2168(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000c3a0f:
	mov -2160(%RBP),%RSP
	add $-2360, %RSP
	mov -2152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3a37
	push %RBP
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq $0
	push %RBP
	mov -2520(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3a23
	jmp uuid_00000000000c3a25
uuid_00000000000c3a23:
	push %RBP
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	mov -2616(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3a20
	jmp uuid_00000000000c3a22
uuid_00000000000c3a20:
	push %RBP
	pushq -2376(%RBP)
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	jmp uuid_00000000000c3a1d
	jmp uuid_00000000000c3a1f
uuid_00000000000c3a1d:
	movb $1, -2528(%rbp)
uuid_00000000000c3a1f:
	mov -2624(%RBP),%RSP
	add $-2696, %RSP
uuid_00000000000c3a22:
	mov -2544(%RBP),%RSP
	add $-2696, %RSP
uuid_00000000000c3a25:
	mov -2536(%RBP),%RSP
	add $-2696, %RSP
	mov -2528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3a34
	push %RBP
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq $0
	push %RBP
	mov -2856(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3a2d
	jmp uuid_00000000000c3a2f
uuid_00000000000c3a2d:
	push %RBP
	pushq -2784(%RBP)
	pushq -2792(%RBP)
	pushq -2800(%RBP)
	pushq -2808(%RBP)
	pushq -2816(%RBP)
	pushq -2824(%RBP)
	pushq -2832(%RBP)
	pushq -2840(%RBP)
	pushq -2848(%RBP)
	jmp uuid_00000000000c3a2a
	jmp uuid_00000000000c3a2c
uuid_00000000000c3a2a:
	push %RBP
	pushq -2712(%RBP)
	pushq -2720(%RBP)
	pushq -2728(%RBP)
	pushq -2736(%RBP)
	pushq -2744(%RBP)
	pushq -2752(%RBP)
	pushq -2760(%RBP)
	pushq -2768(%RBP)
	pushq -2776(%RBP)
	jmp uuid_00000000000c3a27
	jmp uuid_00000000000c3a29
uuid_00000000000c3a27:
	movb $1, -2864(%rbp)
uuid_00000000000c3a29:
	mov -2960(%RBP),%RSP
	add $-3032, %RSP
uuid_00000000000c3a2c:
	mov -2880(%RBP),%RSP
	add $-3032, %RSP
uuid_00000000000c3a2f:
	mov -2872(%RBP),%RSP
	add $-3032, %RSP
	mov -2864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3a31
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3a30
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3a33
uuid_00000000000c3a31:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2968(%rbp)
	pushq -2976(%rbp)
	pushq -2984(%rbp)
	pushq -2992(%rbp)
	pushq -3000(%rbp)
	pushq -3008(%rbp)
	pushq -3016(%rbp)
	pushq -3024(%rbp)
	pushq -3032(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	movq -2952(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2944(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -2936(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -2928(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -2920(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -2912(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -2904(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -2896(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -2888(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c3a33:
	mov -2704(%RBP),%RSP
	add $-3032, %RSP
	jmp uuid_00000000000c3a36
uuid_00000000000c3a34:
#call function parse-expect : Arrow<Cons<String,List<Token>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3a26
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call parse_SB_expect_CL_ArrowNilConsListTokenString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c3a36:
	mov -2368(%RBP),%RSP
	add $-2696, %RSP
	jmp uuid_00000000000c3a39
uuid_00000000000c3a37:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	pushq -2408(%rbp)
	pushq -2416(%rbp)
	pushq -2424(%rbp)
	pushq -2432(%rbp)
	pushq -2440(%rbp)
	pushq -2448(%rbp)
	pushq -2456(%rbp)
	pushq -2464(%rbp)
	pushq -2472(%rbp)
	pushq -2480(%rbp)
	pushq -2488(%rbp)
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	pushq -2512(%rbp)
	pushq $0
	push %RBP
	mov -2672(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3a16
	jmp uuid_00000000000c3a18
uuid_00000000000c3a16:
	push %RBP
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	pushq -2624(%RBP)
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	pushq -2656(%RBP)
	pushq -2664(%RBP)
	jmp uuid_00000000000c3a13
	jmp uuid_00000000000c3a15
uuid_00000000000c3a13:
	push %RBP
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq -2560(%RBP)
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq -2592(%RBP)
	jmp uuid_00000000000c3a10
	jmp uuid_00000000000c3a12
uuid_00000000000c3a10:
	movb $1, -2680(%rbp)
uuid_00000000000c3a12:
	mov -2776(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000c3a15:
	mov -2696(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000c3a18:
	mov -2688(%RBP),%RSP
	add $-2848, %RSP
	mov -2680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3a1a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3a19
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3a1c
uuid_00000000000c3a1a:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2784(%rbp)
	pushq -2792(%rbp)
	pushq -2800(%rbp)
	pushq -2808(%rbp)
	pushq -2816(%rbp)
	pushq -2824(%rbp)
	pushq -2832(%rbp)
	pushq -2840(%rbp)
	pushq -2848(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $5
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	movq -2768(%rbp), %r15
	movq %r15, -816(%rbp)
	movq -2760(%rbp), %r15
	movq %r15, -808(%rbp)
	movq -2752(%rbp), %r15
	movq %r15, -800(%rbp)
	movq -2744(%rbp), %r15
	movq %r15, -792(%rbp)
	movq -2736(%rbp), %r15
	movq %r15, -784(%rbp)
	movq -2728(%rbp), %r15
	movq %r15, -776(%rbp)
	movq -2720(%rbp), %r15
	movq %r15, -768(%rbp)
	movq -2712(%rbp), %r15
	movq %r15, -760(%rbp)
	movq -2704(%rbp), %r15
	movq %r15, -752(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c3a1c:
	mov -2520(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000c3a39:
	mov -1992(%RBP),%RSP
	add $-2848, %RSP
	add $152, %rsp
	add $152, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $152, %rsp
	add $152, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c3a3a
uuid_00000000000c3a3c:
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq $0
	subq $152, %rsp
	pushq -1984(%rbp)
	pushq -1976(%rbp)
	pushq -1968(%rbp)
	pushq -1960(%rbp)
	pushq -1952(%rbp)
	pushq -1944(%rbp)
	pushq -1936(%rbp)
	pushq -1928(%rbp)
	pushq -1920(%rbp)
	pushq -1912(%rbp)
	pushq -1904(%rbp)
	pushq -1896(%rbp)
	pushq -1888(%rbp)
	pushq -1880(%rbp)
	pushq -1872(%rbp)
	pushq -1864(%rbp)
	pushq -1856(%rbp)
	pushq -1848(%rbp)
	pushq -1840(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000c3a88:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3a89
	jmp uuid_00000000000c3a8a
uuid_00000000000c3a89:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3a53
	jmp uuid_00000000000c3a55
uuid_00000000000c3a53:
	push %RBP
	mov -368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3a50
	jmp uuid_00000000000c3a52
uuid_00000000000c3a50:
	push %RBP
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3a4a
	jmp uuid_00000000000c3a4c
uuid_00000000000c3a4a:
	push %RBP
	jmp uuid_00000000000c3a47
	jmp uuid_00000000000c3a49
uuid_00000000000c3a47:
	push %RBP
	jmp uuid_00000000000c3a44
	jmp uuid_00000000000c3a46
uuid_00000000000c3a44:
	push %RBP
	mov -488(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -584(%rbp)
	pushq $uuid_00000000000c0f18
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3a41
	jmp uuid_00000000000c3a43
uuid_00000000000c3a41:
	movb $1, -544(%rbp)
uuid_00000000000c3a43:
	mov -576(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c3a46:
	mov -568(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c3a49:
	mov -560(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c3a4c:
	mov -552(%RBP),%RSP
	add $-584, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3a4d
	jmp uuid_00000000000c3a4f
uuid_00000000000c3a4d:
	movb $1, -384(%rbp)
uuid_00000000000c3a4f:
	mov -480(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c3a52:
	mov -400(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c3a55:
	mov -392(%RBP),%RSP
	add $-584, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3a85
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3a68
	jmp uuid_00000000000c3a6a
uuid_00000000000c3a68:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3a65
	jmp uuid_00000000000c3a67
uuid_00000000000c3a65:
	push %RBP
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq $0
	push %RBP
	mov -824(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3a5f
	jmp uuid_00000000000c3a61
uuid_00000000000c3a5f:
	push %RBP
	jmp uuid_00000000000c3a5c
	jmp uuid_00000000000c3a5e
uuid_00000000000c3a5c:
	push %RBP
	jmp uuid_00000000000c3a59
	jmp uuid_00000000000c3a5b
uuid_00000000000c3a59:
	push %RBP
	mov -776(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -872(%rbp)
	pushq $uuid_00000000000c0d2f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3a56
	jmp uuid_00000000000c3a58
uuid_00000000000c3a56:
	movb $1, -832(%rbp)
uuid_00000000000c3a58:
	mov -864(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c3a5b:
	mov -856(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c3a5e:
	mov -848(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c3a61:
	mov -840(%RBP),%RSP
	add $-872, %RSP
	mov -832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3a62
	jmp uuid_00000000000c3a64
uuid_00000000000c3a62:
	movb $1, -672(%rbp)
uuid_00000000000c3a64:
	mov -768(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c3a67:
	mov -688(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c3a6a:
	mov -680(%RBP),%RSP
	add $-872, %RSP
	mov -672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3a82
	push %RBP
	jmp uuid_00000000000c3a7f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3a7e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3a81
uuid_00000000000c3a7f:
#call function parse-one-expression : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call parse_SB_one_SB_expression_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq $0
	push %RBP
	mov -1192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3a74
	jmp uuid_00000000000c3a76
uuid_00000000000c3a74:
	push %RBP
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	pushq -1152(%RBP)
	pushq -1160(%RBP)
	pushq -1168(%RBP)
	pushq -1176(%RBP)
	pushq -1184(%RBP)
	jmp uuid_00000000000c3a71
	jmp uuid_00000000000c3a73
uuid_00000000000c3a71:
	push %RBP
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	jmp uuid_00000000000c3a6e
	jmp uuid_00000000000c3a70
uuid_00000000000c3a6e:
	movb $1, -1200(%rbp)
uuid_00000000000c3a70:
	mov -1296(%RBP),%RSP
	add $-1368, %RSP
uuid_00000000000c3a73:
	mov -1216(%RBP),%RSP
	add $-1368, %RSP
uuid_00000000000c3a76:
	mov -1208(%RBP),%RSP
	add $-1368, %RSP
	mov -1200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3a7b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3a7a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3a7d
uuid_00000000000c3a7b:
	push %RBP
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3a77
	movq -1368(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1360(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1352(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1344(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1336(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1328(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1320(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1312(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1304(%rbp), %r15
	movq %r15, -88(%rbp)
	jmp uuid_00000000000c3a79
uuid_00000000000c3a77:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c3a79:
	mov -1376(%RBP),%RSP
	add $-1376, %RSP
	movq -1288(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c3a7d:
	mov -1040(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000c3a81:
	mov -880(%RBP),%RSP
	add $-1376, %RSP
	jmp uuid_00000000000c3a84
uuid_00000000000c3a82:
	push %RBP
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3a6b
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $9
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	jmp uuid_00000000000c3a6d
uuid_00000000000c3a6b:
uuid_00000000000c3a6d:
	mov -880(%RBP),%RSP
	add $-880, %RSP
	movq -760(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -696(%rbp), %r15
	movq %r15, -160(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c3a84:
	mov -592(%RBP),%RSP
	add $-880, %RSP
	jmp uuid_00000000000c3a87
uuid_00000000000c3a85:
	movq -72(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -64(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -56(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -48(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -40(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -32(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -24(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -160(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c3a87:
	mov -304(%RBP),%RSP
	add $-584, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c3a88
uuid_00000000000c3a8a:
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	subq $152, %rsp
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
parse_SB_one_SB_expression_CL_ArrowParsePartialListToken:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3b23
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3aa1
	jmp uuid_00000000000c3aa3
uuid_00000000000c3aa1:
	push %RBP
	mov -448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3a9e
	jmp uuid_00000000000c3aa0
uuid_00000000000c3a9e:
	push %RBP
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3a98
	jmp uuid_00000000000c3a9a
uuid_00000000000c3a98:
	push %RBP
	jmp uuid_00000000000c3a95
	jmp uuid_00000000000c3a97
uuid_00000000000c3a95:
	push %RBP
	jmp uuid_00000000000c3a92
	jmp uuid_00000000000c3a94
uuid_00000000000c3a92:
	push %RBP
	mov -568(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -664(%rbp)
	pushq $uuid_00000000000c0f1b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3a8f
	jmp uuid_00000000000c3a91
uuid_00000000000c3a8f:
	movb $1, -624(%rbp)
uuid_00000000000c3a91:
	mov -656(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c3a94:
	mov -648(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c3a97:
	mov -640(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c3a9a:
	mov -632(%RBP),%RSP
	add $-664, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3a9b
	jmp uuid_00000000000c3a9d
uuid_00000000000c3a9b:
	movb $1, -464(%rbp)
uuid_00000000000c3a9d:
	mov -560(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c3aa0:
	mov -480(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c3aa3:
	mov -472(%RBP),%RSP
	add $-664, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3b20
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -744(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3ac3
	jmp uuid_00000000000c3ac5
uuid_00000000000c3ac3:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3ac0
	jmp uuid_00000000000c3ac2
uuid_00000000000c3ac0:
	push %RBP
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq $0
	push %RBP
	mov -904(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3aba
	jmp uuid_00000000000c3abc
uuid_00000000000c3aba:
	push %RBP
	jmp uuid_00000000000c3ab7
	jmp uuid_00000000000c3ab9
uuid_00000000000c3ab7:
	push %RBP
	jmp uuid_00000000000c3ab4
	jmp uuid_00000000000c3ab6
uuid_00000000000c3ab4:
	push %RBP
	mov -856(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -952(%rbp)
	pushq $uuid_00000000000c0d2f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3ab1
	jmp uuid_00000000000c3ab3
uuid_00000000000c3ab1:
	movb $1, -912(%rbp)
uuid_00000000000c3ab3:
	mov -944(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c3ab6:
	mov -936(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c3ab9:
	mov -928(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c3abc:
	mov -920(%RBP),%RSP
	add $-952, %RSP
	mov -912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3abd
	jmp uuid_00000000000c3abf
uuid_00000000000c3abd:
	movb $1, -752(%rbp)
uuid_00000000000c3abf:
	mov -848(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c3ac2:
	mov -768(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c3ac5:
	mov -760(%RBP),%RSP
	add $-952, %RSP
	mov -752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3b1d
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -1032(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3ad9
	jmp uuid_00000000000c3adb
uuid_00000000000c3ad9:
	push %RBP
	mov -1024(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3ad6
	jmp uuid_00000000000c3ad8
uuid_00000000000c3ad6:
	push %RBP
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq $0
	push %RBP
	mov -1192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3ad0
	jmp uuid_00000000000c3ad2
uuid_00000000000c3ad0:
	push %RBP
	jmp uuid_00000000000c3acd
	jmp uuid_00000000000c3acf
uuid_00000000000c3acd:
	push %RBP
	jmp uuid_00000000000c3aca
	jmp uuid_00000000000c3acc
uuid_00000000000c3aca:
	push %RBP
	mov -1144(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1240(%rbp)
	pushq $uuid_00000000000c0d2d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3ac7
	jmp uuid_00000000000c3ac9
uuid_00000000000c3ac7:
	movb $1, -1200(%rbp)
uuid_00000000000c3ac9:
	mov -1232(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000c3acc:
	mov -1224(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000c3acf:
	mov -1216(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000c3ad2:
	mov -1208(%RBP),%RSP
	add $-1240, %RSP
	mov -1200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3ad3
	jmp uuid_00000000000c3ad5
uuid_00000000000c3ad3:
	movb $1, -1040(%rbp)
uuid_00000000000c3ad5:
	mov -1136(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000c3ad8:
	mov -1056(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000c3adb:
	mov -1048(%RBP),%RSP
	add $-1240, %RSP
	mov -1040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3b1a
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -1320(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3b04
	jmp uuid_00000000000c3b06
uuid_00000000000c3b04:
	push %RBP
	mov -1312(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1416(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3aef
	jmp uuid_00000000000c3af1
uuid_00000000000c3aef:
	push %RBP
	mov -1408(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3aec
	jmp uuid_00000000000c3aee
uuid_00000000000c3aec:
	push %RBP
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	jmp uuid_00000000000c3ae9
	jmp uuid_00000000000c3aeb
uuid_00000000000c3ae9:
	movb $1, -1424(%rbp)
uuid_00000000000c3aeb:
	mov -1520(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000c3aee:
	mov -1440(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000c3af1:
	mov -1432(%RBP),%RSP
	add $-1576, %RSP
	mov -1424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3b01
	jmp uuid_00000000000c3b03
uuid_00000000000c3b01:
	push %RBP
	pushq -1256(%RBP)
	pushq -1264(%RBP)
	pushq -1272(%RBP)
	pushq -1280(%RBP)
	pushq -1288(%RBP)
	pushq -1296(%RBP)
	pushq -1304(%RBP)
	pushq $0
	push %RBP
	mov -1640(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3afb
	jmp uuid_00000000000c3afd
uuid_00000000000c3afb:
	push %RBP
	jmp uuid_00000000000c3af8
	jmp uuid_00000000000c3afa
uuid_00000000000c3af8:
	push %RBP
	jmp uuid_00000000000c3af5
	jmp uuid_00000000000c3af7
uuid_00000000000c3af5:
	push %RBP
	mov -1592(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1688(%rbp)
	pushq $uuid_00000000000c0f1a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3af2
	jmp uuid_00000000000c3af4
uuid_00000000000c3af2:
	movb $1, -1648(%rbp)
uuid_00000000000c3af4:
	mov -1680(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000c3af7:
	mov -1672(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000c3afa:
	mov -1664(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000c3afd:
	mov -1656(%RBP),%RSP
	add $-1688, %RSP
	mov -1648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3afe
	jmp uuid_00000000000c3b00
uuid_00000000000c3afe:
	movb $1, -1328(%rbp)
uuid_00000000000c3b00:
	mov -1584(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000c3b03:
	mov -1344(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000c3b06:
	mov -1336(%RBP),%RSP
	add $-1688, %RSP
	mov -1328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3b17
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -1768(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3b0d
	jmp uuid_00000000000c3b0f
uuid_00000000000c3b0d:
	push %RBP
	mov -1760(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3b0a
	jmp uuid_00000000000c3b0c
uuid_00000000000c3b0a:
	push %RBP
	pushq -1704(%RBP)
	pushq -1712(%RBP)
	pushq -1720(%RBP)
	pushq -1728(%RBP)
	pushq -1736(%RBP)
	pushq -1744(%RBP)
	pushq -1752(%RBP)
	jmp uuid_00000000000c3b07
	jmp uuid_00000000000c3b09
uuid_00000000000c3b07:
	movb $1, -1776(%rbp)
uuid_00000000000c3b09:
	mov -1872(%RBP),%RSP
	add $-1928, %RSP
uuid_00000000000c3b0c:
	mov -1792(%RBP),%RSP
	add $-1928, %RSP
uuid_00000000000c3b0f:
	mov -1784(%RBP),%RSP
	add $-1928, %RSP
	mov -1776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3b14
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3b13
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3b16
uuid_00000000000c3b14:
	push %RBP
#call function is-variable : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -1880(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call is_SB_variable_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3b10
	mov -1880(%RBP), %RAX
	push %RAX
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq $6
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	jmp uuid_00000000000c3b12
uuid_00000000000c3b10:
	mov -1880(%RBP), %RAX
	push %RAX
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq $7
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c3b12:
	mov -1936(%RBP),%RSP
	add $-1936, %RSP
	movq -1864(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1856(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1848(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1840(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1832(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1824(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1816(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1808(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1800(%rbp), %r15
	movq %r15, -160(%rbp)
uuid_00000000000c3b16:
	mov -1696(%RBP),%RSP
	add $-1936, %RSP
	jmp uuid_00000000000c3b19
uuid_00000000000c3b17:
	mov -1528(%RBP), %RAX
	push %RAX
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq $6
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -1512(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1504(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -160(%rbp)
uuid_00000000000c3b19:
	mov -1248(%RBP),%RSP
	add $-1688, %RSP
	jmp uuid_00000000000c3b1c
uuid_00000000000c3b1a:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq $0
	push %RBP
	mov -1552(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3ae2
	jmp uuid_00000000000c3ae4
uuid_00000000000c3ae2:
	push %RBP
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	jmp uuid_00000000000c3adf
	jmp uuid_00000000000c3ae1
uuid_00000000000c3adf:
	push %RBP
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	jmp uuid_00000000000c3adc
	jmp uuid_00000000000c3ade
uuid_00000000000c3adc:
	movb $1, -1560(%rbp)
uuid_00000000000c3ade:
	mov -1656(%RBP),%RSP
	add $-1728, %RSP
uuid_00000000000c3ae1:
	mov -1576(%RBP),%RSP
	add $-1728, %RSP
uuid_00000000000c3ae4:
	mov -1568(%RBP),%RSP
	add $-1728, %RSP
	mov -1560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3ae6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3ae5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3ae8
uuid_00000000000c3ae6:
	movq -1728(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1720(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1712(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1704(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1696(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1688(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1680(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1672(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1664(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1648(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1640(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1632(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1624(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1616(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1608(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1600(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1592(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1584(%rbp), %r15
	movq %r15, -160(%rbp)
uuid_00000000000c3ae8:
	mov -1400(%RBP),%RSP
	add $-1728, %RSP
uuid_00000000000c3b1c:
	mov -960(%RBP),%RSP
	add $-1728, %RSP
	jmp uuid_00000000000c3b1f
uuid_00000000000c3b1d:
#call function parse-unexpect : Arrow<Cons<String,List<Token>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3ac6
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call parse_SB_unexpect_CL_ArrowNilConsListTokenString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c3b1f:
	mov -672(%RBP),%RSP
	add $-952, %RSP
	jmp uuid_00000000000c3b22
uuid_00000000000c3b20:
#call function parse-lambda : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	mov %RBX, %RBP
	call parse_SB_lambda_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq $0
	push %RBP
	mov -976(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3aaa
	jmp uuid_00000000000c3aac
uuid_00000000000c3aaa:
	push %RBP
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	pushq -944(%RBP)
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	jmp uuid_00000000000c3aa7
	jmp uuid_00000000000c3aa9
uuid_00000000000c3aa7:
	push %RBP
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	pushq -888(%RBP)
	pushq -896(%RBP)
	jmp uuid_00000000000c3aa4
	jmp uuid_00000000000c3aa6
uuid_00000000000c3aa4:
	movb $1, -984(%rbp)
uuid_00000000000c3aa6:
	mov -1080(%RBP),%RSP
	add $-1152, %RSP
uuid_00000000000c3aa9:
	mov -1000(%RBP),%RSP
	add $-1152, %RSP
uuid_00000000000c3aac:
	mov -992(%RBP),%RSP
	add $-1152, %RSP
	mov -984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3aae
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3aad
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3ab0
uuid_00000000000c3aae:
	movq -1152(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -160(%rbp)
uuid_00000000000c3ab0:
	mov -824(%RBP),%RSP
	add $-1152, %RSP
uuid_00000000000c3b22:
	mov -384(%RBP),%RSP
	add $-1152, %RSP
	jmp uuid_00000000000c3b25
uuid_00000000000c3b23:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $9
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
uuid_00000000000c3b25:
	mov -304(%RBP),%RSP
	add $-376, %RSP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	subq $152, %rsp
	pushq -528(%rbp)
	pushq -520(%rbp)
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
parse_SB_toplevel_CL_ArrowASTListToken:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
uuid_00000000000c3d71:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3d72
	jmp uuid_00000000000c3d73
uuid_00000000000c3d72:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3b3a
	jmp uuid_00000000000c3b3c
uuid_00000000000c3b3a:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3b37
	jmp uuid_00000000000c3b39
uuid_00000000000c3b37:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	pushq -280(%RBP)
	pushq -288(%RBP)
	pushq $0
	push %RBP
	mov -464(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3b31
	jmp uuid_00000000000c3b33
uuid_00000000000c3b31:
	push %RBP
	jmp uuid_00000000000c3b2e
	jmp uuid_00000000000c3b30
uuid_00000000000c3b2e:
	push %RBP
	jmp uuid_00000000000c3b2b
	jmp uuid_00000000000c3b2d
uuid_00000000000c3b2b:
	push %RBP
	mov -416(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -512(%rbp)
	pushq $uuid_00000000000c0f18
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3b28
	jmp uuid_00000000000c3b2a
uuid_00000000000c3b28:
	movb $1, -472(%rbp)
uuid_00000000000c3b2a:
	mov -504(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000c3b2d:
	mov -496(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000c3b30:
	mov -488(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000c3b33:
	mov -480(%RBP),%RSP
	add $-512, %RSP
	mov -472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3b34
	jmp uuid_00000000000c3b36
uuid_00000000000c3b34:
	movb $1, -312(%rbp)
uuid_00000000000c3b36:
	mov -408(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000c3b39:
	mov -328(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000c3b3c:
	mov -320(%RBP),%RSP
	add $-512, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3d6e
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -592(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3b50
	jmp uuid_00000000000c3b52
uuid_00000000000c3b50:
	push %RBP
	mov -584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3b4d
	jmp uuid_00000000000c3b4f
uuid_00000000000c3b4d:
	push %RBP
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3b47
	jmp uuid_00000000000c3b49
uuid_00000000000c3b47:
	push %RBP
	jmp uuid_00000000000c3b44
	jmp uuid_00000000000c3b46
uuid_00000000000c3b44:
	push %RBP
	jmp uuid_00000000000c3b41
	jmp uuid_00000000000c3b43
uuid_00000000000c3b41:
	push %RBP
	mov -704(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -800(%rbp)
	pushq $uuid_00000000000c3b3d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3b3e
	jmp uuid_00000000000c3b40
uuid_00000000000c3b3e:
	movb $1, -760(%rbp)
uuid_00000000000c3b40:
	mov -792(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c3b43:
	mov -784(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c3b46:
	mov -776(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c3b49:
	mov -768(%RBP),%RSP
	add $-800, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3b4a
	jmp uuid_00000000000c3b4c
uuid_00000000000c3b4a:
	movb $1, -600(%rbp)
uuid_00000000000c3b4c:
	mov -696(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c3b4f:
	mov -616(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c3b52:
	mov -608(%RBP),%RSP
	add $-800, %RSP
	mov -600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3d6b
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3b90
	jmp uuid_00000000000c3b92
uuid_00000000000c3b90:
	push %RBP
	mov -872(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3b8d
	jmp uuid_00000000000c3b8f
uuid_00000000000c3b8d:
	push %RBP
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq $0
	push %RBP
	mov -1040(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3b87
	jmp uuid_00000000000c3b89
uuid_00000000000c3b87:
	push %RBP
	jmp uuid_00000000000c3b84
	jmp uuid_00000000000c3b86
uuid_00000000000c3b84:
	push %RBP
	jmp uuid_00000000000c3b81
	jmp uuid_00000000000c3b83
uuid_00000000000c3b81:
	push %RBP
	mov -992(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1088(%rbp)
	pushq $uuid_00000000000c3b7d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3b7e
	jmp uuid_00000000000c3b80
uuid_00000000000c3b7e:
	movb $1, -1048(%rbp)
uuid_00000000000c3b80:
	mov -1080(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000c3b83:
	mov -1072(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000c3b86:
	mov -1064(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000c3b89:
	mov -1056(%RBP),%RSP
	add $-1088, %RSP
	mov -1048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3b8a
	jmp uuid_00000000000c3b8c
uuid_00000000000c3b8a:
	movb $1, -888(%rbp)
uuid_00000000000c3b8c:
	mov -984(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000c3b8f:
	mov -904(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000c3b92:
	mov -896(%RBP),%RSP
	add $-1088, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3d68
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1168(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3bc9
	jmp uuid_00000000000c3bcb
uuid_00000000000c3bc9:
	push %RBP
	mov -1160(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1264(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3bb3
	jmp uuid_00000000000c3bb5
uuid_00000000000c3bb3:
	push %RBP
	mov -1256(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3bb0
	jmp uuid_00000000000c3bb2
uuid_00000000000c3bb0:
	push %RBP
	pushq -1200(%RBP)
	pushq -1208(%RBP)
	pushq -1216(%RBP)
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	pushq $0
	push %RBP
	mov -1424(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3baa
	jmp uuid_00000000000c3bac
uuid_00000000000c3baa:
	push %RBP
	jmp uuid_00000000000c3ba7
	jmp uuid_00000000000c3ba9
uuid_00000000000c3ba7:
	push %RBP
	jmp uuid_00000000000c3ba4
	jmp uuid_00000000000c3ba6
uuid_00000000000c3ba4:
	push %RBP
	mov -1376(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq $uuid_00000000000c3ba0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3ba1
	jmp uuid_00000000000c3ba3
uuid_00000000000c3ba1:
	movb $1, -1432(%rbp)
uuid_00000000000c3ba3:
	mov -1464(%RBP),%RSP
	add $-1472, %RSP
uuid_00000000000c3ba6:
	mov -1456(%RBP),%RSP
	add $-1472, %RSP
uuid_00000000000c3ba9:
	mov -1448(%RBP),%RSP
	add $-1472, %RSP
uuid_00000000000c3bac:
	mov -1440(%RBP),%RSP
	add $-1472, %RSP
	mov -1432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3bad
	jmp uuid_00000000000c3baf
uuid_00000000000c3bad:
	movb $1, -1272(%rbp)
uuid_00000000000c3baf:
	mov -1368(%RBP),%RSP
	add $-1472, %RSP
uuid_00000000000c3bb2:
	mov -1288(%RBP),%RSP
	add $-1472, %RSP
uuid_00000000000c3bb5:
	mov -1280(%RBP),%RSP
	add $-1472, %RSP
	mov -1272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3bc6
	jmp uuid_00000000000c3bc8
uuid_00000000000c3bc6:
	push %RBP
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	pushq -1152(%RBP)
	pushq $0
	push %RBP
	mov -1536(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3bc0
	jmp uuid_00000000000c3bc2
uuid_00000000000c3bc0:
	push %RBP
	jmp uuid_00000000000c3bbd
	jmp uuid_00000000000c3bbf
uuid_00000000000c3bbd:
	push %RBP
	jmp uuid_00000000000c3bba
	jmp uuid_00000000000c3bbc
uuid_00000000000c3bba:
	push %RBP
	mov -1488(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1584(%rbp)
	pushq $uuid_00000000000c3bb6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3bb7
	jmp uuid_00000000000c3bb9
uuid_00000000000c3bb7:
	movb $1, -1544(%rbp)
uuid_00000000000c3bb9:
	mov -1576(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000c3bbc:
	mov -1568(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000c3bbf:
	mov -1560(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000c3bc2:
	mov -1552(%RBP),%RSP
	add $-1584, %RSP
	mov -1544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3bc3
	jmp uuid_00000000000c3bc5
uuid_00000000000c3bc3:
	movb $1, -1176(%rbp)
uuid_00000000000c3bc5:
	mov -1480(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000c3bc8:
	mov -1192(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000c3bcb:
	mov -1184(%RBP),%RSP
	add $-1584, %RSP
	mov -1176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3d65
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3bf8
	jmp uuid_00000000000c3bfa
uuid_00000000000c3bf8:
	push %RBP
	mov -1656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3bf5
	jmp uuid_00000000000c3bf7
uuid_00000000000c3bf5:
	push %RBP
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	pushq $0
	push %RBP
	mov -1824(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3bef
	jmp uuid_00000000000c3bf1
uuid_00000000000c3bef:
	push %RBP
	jmp uuid_00000000000c3bec
	jmp uuid_00000000000c3bee
uuid_00000000000c3bec:
	push %RBP
	jmp uuid_00000000000c3be9
	jmp uuid_00000000000c3beb
uuid_00000000000c3be9:
	push %RBP
	mov -1776(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1872(%rbp)
	pushq $uuid_00000000000c3ba0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3be6
	jmp uuid_00000000000c3be8
uuid_00000000000c3be6:
	movb $1, -1832(%rbp)
uuid_00000000000c3be8:
	mov -1864(%RBP),%RSP
	add $-1872, %RSP
uuid_00000000000c3beb:
	mov -1856(%RBP),%RSP
	add $-1872, %RSP
uuid_00000000000c3bee:
	mov -1848(%RBP),%RSP
	add $-1872, %RSP
uuid_00000000000c3bf1:
	mov -1840(%RBP),%RSP
	add $-1872, %RSP
	mov -1832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3bf2
	jmp uuid_00000000000c3bf4
uuid_00000000000c3bf2:
	movb $1, -1672(%rbp)
uuid_00000000000c3bf4:
	mov -1768(%RBP),%RSP
	add $-1872, %RSP
uuid_00000000000c3bf7:
	mov -1688(%RBP),%RSP
	add $-1872, %RSP
uuid_00000000000c3bfa:
	mov -1680(%RBP),%RSP
	add $-1872, %RSP
	mov -1672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3d62
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1952(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3c68
	jmp uuid_00000000000c3c6a
uuid_00000000000c3c68:
	push %RBP
	mov -1944(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2048(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3c52
	jmp uuid_00000000000c3c54
uuid_00000000000c3c52:
	push %RBP
	mov -2040(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3c3c
	jmp uuid_00000000000c3c3e
uuid_00000000000c3c3c:
	push %RBP
	mov -2136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3c27
	jmp uuid_00000000000c3c29
uuid_00000000000c3c27:
	push %RBP
	mov -2232(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3c24
	jmp uuid_00000000000c3c26
uuid_00000000000c3c24:
	push %RBP
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	pushq -2224(%RBP)
	pushq $0
	push %RBP
	mov -2400(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3c1e
	jmp uuid_00000000000c3c20
uuid_00000000000c3c1e:
	push %RBP
	jmp uuid_00000000000c3c1b
	jmp uuid_00000000000c3c1d
uuid_00000000000c3c1b:
	push %RBP
	jmp uuid_00000000000c3c18
	jmp uuid_00000000000c3c1a
uuid_00000000000c3c18:
	push %RBP
	mov -2352(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3c15
	jmp uuid_00000000000c3c17
uuid_00000000000c3c15:
	movb $1, -2408(%rbp)
uuid_00000000000c3c17:
	mov -2440(%RBP),%RSP
	add $-2448, %RSP
uuid_00000000000c3c1a:
	mov -2432(%RBP),%RSP
	add $-2448, %RSP
uuid_00000000000c3c1d:
	mov -2424(%RBP),%RSP
	add $-2448, %RSP
uuid_00000000000c3c20:
	mov -2416(%RBP),%RSP
	add $-2448, %RSP
	mov -2408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3c21
	jmp uuid_00000000000c3c23
uuid_00000000000c3c21:
	movb $1, -2248(%rbp)
uuid_00000000000c3c23:
	mov -2344(%RBP),%RSP
	add $-2448, %RSP
uuid_00000000000c3c26:
	mov -2264(%RBP),%RSP
	add $-2448, %RSP
uuid_00000000000c3c29:
	mov -2256(%RBP),%RSP
	add $-2448, %RSP
	mov -2248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3c39
	jmp uuid_00000000000c3c3b
uuid_00000000000c3c39:
	push %RBP
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq $0
	push %RBP
	mov -2512(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3c33
	jmp uuid_00000000000c3c35
uuid_00000000000c3c33:
	push %RBP
	jmp uuid_00000000000c3c30
	jmp uuid_00000000000c3c32
uuid_00000000000c3c30:
	push %RBP
	jmp uuid_00000000000c3c2d
	jmp uuid_00000000000c3c2f
uuid_00000000000c3c2d:
	push %RBP
	mov -2464(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3c2a
	jmp uuid_00000000000c3c2c
uuid_00000000000c3c2a:
	movb $1, -2520(%rbp)
uuid_00000000000c3c2c:
	mov -2552(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c3c2f:
	mov -2544(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c3c32:
	mov -2536(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c3c35:
	mov -2528(%RBP),%RSP
	add $-2560, %RSP
	mov -2520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3c36
	jmp uuid_00000000000c3c38
uuid_00000000000c3c36:
	movb $1, -2152(%rbp)
uuid_00000000000c3c38:
	mov -2456(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c3c3b:
	mov -2168(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c3c3e:
	mov -2160(%RBP),%RSP
	add $-2560, %RSP
	mov -2152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3c4f
	jmp uuid_00000000000c3c51
uuid_00000000000c3c4f:
	push %RBP
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	pushq -2032(%RBP)
	pushq $0
	push %RBP
	mov -2624(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3c49
	jmp uuid_00000000000c3c4b
uuid_00000000000c3c49:
	push %RBP
	jmp uuid_00000000000c3c46
	jmp uuid_00000000000c3c48
uuid_00000000000c3c46:
	push %RBP
	jmp uuid_00000000000c3c43
	jmp uuid_00000000000c3c45
uuid_00000000000c3c43:
	push %RBP
	mov -2576(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2672(%rbp)
	pushq $uuid_00000000000c3c3f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3c40
	jmp uuid_00000000000c3c42
uuid_00000000000c3c40:
	movb $1, -2632(%rbp)
uuid_00000000000c3c42:
	mov -2664(%RBP),%RSP
	add $-2672, %RSP
uuid_00000000000c3c45:
	mov -2656(%RBP),%RSP
	add $-2672, %RSP
uuid_00000000000c3c48:
	mov -2648(%RBP),%RSP
	add $-2672, %RSP
uuid_00000000000c3c4b:
	mov -2640(%RBP),%RSP
	add $-2672, %RSP
	mov -2632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3c4c
	jmp uuid_00000000000c3c4e
uuid_00000000000c3c4c:
	movb $1, -2056(%rbp)
uuid_00000000000c3c4e:
	mov -2568(%RBP),%RSP
	add $-2672, %RSP
uuid_00000000000c3c51:
	mov -2072(%RBP),%RSP
	add $-2672, %RSP
uuid_00000000000c3c54:
	mov -2064(%RBP),%RSP
	add $-2672, %RSP
	mov -2056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3c65
	jmp uuid_00000000000c3c67
uuid_00000000000c3c65:
	push %RBP
	pushq -1888(%RBP)
	pushq -1896(%RBP)
	pushq -1904(%RBP)
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq $0
	push %RBP
	mov -2736(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3c5f
	jmp uuid_00000000000c3c61
uuid_00000000000c3c5f:
	push %RBP
	jmp uuid_00000000000c3c5c
	jmp uuid_00000000000c3c5e
uuid_00000000000c3c5c:
	push %RBP
	jmp uuid_00000000000c3c59
	jmp uuid_00000000000c3c5b
uuid_00000000000c3c59:
	push %RBP
	mov -2688(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2784(%rbp)
	pushq $uuid_00000000000c3c55
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3c56
	jmp uuid_00000000000c3c58
uuid_00000000000c3c56:
	movb $1, -2744(%rbp)
uuid_00000000000c3c58:
	mov -2776(%RBP),%RSP
	add $-2784, %RSP
uuid_00000000000c3c5b:
	mov -2768(%RBP),%RSP
	add $-2784, %RSP
uuid_00000000000c3c5e:
	mov -2760(%RBP),%RSP
	add $-2784, %RSP
uuid_00000000000c3c61:
	mov -2752(%RBP),%RSP
	add $-2784, %RSP
	mov -2744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3c62
	jmp uuid_00000000000c3c64
uuid_00000000000c3c62:
	movb $1, -1960(%rbp)
uuid_00000000000c3c64:
	mov -2680(%RBP),%RSP
	add $-2784, %RSP
uuid_00000000000c3c67:
	mov -1976(%RBP),%RSP
	add $-2784, %RSP
uuid_00000000000c3c6a:
	mov -1968(%RBP),%RSP
	add $-2784, %RSP
	mov -1960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3d5f
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2864(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3cb0
	jmp uuid_00000000000c3cb2
uuid_00000000000c3cb0:
	push %RBP
	mov -2856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2960(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3c9a
	jmp uuid_00000000000c3c9c
uuid_00000000000c3c9a:
	push %RBP
	mov -2952(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3056(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3c85
	jmp uuid_00000000000c3c87
uuid_00000000000c3c85:
	push %RBP
	mov -3048(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3c82
	jmp uuid_00000000000c3c84
uuid_00000000000c3c82:
	push %RBP
	pushq -2992(%RBP)
	pushq -3000(%RBP)
	pushq -3008(%RBP)
	pushq -3016(%RBP)
	pushq -3024(%RBP)
	pushq -3032(%RBP)
	pushq -3040(%RBP)
	pushq $0
	push %RBP
	mov -3216(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3c7c
	jmp uuid_00000000000c3c7e
uuid_00000000000c3c7c:
	push %RBP
	jmp uuid_00000000000c3c79
	jmp uuid_00000000000c3c7b
uuid_00000000000c3c79:
	push %RBP
	jmp uuid_00000000000c3c76
	jmp uuid_00000000000c3c78
uuid_00000000000c3c76:
	push %RBP
	mov -3168(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3c73
	jmp uuid_00000000000c3c75
uuid_00000000000c3c73:
	movb $1, -3224(%rbp)
uuid_00000000000c3c75:
	mov -3256(%RBP),%RSP
	add $-3264, %RSP
uuid_00000000000c3c78:
	mov -3248(%RBP),%RSP
	add $-3264, %RSP
uuid_00000000000c3c7b:
	mov -3240(%RBP),%RSP
	add $-3264, %RSP
uuid_00000000000c3c7e:
	mov -3232(%RBP),%RSP
	add $-3264, %RSP
	mov -3224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3c7f
	jmp uuid_00000000000c3c81
uuid_00000000000c3c7f:
	movb $1, -3064(%rbp)
uuid_00000000000c3c81:
	mov -3160(%RBP),%RSP
	add $-3264, %RSP
uuid_00000000000c3c84:
	mov -3080(%RBP),%RSP
	add $-3264, %RSP
uuid_00000000000c3c87:
	mov -3072(%RBP),%RSP
	add $-3264, %RSP
	mov -3064(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3c97
	jmp uuid_00000000000c3c99
uuid_00000000000c3c97:
	push %RBP
	pushq -2896(%RBP)
	pushq -2904(%RBP)
	pushq -2912(%RBP)
	pushq -2920(%RBP)
	pushq -2928(%RBP)
	pushq -2936(%RBP)
	pushq -2944(%RBP)
	pushq $0
	push %RBP
	mov -3328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3c91
	jmp uuid_00000000000c3c93
uuid_00000000000c3c91:
	push %RBP
	jmp uuid_00000000000c3c8e
	jmp uuid_00000000000c3c90
uuid_00000000000c3c8e:
	push %RBP
	jmp uuid_00000000000c3c8b
	jmp uuid_00000000000c3c8d
uuid_00000000000c3c8b:
	push %RBP
	mov -3280(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3c88
	jmp uuid_00000000000c3c8a
uuid_00000000000c3c88:
	movb $1, -3336(%rbp)
uuid_00000000000c3c8a:
	mov -3368(%RBP),%RSP
	add $-3376, %RSP
uuid_00000000000c3c8d:
	mov -3360(%RBP),%RSP
	add $-3376, %RSP
uuid_00000000000c3c90:
	mov -3352(%RBP),%RSP
	add $-3376, %RSP
uuid_00000000000c3c93:
	mov -3344(%RBP),%RSP
	add $-3376, %RSP
	mov -3336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3c94
	jmp uuid_00000000000c3c96
uuid_00000000000c3c94:
	movb $1, -2968(%rbp)
uuid_00000000000c3c96:
	mov -3272(%RBP),%RSP
	add $-3376, %RSP
uuid_00000000000c3c99:
	mov -2984(%RBP),%RSP
	add $-3376, %RSP
uuid_00000000000c3c9c:
	mov -2976(%RBP),%RSP
	add $-3376, %RSP
	mov -2968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3cad
	jmp uuid_00000000000c3caf
uuid_00000000000c3cad:
	push %RBP
	pushq -2800(%RBP)
	pushq -2808(%RBP)
	pushq -2816(%RBP)
	pushq -2824(%RBP)
	pushq -2832(%RBP)
	pushq -2840(%RBP)
	pushq -2848(%RBP)
	pushq $0
	push %RBP
	mov -3440(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3ca7
	jmp uuid_00000000000c3ca9
uuid_00000000000c3ca7:
	push %RBP
	jmp uuid_00000000000c3ca4
	jmp uuid_00000000000c3ca6
uuid_00000000000c3ca4:
	push %RBP
	jmp uuid_00000000000c3ca1
	jmp uuid_00000000000c3ca3
uuid_00000000000c3ca1:
	push %RBP
	mov -3392(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3488(%rbp)
	pushq $uuid_00000000000c3c9d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3c9e
	jmp uuid_00000000000c3ca0
uuid_00000000000c3c9e:
	movb $1, -3448(%rbp)
uuid_00000000000c3ca0:
	mov -3480(%RBP),%RSP
	add $-3488, %RSP
uuid_00000000000c3ca3:
	mov -3472(%RBP),%RSP
	add $-3488, %RSP
uuid_00000000000c3ca6:
	mov -3464(%RBP),%RSP
	add $-3488, %RSP
uuid_00000000000c3ca9:
	mov -3456(%RBP),%RSP
	add $-3488, %RSP
	mov -3448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3caa
	jmp uuid_00000000000c3cac
uuid_00000000000c3caa:
	movb $1, -2872(%rbp)
uuid_00000000000c3cac:
	mov -3384(%RBP),%RSP
	add $-3488, %RSP
uuid_00000000000c3caf:
	mov -2888(%RBP),%RSP
	add $-3488, %RSP
uuid_00000000000c3cb2:
	mov -2880(%RBP),%RSP
	add $-3488, %RSP
	mov -2872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3d5c
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -3568(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3cdb
	jmp uuid_00000000000c3cdd
uuid_00000000000c3cdb:
	push %RBP
	mov -3560(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3cc5
	jmp uuid_00000000000c3cc7
uuid_00000000000c3cc5:
	push %RBP
	mov -3656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3cc2
	jmp uuid_00000000000c3cc4
uuid_00000000000c3cc2:
	push %RBP
	pushq -3600(%RBP)
	pushq -3608(%RBP)
	pushq -3616(%RBP)
	pushq -3624(%RBP)
	pushq -3632(%RBP)
	pushq -3640(%RBP)
	pushq -3648(%RBP)
	pushq $0
	push %RBP
	mov -3824(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3cbc
	jmp uuid_00000000000c3cbe
uuid_00000000000c3cbc:
	push %RBP
	jmp uuid_00000000000c3cb9
	jmp uuid_00000000000c3cbb
uuid_00000000000c3cb9:
	push %RBP
	jmp uuid_00000000000c3cb6
	jmp uuid_00000000000c3cb8
uuid_00000000000c3cb6:
	push %RBP
	mov -3776(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3cb3
	jmp uuid_00000000000c3cb5
uuid_00000000000c3cb3:
	movb $1, -3832(%rbp)
uuid_00000000000c3cb5:
	mov -3864(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000c3cb8:
	mov -3856(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000c3cbb:
	mov -3848(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000c3cbe:
	mov -3840(%RBP),%RSP
	add $-3872, %RSP
	mov -3832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3cbf
	jmp uuid_00000000000c3cc1
uuid_00000000000c3cbf:
	movb $1, -3672(%rbp)
uuid_00000000000c3cc1:
	mov -3768(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000c3cc4:
	mov -3688(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000c3cc7:
	mov -3680(%RBP),%RSP
	add $-3872, %RSP
	mov -3672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3cd8
	jmp uuid_00000000000c3cda
uuid_00000000000c3cd8:
	push %RBP
	pushq -3504(%RBP)
	pushq -3512(%RBP)
	pushq -3520(%RBP)
	pushq -3528(%RBP)
	pushq -3536(%RBP)
	pushq -3544(%RBP)
	pushq -3552(%RBP)
	pushq $0
	push %RBP
	mov -3936(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3cd2
	jmp uuid_00000000000c3cd4
uuid_00000000000c3cd2:
	push %RBP
	jmp uuid_00000000000c3ccf
	jmp uuid_00000000000c3cd1
uuid_00000000000c3ccf:
	push %RBP
	jmp uuid_00000000000c3ccc
	jmp uuid_00000000000c3cce
uuid_00000000000c3ccc:
	push %RBP
	mov -3888(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3984(%rbp)
	pushq $uuid_00000000000c3cc8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3cc9
	jmp uuid_00000000000c3ccb
uuid_00000000000c3cc9:
	movb $1, -3944(%rbp)
uuid_00000000000c3ccb:
	mov -3976(%RBP),%RSP
	add $-3984, %RSP
uuid_00000000000c3cce:
	mov -3968(%RBP),%RSP
	add $-3984, %RSP
uuid_00000000000c3cd1:
	mov -3960(%RBP),%RSP
	add $-3984, %RSP
uuid_00000000000c3cd4:
	mov -3952(%RBP),%RSP
	add $-3984, %RSP
	mov -3944(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3cd5
	jmp uuid_00000000000c3cd7
uuid_00000000000c3cd5:
	movb $1, -3576(%rbp)
uuid_00000000000c3cd7:
	mov -3880(%RBP),%RSP
	add $-3984, %RSP
uuid_00000000000c3cda:
	mov -3592(%RBP),%RSP
	add $-3984, %RSP
uuid_00000000000c3cdd:
	mov -3584(%RBP),%RSP
	add $-3984, %RSP
	mov -3576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3d59
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -4064(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3d0f
	jmp uuid_00000000000c3d11
uuid_00000000000c3d0f:
	push %RBP
	mov -4056(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3cf9
	jmp uuid_00000000000c3cfb
uuid_00000000000c3cf9:
	push %RBP
	mov -4152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4256(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3cf0
	jmp uuid_00000000000c3cf2
uuid_00000000000c3cf0:
	push %RBP
	mov -4248(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3ced
	jmp uuid_00000000000c3cef
uuid_00000000000c3ced:
	push %RBP
	pushq -4192(%RBP)
	pushq -4200(%RBP)
	pushq -4208(%RBP)
	pushq -4216(%RBP)
	pushq -4224(%RBP)
	pushq -4232(%RBP)
	pushq -4240(%RBP)
	pushq $0
	push %RBP
	mov -4416(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3ce7
	jmp uuid_00000000000c3ce9
uuid_00000000000c3ce7:
	push %RBP
	jmp uuid_00000000000c3ce4
	jmp uuid_00000000000c3ce6
uuid_00000000000c3ce4:
	push %RBP
	jmp uuid_00000000000c3ce1
	jmp uuid_00000000000c3ce3
uuid_00000000000c3ce1:
	push %RBP
	mov -4368(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3cde
	jmp uuid_00000000000c3ce0
uuid_00000000000c3cde:
	movb $1, -4424(%rbp)
uuid_00000000000c3ce0:
	mov -4456(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000c3ce3:
	mov -4448(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000c3ce6:
	mov -4440(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000c3ce9:
	mov -4432(%RBP),%RSP
	add $-4464, %RSP
	mov -4424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3cea
	jmp uuid_00000000000c3cec
uuid_00000000000c3cea:
	movb $1, -4264(%rbp)
uuid_00000000000c3cec:
	mov -4360(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000c3cef:
	mov -4280(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000c3cf2:
	mov -4272(%RBP),%RSP
	add $-4464, %RSP
	mov -4264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3cf6
	jmp uuid_00000000000c3cf8
uuid_00000000000c3cf6:
	push %RBP
	pushq -4096(%RBP)
	pushq -4104(%RBP)
	pushq -4112(%RBP)
	pushq -4120(%RBP)
	pushq -4128(%RBP)
	pushq -4136(%RBP)
	pushq -4144(%RBP)
	jmp uuid_00000000000c3cf3
	jmp uuid_00000000000c3cf5
uuid_00000000000c3cf3:
	movb $1, -4168(%rbp)
uuid_00000000000c3cf5:
	mov -4472(%RBP),%RSP
	add $-4528, %RSP
uuid_00000000000c3cf8:
	mov -4184(%RBP),%RSP
	add $-4528, %RSP
uuid_00000000000c3cfb:
	mov -4176(%RBP),%RSP
	add $-4528, %RSP
	mov -4168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3d0c
	jmp uuid_00000000000c3d0e
uuid_00000000000c3d0c:
	push %RBP
	pushq -4000(%RBP)
	pushq -4008(%RBP)
	pushq -4016(%RBP)
	pushq -4024(%RBP)
	pushq -4032(%RBP)
	pushq -4040(%RBP)
	pushq -4048(%RBP)
	pushq $0
	push %RBP
	mov -4592(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3d06
	jmp uuid_00000000000c3d08
uuid_00000000000c3d06:
	push %RBP
	jmp uuid_00000000000c3d03
	jmp uuid_00000000000c3d05
uuid_00000000000c3d03:
	push %RBP
	jmp uuid_00000000000c3d00
	jmp uuid_00000000000c3d02
uuid_00000000000c3d00:
	push %RBP
	mov -4544(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4640(%rbp)
	pushq $uuid_00000000000c3cfc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3cfd
	jmp uuid_00000000000c3cff
uuid_00000000000c3cfd:
	movb $1, -4600(%rbp)
uuid_00000000000c3cff:
	mov -4632(%RBP),%RSP
	add $-4640, %RSP
uuid_00000000000c3d02:
	mov -4624(%RBP),%RSP
	add $-4640, %RSP
uuid_00000000000c3d05:
	mov -4616(%RBP),%RSP
	add $-4640, %RSP
uuid_00000000000c3d08:
	mov -4608(%RBP),%RSP
	add $-4640, %RSP
	mov -4600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3d09
	jmp uuid_00000000000c3d0b
uuid_00000000000c3d09:
	movb $1, -4072(%rbp)
uuid_00000000000c3d0b:
	mov -4536(%RBP),%RSP
	add $-4640, %RSP
uuid_00000000000c3d0e:
	mov -4088(%RBP),%RSP
	add $-4640, %RSP
uuid_00000000000c3d11:
	mov -4080(%RBP),%RSP
	add $-4640, %RSP
	mov -4072(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3d56
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -4720(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3d32
	jmp uuid_00000000000c3d34
uuid_00000000000c3d32:
	push %RBP
	mov -4712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4816(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3d29
	jmp uuid_00000000000c3d2b
uuid_00000000000c3d29:
	push %RBP
	mov -4808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3d26
	jmp uuid_00000000000c3d28
uuid_00000000000c3d26:
	push %RBP
	pushq -4752(%RBP)
	pushq -4760(%RBP)
	pushq -4768(%RBP)
	pushq -4776(%RBP)
	pushq -4784(%RBP)
	pushq -4792(%RBP)
	pushq -4800(%RBP)
	pushq $0
	push %RBP
	mov -4976(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3d20
	jmp uuid_00000000000c3d22
uuid_00000000000c3d20:
	push %RBP
	jmp uuid_00000000000c3d1d
	jmp uuid_00000000000c3d1f
uuid_00000000000c3d1d:
	push %RBP
	jmp uuid_00000000000c3d1a
	jmp uuid_00000000000c3d1c
uuid_00000000000c3d1a:
	push %RBP
	mov -4928(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5024(%rbp)
	pushq $uuid_00000000000c3d16
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3d17
	jmp uuid_00000000000c3d19
uuid_00000000000c3d17:
	movb $1, -4984(%rbp)
uuid_00000000000c3d19:
	mov -5016(%RBP),%RSP
	add $-5024, %RSP
uuid_00000000000c3d1c:
	mov -5008(%RBP),%RSP
	add $-5024, %RSP
uuid_00000000000c3d1f:
	mov -5000(%RBP),%RSP
	add $-5024, %RSP
uuid_00000000000c3d22:
	mov -4992(%RBP),%RSP
	add $-5024, %RSP
	mov -4984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3d23
	jmp uuid_00000000000c3d25
uuid_00000000000c3d23:
	movb $1, -4824(%rbp)
uuid_00000000000c3d25:
	mov -4920(%RBP),%RSP
	add $-5024, %RSP
uuid_00000000000c3d28:
	mov -4840(%RBP),%RSP
	add $-5024, %RSP
uuid_00000000000c3d2b:
	mov -4832(%RBP),%RSP
	add $-5024, %RSP
	mov -4824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3d2f
	jmp uuid_00000000000c3d31
uuid_00000000000c3d2f:
	push %RBP
	pushq -4656(%RBP)
	pushq -4664(%RBP)
	pushq -4672(%RBP)
	pushq -4680(%RBP)
	pushq -4688(%RBP)
	pushq -4696(%RBP)
	pushq -4704(%RBP)
	jmp uuid_00000000000c3d2c
	jmp uuid_00000000000c3d2e
uuid_00000000000c3d2c:
	movb $1, -4728(%rbp)
uuid_00000000000c3d2e:
	mov -5032(%RBP),%RSP
	add $-5088, %RSP
uuid_00000000000c3d31:
	mov -4744(%RBP),%RSP
	add $-5088, %RSP
uuid_00000000000c3d34:
	mov -4736(%RBP),%RSP
	add $-5088, %RSP
	mov -4728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3d53
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	jmp uuid_00000000000c3d50
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3d4f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3d52
uuid_00000000000c3d50:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq -5136(%rbp)
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	pushq -5264(%rbp)
	pushq -5272(%rbp)
	pushq -5280(%rbp)
	pushq -5288(%rbp)
	pushq -5296(%rbp)
	pushq -5304(%rbp)
	pushq -5312(%rbp)
	pushq -5320(%rbp)
	pushq $0
	push %RBP
	mov -5480(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3d48
	jmp uuid_00000000000c3d4a
uuid_00000000000c3d48:
	push %RBP
	pushq -5408(%RBP)
	pushq -5416(%RBP)
	pushq -5424(%RBP)
	pushq -5432(%RBP)
	pushq -5440(%RBP)
	pushq -5448(%RBP)
	pushq -5456(%RBP)
	pushq -5464(%RBP)
	pushq -5472(%RBP)
	jmp uuid_00000000000c3d45
	jmp uuid_00000000000c3d47
uuid_00000000000c3d45:
	push %RBP
	pushq -5336(%RBP)
	pushq -5344(%RBP)
	pushq -5352(%RBP)
	pushq -5360(%RBP)
	pushq -5368(%RBP)
	pushq -5376(%RBP)
	pushq -5384(%RBP)
	pushq -5392(%RBP)
	pushq -5400(%RBP)
	jmp uuid_00000000000c3d42
	jmp uuid_00000000000c3d44
uuid_00000000000c3d42:
	movb $1, -5488(%rbp)
uuid_00000000000c3d44:
	mov -5584(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000c3d47:
	mov -5504(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000c3d4a:
	mov -5496(%RBP),%RSP
	add $-5656, %RSP
	mov -5488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3d4c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3d4b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3d4e
uuid_00000000000c3d4c:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5592(%rbp)
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -5576(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -5568(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -5560(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -5552(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -5544(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -5536(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -5528(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -5520(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -5512(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c3d4e:
	mov -5328(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000c3d52:
	mov -5096(%RBP),%RSP
	add $-5656, %RSP
	jmp uuid_00000000000c3d55
uuid_00000000000c3d53:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4848(%rbp)
	pushq -4856(%rbp)
	pushq -4864(%rbp)
	pushq -4872(%rbp)
	pushq -4880(%rbp)
	pushq -4888(%rbp)
	pushq -4896(%rbp)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq -5136(%rbp)
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq $0
	push %RBP
	mov -5400(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3d3b
	jmp uuid_00000000000c3d3d
uuid_00000000000c3d3b:
	push %RBP
	pushq -5328(%RBP)
	pushq -5336(%RBP)
	pushq -5344(%RBP)
	pushq -5352(%RBP)
	pushq -5360(%RBP)
	pushq -5368(%RBP)
	pushq -5376(%RBP)
	pushq -5384(%RBP)
	pushq -5392(%RBP)
	jmp uuid_00000000000c3d38
	jmp uuid_00000000000c3d3a
uuid_00000000000c3d38:
	push %RBP
	pushq -5256(%RBP)
	pushq -5264(%RBP)
	pushq -5272(%RBP)
	pushq -5280(%RBP)
	pushq -5288(%RBP)
	pushq -5296(%RBP)
	pushq -5304(%RBP)
	pushq -5312(%RBP)
	pushq -5320(%RBP)
	jmp uuid_00000000000c3d35
	jmp uuid_00000000000c3d37
uuid_00000000000c3d35:
	movb $1, -5408(%rbp)
uuid_00000000000c3d37:
	mov -5504(%RBP),%RSP
	add $-5576, %RSP
uuid_00000000000c3d3a:
	mov -5424(%RBP),%RSP
	add $-5576, %RSP
uuid_00000000000c3d3d:
	mov -5416(%RBP),%RSP
	add $-5576, %RSP
	mov -5408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3d3f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3d3e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3d41
uuid_00000000000c3d3f:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5512(%rbp)
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -5496(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -5488(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -5480(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -5472(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -5464(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -5456(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -5448(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -5440(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -5432(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c3d41:
	mov -5248(%RBP),%RSP
	add $-5576, %RSP
uuid_00000000000c3d55:
	mov -4648(%RBP),%RSP
	add $-5576, %RSP
	jmp uuid_00000000000c3d58
uuid_00000000000c3d56:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000c3d12
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1176
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3d13
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000c3d13
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -4480(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1176
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3d14
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000c3d14
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3d15
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000c3d15
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3d13
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000c3d13
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3d15
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000c3d15
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1176
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4464(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq -4464(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -4480(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c129d
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $3
	pushq $5
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -4352(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -4344(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -4336(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -4328(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -4320(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -4312(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -4304(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -4296(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -4288(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c3d58:
	mov -3992(%RBP),%RSP
	add $-4640, %RSP
	jmp uuid_00000000000c3d5b
uuid_00000000000c3d59:
#call function tokenize : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3872(%rbp)
	mov %RBX, %RBP
	call tokenize_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function parse : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call parse_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -3760(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -3752(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -3744(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -3736(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -3728(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -3720(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -3712(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -3704(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -3696(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c3d5b:
	mov -3496(%RBP),%RSP
	add $-3984, %RSP
	jmp uuid_00000000000c3d5e
uuid_00000000000c3d5c:
#call function index-size-of-class : Arrow<Cons<String,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3376(%rbp)
#call function to-u64 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3264(%rbp)
	mov %RBX, %RBP
	call to_SB_u64_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call index_SB_size_SB_of_SB_class_CL_ArrowNilConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -3152(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -3144(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -3136(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -3128(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -3120(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -3112(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -3104(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -3096(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -3088(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c3d5e:
	mov -2792(%RBP),%RSP
	add $-3488, %RSP
	jmp uuid_00000000000c3d61
uuid_00000000000c3d5f:
#call function close : Arrow<SfxList,Array<SfxList,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $parse_SB_suffixes_CL_SfxListSfxListCaseNumber1, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SfxListSfxList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -2448(%rbp)
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1774
#call function close : Arrow<List<Type>+List<Type>+CaseNumber<1>,Array<List<Type>+List<Type>+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeCaseNumber1ListTypeListTypeCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c22e4
#call function close : Arrow<List<Type>+List<Type>+CaseNumber<1>,Array<List<Type>+List<Type>+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeCaseNumber1ListTypeListTypeCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2560(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	mov $parse_SB_suffixes_CL_SfxListSfxListCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	movq -2336(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2328(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -2320(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -2312(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -2304(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -2296(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -2288(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -2280(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -2272(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c3d61:
	mov -1880(%RBP),%RSP
	add $-2784, %RSP
	jmp uuid_00000000000c3d64
uuid_00000000000c3d62:
#call function parse-one-expression : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	mov %RBX, %RBP
	call parse_SB_one_SB_expression_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq $0
	push %RBP
	mov -2184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3c01
	jmp uuid_00000000000c3c03
uuid_00000000000c3c01:
	push %RBP
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2152(%RBP)
	pushq -2160(%RBP)
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	jmp uuid_00000000000c3bfe
	jmp uuid_00000000000c3c00
uuid_00000000000c3bfe:
	push %RBP
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	jmp uuid_00000000000c3bfb
	jmp uuid_00000000000c3bfd
uuid_00000000000c3bfb:
	movb $1, -2192(%rbp)
uuid_00000000000c3bfd:
	mov -2288(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000c3c00:
	mov -2208(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000c3c03:
	mov -2200(%RBP),%RSP
	add $-2360, %RSP
	mov -2192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3c12
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3c11
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3c14
uuid_00000000000c3c12:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	pushq -2408(%rbp)
	pushq -2416(%rbp)
	pushq -2424(%rbp)
	pushq -2432(%rbp)
	pushq -2440(%rbp)
	pushq -2448(%rbp)
	pushq -2456(%rbp)
	pushq -2464(%rbp)
	pushq -2472(%rbp)
	pushq -2480(%rbp)
	pushq -2488(%rbp)
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	pushq -2512(%rbp)
	pushq $0
	push %RBP
	mov -2672(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3c0a
	jmp uuid_00000000000c3c0c
uuid_00000000000c3c0a:
	push %RBP
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	pushq -2624(%RBP)
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	pushq -2656(%RBP)
	pushq -2664(%RBP)
	jmp uuid_00000000000c3c07
	jmp uuid_00000000000c3c09
uuid_00000000000c3c07:
	push %RBP
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq -2560(%RBP)
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq -2592(%RBP)
	jmp uuid_00000000000c3c04
	jmp uuid_00000000000c3c06
uuid_00000000000c3c04:
	movb $1, -2680(%rbp)
uuid_00000000000c3c06:
	mov -2776(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000c3c09:
	mov -2696(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000c3c0c:
	mov -2688(%RBP),%RSP
	add $-2848, %RSP
	mov -2680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3c0e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3c0d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3c10
uuid_00000000000c3c0e:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
	pushq -2336(%rbp)
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2784(%rbp)
	pushq -2792(%rbp)
	pushq -2800(%rbp)
	pushq -2808(%rbp)
	pushq -2816(%rbp)
	pushq -2824(%rbp)
	pushq -2832(%rbp)
	pushq -2840(%rbp)
	pushq -2848(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -2768(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2760(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -2752(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -2744(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -2736(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -2728(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -2720(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -2712(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -2704(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c3c10:
	mov -2520(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000c3c14:
	mov -2032(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000c3d64:
	mov -1592(%RBP),%RSP
	add $-2848, %RSP
	jmp uuid_00000000000c3d67
uuid_00000000000c3d65:
#call function parse-one-expression : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	mov %RBX, %RBP
	call parse_SB_one_SB_expression_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq $0
	push %RBP
	mov -1896(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3bd2
	jmp uuid_00000000000c3bd4
uuid_00000000000c3bd2:
	push %RBP
	pushq -1824(%RBP)
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	pushq -1856(%RBP)
	pushq -1864(%RBP)
	pushq -1872(%RBP)
	pushq -1880(%RBP)
	pushq -1888(%RBP)
	jmp uuid_00000000000c3bcf
	jmp uuid_00000000000c3bd1
uuid_00000000000c3bcf:
	push %RBP
	pushq -1752(%RBP)
	pushq -1760(%RBP)
	pushq -1768(%RBP)
	pushq -1776(%RBP)
	pushq -1784(%RBP)
	pushq -1792(%RBP)
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	jmp uuid_00000000000c3bcc
	jmp uuid_00000000000c3bce
uuid_00000000000c3bcc:
	movb $1, -1904(%rbp)
uuid_00000000000c3bce:
	mov -2000(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000c3bd1:
	mov -1920(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000c3bd4:
	mov -1912(%RBP),%RSP
	add $-2072, %RSP
	mov -1904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3be3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3be2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3be5
uuid_00000000000c3be3:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq $0
	push %RBP
	mov -2384(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3bdb
	jmp uuid_00000000000c3bdd
uuid_00000000000c3bdb:
	push %RBP
	pushq -2312(%RBP)
	pushq -2320(%RBP)
	pushq -2328(%RBP)
	pushq -2336(%RBP)
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	pushq -2360(%RBP)
	pushq -2368(%RBP)
	pushq -2376(%RBP)
	jmp uuid_00000000000c3bd8
	jmp uuid_00000000000c3bda
uuid_00000000000c3bd8:
	push %RBP
	pushq -2240(%RBP)
	pushq -2248(%RBP)
	pushq -2256(%RBP)
	pushq -2264(%RBP)
	pushq -2272(%RBP)
	pushq -2280(%RBP)
	pushq -2288(%RBP)
	pushq -2296(%RBP)
	pushq -2304(%RBP)
	jmp uuid_00000000000c3bd5
	jmp uuid_00000000000c3bd7
uuid_00000000000c3bd5:
	movb $1, -2392(%rbp)
uuid_00000000000c3bd7:
	mov -2488(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c3bda:
	mov -2408(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c3bdd:
	mov -2400(%RBP),%RSP
	add $-2560, %RSP
	mov -2392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3bdf
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3bde
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3be1
uuid_00000000000c3bdf:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	pushq -2512(%rbp)
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
#call function type-of-s : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call type_SB_of_SB_s_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function index-tag-is-fragment : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function tag-of : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2568(%rbp)
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	mov %RBX, %RBP
	call tag_SB_of_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call index_SB_tag_SB_is_SB_fragment_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -2480(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2472(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -2464(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -2456(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -2448(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -2440(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -2432(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -2424(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -2416(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c3be1:
	mov -2232(%RBP),%RSP
	add $-2584, %RSP
uuid_00000000000c3be5:
	mov -1744(%RBP),%RSP
	add $-2584, %RSP
uuid_00000000000c3d67:
	mov -1096(%RBP),%RSP
	add $-2584, %RSP
	jmp uuid_00000000000c3d6a
uuid_00000000000c3d68:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq $0
	push %RBP
	mov -1400(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3b99
	jmp uuid_00000000000c3b9b
uuid_00000000000c3b99:
	push %RBP
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	pushq -1392(%RBP)
	jmp uuid_00000000000c3b96
	jmp uuid_00000000000c3b98
uuid_00000000000c3b96:
	push %RBP
	pushq -1256(%RBP)
	pushq -1264(%RBP)
	pushq -1272(%RBP)
	pushq -1280(%RBP)
	pushq -1288(%RBP)
	pushq -1296(%RBP)
	pushq -1304(%RBP)
	pushq -1312(%RBP)
	pushq -1320(%RBP)
	jmp uuid_00000000000c3b93
	jmp uuid_00000000000c3b95
uuid_00000000000c3b93:
	movb $1, -1408(%rbp)
uuid_00000000000c3b95:
	mov -1504(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000c3b98:
	mov -1424(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000c3b9b:
	mov -1416(%RBP),%RSP
	add $-1576, %RSP
	mov -1408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3b9d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3b9c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3b9f
uuid_00000000000c3b9d:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -1496(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c3b9f:
	mov -1248(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000c3d6a:
	mov -808(%RBP),%RSP
	add $-1576, %RSP
	jmp uuid_00000000000c3d6d
uuid_00000000000c3d6b:
#call function parse-one-expression : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	mov %RBX, %RBP
	call parse_SB_one_SB_expression_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq $0
	push %RBP
	mov -1112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3b59
	jmp uuid_00000000000c3b5b
uuid_00000000000c3b59:
	push %RBP
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	jmp uuid_00000000000c3b56
	jmp uuid_00000000000c3b58
uuid_00000000000c3b56:
	push %RBP
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	jmp uuid_00000000000c3b53
	jmp uuid_00000000000c3b55
uuid_00000000000c3b53:
	movb $1, -1120(%rbp)
uuid_00000000000c3b55:
	mov -1216(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000c3b58:
	mov -1136(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000c3b5b:
	mov -1128(%RBP),%RSP
	add $-1288, %RSP
	mov -1120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3b7a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3b79
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3b7c
uuid_00000000000c3b7a:
#call function take-one-expr : Arrow<List<Token>,Tuple<List<Token>,List<Token>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	mov %RBX, %RBP
	call take_SB_one_SB_expr_CL_ArrowTupleListTokenListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq $0
	push %RBP
	mov -1600(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3b62
	jmp uuid_00000000000c3b64
uuid_00000000000c3b62:
	push %RBP
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	jmp uuid_00000000000c3b5f
	jmp uuid_00000000000c3b61
uuid_00000000000c3b5f:
	push %RBP
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	jmp uuid_00000000000c3b5c
	jmp uuid_00000000000c3b5e
uuid_00000000000c3b5c:
	movb $1, -1608(%rbp)
uuid_00000000000c3b5e:
	mov -1704(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c3b61:
	mov -1624(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c3b64:
	mov -1616(%RBP),%RSP
	add $-1776, %RSP
	mov -1608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3b76
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3b75
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3b78
uuid_00000000000c3b76:
#call function parse-toplevel : Arrow<List<Token>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	mov %RBX, %RBP
	call parse_SB_toplevel_CL_ArrowASTListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	push %RBP
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq $0
	push %RBP
	mov -2000(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3b6b
	jmp uuid_00000000000c3b6d
uuid_00000000000c3b6b:
	push %RBP
	mov -1992(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3b68
	jmp uuid_00000000000c3b6a
uuid_00000000000c3b68:
	push %RBP
	mov -1984(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2176(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3b65
	jmp uuid_00000000000c3b67
uuid_00000000000c3b65:
	movb $1, -2008(%rbp)
uuid_00000000000c3b67:
	mov -2104(%RBP),%RSP
	add $-2176, %RSP
uuid_00000000000c3b6a:
	mov -2024(%RBP),%RSP
	add $-2176, %RSP
uuid_00000000000c3b6d:
	mov -2016(%RBP),%RSP
	add $-2176, %RSP
	mov -2008(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3b72
	push %RBP
	jmp uuid_00000000000c3b6f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3b6e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3b71
uuid_00000000000c3b6f:
uuid_00000000000c3b71:
	mov -2184(%RBP),%RSP
	add $-2184, %RSP
	jmp uuid_00000000000c3b74
uuid_00000000000c3b72:
	movq -2096(%rbp), %r15
	movq %r15, -1848(%rbp)
	movq -2088(%rbp), %r15
	movq %r15, -1840(%rbp)
	movq -2080(%rbp), %r15
	movq %r15, -1832(%rbp)
	movq -2072(%rbp), %r15
	movq %r15, -1824(%rbp)
	movq -2064(%rbp), %r15
	movq %r15, -1816(%rbp)
	movq -2056(%rbp), %r15
	movq %r15, -1808(%rbp)
	movq -2048(%rbp), %r15
	movq %r15, -1800(%rbp)
	movq -2040(%rbp), %r15
	movq %r15, -1792(%rbp)
	movq -2032(%rbp), %r15
	movq %r15, -1784(%rbp)
uuid_00000000000c3b74:
	mov -1928(%RBP),%RSP
	add $-2176, %RSP
#call function close : Arrow<MacroList,Array<MacroList,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $preprocess_SB_macros_CL_MacroListMacroListCaseNumber1, %r15
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_MacroListMacroList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq $0
	pushq $0
	mov $preprocess_SB_macros_CL_MacroListMacroListCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	movq -1696(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1688(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1680(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1672(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1664(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1656(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1648(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1640(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1632(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c3b78:
	mov -1448(%RBP),%RSP
	add $-2176, %RSP
uuid_00000000000c3b7c:
	mov -960(%RBP),%RSP
	add $-2176, %RSP
uuid_00000000000c3d6d:
	mov -520(%RBP),%RSP
	add $-2176, %RSP
	jmp uuid_00000000000c3d70
uuid_00000000000c3d6e:
	movq -400(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -392(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c3d70:
	mov -232(%RBP),%RSP
	add $-512, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c3d71
uuid_00000000000c3d73:
	subq $72, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
parse_SB_type_SB_comma_SB_sep_CL_ArrowListTypeString:
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000c3d8c:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c3d8d
	jmp uuid_00000000000c3d8e
uuid_00000000000c3d8d:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -96(%rbp)
	mov -112(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3d83
	push %RBP
	pushq -96(%rbp)
	mov -128(%RBP), %AL
	mov $62, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3d80
	push %RBP
	pushq -96(%rbp)
	mov -144(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3d7d
	push %RBP
	pushq -96(%rbp)
	mov -160(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3d7a
	push %RBP
	jmp uuid_00000000000c3d77
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3d76
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3d79
uuid_00000000000c3d77:
uuid_00000000000c3d79:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000c3d7c
uuid_00000000000c3d7a:
	mov -48(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -48(%rbp)
uuid_00000000000c3d7c:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000c3d7f
uuid_00000000000c3d7d:
	mov -48(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -48(%rbp)
uuid_00000000000c3d7f:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c3d82
uuid_00000000000c3d80:
	mov -48(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -48(%rbp)
uuid_00000000000c3d82:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000c3d85
uuid_00000000000c3d83:
	mov -48(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -48(%rbp)
uuid_00000000000c3d85:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	push %RBP
	mov -48(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3d89
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	jmp uuid_00000000000c3d8b
uuid_00000000000c3d89:
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $44, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3d86
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	jmp uuid_00000000000c3d88
uuid_00000000000c3d86:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	pushq $0
	pushq $0
	pushq $3
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c3d88:
	mov -128(%RBP),%RSP
	add $-128, %RSP
uuid_00000000000c3d8b:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c3d8c
uuid_00000000000c3d8e:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	subq $40, %rsp
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
parse_SB_type_SB_single_CL_ArrowTypeString:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $3
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1139
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
uuid_00000000000c3ded:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c3dee
	jmp uuid_00000000000c3def
uuid_00000000000c3dee:
	push %RBP
	mov -24(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3dea
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -96(%rbp)
	mov -112(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3dc0
	push %RBP
	pushq -96(%rbp)
	mov -128(%RBP), %AL
	mov $62, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3dbd
	push %RBP
	pushq -96(%rbp)
	mov -144(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3dba
	push %RBP
	pushq -96(%rbp)
	mov -160(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3db7
	push %RBP
	jmp uuid_00000000000c3db4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3db3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3db6
uuid_00000000000c3db4:
uuid_00000000000c3db6:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000c3db9
uuid_00000000000c3db7:
	mov -24(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000c3db9:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000c3dbc
uuid_00000000000c3dba:
	mov -24(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000c3dbc:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c3dbf
uuid_00000000000c3dbd:
	mov -24(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000c3dbf:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000c3dc2
uuid_00000000000c3dc0:
	mov -24(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000c3dc2:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	push %RBP
	mov -24(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3de7
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	jmp uuid_00000000000c3de9
uuid_00000000000c3de7:
	pushq -32(%rbp)
	push %RBP
	pushq -128(%rbp)
	mov -144(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3de4
	push %RBP
	pushq -128(%rbp)
	mov -160(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3de1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3de0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3de3
uuid_00000000000c3de1:
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -216(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3dcc
	jmp uuid_00000000000c3dce
uuid_00000000000c3dcc:
	push %RBP
	mov -208(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3dc9
	jmp uuid_00000000000c3dcb
uuid_00000000000c3dc9:
	push %RBP
	mov -200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3dc6
	jmp uuid_00000000000c3dc8
uuid_00000000000c3dc6:
	movb $1, -224(%rbp)
uuid_00000000000c3dc8:
	mov -288(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000c3dcb:
	mov -240(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000c3dce:
	mov -232(%RBP),%RSP
	add $-296, %RSP
	mov -224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3ddd
	push %RBP
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3dd2
	jmp uuid_00000000000c3dd4
uuid_00000000000c3dd2:
	push %RBP
	mov -320(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3dcf
	jmp uuid_00000000000c3dd1
uuid_00000000000c3dcf:
	movb $1, -336(%rbp)
uuid_00000000000c3dd1:
	mov -352(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000c3dd4:
	mov -344(%RBP),%RSP
	add $-360, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3dda
	push %RBP
	jmp uuid_00000000000c3dd7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3dd6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3dd9
uuid_00000000000c3dd7:
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3dd5
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c3dd9:
	mov -368(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000c3ddc
uuid_00000000000c3dda:
	pushq -360(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type-comma-sep : Arrow<String,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_SB_comma_SB_sep_CL_ArrowListTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c3ddc:
	mov -304(%RBP),%RSP
	add $-360, %RSP
	jmp uuid_00000000000c3ddf
uuid_00000000000c3ddd:
	pushq -296(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type-comma-sep : Arrow<String,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_SB_comma_SB_sep_CL_ArrowListTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c3ddf:
	mov -192(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000c3de3:
	mov -152(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000c3de6
uuid_00000000000c3de4:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3dc3
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c12d1
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	jmp uuid_00000000000c3dc5
uuid_00000000000c3dc3:
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c12d1
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c3dc5:
	mov -152(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000c3de6:
	mov -136(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000c3de9:
	mov -120(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000c3dec
uuid_00000000000c3dea:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -96(%rbp)
	mov -112(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3db0
	push %RBP
	pushq -96(%rbp)
	mov -128(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3dad
	push %RBP
	pushq -96(%rbp)
	jmp uuid_00000000000c3daa
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3da9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3dac
uuid_00000000000c3daa:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c3dac:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c3daf
uuid_00000000000c3dad:
	movb $60, -32(%rbp)
	movq $1, -24(%rbp)
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3da6
	jmp uuid_00000000000c3da8
uuid_00000000000c3da6:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $uuid_00000000000c0eb9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3da3
	push %RBP
#call function is-variable : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_variable_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3da0
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<List<Type>+List<Type>+CaseNumber<1>,Array<List<Type>+List<Type>+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeCaseNumber1ListTypeListTypeCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	jmp uuid_00000000000c3da2
uuid_00000000000c3da0:
	pushq $0
	pushq -144(%rbp)
	pushq $2
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c3da2:
	mov -160(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000c3da5
uuid_00000000000c3da3:
	pushq $0
	pushq $0
	pushq $3
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c3da5:
	mov -152(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000c3da8:
	mov -136(%RBP),%RSP
	add $-152, %RSP
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c3daf:
	mov -120(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000c3db2
uuid_00000000000c3db0:
	movb $91, -32(%rbp)
	movq $1, -24(%rbp)
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3d99
	jmp uuid_00000000000c3d9b
uuid_00000000000c3d99:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000c0eb9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3d96
	push %RBP
#call function is-variable : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	mov %RBX, %RBP
	call is_SB_variable_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3d93
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<List<Type>+List<Type>+CaseNumber<1>,Array<List<Type>+List<Type>+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeCaseNumber1ListTypeListTypeCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	jmp uuid_00000000000c3d95
uuid_00000000000c3d93:
	pushq $0
	pushq -128(%rbp)
	pushq $2
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c3d95:
	mov -144(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c3d98
uuid_00000000000c3d96:
	pushq $0
	pushq $0
	pushq $3
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c3d98:
	mov -136(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000c3d9b:
	mov -120(%RBP),%RSP
	add $-136, %RSP
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c3db2:
	mov -104(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000c3dec:
	mov -88(%RBP),%RSP
	add $-136, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c3ded
uuid_00000000000c3def:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3dfa
	jmp uuid_00000000000c3dfc
uuid_00000000000c3dfa:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq $uuid_00000000000c0eb9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3df7
	push %RBP
#call function is-variable : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	mov %RBX, %RBP
	call is_SB_variable_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3df4
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<List<Type>+List<Type>+CaseNumber<1>,Array<List<Type>+List<Type>+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeCaseNumber1ListTypeListTypeCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	jmp uuid_00000000000c3df6
uuid_00000000000c3df4:
	pushq $0
	pushq -96(%rbp)
	pushq $2
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c3df6:
	mov -112(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000c3df9
uuid_00000000000c3df7:
	pushq $0
	pushq $0
	pushq $3
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c3df9:
	mov -104(%RBP),%RSP
	add $-104, %RSP
uuid_00000000000c3dfc:
	mov -88(%RBP),%RSP
	add $-104, %RSP
	subq $24, %rsp
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
parse_SB_type_CL_ArrowTypeString:
	pushq $0
	push %RBP
#call function has-suffix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq $uuid_00000000000c10a1
	mov %RBX, %RBP
	call has_SB_suffix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3dfd
	jmp uuid_00000000000c3dff
uuid_00000000000c3dfd:
#call function remove-suffix : Arrow<Cons<String,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq $uuid_00000000000c10a1
	mov %RBX, %RBP
	call remove_SB_suffix_CL_ArrowStringConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -8(%rbp)
	movb $1, -24(%rbp)
uuid_00000000000c3dff:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	pushq $0
	pushq $0
	pushq $0
	pushq $3
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1139
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
uuid_00000000000c3e26:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c3e27
	jmp uuid_00000000000c3e28
uuid_00000000000c3e27:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -96(%rbp)
	mov -112(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3e0d
	push %RBP
	pushq -96(%rbp)
	mov -128(%RBP), %AL
	mov $62, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3e0a
	push %RBP
	pushq -96(%rbp)
	mov -144(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3e07
	push %RBP
	pushq -96(%rbp)
	mov -160(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3e04
	push %RBP
	jmp uuid_00000000000c3e01
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3e00
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3e03
uuid_00000000000c3e01:
uuid_00000000000c3e03:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000c3e06
uuid_00000000000c3e04:
	mov -40(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c3e06:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000c3e09
uuid_00000000000c3e07:
	mov -40(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c3e09:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c3e0c
uuid_00000000000c3e0a:
	mov -40(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c3e0c:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000c3e0f
uuid_00000000000c3e0d:
	mov -40(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c3e0f:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	push %RBP
	mov -40(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3e23
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	jmp uuid_00000000000c3e25
uuid_00000000000c3e23:
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $43, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3e20
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	jmp uuid_00000000000c3e22
uuid_00000000000c3e20:
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3e16
	jmp uuid_00000000000c3e18
uuid_00000000000c3e16:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3e13
	jmp uuid_00000000000c3e15
uuid_00000000000c3e13:
	push %RBP
	mov -168(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq $uuid_00000000000c1139
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3e10
	jmp uuid_00000000000c3e12
uuid_00000000000c3e10:
	movb $1, -192(%rbp)
uuid_00000000000c3e12:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c3e15:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c3e18:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3e1d
	push %RBP
	jmp uuid_00000000000c3e1a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3e19
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3e1c
uuid_00000000000c3e1a:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type-single : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_SB_single_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
uuid_00000000000c3e1c:
	mov -272(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000c3e1f
uuid_00000000000c3e1d:
#call function parse-type-single : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_SB_single_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	movq -288(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -72(%rbp)
uuid_00000000000c3e1f:
	mov -160(%RBP),%RSP
	add $-288, %RSP
	pushq $0
	pushq $0
	pushq $3
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
uuid_00000000000c3e22:
	mov -128(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c3e25:
	mov -120(%RBP),%RSP
	add $-288, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c3e26
uuid_00000000000c3e28:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3e39
	jmp uuid_00000000000c3e3b
uuid_00000000000c3e39:
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -152(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3e2f
	jmp uuid_00000000000c3e31
uuid_00000000000c3e2f:
	push %RBP
	mov -144(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -216(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3e2c
	jmp uuid_00000000000c3e2e
uuid_00000000000c3e2c:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq $uuid_00000000000c1139
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3e29
	jmp uuid_00000000000c3e2b
uuid_00000000000c3e29:
	movb $1, -160(%rbp)
uuid_00000000000c3e2b:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c3e2e:
	mov -176(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c3e31:
	mov -168(%RBP),%RSP
	add $-232, %RSP
	mov -160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3e36
	push %RBP
	jmp uuid_00000000000c3e33
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3e32
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3e35
uuid_00000000000c3e33:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type-single : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_SB_single_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
uuid_00000000000c3e35:
	mov -240(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c3e38
uuid_00000000000c3e36:
#call function parse-type-single : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_SB_single_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	movq -256(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -248(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -240(%rbp), %r15
	movq %r15, -72(%rbp)
uuid_00000000000c3e38:
	mov -128(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000c3e3b:
	mov -96(%RBP),%RSP
	add $-256, %RSP
	push %RBP
	mov -24(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3e40
	jmp uuid_00000000000c3e42
uuid_00000000000c3e40:
	pushq $uuid_00000000000c10a1
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
uuid_00000000000c3e42:
	mov -264(%RBP),%RSP
	add $-264, %RSP
	subq $24, %rsp
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
parse_SB_unexpect_CL_ArrowNilConsListTokenString:
#call function fail : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call fail_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
parse_CL_ArrowNilNil:
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
#call function parse-toplevel : Arrow<List<Token>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call parse_SB_toplevel_CL_ArrowASTListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function + : Arrow<Cons<AST,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call _AD__CL_ArrowASTConsASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	mov %rbp, %rsp
	sub $8, %rsp
	ret
remove_SB_parens_CL_ArrowListTokenListToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3e5d
	jmp uuid_00000000000c3e5f
uuid_00000000000c3e5d:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3e5a
	jmp uuid_00000000000c3e5c
uuid_00000000000c3e5a:
	push %RBP
	pushq -168(%RBP)
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq $0
	push %RBP
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3e54
	jmp uuid_00000000000c3e56
uuid_00000000000c3e54:
	push %RBP
	jmp uuid_00000000000c3e51
	jmp uuid_00000000000c3e53
uuid_00000000000c3e51:
	push %RBP
	jmp uuid_00000000000c3e4e
	jmp uuid_00000000000c3e50
uuid_00000000000c3e4e:
	push %RBP
	mov -344(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -440(%rbp)
	pushq $uuid_00000000000c0d2d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3e4b
	jmp uuid_00000000000c3e4d
uuid_00000000000c3e4b:
	movb $1, -400(%rbp)
uuid_00000000000c3e4d:
	mov -432(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c3e50:
	mov -424(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c3e53:
	mov -416(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c3e56:
	mov -408(%RBP),%RSP
	add $-440, %RSP
	mov -400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3e57
	jmp uuid_00000000000c3e59
uuid_00000000000c3e57:
	movb $1, -240(%rbp)
uuid_00000000000c3e59:
	mov -336(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c3e5c:
	mov -256(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c3e5f:
	mov -248(%RBP),%RSP
	add $-440, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3e8b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3e8a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3e8d
uuid_00000000000c3e8b:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000c3e87:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3e88
	jmp uuid_00000000000c3e89
uuid_00000000000c3e88:
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	push %RBP
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq $0
	push %RBP
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3e74
	jmp uuid_00000000000c3e76
uuid_00000000000c3e74:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3e71
	jmp uuid_00000000000c3e73
uuid_00000000000c3e71:
	push %RBP
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq $0
	push %RBP
	mov -824(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3e6b
	jmp uuid_00000000000c3e6d
uuid_00000000000c3e6b:
	push %RBP
	jmp uuid_00000000000c3e68
	jmp uuid_00000000000c3e6a
uuid_00000000000c3e68:
	push %RBP
	jmp uuid_00000000000c3e65
	jmp uuid_00000000000c3e67
uuid_00000000000c3e65:
	push %RBP
	mov -776(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -872(%rbp)
	pushq $uuid_00000000000c0d2f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3e62
	jmp uuid_00000000000c3e64
uuid_00000000000c3e62:
	movb $1, -832(%rbp)
uuid_00000000000c3e64:
	mov -864(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c3e67:
	mov -856(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c3e6a:
	mov -848(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c3e6d:
	mov -840(%RBP),%RSP
	add $-872, %RSP
	mov -832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3e6e
	jmp uuid_00000000000c3e70
uuid_00000000000c3e6e:
	movb $1, -672(%rbp)
uuid_00000000000c3e70:
	mov -768(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c3e73:
	mov -688(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c3e76:
	mov -680(%RBP),%RSP
	add $-872, %RSP
	mov -672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3e84
	push %RBP
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq $0
	push %RBP
	mov -952(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3e7d
	jmp uuid_00000000000c3e7f
uuid_00000000000c3e7d:
	push %RBP
	mov -944(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3e7a
	jmp uuid_00000000000c3e7c
uuid_00000000000c3e7a:
	push %RBP
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	jmp uuid_00000000000c3e77
	jmp uuid_00000000000c3e79
uuid_00000000000c3e77:
	movb $1, -960(%rbp)
uuid_00000000000c3e79:
	mov -1056(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c3e7c:
	mov -976(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c3e7f:
	mov -968(%RBP),%RSP
	add $-1112, %RSP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3e81
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3e80
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3e83
uuid_00000000000c3e81:
#call function cons : Arrow<Cons<Token,List<Token>>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTokenConsListTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	movq -1048(%rbp), %r15
	movq %r15, -328(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -264(%rbp)
uuid_00000000000c3e83:
	mov -880(%RBP),%RSP
	add $-1112, %RSP
	jmp uuid_00000000000c3e86
uuid_00000000000c3e84:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
uuid_00000000000c3e86:
	mov -592(%RBP),%RSP
	add $-872, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c3e87
uuid_00000000000c3e89:
#call function reverse : Arrow<List<Token>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call reverse_CL_ArrowListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c3e8d:
	mov -160(%RBP),%RSP
	add $-512, %RSP
	subq $72, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
take_SB_one_SB_expr_CL_ArrowTupleListTokenListTokenListToken:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	pushq $0
uuid_00000000000c3ede:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3edf
	jmp uuid_00000000000c3ee0
uuid_00000000000c3edf:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3ea6
	jmp uuid_00000000000c3ea8
uuid_00000000000c3ea6:
	push %RBP
	mov -376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3ea3
	jmp uuid_00000000000c3ea5
uuid_00000000000c3ea3:
	push %RBP
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3e9d
	jmp uuid_00000000000c3e9f
uuid_00000000000c3e9d:
	push %RBP
	jmp uuid_00000000000c3e9a
	jmp uuid_00000000000c3e9c
uuid_00000000000c3e9a:
	push %RBP
	jmp uuid_00000000000c3e97
	jmp uuid_00000000000c3e99
uuid_00000000000c3e97:
	push %RBP
	mov -496(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -592(%rbp)
	pushq $uuid_00000000000c0f18
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3e94
	jmp uuid_00000000000c3e96
uuid_00000000000c3e94:
	movb $1, -552(%rbp)
uuid_00000000000c3e96:
	mov -584(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c3e99:
	mov -576(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c3e9c:
	mov -568(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c3e9f:
	mov -560(%RBP),%RSP
	add $-592, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3ea0
	jmp uuid_00000000000c3ea2
uuid_00000000000c3ea0:
	movb $1, -392(%rbp)
uuid_00000000000c3ea2:
	mov -488(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c3ea5:
	mov -408(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c3ea8:
	mov -400(%RBP),%RSP
	add $-592, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3edb
	push %RBP
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3eb2
	jmp uuid_00000000000c3eb4
uuid_00000000000c3eb2:
	push %RBP
	mov -664(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3eaf
	jmp uuid_00000000000c3eb1
uuid_00000000000c3eaf:
	push %RBP
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	jmp uuid_00000000000c3eac
	jmp uuid_00000000000c3eae
uuid_00000000000c3eac:
	movb $1, -680(%rbp)
uuid_00000000000c3eae:
	mov -776(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c3eb1:
	mov -696(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c3eb4:
	mov -688(%RBP),%RSP
	add $-832, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3ed8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3ed7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3eda
uuid_00000000000c3ed8:
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	push %RBP
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq $0
	push %RBP
	mov -952(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3ebe
	jmp uuid_00000000000c3ec0
uuid_00000000000c3ebe:
	push %RBP
	jmp uuid_00000000000c3ebb
	jmp uuid_00000000000c3ebd
uuid_00000000000c3ebb:
	push %RBP
	jmp uuid_00000000000c3eb8
	jmp uuid_00000000000c3eba
uuid_00000000000c3eb8:
	push %RBP
	mov -904(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1000(%rbp)
	pushq $uuid_00000000000c0d2d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3eb5
	jmp uuid_00000000000c3eb7
uuid_00000000000c3eb5:
	movb $1, -960(%rbp)
uuid_00000000000c3eb7:
	mov -992(%RBP),%RSP
	add $-1000, %RSP
uuid_00000000000c3eba:
	mov -984(%RBP),%RSP
	add $-1000, %RSP
uuid_00000000000c3ebd:
	mov -976(%RBP),%RSP
	add $-1000, %RSP
uuid_00000000000c3ec0:
	mov -968(%RBP),%RSP
	add $-1000, %RSP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3ed4
	push %RBP
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq $0
	push %RBP
	mov -1064(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3eca
	jmp uuid_00000000000c3ecc
uuid_00000000000c3eca:
	push %RBP
	jmp uuid_00000000000c3ec7
	jmp uuid_00000000000c3ec9
uuid_00000000000c3ec7:
	push %RBP
	jmp uuid_00000000000c3ec4
	jmp uuid_00000000000c3ec6
uuid_00000000000c3ec4:
	push %RBP
	mov -1016(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1112(%rbp)
	pushq $uuid_00000000000c0d2f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3ec1
	jmp uuid_00000000000c3ec3
uuid_00000000000c3ec1:
	movb $1, -1072(%rbp)
uuid_00000000000c3ec3:
	mov -1104(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c3ec6:
	mov -1096(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c3ec9:
	mov -1088(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c3ecc:
	mov -1080(%RBP),%RSP
	add $-1112, %RSP
	mov -1072(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3ed1
	push %RBP
	jmp uuid_00000000000c3ece
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3ecd
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3ed0
uuid_00000000000c3ece:
uuid_00000000000c3ed0:
	mov -1120(%RBP),%RSP
	add $-1120, %RSP
	jmp uuid_00000000000c3ed3
uuid_00000000000c3ed1:
	mov -232(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -232(%rbp)
uuid_00000000000c3ed3:
	mov -1008(%RBP),%RSP
	add $-1112, %RSP
	jmp uuid_00000000000c3ed6
uuid_00000000000c3ed4:
	mov -232(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -232(%rbp)
uuid_00000000000c3ed6:
	mov -896(%RBP),%RSP
	add $-1000, %RSP
#call function cons : Arrow<Cons<Token,List<Token>>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTokenConsListTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -768(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -768(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c3eda:
	mov -600(%RBP),%RSP
	add $-1000, %RSP
	jmp uuid_00000000000c3edd
uuid_00000000000c3edb:
	push %RBP
	mov -232(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3ea9
#call function cons : Arrow<Cons<Token,List<Token>>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function head : Arrow<List<Token>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call head_CL_ArrowTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTokenConsListTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -480(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c3eab
uuid_00000000000c3ea9:
	movq -72(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -64(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -56(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -48(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -40(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -32(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -24(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -160(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c3eab:
	mov -600(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000c3edd:
	mov -312(%RBP),%RSP
	add $-600, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c3ede
uuid_00000000000c3ee0:
#call function remove-parens : Arrow<List<Token>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function reverse : Arrow<List<Token>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call reverse_CL_ArrowListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call remove_SB_parens_CL_ArrowListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	subq $152, %rsp
	pushq 152(%rsp)
	pushq 168(%rsp)
	pushq 184(%rsp)
	pushq 200(%rsp)
	pushq 216(%rsp)
	pushq 232(%rsp)
	pushq 248(%rsp)
	pushq 264(%rsp)
	pushq 280(%rsp)
	pushq 296(%rsp)
	pushq 312(%rsp)
	pushq 328(%rsp)
	pushq 344(%rsp)
	pushq 360(%rsp)
	pushq 376(%rsp)
	pushq 392(%rsp)
	pushq 408(%rsp)
	pushq 424(%rsp)
	pushq 440(%rsp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
compile_SB_constructor_CL_ArrowFragmentConsI64ConsASTConsTypeConsTypeConsStringFContext:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	subq %R14,%RAX
	mov %RAX, %RAX
	mov $8, %R14
	subq %R14,%RAX
	push %RAX
#call function compile-push-rvalue : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,U64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov -336(%RBP), %RAX
	mov -352(%RBP), %R14
	subq %R14,%RAX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call compile_SB_push_SB_rvalue_CL_ArrowFragmentConsU64ConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1391
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1393
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1394
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1392
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq $uuid_00000000000c3ee1
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
	popq -648(%RBP)
	popq -640(%RBP)
	popq -632(%RBP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
#call function cc-blob : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,I64>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq $uuid_00000000000c1395
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -336(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsASTConsI64ConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -880(%RBP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -880(%RBP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -336(%RBP), %RAX
	subq %R14,%RAX
	push %RAX
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -880(%RBP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	subq $152, %rsp
	pushq -880(%rbp)
	pushq -872(%rbp)
	pushq -864(%rbp)
	pushq -856(%rbp)
	pushq -848(%rbp)
	pushq -840(%rbp)
	pushq -832(%rbp)
	pushq -824(%rbp)
	pushq -816(%rbp)
	pushq -808(%rbp)
	pushq -800(%rbp)
	pushq -792(%rbp)
	pushq -784(%rbp)
	pushq -776(%rbp)
	pushq -768(%rbp)
	pushq -760(%rbp)
	pushq -752(%rbp)
	pushq -744(%rbp)
	pushq -736(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $344, %rsp
	ret
compile_SB_declare_SB_cstring_CL_ArrowFragmentString:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleModeCaseNumber1, %r15
	pushq 0(%r15)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3efd
	mov $cstring_SB_cache_CL_StringStringListStringStringListCaseNumber1, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $uuid_00000000000c0dfc
uuid_00000000000c3ef5:
#call function non-zero : Arrow<StringStringList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64StringStringList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3ef6
	jmp uuid_00000000000c3ef7
uuid_00000000000c3ef6:
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq $0
	push %RBP
	mov -288(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3eeb
	jmp uuid_00000000000c3eed
uuid_00000000000c3eeb:
	push %RBP
	mov -280(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3ee8
	jmp uuid_00000000000c3eea
uuid_00000000000c3ee8:
	push %RBP
	mov -272(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3ee5
	jmp uuid_00000000000c3ee7
uuid_00000000000c3ee5:
	push %RBP
	mov -264(%RBP), %RAX
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3ee2
	jmp uuid_00000000000c3ee4
uuid_00000000000c3ee2:
	movb $1, -296(%rbp)
uuid_00000000000c3ee4:
	mov -344(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c3ee7:
	mov -328(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c3eea:
	mov -312(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c3eed:
	mov -304(%RBP),%RSP
	add $-376, %RSP
	mov -296(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3ef2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3ef1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3ef4
uuid_00000000000c3ef2:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	pushq -8(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3eee
	movq -376(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -184(%rbp)
	jmp uuid_00000000000c3ef0
uuid_00000000000c3eee:
	movq -320(%rbp), %r15
	movq %r15, -216(%rbp)
	mov -320(%rbp), %r15
	mov %r15, -216(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c3ef0:
	mov -384(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c3ef4:
	mov -256(%RBP),%RSP
	add $-384, %RSP
	add $32, %rsp
	add $32, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %rsp
	add $32, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c3ef5
uuid_00000000000c3ef7:
	push %RBP
	mov -216(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c3efa
#call function uuid : Arrow<Nil,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call uuid_CL_ArrowStringNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -216(%rbp)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -216(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c3ef8
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function escape-literal : Arrow<String,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call escape_SB_literal_CL_ArrowStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c3ef9
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<StringStringList,Array<StringStringList,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $cstring_SB_cache_CL_StringStringListStringStringListCaseNumber1, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_StringStringListStringStringList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -216(%rbp)
	pushq $0
	mov $cstring_SB_cache_CL_StringStringListStringStringListCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	jmp uuid_00000000000c3efc
uuid_00000000000c3efa:
uuid_00000000000c3efc:
	mov -224(%RBP),%RSP
	add $-224, %RSP
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $uuid_00000000000c3169
	pushq $0
	pushq -216(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	jmp uuid_00000000000c3eff
uuid_00000000000c3efd:
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $uuid_00000000000c3169
	pushq $0
	pushq -8(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c3eff:
	mov -176(%RBP),%RSP
	add $-176, %RSP
	subq $152, %rsp
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
compile_SB_destructure_SB_args_CL_ArrowFContextConsI64ConsASTConsFContextType:
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -464(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3f30
	jmp uuid_00000000000c3f32
uuid_00000000000c3f30:
	push %RBP
	mov -456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3f27
	jmp uuid_00000000000c3f29
uuid_00000000000c3f27:
	push %RBP
	mov -552(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -656(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3f15
	jmp uuid_00000000000c3f17
uuid_00000000000c3f15:
	push %RBP
	mov -648(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3f03
	jmp uuid_00000000000c3f05
uuid_00000000000c3f03:
	push %RBP
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	jmp uuid_00000000000c3f00
	jmp uuid_00000000000c3f02
uuid_00000000000c3f00:
	movb $1, -760(%rbp)
uuid_00000000000c3f02:
	mov -776(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c3f05:
	mov -768(%RBP),%RSP
	add $-800, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3f12
	jmp uuid_00000000000c3f14
uuid_00000000000c3f12:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3f0c
	jmp uuid_00000000000c3f0e
uuid_00000000000c3f0c:
	push %RBP
	jmp uuid_00000000000c3f09
	jmp uuid_00000000000c3f0b
uuid_00000000000c3f09:
	push %RBP
	mov -816(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3f06
	jmp uuid_00000000000c3f08
uuid_00000000000c3f06:
	movb $1, -888(%rbp)
uuid_00000000000c3f08:
	mov -912(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000c3f0b:
	mov -904(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000c3f0e:
	mov -896(%RBP),%RSP
	add $-920, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3f0f
	jmp uuid_00000000000c3f11
uuid_00000000000c3f0f:
	movb $1, -664(%rbp)
uuid_00000000000c3f11:
	mov -808(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000c3f14:
	mov -680(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000c3f17:
	mov -672(%RBP),%RSP
	add $-920, %RSP
	mov -664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3f24
	jmp uuid_00000000000c3f26
uuid_00000000000c3f24:
	push %RBP
	mov -544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1000(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3f1e
	jmp uuid_00000000000c3f20
uuid_00000000000c3f1e:
	push %RBP
	jmp uuid_00000000000c3f1b
	jmp uuid_00000000000c3f1d
uuid_00000000000c3f1b:
	push %RBP
	mov -936(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3f18
	jmp uuid_00000000000c3f1a
uuid_00000000000c3f18:
	movb $1, -1008(%rbp)
uuid_00000000000c3f1a:
	mov -1032(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c3f1d:
	mov -1024(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c3f20:
	mov -1016(%RBP),%RSP
	add $-1040, %RSP
	mov -1008(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3f21
	jmp uuid_00000000000c3f23
uuid_00000000000c3f21:
	movb $1, -568(%rbp)
uuid_00000000000c3f23:
	mov -928(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c3f26:
	mov -584(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c3f29:
	mov -576(%RBP),%RSP
	add $-1040, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3f2d
	jmp uuid_00000000000c3f2f
uuid_00000000000c3f2d:
	push %RBP
	mov -448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3f2a
	jmp uuid_00000000000c3f2c
uuid_00000000000c3f2a:
	movb $1, -472(%rbp)
uuid_00000000000c3f2c:
	mov -1048(%RBP),%RSP
	add $-1120, %RSP
uuid_00000000000c3f2f:
	mov -488(%RBP),%RSP
	add $-1120, %RSP
uuid_00000000000c3f32:
	mov -480(%RBP),%RSP
	add $-1120, %RSP
	mov -472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3f67
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -1200(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3f5d
	jmp uuid_00000000000c3f5f
uuid_00000000000c3f5d:
	push %RBP
	mov -1192(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1296(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3f4b
	jmp uuid_00000000000c3f4d
uuid_00000000000c3f4b:
	push %RBP
	mov -1288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1392(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3f39
	jmp uuid_00000000000c3f3b
uuid_00000000000c3f39:
	push %RBP
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	jmp uuid_00000000000c3f36
	jmp uuid_00000000000c3f38
uuid_00000000000c3f36:
	movb $1, -1400(%rbp)
uuid_00000000000c3f38:
	mov -1416(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000c3f3b:
	mov -1408(%RBP),%RSP
	add $-1440, %RSP
	mov -1400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3f48
	jmp uuid_00000000000c3f4a
uuid_00000000000c3f48:
	push %RBP
	mov -1280(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1520(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3f42
	jmp uuid_00000000000c3f44
uuid_00000000000c3f42:
	push %RBP
	jmp uuid_00000000000c3f3f
	jmp uuid_00000000000c3f41
uuid_00000000000c3f3f:
	push %RBP
	mov -1456(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3f3c
	jmp uuid_00000000000c3f3e
uuid_00000000000c3f3c:
	movb $1, -1528(%rbp)
uuid_00000000000c3f3e:
	mov -1552(%RBP),%RSP
	add $-1560, %RSP
uuid_00000000000c3f41:
	mov -1544(%RBP),%RSP
	add $-1560, %RSP
uuid_00000000000c3f44:
	mov -1536(%RBP),%RSP
	add $-1560, %RSP
	mov -1528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3f45
	jmp uuid_00000000000c3f47
uuid_00000000000c3f45:
	movb $1, -1304(%rbp)
uuid_00000000000c3f47:
	mov -1448(%RBP),%RSP
	add $-1560, %RSP
uuid_00000000000c3f4a:
	mov -1320(%RBP),%RSP
	add $-1560, %RSP
uuid_00000000000c3f4d:
	mov -1312(%RBP),%RSP
	add $-1560, %RSP
	mov -1304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3f5a
	jmp uuid_00000000000c3f5c
uuid_00000000000c3f5a:
	push %RBP
	mov -1184(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1640(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3f54
	jmp uuid_00000000000c3f56
uuid_00000000000c3f54:
	push %RBP
	jmp uuid_00000000000c3f51
	jmp uuid_00000000000c3f53
uuid_00000000000c3f51:
	push %RBP
	mov -1576(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3f4e
	jmp uuid_00000000000c3f50
uuid_00000000000c3f4e:
	movb $1, -1648(%rbp)
uuid_00000000000c3f50:
	mov -1672(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000c3f53:
	mov -1664(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000c3f56:
	mov -1656(%RBP),%RSP
	add $-1680, %RSP
	mov -1648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3f57
	jmp uuid_00000000000c3f59
uuid_00000000000c3f57:
	movb $1, -1208(%rbp)
uuid_00000000000c3f59:
	mov -1568(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000c3f5c:
	mov -1224(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000c3f5f:
	mov -1216(%RBP),%RSP
	add $-1680, %RSP
	mov -1208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3f64
	push %RBP
	jmp uuid_00000000000c3f61
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3f60
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3f63
uuid_00000000000c3f61:
uuid_00000000000c3f63:
	mov -1688(%RBP),%RSP
	add $-1688, %RSP
	jmp uuid_00000000000c3f66
uuid_00000000000c3f64:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c17da
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -1440(%RBP)
	popq -1432(%RBP)
	popq -1424(%RBP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -304(%RBP), %RAX
	mov -1688(%RBP), %R14
	subq %R14,%RAX
	push %RAX
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -1560(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
#call function fragment::local-variable : Arrow<Cons<I64,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1696(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_local_SB_variable_CL_ArrowFragmentConsTypeI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
uuid_00000000000c3f66:
	mov -1128(%RBP),%RSP
	add $-1696, %RSP
	jmp uuid_00000000000c3f69
uuid_00000000000c3f67:
	push %RBP
#call function is-cons : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call is_SB_cons_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3f33
	jmp uuid_00000000000c3f35
uuid_00000000000c3f33:
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function compile-destructure-args : Arrow<Cons<Cons<Cons<Type,FContext>,AST>,I64>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call compile_SB_destructure_SB_args_CL_ArrowFContextConsI64ConsASTConsFContextType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -304(%RBP), %RAX
	mov -1160(%RBP), %R14
	subq %R14,%RAX
	push %RAX
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c17da
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -1168(%RBP), %RAX
	mov -1176(%RBP), %R14
	subq %R14,%RAX
	push %RAX
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -920(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
#call function fragment::local-variable : Arrow<Cons<I64,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1184(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_local_SB_variable_CL_ArrowFragmentConsTypeI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
uuid_00000000000c3f35:
	mov -1128(%RBP),%RSP
	add $-1184, %RSP
uuid_00000000000c3f69:
	mov -392(%RBP),%RSP
	add $-1184, %RSP
	subq $200, %rsp
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
compile_SB_expr_SB_direct_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c41cc
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	mov -680(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c41c9
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3f70
	jmp uuid_00000000000c3f72
uuid_00000000000c3f70:
	push %RBP
	jmp uuid_00000000000c3f6d
	jmp uuid_00000000000c3f6f
uuid_00000000000c3f6d:
	push %RBP
	mov -696(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3f6a
	jmp uuid_00000000000c3f6c
uuid_00000000000c3f6a:
	movb $1, -768(%rbp)
uuid_00000000000c3f6c:
	mov -792(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c3f6f:
	mov -784(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c3f72:
	mov -776(%RBP),%RSP
	add $-800, %RSP
	mov -768(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c41c6
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3f79
	jmp uuid_00000000000c3f7b
uuid_00000000000c3f79:
	push %RBP
	jmp uuid_00000000000c3f76
	jmp uuid_00000000000c3f78
uuid_00000000000c3f76:
	push %RBP
	mov -816(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3f73
	jmp uuid_00000000000c3f75
uuid_00000000000c3f73:
	movb $1, -888(%rbp)
uuid_00000000000c3f75:
	mov -912(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000c3f78:
	mov -904(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000c3f7b:
	mov -896(%RBP),%RSP
	add $-920, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c41c3
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -1000(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3fe1
	jmp uuid_00000000000c3fe3
uuid_00000000000c3fe1:
	push %RBP
	mov -992(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1096(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3fcf
	jmp uuid_00000000000c3fd1
uuid_00000000000c3fcf:
	push %RBP
	mov -1088(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1192(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3fc6
	jmp uuid_00000000000c3fc8
uuid_00000000000c3fc6:
	push %RBP
	pushq -1168(%RBP)
	pushq -1176(%RBP)
	pushq -1184(%RBP)
	jmp uuid_00000000000c3fc3
	jmp uuid_00000000000c3fc5
uuid_00000000000c3fc3:
	movb $1, -1200(%rbp)
uuid_00000000000c3fc5:
	mov -1216(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000c3fc8:
	mov -1208(%RBP),%RSP
	add $-1240, %RSP
	mov -1200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3fcc
	jmp uuid_00000000000c3fce
uuid_00000000000c3fcc:
	push %RBP
	mov -1080(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c3fc9
	jmp uuid_00000000000c3fcb
uuid_00000000000c3fc9:
	movb $1, -1104(%rbp)
uuid_00000000000c3fcb:
	mov -1248(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000c3fce:
	mov -1120(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000c3fd1:
	mov -1112(%RBP),%RSP
	add $-1320, %RSP
	mov -1104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3fde
	jmp uuid_00000000000c3fe0
uuid_00000000000c3fde:
	push %RBP
	mov -984(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1400(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3fd8
	jmp uuid_00000000000c3fda
uuid_00000000000c3fd8:
	push %RBP
	jmp uuid_00000000000c3fd5
	jmp uuid_00000000000c3fd7
uuid_00000000000c3fd5:
	push %RBP
	mov -1336(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3fd2
	jmp uuid_00000000000c3fd4
uuid_00000000000c3fd2:
	movb $1, -1408(%rbp)
uuid_00000000000c3fd4:
	mov -1432(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000c3fd7:
	mov -1424(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000c3fda:
	mov -1416(%RBP),%RSP
	add $-1440, %RSP
	mov -1408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3fdb
	jmp uuid_00000000000c3fdd
uuid_00000000000c3fdb:
	movb $1, -1008(%rbp)
uuid_00000000000c3fdd:
	mov -1328(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000c3fe0:
	mov -1024(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000c3fe3:
	mov -1016(%RBP),%RSP
	add $-1440, %RSP
	mov -1008(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c41c0
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -1520(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3ffc
	jmp uuid_00000000000c3ffe
uuid_00000000000c3ffc:
	push %RBP
	mov -1512(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1616(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3fea
	jmp uuid_00000000000c3fec
uuid_00000000000c3fea:
	push %RBP
	jmp uuid_00000000000c3fe7
	jmp uuid_00000000000c3fe9
uuid_00000000000c3fe7:
	push %RBP
	mov -1552(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3fe4
	jmp uuid_00000000000c3fe6
uuid_00000000000c3fe4:
	movb $1, -1624(%rbp)
uuid_00000000000c3fe6:
	mov -1648(%RBP),%RSP
	add $-1656, %RSP
uuid_00000000000c3fe9:
	mov -1640(%RBP),%RSP
	add $-1656, %RSP
uuid_00000000000c3fec:
	mov -1632(%RBP),%RSP
	add $-1656, %RSP
	mov -1624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3ff9
	jmp uuid_00000000000c3ffb
uuid_00000000000c3ff9:
	push %RBP
	mov -1504(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1736(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c3ff3
	jmp uuid_00000000000c3ff5
uuid_00000000000c3ff3:
	push %RBP
	jmp uuid_00000000000c3ff0
	jmp uuid_00000000000c3ff2
uuid_00000000000c3ff0:
	push %RBP
	mov -1672(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1776(%rbp)
	pushq $uuid_00000000000c11e2
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3fed
	jmp uuid_00000000000c3fef
uuid_00000000000c3fed:
	movb $1, -1744(%rbp)
uuid_00000000000c3fef:
	mov -1768(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c3ff2:
	mov -1760(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c3ff5:
	mov -1752(%RBP),%RSP
	add $-1776, %RSP
	mov -1744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3ff6
	jmp uuid_00000000000c3ff8
uuid_00000000000c3ff6:
	movb $1, -1528(%rbp)
uuid_00000000000c3ff8:
	mov -1664(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c3ffb:
	mov -1544(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c3ffe:
	mov -1536(%RBP),%RSP
	add $-1776, %RSP
	mov -1528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c41bd
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -1856(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4017
	jmp uuid_00000000000c4019
uuid_00000000000c4017:
	push %RBP
	mov -1848(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1952(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4005
	jmp uuid_00000000000c4007
uuid_00000000000c4005:
	push %RBP
	jmp uuid_00000000000c4002
	jmp uuid_00000000000c4004
uuid_00000000000c4002:
	push %RBP
	mov -1888(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c3fff
	jmp uuid_00000000000c4001
uuid_00000000000c3fff:
	movb $1, -1960(%rbp)
uuid_00000000000c4001:
	mov -1984(%RBP),%RSP
	add $-1992, %RSP
uuid_00000000000c4004:
	mov -1976(%RBP),%RSP
	add $-1992, %RSP
uuid_00000000000c4007:
	mov -1968(%RBP),%RSP
	add $-1992, %RSP
	mov -1960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4014
	jmp uuid_00000000000c4016
uuid_00000000000c4014:
	push %RBP
	mov -1840(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2072(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c400e
	jmp uuid_00000000000c4010
uuid_00000000000c400e:
	push %RBP
	jmp uuid_00000000000c400b
	jmp uuid_00000000000c400d
uuid_00000000000c400b:
	push %RBP
	mov -2008(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2112(%rbp)
	pushq $uuid_00000000000c11ff
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4008
	jmp uuid_00000000000c400a
uuid_00000000000c4008:
	movb $1, -2080(%rbp)
uuid_00000000000c400a:
	mov -2104(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000c400d:
	mov -2096(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000c4010:
	mov -2088(%RBP),%RSP
	add $-2112, %RSP
	mov -2080(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4011
	jmp uuid_00000000000c4013
uuid_00000000000c4011:
	movb $1, -1864(%rbp)
uuid_00000000000c4013:
	mov -2000(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000c4016:
	mov -1880(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000c4019:
	mov -1872(%RBP),%RSP
	add $-2112, %RSP
	mov -1864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c41ba
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -2192(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4029
	jmp uuid_00000000000c402b
uuid_00000000000c4029:
	push %RBP
	mov -2184(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4026
	jmp uuid_00000000000c4028
uuid_00000000000c4026:
	push %RBP
	mov -2176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2368(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4020
	jmp uuid_00000000000c4022
uuid_00000000000c4020:
	push %RBP
	jmp uuid_00000000000c401d
	jmp uuid_00000000000c401f
uuid_00000000000c401d:
	push %RBP
	mov -2304(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2408(%rbp)
	pushq $uuid_00000000000c12ab
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c401a
	jmp uuid_00000000000c401c
uuid_00000000000c401a:
	movb $1, -2376(%rbp)
uuid_00000000000c401c:
	mov -2400(%RBP),%RSP
	add $-2408, %RSP
uuid_00000000000c401f:
	mov -2392(%RBP),%RSP
	add $-2408, %RSP
uuid_00000000000c4022:
	mov -2384(%RBP),%RSP
	add $-2408, %RSP
	mov -2376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4023
	jmp uuid_00000000000c4025
uuid_00000000000c4023:
	movb $1, -2200(%rbp)
uuid_00000000000c4025:
	mov -2296(%RBP),%RSP
	add $-2408, %RSP
uuid_00000000000c4028:
	mov -2216(%RBP),%RSP
	add $-2408, %RSP
uuid_00000000000c402b:
	mov -2208(%RBP),%RSP
	add $-2408, %RSP
	mov -2200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c41b7
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -2488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c403b
	jmp uuid_00000000000c403d
uuid_00000000000c403b:
	push %RBP
	mov -2480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4038
	jmp uuid_00000000000c403a
uuid_00000000000c4038:
	push %RBP
	mov -2472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2664(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4032
	jmp uuid_00000000000c4034
uuid_00000000000c4032:
	push %RBP
	jmp uuid_00000000000c402f
	jmp uuid_00000000000c4031
uuid_00000000000c402f:
	push %RBP
	mov -2600(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2704(%rbp)
	pushq $uuid_00000000000c12be
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c402c
	jmp uuid_00000000000c402e
uuid_00000000000c402c:
	movb $1, -2672(%rbp)
uuid_00000000000c402e:
	mov -2696(%RBP),%RSP
	add $-2704, %RSP
uuid_00000000000c4031:
	mov -2688(%RBP),%RSP
	add $-2704, %RSP
uuid_00000000000c4034:
	mov -2680(%RBP),%RSP
	add $-2704, %RSP
	mov -2672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4035
	jmp uuid_00000000000c4037
uuid_00000000000c4035:
	movb $1, -2496(%rbp)
uuid_00000000000c4037:
	mov -2592(%RBP),%RSP
	add $-2704, %RSP
uuid_00000000000c403a:
	mov -2512(%RBP),%RSP
	add $-2704, %RSP
uuid_00000000000c403d:
	mov -2504(%RBP),%RSP
	add $-2704, %RSP
	mov -2496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c41b4
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -2784(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4093
	jmp uuid_00000000000c4095
uuid_00000000000c4093:
	push %RBP
	mov -2776(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2880(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4081
	jmp uuid_00000000000c4083
uuid_00000000000c4081:
	push %RBP
	pushq -2856(%RBP)
	pushq -2864(%RBP)
	pushq -2872(%RBP)
	jmp uuid_00000000000c407e
	jmp uuid_00000000000c4080
uuid_00000000000c407e:
	movb $1, -2888(%rbp)
uuid_00000000000c4080:
	mov -2904(%RBP),%RSP
	add $-2928, %RSP
uuid_00000000000c4083:
	mov -2896(%RBP),%RSP
	add $-2928, %RSP
	mov -2888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4090
	jmp uuid_00000000000c4092
uuid_00000000000c4090:
	push %RBP
	mov -2768(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3008(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c408a
	jmp uuid_00000000000c408c
uuid_00000000000c408a:
	push %RBP
	jmp uuid_00000000000c4087
	jmp uuid_00000000000c4089
uuid_00000000000c4087:
	push %RBP
	mov -2944(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3048(%rbp)
	pushq $uuid_00000000000c128a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4084
	jmp uuid_00000000000c4086
uuid_00000000000c4084:
	movb $1, -3016(%rbp)
uuid_00000000000c4086:
	mov -3040(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000c4089:
	mov -3032(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000c408c:
	mov -3024(%RBP),%RSP
	add $-3048, %RSP
	mov -3016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c408d
	jmp uuid_00000000000c408f
uuid_00000000000c408d:
	movb $1, -2792(%rbp)
uuid_00000000000c408f:
	mov -2936(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000c4092:
	mov -2808(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000c4095:
	mov -2800(%RBP),%RSP
	add $-3048, %RSP
	mov -2792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c41b1
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -3128(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c40b4
	jmp uuid_00000000000c40b6
uuid_00000000000c40b4:
	push %RBP
	mov -3120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3224(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c40a2
	jmp uuid_00000000000c40a4
uuid_00000000000c40a2:
	push %RBP
	mov -3216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3320(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4099
	jmp uuid_00000000000c409b
uuid_00000000000c4099:
	push %RBP
	pushq -3296(%RBP)
	pushq -3304(%RBP)
	pushq -3312(%RBP)
	jmp uuid_00000000000c4096
	jmp uuid_00000000000c4098
uuid_00000000000c4096:
	movb $1, -3328(%rbp)
uuid_00000000000c4098:
	mov -3344(%RBP),%RSP
	add $-3368, %RSP
uuid_00000000000c409b:
	mov -3336(%RBP),%RSP
	add $-3368, %RSP
	mov -3328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c409f
	jmp uuid_00000000000c40a1
uuid_00000000000c409f:
	push %RBP
	mov -3208(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c409c
	jmp uuid_00000000000c409e
uuid_00000000000c409c:
	movb $1, -3232(%rbp)
uuid_00000000000c409e:
	mov -3376(%RBP),%RSP
	add $-3448, %RSP
uuid_00000000000c40a1:
	mov -3248(%RBP),%RSP
	add $-3448, %RSP
uuid_00000000000c40a4:
	mov -3240(%RBP),%RSP
	add $-3448, %RSP
	mov -3232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c40b1
	jmp uuid_00000000000c40b3
uuid_00000000000c40b1:
	push %RBP
	mov -3112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3528(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c40ab
	jmp uuid_00000000000c40ad
uuid_00000000000c40ab:
	push %RBP
	jmp uuid_00000000000c40a8
	jmp uuid_00000000000c40aa
uuid_00000000000c40a8:
	push %RBP
	mov -3464(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3568(%rbp)
	pushq $uuid_00000000000c0f7e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c40a5
	jmp uuid_00000000000c40a7
uuid_00000000000c40a5:
	movb $1, -3536(%rbp)
uuid_00000000000c40a7:
	mov -3560(%RBP),%RSP
	add $-3568, %RSP
uuid_00000000000c40aa:
	mov -3552(%RBP),%RSP
	add $-3568, %RSP
uuid_00000000000c40ad:
	mov -3544(%RBP),%RSP
	add $-3568, %RSP
	mov -3536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c40ae
	jmp uuid_00000000000c40b0
uuid_00000000000c40ae:
	movb $1, -3136(%rbp)
uuid_00000000000c40b0:
	mov -3456(%RBP),%RSP
	add $-3568, %RSP
uuid_00000000000c40b3:
	mov -3152(%RBP),%RSP
	add $-3568, %RSP
uuid_00000000000c40b6:
	mov -3144(%RBP),%RSP
	add $-3568, %RSP
	mov -3136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c41ae
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -3648(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c40d8
	jmp uuid_00000000000c40da
uuid_00000000000c40d8:
	push %RBP
	mov -3640(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c40d5
	jmp uuid_00000000000c40d7
uuid_00000000000c40d5:
	push %RBP
	mov -3632(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3824(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c40cf
	jmp uuid_00000000000c40d1
uuid_00000000000c40cf:
	push %RBP
	mov -3816(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c40cc
	jmp uuid_00000000000c40ce
uuid_00000000000c40cc:
	push %RBP
	mov -3808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4000(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c40c6
	jmp uuid_00000000000c40c8
uuid_00000000000c40c6:
	push %RBP
	mov -3992(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c40c3
	jmp uuid_00000000000c40c5
uuid_00000000000c40c3:
	push %RBP
	mov -3984(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4176(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c40bd
	jmp uuid_00000000000c40bf
uuid_00000000000c40bd:
	push %RBP
	jmp uuid_00000000000c40ba
	jmp uuid_00000000000c40bc
uuid_00000000000c40ba:
	push %RBP
	mov -4112(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4216(%rbp)
	pushq $uuid_00000000000c1212
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c40b7
	jmp uuid_00000000000c40b9
uuid_00000000000c40b7:
	movb $1, -4184(%rbp)
uuid_00000000000c40b9:
	mov -4208(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000c40bc:
	mov -4200(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000c40bf:
	mov -4192(%RBP),%RSP
	add $-4216, %RSP
	mov -4184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c40c0
	jmp uuid_00000000000c40c2
uuid_00000000000c40c0:
	movb $1, -4008(%rbp)
uuid_00000000000c40c2:
	mov -4104(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000c40c5:
	mov -4024(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000c40c8:
	mov -4016(%RBP),%RSP
	add $-4216, %RSP
	mov -4008(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c40c9
	jmp uuid_00000000000c40cb
uuid_00000000000c40c9:
	movb $1, -3832(%rbp)
uuid_00000000000c40cb:
	mov -3928(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000c40ce:
	mov -3848(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000c40d1:
	mov -3840(%RBP),%RSP
	add $-4216, %RSP
	mov -3832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c40d2
	jmp uuid_00000000000c40d4
uuid_00000000000c40d2:
	movb $1, -3656(%rbp)
uuid_00000000000c40d4:
	mov -3752(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000c40d7:
	mov -3672(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000c40da:
	mov -3664(%RBP),%RSP
	add $-4216, %RSP
	mov -3656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c41ab
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -4296(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4100
	jmp uuid_00000000000c4102
uuid_00000000000c4100:
	push %RBP
	mov -4288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c40fd
	jmp uuid_00000000000c40ff
uuid_00000000000c40fd:
	push %RBP
	mov -4280(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4472(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c40f7
	jmp uuid_00000000000c40f9
uuid_00000000000c40f7:
	push %RBP
	pushq -4448(%RBP)
	pushq -4456(%RBP)
	pushq -4464(%RBP)
	jmp uuid_00000000000c40f4
	jmp uuid_00000000000c40f6
uuid_00000000000c40f4:
	push %RBP
	mov -4440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4600(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c40f1
	jmp uuid_00000000000c40f3
uuid_00000000000c40f1:
	push %RBP
	mov -4432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	pushq -4672(%rbp)
	pushq -4680(%rbp)
	pushq $0
	push %RBP
	mov -4752(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c40eb
	jmp uuid_00000000000c40ed
uuid_00000000000c40eb:
	push %RBP
	jmp uuid_00000000000c40e8
	jmp uuid_00000000000c40ea
uuid_00000000000c40e8:
	push %RBP
	mov -4688(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c40e5
	jmp uuid_00000000000c40e7
uuid_00000000000c40e5:
	movb $1, -4760(%rbp)
uuid_00000000000c40e7:
	mov -4784(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000c40ea:
	mov -4776(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000c40ed:
	mov -4768(%RBP),%RSP
	add $-4792, %RSP
	mov -4760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c40ee
	jmp uuid_00000000000c40f0
uuid_00000000000c40ee:
	movb $1, -4480(%rbp)
uuid_00000000000c40f0:
	mov -4608(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000c40f3:
	mov -4528(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000c40f6:
	mov -4496(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000c40f9:
	mov -4488(%RBP),%RSP
	add $-4792, %RSP
	mov -4480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c40fa
	jmp uuid_00000000000c40fc
uuid_00000000000c40fa:
	movb $1, -4304(%rbp)
uuid_00000000000c40fc:
	mov -4400(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000c40ff:
	mov -4320(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000c4102:
	mov -4312(%RBP),%RSP
	add $-4792, %RSP
	mov -4304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c41a8
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -4872(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4128
	jmp uuid_00000000000c412a
uuid_00000000000c4128:
	push %RBP
	mov -4864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4125
	jmp uuid_00000000000c4127
uuid_00000000000c4125:
	push %RBP
	mov -4856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4122
	jmp uuid_00000000000c4124
uuid_00000000000c4122:
	movb $1, -4880(%rbp)
uuid_00000000000c4124:
	mov -4976(%RBP),%RSP
	add $-5048, %RSP
uuid_00000000000c4127:
	mov -4896(%RBP),%RSP
	add $-5048, %RSP
uuid_00000000000c412a:
	mov -4888(%RBP),%RSP
	add $-5048, %RSP
	mov -4880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c41a5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c41a4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c41a7
uuid_00000000000c41a5:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c41a1
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $3
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c419e
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -280(%rbp)
	pushq $3
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -5184(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	mov -5152(%RBP), %RAX
	push %RAX
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function fragment::chain : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq -5136(%rbp)
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	pushq -5264(%rbp)
	pushq -5272(%rbp)
	pushq -5280(%rbp)
	pushq -5288(%rbp)
	pushq -5296(%rbp)
	pushq -5304(%rbp)
	pushq -5312(%rbp)
	pushq -5320(%rbp)
	pushq -5328(%rbp)
	pushq -5336(%rbp)
	pushq -5344(%rbp)
	pushq -5352(%rbp)
	pushq -5360(%rbp)
	pushq -5368(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000c41a0
uuid_00000000000c419e:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -280(%rbp)
	pushq $3
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -5184(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	mov -5152(%RBP), %RAX
	push %RAX
	pushq $3
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function fragment::chain : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq -5136(%rbp)
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	pushq -5264(%rbp)
	pushq -5272(%rbp)
	pushq -5280(%rbp)
	pushq -5288(%rbp)
	pushq -5296(%rbp)
	pushq -5304(%rbp)
	pushq -5312(%rbp)
	pushq -5320(%rbp)
	pushq -5328(%rbp)
	pushq -5336(%rbp)
	pushq -5344(%rbp)
	pushq -5352(%rbp)
	pushq -5360(%rbp)
	pushq -5368(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c41a0:
	mov -5064(%RBP),%RSP
	add $-5368, %RSP
	jmp uuid_00000000000c41a3
uuid_00000000000c41a1:
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	push %RBP
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq $0
	push %RBP
	mov -5208(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4131
	jmp uuid_00000000000c4133
uuid_00000000000c4131:
	push %RBP
	jmp uuid_00000000000c412e
	jmp uuid_00000000000c4130
uuid_00000000000c412e:
	push %RBP
	mov -5144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c412b
	jmp uuid_00000000000c412d
uuid_00000000000c412b:
	movb $1, -5216(%rbp)
uuid_00000000000c412d:
	mov -5240(%RBP),%RSP
	add $-5248, %RSP
uuid_00000000000c4130:
	mov -5232(%RBP),%RSP
	add $-5248, %RSP
uuid_00000000000c4133:
	mov -5224(%RBP),%RSP
	add $-5248, %RSP
	mov -5216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c419b
	push %RBP
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq $0
	push %RBP
	mov -5328(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c415b
	jmp uuid_00000000000c415d
uuid_00000000000c415b:
	push %RBP
	mov -5320(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5424(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4149
	jmp uuid_00000000000c414b
uuid_00000000000c4149:
	push %RBP
	mov -5416(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5520(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4137
	jmp uuid_00000000000c4139
uuid_00000000000c4137:
	push %RBP
	pushq -5496(%RBP)
	pushq -5504(%RBP)
	pushq -5512(%RBP)
	jmp uuid_00000000000c4134
	jmp uuid_00000000000c4136
uuid_00000000000c4134:
	movb $1, -5528(%rbp)
uuid_00000000000c4136:
	mov -5544(%RBP),%RSP
	add $-5568, %RSP
uuid_00000000000c4139:
	mov -5536(%RBP),%RSP
	add $-5568, %RSP
	mov -5528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4146
	jmp uuid_00000000000c4148
uuid_00000000000c4146:
	push %RBP
	mov -5408(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5648(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4140
	jmp uuid_00000000000c4142
uuid_00000000000c4140:
	push %RBP
	jmp uuid_00000000000c413d
	jmp uuid_00000000000c413f
uuid_00000000000c413d:
	push %RBP
	mov -5584(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c413a
	jmp uuid_00000000000c413c
uuid_00000000000c413a:
	movb $1, -5656(%rbp)
uuid_00000000000c413c:
	mov -5680(%RBP),%RSP
	add $-5688, %RSP
uuid_00000000000c413f:
	mov -5672(%RBP),%RSP
	add $-5688, %RSP
uuid_00000000000c4142:
	mov -5664(%RBP),%RSP
	add $-5688, %RSP
	mov -5656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4143
	jmp uuid_00000000000c4145
uuid_00000000000c4143:
	movb $1, -5432(%rbp)
uuid_00000000000c4145:
	mov -5576(%RBP),%RSP
	add $-5688, %RSP
uuid_00000000000c4148:
	mov -5448(%RBP),%RSP
	add $-5688, %RSP
uuid_00000000000c414b:
	mov -5440(%RBP),%RSP
	add $-5688, %RSP
	mov -5432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4158
	jmp uuid_00000000000c415a
uuid_00000000000c4158:
	push %RBP
	mov -5312(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5768(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4152
	jmp uuid_00000000000c4154
uuid_00000000000c4152:
	push %RBP
	jmp uuid_00000000000c414f
	jmp uuid_00000000000c4151
uuid_00000000000c414f:
	push %RBP
	mov -5704(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5808(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c414c
	jmp uuid_00000000000c414e
uuid_00000000000c414c:
	movb $1, -5776(%rbp)
uuid_00000000000c414e:
	mov -5800(%RBP),%RSP
	add $-5808, %RSP
uuid_00000000000c4151:
	mov -5792(%RBP),%RSP
	add $-5808, %RSP
uuid_00000000000c4154:
	mov -5784(%RBP),%RSP
	add $-5808, %RSP
	mov -5776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4155
	jmp uuid_00000000000c4157
uuid_00000000000c4155:
	movb $1, -5336(%rbp)
uuid_00000000000c4157:
	mov -5696(%RBP),%RSP
	add $-5808, %RSP
uuid_00000000000c415a:
	mov -5352(%RBP),%RSP
	add $-5808, %RSP
uuid_00000000000c415d:
	mov -5344(%RBP),%RSP
	add $-5808, %RSP
	mov -5336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4198
	push %RBP
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq $0
	push %RBP
	mov -5888(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4164
	jmp uuid_00000000000c4166
uuid_00000000000c4164:
	push %RBP
	jmp uuid_00000000000c4161
	jmp uuid_00000000000c4163
uuid_00000000000c4161:
	push %RBP
	mov -5824(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c415e
	jmp uuid_00000000000c4160
uuid_00000000000c415e:
	movb $1, -5896(%rbp)
uuid_00000000000c4160:
	mov -5920(%RBP),%RSP
	add $-5928, %RSP
uuid_00000000000c4163:
	mov -5912(%RBP),%RSP
	add $-5928, %RSP
uuid_00000000000c4166:
	mov -5904(%RBP),%RSP
	add $-5928, %RSP
	mov -5896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4195
	push %RBP
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq $0
	push %RBP
	mov -6008(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c418e
	jmp uuid_00000000000c4190
uuid_00000000000c418e:
	push %RBP
	mov -6000(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6104(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c417c
	jmp uuid_00000000000c417e
uuid_00000000000c417c:
	push %RBP
	mov -6096(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6200(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c416a
	jmp uuid_00000000000c416c
uuid_00000000000c416a:
	push %RBP
	pushq -6176(%RBP)
	pushq -6184(%RBP)
	pushq -6192(%RBP)
	jmp uuid_00000000000c4167
	jmp uuid_00000000000c4169
uuid_00000000000c4167:
	movb $1, -6208(%rbp)
uuid_00000000000c4169:
	mov -6224(%RBP),%RSP
	add $-6248, %RSP
uuid_00000000000c416c:
	mov -6216(%RBP),%RSP
	add $-6248, %RSP
	mov -6208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4179
	jmp uuid_00000000000c417b
uuid_00000000000c4179:
	push %RBP
	mov -6088(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6328(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4173
	jmp uuid_00000000000c4175
uuid_00000000000c4173:
	push %RBP
	jmp uuid_00000000000c4170
	jmp uuid_00000000000c4172
uuid_00000000000c4170:
	push %RBP
	mov -6264(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c416d
	jmp uuid_00000000000c416f
uuid_00000000000c416d:
	movb $1, -6336(%rbp)
uuid_00000000000c416f:
	mov -6360(%RBP),%RSP
	add $-6368, %RSP
uuid_00000000000c4172:
	mov -6352(%RBP),%RSP
	add $-6368, %RSP
uuid_00000000000c4175:
	mov -6344(%RBP),%RSP
	add $-6368, %RSP
	mov -6336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4176
	jmp uuid_00000000000c4178
uuid_00000000000c4176:
	movb $1, -6112(%rbp)
uuid_00000000000c4178:
	mov -6256(%RBP),%RSP
	add $-6368, %RSP
uuid_00000000000c417b:
	mov -6128(%RBP),%RSP
	add $-6368, %RSP
uuid_00000000000c417e:
	mov -6120(%RBP),%RSP
	add $-6368, %RSP
	mov -6112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c418b
	jmp uuid_00000000000c418d
uuid_00000000000c418b:
	push %RBP
	mov -5992(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6448(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4185
	jmp uuid_00000000000c4187
uuid_00000000000c4185:
	push %RBP
	jmp uuid_00000000000c4182
	jmp uuid_00000000000c4184
uuid_00000000000c4182:
	push %RBP
	mov -6384(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6488(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c417f
	jmp uuid_00000000000c4181
uuid_00000000000c417f:
	movb $1, -6456(%rbp)
uuid_00000000000c4181:
	mov -6480(%RBP),%RSP
	add $-6488, %RSP
uuid_00000000000c4184:
	mov -6472(%RBP),%RSP
	add $-6488, %RSP
uuid_00000000000c4187:
	mov -6464(%RBP),%RSP
	add $-6488, %RSP
	mov -6456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4188
	jmp uuid_00000000000c418a
uuid_00000000000c4188:
	movb $1, -6016(%rbp)
uuid_00000000000c418a:
	mov -6376(%RBP),%RSP
	add $-6488, %RSP
uuid_00000000000c418d:
	mov -6032(%RBP),%RSP
	add $-6488, %RSP
uuid_00000000000c4190:
	mov -6024(%RBP),%RSP
	add $-6488, %RSP
	mov -6016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4192
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c4191
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4194
uuid_00000000000c4192:
#call function compile-constructor : Arrow<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -6368(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call compile_SB_constructor_CL_ArrowFragmentConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c4194:
	mov -5936(%RBP),%RSP
	add $-6488, %RSP
	jmp uuid_00000000000c4197
uuid_00000000000c4195:
#call function compile-constructor : Arrow<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -5928(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call compile_SB_constructor_CL_ArrowFragmentConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c4197:
	mov -5816(%RBP),%RSP
	add $-5928, %RSP
	jmp uuid_00000000000c419a
uuid_00000000000c4198:
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -5688(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c419a:
	mov -5256(%RBP),%RSP
	add $-5808, %RSP
	jmp uuid_00000000000c419d
uuid_00000000000c419b:
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -5248(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c419d:
	mov -5136(%RBP),%RSP
	add $-5248, %RSP
uuid_00000000000c41a3:
	mov -5056(%RBP),%RSP
	add $-5248, %RSP
uuid_00000000000c41a7:
	mov -4800(%RBP),%RSP
	add $-5248, %RSP
	jmp uuid_00000000000c41aa
uuid_00000000000c41a8:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	pushq -4672(%rbp)
	pushq -4680(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function compile-push-rvalue : Arrow<Cons<Cons<FContext,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call compile_SB_push_SB_rvalue_CL_ArrowFragmentConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	mov -280(%RBP), %RAX
	mov -4824(%RBP), %R14
	subq %R14,%RAX
	push %RAX
	pushq $0
	pushq $0
	pushq $3
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -4792(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
#call function fragment::local-variable : Arrow<Cons<I64,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4832(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_local_SB_variable_CL_ArrowFragmentConsTypeI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -4864(%rbp)
	pushq -4872(%rbp)
	pushq -4880(%rbp)
	pushq -4888(%rbp)
	pushq -4896(%rbp)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq $0
	push %RBP
	mov -5008(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4115
	jmp uuid_00000000000c4117
uuid_00000000000c4115:
	push %RBP
	jmp uuid_00000000000c4112
	jmp uuid_00000000000c4114
uuid_00000000000c4112:
	push %RBP
	mov -4992(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5112(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c410c
	jmp uuid_00000000000c410e
uuid_00000000000c410c:
	push %RBP
	jmp uuid_00000000000c4109
	jmp uuid_00000000000c410b
uuid_00000000000c4109:
	push %RBP
	jmp uuid_00000000000c4106
	jmp uuid_00000000000c4108
uuid_00000000000c4106:
	push %RBP
	mov -5072(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4103
	jmp uuid_00000000000c4105
uuid_00000000000c4103:
	movb $1, -5120(%rbp)
uuid_00000000000c4105:
	mov -5152(%RBP),%RSP
	add $-5224, %RSP
uuid_00000000000c4108:
	mov -5144(%RBP),%RSP
	add $-5224, %RSP
uuid_00000000000c410b:
	mov -5136(%RBP),%RSP
	add $-5224, %RSP
uuid_00000000000c410e:
	mov -5128(%RBP),%RSP
	add $-5224, %RSP
	mov -5120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c410f
	jmp uuid_00000000000c4111
uuid_00000000000c410f:
	movb $1, -5016(%rbp)
uuid_00000000000c4111:
	mov -5040(%RBP),%RSP
	add $-5224, %RSP
uuid_00000000000c4114:
	mov -5032(%RBP),%RSP
	add $-5224, %RSP
uuid_00000000000c4117:
	mov -5024(%RBP),%RSP
	add $-5224, %RSP
	mov -5016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c411c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c411b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c411e
uuid_00000000000c411c:
#call function fragment-context::lookup-soft : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c1356
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_SB_soft_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	pushq -5320(%RBP)
	pushq -5328(%RBP)
	pushq -5336(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5384(%rbp)
	pushq -5392(%rbp)
	pushq -5400(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4118
	jmp uuid_00000000000c411a
uuid_00000000000c4118:
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c1356
	pushq $0
	pushq $0
	pushq $3
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5416(%rbp)
	pushq -5424(%rbp)
	pushq -5432(%rbp)
	pushq -5440(%rbp)
	pushq -5448(%rbp)
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	pushq -5480(%rbp)
	pushq -5488(%rbp)
	pushq -5496(%rbp)
	pushq -5504(%rbp)
	pushq -5512(%rbp)
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq $uuid_00000000000c1935
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -4856(%RBP)
	popq -4848(%RBP)
	popq -4840(%RBP)
uuid_00000000000c411a:
	mov -5408(%RBP),%RSP
	add $-5560, %RSP
uuid_00000000000c411e:
	mov -4936(%RBP),%RSP
	add $-5560, %RSP
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000c1356
	pushq -4840(%rbp)
	pushq -4848(%rbp)
	pushq -4856(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000c411f
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000c411f
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4120
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4824(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4121
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -4832(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c41aa:
	mov -4224(%RBP),%RSP
	add $-5560, %RSP
	jmp uuid_00000000000c41ad
uuid_00000000000c41ab:
	mov -280(%RBP), %RAX
	mov $-8, %R14
	addq %R14,%RAX
	push %RAX
#call function cc-blob : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c40db
	pushq -4032(%rbp)
	pushq -4040(%rbp)
	pushq -4048(%rbp)
	pushq -4056(%rbp)
	pushq -4064(%rbp)
	pushq -4072(%rbp)
	pushq -4080(%rbp)
	pushq -4088(%rbp)
	pushq -4096(%rbp)
	pushq -4224(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -4344(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq -3880(%rbp)
	pushq -3888(%rbp)
	pushq -3896(%rbp)
	pushq -3904(%rbp)
	pushq -3912(%rbp)
	pushq -3920(%rbp)
	mov -4312(%RBP), %RAX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	mov -4464(%RBP), %RAX
	push %RAX
#call function compile-maybe-push-stack : Arrow<Cons<Cons<Cons<Cons<FContext,I64>,Fragment>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -4496(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4464(%RBP), %RAX
	push %RAX
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	pushq -4408(%rbp)
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call compile_SB_maybe_SB_push_SB_stack_CL_ArrowFragmentConsASTConsTypeConsFragmentConsI64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	popq -4528(%RBP)
	popq -4520(%RBP)
	popq -4512(%RBP)
	popq -4504(%RBP)
	popq -4496(%RBP)
	popq -4488(%RBP)
	popq -4480(%RBP)
	popq -4472(%RBP)
	popq -4464(%RBP)
	popq -4456(%RBP)
	popq -4448(%RBP)
	popq -4440(%RBP)
	popq -4432(%RBP)
	popq -4424(%RBP)
	popq -4416(%RBP)
	popq -4408(%RBP)
	popq -4400(%RBP)
	popq -4392(%RBP)
	popq -4384(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	pushq -4408(%rbp)
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq -3880(%rbp)
	pushq -3888(%rbp)
	pushq -3896(%rbp)
	pushq -3904(%rbp)
	pushq -3912(%rbp)
	pushq -3920(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -4528(%RBP)
	popq -4520(%RBP)
	popq -4512(%RBP)
	popq -4504(%RBP)
	popq -4496(%RBP)
	popq -4488(%RBP)
	popq -4480(%RBP)
	popq -4472(%RBP)
	popq -4464(%RBP)
	popq -4456(%RBP)
	popq -4448(%RBP)
	popq -4440(%RBP)
	popq -4432(%RBP)
	popq -4424(%RBP)
	popq -4416(%RBP)
	popq -4408(%RBP)
	popq -4400(%RBP)
	popq -4392(%RBP)
	popq -4384(%RBP)
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -4344(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq -3680(%rbp)
	pushq -3688(%rbp)
	pushq -3696(%rbp)
	pushq -3704(%rbp)
	pushq -3712(%rbp)
	pushq -3720(%rbp)
	pushq -3728(%rbp)
	pushq -3736(%rbp)
	pushq -3744(%rbp)
	mov -4312(%RBP), %RAX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function compile-maybe-push-stack : Arrow<Cons<Cons<Cons<Cons<FContext,I64>,Fragment>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -4656(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4624(%RBP), %RAX
	push %RAX
	pushq -4544(%rbp)
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	pushq -4568(%rbp)
	pushq -4576(%rbp)
	pushq -4584(%rbp)
	pushq -4592(%rbp)
	pushq -4600(%rbp)
	pushq -4608(%rbp)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	pushq -4672(%rbp)
	pushq -4680(%rbp)
	pushq -4688(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call compile_SB_maybe_SB_push_SB_stack_CL_ArrowFragmentConsASTConsTypeConsFragmentConsI64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	popq -4688(%RBP)
	popq -4680(%RBP)
	popq -4672(%RBP)
	popq -4664(%RBP)
	popq -4656(%RBP)
	popq -4648(%RBP)
	popq -4640(%RBP)
	popq -4632(%RBP)
	popq -4624(%RBP)
	popq -4616(%RBP)
	popq -4608(%RBP)
	popq -4600(%RBP)
	popq -4592(%RBP)
	popq -4584(%RBP)
	popq -4576(%RBP)
	popq -4568(%RBP)
	popq -4560(%RBP)
	popq -4552(%RBP)
	popq -4544(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4544(%rbp)
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	pushq -4568(%rbp)
	pushq -4576(%rbp)
	pushq -4584(%rbp)
	pushq -4592(%rbp)
	pushq -4600(%rbp)
	pushq -4608(%rbp)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	pushq -4672(%rbp)
	pushq -4680(%rbp)
	pushq -4688(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3680(%rbp)
	pushq -3688(%rbp)
	pushq -3696(%rbp)
	pushq -3704(%rbp)
	pushq -3712(%rbp)
	pushq -3720(%rbp)
	pushq -3728(%rbp)
	pushq -3736(%rbp)
	pushq -3744(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -4688(%RBP)
	popq -4680(%RBP)
	popq -4672(%RBP)
	popq -4664(%RBP)
	popq -4656(%RBP)
	popq -4648(%RBP)
	popq -4640(%RBP)
	popq -4632(%RBP)
	popq -4624(%RBP)
	popq -4616(%RBP)
	popq -4608(%RBP)
	popq -4600(%RBP)
	popq -4592(%RBP)
	popq -4584(%RBP)
	popq -4576(%RBP)
	popq -4568(%RBP)
	popq -4560(%RBP)
	popq -4552(%RBP)
	popq -4544(%RBP)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4696(%rbp)
	pushq -4704(%rbp)
	pushq -4712(%rbp)
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	pushq -4792(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -4824(%rbp)
	pushq -4832(%rbp)
	pushq -4840(%rbp)
	pushq $uuid_00000000000c40dc
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4224(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -4840(%RBP)
	popq -4832(%RBP)
	popq -4824(%RBP)
	popq -4816(%RBP)
	popq -4808(%RBP)
	popq -4800(%RBP)
	popq -4792(%RBP)
	popq -4784(%RBP)
	popq -4776(%RBP)
	popq -4768(%RBP)
	popq -4760(%RBP)
	popq -4752(%RBP)
	popq -4744(%RBP)
	popq -4736(%RBP)
	popq -4728(%RBP)
	popq -4720(%RBP)
	popq -4712(%RBP)
	popq -4704(%RBP)
	popq -4696(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4696(%rbp)
	pushq -4704(%rbp)
	pushq -4712(%rbp)
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	pushq -4792(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -4824(%rbp)
	pushq -4832(%rbp)
	pushq -4840(%rbp)
	pushq $uuid_00000000000c40dd
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4536(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -4840(%RBP)
	popq -4832(%RBP)
	popq -4824(%RBP)
	popq -4816(%RBP)
	popq -4808(%RBP)
	popq -4800(%RBP)
	popq -4792(%RBP)
	popq -4784(%RBP)
	popq -4776(%RBP)
	popq -4768(%RBP)
	popq -4760(%RBP)
	popq -4752(%RBP)
	popq -4744(%RBP)
	popq -4736(%RBP)
	popq -4728(%RBP)
	popq -4720(%RBP)
	popq -4712(%RBP)
	popq -4704(%RBP)
	popq -4696(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4696(%rbp)
	pushq -4704(%rbp)
	pushq -4712(%rbp)
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	pushq -4792(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -4824(%rbp)
	pushq -4832(%rbp)
	pushq -4840(%rbp)
	pushq $uuid_00000000000c40de
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -4840(%RBP)
	popq -4832(%RBP)
	popq -4824(%RBP)
	popq -4816(%RBP)
	popq -4808(%RBP)
	popq -4800(%RBP)
	popq -4792(%RBP)
	popq -4784(%RBP)
	popq -4776(%RBP)
	popq -4768(%RBP)
	popq -4760(%RBP)
	popq -4752(%RBP)
	popq -4744(%RBP)
	popq -4736(%RBP)
	popq -4728(%RBP)
	popq -4720(%RBP)
	popq -4712(%RBP)
	popq -4704(%RBP)
	popq -4696(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4696(%rbp)
	pushq -4704(%rbp)
	pushq -4712(%rbp)
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	pushq -4792(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -4824(%rbp)
	pushq -4832(%rbp)
	pushq -4840(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c40df
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -4840(%RBP)
	popq -4832(%RBP)
	popq -4824(%RBP)
	popq -4816(%RBP)
	popq -4808(%RBP)
	popq -4800(%RBP)
	popq -4792(%RBP)
	popq -4784(%RBP)
	popq -4776(%RBP)
	popq -4768(%RBP)
	popq -4760(%RBP)
	popq -4752(%RBP)
	popq -4744(%RBP)
	popq -4736(%RBP)
	popq -4728(%RBP)
	popq -4720(%RBP)
	popq -4712(%RBP)
	popq -4704(%RBP)
	popq -4696(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c40e0
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c40df
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -4696(%rbp)
	pushq -4704(%rbp)
	pushq -4712(%rbp)
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	pushq -4792(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -4824(%rbp)
	pushq -4832(%rbp)
	pushq -4840(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c0dc4
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c36a8
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -4232(%rbp)
	pushq -4240(%rbp)
	pushq -4248(%rbp)
	pushq -4256(%rbp)
	pushq -4264(%rbp)
	pushq -4272(%rbp)
	pushq -4280(%rbp)
	pushq -4288(%rbp)
	pushq -4296(%rbp)
	pushq -4304(%rbp)
	pushq -4312(%rbp)
	pushq -4320(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c3d13
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq -3880(%rbp)
	pushq -3888(%rbp)
	pushq -3896(%rbp)
	pushq -3904(%rbp)
	pushq -3912(%rbp)
	pushq -3920(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	pushq -4408(%rbp)
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c0dc7
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3680(%rbp)
	pushq -3688(%rbp)
	pushq -3696(%rbp)
	pushq -3704(%rbp)
	pushq -3712(%rbp)
	pushq -3720(%rbp)
	pushq -3728(%rbp)
	pushq -3736(%rbp)
	pushq -3744(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -4544(%rbp)
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	pushq -4568(%rbp)
	pushq -4576(%rbp)
	pushq -4584(%rbp)
	pushq -4592(%rbp)
	pushq -4600(%rbp)
	pushq -4608(%rbp)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	pushq -4672(%rbp)
	pushq -4680(%rbp)
	pushq -4688(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1157
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1157
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1157
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c40df
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3680(%rbp)
	pushq -3688(%rbp)
	pushq -3696(%rbp)
	pushq -3704(%rbp)
	pushq -3712(%rbp)
	pushq -3720(%rbp)
	pushq -3728(%rbp)
	pushq -3736(%rbp)
	pushq -3744(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq -3880(%rbp)
	pushq -3888(%rbp)
	pushq -3896(%rbp)
	pushq -3904(%rbp)
	pushq -3912(%rbp)
	pushq -3920(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c36a8
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function cc-blob : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,I64>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c40e1
	pushq -4848(%rbp)
	pushq -4856(%rbp)
	pushq -4864(%rbp)
	pushq -280(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsASTConsI64ConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	mov -4496(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -4536(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	push %RBP
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c40e2
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000c40e4
uuid_00000000000c40e2:
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1309
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c40e4:
	mov -4872(%RBP),%RSP
	add $-4872, %RSP
uuid_00000000000c41ad:
	mov -3576(%RBP),%RSP
	add $-4872, %RSP
	jmp uuid_00000000000c41b0
uuid_00000000000c41ae:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -3384(%rbp)
	pushq -3392(%rbp)
	pushq -3400(%rbp)
	pushq -3408(%rbp)
	pushq -3416(%rbp)
	pushq -3424(%rbp)
	pushq -3432(%rbp)
	pushq -3440(%rbp)
	pushq -3448(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c41b0:
	mov -3056(%RBP),%RSP
	add $-3568, %RSP
	jmp uuid_00000000000c41b3
uuid_00000000000c41b1:
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2912(%rbp)
	pushq -2920(%rbp)
	pushq -2928(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3056(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c22e4
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1774
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c129d
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1393
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0dc0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -3064(%rbp)
	pushq -3072(%rbp)
	pushq -3080(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c41b3:
	mov -2712(%RBP),%RSP
	add $-3080, %RSP
	jmp uuid_00000000000c41b6
uuid_00000000000c41b4:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	pushq -2568(%rbp)
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function is-array : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2712(%rbp)
	pushq -2720(%rbp)
	pushq -2728(%rbp)
	mov %RBX, %RBP
	call is_SB_array_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c407b
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	pushq -2568(%rbp)
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	pushq -280(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000c407d
uuid_00000000000c407b:
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2712(%rbp)
	pushq -2720(%rbp)
	pushq -2728(%rbp)
	pushq $uuid_00000000000c12d1
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
	pushq -2744(%rbp)
	pushq -2752(%rbp)
	pushq -2760(%rbp)
	pushq $0
	push %RBP
	mov -2792(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4056
	jmp uuid_00000000000c4058
uuid_00000000000c4056:
	push %RBP
	mov -2784(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2856(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c404d
	jmp uuid_00000000000c404f
uuid_00000000000c404d:
	push %RBP
	mov -2848(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2920(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4044
	jmp uuid_00000000000c4046
uuid_00000000000c4044:
	push %RBP
	mov -2912(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2984(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4041
	jmp uuid_00000000000c4043
uuid_00000000000c4041:
	push %RBP
	pushq -2888(%RBP)
	pushq -2896(%RBP)
	pushq -2904(%RBP)
	mov -3016(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c403e
	jmp uuid_00000000000c4040
uuid_00000000000c403e:
	movb $1, -2928(%rbp)
uuid_00000000000c4040:
	mov -2992(%RBP),%RSP
	add $-3016, %RSP
uuid_00000000000c4043:
	mov -2944(%RBP),%RSP
	add $-3016, %RSP
uuid_00000000000c4046:
	mov -2936(%RBP),%RSP
	add $-3016, %RSP
	mov -2928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c404a
	jmp uuid_00000000000c404c
uuid_00000000000c404a:
	push %RBP
	jmp uuid_00000000000c4047
	jmp uuid_00000000000c4049
uuid_00000000000c4047:
	movb $1, -2864(%rbp)
uuid_00000000000c4049:
	mov -3024(%RBP),%RSP
	add $-3024, %RSP
uuid_00000000000c404c:
	mov -2880(%RBP),%RSP
	add $-3024, %RSP
uuid_00000000000c404f:
	mov -2872(%RBP),%RSP
	add $-3024, %RSP
	mov -2864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4053
	jmp uuid_00000000000c4055
uuid_00000000000c4053:
	push %RBP
	mov -2776(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3040(%rbp)
	pushq $uuid_00000000000c12d1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4050
	jmp uuid_00000000000c4052
uuid_00000000000c4050:
	movb $1, -2800(%rbp)
uuid_00000000000c4052:
	mov -3032(%RBP),%RSP
	add $-3040, %RSP
uuid_00000000000c4055:
	mov -2816(%RBP),%RSP
	add $-3040, %RSP
uuid_00000000000c4058:
	mov -2808(%RBP),%RSP
	add $-3040, %RSP
	mov -2800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4078
	push %RBP
	pushq -2744(%rbp)
	pushq -2752(%rbp)
	pushq -2760(%rbp)
	pushq $0
	push %RBP
	mov -3072(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4071
	jmp uuid_00000000000c4073
uuid_00000000000c4071:
	push %RBP
	mov -3064(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3136(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4068
	jmp uuid_00000000000c406a
uuid_00000000000c4068:
	push %RBP
	mov -3128(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3200(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c405f
	jmp uuid_00000000000c4061
uuid_00000000000c405f:
	push %RBP
	mov -3192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3264(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c405c
	jmp uuid_00000000000c405e
uuid_00000000000c405c:
	push %RBP
	pushq -3168(%RBP)
	pushq -3176(%RBP)
	pushq -3184(%RBP)
	jmp uuid_00000000000c4059
	jmp uuid_00000000000c405b
uuid_00000000000c4059:
	movb $1, -3208(%rbp)
uuid_00000000000c405b:
	mov -3272(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000c405e:
	mov -3224(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000c4061:
	mov -3216(%RBP),%RSP
	add $-3296, %RSP
	mov -3208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4065
	jmp uuid_00000000000c4067
uuid_00000000000c4065:
	push %RBP
	pushq -3104(%RBP)
	pushq -3112(%RBP)
	pushq -3120(%RBP)
	mov -3328(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4062
	jmp uuid_00000000000c4064
uuid_00000000000c4062:
	movb $1, -3144(%rbp)
uuid_00000000000c4064:
	mov -3304(%RBP),%RSP
	add $-3328, %RSP
uuid_00000000000c4067:
	mov -3160(%RBP),%RSP
	add $-3328, %RSP
uuid_00000000000c406a:
	mov -3152(%RBP),%RSP
	add $-3328, %RSP
	mov -3144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c406e
	jmp uuid_00000000000c4070
uuid_00000000000c406e:
	push %RBP
	mov -3056(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3344(%rbp)
	pushq $uuid_00000000000c12d1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c406b
	jmp uuid_00000000000c406d
uuid_00000000000c406b:
	movb $1, -3080(%rbp)
uuid_00000000000c406d:
	mov -3336(%RBP),%RSP
	add $-3344, %RSP
uuid_00000000000c4070:
	mov -3096(%RBP),%RSP
	add $-3344, %RSP
uuid_00000000000c4073:
	mov -3088(%RBP),%RSP
	add $-3344, %RSP
	mov -3080(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4075
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c4074
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4077
uuid_00000000000c4075:
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c1308
	pushq $0
	pushq $0
	pushq $3
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1139
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	pushq -2568(%rbp)
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	pushq -280(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3280(%rbp)
	pushq -3288(%rbp)
	pushq -3296(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1309
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3280(%rbp)
	pushq -3288(%rbp)
	pushq -3296(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -280(%RBP), %RAX
	subq %R14,%RAX
	push %RAX
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -3352(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c4077:
	mov -3048(%RBP),%RSP
	add $-3352, %RSP
	jmp uuid_00000000000c407a
uuid_00000000000c4078:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	pushq -2568(%rbp)
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	pushq -280(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c407a:
	mov -2768(%RBP),%RSP
	add $-3040, %RSP
uuid_00000000000c407d:
	mov -2736(%RBP),%RSP
	add $-3040, %RSP
uuid_00000000000c41b6:
	mov -2416(%RBP),%RSP
	add $-3040, %RSP
	jmp uuid_00000000000c41b9
uuid_00000000000c41b7:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	pushq -280(%rbp)
	pushq $2
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c41b9:
	mov -2120(%RBP),%RSP
	add $-2408, %RSP
	jmp uuid_00000000000c41bc
uuid_00000000000c41ba:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1992(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c11f5
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq $uuid_00000000000c3169
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0f92
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000c1935
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1139
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c41bc:
	mov -1784(%RBP),%RSP
	add $-2288, %RSP
	jmp uuid_00000000000c41bf
uuid_00000000000c41bd:
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1656(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c11f5
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
#call function fragment::label : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function uuid : Arrow<Nil,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call uuid_CL_ArrowStringNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_label_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1139
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c41bf:
	mov -1448(%RBP),%RSP
	add $-1776, %RSP
	jmp uuid_00000000000c41c2
uuid_00000000000c41c0:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c41c2:
	mov -928(%RBP),%RSP
	add $-1440, %RSP
	jmp uuid_00000000000c41c5
uuid_00000000000c41c3:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function is-string : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call is_SB_string_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3fc0
	pushq $0
	push %RBP
#call function is-reg8 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call is_SB_reg8_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3f7c
	jmp uuid_00000000000c3f7e
uuid_00000000000c3f7c:
	movb $1, -960(%rbp)
uuid_00000000000c3f7e:
	mov -968(%RBP),%RSP
	add $-968, %RSP
	push %RBP
#call function is-reg16 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call is_SB_reg16_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3f7f
	jmp uuid_00000000000c3f81
uuid_00000000000c3f7f:
	movb $1, -960(%rbp)
uuid_00000000000c3f81:
	mov -976(%RBP),%RSP
	add $-976, %RSP
	push %RBP
#call function is-reg32 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call is_SB_reg32_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3f82
	jmp uuid_00000000000c3f84
uuid_00000000000c3f82:
	movb $1, -960(%rbp)
uuid_00000000000c3f84:
	mov -984(%RBP),%RSP
	add $-984, %RSP
	push %RBP
#call function is-reg64 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call is_SB_reg64_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3f85
	jmp uuid_00000000000c3f87
uuid_00000000000c3f85:
	movb $1, -960(%rbp)
uuid_00000000000c3f87:
	mov -992(%RBP),%RSP
	add $-992, %RSP
	push %RBP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c3fbd
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function class-of-tag : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	mov %RBX, %RBP
	call class_SB_of_SB_tag_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3fba
	pushq -920(%rbp)
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1032(%rbp)
	pushq $uuid_00000000000c3f88
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3fb7
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1048(%rbp)
	pushq $uuid_00000000000c3f89
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3fb4
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	pushq $uuid_00000000000c3f8a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3fb1
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq $uuid_00000000000c0f45
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3fae
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1096(%rbp)
	pushq $uuid_00000000000c3f8c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3fab
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1112(%rbp)
	pushq $uuid_00000000000c3f8e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3fa8
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1128(%rbp)
	pushq $uuid_00000000000c3f90
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3fa5
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1144(%rbp)
	pushq $uuid_00000000000c3f92
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3fa2
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1160(%rbp)
	pushq $uuid_00000000000c3f94
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3f9f
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1176(%rbp)
	pushq $uuid_00000000000c3f96
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c3f9c
	push %RBP
	jmp uuid_00000000000c3f99
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c3f98
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c3f9b
uuid_00000000000c3f99:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c3f9b:
	mov -1184(%RBP),%RSP
	add $-1184, %RSP
	jmp uuid_00000000000c3f9e
uuid_00000000000c3f9c:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3f97
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c3f9e:
	mov -1168(%RBP),%RSP
	add $-1176, %RSP
	jmp uuid_00000000000c3fa1
uuid_00000000000c3f9f:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3f95
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c3fa1:
	mov -1152(%RBP),%RSP
	add $-1160, %RSP
	jmp uuid_00000000000c3fa4
uuid_00000000000c3fa2:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3f93
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c3fa4:
	mov -1136(%RBP),%RSP
	add $-1144, %RSP
	jmp uuid_00000000000c3fa7
uuid_00000000000c3fa5:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3f91
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c3fa7:
	mov -1120(%RBP),%RSP
	add $-1128, %RSP
	jmp uuid_00000000000c3faa
uuid_00000000000c3fa8:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3f8f
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c3faa:
	mov -1104(%RBP),%RSP
	add $-1112, %RSP
	jmp uuid_00000000000c3fad
uuid_00000000000c3fab:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3f8d
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c3fad:
	mov -1088(%RBP),%RSP
	add $-1096, %RSP
	jmp uuid_00000000000c3fb0
uuid_00000000000c3fae:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c3f8b
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c3fb0:
	mov -1072(%RBP),%RSP
	add $-1080, %RSP
	jmp uuid_00000000000c3fb3
uuid_00000000000c3fb1:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0dc1
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c3fb3:
	mov -1056(%RBP),%RSP
	add $-1064, %RSP
	jmp uuid_00000000000c3fb6
uuid_00000000000c3fb4:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d80
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c3fb6:
	mov -1040(%RBP),%RSP
	add $-1048, %RSP
	jmp uuid_00000000000c3fb9
uuid_00000000000c3fb7:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0db9
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c3fb9:
	mov -1024(%RBP),%RSP
	add $-1032, %RSP
	jmp uuid_00000000000c3fbc
uuid_00000000000c3fba:
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1016(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000c1935
#call function close : Arrow<S+CaseNumber<3>,Array<S+CaseNumber<3>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SCaseNumber3SCaseNumber3
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S+CaseNumber<3>,Array<S+CaseNumber<3>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SCaseNumber3SCaseNumber3
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c3fbc:
	mov -1008(%RBP),%RSP
	add $-1016, %RSP
	jmp uuid_00000000000c3fbf
uuid_00000000000c3fbd:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c3fbf:
	mov -1000(%RBP),%RSP
	add $-1000, %RSP
	jmp uuid_00000000000c3fc2
uuid_00000000000c3fc0:
#call function compile-declare-cstring : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	mov %RBX, %RBP
	call compile_SB_declare_SB_cstring_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c3fc2:
	mov -952(%RBP),%RSP
	add $-952, %RSP
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c41c5:
	mov -808(%RBP),%RSP
	add $-952, %RSP
	jmp uuid_00000000000c41c8
uuid_00000000000c41c6:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -800(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c41c8:
	mov -688(%RBP),%RSP
	add $-800, %RSP
	jmp uuid_00000000000c41cb
uuid_00000000000c41c9:
uuid_00000000000c41cb:
	mov -608(%RBP),%RSP
	add $-680, %RSP
	jmp uuid_00000000000c41ce
uuid_00000000000c41cc:
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1139
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c41ce:
	mov -528(%RBP),%RSP
	add $-600, %RSP
	subq $152, %rsp
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $296, %rsp
	ret
compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq -288(%rbp)
	push %RBP
	pushq -456(%rbp)
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c41d3
	push %RBP
	jmp uuid_00000000000c41d0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c41cf
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c41d2
uuid_00000000000c41d0:
#call function compile-expr-direct : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_expr_SB_direct_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c41d2:
	mov -480(%RBP),%RSP
	add $-480, %RSP
	jmp uuid_00000000000c41d5
uuid_00000000000c41d3:
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c13d5
	pushq $0
	pushq $0
	pushq $3
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c41d5:
	mov -464(%RBP),%RSP
	add $-472, %RSP
	subq $152, %rsp
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $296, %rsp
	ret
compile_SB_global_CL_ArrowNilConsASTConsStringFContext:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -464(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c41df
	jmp uuid_00000000000c41e1
uuid_00000000000c41df:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000c41dc
	jmp uuid_00000000000c41de
uuid_00000000000c41dc:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c41d9
	jmp uuid_00000000000c41db
uuid_00000000000c41d9:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c41d6
	jmp uuid_00000000000c41d8
uuid_00000000000c41d6:
	movb $1, -472(%rbp)
uuid_00000000000c41d8:
	mov -600(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c41db:
	mov -520(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c41de:
	mov -488(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c41e1:
	mov -480(%RBP),%RSP
	add $-672, %RSP
	mov -472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4227
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c421f
	jmp uuid_00000000000c4221
uuid_00000000000c421f:
	push %RBP
	mov -744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c420d
	jmp uuid_00000000000c420f
uuid_00000000000c420d:
	push %RBP
	mov -840(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -944(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4204
	jmp uuid_00000000000c4206
uuid_00000000000c4204:
	push %RBP
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	jmp uuid_00000000000c4201
	jmp uuid_00000000000c4203
uuid_00000000000c4201:
	movb $1, -952(%rbp)
uuid_00000000000c4203:
	mov -968(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c4206:
	mov -960(%RBP),%RSP
	add $-992, %RSP
	mov -952(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c420a
	jmp uuid_00000000000c420c
uuid_00000000000c420a:
	push %RBP
	mov -832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4207
	jmp uuid_00000000000c4209
uuid_00000000000c4207:
	movb $1, -856(%rbp)
uuid_00000000000c4209:
	mov -1000(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c420c:
	mov -872(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c420f:
	mov -864(%RBP),%RSP
	add $-1072, %RSP
	mov -856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c421c
	jmp uuid_00000000000c421e
uuid_00000000000c421c:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1152(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4216
	jmp uuid_00000000000c4218
uuid_00000000000c4216:
	push %RBP
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	jmp uuid_00000000000c4213
	jmp uuid_00000000000c4215
uuid_00000000000c4213:
	push %RBP
	mov -1088(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1248(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4210
	jmp uuid_00000000000c4212
uuid_00000000000c4210:
	movb $1, -1160(%rbp)
uuid_00000000000c4212:
	mov -1240(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c4215:
	mov -1176(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c4218:
	mov -1168(%RBP),%RSP
	add $-1248, %RSP
	mov -1160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4219
	jmp uuid_00000000000c421b
uuid_00000000000c4219:
	movb $1, -760(%rbp)
uuid_00000000000c421b:
	mov -1080(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c421e:
	mov -776(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c4221:
	mov -768(%RBP),%RSP
	add $-1248, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4224
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c4223
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4226
uuid_00000000000c4224:
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -1280(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4222
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0d52
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	pushq -208(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq $7
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1157
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1155
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c1156
	pushq $0
	pushq $0
	pushq $3
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1139
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq $-8
	pushq $4
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_init_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq $uuid_00000000000c1935
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_init_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
uuid_00000000000c4226:
	mov -680(%RBP),%RSP
	add $-1576, %RSP
	jmp uuid_00000000000c4229
uuid_00000000000c4227:
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c41fe
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function compile-destructure-args : Arrow<Cons<Cons<Cons<Type,FContext>,AST>,I64>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq $0
	mov %RBX, %RBP
	call compile_SB_destructure_SB_args_CL_ArrowFContextConsI64ConsASTConsFContextType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $uuid_00000000000c41e2
	pushq $0
	pushq $0
	pushq $3
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq $0
	mov -720(%RBP), %RAX
	mov $8, %R14
	subq %R14,%RAX
	movq %RAX, -720(%rbp)
	mov -720(%RBP), %RAX
	mov -712(%RBP), %R14
	subq %R14,%RAX
	movq %RAX, -720(%rbp)
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -720(%rbp)
	pushq $1
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq $0
	pushq $0
	pushq $3
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000c3198
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c41ea
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
	jmp uuid_00000000000c41ec
uuid_00000000000c41ea:
	mov $main_SB_with_CL_U8, %r15
	movb $1, 0(%r15)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	push %RBP
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	mov -1056(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c41e7
	push %RBP
	jmp uuid_00000000000c41e4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c41e3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c41e6
uuid_00000000000c41e4:
	mov $main_SB_with_SB_argv_CL_U8, %r15
	movb $1, 0(%r15)
uuid_00000000000c41e6:
	mov -1064(%RBP),%RSP
	add $-1064, %RSP
	jmp uuid_00000000000c41e9
uuid_00000000000c41e7:
uuid_00000000000c41e9:
	mov -984(%RBP),%RSP
	add $-1056, %RSP
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c3198
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
uuid_00000000000c41ec:
	mov -904(%RBP),%RSP
	add $-1056, %RSP
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0f92
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
	push %RBP
	mov $config_SB_profile_SB_invocations_CL_U8, %RAX
	mov 0(%RAX), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c41f8
	jmp uuid_00000000000c41fa
uuid_00000000000c41f8:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	pushq $0
	pushq $uuid_00000000000c41ed
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq $0
	pushq $uuid_00000000000c41ee
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq $0
	pushq $uuid_00000000000c41ef
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq $0
	pushq $uuid_00000000000c41f0
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c41f1
	pushq $2
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq $0
	pushq $uuid_00000000000c41f2
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	pushq $uuid_00000000000c41f3
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_profile_SB_onexit_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c41f1
	pushq $2
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq $0
	pushq $uuid_00000000000c41f2
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	pushq $uuid_00000000000c41f4
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c41f5
	pushq $2
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq $0
	pushq $uuid_00000000000c41f6
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	pushq $uuid_00000000000c41f7
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $assemble_SB_profile_SB_onexit_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
uuid_00000000000c41fa:
	mov -1064(%RBP),%RSP
	add $-1088, %RSP
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq $uuid_00000000000c41fb
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq $uuid_00000000000c1935
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c30ba
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c41fc
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -712(%RBP), %RAX
	mov $8, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4121
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c41fd
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_text_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_text_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	jmp uuid_00000000000c4200
uuid_00000000000c41fe:
uuid_00000000000c4200:
	mov -680(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000c4229:
	mov -392(%RBP),%RSP
	add $-680, %RSP
	mov %rbp, %rsp
	sub $288, %rsp
	ret
compile_SB_maybe_SB_push_SB_stack_CL_ArrowFragmentConsASTConsTypeConsFragmentConsI64FContext:
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c422a
	movq -384(%rbp), %r15
	movq %r15, -488(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -480(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -472(%rbp)
	jmp uuid_00000000000c422c
uuid_00000000000c422a:
uuid_00000000000c422c:
	mov -496(%RBP),%RSP
	add $-496, %RSP
	push %RBP
#call function is-stack-variable : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call is_SB_stack_SB_variable_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c422d
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq $uuid_00000000000c3ee1
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
	popq -648(%RBP)
	popq -640(%RBP)
	popq -632(%RBP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
#call function cc-blob : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,I64>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq $uuid_00000000000c1395
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -208(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsASTConsI64ConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1309
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	mov -208(%RBP), %RAX
	mov -712(%RBP), %R14
	subq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	jmp uuid_00000000000c422f
uuid_00000000000c422d:
uuid_00000000000c422f:
	mov -504(%RBP),%RSP
	add $-504, %RSP
	subq $152, %rsp
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	popq -600(%rbp)
	popq -608(%rbp)
	popq -616(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $464, %rsp
	ret
compile_SB_push_SB_rvalue_CL_ArrowFragmentConsI64ConsASTFContext:
#call function compile-push-rvalue : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,U64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq $0
	mov %RBX, %RBP
	call compile_SB_push_SB_rvalue_CL_ArrowFragmentConsU64ConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	subq $152, %rsp
	pushq 152(%rsp)
	pushq 168(%rsp)
	pushq 184(%rsp)
	pushq 200(%rsp)
	pushq 216(%rsp)
	pushq 232(%rsp)
	pushq 248(%rsp)
	pushq 264(%rsp)
	pushq 280(%rsp)
	pushq 296(%rsp)
	pushq 312(%rsp)
	pushq 328(%rsp)
	pushq 344(%rsp)
	pushq 360(%rsp)
	pushq 376(%rsp)
	pushq 392(%rsp)
	pushq 408(%rsp)
	pushq 424(%rsp)
	pushq 440(%rsp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $288, %rsp
	ret
compile_SB_push_SB_rvalue_CL_ArrowFragmentConsU64ConsI64ConsASTFContext:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq $uuid_00000000000c1157
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq $0
	push %RBP
	mov -504(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4248
	jmp uuid_00000000000c424a
uuid_00000000000c4248:
	push %RBP
	mov -496(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -568(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c423f
	jmp uuid_00000000000c4241
uuid_00000000000c423f:
	push %RBP
	mov -560(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4236
	jmp uuid_00000000000c4238
uuid_00000000000c4236:
	push %RBP
	mov -624(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4233
	jmp uuid_00000000000c4235
uuid_00000000000c4233:
	push %RBP
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	jmp uuid_00000000000c4230
	jmp uuid_00000000000c4232
uuid_00000000000c4230:
	movb $1, -640(%rbp)
uuid_00000000000c4232:
	mov -704(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c4235:
	mov -656(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c4238:
	mov -648(%RBP),%RSP
	add $-728, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c423c
	jmp uuid_00000000000c423e
uuid_00000000000c423c:
	push %RBP
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	jmp uuid_00000000000c4239
	jmp uuid_00000000000c423b
uuid_00000000000c4239:
	movb $1, -576(%rbp)
uuid_00000000000c423b:
	mov -736(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000c423e:
	mov -592(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000c4241:
	mov -584(%RBP),%RSP
	add $-760, %RSP
	mov -576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4245
	jmp uuid_00000000000c4247
uuid_00000000000c4245:
	push %RBP
	mov -488(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -776(%rbp)
	pushq $uuid_00000000000c1157
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4242
	jmp uuid_00000000000c4244
uuid_00000000000c4242:
	movb $1, -512(%rbp)
uuid_00000000000c4244:
	mov -768(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c4247:
	mov -528(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c424a:
	mov -520(%RBP),%RSP
	add $-776, %RSP
	mov -512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c426b
	push %RBP
	jmp uuid_00000000000c4268
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c4267
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c426a
uuid_00000000000c4268:
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -792(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4264
	push %RBP
	mov -288(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4261
	jmp uuid_00000000000c4263
uuid_00000000000c4261:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function is-rc : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	mov %RBX, %RBP
	call is_SB_rc_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c425e
	jmp uuid_00000000000c4260
uuid_00000000000c425e:
	pushq $uuid_00000000000c1383
#call function token::new : Arrow<String,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1383
	mov %RBX, %RBP
	call token_CL__CL_new_CL_ArrowTokenString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $7
#call function guess-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call guess_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
#call function ascript : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c13d4
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call ascript_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function ascript : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	mov %RBX, %RBP
	call ascript_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c4260:
	mov -840(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c4263:
	mov -808(%RBP),%RSP
	add $-912, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function compile-maybe-push-stack : Arrow<Cons<Cons<Cons<Cons<FContext,I64>,Fragment>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -384(%RBP), %RAX
	push %RAX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call compile_SB_maybe_SB_push_SB_stack_CL_ArrowFragmentConsASTConsTypeConsFragmentConsI64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	mov -280(%RBP), %RAX
	mov -792(%RBP), %R14
	subq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000c4266
uuid_00000000000c4264:
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000c1935
#call function close : Arrow<S+CaseNumber<3>,Array<S+CaseNumber<3>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SCaseNumber3SCaseNumber3
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S+CaseNumber<3>,Array<S+CaseNumber<3>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SCaseNumber3SCaseNumber3
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c4266:
	mov -800(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c426a:
	mov -784(%RBP),%RSP
	add $-800, %RSP
	jmp uuid_00000000000c426d
uuid_00000000000c426b:
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq $0
	push %RBP
	mov -928(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4251
	jmp uuid_00000000000c4253
uuid_00000000000c4251:
	push %RBP
	mov -920(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c424e
	jmp uuid_00000000000c4250
uuid_00000000000c424e:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c424b
	jmp uuid_00000000000c424d
uuid_00000000000c424b:
	movb $1, -936(%rbp)
uuid_00000000000c424d:
	mov -1032(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000c4250:
	mov -952(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000c4253:
	mov -944(%RBP),%RSP
	add $-1104, %RSP
	mov -936(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c425b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c425a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c425d
uuid_00000000000c425b:
#call function compile-push-rvalue : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,U64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_push_SB_rvalue_CL_ArrowFragmentConsU64ConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
	mov -288(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4257
	jmp uuid_00000000000c4259
uuid_00000000000c4257:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function is-rc : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	mov %RBX, %RBP
	call is_SB_rc_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4254
	jmp uuid_00000000000c4256
uuid_00000000000c4254:
	pushq $uuid_00000000000c1383
#call function token::new : Arrow<String,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1383
	mov %RBX, %RBP
	call token_CL__CL_new_CL_ArrowTokenString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $7
#call function guess-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call guess_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1288(%RBP)
	popq -1280(%RBP)
	popq -1272(%RBP)
#call function ascript : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c13d4
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call ascript_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -1024(%RBP)
	popq -1016(%RBP)
	popq -1008(%RBP)
	popq -1000(%RBP)
	popq -992(%RBP)
	popq -984(%RBP)
	popq -976(%RBP)
	popq -968(%RBP)
	popq -960(%RBP)
#call function ascript : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	mov %RBX, %RBP
	call ascript_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c4256:
	mov -1296(%RBP),%RSP
	add $-1368, %RSP
uuid_00000000000c4259:
	mov -1264(%RBP),%RSP
	add $-1368, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov -1192(%RBP), %RAX
	push %RAX
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function compile-maybe-push-stack : Arrow<Cons<Cons<Cons<Cons<FContext,I64>,Fragment>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -1456(%RBP), %RAX
	push %RAX
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call compile_SB_maybe_SB_push_SB_stack_CL_ArrowFragmentConsASTConsTypeConsFragmentConsI64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	popq -1520(%RBP)
	popq -1512(%RBP)
	popq -1504(%RBP)
	popq -1496(%RBP)
	popq -1488(%RBP)
	popq -1480(%RBP)
	popq -1472(%RBP)
	popq -1464(%RBP)
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
	popq -1432(%RBP)
	popq -1424(%RBP)
	popq -1416(%RBP)
	popq -1408(%RBP)
	popq -1400(%RBP)
	popq -1392(%RBP)
	popq -1384(%RBP)
	popq -1376(%RBP)
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	mov -280(%RBP), %RAX
	mov -1528(%RBP), %R14
	subq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -1520(%RBP)
	popq -1512(%RBP)
	popq -1504(%RBP)
	popq -1496(%RBP)
	popq -1488(%RBP)
	popq -1480(%RBP)
	popq -1472(%RBP)
	popq -1464(%RBP)
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
	popq -1432(%RBP)
	popq -1424(%RBP)
	popq -1416(%RBP)
	popq -1408(%RBP)
	popq -1400(%RBP)
	popq -1392(%RBP)
	popq -1384(%RBP)
	popq -1376(%RBP)
#call function fragment::chain : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c425d:
	mov -856(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000c426d:
	mov -480(%RBP),%RSP
	add $-1528, %RSP
	subq $152, %rsp
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $296, %rsp
	ret
compile_SB_stack_SB_call_SB_push_SB_args_CL_ArrowFragmentConsI64ConsASTFContext:
#call function compile-push-rvalue : Arrow<Cons<Cons<FContext,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call compile_SB_push_SB_rvalue_CL_ArrowFragmentConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	subq $152, %rsp
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $288, %rsp
	ret
compile_SB_stack_SB_call_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsStringConsFragmentFContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4282
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq $2
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c426e
	jmp uuid_00000000000c4270
uuid_00000000000c426e:
	pushq $4
	popq -472(%RBP)
uuid_00000000000c4270:
	mov -872(%RBP),%RSP
	add $-872, %RSP
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4271
	jmp uuid_00000000000c4273
uuid_00000000000c4271:
	pushq $4
	popq -472(%RBP)
uuid_00000000000c4273:
	mov -880(%RBP),%RSP
	add $-880, %RSP
#call function compile-stack-call-push-args : Arrow<Cons<Cons<FContext,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_call_SB_push_SB_args_CL_ArrowFragmentConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4274
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -1032(%RBP)
	popq -1024(%RBP)
	popq -1016(%RBP)
	popq -1008(%RBP)
	popq -1000(%RBP)
	popq -992(%RBP)
	popq -984(%RBP)
	popq -976(%RBP)
	popq -968(%RBP)
	popq -960(%RBP)
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
	popq -912(%RBP)
	popq -904(%RBP)
	popq -896(%RBP)
	popq -888(%RBP)
	pushq $0
	pushq $0
	pushq $3
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq $uuid_00000000000c4275
	pushq $0
	pushq -1064(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1224(%RBP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq $uuid_00000000000c4276
	pushq $0
	pushq -360(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1224(%RBP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq $uuid_00000000000c4277
	pushq $0
#call function to-string : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1224(%RBP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq $uuid_00000000000c4275
	pushq $0
	pushq -1064(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1224(%RBP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq $uuid_00000000000c40de
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1224(%RBP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq $uuid_00000000000c4278
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1224(%RBP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq $uuid_00000000000c4279
	pushq $0
#call function to-string : Arrow<IsUsed,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringIsUsed
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1224(%RBP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c40df
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -1224(%RBP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c40e0
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c40df
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c427a
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function cc-blob : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,I64>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c427b
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1157
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c40df
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq -464(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsASTConsI64ConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	push %RBP
	mov -1072(%RBP), %RAX
	mov $8, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c427f
	jmp uuid_00000000000c4281
uuid_00000000000c427f:
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq $4
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c427c
	jmp uuid_00000000000c427e
uuid_00000000000c427c:
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov -464(%RBP), %RAX
	mov -1072(%RBP), %R14
	subq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
uuid_00000000000c427e:
	mov -1264(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c4281:
	mov -1256(%RBP),%RSP
	add $-1264, %RSP
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	jmp uuid_00000000000c4284
uuid_00000000000c4282:
#call function cc-blob : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -360(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
uuid_00000000000c4284:
	mov -864(%RBP),%RSP
	add $-864, %RSP
	subq $152, %rsp
	pushq -856(%rbp)
	pushq -848(%rbp)
	pushq -840(%rbp)
	pushq -832(%rbp)
	pushq -824(%rbp)
	pushq -816(%rbp)
	pushq -808(%rbp)
	pushq -800(%rbp)
	pushq -792(%rbp)
	pushq -784(%rbp)
	pushq -776(%rbp)
	pushq -768(%rbp)
	pushq -760(%rbp)
	pushq -752(%rbp)
	pushq -744(%rbp)
	pushq -736(%rbp)
	pushq -728(%rbp)
	pushq -720(%rbp)
	pushq -712(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	popq -600(%rbp)
	popq -608(%rbp)
	popq -616(%rbp)
	popq -624(%rbp)
	popq -632(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $480, %rsp
	ret
compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -336(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
#call function fragment-context::lookups : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookups_CL_ArrowListFragmentConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
uuid_00000000000c4292:
#call function non-zero : Arrow<List<Fragment>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4293
	jmp uuid_00000000000c4294
uuid_00000000000c4293:
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	push %RBP
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq $0
	push %RBP
	mov -1184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c428b
	jmp uuid_00000000000c428d
uuid_00000000000c428b:
	push %RBP
	mov -1176(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4288
	jmp uuid_00000000000c428a
uuid_00000000000c4288:
	push %RBP
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	pushq -1152(%RBP)
	pushq -1160(%RBP)
	pushq -1168(%RBP)
	jmp uuid_00000000000c4285
	jmp uuid_00000000000c4287
uuid_00000000000c4285:
	movb $1, -1192(%rbp)
uuid_00000000000c4287:
	mov -1384(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c428a:
	mov -1208(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c428d:
	mov -1200(%RBP),%RSP
	add $-1536, %RSP
	mov -1192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c428f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c428e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4291
uuid_00000000000c428f:
#call function fragment::chain : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
#call function compile-stack-call : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,Fragment>,String>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -208(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_call_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsStringConsFragmentFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	movq -1376(%rbp), %r15
	movq %r15, -840(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -832(%rbp)
	movq -1360(%rbp), %r15
	movq %r15, -824(%rbp)
	movq -1352(%rbp), %r15
	movq %r15, -816(%rbp)
	movq -1344(%rbp), %r15
	movq %r15, -808(%rbp)
	movq -1336(%rbp), %r15
	movq %r15, -800(%rbp)
	movq -1328(%rbp), %r15
	movq %r15, -792(%rbp)
	movq -1320(%rbp), %r15
	movq %r15, -784(%rbp)
	movq -1312(%rbp), %r15
	movq %r15, -776(%rbp)
	movq -1304(%rbp), %r15
	movq %r15, -768(%rbp)
	movq -1296(%rbp), %r15
	movq %r15, -760(%rbp)
	movq -1288(%rbp), %r15
	movq %r15, -752(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -744(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -736(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -728(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -720(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -712(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -704(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -696(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -688(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -680(%rbp)
uuid_00000000000c4291:
	mov -1016(%RBP),%RSP
	add $-1536, %RSP
	add $168, %rsp
	add $168, %rsp
	add $8, %rsp
	add $168, %rsp
	add $152, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c4292
uuid_00000000000c4294:
	subq $152, %rsp
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $352, %rsp
	ret
translate_SB_local_SB_variables_CL_ArrowFContextConsI64FContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c42bf
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq $0
	push %RBP
	mov -832(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c42a1
	jmp uuid_00000000000c42a3
uuid_00000000000c42a1:
	push %RBP
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq -752(%RBP)
	pushq -760(%RBP)
	pushq -768(%RBP)
	pushq -776(%RBP)
	pushq -784(%RBP)
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	jmp uuid_00000000000c429e
	jmp uuid_00000000000c42a0
uuid_00000000000c429e:
	push %RBP
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	jmp uuid_00000000000c429b
	jmp uuid_00000000000c429d
uuid_00000000000c429b:
	push %RBP
	mov -648(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4298
	jmp uuid_00000000000c429a
uuid_00000000000c4298:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4295
	jmp uuid_00000000000c4297
uuid_00000000000c4295:
	movb $1, -840(%rbp)
uuid_00000000000c4297:
	mov -1064(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c429a:
	mov -1048(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c429d:
	mov -1016(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c42a0:
	mov -856(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c42a3:
	mov -848(%RBP),%RSP
	add $-1264, %RSP
	mov -840(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c42bc
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c42bb
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c42be
uuid_00000000000c42bc:
#call function translate-local-variables : Arrow<Cons<FContext,I64>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call translate_SB_local_SB_variables_CL_ArrowFContextConsI64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	popq -1264(%RBP)
	popq -1256(%RBP)
	popq -1248(%RBP)
	popq -1240(%RBP)
	popq -1232(%RBP)
	popq -1224(%RBP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
	popq -1072(%RBP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq $uuid_00000000000c3102
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push %RBP
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq $0
	push %RBP
	mov -1320(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c42a7
	jmp uuid_00000000000c42a9
uuid_00000000000c42a7:
	push %RBP
	mov -1312(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1352(%rbp)
	pushq $uuid_00000000000c17da
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c42a4
	jmp uuid_00000000000c42a6
uuid_00000000000c42a4:
	movb $1, -1328(%rbp)
uuid_00000000000c42a6:
	mov -1344(%RBP),%RSP
	add $-1352, %RSP
uuid_00000000000c42a9:
	mov -1336(%RBP),%RSP
	add $-1352, %RSP
	mov -1328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c42b8
	push %RBP
	jmp uuid_00000000000c42b5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c42b4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c42b7
uuid_00000000000c42b5:
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1056(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c42b7:
	mov -1360(%RBP),%RSP
	add $-1360, %RSP
	jmp uuid_00000000000c42ba
uuid_00000000000c42b8:
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq $uuid_00000000000c3169
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push %RBP
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq $0
	push %RBP
	mov -1408(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c42ad
	jmp uuid_00000000000c42af
uuid_00000000000c42ad:
	push %RBP
	mov -1400(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c42aa
	jmp uuid_00000000000c42ac
uuid_00000000000c42aa:
	movb $1, -1416(%rbp)
uuid_00000000000c42ac:
	mov -1432(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000c42af:
	mov -1424(%RBP),%RSP
	add $-1440, %RSP
	mov -1416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c42b1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c42b0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c42b3
uuid_00000000000c42b1:
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -1448(%RBP), %RAX
	mov -208(%RBP), %R14
	addq %R14,%RAX
	push %RAX
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq $uuid_00000000000c3169
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1008(%RBP)
	popq -1000(%RBP)
	popq -992(%RBP)
	popq -984(%RBP)
	popq -976(%RBP)
	popq -968(%RBP)
	popq -960(%RBP)
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
	popq -912(%RBP)
	popq -904(%RBP)
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
	popq -872(%RBP)
	popq -864(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1056(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c42b3:
	mov -1384(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c42ba:
	mov -1296(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c42be:
	mov -632(%RBP),%RSP
	add $-1456, %RSP
	jmp uuid_00000000000c42c1
uuid_00000000000c42bf:
uuid_00000000000c42c1:
	mov -424(%RBP),%RSP
	add $-624, %RSP
	subq $200, %rsp
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $216, %rsp
	ret
cc_SB_blob_CL_ArrowFragmentConsI64ConsASTConsStringFContext:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	push %RBP
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c42cb
	jmp uuid_00000000000c42cd
uuid_00000000000c42cb:
	push %RBP
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	jmp uuid_00000000000c42c8
	jmp uuid_00000000000c42ca
uuid_00000000000c42c8:
	push %RBP
	mov -720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c42c5
	jmp uuid_00000000000c42c7
uuid_00000000000c42c5:
	push %RBP
	mov -712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c42c2
	jmp uuid_00000000000c42c4
uuid_00000000000c42c2:
	movb $1, -760(%rbp)
uuid_00000000000c42c4:
	mov -888(%RBP),%RSP
	add $-960, %RSP
uuid_00000000000c42c7:
	mov -808(%RBP),%RSP
	add $-960, %RSP
uuid_00000000000c42ca:
	mov -776(%RBP),%RSP
	add $-960, %RSP
uuid_00000000000c42cd:
	mov -768(%RBP),%RSP
	add $-960, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c42d3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c42d2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c42d5
uuid_00000000000c42d3:
#call function cc-args : Arrow<Cons<Cons<Cons<Cons<FContext,FContext>,AST>,AST>,I64>,Tuple<I64,Tuple<FContext,FContext>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used424
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	mov -968(%RBP), %RAX
	movq %RAX, -288(%rbp)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	pushq -1152(%RBP)
	pushq -1160(%RBP)
	pushq -1168(%RBP)
	pushq -1176(%RBP)
	pushq -1184(%RBP)
	pushq -1192(%RBP)
	pushq -1200(%RBP)
	pushq -1208(%RBP)
	pushq -1216(%RBP)
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	pushq -1256(%RBP)
	pushq -1264(%RBP)
	pushq -1272(%RBP)
	pushq -1280(%RBP)
	pushq -1288(%RBP)
	pushq -1296(%RBP)
	pushq -1304(%RBP)
	pushq -1312(%RBP)
	pushq -1320(%RBP)
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	pushq -1656(%RBP)
	pushq -1664(%RBP)
	pushq -1672(%RBP)
	pushq -1680(%RBP)
	pushq -1688(%RBP)
	pushq -1696(%RBP)
	pushq -1704(%RBP)
	pushq -1712(%RBP)
	pushq -1720(%RBP)
	pushq -1728(%RBP)
	pushq -1736(%RBP)
	pushq -1744(%RBP)
	pushq -1752(%RBP)
	pushq -1760(%RBP)
	pushq -1768(%RBP)
	pushq -1776(%RBP)
	pushq -1784(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000c13d5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c42cf
	jmp uuid_00000000000c42d1
uuid_00000000000c42cf:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c41e2
	pushq $0
	pushq $0
	pushq $3
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq $uuid_00000000000c41e2
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c42ce
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -1992(%RBP)
	popq -1984(%RBP)
	popq -1976(%RBP)
	popq -1968(%RBP)
	popq -1960(%RBP)
	popq -1952(%RBP)
	popq -1944(%RBP)
	popq -1936(%RBP)
	popq -1928(%RBP)
	popq -1920(%RBP)
	popq -1912(%RBP)
	popq -1904(%RBP)
	popq -1896(%RBP)
	popq -1888(%RBP)
	popq -1880(%RBP)
	popq -1872(%RBP)
	popq -1864(%RBP)
	popq -1856(%RBP)
	popq -1848(%RBP)
	popq -1840(%RBP)
	popq -1832(%RBP)
	popq -1824(%RBP)
	popq -1816(%RBP)
	popq -1808(%RBP)
	popq -1800(%RBP)
uuid_00000000000c42d1:
	mov -2000(%RBP),%RSP
	add $-2152, %RSP
#call function blob-render : Arrow<Cons<Cons<Cons<FContext,AST>,Fragment>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_CL_ArrowFragmentConsI64ConsFragmentConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
#call function range : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call range_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
uuid_00000000000c42d5:
	mov -680(%RBP),%RSP
	add $-2224, %RSP
	subq $152, %rsp
	pushq -600(%rbp)
	pushq -592(%rbp)
	pushq -584(%rbp)
	pushq -576(%rbp)
	pushq -568(%rbp)
	pushq -560(%rbp)
	pushq -552(%rbp)
	pushq -544(%rbp)
	pushq -536(%rbp)
	pushq -528(%rbp)
	pushq -520(%rbp)
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $296, %rsp
	ret
cc_SB_blob_CL_ArrowFragmentConsASTConsI64ConsTypeConsStringFContext:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	push %RBP
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq $0
	push %RBP
	mov -776(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c42df
	jmp uuid_00000000000c42e1
uuid_00000000000c42df:
	push %RBP
	pushq -752(%RBP)
	pushq -760(%RBP)
	pushq -768(%RBP)
	jmp uuid_00000000000c42dc
	jmp uuid_00000000000c42de
uuid_00000000000c42dc:
	push %RBP
	mov -744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c42d9
	jmp uuid_00000000000c42db
uuid_00000000000c42d9:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c42d6
	jmp uuid_00000000000c42d8
uuid_00000000000c42d6:
	movb $1, -784(%rbp)
uuid_00000000000c42d8:
	mov -912(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c42db:
	mov -832(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c42de:
	mov -800(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c42e1:
	mov -792(%RBP),%RSP
	add $-984, %RSP
	mov -784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c42e3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c42e2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c42e5
uuid_00000000000c42e3:
#call function blob-render : Arrow<Cons<Cons<Cons<FContext,AST>,Fragment>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_CL_ArrowFragmentConsI64ConsFragmentConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
#call function range : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call range_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
uuid_00000000000c42e5:
	mov -704(%RBP),%RSP
	add $-1056, %RSP
	subq $152, %rsp
	pushq -624(%rbp)
	pushq -616(%rbp)
	pushq -608(%rbp)
	pushq -600(%rbp)
	pushq -592(%rbp)
	pushq -584(%rbp)
	pushq -576(%rbp)
	pushq -568(%rbp)
	pushq -560(%rbp)
	pushq -552(%rbp)
	pushq -544(%rbp)
	pushq -536(%rbp)
	pushq -528(%rbp)
	pushq -520(%rbp)
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $320, %rsp
	ret
cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext:
	pushq -552(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	push %RBP
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq $0
	push %RBP
	mov -720(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4316
	jmp uuid_00000000000c4318
uuid_00000000000c4316:
	push %RBP
	mov -712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -816(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c430d
	jmp uuid_00000000000c430f
uuid_00000000000c430d:
	push %RBP
	mov -808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -912(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c42fb
	jmp uuid_00000000000c42fd
uuid_00000000000c42fb:
	push %RBP
	mov -904(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1008(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c42e9
	jmp uuid_00000000000c42eb
uuid_00000000000c42e9:
	push %RBP
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	jmp uuid_00000000000c42e6
	jmp uuid_00000000000c42e8
uuid_00000000000c42e6:
	movb $1, -1016(%rbp)
uuid_00000000000c42e8:
	mov -1032(%RBP),%RSP
	add $-1056, %RSP
uuid_00000000000c42eb:
	mov -1024(%RBP),%RSP
	add $-1056, %RSP
	mov -1016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c42f8
	jmp uuid_00000000000c42fa
uuid_00000000000c42f8:
	push %RBP
	mov -896(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1136(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c42f2
	jmp uuid_00000000000c42f4
uuid_00000000000c42f2:
	push %RBP
	jmp uuid_00000000000c42ef
	jmp uuid_00000000000c42f1
uuid_00000000000c42ef:
	push %RBP
	mov -1072(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c42ec
	jmp uuid_00000000000c42ee
uuid_00000000000c42ec:
	movb $1, -1144(%rbp)
uuid_00000000000c42ee:
	mov -1168(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000c42f1:
	mov -1160(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000c42f4:
	mov -1152(%RBP),%RSP
	add $-1176, %RSP
	mov -1144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c42f5
	jmp uuid_00000000000c42f7
uuid_00000000000c42f5:
	movb $1, -920(%rbp)
uuid_00000000000c42f7:
	mov -1064(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000c42fa:
	mov -936(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000c42fd:
	mov -928(%RBP),%RSP
	add $-1176, %RSP
	mov -920(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c430a
	jmp uuid_00000000000c430c
uuid_00000000000c430a:
	push %RBP
	mov -800(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1256(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4304
	jmp uuid_00000000000c4306
uuid_00000000000c4304:
	push %RBP
	jmp uuid_00000000000c4301
	jmp uuid_00000000000c4303
uuid_00000000000c4301:
	push %RBP
	mov -1192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1296(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c42fe
	jmp uuid_00000000000c4300
uuid_00000000000c42fe:
	movb $1, -1264(%rbp)
uuid_00000000000c4300:
	mov -1288(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000c4303:
	mov -1280(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000c4306:
	mov -1272(%RBP),%RSP
	add $-1296, %RSP
	mov -1264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4307
	jmp uuid_00000000000c4309
uuid_00000000000c4307:
	movb $1, -824(%rbp)
uuid_00000000000c4309:
	mov -1184(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000c430c:
	mov -840(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000c430f:
	mov -832(%RBP),%RSP
	add $-1296, %RSP
	mov -824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4313
	jmp uuid_00000000000c4315
uuid_00000000000c4313:
	push %RBP
	mov -704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4310
	jmp uuid_00000000000c4312
uuid_00000000000c4310:
	movb $1, -728(%rbp)
uuid_00000000000c4312:
	mov -1304(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000c4315:
	mov -744(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000c4318:
	mov -736(%RBP),%RSP
	add $-1376, %RSP
	mov -728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c43a7
	push %RBP
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq $0
	push %RBP
	mov -1456(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c437a
	jmp uuid_00000000000c437c
uuid_00000000000c437a:
	push %RBP
	mov -1448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1552(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4368
	jmp uuid_00000000000c436a
uuid_00000000000c4368:
	push %RBP
	mov -1544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1648(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4356
	jmp uuid_00000000000c4358
uuid_00000000000c4356:
	push %RBP
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	jmp uuid_00000000000c4353
	jmp uuid_00000000000c4355
uuid_00000000000c4353:
	movb $1, -1656(%rbp)
uuid_00000000000c4355:
	mov -1672(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000c4358:
	mov -1664(%RBP),%RSP
	add $-1696, %RSP
	mov -1656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4365
	jmp uuid_00000000000c4367
uuid_00000000000c4365:
	push %RBP
	mov -1536(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1776(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c435f
	jmp uuid_00000000000c4361
uuid_00000000000c435f:
	push %RBP
	jmp uuid_00000000000c435c
	jmp uuid_00000000000c435e
uuid_00000000000c435c:
	push %RBP
	mov -1712(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4359
	jmp uuid_00000000000c435b
uuid_00000000000c4359:
	movb $1, -1784(%rbp)
uuid_00000000000c435b:
	mov -1808(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000c435e:
	mov -1800(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000c4361:
	mov -1792(%RBP),%RSP
	add $-1816, %RSP
	mov -1784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4362
	jmp uuid_00000000000c4364
uuid_00000000000c4362:
	movb $1, -1560(%rbp)
uuid_00000000000c4364:
	mov -1704(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000c4367:
	mov -1576(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000c436a:
	mov -1568(%RBP),%RSP
	add $-1816, %RSP
	mov -1560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4377
	jmp uuid_00000000000c4379
uuid_00000000000c4377:
	push %RBP
	mov -1440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1896(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4371
	jmp uuid_00000000000c4373
uuid_00000000000c4371:
	push %RBP
	jmp uuid_00000000000c436e
	jmp uuid_00000000000c4370
uuid_00000000000c436e:
	push %RBP
	mov -1832(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1936(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c436b
	jmp uuid_00000000000c436d
uuid_00000000000c436b:
	movb $1, -1904(%rbp)
uuid_00000000000c436d:
	mov -1928(%RBP),%RSP
	add $-1936, %RSP
uuid_00000000000c4370:
	mov -1920(%RBP),%RSP
	add $-1936, %RSP
uuid_00000000000c4373:
	mov -1912(%RBP),%RSP
	add $-1936, %RSP
	mov -1904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4374
	jmp uuid_00000000000c4376
uuid_00000000000c4374:
	movb $1, -1464(%rbp)
uuid_00000000000c4376:
	mov -1824(%RBP),%RSP
	add $-1936, %RSP
uuid_00000000000c4379:
	mov -1480(%RBP),%RSP
	add $-1936, %RSP
uuid_00000000000c437c:
	mov -1472(%RBP),%RSP
	add $-1936, %RSP
	mov -1464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c43a4
	push %RBP
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	mov -2016(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c43a1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c43a0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c43a3
uuid_00000000000c43a1:
uuid_00000000000c43a3:
	mov -1944(%RBP),%RSP
	add $-2016, %RSP
	jmp uuid_00000000000c43a6
uuid_00000000000c43a4:
	push %RBP
#call function is-cons : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_cons_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c439d
	push %RBP
#call function is-vararg : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call is_SB_vararg_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c439a
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4394
	jmp uuid_00000000000c4396
uuid_00000000000c4394:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c4396:
	mov -1960(%RBP),%RSP
	add $-1960, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
#call function is-impure-offset : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call is_SB_impure_SB_offset_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4397
	jmp uuid_00000000000c4399
uuid_00000000000c4397:
	mov -2048(%RBP), %RAX
	movq %RAX, -552(%rbp)
uuid_00000000000c4399:
	mov -2120(%RBP),%RSP
	add $-2120, %RSP
	mov -2080(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1816(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c439c
uuid_00000000000c439a:
#call function get-vararg-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call get_SB_vararg_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1696(%RBP)
	popq -1688(%RBP)
	popq -1680(%RBP)
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4391
	jmp uuid_00000000000c4393
uuid_00000000000c4391:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c4393:
	mov -1960(%RBP),%RSP
	add $-1960, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	mov -2080(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function bind-vararg : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1816(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	mov %RBX, %RBP
	call bind_SB_vararg_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c439c:
	mov -1952(%RBP),%RSP
	add $-2112, %RSP
	jmp uuid_00000000000c439f
uuid_00000000000c439d:
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	push %RBP
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq $0
	push %RBP
	mov -2096(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4383
	jmp uuid_00000000000c4385
uuid_00000000000c4383:
	push %RBP
	mov -2088(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4380
	jmp uuid_00000000000c4382
uuid_00000000000c4380:
	push %RBP
	mov -2080(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c437d
	jmp uuid_00000000000c437f
uuid_00000000000c437d:
	movb $1, -2104(%rbp)
uuid_00000000000c437f:
	mov -2200(%RBP),%RSP
	add $-2272, %RSP
uuid_00000000000c4382:
	mov -2120(%RBP),%RSP
	add $-2272, %RSP
uuid_00000000000c4385:
	mov -2112(%RBP),%RSP
	add $-2272, %RSP
	mov -2104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c438e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c438d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4390
uuid_00000000000c438e:
	push %RBP
#call function is-vararg : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call is_SB_vararg_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c438a
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4389
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c438c
uuid_00000000000c438a:
#call function get-vararg-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call get_SB_vararg_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1696(%RBP)
	popq -1688(%RBP)
	popq -1680(%RBP)
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4386
	jmp uuid_00000000000c4388
uuid_00000000000c4386:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c4388:
	mov -2288(%RBP),%RSP
	add $-2288, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	mov -2408(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function bind-vararg : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1816(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
	pushq -2336(%rbp)
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	pushq -2408(%rbp)
	pushq -2416(%rbp)
	pushq -2424(%rbp)
	pushq -2432(%rbp)
	pushq -2440(%rbp)
	mov %RBX, %RBP
	call bind_SB_vararg_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function cc-args : Arrow<Cons<Cons<Cons<Cons<FContext,FContext>,AST>,AST>,I64>,Tuple<I64,Tuple<FContext,FContext>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -552(%rbp)
	mov %RBX, %RBP
	call cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used424
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq -2560(%RBP)
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq -2592(%RBP)
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	pushq -2624(%RBP)
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	pushq -2656(%RBP)
	pushq -2664(%RBP)
	pushq -2672(%RBP)
	pushq -2680(%RBP)
	pushq -2688(%RBP)
	pushq -2696(%RBP)
	pushq -2704(%RBP)
	pushq -2712(%RBP)
	pushq -2720(%RBP)
	pushq -2728(%RBP)
	pushq -2736(%RBP)
	pushq -2744(%RBP)
	pushq -2752(%RBP)
	pushq -2760(%RBP)
	pushq -2768(%RBP)
	pushq -2776(%RBP)
	pushq -2784(%RBP)
	pushq -2792(%RBP)
	pushq -2800(%RBP)
	pushq -2808(%RBP)
	pushq -2816(%RBP)
	pushq -2824(%RBP)
	pushq -2832(%RBP)
	pushq -2840(%RBP)
	pushq -2848(%RBP)
	pushq -2856(%RBP)
	pushq -2872(%RBP)
	pushq -2880(%RBP)
	pushq -2888(%RBP)
	pushq -2896(%RBP)
	pushq -2904(%RBP)
	pushq -2912(%RBP)
	pushq -2920(%RBP)
	pushq -2928(%RBP)
	pushq -2936(%RBP)
	pushq -2944(%RBP)
	pushq -2952(%RBP)
	pushq -2960(%RBP)
	pushq -2968(%RBP)
	pushq -2976(%RBP)
	pushq -2984(%RBP)
	pushq -2992(%RBP)
	pushq -3000(%RBP)
	pushq -3008(%RBP)
	pushq -3016(%RBP)
	pushq -3024(%RBP)
	pushq -3032(%RBP)
	pushq -3040(%RBP)
	pushq -3048(%RBP)
	pushq -3056(%RBP)
	pushq -3064(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -3072(%RBP)
	pushq -3080(%RBP)
	pushq -3088(%RBP)
	pushq -3096(%RBP)
	pushq -3104(%RBP)
	pushq -3112(%RBP)
	pushq -3120(%RBP)
	pushq -3128(%RBP)
	pushq -3136(%RBP)
	pushq -3144(%RBP)
	pushq -3152(%RBP)
	pushq -3160(%RBP)
	pushq -3168(%RBP)
	pushq -3176(%RBP)
	pushq -3184(%RBP)
	pushq -3192(%RBP)
	pushq -3200(%RBP)
	pushq -3208(%RBP)
	pushq -3216(%RBP)
	pushq -3224(%RBP)
	pushq -3232(%RBP)
	pushq -3240(%RBP)
	pushq -3248(%RBP)
	pushq -3256(%RBP)
	pushq -3264(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	mov -2448(%RBP), %RAX
	movq %RAX, -552(%rbp)
uuid_00000000000c438c:
	mov -2280(%RBP),%RSP
	add $-3272, %RSP
uuid_00000000000c4390:
	mov -2024(%RBP),%RSP
	add $-3272, %RSP
uuid_00000000000c439f:
	mov -1944(%RBP),%RSP
	add $-3272, %RSP
uuid_00000000000c43a6:
	mov -1384(%RBP),%RSP
	add $-3272, %RSP
	jmp uuid_00000000000c43a9
uuid_00000000000c43a7:
	push %RBP
#call function is-cons : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_cons_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c434d
	push %RBP
#call function is-vararg : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_vararg_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c434a
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4344
	jmp uuid_00000000000c4346
uuid_00000000000c4344:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c4346:
	mov -1400(%RBP),%RSP
	add $-1400, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4347
	jmp uuid_00000000000c4349
uuid_00000000000c4347:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -552(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -552(%rbp)
uuid_00000000000c4349:
	mov -1560(%RBP),%RSP
	add $-1560, %RSP
	mov -1520(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1176(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c434c
uuid_00000000000c434a:
#call function get-vararg-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call get_SB_vararg_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1056(%RBP)
	popq -1048(%RBP)
	popq -1040(%RBP)
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4341
#call function cc-args : Arrow<Cons<Cons<Cons<Cons<FContext,FContext>,AST>,AST>,I64>,Tuple<I64,Tuple<FContext,FContext>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	mov %RBX, %RBP
	call cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used424
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	pushq -1656(%RBP)
	pushq -1664(%RBP)
	pushq -1672(%RBP)
	pushq -1680(%RBP)
	pushq -1688(%RBP)
	pushq -1696(%RBP)
	pushq -1704(%RBP)
	pushq -1712(%RBP)
	pushq -1720(%RBP)
	pushq -1728(%RBP)
	pushq -1736(%RBP)
	pushq -1744(%RBP)
	pushq -1752(%RBP)
	pushq -1760(%RBP)
	pushq -1768(%RBP)
	pushq -1776(%RBP)
	pushq -1784(%RBP)
	pushq -1792(%RBP)
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	pushq -1856(%RBP)
	pushq -1864(%RBP)
	pushq -1872(%RBP)
	pushq -1880(%RBP)
	pushq -1888(%RBP)
	pushq -1896(%RBP)
	pushq -1904(%RBP)
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -2032(%RBP)
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2152(%RBP)
	pushq -2160(%RBP)
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	pushq -2224(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	mov -1408(%RBP), %RAX
	movq %RAX, -552(%rbp)
	jmp uuid_00000000000c4343
uuid_00000000000c4341:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c433b
	jmp uuid_00000000000c433d
uuid_00000000000c433b:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c433d:
	mov -1408(%RBP),%RSP
	add $-1408, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c433e
	jmp uuid_00000000000c4340
uuid_00000000000c433e:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -552(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -552(%rbp)
uuid_00000000000c4340:
	mov -1568(%RBP),%RSP
	add $-1568, %RSP
	mov -1528(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function bind-vararg : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1176(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	mov %RBX, %RBP
	call bind_SB_vararg_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c4343:
	mov -1400(%RBP),%RSP
	add $-1568, %RSP
uuid_00000000000c434c:
	mov -1392(%RBP),%RSP
	add $-1568, %RSP
	jmp uuid_00000000000c434f
uuid_00000000000c434d:
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	push %RBP
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq $0
	push %RBP
	mov -1536(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c431f
	jmp uuid_00000000000c4321
uuid_00000000000c431f:
	push %RBP
	mov -1528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c431c
	jmp uuid_00000000000c431e
uuid_00000000000c431c:
	push %RBP
	mov -1520(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4319
	jmp uuid_00000000000c431b
uuid_00000000000c4319:
	movb $1, -1544(%rbp)
uuid_00000000000c431b:
	mov -1640(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000c431e:
	mov -1560(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000c4321:
	mov -1552(%RBP),%RSP
	add $-1712, %RSP
	mov -1544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4338
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c4337
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c433a
uuid_00000000000c4338:
	push %RBP
#call function is-vararg : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_vararg_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4334
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c432b
	jmp uuid_00000000000c432d
uuid_00000000000c432b:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c432d:
	mov -1728(%RBP),%RSP
	add $-1728, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
#call function is-impure-offset : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_impure_SB_offset_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c432e
	jmp uuid_00000000000c4330
uuid_00000000000c432e:
	mov -1816(%RBP), %RAX
	movq %RAX, -552(%rbp)
uuid_00000000000c4330:
	mov -1888(%RBP),%RSP
	add $-1888, %RSP
	push %RBP
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4331
	jmp uuid_00000000000c4333
uuid_00000000000c4331:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -552(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -552(%rbp)
uuid_00000000000c4333:
	mov -1896(%RBP),%RSP
	add $-1896, %RSP
	mov -1848(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1176(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function cc-args : Arrow<Cons<Cons<Cons<Cons<FContext,FContext>,AST>,AST>,I64>,Tuple<I64,Tuple<FContext,FContext>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -552(%rbp)
	mov %RBX, %RBP
	call cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used424
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	pushq -2032(%RBP)
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2152(%RBP)
	pushq -2160(%RBP)
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	pushq -2224(%RBP)
	pushq -2232(%RBP)
	pushq -2240(%RBP)
	pushq -2248(%RBP)
	pushq -2256(%RBP)
	pushq -2264(%RBP)
	pushq -2272(%RBP)
	pushq -2280(%RBP)
	pushq -2288(%RBP)
	pushq -2296(%RBP)
	pushq -2304(%RBP)
	pushq -2312(%RBP)
	pushq -2328(%RBP)
	pushq -2336(%RBP)
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	pushq -2360(%RBP)
	pushq -2368(%RBP)
	pushq -2376(%RBP)
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq -2560(%RBP)
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq -2592(%RBP)
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	pushq -2624(%RBP)
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	pushq -2656(%RBP)
	pushq -2664(%RBP)
	pushq -2672(%RBP)
	pushq -2680(%RBP)
	pushq -2688(%RBP)
	pushq -2696(%RBP)
	pushq -2704(%RBP)
	pushq -2712(%RBP)
	pushq -2720(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	mov -1904(%RBP), %RAX
	movq %RAX, -552(%rbp)
	jmp uuid_00000000000c4336
uuid_00000000000c4334:
#call function get-vararg-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call get_SB_vararg_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1056(%RBP)
	popq -1048(%RBP)
	popq -1040(%RBP)
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4328
#call function cc-args : Arrow<Cons<Cons<Cons<Cons<FContext,FContext>,AST>,AST>,I64>,Tuple<I64,Tuple<FContext,FContext>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	mov %RBX, %RBP
	call cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used424
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	pushq -1744(%RBP)
	pushq -1752(%RBP)
	pushq -1760(%RBP)
	pushq -1768(%RBP)
	pushq -1776(%RBP)
	pushq -1784(%RBP)
	pushq -1792(%RBP)
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	pushq -1824(%RBP)
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	pushq -1856(%RBP)
	pushq -1864(%RBP)
	pushq -1872(%RBP)
	pushq -1880(%RBP)
	pushq -1888(%RBP)
	pushq -1896(%RBP)
	pushq -1904(%RBP)
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	pushq -2032(%RBP)
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2160(%RBP)
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	pushq -2224(%RBP)
	pushq -2232(%RBP)
	pushq -2240(%RBP)
	pushq -2248(%RBP)
	pushq -2256(%RBP)
	pushq -2264(%RBP)
	pushq -2272(%RBP)
	pushq -2280(%RBP)
	pushq -2288(%RBP)
	pushq -2296(%RBP)
	pushq -2304(%RBP)
	pushq -2312(%RBP)
	pushq -2320(%RBP)
	pushq -2328(%RBP)
	pushq -2336(%RBP)
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -2360(%RBP)
	pushq -2368(%RBP)
	pushq -2376(%RBP)
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	mov -1736(%RBP), %RAX
	movq %RAX, -552(%rbp)
	jmp uuid_00000000000c432a
uuid_00000000000c4328:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4322
	jmp uuid_00000000000c4324
uuid_00000000000c4322:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c4324:
	mov -1736(%RBP),%RSP
	add $-1736, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4325
	jmp uuid_00000000000c4327
uuid_00000000000c4325:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -552(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -552(%rbp)
uuid_00000000000c4327:
	mov -1896(%RBP),%RSP
	add $-1896, %RSP
	mov -1856(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function bind-vararg : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1176(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	mov %RBX, %RBP
	call bind_SB_vararg_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function cc-args : Arrow<Cons<Cons<Cons<Cons<FContext,FContext>,AST>,AST>,I64>,Tuple<I64,Tuple<FContext,FContext>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -552(%rbp)
	mov %RBX, %RBP
	call cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used424
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	pushq -2032(%RBP)
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2152(%RBP)
	pushq -2160(%RBP)
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	pushq -2224(%RBP)
	pushq -2232(%RBP)
	pushq -2240(%RBP)
	pushq -2248(%RBP)
	pushq -2256(%RBP)
	pushq -2264(%RBP)
	pushq -2272(%RBP)
	pushq -2280(%RBP)
	pushq -2288(%RBP)
	pushq -2296(%RBP)
	pushq -2304(%RBP)
	pushq -2312(%RBP)
	pushq -2328(%RBP)
	pushq -2336(%RBP)
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	pushq -2360(%RBP)
	pushq -2368(%RBP)
	pushq -2376(%RBP)
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq -2560(%RBP)
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq -2592(%RBP)
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	pushq -2624(%RBP)
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	pushq -2656(%RBP)
	pushq -2664(%RBP)
	pushq -2672(%RBP)
	pushq -2680(%RBP)
	pushq -2688(%RBP)
	pushq -2696(%RBP)
	pushq -2704(%RBP)
	pushq -2712(%RBP)
	pushq -2720(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	mov -1904(%RBP), %RAX
	movq %RAX, -552(%rbp)
uuid_00000000000c432a:
	mov -1728(%RBP),%RSP
	add $-2728, %RSP
uuid_00000000000c4336:
	mov -1720(%RBP),%RSP
	add $-2728, %RSP
uuid_00000000000c433a:
	mov -1464(%RBP),%RSP
	add $-2728, %RSP
uuid_00000000000c434f:
	mov -1384(%RBP),%RSP
	add $-2728, %RSP
	push %RBP
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4350
	jmp uuid_00000000000c4352
uuid_00000000000c4350:
	movq -568(%rbp), %r15
	movq %r15, -552(%rbp)
	mov -568(%rbp), %r15
	mov %r15, -552(%rbp)
uuid_00000000000c4352:
	mov -2736(%RBP),%RSP
	add $-2736, %RSP
uuid_00000000000c43a9:
	mov -648(%RBP),%RSP
	add $-2736, %RSP
	pushq -552(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq $0
	pushq $0
	subq $424, %rsp
	pushq 424(%rsp)
	pushq 440(%rsp)
	pushq 456(%rsp)
	pushq 472(%rsp)
	pushq 488(%rsp)
	pushq 504(%rsp)
	pushq 520(%rsp)
	pushq 536(%rsp)
	pushq 552(%rsp)
	pushq 568(%rsp)
	pushq 584(%rsp)
	pushq 600(%rsp)
	pushq 616(%rsp)
	pushq 632(%rsp)
	pushq 648(%rsp)
	pushq 664(%rsp)
	pushq 680(%rsp)
	pushq 696(%rsp)
	pushq 712(%rsp)
	pushq 728(%rsp)
	pushq 744(%rsp)
	pushq 760(%rsp)
	pushq 776(%rsp)
	pushq 792(%rsp)
	pushq 808(%rsp)
	pushq 824(%rsp)
	pushq 840(%rsp)
	pushq 856(%rsp)
	pushq 872(%rsp)
	pushq 888(%rsp)
	pushq 904(%rsp)
	pushq 920(%rsp)
	pushq 936(%rsp)
	pushq 952(%rsp)
	pushq 968(%rsp)
	pushq 984(%rsp)
	pushq 1000(%rsp)
	pushq 1016(%rsp)
	pushq 1032(%rsp)
	pushq 1048(%rsp)
	pushq 1064(%rsp)
	pushq 1080(%rsp)
	pushq 1096(%rsp)
	pushq 1112(%rsp)
	pushq 1128(%rsp)
	pushq 1144(%rsp)
	pushq 1160(%rsp)
	pushq 1176(%rsp)
	pushq 1192(%rsp)
	pushq 1208(%rsp)
	pushq 1224(%rsp)
	pushq 1240(%rsp)
	pushq 1256(%rsp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	popq -600(%rbp)
	popq -608(%rbp)
	popq -616(%rbp)
	popq -624(%rbp)
	popq -632(%rbp)
	popq -640(%rbp)
	popq -648(%rbp)
	popq -656(%rbp)
	popq -664(%rbp)
	popq -672(%rbp)
	popq -680(%rbp)
	popq -688(%rbp)
	popq -696(%rbp)
	popq -704(%rbp)
	popq -712(%rbp)
	popq -720(%rbp)
	popq -728(%rbp)
	popq -736(%rbp)
	popq -744(%rbp)
	popq -752(%rbp)
	popq -760(%rbp)
	popq -768(%rbp)
	popq -776(%rbp)
	popq -784(%rbp)
	popq -792(%rbp)
	popq -800(%rbp)
	popq -808(%rbp)
	popq -816(%rbp)
	popq -824(%rbp)
	popq -832(%rbp)
	popq -840(%rbp)
	popq -848(%rbp)
	popq -856(%rbp)
	popq -864(%rbp)
	popq -872(%rbp)
	popq -880(%rbp)
	popq -888(%rbp)
	popq -896(%rbp)
	popq -904(%rbp)
	popq -912(%rbp)
	popq -920(%rbp)
	popq -928(%rbp)
	popq -936(%rbp)
	popq -944(%rbp)
	popq -952(%rbp)
	popq -960(%rbp)
	popq -968(%rbp)
	popq -976(%rbp)
	popq -984(%rbp)
	addq $424, %rsp
	mov %rbp, %rsp
	sub $560, %rsp
	ret
blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext:
	pushq $0
	pushq $0
	pushq $3
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c46c0
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c46bd
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c43b0
	jmp uuid_00000000000c43b2
uuid_00000000000c43b0:
	push %RBP
	jmp uuid_00000000000c43ad
	jmp uuid_00000000000c43af
uuid_00000000000c43ad:
	push %RBP
	mov -568(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c43aa
	jmp uuid_00000000000c43ac
uuid_00000000000c43aa:
	movb $1, -640(%rbp)
uuid_00000000000c43ac:
	mov -664(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c43af:
	mov -656(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c43b2:
	mov -648(%RBP),%RSP
	add $-672, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c46ba
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c43b9
	jmp uuid_00000000000c43bb
uuid_00000000000c43b9:
	push %RBP
	jmp uuid_00000000000c43b6
	jmp uuid_00000000000c43b8
uuid_00000000000c43b6:
	push %RBP
	mov -688(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c43b3
	jmp uuid_00000000000c43b5
uuid_00000000000c43b3:
	movb $1, -760(%rbp)
uuid_00000000000c43b5:
	mov -784(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c43b8:
	mov -776(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c43bb:
	mov -768(%RBP),%RSP
	add $-792, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c46b7
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -872(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c43da
	jmp uuid_00000000000c43dc
uuid_00000000000c43da:
	push %RBP
	mov -864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -968(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c43c8
	jmp uuid_00000000000c43ca
uuid_00000000000c43c8:
	push %RBP
	mov -960(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1064(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c43bf
	jmp uuid_00000000000c43c1
uuid_00000000000c43bf:
	push %RBP
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	jmp uuid_00000000000c43bc
	jmp uuid_00000000000c43be
uuid_00000000000c43bc:
	movb $1, -1072(%rbp)
uuid_00000000000c43be:
	mov -1088(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c43c1:
	mov -1080(%RBP),%RSP
	add $-1112, %RSP
	mov -1072(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c43c5
	jmp uuid_00000000000c43c7
uuid_00000000000c43c5:
	push %RBP
	mov -952(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c43c2
	jmp uuid_00000000000c43c4
uuid_00000000000c43c2:
	movb $1, -976(%rbp)
uuid_00000000000c43c4:
	mov -1120(%RBP),%RSP
	add $-1192, %RSP
uuid_00000000000c43c7:
	mov -992(%RBP),%RSP
	add $-1192, %RSP
uuid_00000000000c43ca:
	mov -984(%RBP),%RSP
	add $-1192, %RSP
	mov -976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c43d7
	jmp uuid_00000000000c43d9
uuid_00000000000c43d7:
	push %RBP
	mov -856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1272(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c43d1
	jmp uuid_00000000000c43d3
uuid_00000000000c43d1:
	push %RBP
	jmp uuid_00000000000c43ce
	jmp uuid_00000000000c43d0
uuid_00000000000c43ce:
	push %RBP
	mov -1208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1312(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c43cb
	jmp uuid_00000000000c43cd
uuid_00000000000c43cb:
	movb $1, -1280(%rbp)
uuid_00000000000c43cd:
	mov -1304(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000c43d0:
	mov -1296(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000c43d3:
	mov -1288(%RBP),%RSP
	add $-1312, %RSP
	mov -1280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c43d4
	jmp uuid_00000000000c43d6
uuid_00000000000c43d4:
	movb $1, -880(%rbp)
uuid_00000000000c43d6:
	mov -1200(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000c43d9:
	mov -896(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000c43dc:
	mov -888(%RBP),%RSP
	add $-1312, %RSP
	mov -880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c46b4
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -1392(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c43fb
	jmp uuid_00000000000c43fd
uuid_00000000000c43fb:
	push %RBP
	mov -1384(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c43e9
	jmp uuid_00000000000c43eb
uuid_00000000000c43e9:
	push %RBP
	mov -1480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1584(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c43e0
	jmp uuid_00000000000c43e2
uuid_00000000000c43e0:
	push %RBP
	pushq -1560(%RBP)
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	jmp uuid_00000000000c43dd
	jmp uuid_00000000000c43df
uuid_00000000000c43dd:
	movb $1, -1592(%rbp)
uuid_00000000000c43df:
	mov -1608(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000c43e2:
	mov -1600(%RBP),%RSP
	add $-1632, %RSP
	mov -1592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c43e6
	jmp uuid_00000000000c43e8
uuid_00000000000c43e6:
	push %RBP
	mov -1472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c43e3
	jmp uuid_00000000000c43e5
uuid_00000000000c43e3:
	movb $1, -1496(%rbp)
uuid_00000000000c43e5:
	mov -1640(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000c43e8:
	mov -1512(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000c43eb:
	mov -1504(%RBP),%RSP
	add $-1712, %RSP
	mov -1496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c43f8
	jmp uuid_00000000000c43fa
uuid_00000000000c43f8:
	push %RBP
	mov -1376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1792(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c43f2
	jmp uuid_00000000000c43f4
uuid_00000000000c43f2:
	push %RBP
	jmp uuid_00000000000c43ef
	jmp uuid_00000000000c43f1
uuid_00000000000c43ef:
	push %RBP
	mov -1728(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1832(%rbp)
	pushq $uuid_00000000000c0f7e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c43ec
	jmp uuid_00000000000c43ee
uuid_00000000000c43ec:
	movb $1, -1800(%rbp)
uuid_00000000000c43ee:
	mov -1824(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000c43f1:
	mov -1816(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000c43f4:
	mov -1808(%RBP),%RSP
	add $-1832, %RSP
	mov -1800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c43f5
	jmp uuid_00000000000c43f7
uuid_00000000000c43f5:
	movb $1, -1400(%rbp)
uuid_00000000000c43f7:
	mov -1720(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000c43fa:
	mov -1416(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000c43fd:
	mov -1408(%RBP),%RSP
	add $-1832, %RSP
	mov -1400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c46b1
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -1912(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c440d
	jmp uuid_00000000000c440f
uuid_00000000000c440d:
	push %RBP
	mov -1904(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c440a
	jmp uuid_00000000000c440c
uuid_00000000000c440a:
	push %RBP
	mov -1896(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2088(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4404
	jmp uuid_00000000000c4406
uuid_00000000000c4404:
	push %RBP
	jmp uuid_00000000000c4401
	jmp uuid_00000000000c4403
uuid_00000000000c4401:
	push %RBP
	mov -2024(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2128(%rbp)
	pushq $uuid_00000000000c12ab
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c43fe
	jmp uuid_00000000000c4400
uuid_00000000000c43fe:
	movb $1, -2096(%rbp)
uuid_00000000000c4400:
	mov -2120(%RBP),%RSP
	add $-2128, %RSP
uuid_00000000000c4403:
	mov -2112(%RBP),%RSP
	add $-2128, %RSP
uuid_00000000000c4406:
	mov -2104(%RBP),%RSP
	add $-2128, %RSP
	mov -2096(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4407
	jmp uuid_00000000000c4409
uuid_00000000000c4407:
	movb $1, -1920(%rbp)
uuid_00000000000c4409:
	mov -2016(%RBP),%RSP
	add $-2128, %RSP
uuid_00000000000c440c:
	mov -1936(%RBP),%RSP
	add $-2128, %RSP
uuid_00000000000c440f:
	mov -1928(%RBP),%RSP
	add $-2128, %RSP
	mov -1920(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c46ae
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -2208(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4484
	jmp uuid_00000000000c4486
uuid_00000000000c4484:
	push %RBP
	mov -2200(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2304(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4450
	jmp uuid_00000000000c4452
uuid_00000000000c4450:
	push %RBP
	mov -2296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c444d
	jmp uuid_00000000000c444f
uuid_00000000000c444d:
	push %RBP
	mov -2288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2480(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4447
	jmp uuid_00000000000c4449
uuid_00000000000c4447:
	push %RBP
	mov -2472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2576(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4429
	jmp uuid_00000000000c442b
uuid_00000000000c4429:
	push %RBP
	mov -2568(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2672(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4416
	jmp uuid_00000000000c4418
uuid_00000000000c4416:
	push %RBP
	jmp uuid_00000000000c4413
	jmp uuid_00000000000c4415
uuid_00000000000c4413:
	push %RBP
	mov -2608(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4410
	jmp uuid_00000000000c4412
uuid_00000000000c4410:
	movb $1, -2680(%rbp)
uuid_00000000000c4412:
	mov -2704(%RBP),%RSP
	add $-2712, %RSP
uuid_00000000000c4415:
	mov -2696(%RBP),%RSP
	add $-2712, %RSP
uuid_00000000000c4418:
	mov -2688(%RBP),%RSP
	add $-2712, %RSP
	mov -2680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4426
	jmp uuid_00000000000c4428
uuid_00000000000c4426:
	push %RBP
	mov -2560(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2792(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4420
	jmp uuid_00000000000c4422
uuid_00000000000c4420:
	push %RBP
	jmp uuid_00000000000c441d
	jmp uuid_00000000000c441f
uuid_00000000000c441d:
	push %RBP
	mov -2728(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2832(%rbp)
	pushq $uuid_00000000000c4419
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c441a
	jmp uuid_00000000000c441c
uuid_00000000000c441a:
	movb $1, -2800(%rbp)
uuid_00000000000c441c:
	mov -2824(%RBP),%RSP
	add $-2832, %RSP
uuid_00000000000c441f:
	mov -2816(%RBP),%RSP
	add $-2832, %RSP
uuid_00000000000c4422:
	mov -2808(%RBP),%RSP
	add $-2832, %RSP
	mov -2800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4423
	jmp uuid_00000000000c4425
uuid_00000000000c4423:
	movb $1, -2584(%rbp)
uuid_00000000000c4425:
	mov -2720(%RBP),%RSP
	add $-2832, %RSP
uuid_00000000000c4428:
	mov -2600(%RBP),%RSP
	add $-2832, %RSP
uuid_00000000000c442b:
	mov -2592(%RBP),%RSP
	add $-2832, %RSP
	mov -2584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4444
	jmp uuid_00000000000c4446
uuid_00000000000c4444:
	push %RBP
	mov -2464(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2912(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c443e
	jmp uuid_00000000000c4440
uuid_00000000000c443e:
	push %RBP
	jmp uuid_00000000000c443b
	jmp uuid_00000000000c443d
uuid_00000000000c443b:
	push %RBP
	mov -2880(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3016(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4438
	jmp uuid_00000000000c443a
uuid_00000000000c4438:
	push %RBP
	mov -2872(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3096(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4432
	jmp uuid_00000000000c4434
uuid_00000000000c4432:
	push %RBP
	jmp uuid_00000000000c442f
	jmp uuid_00000000000c4431
uuid_00000000000c442f:
	push %RBP
	mov -3032(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c442c
	jmp uuid_00000000000c442e
uuid_00000000000c442c:
	movb $1, -3104(%rbp)
uuid_00000000000c442e:
	mov -3128(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000c4431:
	mov -3120(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000c4434:
	mov -3112(%RBP),%RSP
	add $-3136, %RSP
	mov -3104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4435
	jmp uuid_00000000000c4437
uuid_00000000000c4435:
	movb $1, -2920(%rbp)
uuid_00000000000c4437:
	mov -3024(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000c443a:
	mov -2944(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000c443d:
	mov -2936(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000c4440:
	mov -2928(%RBP),%RSP
	add $-3136, %RSP
	mov -2920(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4441
	jmp uuid_00000000000c4443
uuid_00000000000c4441:
	movb $1, -2488(%rbp)
uuid_00000000000c4443:
	mov -2840(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000c4446:
	mov -2504(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000c4449:
	mov -2496(%RBP),%RSP
	add $-3136, %RSP
	mov -2488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c444a
	jmp uuid_00000000000c444c
uuid_00000000000c444a:
	movb $1, -2312(%rbp)
uuid_00000000000c444c:
	mov -2408(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000c444f:
	mov -2328(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000c4452:
	mov -2320(%RBP),%RSP
	add $-3136, %RSP
	mov -2312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4481
	jmp uuid_00000000000c4483
uuid_00000000000c4481:
	push %RBP
	mov -2192(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3216(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c447b
	jmp uuid_00000000000c447d
uuid_00000000000c447b:
	push %RBP
	mov -3208(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3312(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4469
	jmp uuid_00000000000c446b
uuid_00000000000c4469:
	push %RBP
	mov -3304(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3408(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4456
	jmp uuid_00000000000c4458
uuid_00000000000c4456:
	push %RBP
	jmp uuid_00000000000c4453
	jmp uuid_00000000000c4455
uuid_00000000000c4453:
	movb $1, -3416(%rbp)
uuid_00000000000c4455:
	mov -3432(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000c4458:
	mov -3424(%RBP),%RSP
	add $-3432, %RSP
	mov -3416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4466
	jmp uuid_00000000000c4468
uuid_00000000000c4466:
	push %RBP
	mov -3296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3512(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4460
	jmp uuid_00000000000c4462
uuid_00000000000c4460:
	push %RBP
	jmp uuid_00000000000c445d
	jmp uuid_00000000000c445f
uuid_00000000000c445d:
	push %RBP
	mov -3448(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3552(%rbp)
	pushq $uuid_00000000000c4459
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c445a
	jmp uuid_00000000000c445c
uuid_00000000000c445a:
	movb $1, -3520(%rbp)
uuid_00000000000c445c:
	mov -3544(%RBP),%RSP
	add $-3552, %RSP
uuid_00000000000c445f:
	mov -3536(%RBP),%RSP
	add $-3552, %RSP
uuid_00000000000c4462:
	mov -3528(%RBP),%RSP
	add $-3552, %RSP
	mov -3520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4463
	jmp uuid_00000000000c4465
uuid_00000000000c4463:
	movb $1, -3320(%rbp)
uuid_00000000000c4465:
	mov -3440(%RBP),%RSP
	add $-3552, %RSP
uuid_00000000000c4468:
	mov -3336(%RBP),%RSP
	add $-3552, %RSP
uuid_00000000000c446b:
	mov -3328(%RBP),%RSP
	add $-3552, %RSP
	mov -3320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4478
	jmp uuid_00000000000c447a
uuid_00000000000c4478:
	push %RBP
	mov -3200(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3632(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4472
	jmp uuid_00000000000c4474
uuid_00000000000c4472:
	push %RBP
	jmp uuid_00000000000c446f
	jmp uuid_00000000000c4471
uuid_00000000000c446f:
	push %RBP
	mov -3568(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3672(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c446c
	jmp uuid_00000000000c446e
uuid_00000000000c446c:
	movb $1, -3640(%rbp)
uuid_00000000000c446e:
	mov -3664(%RBP),%RSP
	add $-3672, %RSP
uuid_00000000000c4471:
	mov -3656(%RBP),%RSP
	add $-3672, %RSP
uuid_00000000000c4474:
	mov -3648(%RBP),%RSP
	add $-3672, %RSP
	mov -3640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4475
	jmp uuid_00000000000c4477
uuid_00000000000c4475:
	movb $1, -3224(%rbp)
uuid_00000000000c4477:
	mov -3560(%RBP),%RSP
	add $-3672, %RSP
uuid_00000000000c447a:
	mov -3240(%RBP),%RSP
	add $-3672, %RSP
uuid_00000000000c447d:
	mov -3232(%RBP),%RSP
	add $-3672, %RSP
	mov -3224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c447e
	jmp uuid_00000000000c4480
uuid_00000000000c447e:
	movb $1, -2216(%rbp)
uuid_00000000000c4480:
	mov -3144(%RBP),%RSP
	add $-3672, %RSP
uuid_00000000000c4483:
	mov -2232(%RBP),%RSP
	add $-3672, %RSP
uuid_00000000000c4486:
	mov -2224(%RBP),%RSP
	add $-3672, %RSP
	mov -2216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c46ab
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -3752(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c44ef
	jmp uuid_00000000000c44f1
uuid_00000000000c44ef:
	push %RBP
	mov -3744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3848(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c44bb
	jmp uuid_00000000000c44bd
uuid_00000000000c44bb:
	push %RBP
	mov -3840(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c44b8
	jmp uuid_00000000000c44ba
uuid_00000000000c44b8:
	push %RBP
	mov -3832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4024(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c44b2
	jmp uuid_00000000000c44b4
uuid_00000000000c44b2:
	push %RBP
	mov -4016(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c44af
	jmp uuid_00000000000c44b1
uuid_00000000000c44af:
	push %RBP
	mov -4008(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4200(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c44a9
	jmp uuid_00000000000c44ab
uuid_00000000000c44a9:
	push %RBP
	jmp uuid_00000000000c44a6
	jmp uuid_00000000000c44a8
uuid_00000000000c44a6:
	push %RBP
	mov -4168(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4304(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c44a3
	jmp uuid_00000000000c44a5
uuid_00000000000c44a3:
	push %RBP
	mov -4160(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4384(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c449d
	jmp uuid_00000000000c449f
uuid_00000000000c449d:
	push %RBP
	jmp uuid_00000000000c449a
	jmp uuid_00000000000c449c
uuid_00000000000c449a:
	push %RBP
	mov -4320(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4497
	jmp uuid_00000000000c4499
uuid_00000000000c4497:
	movb $1, -4392(%rbp)
uuid_00000000000c4499:
	mov -4416(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000c449c:
	mov -4408(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000c449f:
	mov -4400(%RBP),%RSP
	add $-4424, %RSP
	mov -4392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c44a0
	jmp uuid_00000000000c44a2
uuid_00000000000c44a0:
	movb $1, -4208(%rbp)
uuid_00000000000c44a2:
	mov -4312(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000c44a5:
	mov -4232(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000c44a8:
	mov -4224(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000c44ab:
	mov -4216(%RBP),%RSP
	add $-4424, %RSP
	mov -4208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c44ac
	jmp uuid_00000000000c44ae
uuid_00000000000c44ac:
	movb $1, -4032(%rbp)
uuid_00000000000c44ae:
	mov -4128(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000c44b1:
	mov -4048(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000c44b4:
	mov -4040(%RBP),%RSP
	add $-4424, %RSP
	mov -4032(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c44b5
	jmp uuid_00000000000c44b7
uuid_00000000000c44b5:
	movb $1, -3856(%rbp)
uuid_00000000000c44b7:
	mov -3952(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000c44ba:
	mov -3872(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000c44bd:
	mov -3864(%RBP),%RSP
	add $-4424, %RSP
	mov -3856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c44ec
	jmp uuid_00000000000c44ee
uuid_00000000000c44ec:
	push %RBP
	mov -3736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4504(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c44e6
	jmp uuid_00000000000c44e8
uuid_00000000000c44e6:
	push %RBP
	mov -4496(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4600(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c44d4
	jmp uuid_00000000000c44d6
uuid_00000000000c44d4:
	push %RBP
	mov -4592(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4696(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c44c1
	jmp uuid_00000000000c44c3
uuid_00000000000c44c1:
	push %RBP
	jmp uuid_00000000000c44be
	jmp uuid_00000000000c44c0
uuid_00000000000c44be:
	movb $1, -4704(%rbp)
uuid_00000000000c44c0:
	mov -4720(%RBP),%RSP
	add $-4720, %RSP
uuid_00000000000c44c3:
	mov -4712(%RBP),%RSP
	add $-4720, %RSP
	mov -4704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c44d1
	jmp uuid_00000000000c44d3
uuid_00000000000c44d1:
	push %RBP
	mov -4584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4800(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c44cb
	jmp uuid_00000000000c44cd
uuid_00000000000c44cb:
	push %RBP
	jmp uuid_00000000000c44c8
	jmp uuid_00000000000c44ca
uuid_00000000000c44c8:
	push %RBP
	mov -4736(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4840(%rbp)
	pushq $uuid_00000000000c44c4
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c44c5
	jmp uuid_00000000000c44c7
uuid_00000000000c44c5:
	movb $1, -4808(%rbp)
uuid_00000000000c44c7:
	mov -4832(%RBP),%RSP
	add $-4840, %RSP
uuid_00000000000c44ca:
	mov -4824(%RBP),%RSP
	add $-4840, %RSP
uuid_00000000000c44cd:
	mov -4816(%RBP),%RSP
	add $-4840, %RSP
	mov -4808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c44ce
	jmp uuid_00000000000c44d0
uuid_00000000000c44ce:
	movb $1, -4608(%rbp)
uuid_00000000000c44d0:
	mov -4728(%RBP),%RSP
	add $-4840, %RSP
uuid_00000000000c44d3:
	mov -4624(%RBP),%RSP
	add $-4840, %RSP
uuid_00000000000c44d6:
	mov -4616(%RBP),%RSP
	add $-4840, %RSP
	mov -4608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c44e3
	jmp uuid_00000000000c44e5
uuid_00000000000c44e3:
	push %RBP
	mov -4488(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4920(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c44dd
	jmp uuid_00000000000c44df
uuid_00000000000c44dd:
	push %RBP
	jmp uuid_00000000000c44da
	jmp uuid_00000000000c44dc
uuid_00000000000c44da:
	push %RBP
	mov -4856(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4960(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c44d7
	jmp uuid_00000000000c44d9
uuid_00000000000c44d7:
	movb $1, -4928(%rbp)
uuid_00000000000c44d9:
	mov -4952(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000c44dc:
	mov -4944(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000c44df:
	mov -4936(%RBP),%RSP
	add $-4960, %RSP
	mov -4928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c44e0
	jmp uuid_00000000000c44e2
uuid_00000000000c44e0:
	movb $1, -4512(%rbp)
uuid_00000000000c44e2:
	mov -4848(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000c44e5:
	mov -4528(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000c44e8:
	mov -4520(%RBP),%RSP
	add $-4960, %RSP
	mov -4512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c44e9
	jmp uuid_00000000000c44eb
uuid_00000000000c44e9:
	movb $1, -3760(%rbp)
uuid_00000000000c44eb:
	mov -4432(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000c44ee:
	mov -3776(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000c44f1:
	mov -3768(%RBP),%RSP
	add $-4960, %RSP
	mov -3760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c46a8
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -5040(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c451e
	jmp uuid_00000000000c4520
uuid_00000000000c451e:
	push %RBP
	mov -5032(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5136(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c450b
	jmp uuid_00000000000c450d
uuid_00000000000c450b:
	push %RBP
	mov -5128(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4508
	jmp uuid_00000000000c450a
uuid_00000000000c4508:
	push %RBP
	mov -5120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4505
	jmp uuid_00000000000c4507
uuid_00000000000c4505:
	movb $1, -5144(%rbp)
uuid_00000000000c4507:
	mov -5240(%RBP),%RSP
	add $-5312, %RSP
uuid_00000000000c450a:
	mov -5160(%RBP),%RSP
	add $-5312, %RSP
uuid_00000000000c450d:
	mov -5152(%RBP),%RSP
	add $-5312, %RSP
	mov -5144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c451b
	jmp uuid_00000000000c451d
uuid_00000000000c451b:
	push %RBP
	mov -5024(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5392(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4515
	jmp uuid_00000000000c4517
uuid_00000000000c4515:
	push %RBP
	jmp uuid_00000000000c4512
	jmp uuid_00000000000c4514
uuid_00000000000c4512:
	push %RBP
	mov -5328(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5432(%rbp)
	pushq $uuid_00000000000c450e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c450f
	jmp uuid_00000000000c4511
uuid_00000000000c450f:
	movb $1, -5400(%rbp)
uuid_00000000000c4511:
	mov -5424(%RBP),%RSP
	add $-5432, %RSP
uuid_00000000000c4514:
	mov -5416(%RBP),%RSP
	add $-5432, %RSP
uuid_00000000000c4517:
	mov -5408(%RBP),%RSP
	add $-5432, %RSP
	mov -5400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4518
	jmp uuid_00000000000c451a
uuid_00000000000c4518:
	movb $1, -5048(%rbp)
uuid_00000000000c451a:
	mov -5320(%RBP),%RSP
	add $-5432, %RSP
uuid_00000000000c451d:
	mov -5064(%RBP),%RSP
	add $-5432, %RSP
uuid_00000000000c4520:
	mov -5056(%RBP),%RSP
	add $-5432, %RSP
	mov -5048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c46a5
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -5512(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4534
	jmp uuid_00000000000c4536
uuid_00000000000c4534:
	push %RBP
	jmp uuid_00000000000c4531
	jmp uuid_00000000000c4533
uuid_00000000000c4531:
	push %RBP
	mov -5496(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5616(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c452b
	jmp uuid_00000000000c452d
uuid_00000000000c452b:
	push %RBP
	jmp uuid_00000000000c4528
	jmp uuid_00000000000c452a
uuid_00000000000c4528:
	push %RBP
	mov -5552(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5656(%rbp)
	pushq $uuid_00000000000c4524
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4525
	jmp uuid_00000000000c4527
uuid_00000000000c4525:
	movb $1, -5624(%rbp)
uuid_00000000000c4527:
	mov -5648(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000c452a:
	mov -5640(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000c452d:
	mov -5632(%RBP),%RSP
	add $-5656, %RSP
	mov -5624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c452e
	jmp uuid_00000000000c4530
uuid_00000000000c452e:
	movb $1, -5520(%rbp)
uuid_00000000000c4530:
	mov -5544(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000c4533:
	mov -5536(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000c4536:
	mov -5528(%RBP),%RSP
	add $-5656, %RSP
	mov -5520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c46a2
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -5736(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4547
	jmp uuid_00000000000c4549
uuid_00000000000c4547:
	push %RBP
	mov -5728(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4544
	jmp uuid_00000000000c4546
uuid_00000000000c4544:
	push %RBP
	mov -5720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5912(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c453e
	jmp uuid_00000000000c4540
uuid_00000000000c453e:
	push %RBP
	jmp uuid_00000000000c453b
	jmp uuid_00000000000c453d
uuid_00000000000c453b:
	push %RBP
	mov -5848(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5952(%rbp)
	pushq $uuid_00000000000c4537
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4538
	jmp uuid_00000000000c453a
uuid_00000000000c4538:
	movb $1, -5920(%rbp)
uuid_00000000000c453a:
	mov -5944(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000c453d:
	mov -5936(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000c4540:
	mov -5928(%RBP),%RSP
	add $-5952, %RSP
	mov -5920(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4541
	jmp uuid_00000000000c4543
uuid_00000000000c4541:
	movb $1, -5744(%rbp)
uuid_00000000000c4543:
	mov -5840(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000c4546:
	mov -5760(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000c4549:
	mov -5752(%RBP),%RSP
	add $-5952, %RSP
	mov -5744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c469f
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -6032(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4563
	jmp uuid_00000000000c4565
uuid_00000000000c4563:
	push %RBP
	mov -6024(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6128(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4550
	jmp uuid_00000000000c4552
uuid_00000000000c4550:
	push %RBP
	mov -6120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c454d
	jmp uuid_00000000000c454f
uuid_00000000000c454d:
	push %RBP
	mov -6112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c454a
	jmp uuid_00000000000c454c
uuid_00000000000c454a:
	movb $1, -6136(%rbp)
uuid_00000000000c454c:
	mov -6232(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000c454f:
	mov -6152(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000c4552:
	mov -6144(%RBP),%RSP
	add $-6304, %RSP
	mov -6136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4560
	jmp uuid_00000000000c4562
uuid_00000000000c4560:
	push %RBP
	mov -6016(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6384(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c455a
	jmp uuid_00000000000c455c
uuid_00000000000c455a:
	push %RBP
	jmp uuid_00000000000c4557
	jmp uuid_00000000000c4559
uuid_00000000000c4557:
	push %RBP
	mov -6320(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6424(%rbp)
	pushq $uuid_00000000000c4553
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4554
	jmp uuid_00000000000c4556
uuid_00000000000c4554:
	movb $1, -6392(%rbp)
uuid_00000000000c4556:
	mov -6416(%RBP),%RSP
	add $-6424, %RSP
uuid_00000000000c4559:
	mov -6408(%RBP),%RSP
	add $-6424, %RSP
uuid_00000000000c455c:
	mov -6400(%RBP),%RSP
	add $-6424, %RSP
	mov -6392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c455d
	jmp uuid_00000000000c455f
uuid_00000000000c455d:
	movb $1, -6040(%rbp)
uuid_00000000000c455f:
	mov -6312(%RBP),%RSP
	add $-6424, %RSP
uuid_00000000000c4562:
	mov -6056(%RBP),%RSP
	add $-6424, %RSP
uuid_00000000000c4565:
	mov -6048(%RBP),%RSP
	add $-6424, %RSP
	mov -6040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c469c
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -6504(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4581
	jmp uuid_00000000000c4583
uuid_00000000000c4581:
	push %RBP
	mov -6496(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6600(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c456f
	jmp uuid_00000000000c4571
uuid_00000000000c456f:
	push %RBP
	mov -6592(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c456c
	jmp uuid_00000000000c456e
uuid_00000000000c456c:
	push %RBP
	mov -6584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4569
	jmp uuid_00000000000c456b
uuid_00000000000c4569:
	movb $1, -6608(%rbp)
uuid_00000000000c456b:
	mov -6704(%RBP),%RSP
	add $-6776, %RSP
uuid_00000000000c456e:
	mov -6624(%RBP),%RSP
	add $-6776, %RSP
uuid_00000000000c4571:
	mov -6616(%RBP),%RSP
	add $-6776, %RSP
	mov -6608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c457e
	jmp uuid_00000000000c4580
uuid_00000000000c457e:
	push %RBP
	mov -6488(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6856(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4578
	jmp uuid_00000000000c457a
uuid_00000000000c4578:
	push %RBP
	jmp uuid_00000000000c4575
	jmp uuid_00000000000c4577
uuid_00000000000c4575:
	push %RBP
	mov -6792(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6896(%rbp)
	pushq $uuid_00000000000c10b5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4572
	jmp uuid_00000000000c4574
uuid_00000000000c4572:
	movb $1, -6864(%rbp)
uuid_00000000000c4574:
	mov -6888(%RBP),%RSP
	add $-6896, %RSP
uuid_00000000000c4577:
	mov -6880(%RBP),%RSP
	add $-6896, %RSP
uuid_00000000000c457a:
	mov -6872(%RBP),%RSP
	add $-6896, %RSP
	mov -6864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c457b
	jmp uuid_00000000000c457d
uuid_00000000000c457b:
	movb $1, -6512(%rbp)
uuid_00000000000c457d:
	mov -6784(%RBP),%RSP
	add $-6896, %RSP
uuid_00000000000c4580:
	mov -6528(%RBP),%RSP
	add $-6896, %RSP
uuid_00000000000c4583:
	mov -6520(%RBP),%RSP
	add $-6896, %RSP
	mov -6512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4699
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -6976(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c45a0
	jmp uuid_00000000000c45a2
uuid_00000000000c45a0:
	push %RBP
	mov -6968(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -7072(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c458d
	jmp uuid_00000000000c458f
uuid_00000000000c458d:
	push %RBP
	mov -7064(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c458a
	jmp uuid_00000000000c458c
uuid_00000000000c458a:
	push %RBP
	mov -7056(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4587
	jmp uuid_00000000000c4589
uuid_00000000000c4587:
	movb $1, -7080(%rbp)
uuid_00000000000c4589:
	mov -7176(%RBP),%RSP
	add $-7248, %RSP
uuid_00000000000c458c:
	mov -7096(%RBP),%RSP
	add $-7248, %RSP
uuid_00000000000c458f:
	mov -7088(%RBP),%RSP
	add $-7248, %RSP
	mov -7080(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c459d
	jmp uuid_00000000000c459f
uuid_00000000000c459d:
	push %RBP
	mov -6960(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -7328(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4597
	jmp uuid_00000000000c4599
uuid_00000000000c4597:
	push %RBP
	jmp uuid_00000000000c4594
	jmp uuid_00000000000c4596
uuid_00000000000c4594:
	push %RBP
	mov -7264(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7368(%rbp)
	pushq $uuid_00000000000c4590
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4591
	jmp uuid_00000000000c4593
uuid_00000000000c4591:
	movb $1, -7336(%rbp)
uuid_00000000000c4593:
	mov -7360(%RBP),%RSP
	add $-7368, %RSP
uuid_00000000000c4596:
	mov -7352(%RBP),%RSP
	add $-7368, %RSP
uuid_00000000000c4599:
	mov -7344(%RBP),%RSP
	add $-7368, %RSP
	mov -7336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c459a
	jmp uuid_00000000000c459c
uuid_00000000000c459a:
	movb $1, -6984(%rbp)
uuid_00000000000c459c:
	mov -7256(%RBP),%RSP
	add $-7368, %RSP
uuid_00000000000c459f:
	mov -7000(%RBP),%RSP
	add $-7368, %RSP
uuid_00000000000c45a2:
	mov -6992(%RBP),%RSP
	add $-7368, %RSP
	mov -6984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4696
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -7448(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c45bc
	jmp uuid_00000000000c45be
uuid_00000000000c45bc:
	push %RBP
	mov -7440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -7544(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c45a9
	jmp uuid_00000000000c45ab
uuid_00000000000c45a9:
	push %RBP
	mov -7536(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c45a6
	jmp uuid_00000000000c45a8
uuid_00000000000c45a6:
	push %RBP
	mov -7528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c45a3
	jmp uuid_00000000000c45a5
uuid_00000000000c45a3:
	movb $1, -7552(%rbp)
uuid_00000000000c45a5:
	mov -7648(%RBP),%RSP
	add $-7720, %RSP
uuid_00000000000c45a8:
	mov -7568(%RBP),%RSP
	add $-7720, %RSP
uuid_00000000000c45ab:
	mov -7560(%RBP),%RSP
	add $-7720, %RSP
	mov -7552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c45b9
	jmp uuid_00000000000c45bb
uuid_00000000000c45b9:
	push %RBP
	mov -7432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -7800(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c45b3
	jmp uuid_00000000000c45b5
uuid_00000000000c45b3:
	push %RBP
	jmp uuid_00000000000c45b0
	jmp uuid_00000000000c45b2
uuid_00000000000c45b0:
	push %RBP
	mov -7736(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7840(%rbp)
	pushq $uuid_00000000000c45ac
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c45ad
	jmp uuid_00000000000c45af
uuid_00000000000c45ad:
	movb $1, -7808(%rbp)
uuid_00000000000c45af:
	mov -7832(%RBP),%RSP
	add $-7840, %RSP
uuid_00000000000c45b2:
	mov -7824(%RBP),%RSP
	add $-7840, %RSP
uuid_00000000000c45b5:
	mov -7816(%RBP),%RSP
	add $-7840, %RSP
	mov -7808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c45b6
	jmp uuid_00000000000c45b8
uuid_00000000000c45b6:
	movb $1, -7456(%rbp)
uuid_00000000000c45b8:
	mov -7728(%RBP),%RSP
	add $-7840, %RSP
uuid_00000000000c45bb:
	mov -7472(%RBP),%RSP
	add $-7840, %RSP
uuid_00000000000c45be:
	mov -7464(%RBP),%RSP
	add $-7840, %RSP
	mov -7456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4693
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -7920(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c45d8
	jmp uuid_00000000000c45da
uuid_00000000000c45d8:
	push %RBP
	mov -7912(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8016(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c45c5
	jmp uuid_00000000000c45c7
uuid_00000000000c45c5:
	push %RBP
	mov -8008(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c45c2
	jmp uuid_00000000000c45c4
uuid_00000000000c45c2:
	push %RBP
	mov -8000(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c45bf
	jmp uuid_00000000000c45c1
uuid_00000000000c45bf:
	movb $1, -8024(%rbp)
uuid_00000000000c45c1:
	mov -8120(%RBP),%RSP
	add $-8192, %RSP
uuid_00000000000c45c4:
	mov -8040(%RBP),%RSP
	add $-8192, %RSP
uuid_00000000000c45c7:
	mov -8032(%RBP),%RSP
	add $-8192, %RSP
	mov -8024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c45d5
	jmp uuid_00000000000c45d7
uuid_00000000000c45d5:
	push %RBP
	mov -7904(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8272(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c45cf
	jmp uuid_00000000000c45d1
uuid_00000000000c45cf:
	push %RBP
	jmp uuid_00000000000c45cc
	jmp uuid_00000000000c45ce
uuid_00000000000c45cc:
	push %RBP
	mov -8208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8312(%rbp)
	pushq $uuid_00000000000c45c8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c45c9
	jmp uuid_00000000000c45cb
uuid_00000000000c45c9:
	movb $1, -8280(%rbp)
uuid_00000000000c45cb:
	mov -8304(%RBP),%RSP
	add $-8312, %RSP
uuid_00000000000c45ce:
	mov -8296(%RBP),%RSP
	add $-8312, %RSP
uuid_00000000000c45d1:
	mov -8288(%RBP),%RSP
	add $-8312, %RSP
	mov -8280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c45d2
	jmp uuid_00000000000c45d4
uuid_00000000000c45d2:
	movb $1, -7928(%rbp)
uuid_00000000000c45d4:
	mov -8200(%RBP),%RSP
	add $-8312, %RSP
uuid_00000000000c45d7:
	mov -7944(%RBP),%RSP
	add $-8312, %RSP
uuid_00000000000c45da:
	mov -7936(%RBP),%RSP
	add $-8312, %RSP
	mov -7928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4690
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -8392(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c45f3
	jmp uuid_00000000000c45f5
uuid_00000000000c45f3:
	push %RBP
	mov -8384(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c45e1
	jmp uuid_00000000000c45e3
uuid_00000000000c45e1:
	push %RBP
	mov -8480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c45de
	jmp uuid_00000000000c45e0
uuid_00000000000c45de:
	push %RBP
	mov -8472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c45db
	jmp uuid_00000000000c45dd
uuid_00000000000c45db:
	movb $1, -8496(%rbp)
uuid_00000000000c45dd:
	mov -8592(%RBP),%RSP
	add $-8664, %RSP
uuid_00000000000c45e0:
	mov -8512(%RBP),%RSP
	add $-8664, %RSP
uuid_00000000000c45e3:
	mov -8504(%RBP),%RSP
	add $-8664, %RSP
	mov -8496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c45f0
	jmp uuid_00000000000c45f2
uuid_00000000000c45f0:
	push %RBP
	mov -8376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8744(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c45ea
	jmp uuid_00000000000c45ec
uuid_00000000000c45ea:
	push %RBP
	jmp uuid_00000000000c45e7
	jmp uuid_00000000000c45e9
uuid_00000000000c45e7:
	push %RBP
	mov -8680(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8784(%rbp)
	pushq $uuid_00000000000c108e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c45e4
	jmp uuid_00000000000c45e6
uuid_00000000000c45e4:
	movb $1, -8752(%rbp)
uuid_00000000000c45e6:
	mov -8776(%RBP),%RSP
	add $-8784, %RSP
uuid_00000000000c45e9:
	mov -8768(%RBP),%RSP
	add $-8784, %RSP
uuid_00000000000c45ec:
	mov -8760(%RBP),%RSP
	add $-8784, %RSP
	mov -8752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c45ed
	jmp uuid_00000000000c45ef
uuid_00000000000c45ed:
	movb $1, -8400(%rbp)
uuid_00000000000c45ef:
	mov -8672(%RBP),%RSP
	add $-8784, %RSP
uuid_00000000000c45f2:
	mov -8416(%RBP),%RSP
	add $-8784, %RSP
uuid_00000000000c45f5:
	mov -8408(%RBP),%RSP
	add $-8784, %RSP
	mov -8400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c468d
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -8864(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c460e
	jmp uuid_00000000000c4610
uuid_00000000000c460e:
	push %RBP
	mov -8856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8960(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c45fc
	jmp uuid_00000000000c45fe
uuid_00000000000c45fc:
	push %RBP
	mov -8952(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c45f9
	jmp uuid_00000000000c45fb
uuid_00000000000c45f9:
	push %RBP
	mov -8944(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c45f6
	jmp uuid_00000000000c45f8
uuid_00000000000c45f6:
	movb $1, -8968(%rbp)
uuid_00000000000c45f8:
	mov -9064(%RBP),%RSP
	add $-9136, %RSP
uuid_00000000000c45fb:
	mov -8984(%RBP),%RSP
	add $-9136, %RSP
uuid_00000000000c45fe:
	mov -8976(%RBP),%RSP
	add $-9136, %RSP
	mov -8968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c460b
	jmp uuid_00000000000c460d
uuid_00000000000c460b:
	push %RBP
	mov -8848(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -9216(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4605
	jmp uuid_00000000000c4607
uuid_00000000000c4605:
	push %RBP
	jmp uuid_00000000000c4602
	jmp uuid_00000000000c4604
uuid_00000000000c4602:
	push %RBP
	mov -9152(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9256(%rbp)
	pushq $uuid_00000000000c0d84
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c45ff
	jmp uuid_00000000000c4601
uuid_00000000000c45ff:
	movb $1, -9224(%rbp)
uuid_00000000000c4601:
	mov -9248(%RBP),%RSP
	add $-9256, %RSP
uuid_00000000000c4604:
	mov -9240(%RBP),%RSP
	add $-9256, %RSP
uuid_00000000000c4607:
	mov -9232(%RBP),%RSP
	add $-9256, %RSP
	mov -9224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4608
	jmp uuid_00000000000c460a
uuid_00000000000c4608:
	movb $1, -8872(%rbp)
uuid_00000000000c460a:
	mov -9144(%RBP),%RSP
	add $-9256, %RSP
uuid_00000000000c460d:
	mov -8888(%RBP),%RSP
	add $-9256, %RSP
uuid_00000000000c4610:
	mov -8880(%RBP),%RSP
	add $-9256, %RSP
	mov -8872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c468a
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -9336(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4632
	jmp uuid_00000000000c4634
uuid_00000000000c4632:
	push %RBP
	mov -9328(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c462f
	jmp uuid_00000000000c4631
uuid_00000000000c462f:
	push %RBP
	mov -9320(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -9512(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4629
	jmp uuid_00000000000c462b
uuid_00000000000c4629:
	push %RBP
	mov -9504(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4626
	jmp uuid_00000000000c4628
uuid_00000000000c4626:
	push %RBP
	mov -9496(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -9688(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4620
	jmp uuid_00000000000c4622
uuid_00000000000c4620:
	push %RBP
	mov -9680(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c461d
	jmp uuid_00000000000c461f
uuid_00000000000c461d:
	push %RBP
	mov -9672(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -9864(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4617
	jmp uuid_00000000000c4619
uuid_00000000000c4617:
	push %RBP
	jmp uuid_00000000000c4614
	jmp uuid_00000000000c4616
uuid_00000000000c4614:
	push %RBP
	mov -9800(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9904(%rbp)
	pushq $uuid_00000000000c1212
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4611
	jmp uuid_00000000000c4613
uuid_00000000000c4611:
	movb $1, -9872(%rbp)
uuid_00000000000c4613:
	mov -9896(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000c4616:
	mov -9888(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000c4619:
	mov -9880(%RBP),%RSP
	add $-9904, %RSP
	mov -9872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c461a
	jmp uuid_00000000000c461c
uuid_00000000000c461a:
	movb $1, -9696(%rbp)
uuid_00000000000c461c:
	mov -9792(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000c461f:
	mov -9712(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000c4622:
	mov -9704(%RBP),%RSP
	add $-9904, %RSP
	mov -9696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4623
	jmp uuid_00000000000c4625
uuid_00000000000c4623:
	movb $1, -9520(%rbp)
uuid_00000000000c4625:
	mov -9616(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000c4628:
	mov -9536(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000c462b:
	mov -9528(%RBP),%RSP
	add $-9904, %RSP
	mov -9520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c462c
	jmp uuid_00000000000c462e
uuid_00000000000c462c:
	movb $1, -9344(%rbp)
uuid_00000000000c462e:
	mov -9440(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000c4631:
	mov -9360(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000c4634:
	mov -9352(%RBP),%RSP
	add $-9904, %RSP
	mov -9344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4687
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -9984(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c465d
	jmp uuid_00000000000c465f
uuid_00000000000c465d:
	push %RBP
	mov -9976(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c465a
	jmp uuid_00000000000c465c
uuid_00000000000c465a:
	push %RBP
	mov -9968(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -10160(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4654
	jmp uuid_00000000000c4656
uuid_00000000000c4654:
	push %RBP
	pushq -10136(%RBP)
	pushq -10144(%RBP)
	pushq -10152(%RBP)
	jmp uuid_00000000000c4651
	jmp uuid_00000000000c4653
uuid_00000000000c4651:
	push %RBP
	mov -10128(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -10288(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c464e
	jmp uuid_00000000000c4650
uuid_00000000000c464e:
	push %RBP
	mov -10120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -10368(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4648
	jmp uuid_00000000000c464a
uuid_00000000000c4648:
	push %RBP
	jmp uuid_00000000000c4645
	jmp uuid_00000000000c4647
uuid_00000000000c4645:
	push %RBP
	mov -10304(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4642
	jmp uuid_00000000000c4644
uuid_00000000000c4642:
	movb $1, -10376(%rbp)
uuid_00000000000c4644:
	mov -10400(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000c4647:
	mov -10392(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000c464a:
	mov -10384(%RBP),%RSP
	add $-10408, %RSP
	mov -10376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c464b
	jmp uuid_00000000000c464d
uuid_00000000000c464b:
	movb $1, -10168(%rbp)
uuid_00000000000c464d:
	mov -10296(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000c4650:
	mov -10216(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000c4653:
	mov -10184(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000c4656:
	mov -10176(%RBP),%RSP
	add $-10408, %RSP
	mov -10168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4657
	jmp uuid_00000000000c4659
uuid_00000000000c4657:
	movb $1, -9992(%rbp)
uuid_00000000000c4659:
	mov -10088(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000c465c:
	mov -10008(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000c465f:
	mov -10000(%RBP),%RSP
	add $-10408, %RSP
	mov -9992(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4684
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -10488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4666
	jmp uuid_00000000000c4668
uuid_00000000000c4666:
	push %RBP
	mov -10480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4663
	jmp uuid_00000000000c4665
uuid_00000000000c4663:
	push %RBP
	mov -10472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4660
	jmp uuid_00000000000c4662
uuid_00000000000c4660:
	movb $1, -10496(%rbp)
uuid_00000000000c4662:
	mov -10592(%RBP),%RSP
	add $-10664, %RSP
uuid_00000000000c4665:
	mov -10512(%RBP),%RSP
	add $-10664, %RSP
uuid_00000000000c4668:
	mov -10504(%RBP),%RSP
	add $-10664, %RSP
	mov -10496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4681
	push %RBP
	jmp uuid_00000000000c467e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c467d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4680
uuid_00000000000c467e:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c467c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c4680:
	mov -10672(%RBP),%RSP
	add $-10672, %RSP
	jmp uuid_00000000000c4683
uuid_00000000000c4681:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10600(%rbp)
	pushq -10608(%rbp)
	pushq -10616(%rbp)
	pushq -10624(%rbp)
	pushq -10632(%rbp)
	pushq -10640(%rbp)
	pushq -10648(%rbp)
	pushq -10656(%rbp)
	pushq -10664(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4679
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -10600(%rbp)
	pushq -10608(%rbp)
	pushq -10616(%rbp)
	pushq -10624(%rbp)
	pushq -10632(%rbp)
	pushq -10640(%rbp)
	pushq -10648(%rbp)
	pushq -10656(%rbp)
	pushq -10664(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -10680(%RBP)
	pushq -10688(%RBP)
	pushq -10696(%RBP)
	pushq -10704(%RBP)
	pushq -10712(%RBP)
	pushq -10720(%RBP)
	pushq -10728(%RBP)
	pushq -10736(%RBP)
	pushq -10744(%RBP)
	pushq -10752(%RBP)
	pushq -10760(%RBP)
	pushq -10768(%RBP)
	pushq -10776(%RBP)
	pushq -10784(%RBP)
	pushq -10792(%RBP)
	pushq -10800(%RBP)
	pushq -10808(%RBP)
	pushq -10816(%RBP)
	pushq -10824(%RBP)
	pushq -10832(%RBP)
	pushq -10840(%RBP)
	pushq -10848(%RBP)
	pushq -10856(%RBP)
	pushq -10864(%RBP)
	pushq -10872(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -10520(%rbp)
	pushq -10528(%rbp)
	pushq -10536(%rbp)
	pushq -10544(%rbp)
	pushq -10552(%rbp)
	pushq -10560(%rbp)
	pushq -10568(%rbp)
	pushq -10576(%rbp)
	pushq -10584(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -10912(%RBP)
	pushq -10920(%RBP)
	pushq -10928(%RBP)
	pushq -10936(%RBP)
	pushq -10944(%RBP)
	pushq -10952(%RBP)
	pushq -10960(%RBP)
	pushq -10968(%RBP)
	pushq -10976(%RBP)
	pushq -10984(%RBP)
	pushq -10992(%RBP)
	pushq -11000(%RBP)
	pushq -11008(%RBP)
	pushq -11016(%RBP)
	pushq -11024(%RBP)
	pushq -11032(%RBP)
	pushq -11040(%RBP)
	pushq -11048(%RBP)
	pushq -11056(%RBP)
	pushq -11064(%RBP)
	pushq -11072(%RBP)
	pushq -11080(%RBP)
	pushq -11088(%RBP)
	pushq -11096(%RBP)
	pushq -11104(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -10880(%RBP)
	pushq -10888(%RBP)
	pushq -10896(%RBP)
	pushq -11112(%RBP)
	pushq -11120(%RBP)
	pushq -11128(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -11144(%rbp)
	pushq -11152(%rbp)
	pushq -11160(%rbp)
	pushq -11168(%rbp)
	pushq -11176(%rbp)
	pushq -11184(%rbp)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000c467b
uuid_00000000000c4679:
	pushq -10600(%rbp)
	pushq -10608(%rbp)
	pushq -10616(%rbp)
	pushq -10624(%rbp)
	pushq -10632(%rbp)
	pushq -10640(%rbp)
	pushq -10648(%rbp)
	pushq -10656(%rbp)
	pushq -10664(%rbp)
	push %RBP
	pushq -10680(%rbp)
	pushq -10688(%rbp)
	pushq -10696(%rbp)
	pushq -10704(%rbp)
	pushq -10712(%rbp)
	pushq -10720(%rbp)
	pushq -10728(%rbp)
	pushq -10736(%rbp)
	pushq -10744(%rbp)
	pushq $0
	push %RBP
	mov -10824(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c466f
	jmp uuid_00000000000c4671
uuid_00000000000c466f:
	push %RBP
	jmp uuid_00000000000c466c
	jmp uuid_00000000000c466e
uuid_00000000000c466c:
	push %RBP
	mov -10760(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4669
	jmp uuid_00000000000c466b
uuid_00000000000c4669:
	movb $1, -10832(%rbp)
uuid_00000000000c466b:
	mov -10856(%RBP),%RSP
	add $-10864, %RSP
uuid_00000000000c466e:
	mov -10848(%RBP),%RSP
	add $-10864, %RSP
uuid_00000000000c4671:
	mov -10840(%RBP),%RSP
	add $-10864, %RSP
	mov -10832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4676
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c4675
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4678
uuid_00000000000c4676:
	push %RBP
#call function has-prefix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10864(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call has_SB_prefix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4672
#call function cc-blob : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -10864(%rbp)
	pushq -10520(%rbp)
	pushq -10528(%rbp)
	pushq -10536(%rbp)
	pushq -10544(%rbp)
	pushq -10552(%rbp)
	pushq -10560(%rbp)
	pushq -10568(%rbp)
	pushq -10576(%rbp)
	pushq -10584(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10880(%rbp)
	pushq -10888(%rbp)
	pushq -10896(%rbp)
	pushq -10904(%rbp)
	pushq -10912(%rbp)
	pushq -10920(%rbp)
	pushq -10928(%rbp)
	pushq -10936(%rbp)
	pushq -10944(%rbp)
	pushq -10952(%rbp)
	pushq -10960(%rbp)
	pushq -10968(%rbp)
	pushq -10976(%rbp)
	pushq -10984(%rbp)
	pushq -10992(%rbp)
	pushq -11000(%rbp)
	pushq -11008(%rbp)
	pushq -11016(%rbp)
	pushq -11024(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000c4674
uuid_00000000000c4672:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -10864(%RBP), %RAX
	inc %RAX
	push %RAX
	pushq -10520(%rbp)
	pushq -10528(%rbp)
	pushq -10536(%rbp)
	pushq -10544(%rbp)
	pushq -10552(%rbp)
	pushq -10560(%rbp)
	pushq -10568(%rbp)
	pushq -10576(%rbp)
	pushq -10584(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -11080(%RBP)
	pushq -11088(%RBP)
	pushq -11096(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c4674:
	mov -10872(%RBP),%RSP
	add $-11104, %RSP
uuid_00000000000c4678:
	mov -10752(%RBP),%RSP
	add $-11104, %RSP
uuid_00000000000c467b:
	mov -10672(%RBP),%RSP
	add $-11104, %RSP
uuid_00000000000c4683:
	mov -10416(%RBP),%RSP
	add $-11104, %RSP
	jmp uuid_00000000000c4686
uuid_00000000000c4684:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -10016(%rbp)
	pushq -10024(%rbp)
	pushq -10032(%rbp)
	pushq -10040(%rbp)
	pushq -10048(%rbp)
	pushq -10056(%rbp)
	pushq -10064(%rbp)
	pushq -10072(%rbp)
	pushq -10080(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -10768(%RBP)
	pushq -10776(%RBP)
	pushq -10784(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10416(%rbp)
	pushq -10424(%rbp)
	pushq -10432(%rbp)
	pushq -10440(%rbp)
	pushq -10448(%rbp)
	pushq -10456(%rbp)
	pushq -10464(%rbp)
	pushq -10472(%rbp)
	pushq -10480(%rbp)
	pushq -10488(%rbp)
	pushq -10496(%rbp)
	pushq -10504(%rbp)
	pushq -10512(%rbp)
	pushq -10520(%rbp)
	pushq -10528(%rbp)
	pushq -10536(%rbp)
	pushq -10544(%rbp)
	pushq -10552(%rbp)
	pushq -10560(%rbp)
	pushq -208(%rbp)
	pushq -10800(%rbp)
	pushq -10808(%rbp)
	pushq -10816(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -10560(%RBP)
	popq -10552(%RBP)
	popq -10544(%RBP)
	popq -10536(%RBP)
	popq -10528(%RBP)
	popq -10520(%RBP)
	popq -10512(%RBP)
	popq -10504(%RBP)
	popq -10496(%RBP)
	popq -10488(%RBP)
	popq -10480(%RBP)
	popq -10472(%RBP)
	popq -10464(%RBP)
	popq -10456(%RBP)
	popq -10448(%RBP)
	popq -10440(%RBP)
	popq -10432(%RBP)
	popq -10424(%RBP)
	popq -10416(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10416(%rbp)
	pushq -10424(%rbp)
	pushq -10432(%rbp)
	pushq -10440(%rbp)
	pushq -10448(%rbp)
	pushq -10456(%rbp)
	pushq -10464(%rbp)
	pushq -10472(%rbp)
	pushq -10480(%rbp)
	pushq -10488(%rbp)
	pushq -10496(%rbp)
	pushq -10504(%rbp)
	pushq -10512(%rbp)
	pushq -10520(%rbp)
	pushq -10528(%rbp)
	pushq -10536(%rbp)
	pushq -10544(%rbp)
	pushq -10552(%rbp)
	pushq -10560(%rbp)
	pushq $uuid_00000000000c3169
	pushq -10800(%rbp)
	pushq -10808(%rbp)
	pushq -10816(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -10560(%RBP)
	popq -10552(%RBP)
	popq -10544(%RBP)
	popq -10536(%RBP)
	popq -10528(%RBP)
	popq -10520(%RBP)
	popq -10512(%RBP)
	popq -10504(%RBP)
	popq -10496(%RBP)
	popq -10488(%RBP)
	popq -10480(%RBP)
	popq -10472(%RBP)
	popq -10464(%RBP)
	popq -10456(%RBP)
	popq -10448(%RBP)
	popq -10440(%RBP)
	popq -10432(%RBP)
	popq -10424(%RBP)
	popq -10416(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -10408(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10016(%rbp)
	pushq -10024(%rbp)
	pushq -10032(%rbp)
	pushq -10040(%rbp)
	pushq -10048(%rbp)
	pushq -10056(%rbp)
	pushq -10064(%rbp)
	pushq -10072(%rbp)
	pushq -10080(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -10416(%rbp)
	pushq -10424(%rbp)
	pushq -10432(%rbp)
	pushq -10440(%rbp)
	pushq -10448(%rbp)
	pushq -10456(%rbp)
	pushq -10464(%rbp)
	pushq -10472(%rbp)
	pushq -10480(%rbp)
	pushq -10488(%rbp)
	pushq -10496(%rbp)
	pushq -10504(%rbp)
	pushq -10512(%rbp)
	pushq -10520(%rbp)
	pushq -10528(%rbp)
	pushq -10536(%rbp)
	pushq -10544(%rbp)
	pushq -10552(%rbp)
	pushq -10560(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c4686:
	mov -9912(%RBP),%RSP
	add $-10816, %RSP
	jmp uuid_00000000000c4689
uuid_00000000000c4687:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -9720(%rbp)
	pushq -9728(%rbp)
	pushq -9736(%rbp)
	pushq -9744(%rbp)
	pushq -9752(%rbp)
	pushq -9760(%rbp)
	pushq -9768(%rbp)
	pushq -9776(%rbp)
	pushq -9784(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -10112(%RBP)
	pushq -10120(%RBP)
	pushq -10128(%RBP)
	pushq -10144(%rbp)
	pushq -10152(%rbp)
	pushq -10160(%rbp)
	push %RBP
	pushq -10168(%rbp)
	pushq -10176(%rbp)
	pushq -10184(%rbp)
	pushq $0
	push %RBP
	mov -10216(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4638
	jmp uuid_00000000000c463a
uuid_00000000000c4638:
	push %RBP
	mov -10208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10248(%rbp)
	pushq $uuid_00000000000c0db9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4635
	jmp uuid_00000000000c4637
uuid_00000000000c4635:
	movb $1, -10224(%rbp)
uuid_00000000000c4637:
	mov -10240(%RBP),%RSP
	add $-10248, %RSP
uuid_00000000000c463a:
	mov -10232(%RBP),%RSP
	add $-10248, %RSP
	mov -10224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c463f
	push %RBP
	jmp uuid_00000000000c463c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c463b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c463e
uuid_00000000000c463c:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -9368(%rbp)
	pushq -9376(%rbp)
	pushq -9384(%rbp)
	pushq -9392(%rbp)
	pushq -9400(%rbp)
	pushq -9408(%rbp)
	pushq -9416(%rbp)
	pushq -9424(%rbp)
	pushq -9432(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -10464(%RBP)
	pushq -10472(%RBP)
	pushq -10480(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c463e:
	mov -10256(%RBP),%RSP
	add $-10488, %RSP
	jmp uuid_00000000000c4641
uuid_00000000000c463f:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -9544(%rbp)
	pushq -9552(%rbp)
	pushq -9560(%rbp)
	pushq -9568(%rbp)
	pushq -9576(%rbp)
	pushq -9584(%rbp)
	pushq -9592(%rbp)
	pushq -9600(%rbp)
	pushq -9608(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -10456(%RBP)
	pushq -10464(%RBP)
	pushq -10472(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c4641:
	mov -10192(%RBP),%RSP
	add $-10480, %RSP
uuid_00000000000c4689:
	mov -9264(%RBP),%RSP
	add $-10480, %RSP
	jmp uuid_00000000000c468c
uuid_00000000000c468a:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -9072(%rbp)
	pushq -9080(%rbp)
	pushq -9088(%rbp)
	pushq -9096(%rbp)
	pushq -9104(%rbp)
	pushq -9112(%rbp)
	pushq -9120(%rbp)
	pushq -9128(%rbp)
	pushq -9136(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -9464(%RBP)
	pushq -9472(%RBP)
	pushq -9480(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -8992(%rbp)
	pushq -9000(%rbp)
	pushq -9008(%rbp)
	pushq -9016(%rbp)
	pushq -9024(%rbp)
	pushq -9032(%rbp)
	pushq -9040(%rbp)
	pushq -9048(%rbp)
	pushq -9056(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -9720(%RBP)
	pushq -9728(%RBP)
	pushq -9736(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9496(%rbp)
	pushq -9504(%rbp)
	pushq -9512(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9752(%rbp)
	pushq -9760(%rbp)
	pushq -9768(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -9776(%RBP), %RAX
	mov -9784(%RBP), %R14
	subq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c468c:
	mov -8792(%RBP),%RSP
	add $-9784, %RSP
	jmp uuid_00000000000c468f
uuid_00000000000c468d:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -8600(%rbp)
	pushq -8608(%rbp)
	pushq -8616(%rbp)
	pushq -8624(%rbp)
	pushq -8632(%rbp)
	pushq -8640(%rbp)
	pushq -8648(%rbp)
	pushq -8656(%rbp)
	pushq -8664(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -8992(%RBP)
	pushq -9000(%RBP)
	pushq -9008(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -8520(%rbp)
	pushq -8528(%rbp)
	pushq -8536(%rbp)
	pushq -8544(%rbp)
	pushq -8552(%rbp)
	pushq -8560(%rbp)
	pushq -8568(%rbp)
	pushq -8576(%rbp)
	pushq -8584(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -9248(%RBP)
	pushq -9256(%RBP)
	pushq -9264(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9024(%rbp)
	pushq -9032(%rbp)
	pushq -9040(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9280(%rbp)
	pushq -9288(%rbp)
	pushq -9296(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -9304(%RBP), %RAX
	mov -9312(%RBP), %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c468f:
	mov -8320(%RBP),%RSP
	add $-9312, %RSP
	jmp uuid_00000000000c4692
uuid_00000000000c4690:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -8128(%rbp)
	pushq -8136(%rbp)
	pushq -8144(%rbp)
	pushq -8152(%rbp)
	pushq -8160(%rbp)
	pushq -8168(%rbp)
	pushq -8176(%rbp)
	pushq -8184(%rbp)
	pushq -8192(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -8520(%RBP)
	pushq -8528(%RBP)
	pushq -8536(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -8048(%rbp)
	pushq -8056(%rbp)
	pushq -8064(%rbp)
	pushq -8072(%rbp)
	pushq -8080(%rbp)
	pushq -8088(%rbp)
	pushq -8096(%rbp)
	pushq -8104(%rbp)
	pushq -8112(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -8776(%RBP)
	pushq -8784(%RBP)
	pushq -8792(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8552(%rbp)
	pushq -8560(%rbp)
	pushq -8568(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8808(%rbp)
	pushq -8816(%rbp)
	pushq -8824(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8832(%RBP), %RAX
	mov -8840(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c4692:
	mov -7848(%RBP),%RSP
	add $-8840, %RSP
	jmp uuid_00000000000c4695
uuid_00000000000c4693:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -7656(%rbp)
	pushq -7664(%rbp)
	pushq -7672(%rbp)
	pushq -7680(%rbp)
	pushq -7688(%rbp)
	pushq -7696(%rbp)
	pushq -7704(%rbp)
	pushq -7712(%rbp)
	pushq -7720(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -8048(%RBP)
	pushq -8056(%RBP)
	pushq -8064(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -7576(%rbp)
	pushq -7584(%rbp)
	pushq -7592(%rbp)
	pushq -7600(%rbp)
	pushq -7608(%rbp)
	pushq -7616(%rbp)
	pushq -7624(%rbp)
	pushq -7632(%rbp)
	pushq -7640(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -8304(%RBP)
	pushq -8312(%RBP)
	pushq -8320(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8080(%rbp)
	pushq -8088(%rbp)
	pushq -8096(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8336(%rbp)
	pushq -8344(%rbp)
	pushq -8352(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8360(%RBP), %RAX
	mov -8368(%RBP), %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c4695:
	mov -7376(%RBP),%RSP
	add $-8368, %RSP
	jmp uuid_00000000000c4698
uuid_00000000000c4696:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -7184(%rbp)
	pushq -7192(%rbp)
	pushq -7200(%rbp)
	pushq -7208(%rbp)
	pushq -7216(%rbp)
	pushq -7224(%rbp)
	pushq -7232(%rbp)
	pushq -7240(%rbp)
	pushq -7248(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -7576(%RBP)
	pushq -7584(%RBP)
	pushq -7592(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -7104(%rbp)
	pushq -7112(%rbp)
	pushq -7120(%rbp)
	pushq -7128(%rbp)
	pushq -7136(%rbp)
	pushq -7144(%rbp)
	pushq -7152(%rbp)
	pushq -7160(%rbp)
	pushq -7168(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -7832(%RBP)
	pushq -7840(%RBP)
	pushq -7848(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7608(%rbp)
	pushq -7616(%rbp)
	pushq -7624(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7864(%rbp)
	pushq -7872(%rbp)
	pushq -7880(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -7888(%RBP), %RAX
	mov -7896(%RBP), %R14
	mov $0, %RDX
	div %R14
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c4698:
	mov -6904(%RBP),%RSP
	add $-7896, %RSP
	jmp uuid_00000000000c469b
uuid_00000000000c4699:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -6712(%rbp)
	pushq -6720(%rbp)
	pushq -6728(%rbp)
	pushq -6736(%rbp)
	pushq -6744(%rbp)
	pushq -6752(%rbp)
	pushq -6760(%rbp)
	pushq -6768(%rbp)
	pushq -6776(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -7104(%RBP)
	pushq -7112(%RBP)
	pushq -7120(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -6632(%rbp)
	pushq -6640(%rbp)
	pushq -6648(%rbp)
	pushq -6656(%rbp)
	pushq -6664(%rbp)
	pushq -6672(%rbp)
	pushq -6680(%rbp)
	pushq -6688(%rbp)
	pushq -6696(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -7360(%RBP)
	pushq -7368(%RBP)
	pushq -7376(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7136(%rbp)
	pushq -7144(%rbp)
	pushq -7152(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7392(%rbp)
	pushq -7400(%rbp)
	pushq -7408(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -7416(%RBP), %RAX
	mov -7424(%RBP), %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4584
	pushq $0
	pushq $uuid_00000000000c0d80
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000c4586
uuid_00000000000c4584:
	pushq $0
	pushq $uuid_00000000000c0db9
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c4586:
	mov -7432(%RBP),%RSP
	add $-7432, %RSP
uuid_00000000000c469b:
	mov -6432(%RBP),%RSP
	add $-7432, %RSP
	jmp uuid_00000000000c469e
uuid_00000000000c469c:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -6240(%rbp)
	pushq -6248(%rbp)
	pushq -6256(%rbp)
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	pushq -6288(%rbp)
	pushq -6296(%rbp)
	pushq -6304(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -6632(%RBP)
	pushq -6640(%RBP)
	pushq -6648(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -6160(%rbp)
	pushq -6168(%rbp)
	pushq -6176(%rbp)
	pushq -6184(%rbp)
	pushq -6192(%rbp)
	pushq -6200(%rbp)
	pushq -6208(%rbp)
	pushq -6216(%rbp)
	pushq -6224(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -6888(%RBP)
	pushq -6896(%RBP)
	pushq -6904(%RBP)
	push %RBP
#call function == : Arrow<Cons<S,S>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6664(%rbp)
	pushq -6672(%rbp)
	pushq -6680(%rbp)
	pushq -6920(%rbp)
	pushq -6928(%rbp)
	pushq -6936(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4566
	pushq $0
	pushq $uuid_00000000000c0d80
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000c4568
uuid_00000000000c4566:
	pushq $0
	pushq $uuid_00000000000c0db9
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c4568:
	mov -6944(%RBP),%RSP
	add $-6944, %RSP
uuid_00000000000c469e:
	mov -5960(%RBP),%RSP
	add $-6944, %RSP
	jmp uuid_00000000000c46a1
uuid_00000000000c469f:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -5768(%rbp)
	pushq -5776(%rbp)
	pushq -5784(%rbp)
	pushq -5792(%rbp)
	pushq -5800(%rbp)
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -6160(%RBP)
	pushq -6168(%RBP)
	pushq -6176(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6192(%rbp)
	pushq -6200(%rbp)
	pushq -6208(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function align : Arrow<I64,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6216(%rbp)
	mov %RBX, %RBP
	call align_CL_ArrowI64I64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c46a1:
	mov -5664(%RBP),%RSP
	add $-6216, %RSP
	jmp uuid_00000000000c46a4
uuid_00000000000c46a2:
	pushq $0
#call function uuid : Arrow<Nil,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call uuid_CL_ArrowStringNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c46a4:
	mov -5440(%RBP),%RSP
	add $-5656, %RSP
	jmp uuid_00000000000c46a7
uuid_00000000000c46a5:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	pushq -5264(%rbp)
	pushq -5272(%rbp)
	pushq -5280(%rbp)
	pushq -5288(%rbp)
	pushq -5296(%rbp)
	pushq -5304(%rbp)
	pushq -5312(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -5640(%RBP)
	pushq -5648(%RBP)
	pushq -5656(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -5896(%RBP)
	pushq -5904(%RBP)
	pushq -5912(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5672(%rbp)
	pushq -5680(%rbp)
	pushq -5688(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5928(%rbp)
	pushq -5936(%rbp)
	pushq -5944(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000c4521:
	mov -5952(%RBP), %RAX
	mov -5960(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4522
	jmp uuid_00000000000c4523
uuid_00000000000c4522:
	mov -5960(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -5960(%rbp)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5960(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000c4521
uuid_00000000000c4523:
uuid_00000000000c46a7:
	mov -4968(%RBP),%RSP
	add $-5960, %RSP
	jmp uuid_00000000000c46aa
uuid_00000000000c46a8:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -4056(%rbp)
	pushq -4064(%rbp)
	pushq -4072(%rbp)
	pushq -4080(%rbp)
	pushq -4088(%rbp)
	pushq -4096(%rbp)
	pushq -4104(%rbp)
	pushq -4112(%rbp)
	pushq -4120(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -5168(%RBP)
	pushq -5176(%RBP)
	pushq -5184(%RBP)
uuid_00000000000c4502:
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4503
	jmp uuid_00000000000c4504
uuid_00000000000c4503:
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	push %RBP
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq $0
	push %RBP
	mov -5272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c44f8
	jmp uuid_00000000000c44fa
uuid_00000000000c44f8:
	push %RBP
	mov -5264(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c44f5
	jmp uuid_00000000000c44f7
uuid_00000000000c44f5:
	push %RBP
	mov -5256(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c44f2
	jmp uuid_00000000000c44f4
uuid_00000000000c44f2:
	movb $1, -5280(%rbp)
uuid_00000000000c44f4:
	mov -5328(%RBP),%RSP
	add $-5352, %RSP
uuid_00000000000c44f7:
	mov -5296(%RBP),%RSP
	add $-5352, %RSP
uuid_00000000000c44fa:
	mov -5288(%RBP),%RSP
	add $-5352, %RSP
	mov -5280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c44ff
	push %RBP
	jmp uuid_00000000000c44fc
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c44fb
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c44fe
uuid_00000000000c44fc:
	pushq $0
	pushq $0
	pushq $3
	popq -5216(%RBP)
	popq -5208(%RBP)
	popq -5200(%RBP)
uuid_00000000000c44fe:
	mov -5360(%RBP),%RSP
	add $-5360, %RSP
	jmp uuid_00000000000c4501
uuid_00000000000c44ff:
#call function fragment::expression : Arrow<S,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5336(%rbp)
	pushq -5344(%rbp)
	pushq -5352(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -4424(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c42ce
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -5360(%rbp)
	pushq -5368(%rbp)
	pushq -5376(%rbp)
	pushq -5384(%rbp)
	pushq -5392(%rbp)
	pushq -5400(%rbp)
	pushq -5408(%rbp)
	pushq -5416(%rbp)
	pushq -5424(%rbp)
	pushq -5432(%rbp)
	pushq -5440(%rbp)
	pushq -5448(%rbp)
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	pushq -5480(%rbp)
	pushq -5488(%rbp)
	pushq -5496(%rbp)
	pushq -5504(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5512(%rbp)
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	pushq -5592(%rbp)
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	pushq -5672(%rbp)
	pushq -5680(%rbp)
	pushq -5688(%rbp)
	pushq -5696(%rbp)
	pushq -5704(%rbp)
	pushq -208(%rbp)
	pushq -3880(%rbp)
	pushq -3888(%rbp)
	pushq -3896(%rbp)
	pushq -3904(%rbp)
	pushq -3912(%rbp)
	pushq -3920(%rbp)
	pushq -3928(%rbp)
	pushq -3936(%rbp)
	pushq -3944(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -5912(%RBP)
	pushq -5920(%RBP)
	pushq -5928(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -5944(%rbp)
	pushq -5952(%rbp)
	pushq -5960(%rbp)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	movq -5320(%rbp), %r15
	movq %r15, -5216(%rbp)
	movq -5312(%rbp), %r15
	movq %r15, -5208(%rbp)
	movq -5304(%rbp), %r15
	movq %r15, -5200(%rbp)
uuid_00000000000c4501:
	mov -5248(%RBP),%RSP
	add $-5960, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $24, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $152, %rsp
	add $200, %rsp
	add $232, %rsp
	add $24, %rsp
	add $8, %RSP
	jmp uuid_00000000000c4502
uuid_00000000000c4504:
uuid_00000000000c46aa:
	mov -3680(%RBP),%RSP
	add $-5216, %RSP
	jmp uuid_00000000000c46ad
uuid_00000000000c46ab:
#call function fragment-context::lookup-soft : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -2712(%rbp)
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_SB_soft_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	pushq -3800(%RBP)
	pushq -3808(%RBP)
	pushq -3816(%RBP)
uuid_00000000000c4494:
#call function non-zero : Arrow<List<Array<Fragment,?>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListArray_QM_Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4495
	jmp uuid_00000000000c4496
uuid_00000000000c4495:
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	push %RBP
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq $0
	push %RBP
	mov -3904(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c448d
	jmp uuid_00000000000c448f
uuid_00000000000c448d:
	push %RBP
	mov -3896(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c448a
	jmp uuid_00000000000c448c
uuid_00000000000c448a:
	push %RBP
	mov -3888(%RBP), %RAX
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4487
	jmp uuid_00000000000c4489
uuid_00000000000c4487:
	movb $1, -3912(%rbp)
uuid_00000000000c4489:
	mov -3960(%RBP),%RSP
	add $-4112, %RSP
uuid_00000000000c448c:
	mov -3928(%RBP),%RSP
	add $-4112, %RSP
uuid_00000000000c448f:
	mov -3920(%RBP),%RSP
	add $-4112, %RSP
	mov -3912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4491
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c4490
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4493
uuid_00000000000c4491:
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -3136(%rbp)
	pushq -3768(%RBP)
	pushq -3776(%RBP)
	pushq -3784(%RBP)
	pushq -3968(%rbp)
	pushq -3976(%rbp)
	pushq -3984(%rbp)
	pushq -3992(%rbp)
	pushq -4000(%rbp)
	pushq -4008(%rbp)
	pushq -4016(%rbp)
	pushq -4024(%rbp)
	pushq -4032(%rbp)
	pushq -4040(%rbp)
	pushq -4048(%rbp)
	pushq -4056(%rbp)
	pushq -4064(%rbp)
	pushq -4072(%rbp)
	pushq -4080(%rbp)
	pushq -4088(%rbp)
	pushq -4096(%rbp)
	pushq -4104(%rbp)
	pushq -4112(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4120(%rbp)
	pushq -4128(%rbp)
	pushq -4136(%rbp)
	pushq -4144(%rbp)
	pushq -4152(%rbp)
	pushq -4160(%rbp)
	pushq -4168(%rbp)
	pushq -4176(%rbp)
	pushq -4184(%rbp)
	pushq -4192(%rbp)
	pushq -4200(%rbp)
	pushq -4208(%rbp)
	pushq -4216(%rbp)
	pushq -4224(%rbp)
	pushq -4232(%rbp)
	pushq -4240(%rbp)
	pushq -4248(%rbp)
	pushq -4256(%rbp)
	pushq -4264(%rbp)
	pushq -4272(%rbp)
	pushq -4280(%rbp)
	pushq -4288(%rbp)
	pushq -4296(%rbp)
	pushq -4304(%rbp)
	pushq -4312(%rbp)
	pushq -208(%rbp)
	pushq -2336(%rbp)
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -4520(%RBP)
	pushq -4528(%RBP)
	pushq -4536(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	pushq -4568(%rbp)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	movq -3952(%rbp), %r15
	movq %r15, -3848(%rbp)
	movq -3944(%rbp), %r15
	movq %r15, -3840(%rbp)
	movq -3936(%rbp), %r15
	movq %r15, -3832(%rbp)
uuid_00000000000c4493:
	mov -3880(%RBP),%RSP
	add $-4568, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $24, %rsp
	add $152, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $200, %rsp
	add $232, %rsp
	add $24, %rsp
	add $8, %RSP
	jmp uuid_00000000000c4494
uuid_00000000000c4496:
uuid_00000000000c46ad:
	mov -2136(%RBP),%RSP
	add $-3848, %RSP
	jmp uuid_00000000000c46b0
uuid_00000000000c46ae:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -2336(%RBP)
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c46b0:
	mov -1840(%RBP),%RSP
	add $-2360, %RSP
	jmp uuid_00000000000c46b3
uuid_00000000000c46b1:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c46b3:
	mov -1320(%RBP),%RSP
	add $-2064, %RSP
	jmp uuid_00000000000c46b6
uuid_00000000000c46b4:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c46b6:
	mov -800(%RBP),%RSP
	add $-1544, %RSP
	jmp uuid_00000000000c46b9
uuid_00000000000c46b7:
	pushq $0
	pushq -792(%rbp)
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c46b9:
	mov -680(%RBP),%RSP
	add $-792, %RSP
	jmp uuid_00000000000c46bc
uuid_00000000000c46ba:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -672(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c46bc:
	mov -560(%RBP),%RSP
	add $-824, %RSP
	jmp uuid_00000000000c46bf
uuid_00000000000c46bd:
uuid_00000000000c46bf:
	mov -480(%RBP),%RSP
	add $-552, %RSP
	jmp uuid_00000000000c46c2
uuid_00000000000c46c0:
uuid_00000000000c46c2:
	mov -400(%RBP),%RSP
	add $-472, %RSP
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	subq $232, %rsp
	pushq 232(%rsp)
	pushq 248(%rsp)
	pushq 264(%rsp)
	pushq 280(%rsp)
	pushq 296(%rsp)
	pushq 312(%rsp)
	pushq 328(%rsp)
	pushq 344(%rsp)
	pushq 360(%rsp)
	pushq 376(%rsp)
	pushq 392(%rsp)
	pushq 408(%rsp)
	pushq 424(%rsp)
	pushq 440(%rsp)
	pushq 456(%rsp)
	pushq 472(%rsp)
	pushq 488(%rsp)
	pushq 504(%rsp)
	pushq 520(%rsp)
	pushq 536(%rsp)
	pushq 552(%rsp)
	pushq 568(%rsp)
	pushq 584(%rsp)
	pushq 600(%rsp)
	pushq 616(%rsp)
	pushq 632(%rsp)
	pushq 648(%rsp)
	pushq 664(%rsp)
	pushq 680(%rsp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	addq $232, %rsp
	mov %rbp, %rsp
	sub $296, %rsp
	ret
blob_SB_render_CL_ArrowFragmentConsI64ConsFragmentConsASTFContext:
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq $0
	push %RBP
	mov -592(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c46e1
	jmp uuid_00000000000c46e3
uuid_00000000000c46e1:
	push %RBP
	mov -584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -688(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c46cf
	jmp uuid_00000000000c46d1
uuid_00000000000c46cf:
	push %RBP
	mov -680(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -784(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c46c6
	jmp uuid_00000000000c46c8
uuid_00000000000c46c6:
	push %RBP
	jmp uuid_00000000000c46c3
	jmp uuid_00000000000c46c5
uuid_00000000000c46c3:
	movb $1, -792(%rbp)
uuid_00000000000c46c5:
	mov -808(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c46c8:
	mov -800(%RBP),%RSP
	add $-808, %RSP
	mov -792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c46cc
	jmp uuid_00000000000c46ce
uuid_00000000000c46cc:
	push %RBP
	mov -672(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c46c9
	jmp uuid_00000000000c46cb
uuid_00000000000c46c9:
	movb $1, -696(%rbp)
uuid_00000000000c46cb:
	mov -816(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c46ce:
	mov -712(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c46d1:
	mov -704(%RBP),%RSP
	add $-888, %RSP
	mov -696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c46de
	jmp uuid_00000000000c46e0
uuid_00000000000c46de:
	push %RBP
	mov -576(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -968(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c46d8
	jmp uuid_00000000000c46da
uuid_00000000000c46d8:
	push %RBP
	jmp uuid_00000000000c46d5
	jmp uuid_00000000000c46d7
uuid_00000000000c46d5:
	push %RBP
	mov -904(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1008(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c46d2
	jmp uuid_00000000000c46d4
uuid_00000000000c46d2:
	movb $1, -976(%rbp)
uuid_00000000000c46d4:
	mov -1000(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c46d7:
	mov -992(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c46da:
	mov -984(%RBP),%RSP
	add $-1008, %RSP
	mov -976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c46db
	jmp uuid_00000000000c46dd
uuid_00000000000c46db:
	movb $1, -600(%rbp)
uuid_00000000000c46dd:
	mov -896(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c46e0:
	mov -616(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c46e3:
	mov -608(%RBP),%RSP
	add $-1008, %RSP
	mov -600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4721
	push %RBP
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq $0
	push %RBP
	mov -1088(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c46f3
	jmp uuid_00000000000c46f5
uuid_00000000000c46f3:
	push %RBP
	mov -1080(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c46f0
	jmp uuid_00000000000c46f2
uuid_00000000000c46f0:
	push %RBP
	mov -1072(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1264(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c46ea
	jmp uuid_00000000000c46ec
uuid_00000000000c46ea:
	push %RBP
	jmp uuid_00000000000c46e7
	jmp uuid_00000000000c46e9
uuid_00000000000c46e7:
	push %RBP
	mov -1200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c46e4
	jmp uuid_00000000000c46e6
uuid_00000000000c46e4:
	movb $1, -1272(%rbp)
uuid_00000000000c46e6:
	mov -1296(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c46e9:
	mov -1288(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c46ec:
	mov -1280(%RBP),%RSP
	add $-1304, %RSP
	mov -1272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c46ed
	jmp uuid_00000000000c46ef
uuid_00000000000c46ed:
	movb $1, -1096(%rbp)
uuid_00000000000c46ef:
	mov -1192(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c46f2:
	mov -1112(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c46f5:
	mov -1104(%RBP),%RSP
	add $-1304, %RSP
	mov -1096(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c471e
	push %RBP
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq $0
	push %RBP
	mov -1384(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4711
	jmp uuid_00000000000c4713
uuid_00000000000c4711:
	push %RBP
	mov -1376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1480(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4708
	jmp uuid_00000000000c470a
uuid_00000000000c4708:
	push %RBP
	mov -1472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4705
	jmp uuid_00000000000c4707
uuid_00000000000c4705:
	push %RBP
	mov -1464(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1656(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c46ff
	jmp uuid_00000000000c4701
uuid_00000000000c46ff:
	push %RBP
	jmp uuid_00000000000c46fc
	jmp uuid_00000000000c46fe
uuid_00000000000c46fc:
	push %RBP
	mov -1592(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c46f9
	jmp uuid_00000000000c46fb
uuid_00000000000c46f9:
	movb $1, -1664(%rbp)
uuid_00000000000c46fb:
	mov -1688(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000c46fe:
	mov -1680(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000c4701:
	mov -1672(%RBP),%RSP
	add $-1696, %RSP
	mov -1664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4702
	jmp uuid_00000000000c4704
uuid_00000000000c4702:
	movb $1, -1488(%rbp)
uuid_00000000000c4704:
	mov -1584(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000c4707:
	mov -1504(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000c470a:
	mov -1496(%RBP),%RSP
	add $-1696, %RSP
	mov -1488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c470e
	jmp uuid_00000000000c4710
uuid_00000000000c470e:
	push %RBP
	mov -1368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c470b
	jmp uuid_00000000000c470d
uuid_00000000000c470b:
	movb $1, -1392(%rbp)
uuid_00000000000c470d:
	mov -1704(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c4710:
	mov -1408(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c4713:
	mov -1400(%RBP),%RSP
	add $-1776, %RSP
	mov -1392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c471b
	push %RBP
	jmp uuid_00000000000c4718
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c4717
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c471a
uuid_00000000000c4718:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c3169
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq $uuid_00000000000c3169
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
uuid_00000000000c471a:
	mov -1784(%RBP),%RSP
	add $-2040, %RSP
	jmp uuid_00000000000c471d
uuid_00000000000c471b:
#call function blob-render : Arrow<Cons<Cons<Cons<FContext,AST>,Fragment>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_CL_ArrowFragmentConsI64ConsFragmentConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	push %RBP
#call function has-prefix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1696(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call has_SB_prefix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4714
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c3169
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq $uuid_00000000000c3169
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	jmp uuid_00000000000c4716
uuid_00000000000c4714:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -1696(%RBP), %RAX
	inc %RAX
	push %RAX
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov -1696(%RBP), %RAX
	inc %RAX
	push %RAX
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
uuid_00000000000c4716:
	mov -1784(%RBP),%RSP
	add $-2040, %RSP
uuid_00000000000c471d:
	mov -1312(%RBP),%RSP
	add $-2040, %RSP
	jmp uuid_00000000000c4720
uuid_00000000000c471e:
	push %RBP
#call function has-prefix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1304(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call has_SB_prefix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c46f6
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c3169
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq $uuid_00000000000c3169
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	jmp uuid_00000000000c46f8
uuid_00000000000c46f6:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -1304(%RBP), %RAX
	inc %RAX
	push %RAX
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov -1304(%RBP), %RAX
	inc %RAX
	push %RAX
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
uuid_00000000000c46f8:
	mov -1312(%RBP),%RSP
	add $-1568, %RSP
uuid_00000000000c4720:
	mov -1016(%RBP),%RSP
	add $-1568, %RSP
	jmp uuid_00000000000c4723
uuid_00000000000c4721:
#call function blob-render : Arrow<Cons<Cons<Cons<FContext,AST>,Fragment>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_CL_ArrowFragmentConsI64ConsFragmentConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
uuid_00000000000c4723:
	mov -520(%RBP),%RSP
	add $-1008, %RSP
	subq $152, %rsp
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $440, %rsp
	ret
extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation:
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c473c
	jmp uuid_00000000000c473e
uuid_00000000000c473c:
	push %RBP
	mov -448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c472a
	jmp uuid_00000000000c472c
uuid_00000000000c472a:
	push %RBP
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	jmp uuid_00000000000c4727
	jmp uuid_00000000000c4729
uuid_00000000000c4727:
	push %RBP
	mov -488(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4724
	jmp uuid_00000000000c4726
uuid_00000000000c4724:
	movb $1, -560(%rbp)
uuid_00000000000c4726:
	mov -640(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000c4729:
	mov -576(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000c472c:
	mov -568(%RBP),%RSP
	add $-648, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4739
	jmp uuid_00000000000c473b
uuid_00000000000c4739:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -728(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4733
	jmp uuid_00000000000c4735
uuid_00000000000c4733:
	push %RBP
	jmp uuid_00000000000c4730
	jmp uuid_00000000000c4732
uuid_00000000000c4730:
	push %RBP
	mov -664(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -768(%rbp)
	pushq $uuid_00000000000c4524
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c472d
	jmp uuid_00000000000c472f
uuid_00000000000c472d:
	movb $1, -736(%rbp)
uuid_00000000000c472f:
	mov -760(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c4732:
	mov -752(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c4735:
	mov -744(%RBP),%RSP
	add $-768, %RSP
	mov -736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4736
	jmp uuid_00000000000c4738
uuid_00000000000c4736:
	movb $1, -464(%rbp)
uuid_00000000000c4738:
	mov -656(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c473b:
	mov -480(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c473e:
	mov -472(%RBP),%RSP
	add $-768, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c47a6
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4745
	jmp uuid_00000000000c4747
uuid_00000000000c4745:
	push %RBP
	mov -840(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4742
	jmp uuid_00000000000c4744
uuid_00000000000c4742:
	push %RBP
	mov -832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c473f
	jmp uuid_00000000000c4741
uuid_00000000000c473f:
	movb $1, -856(%rbp)
uuid_00000000000c4741:
	mov -952(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000c4744:
	mov -872(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000c4747:
	mov -864(%RBP),%RSP
	add $-1024, %RSP
	mov -856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c47a3
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -1104(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4751
	jmp uuid_00000000000c4753
uuid_00000000000c4751:
	push %RBP
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	jmp uuid_00000000000c474e
	jmp uuid_00000000000c4750
uuid_00000000000c474e:
	push %RBP
	mov -1072(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c474b
	jmp uuid_00000000000c474d
uuid_00000000000c474b:
	push %RBP
	mov -1064(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4748
	jmp uuid_00000000000c474a
uuid_00000000000c4748:
	movb $1, -1112(%rbp)
uuid_00000000000c474a:
	mov -1240(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000c474d:
	mov -1160(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000c4750:
	mov -1128(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000c4753:
	mov -1120(%RBP),%RSP
	add $-1312, %RSP
	mov -1112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c47a0
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	mov -1392(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c479d
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	mov -1472(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c479a
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -1552(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4757
	jmp uuid_00000000000c4759
uuid_00000000000c4757:
	push %RBP
	jmp uuid_00000000000c4754
	jmp uuid_00000000000c4756
uuid_00000000000c4754:
	movb $1, -1560(%rbp)
uuid_00000000000c4756:
	mov -1576(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000c4759:
	mov -1568(%RBP),%RSP
	add $-1576, %RSP
	mov -1560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4797
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -1656(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4760
	jmp uuid_00000000000c4762
uuid_00000000000c4760:
	push %RBP
	jmp uuid_00000000000c475d
	jmp uuid_00000000000c475f
uuid_00000000000c475d:
	push %RBP
	mov -1592(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c475a
	jmp uuid_00000000000c475c
uuid_00000000000c475a:
	movb $1, -1664(%rbp)
uuid_00000000000c475c:
	mov -1688(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000c475f:
	mov -1680(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000c4762:
	mov -1672(%RBP),%RSP
	add $-1696, %RSP
	mov -1664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4794
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -1776(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4769
	jmp uuid_00000000000c476b
uuid_00000000000c4769:
	push %RBP
	jmp uuid_00000000000c4766
	jmp uuid_00000000000c4768
uuid_00000000000c4766:
	push %RBP
	mov -1712(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4763
	jmp uuid_00000000000c4765
uuid_00000000000c4763:
	movb $1, -1784(%rbp)
uuid_00000000000c4765:
	mov -1808(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000c4768:
	mov -1800(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000c476b:
	mov -1792(%RBP),%RSP
	add $-1816, %RSP
	mov -1784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4791
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -1896(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4772
	jmp uuid_00000000000c4774
uuid_00000000000c4772:
	push %RBP
	mov -1888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c476f
	jmp uuid_00000000000c4771
uuid_00000000000c476f:
	push %RBP
	mov -1880(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c476c
	jmp uuid_00000000000c476e
uuid_00000000000c476c:
	movb $1, -1904(%rbp)
uuid_00000000000c476e:
	mov -2000(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000c4771:
	mov -1920(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000c4774:
	mov -1912(%RBP),%RSP
	add $-2072, %RSP
	mov -1904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c478e
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -2152(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c477b
	jmp uuid_00000000000c477d
uuid_00000000000c477b:
	push %RBP
	mov -2144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4778
	jmp uuid_00000000000c477a
uuid_00000000000c4778:
	push %RBP
	mov -2136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4775
	jmp uuid_00000000000c4777
uuid_00000000000c4775:
	movb $1, -2160(%rbp)
uuid_00000000000c4777:
	mov -2256(%RBP),%RSP
	add $-2328, %RSP
uuid_00000000000c477a:
	mov -2176(%RBP),%RSP
	add $-2328, %RSP
uuid_00000000000c477d:
	mov -2168(%RBP),%RSP
	add $-2328, %RSP
	mov -2160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c478b
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -2408(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4784
	jmp uuid_00000000000c4786
uuid_00000000000c4784:
	push %RBP
	mov -2400(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4781
	jmp uuid_00000000000c4783
uuid_00000000000c4781:
	push %RBP
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	pushq -2360(%RBP)
	pushq -2368(%RBP)
	pushq -2376(%RBP)
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	jmp uuid_00000000000c477e
	jmp uuid_00000000000c4780
uuid_00000000000c477e:
	movb $1, -2416(%rbp)
uuid_00000000000c4780:
	mov -2512(%RBP),%RSP
	add $-2568, %RSP
uuid_00000000000c4783:
	mov -2432(%RBP),%RSP
	add $-2568, %RSP
uuid_00000000000c4786:
	mov -2424(%RBP),%RSP
	add $-2568, %RSP
	mov -2416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4788
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c4787
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c478a
uuid_00000000000c4788:
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -2440(%rbp)
	pushq -2448(%rbp)
	pushq -2456(%rbp)
	pushq -2464(%rbp)
	pushq -2472(%rbp)
	pushq -2480(%rbp)
	pushq -2488(%rbp)
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	movq -2664(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -2656(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -2648(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -2640(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -2632(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -2624(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -2616(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -2608(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -2600(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -2592(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -2584(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -2576(%rbp), %r15
	movq %r15, -216(%rbp)
uuid_00000000000c478a:
	mov -2336(%RBP),%RSP
	add $-2664, %RSP
	jmp uuid_00000000000c478d
uuid_00000000000c478b:
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -2336(%rbp)
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	pushq -2408(%rbp)
	pushq -2416(%rbp)
	pushq -2424(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	movq -2520(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -2512(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -2504(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -2496(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -2488(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -2480(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -2472(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -2464(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -2456(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -2448(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -2440(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -2432(%rbp), %r15
	movq %r15, -216(%rbp)
uuid_00000000000c478d:
	mov -2080(%RBP),%RSP
	add $-2520, %RSP
	jmp uuid_00000000000c4790
uuid_00000000000c478e:
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	movq -2264(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -2256(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -2248(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -2240(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -2232(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -2224(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -2216(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -2208(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -2200(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -2192(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -2184(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -2176(%rbp), %r15
	movq %r15, -216(%rbp)
uuid_00000000000c4790:
	mov -1824(%RBP),%RSP
	add $-2264, %RSP
	jmp uuid_00000000000c4793
uuid_00000000000c4791:
uuid_00000000000c4793:
	mov -1704(%RBP),%RSP
	add $-1816, %RSP
	jmp uuid_00000000000c4796
uuid_00000000000c4794:
uuid_00000000000c4796:
	mov -1584(%RBP),%RSP
	add $-1696, %RSP
	jmp uuid_00000000000c4799
uuid_00000000000c4797:
uuid_00000000000c4799:
	mov -1480(%RBP),%RSP
	add $-1576, %RSP
	jmp uuid_00000000000c479c
uuid_00000000000c479a:
uuid_00000000000c479c:
	mov -1400(%RBP),%RSP
	add $-1472, %RSP
	jmp uuid_00000000000c479f
uuid_00000000000c479d:
uuid_00000000000c479f:
	mov -1320(%RBP),%RSP
	add $-1392, %RSP
	jmp uuid_00000000000c47a2
uuid_00000000000c47a0:
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	movq -1504(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -216(%rbp)
uuid_00000000000c47a2:
	mov -1032(%RBP),%RSP
	add $-1504, %RSP
	jmp uuid_00000000000c47a5
uuid_00000000000c47a3:
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	movq -1216(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -216(%rbp)
uuid_00000000000c47a5:
	mov -776(%RBP),%RSP
	add $-1216, %RSP
	jmp uuid_00000000000c47a8
uuid_00000000000c47a6:
#call function uuid : Arrow<Nil,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call uuid_CL_ArrowStringNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Context,Array<Context,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -648(%rbp)
	pushq -776(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -776(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	pushq $0
	movq -872(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -864(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -856(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -848(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -840(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -832(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -824(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -816(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -808(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -800(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -792(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -784(%rbp), %r15
	movq %r15, -216(%rbp)
uuid_00000000000c47a8:
	mov -384(%RBP),%RSP
	add $-872, %RSP
	subq $96, %rsp
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	addq $96, %rsp
	mov %rbp, %rsp
	sub $208, %rsp
	ret
index_SB_typedefs_CL_ArrowNilAST:
uuid_00000000000c47ce:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c47cf
	jmp uuid_00000000000c47d0
uuid_00000000000c47cf:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c47b8
	jmp uuid_00000000000c47ba
uuid_00000000000c47b8:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c47af
	jmp uuid_00000000000c47b1
uuid_00000000000c47af:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c47ac
	jmp uuid_00000000000c47ae
uuid_00000000000c47ac:
	push %RBP
	mov -312(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c47a9
	jmp uuid_00000000000c47ab
uuid_00000000000c47a9:
	movb $1, -336(%rbp)
uuid_00000000000c47ab:
	mov -432(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c47ae:
	mov -352(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c47b1:
	mov -344(%RBP),%RSP
	add $-504, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c47b5
	jmp uuid_00000000000c47b7
uuid_00000000000c47b5:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c47b2
	jmp uuid_00000000000c47b4
uuid_00000000000c47b2:
	movb $1, -240(%rbp)
uuid_00000000000c47b4:
	mov -512(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c47b7:
	mov -256(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c47ba:
	mov -248(%RBP),%RSP
	add $-584, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c47cb
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c47c1
	jmp uuid_00000000000c47c3
uuid_00000000000c47c1:
	push %RBP
	jmp uuid_00000000000c47be
	jmp uuid_00000000000c47c0
uuid_00000000000c47be:
	push %RBP
	mov -648(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c47bb
	jmp uuid_00000000000c47bd
uuid_00000000000c47bb:
	movb $1, -672(%rbp)
uuid_00000000000c47bd:
	mov -696(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c47c0:
	mov -688(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c47c3:
	mov -680(%RBP),%RSP
	add $-768, %RSP
	mov -672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c47c8
	push %RBP
	jmp uuid_00000000000c47c5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c47c4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c47c7
uuid_00000000000c47c5:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c47c7:
	mov -776(%RBP),%RSP
	add $-776, %RSP
	jmp uuid_00000000000c47ca
uuid_00000000000c47c8:
	movq -768(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c47ca:
	mov -592(%RBP),%RSP
	add $-768, %RSP
	jmp uuid_00000000000c47cd
uuid_00000000000c47cb:
#call function index-typedefs : Arrow<Cons<AST,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq $0
	mov %RBX, %RBP
	call index_SB_typedefs_CL_ArrowNilConsU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -584(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -576(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -568(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -560(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -552(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -544(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -536(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -528(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -520(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c47cd:
	mov -160(%RBP),%RSP
	add $-584, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c47ce
uuid_00000000000c47d0:
	mov %rbp, %rsp
	sub $80, %rsp
	ret
index_SB_typedefs_CL_ArrowNilConsU64AST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c47f2
	jmp uuid_00000000000c47f4
uuid_00000000000c47f2:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c47d7
	jmp uuid_00000000000c47d9
uuid_00000000000c47d7:
	push %RBP
	jmp uuid_00000000000c47d4
	jmp uuid_00000000000c47d6
uuid_00000000000c47d4:
	push %RBP
	mov -272(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c47d1
	jmp uuid_00000000000c47d3
uuid_00000000000c47d1:
	movb $1, -344(%rbp)
uuid_00000000000c47d3:
	mov -368(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c47d6:
	mov -360(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c47d9:
	mov -352(%RBP),%RSP
	add $-376, %RSP
	mov -344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c47ef
	jmp uuid_00000000000c47f1
uuid_00000000000c47ef:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c47e9
	jmp uuid_00000000000c47eb
uuid_00000000000c47e9:
	push %RBP
	mov -448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c47e0
	jmp uuid_00000000000c47e2
uuid_00000000000c47e0:
	push %RBP
	jmp uuid_00000000000c47dd
	jmp uuid_00000000000c47df
uuid_00000000000c47dd:
	push %RBP
	mov -488(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -592(%rbp)
	pushq $uuid_00000000000c28e2
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c47da
	jmp uuid_00000000000c47dc
uuid_00000000000c47da:
	movb $1, -560(%rbp)
uuid_00000000000c47dc:
	mov -584(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c47df:
	mov -576(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c47e2:
	mov -568(%RBP),%RSP
	add $-592, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c47e6
	jmp uuid_00000000000c47e8
uuid_00000000000c47e6:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c47e3
	jmp uuid_00000000000c47e5
uuid_00000000000c47e3:
	movb $1, -464(%rbp)
uuid_00000000000c47e5:
	mov -600(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c47e8:
	mov -480(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c47eb:
	mov -472(%RBP),%RSP
	add $-672, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c47ec
	jmp uuid_00000000000c47ee
uuid_00000000000c47ec:
	movb $1, -248(%rbp)
uuid_00000000000c47ee:
	mov -384(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c47f1:
	mov -264(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c47f4:
	mov -256(%RBP),%RSP
	add $-672, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c484e
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c481f
	jmp uuid_00000000000c4821
uuid_00000000000c481f:
	push %RBP
	mov -744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4804
	jmp uuid_00000000000c4806
uuid_00000000000c4804:
	push %RBP
	jmp uuid_00000000000c4801
	jmp uuid_00000000000c4803
uuid_00000000000c4801:
	push %RBP
	mov -832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -952(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c47fb
	jmp uuid_00000000000c47fd
uuid_00000000000c47fb:
	push %RBP
	jmp uuid_00000000000c47f8
	jmp uuid_00000000000c47fa
uuid_00000000000c47f8:
	push %RBP
	mov -888(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c47f5
	jmp uuid_00000000000c47f7
uuid_00000000000c47f5:
	movb $1, -960(%rbp)
uuid_00000000000c47f7:
	mov -984(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c47fa:
	mov -976(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c47fd:
	mov -968(%RBP),%RSP
	add $-992, %RSP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c47fe
	jmp uuid_00000000000c4800
uuid_00000000000c47fe:
	movb $1, -856(%rbp)
uuid_00000000000c4800:
	mov -880(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c4803:
	mov -872(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c4806:
	mov -864(%RBP),%RSP
	add $-992, %RSP
	mov -856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c481c
	jmp uuid_00000000000c481e
uuid_00000000000c481c:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1072(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4816
	jmp uuid_00000000000c4818
uuid_00000000000c4816:
	push %RBP
	mov -1064(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1168(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c480d
	jmp uuid_00000000000c480f
uuid_00000000000c480d:
	push %RBP
	jmp uuid_00000000000c480a
	jmp uuid_00000000000c480c
uuid_00000000000c480a:
	push %RBP
	mov -1104(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1208(%rbp)
	pushq $uuid_00000000000c28e2
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4807
	jmp uuid_00000000000c4809
uuid_00000000000c4807:
	movb $1, -1176(%rbp)
uuid_00000000000c4809:
	mov -1200(%RBP),%RSP
	add $-1208, %RSP
uuid_00000000000c480c:
	mov -1192(%RBP),%RSP
	add $-1208, %RSP
uuid_00000000000c480f:
	mov -1184(%RBP),%RSP
	add $-1208, %RSP
	mov -1176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4813
	jmp uuid_00000000000c4815
uuid_00000000000c4813:
	push %RBP
	mov -1056(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4810
	jmp uuid_00000000000c4812
uuid_00000000000c4810:
	movb $1, -1080(%rbp)
uuid_00000000000c4812:
	mov -1216(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000c4815:
	mov -1096(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000c4818:
	mov -1088(%RBP),%RSP
	add $-1288, %RSP
	mov -1080(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4819
	jmp uuid_00000000000c481b
uuid_00000000000c4819:
	movb $1, -760(%rbp)
uuid_00000000000c481b:
	mov -1000(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000c481e:
	mov -776(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000c4821:
	mov -768(%RBP),%RSP
	add $-1288, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c484b
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -1368(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4828
	jmp uuid_00000000000c482a
uuid_00000000000c4828:
	push %RBP
	jmp uuid_00000000000c4825
	jmp uuid_00000000000c4827
uuid_00000000000c4825:
	push %RBP
	mov -1304(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4822
	jmp uuid_00000000000c4824
uuid_00000000000c4822:
	movb $1, -1376(%rbp)
uuid_00000000000c4824:
	mov -1400(%RBP),%RSP
	add $-1408, %RSP
uuid_00000000000c4827:
	mov -1392(%RBP),%RSP
	add $-1408, %RSP
uuid_00000000000c482a:
	mov -1384(%RBP),%RSP
	add $-1408, %RSP
	mov -1376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4848
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -1488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c483a
	jmp uuid_00000000000c483c
uuid_00000000000c483a:
	push %RBP
	jmp uuid_00000000000c4837
	jmp uuid_00000000000c4839
uuid_00000000000c4837:
	push %RBP
	mov -1472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1592(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4831
	jmp uuid_00000000000c4833
uuid_00000000000c4831:
	push %RBP
	jmp uuid_00000000000c482e
	jmp uuid_00000000000c4830
uuid_00000000000c482e:
	push %RBP
	mov -1528(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c482b
	jmp uuid_00000000000c482d
uuid_00000000000c482b:
	movb $1, -1600(%rbp)
uuid_00000000000c482d:
	mov -1624(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000c4830:
	mov -1616(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000c4833:
	mov -1608(%RBP),%RSP
	add $-1632, %RSP
	mov -1600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4834
	jmp uuid_00000000000c4836
uuid_00000000000c4834:
	movb $1, -1496(%rbp)
uuid_00000000000c4836:
	mov -1520(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000c4839:
	mov -1512(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000c483c:
	mov -1504(%RBP),%RSP
	add $-1632, %RSP
	mov -1496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4845
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov -1712(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4842
	push %RBP
	jmp uuid_00000000000c483f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c483e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4841
uuid_00000000000c483f:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c483d
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c4841:
	mov -1720(%RBP),%RSP
	add $-1720, %RSP
	jmp uuid_00000000000c4844
uuid_00000000000c4842:
uuid_00000000000c4844:
	mov -1640(%RBP),%RSP
	add $-1712, %RSP
	jmp uuid_00000000000c4847
uuid_00000000000c4845:
#call function index-index-of-tag : Arrow<Cons<String,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1632(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call index_SB_index_SB_of_SB_tag_CL_ArrowNilConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c4847:
	mov -1416(%RBP),%RSP
	add $-1632, %RSP
	jmp uuid_00000000000c484a
uuid_00000000000c4848:
#call function index-index-of-tag : Arrow<Cons<String,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1408(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call index_SB_index_SB_of_SB_tag_CL_ArrowNilConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-lone-tag : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1408(%rbp)
	mov %RBX, %RBP
	call index_SB_lone_SB_tag_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c484a:
	mov -1296(%RBP),%RSP
	add $-1408, %RSP
	jmp uuid_00000000000c484d
uuid_00000000000c484b:
#call function index-index-of-tag : Arrow<Cons<String,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -992(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call index_SB_index_SB_of_SB_tag_CL_ArrowNilConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-typedefs : Arrow<Cons<AST,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	mov -80(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call index_SB_typedefs_CL_ArrowNilConsU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c484d:
	mov -680(%RBP),%RSP
	add $-1288, %RSP
	jmp uuid_00000000000c4850
uuid_00000000000c484e:
#call function index-index-of-tag : Arrow<Cons<String,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -376(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call index_SB_index_SB_of_SB_tag_CL_ArrowNilConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-lone-tag : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -376(%rbp)
	mov %RBX, %RBP
	call index_SB_lone_SB_tag_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-typedefs : Arrow<Cons<AST,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	mov -80(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call index_SB_typedefs_CL_ArrowNilConsU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c4850:
	mov -168(%RBP),%RSP
	add $-672, %RSP
	mov %rbp, %rsp
	sub $88, %rsp
	ret
is_SB_macro_SB_head_CL_ArrowU64ConsU64String:
	mov $preprocess_SB_macros_CL_MacroListMacroListCaseNumber1, %r15
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $0
uuid_00000000000c48c5:
#call function non-zero : Arrow<MacroList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64MacroList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c48c6
	jmp uuid_00000000000c48c7
uuid_00000000000c48c6:
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4872
	jmp uuid_00000000000c4874
uuid_00000000000c4872:
	push %RBP
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq $0
	push %RBP
	mov -720(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4869
	jmp uuid_00000000000c486b
uuid_00000000000c4869:
	push %RBP
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	jmp uuid_00000000000c4866
	jmp uuid_00000000000c4868
uuid_00000000000c4866:
	push %RBP
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq $0
	push %RBP
	mov -896(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4860
	jmp uuid_00000000000c4862
uuid_00000000000c4860:
	push %RBP
	mov -888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c485d
	jmp uuid_00000000000c485f
uuid_00000000000c485d:
	push %RBP
	mov -880(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1072(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4857
	jmp uuid_00000000000c4859
uuid_00000000000c4857:
	push %RBP
	jmp uuid_00000000000c4854
	jmp uuid_00000000000c4856
uuid_00000000000c4854:
	push %RBP
	mov -1008(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4851
	jmp uuid_00000000000c4853
uuid_00000000000c4851:
	movb $1, -1080(%rbp)
uuid_00000000000c4853:
	mov -1104(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c4856:
	mov -1096(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c4859:
	mov -1088(%RBP),%RSP
	add $-1112, %RSP
	mov -1080(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c485a
	jmp uuid_00000000000c485c
uuid_00000000000c485a:
	movb $1, -904(%rbp)
uuid_00000000000c485c:
	mov -1000(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c485f:
	mov -920(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c4862:
	mov -912(%RBP),%RSP
	add $-1112, %RSP
	mov -904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4863
	jmp uuid_00000000000c4865
uuid_00000000000c4863:
	movb $1, -728(%rbp)
uuid_00000000000c4865:
	mov -824(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c4868:
	mov -744(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c486b:
	mov -736(%RBP),%RSP
	add $-1112, %RSP
	mov -728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c486f
	jmp uuid_00000000000c4871
uuid_00000000000c486f:
	push %RBP
	mov -384(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c486c
	jmp uuid_00000000000c486e
uuid_00000000000c486c:
	movb $1, -552(%rbp)
uuid_00000000000c486e:
	mov -1120(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000c4871:
	mov -568(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000c4874:
	mov -560(%RBP),%RSP
	add $-1288, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c48c2
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq $0
	push %RBP
	mov -1464(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c48a2
	jmp uuid_00000000000c48a4
uuid_00000000000c48a2:
	push %RBP
	pushq -1312(%RBP)
	pushq -1320(%RBP)
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq $0
	push %RBP
	mov -1640(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4899
	jmp uuid_00000000000c489b
uuid_00000000000c4899:
	push %RBP
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	jmp uuid_00000000000c4896
	jmp uuid_00000000000c4898
uuid_00000000000c4896:
	push %RBP
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq $0
	push %RBP
	mov -1816(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4890
	jmp uuid_00000000000c4892
uuid_00000000000c4890:
	push %RBP
	mov -1808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c488d
	jmp uuid_00000000000c488f
uuid_00000000000c488d:
	push %RBP
	mov -1800(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1992(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4887
	jmp uuid_00000000000c4889
uuid_00000000000c4887:
	push %RBP
	mov -1984(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4884
	jmp uuid_00000000000c4886
uuid_00000000000c4884:
	push %RBP
	mov -1976(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2168(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c487e
	jmp uuid_00000000000c4880
uuid_00000000000c487e:
	push %RBP
	jmp uuid_00000000000c487b
	jmp uuid_00000000000c487d
uuid_00000000000c487b:
	push %RBP
	mov -2104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4878
	jmp uuid_00000000000c487a
uuid_00000000000c4878:
	movb $1, -2176(%rbp)
uuid_00000000000c487a:
	mov -2200(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000c487d:
	mov -2192(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000c4880:
	mov -2184(%RBP),%RSP
	add $-2208, %RSP
	mov -2176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4881
	jmp uuid_00000000000c4883
uuid_00000000000c4881:
	movb $1, -2000(%rbp)
uuid_00000000000c4883:
	mov -2096(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000c4886:
	mov -2016(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000c4889:
	mov -2008(%RBP),%RSP
	add $-2208, %RSP
	mov -2000(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c488a
	jmp uuid_00000000000c488c
uuid_00000000000c488a:
	movb $1, -1824(%rbp)
uuid_00000000000c488c:
	mov -1920(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000c488f:
	mov -1840(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000c4892:
	mov -1832(%RBP),%RSP
	add $-2208, %RSP
	mov -1824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4893
	jmp uuid_00000000000c4895
uuid_00000000000c4893:
	movb $1, -1648(%rbp)
uuid_00000000000c4895:
	mov -1744(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000c4898:
	mov -1664(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000c489b:
	mov -1656(%RBP),%RSP
	add $-2208, %RSP
	mov -1648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c489f
	jmp uuid_00000000000c48a1
uuid_00000000000c489f:
	push %RBP
	mov -1304(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c489c
	jmp uuid_00000000000c489e
uuid_00000000000c489c:
	movb $1, -1472(%rbp)
uuid_00000000000c489e:
	mov -2216(%RBP),%RSP
	add $-2384, %RSP
uuid_00000000000c48a1:
	mov -1488(%RBP),%RSP
	add $-2384, %RSP
uuid_00000000000c48a4:
	mov -1480(%RBP),%RSP
	add $-2384, %RSP
	mov -1472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c48bf
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq $0
	push %RBP
	mov -2560(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c48b7
	jmp uuid_00000000000c48b9
uuid_00000000000c48b7:
	push %RBP
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq $0
	push %RBP
	mov -2736(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c48ae
	jmp uuid_00000000000c48b0
uuid_00000000000c48ae:
	push %RBP
	pushq -2664(%RBP)
	pushq -2672(%RBP)
	pushq -2680(%RBP)
	pushq -2688(%RBP)
	pushq -2696(%RBP)
	pushq -2704(%RBP)
	pushq -2712(%RBP)
	pushq -2720(%RBP)
	pushq -2728(%RBP)
	jmp uuid_00000000000c48ab
	jmp uuid_00000000000c48ad
uuid_00000000000c48ab:
	push %RBP
	pushq -2592(%RBP)
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	pushq -2624(%RBP)
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	pushq -2656(%RBP)
	jmp uuid_00000000000c48a8
	jmp uuid_00000000000c48aa
uuid_00000000000c48a8:
	movb $1, -2744(%rbp)
uuid_00000000000c48aa:
	mov -2840(%RBP),%RSP
	add $-2912, %RSP
uuid_00000000000c48ad:
	mov -2760(%RBP),%RSP
	add $-2912, %RSP
uuid_00000000000c48b0:
	mov -2752(%RBP),%RSP
	add $-2912, %RSP
	mov -2744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c48b4
	jmp uuid_00000000000c48b6
uuid_00000000000c48b4:
	push %RBP
	mov -2400(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c48b1
	jmp uuid_00000000000c48b3
uuid_00000000000c48b1:
	movb $1, -2568(%rbp)
uuid_00000000000c48b3:
	mov -2920(%RBP),%RSP
	add $-3088, %RSP
uuid_00000000000c48b6:
	mov -2584(%RBP),%RSP
	add $-3088, %RSP
uuid_00000000000c48b9:
	mov -2576(%RBP),%RSP
	add $-3088, %RSP
	mov -2568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c48bc
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c48bb
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c48be
uuid_00000000000c48bc:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48ba
	pushq -2848(%rbp)
	pushq -2856(%rbp)
	pushq -2864(%rbp)
	pushq -2872(%rbp)
	pushq -2880(%rbp)
	pushq -2888(%rbp)
	pushq -2896(%rbp)
	pushq -2904(%rbp)
	pushq -2912(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c48be:
	mov -2392(%RBP),%RSP
	add $-3088, %RSP
	jmp uuid_00000000000c48c1
uuid_00000000000c48bf:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -2208(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -16(%RBP), %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c48a5
	jmp uuid_00000000000c48a7
uuid_00000000000c48a5:
	movq $1, -200(%rbp)
uuid_00000000000c48a7:
	mov -2392(%RBP),%RSP
	add $-2392, %RSP
	movq -2384(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -2376(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -2368(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -2360(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -2352(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -2344(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -2336(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -2328(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -2320(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -2312(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -2304(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -2296(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -2288(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -2280(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -2272(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -2264(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2256(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -2248(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -2240(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -2232(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -2224(%rbp), %r15
	movq %r15, -32(%rbp)
uuid_00000000000c48c1:
	mov -1296(%RBP),%RSP
	add $-2392, %RSP
	jmp uuid_00000000000c48c4
uuid_00000000000c48c2:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -16(%RBP), %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4875
	jmp uuid_00000000000c4877
uuid_00000000000c4875:
	movq $1, -200(%rbp)
uuid_00000000000c4877:
	mov -1296(%RBP),%RSP
	add $-1296, %RSP
	movq -1288(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -32(%rbp)
uuid_00000000000c48c4:
	mov -376(%RBP),%RSP
	add $-1296, %RSP
	add $168, %rsp
	add $168, %rsp
	add $8, %rsp
	add $152, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $168, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c48c5
uuid_00000000000c48c7:
	mov -200(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
preprocess_SB_apply_SB_hard_CL_ArrowASTConsASTConsU64String:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov $preprocess_SB_macros_CL_MacroListMacroListCaseNumber1, %r15
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $0
uuid_00000000000c4928:
#call function non-zero : Arrow<MacroList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64MacroList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4929
	jmp uuid_00000000000c492a
uuid_00000000000c4929:
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	push %RBP
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq $0
	push %RBP
	mov -688(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c48d7
	jmp uuid_00000000000c48d9
uuid_00000000000c48d7:
	push %RBP
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq $0
	push %RBP
	mov -864(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c48ce
	jmp uuid_00000000000c48d0
uuid_00000000000c48ce:
	push %RBP
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	jmp uuid_00000000000c48cb
	jmp uuid_00000000000c48cd
uuid_00000000000c48cb:
	push %RBP
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq -752(%RBP)
	pushq -760(%RBP)
	pushq -768(%RBP)
	pushq -776(%RBP)
	pushq -784(%RBP)
	jmp uuid_00000000000c48c8
	jmp uuid_00000000000c48ca
uuid_00000000000c48c8:
	movb $1, -872(%rbp)
uuid_00000000000c48ca:
	mov -968(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c48cd:
	mov -888(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c48d0:
	mov -880(%RBP),%RSP
	add $-1040, %RSP
	mov -872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c48d4
	jmp uuid_00000000000c48d6
uuid_00000000000c48d4:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c48d1
	jmp uuid_00000000000c48d3
uuid_00000000000c48d1:
	movb $1, -696(%rbp)
uuid_00000000000c48d3:
	mov -1048(%RBP),%RSP
	add $-1216, %RSP
uuid_00000000000c48d6:
	mov -712(%RBP),%RSP
	add $-1216, %RSP
uuid_00000000000c48d9:
	mov -704(%RBP),%RSP
	add $-1216, %RSP
	mov -696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4925
	push %RBP
	jmp uuid_00000000000c4922
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c4921
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4924
uuid_00000000000c4922:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
uuid_00000000000c4924:
	mov -1224(%RBP),%RSP
	add $-1224, %RSP
	jmp uuid_00000000000c4927
uuid_00000000000c4925:
	movq -1216(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -328(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -176(%rbp)
	pushq $0
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	push %RBP
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq $0
	push %RBP
	mov -1376(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c48e9
	jmp uuid_00000000000c48eb
uuid_00000000000c48e9:
	push %RBP
	jmp uuid_00000000000c48e6
	jmp uuid_00000000000c48e8
uuid_00000000000c48e6:
	push %RBP
	mov -1360(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1480(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c48e0
	jmp uuid_00000000000c48e2
uuid_00000000000c48e0:
	push %RBP
	jmp uuid_00000000000c48dd
	jmp uuid_00000000000c48df
uuid_00000000000c48dd:
	push %RBP
	mov -1416(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c48da
	jmp uuid_00000000000c48dc
uuid_00000000000c48da:
	movb $1, -1488(%rbp)
uuid_00000000000c48dc:
	mov -1512(%RBP),%RSP
	add $-1520, %RSP
uuid_00000000000c48df:
	mov -1504(%RBP),%RSP
	add $-1520, %RSP
uuid_00000000000c48e2:
	mov -1496(%RBP),%RSP
	add $-1520, %RSP
	mov -1488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c48e3
	jmp uuid_00000000000c48e5
uuid_00000000000c48e3:
	movb $1, -1384(%rbp)
uuid_00000000000c48e5:
	mov -1408(%RBP),%RSP
	add $-1520, %RSP
uuid_00000000000c48e8:
	mov -1400(%RBP),%RSP
	add $-1520, %RSP
uuid_00000000000c48eb:
	mov -1392(%RBP),%RSP
	add $-1520, %RSP
	mov -1384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4911
	push %RBP
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq $0
	push %RBP
	mov -1600(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4907
	jmp uuid_00000000000c4909
uuid_00000000000c4907:
	push %RBP
	jmp uuid_00000000000c4904
	jmp uuid_00000000000c4906
uuid_00000000000c4904:
	push %RBP
	mov -1584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1704(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c48fe
	jmp uuid_00000000000c4900
uuid_00000000000c48fe:
	push %RBP
	jmp uuid_00000000000c48fb
	jmp uuid_00000000000c48fd
uuid_00000000000c48fb:
	push %RBP
	mov -1688(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1808(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c48f5
	jmp uuid_00000000000c48f7
uuid_00000000000c48f5:
	push %RBP
	jmp uuid_00000000000c48f2
	jmp uuid_00000000000c48f4
uuid_00000000000c48f2:
	push %RBP
	mov -1744(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c48ef
	jmp uuid_00000000000c48f1
uuid_00000000000c48ef:
	movb $1, -1816(%rbp)
uuid_00000000000c48f1:
	mov -1840(%RBP),%RSP
	add $-1848, %RSP
uuid_00000000000c48f4:
	mov -1832(%RBP),%RSP
	add $-1848, %RSP
uuid_00000000000c48f7:
	mov -1824(%RBP),%RSP
	add $-1848, %RSP
	mov -1816(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c48f8
	jmp uuid_00000000000c48fa
uuid_00000000000c48f8:
	movb $1, -1712(%rbp)
uuid_00000000000c48fa:
	mov -1736(%RBP),%RSP
	add $-1848, %RSP
uuid_00000000000c48fd:
	mov -1728(%RBP),%RSP
	add $-1848, %RSP
uuid_00000000000c4900:
	mov -1720(%RBP),%RSP
	add $-1848, %RSP
	mov -1712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4901
	jmp uuid_00000000000c4903
uuid_00000000000c4901:
	movb $1, -1608(%rbp)
uuid_00000000000c4903:
	mov -1632(%RBP),%RSP
	add $-1848, %RSP
uuid_00000000000c4906:
	mov -1624(%RBP),%RSP
	add $-1848, %RSP
uuid_00000000000c4909:
	mov -1616(%RBP),%RSP
	add $-1848, %RSP
	mov -1608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c490e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c490d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4910
uuid_00000000000c490e:
	push %RBP
	mov -16(%RBP), %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -1848(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c490a
	jmp uuid_00000000000c490c
uuid_00000000000c490a:
	movb $1, -1224(%rbp)
uuid_00000000000c490c:
	mov -1856(%RBP),%RSP
	add $-1856, %RSP
uuid_00000000000c4910:
	mov -1528(%RBP),%RSP
	add $-1856, %RSP
	jmp uuid_00000000000c4913
uuid_00000000000c4911:
	push %RBP
	mov -16(%RBP), %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -1520(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c48ec
	jmp uuid_00000000000c48ee
uuid_00000000000c48ec:
	movb $1, -1224(%rbp)
uuid_00000000000c48ee:
	mov -1528(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000c4913:
	mov -1304(%RBP),%RSP
	add $-1528, %RSP
	push %RBP
	mov -1224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c491e
	jmp uuid_00000000000c4920
uuid_00000000000c491e:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	mov -1736(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c491b
	push %RBP
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	jmp uuid_00000000000c4918
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c4917
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c491a
uuid_00000000000c4918:
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	popq -960(%RBP)
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
	popq -912(%RBP)
	popq -904(%RBP)
	popq -896(%RBP)
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -960(%RBP)
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
	popq -912(%RBP)
	popq -904(%RBP)
	popq -896(%RBP)
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4914
	jmp uuid_00000000000c4916
uuid_00000000000c4914:
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	popq -1912(%RBP)
	popq -1904(%RBP)
	popq -1896(%RBP)
	popq -1888(%RBP)
	popq -1880(%RBP)
	popq -1872(%RBP)
	popq -1864(%RBP)
	popq -1856(%RBP)
	popq -1848(%RBP)
uuid_00000000000c4916:
	mov -2016(%RBP),%RSP
	add $-2016, %RSP
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	movb $1, -344(%rbp)
uuid_00000000000c491a:
	mov -1744(%RBP),%RSP
	add $-2016, %RSP
	jmp uuid_00000000000c491d
uuid_00000000000c491b:
	movq -1216(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -328(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -176(%rbp)
uuid_00000000000c491d:
	mov -1640(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000c4920:
	mov -1536(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000c4927:
	mov -520(%RBP),%RSP
	add $-1736, %RSP
	add $168, %rsp
	add $168, %rsp
	add $8, %rsp
	add $152, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $168, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $96, %rsp
	add $96, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c4928
uuid_00000000000c492a:
	push %RBP
	mov -344(%RBP), %AL
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c492c
	jmp uuid_00000000000c492e
uuid_00000000000c492c:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c492b
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c492e:
	mov -352(%RBP),%RSP
	add $-352, %RSP
	subq $72, %rsp
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $96, %rsp
	ret
preprocess_SB_apply_SB_literals_CL_ArrowASTAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4950
	jmp uuid_00000000000c4952
uuid_00000000000c4950:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4935
	jmp uuid_00000000000c4937
uuid_00000000000c4935:
	push %RBP
	jmp uuid_00000000000c4932
	jmp uuid_00000000000c4934
uuid_00000000000c4932:
	push %RBP
	mov -336(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c492f
	jmp uuid_00000000000c4931
uuid_00000000000c492f:
	movb $1, -408(%rbp)
uuid_00000000000c4931:
	mov -432(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c4934:
	mov -424(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c4937:
	mov -416(%RBP),%RSP
	add $-440, %RSP
	mov -408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c494d
	jmp uuid_00000000000c494f
uuid_00000000000c494d:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -520(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4947
	jmp uuid_00000000000c4949
uuid_00000000000c4947:
	push %RBP
	mov -512(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4944
	jmp uuid_00000000000c4946
uuid_00000000000c4944:
	push %RBP
	mov -504(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c493e
	jmp uuid_00000000000c4940
uuid_00000000000c493e:
	push %RBP
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq -688(%RBP)
	jmp uuid_00000000000c493b
	jmp uuid_00000000000c493d
uuid_00000000000c493b:
	push %RBP
	mov -632(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4938
	jmp uuid_00000000000c493a
uuid_00000000000c4938:
	movb $1, -704(%rbp)
uuid_00000000000c493a:
	mov -784(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c493d:
	mov -720(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c4940:
	mov -712(%RBP),%RSP
	add $-792, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4941
	jmp uuid_00000000000c4943
uuid_00000000000c4941:
	movb $1, -528(%rbp)
uuid_00000000000c4943:
	mov -624(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c4946:
	mov -544(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c4949:
	mov -536(%RBP),%RSP
	add $-792, %RSP
	mov -528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c494a
	jmp uuid_00000000000c494c
uuid_00000000000c494a:
	movb $1, -312(%rbp)
uuid_00000000000c494c:
	mov -448(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c494f:
	mov -328(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c4952:
	mov -320(%RBP),%RSP
	add $-792, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c49df
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -872(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4974
	jmp uuid_00000000000c4976
uuid_00000000000c4974:
	push %RBP
	mov -864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -968(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4959
	jmp uuid_00000000000c495b
uuid_00000000000c4959:
	push %RBP
	jmp uuid_00000000000c4956
	jmp uuid_00000000000c4958
uuid_00000000000c4956:
	push %RBP
	mov -904(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4953
	jmp uuid_00000000000c4955
uuid_00000000000c4953:
	movb $1, -976(%rbp)
uuid_00000000000c4955:
	mov -1000(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c4958:
	mov -992(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c495b:
	mov -984(%RBP),%RSP
	add $-1008, %RSP
	mov -976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4971
	jmp uuid_00000000000c4973
uuid_00000000000c4971:
	push %RBP
	mov -856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1088(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c496b
	jmp uuid_00000000000c496d
uuid_00000000000c496b:
	push %RBP
	mov -1080(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4968
	jmp uuid_00000000000c496a
uuid_00000000000c4968:
	push %RBP
	mov -1072(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1264(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4962
	jmp uuid_00000000000c4964
uuid_00000000000c4962:
	push %RBP
	pushq -1208(%RBP)
	pushq -1216(%RBP)
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	pushq -1256(%RBP)
	jmp uuid_00000000000c495f
	jmp uuid_00000000000c4961
uuid_00000000000c495f:
	push %RBP
	mov -1200(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1360(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c495c
	jmp uuid_00000000000c495e
uuid_00000000000c495c:
	movb $1, -1272(%rbp)
uuid_00000000000c495e:
	mov -1352(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000c4961:
	mov -1288(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000c4964:
	mov -1280(%RBP),%RSP
	add $-1360, %RSP
	mov -1272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4965
	jmp uuid_00000000000c4967
uuid_00000000000c4965:
	movb $1, -1096(%rbp)
uuid_00000000000c4967:
	mov -1192(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000c496a:
	mov -1112(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000c496d:
	mov -1104(%RBP),%RSP
	add $-1360, %RSP
	mov -1096(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c496e
	jmp uuid_00000000000c4970
uuid_00000000000c496e:
	movb $1, -880(%rbp)
uuid_00000000000c4970:
	mov -1016(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000c4973:
	mov -896(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000c4976:
	mov -888(%RBP),%RSP
	add $-1360, %RSP
	mov -880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c49dc
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1440(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c497d
	jmp uuid_00000000000c497f
uuid_00000000000c497d:
	push %RBP
	pushq -1384(%RBP)
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	jmp uuid_00000000000c497a
	jmp uuid_00000000000c497c
uuid_00000000000c497a:
	push %RBP
	mov -1376(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4977
	jmp uuid_00000000000c4979
uuid_00000000000c4977:
	movb $1, -1448(%rbp)
uuid_00000000000c4979:
	mov -1528(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c497c:
	mov -1464(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c497f:
	mov -1456(%RBP),%RSP
	add $-1536, %RSP
	mov -1448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c49d9
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1616(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c498d
	jmp uuid_00000000000c498f
uuid_00000000000c498d:
	push %RBP
	pushq -1560(%RBP)
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	jmp uuid_00000000000c498a
	jmp uuid_00000000000c498c
uuid_00000000000c498a:
	push %RBP
	mov -1552(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4987
	jmp uuid_00000000000c4989
uuid_00000000000c4987:
	movb $1, -1624(%rbp)
uuid_00000000000c4989:
	mov -1704(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000c498c:
	mov -1640(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000c498f:
	mov -1632(%RBP),%RSP
	add $-1712, %RSP
	mov -1624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c49d6
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1792(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4999
	jmp uuid_00000000000c499b
uuid_00000000000c4999:
	push %RBP
	mov -1784(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4996
	jmp uuid_00000000000c4998
uuid_00000000000c4996:
	push %RBP
	mov -1776(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4993
	jmp uuid_00000000000c4995
uuid_00000000000c4993:
	movb $1, -1800(%rbp)
uuid_00000000000c4995:
	mov -1896(%RBP),%RSP
	add $-1968, %RSP
uuid_00000000000c4998:
	mov -1816(%RBP),%RSP
	add $-1968, %RSP
uuid_00000000000c499b:
	mov -1808(%RBP),%RSP
	add $-1968, %RSP
	mov -1800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c49d3
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2048(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c49a2
	jmp uuid_00000000000c49a4
uuid_00000000000c49a2:
	push %RBP
	mov -2040(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c499f
	jmp uuid_00000000000c49a1
uuid_00000000000c499f:
	push %RBP
	mov -2032(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c499c
	jmp uuid_00000000000c499e
uuid_00000000000c499c:
	movb $1, -2056(%rbp)
uuid_00000000000c499e:
	mov -2152(%RBP),%RSP
	add $-2224, %RSP
uuid_00000000000c49a1:
	mov -2072(%RBP),%RSP
	add $-2224, %RSP
uuid_00000000000c49a4:
	mov -2064(%RBP),%RSP
	add $-2224, %RSP
	mov -2056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c49d0
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2304(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c49ab
	jmp uuid_00000000000c49ad
uuid_00000000000c49ab:
	push %RBP
	mov -2296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c49a8
	jmp uuid_00000000000c49aa
uuid_00000000000c49a8:
	push %RBP
	mov -2288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c49a5
	jmp uuid_00000000000c49a7
uuid_00000000000c49a5:
	movb $1, -2312(%rbp)
uuid_00000000000c49a7:
	mov -2408(%RBP),%RSP
	add $-2480, %RSP
uuid_00000000000c49aa:
	mov -2328(%RBP),%RSP
	add $-2480, %RSP
uuid_00000000000c49ad:
	mov -2320(%RBP),%RSP
	add $-2480, %RSP
	mov -2312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c49cd
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2560(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c49b7
	jmp uuid_00000000000c49b9
uuid_00000000000c49b7:
	push %RBP
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	jmp uuid_00000000000c49b4
	jmp uuid_00000000000c49b6
uuid_00000000000c49b4:
	push %RBP
	mov -2528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c49b1
	jmp uuid_00000000000c49b3
uuid_00000000000c49b1:
	push %RBP
	mov -2520(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c49ae
	jmp uuid_00000000000c49b0
uuid_00000000000c49ae:
	movb $1, -2568(%rbp)
uuid_00000000000c49b0:
	mov -2696(%RBP),%RSP
	add $-2768, %RSP
uuid_00000000000c49b3:
	mov -2616(%RBP),%RSP
	add $-2768, %RSP
uuid_00000000000c49b6:
	mov -2584(%RBP),%RSP
	add $-2768, %RSP
uuid_00000000000c49b9:
	mov -2576(%RBP),%RSP
	add $-2768, %RSP
	mov -2568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c49ca
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2848(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c49c0
	jmp uuid_00000000000c49c2
uuid_00000000000c49c0:
	push %RBP
	mov -2840(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c49bd
	jmp uuid_00000000000c49bf
uuid_00000000000c49bd:
	push %RBP
	pushq -2784(%RBP)
	pushq -2792(%RBP)
	pushq -2800(%RBP)
	pushq -2808(%RBP)
	pushq -2816(%RBP)
	pushq -2824(%RBP)
	pushq -2832(%RBP)
	jmp uuid_00000000000c49ba
	jmp uuid_00000000000c49bc
uuid_00000000000c49ba:
	movb $1, -2856(%rbp)
uuid_00000000000c49bc:
	mov -2952(%RBP),%RSP
	add $-3008, %RSP
uuid_00000000000c49bf:
	mov -2872(%RBP),%RSP
	add $-3008, %RSP
uuid_00000000000c49c2:
	mov -2864(%RBP),%RSP
	add $-3008, %RSP
	mov -2856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c49c7
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	jmp uuid_00000000000c49c4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c49c3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c49c6
uuid_00000000000c49c4:
	movq -3088(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -3080(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -3072(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -3064(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -3056(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -3048(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -3040(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -3032(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -3024(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000c49c6:
	mov -3016(%RBP),%RSP
	add $-3088, %RSP
	jmp uuid_00000000000c49c9
uuid_00000000000c49c7:
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2960(%rbp)
	pushq -2968(%rbp)
	pushq -2976(%rbp)
	pushq -2984(%rbp)
	pushq -2992(%rbp)
	pushq -3000(%rbp)
	pushq -3008(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2880(%rbp)
	pushq -2888(%rbp)
	pushq -2896(%rbp)
	pushq -2904(%rbp)
	pushq -2912(%rbp)
	pushq -2920(%rbp)
	pushq -2928(%rbp)
	pushq -2936(%rbp)
	pushq -2944(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c49c9:
	mov -2776(%RBP),%RSP
	add $-3008, %RSP
	jmp uuid_00000000000c49cc
uuid_00000000000c49ca:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2704(%rbp)
	pushq -2712(%rbp)
	pushq -2720(%rbp)
	pushq -2728(%rbp)
	pushq -2736(%rbp)
	pushq -2744(%rbp)
	pushq -2752(%rbp)
	pushq -2760(%rbp)
	pushq -2768(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2624(%rbp)
	pushq -2632(%rbp)
	pushq -2640(%rbp)
	pushq -2648(%rbp)
	pushq -2656(%rbp)
	pushq -2664(%rbp)
	pushq -2672(%rbp)
	pushq -2680(%rbp)
	pushq -2688(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -2592(%rbp)
	pushq -2600(%rbp)
	pushq -2608(%rbp)
	pushq $5
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c49cc:
	mov -2488(%RBP),%RSP
	add $-2768, %RSP
	jmp uuid_00000000000c49cf
uuid_00000000000c49cd:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2416(%rbp)
	pushq -2424(%rbp)
	pushq -2432(%rbp)
	pushq -2440(%rbp)
	pushq -2448(%rbp)
	pushq -2456(%rbp)
	pushq -2464(%rbp)
	pushq -2472(%rbp)
	pushq -2480(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2336(%rbp)
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c49cf:
	mov -2232(%RBP),%RSP
	add $-2480, %RSP
	jmp uuid_00000000000c49d2
uuid_00000000000c49d0:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c49d2:
	mov -1976(%RBP),%RSP
	add $-2224, %RSP
	jmp uuid_00000000000c49d5
uuid_00000000000c49d3:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c49d5:
	mov -1720(%RBP),%RSP
	add $-1968, %RSP
	jmp uuid_00000000000c49d8
uuid_00000000000c49d6:
	push %RBP
#call function has-suffix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq $uuid_00000000000c4980
	mov %RBX, %RBP
	call has_SB_suffix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4990
	jmp uuid_00000000000c4992
uuid_00000000000c4990:
#call function remove-suffix : Arrow<Cons<String,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq $uuid_00000000000c4980
	mov %RBX, %RBP
	call remove_SB_suffix_CL_ArrowStringConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4981
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq $uuid_00000000000c4981
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1728(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1728(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4983
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq $uuid_00000000000c4983
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4983
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq $uuid_00000000000c4983
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c4992:
	mov -1720(%RBP),%RSP
	add $-1728, %RSP
uuid_00000000000c49d8:
	mov -1544(%RBP),%RSP
	add $-1728, %RSP
	jmp uuid_00000000000c49db
uuid_00000000000c49d9:
	push %RBP
#call function has-suffix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1536(%rbp)
	pushq $uuid_00000000000c4980
	mov %RBX, %RBP
	call has_SB_suffix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4984
	jmp uuid_00000000000c4986
uuid_00000000000c4984:
#call function remove-suffix : Arrow<Cons<String,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1536(%rbp)
	pushq $uuid_00000000000c4980
	mov %RBX, %RBP
	call remove_SB_suffix_CL_ArrowStringConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4981
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq $uuid_00000000000c4981
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1176
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1552(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1552(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4982
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4983
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq $uuid_00000000000c4983
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4983
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq $uuid_00000000000c4983
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c4986:
	mov -1544(%RBP),%RSP
	add $-1552, %RSP
uuid_00000000000c49db:
	mov -1368(%RBP),%RSP
	add $-1552, %RSP
	jmp uuid_00000000000c49de
uuid_00000000000c49dc:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1176
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1008(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c49de:
	mov -800(%RBP),%RSP
	add $-1360, %RSP
	jmp uuid_00000000000c49e1
uuid_00000000000c49df:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1176
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -440(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c49e1:
	mov -232(%RBP),%RSP
	add $-792, %RSP
	subq $72, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
preprocess_SB_apply_SB_locations_CL_ArrowASTAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c49fc
	jmp uuid_00000000000c49fe
uuid_00000000000c49fc:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c49e9
	jmp uuid_00000000000c49eb
uuid_00000000000c49e9:
	push %RBP
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	jmp uuid_00000000000c49e6
	jmp uuid_00000000000c49e8
uuid_00000000000c49e6:
	push %RBP
	mov -336(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq $uuid_00000000000c49e2
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c49e3
	jmp uuid_00000000000c49e5
uuid_00000000000c49e3:
	movb $1, -408(%rbp)
uuid_00000000000c49e5:
	mov -488(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000c49e8:
	mov -424(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000c49eb:
	mov -416(%RBP),%RSP
	add $-496, %RSP
	mov -408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c49f9
	jmp uuid_00000000000c49fb
uuid_00000000000c49f9:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -576(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c49f3
	jmp uuid_00000000000c49f5
uuid_00000000000c49f3:
	push %RBP
	jmp uuid_00000000000c49f0
	jmp uuid_00000000000c49f2
uuid_00000000000c49f0:
	push %RBP
	mov -512(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -616(%rbp)
	pushq $uuid_00000000000c49ec
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c49ed
	jmp uuid_00000000000c49ef
uuid_00000000000c49ed:
	movb $1, -584(%rbp)
uuid_00000000000c49ef:
	mov -608(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c49f2:
	mov -600(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c49f5:
	mov -592(%RBP),%RSP
	add $-616, %RSP
	mov -584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c49f6
	jmp uuid_00000000000c49f8
uuid_00000000000c49f6:
	movb $1, -312(%rbp)
uuid_00000000000c49f8:
	mov -504(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c49fb:
	mov -328(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c49fe:
	mov -320(%RBP),%RSP
	add $-616, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a6e
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a19
	jmp uuid_00000000000c4a1b
uuid_00000000000c4a19:
	push %RBP
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq -688(%RBP)
	jmp uuid_00000000000c4a16
	jmp uuid_00000000000c4a18
uuid_00000000000c4a16:
	push %RBP
	mov -632(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4a13
	jmp uuid_00000000000c4a15
uuid_00000000000c4a13:
	movb $1, -704(%rbp)
uuid_00000000000c4a15:
	mov -784(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c4a18:
	mov -720(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c4a1b:
	mov -712(%RBP),%RSP
	add $-792, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a6b
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -872(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a22
	jmp uuid_00000000000c4a24
uuid_00000000000c4a22:
	push %RBP
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	jmp uuid_00000000000c4a1f
	jmp uuid_00000000000c4a21
uuid_00000000000c4a1f:
	push %RBP
	mov -808(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4a1c
	jmp uuid_00000000000c4a1e
uuid_00000000000c4a1c:
	movb $1, -880(%rbp)
uuid_00000000000c4a1e:
	mov -960(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c4a21:
	mov -896(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c4a24:
	mov -888(%RBP),%RSP
	add $-968, %RSP
	mov -880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a68
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1048(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a2b
	jmp uuid_00000000000c4a2d
uuid_00000000000c4a2b:
	push %RBP
	mov -1040(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4a28
	jmp uuid_00000000000c4a2a
uuid_00000000000c4a28:
	push %RBP
	mov -1032(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4a25
	jmp uuid_00000000000c4a27
uuid_00000000000c4a25:
	movb $1, -1056(%rbp)
uuid_00000000000c4a27:
	mov -1152(%RBP),%RSP
	add $-1224, %RSP
uuid_00000000000c4a2a:
	mov -1072(%RBP),%RSP
	add $-1224, %RSP
uuid_00000000000c4a2d:
	mov -1064(%RBP),%RSP
	add $-1224, %RSP
	mov -1056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a65
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1304(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a34
	jmp uuid_00000000000c4a36
uuid_00000000000c4a34:
	push %RBP
	mov -1296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4a31
	jmp uuid_00000000000c4a33
uuid_00000000000c4a31:
	push %RBP
	mov -1288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4a2e
	jmp uuid_00000000000c4a30
uuid_00000000000c4a2e:
	movb $1, -1312(%rbp)
uuid_00000000000c4a30:
	mov -1408(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c4a33:
	mov -1328(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c4a36:
	mov -1320(%RBP),%RSP
	add $-1480, %RSP
	mov -1312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a62
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1560(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a3d
	jmp uuid_00000000000c4a3f
uuid_00000000000c4a3d:
	push %RBP
	mov -1552(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4a3a
	jmp uuid_00000000000c4a3c
uuid_00000000000c4a3a:
	push %RBP
	mov -1544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4a37
	jmp uuid_00000000000c4a39
uuid_00000000000c4a37:
	movb $1, -1568(%rbp)
uuid_00000000000c4a39:
	mov -1664(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000c4a3c:
	mov -1584(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000c4a3f:
	mov -1576(%RBP),%RSP
	add $-1736, %RSP
	mov -1568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a5f
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1816(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a49
	jmp uuid_00000000000c4a4b
uuid_00000000000c4a49:
	push %RBP
	pushq -1792(%RBP)
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	jmp uuid_00000000000c4a46
	jmp uuid_00000000000c4a48
uuid_00000000000c4a46:
	push %RBP
	mov -1784(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4a43
	jmp uuid_00000000000c4a45
uuid_00000000000c4a43:
	push %RBP
	mov -1776(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4a40
	jmp uuid_00000000000c4a42
uuid_00000000000c4a40:
	movb $1, -1824(%rbp)
uuid_00000000000c4a42:
	mov -1952(%RBP),%RSP
	add $-2024, %RSP
uuid_00000000000c4a45:
	mov -1872(%RBP),%RSP
	add $-2024, %RSP
uuid_00000000000c4a48:
	mov -1840(%RBP),%RSP
	add $-2024, %RSP
uuid_00000000000c4a4b:
	mov -1832(%RBP),%RSP
	add $-2024, %RSP
	mov -1824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a5c
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2104(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a52
	jmp uuid_00000000000c4a54
uuid_00000000000c4a52:
	push %RBP
	mov -2096(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4a4f
	jmp uuid_00000000000c4a51
uuid_00000000000c4a4f:
	push %RBP
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	jmp uuid_00000000000c4a4c
	jmp uuid_00000000000c4a4e
uuid_00000000000c4a4c:
	movb $1, -2112(%rbp)
uuid_00000000000c4a4e:
	mov -2208(%RBP),%RSP
	add $-2264, %RSP
uuid_00000000000c4a51:
	mov -2128(%RBP),%RSP
	add $-2264, %RSP
uuid_00000000000c4a54:
	mov -2120(%RBP),%RSP
	add $-2264, %RSP
	mov -2112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a59
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	jmp uuid_00000000000c4a56
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c4a55
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4a58
uuid_00000000000c4a56:
	movq -2344(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -2336(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -2328(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -2320(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -2312(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -2304(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -2296(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -2288(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -2280(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000c4a58:
	mov -2272(%RBP),%RSP
	add $-2344, %RSP
	jmp uuid_00000000000c4a5b
uuid_00000000000c4a59:
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c4a5b:
	mov -2032(%RBP),%RSP
	add $-2264, %RSP
	jmp uuid_00000000000c4a5e
uuid_00000000000c4a5c:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq $5
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c4a5e:
	mov -1744(%RBP),%RSP
	add $-2024, %RSP
	jmp uuid_00000000000c4a61
uuid_00000000000c4a5f:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c4a61:
	mov -1488(%RBP),%RSP
	add $-1736, %RSP
	jmp uuid_00000000000c4a64
uuid_00000000000c4a62:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c4a64:
	mov -1232(%RBP),%RSP
	add $-1480, %RSP
	jmp uuid_00000000000c4a67
uuid_00000000000c4a65:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c4a67:
	mov -976(%RBP),%RSP
	add $-1224, %RSP
	jmp uuid_00000000000c4a6a
uuid_00000000000c4a68:
	pushq -968(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c4a6a:
	mov -800(%RBP),%RSP
	add $-968, %RSP
	jmp uuid_00000000000c4a6d
uuid_00000000000c4a6b:
	pushq -792(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c4a6d:
	mov -624(%RBP),%RSP
	add $-792, %RSP
	jmp uuid_00000000000c4a70
uuid_00000000000c4a6e:
	pushq $uuid_00000000000c49ff
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	push %RBP
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a09
	jmp uuid_00000000000c4a0b
uuid_00000000000c4a09:
	push %RBP
	mov -688(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4a06
	jmp uuid_00000000000c4a08
uuid_00000000000c4a06:
	push %RBP
	mov -680(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4a03
	jmp uuid_00000000000c4a05
uuid_00000000000c4a03:
	push %RBP
	mov -672(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4a00
	jmp uuid_00000000000c4a02
uuid_00000000000c4a00:
	movb $1, -704(%rbp)
uuid_00000000000c4a02:
	mov -752(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000c4a05:
	mov -736(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000c4a08:
	mov -720(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000c4a0b:
	mov -712(%RBP),%RSP
	add $-760, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a10
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c4a0f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4a12
uuid_00000000000c4a10:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4a0c
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -760(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4a0d
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -744(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4a0e
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -624(%rbp)
uuid_00000000000c4a12:
	mov -664(%RBP),%RSP
	add $-760, %RSP
	pushq -624(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c4a70:
	mov -232(%RBP),%RSP
	add $-760, %RSP
	subq $72, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
preprocess_SB_apply_CL_ArrowASTAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a98
	jmp uuid_00000000000c4a9a
uuid_00000000000c4a98:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4a95
	jmp uuid_00000000000c4a97
uuid_00000000000c4a95:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -480(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a8f
	jmp uuid_00000000000c4a91
uuid_00000000000c4a8f:
	push %RBP
	mov -472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -576(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a7d
	jmp uuid_00000000000c4a7f
uuid_00000000000c4a7d:
	push %RBP
	mov -568(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a74
	jmp uuid_00000000000c4a76
uuid_00000000000c4a74:
	push %RBP
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	jmp uuid_00000000000c4a71
	jmp uuid_00000000000c4a73
uuid_00000000000c4a71:
	movb $1, -680(%rbp)
uuid_00000000000c4a73:
	mov -696(%RBP),%RSP
	add $-720, %RSP
uuid_00000000000c4a76:
	mov -688(%RBP),%RSP
	add $-720, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a7a
	jmp uuid_00000000000c4a7c
uuid_00000000000c4a7a:
	push %RBP
	mov -560(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4a77
	jmp uuid_00000000000c4a79
uuid_00000000000c4a77:
	movb $1, -584(%rbp)
uuid_00000000000c4a79:
	mov -728(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c4a7c:
	mov -600(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c4a7f:
	mov -592(%RBP),%RSP
	add $-800, %RSP
	mov -584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a8c
	jmp uuid_00000000000c4a8e
uuid_00000000000c4a8c:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a86
	jmp uuid_00000000000c4a88
uuid_00000000000c4a86:
	push %RBP
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	jmp uuid_00000000000c4a83
	jmp uuid_00000000000c4a85
uuid_00000000000c4a83:
	push %RBP
	mov -816(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4a80
	jmp uuid_00000000000c4a82
uuid_00000000000c4a80:
	movb $1, -888(%rbp)
uuid_00000000000c4a82:
	mov -968(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000c4a85:
	mov -904(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000c4a88:
	mov -896(%RBP),%RSP
	add $-976, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a89
	jmp uuid_00000000000c4a8b
uuid_00000000000c4a89:
	movb $1, -488(%rbp)
uuid_00000000000c4a8b:
	mov -808(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000c4a8e:
	mov -504(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000c4a91:
	mov -496(%RBP),%RSP
	add $-976, %RSP
	mov -488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a92
	jmp uuid_00000000000c4a94
uuid_00000000000c4a92:
	movb $1, -312(%rbp)
uuid_00000000000c4a94:
	mov -408(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000c4a97:
	mov -328(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000c4a9a:
	mov -320(%RBP),%RSP
	add $-976, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c54
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1056(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4abc
	jmp uuid_00000000000c4abe
uuid_00000000000c4abc:
	push %RBP
	mov -1048(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1152(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4aa1
	jmp uuid_00000000000c4aa3
uuid_00000000000c4aa1:
	push %RBP
	jmp uuid_00000000000c4a9e
	jmp uuid_00000000000c4aa0
uuid_00000000000c4a9e:
	push %RBP
	mov -1088(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4a9b
	jmp uuid_00000000000c4a9d
uuid_00000000000c4a9b:
	movb $1, -1160(%rbp)
uuid_00000000000c4a9d:
	mov -1184(%RBP),%RSP
	add $-1192, %RSP
uuid_00000000000c4aa0:
	mov -1176(%RBP),%RSP
	add $-1192, %RSP
uuid_00000000000c4aa3:
	mov -1168(%RBP),%RSP
	add $-1192, %RSP
	mov -1160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ab9
	jmp uuid_00000000000c4abb
uuid_00000000000c4ab9:
	push %RBP
	mov -1040(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1272(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ab3
	jmp uuid_00000000000c4ab5
uuid_00000000000c4ab3:
	push %RBP
	mov -1264(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4ab0
	jmp uuid_00000000000c4ab2
uuid_00000000000c4ab0:
	push %RBP
	mov -1256(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1448(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4aaa
	jmp uuid_00000000000c4aac
uuid_00000000000c4aaa:
	push %RBP
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	jmp uuid_00000000000c4aa7
	jmp uuid_00000000000c4aa9
uuid_00000000000c4aa7:
	push %RBP
	mov -1384(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1544(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4aa4
	jmp uuid_00000000000c4aa6
uuid_00000000000c4aa4:
	movb $1, -1456(%rbp)
uuid_00000000000c4aa6:
	mov -1536(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c4aa9:
	mov -1472(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c4aac:
	mov -1464(%RBP),%RSP
	add $-1544, %RSP
	mov -1456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4aad
	jmp uuid_00000000000c4aaf
uuid_00000000000c4aad:
	movb $1, -1280(%rbp)
uuid_00000000000c4aaf:
	mov -1376(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c4ab2:
	mov -1296(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c4ab5:
	mov -1288(%RBP),%RSP
	add $-1544, %RSP
	mov -1280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ab6
	jmp uuid_00000000000c4ab8
uuid_00000000000c4ab6:
	movb $1, -1064(%rbp)
uuid_00000000000c4ab8:
	mov -1200(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c4abb:
	mov -1080(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c4abe:
	mov -1072(%RBP),%RSP
	add $-1544, %RSP
	mov -1064(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c51
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1624(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ae0
	jmp uuid_00000000000c4ae2
uuid_00000000000c4ae0:
	push %RBP
	mov -1616(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1720(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ac5
	jmp uuid_00000000000c4ac7
uuid_00000000000c4ac5:
	push %RBP
	jmp uuid_00000000000c4ac2
	jmp uuid_00000000000c4ac4
uuid_00000000000c4ac2:
	push %RBP
	mov -1656(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4abf
	jmp uuid_00000000000c4ac1
uuid_00000000000c4abf:
	movb $1, -1728(%rbp)
uuid_00000000000c4ac1:
	mov -1752(%RBP),%RSP
	add $-1760, %RSP
uuid_00000000000c4ac4:
	mov -1744(%RBP),%RSP
	add $-1760, %RSP
uuid_00000000000c4ac7:
	mov -1736(%RBP),%RSP
	add $-1760, %RSP
	mov -1728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4add
	jmp uuid_00000000000c4adf
uuid_00000000000c4add:
	push %RBP
	mov -1608(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1840(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ad7
	jmp uuid_00000000000c4ad9
uuid_00000000000c4ad7:
	push %RBP
	mov -1832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4ad4
	jmp uuid_00000000000c4ad6
uuid_00000000000c4ad4:
	push %RBP
	mov -1824(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2016(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ace
	jmp uuid_00000000000c4ad0
uuid_00000000000c4ace:
	push %RBP
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	jmp uuid_00000000000c4acb
	jmp uuid_00000000000c4acd
uuid_00000000000c4acb:
	push %RBP
	mov -1952(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2112(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4ac8
	jmp uuid_00000000000c4aca
uuid_00000000000c4ac8:
	movb $1, -2024(%rbp)
uuid_00000000000c4aca:
	mov -2104(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000c4acd:
	mov -2040(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000c4ad0:
	mov -2032(%RBP),%RSP
	add $-2112, %RSP
	mov -2024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ad1
	jmp uuid_00000000000c4ad3
uuid_00000000000c4ad1:
	movb $1, -1848(%rbp)
uuid_00000000000c4ad3:
	mov -1944(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000c4ad6:
	mov -1864(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000c4ad9:
	mov -1856(%RBP),%RSP
	add $-2112, %RSP
	mov -1848(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ada
	jmp uuid_00000000000c4adc
uuid_00000000000c4ada:
	movb $1, -1632(%rbp)
uuid_00000000000c4adc:
	mov -1768(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000c4adf:
	mov -1648(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000c4ae2:
	mov -1640(%RBP),%RSP
	add $-2112, %RSP
	mov -1632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c4e
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2192(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b0a
	jmp uuid_00000000000c4b0c
uuid_00000000000c4b0a:
	push %RBP
	mov -2184(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4b07
	jmp uuid_00000000000c4b09
uuid_00000000000c4b07:
	push %RBP
	mov -2176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2368(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b01
	jmp uuid_00000000000c4b03
uuid_00000000000c4b01:
	push %RBP
	mov -2360(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2464(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4aef
	jmp uuid_00000000000c4af1
uuid_00000000000c4aef:
	push %RBP
	mov -2456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2560(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ae6
	jmp uuid_00000000000c4ae8
uuid_00000000000c4ae6:
	push %RBP
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	jmp uuid_00000000000c4ae3
	jmp uuid_00000000000c4ae5
uuid_00000000000c4ae3:
	movb $1, -2568(%rbp)
uuid_00000000000c4ae5:
	mov -2584(%RBP),%RSP
	add $-2608, %RSP
uuid_00000000000c4ae8:
	mov -2576(%RBP),%RSP
	add $-2608, %RSP
	mov -2568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4aec
	jmp uuid_00000000000c4aee
uuid_00000000000c4aec:
	push %RBP
	mov -2448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4ae9
	jmp uuid_00000000000c4aeb
uuid_00000000000c4ae9:
	movb $1, -2472(%rbp)
uuid_00000000000c4aeb:
	mov -2616(%RBP),%RSP
	add $-2688, %RSP
uuid_00000000000c4aee:
	mov -2488(%RBP),%RSP
	add $-2688, %RSP
uuid_00000000000c4af1:
	mov -2480(%RBP),%RSP
	add $-2688, %RSP
	mov -2472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4afe
	jmp uuid_00000000000c4b00
uuid_00000000000c4afe:
	push %RBP
	mov -2352(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2768(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4af8
	jmp uuid_00000000000c4afa
uuid_00000000000c4af8:
	push %RBP
	pushq -2712(%RBP)
	pushq -2720(%RBP)
	pushq -2728(%RBP)
	pushq -2736(%RBP)
	pushq -2744(%RBP)
	pushq -2752(%RBP)
	pushq -2760(%RBP)
	jmp uuid_00000000000c4af5
	jmp uuid_00000000000c4af7
uuid_00000000000c4af5:
	push %RBP
	mov -2704(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2864(%rbp)
	pushq $uuid_00000000000c0f7e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4af2
	jmp uuid_00000000000c4af4
uuid_00000000000c4af2:
	movb $1, -2776(%rbp)
uuid_00000000000c4af4:
	mov -2856(%RBP),%RSP
	add $-2864, %RSP
uuid_00000000000c4af7:
	mov -2792(%RBP),%RSP
	add $-2864, %RSP
uuid_00000000000c4afa:
	mov -2784(%RBP),%RSP
	add $-2864, %RSP
	mov -2776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4afb
	jmp uuid_00000000000c4afd
uuid_00000000000c4afb:
	movb $1, -2376(%rbp)
uuid_00000000000c4afd:
	mov -2696(%RBP),%RSP
	add $-2864, %RSP
uuid_00000000000c4b00:
	mov -2392(%RBP),%RSP
	add $-2864, %RSP
uuid_00000000000c4b03:
	mov -2384(%RBP),%RSP
	add $-2864, %RSP
	mov -2376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b04
	jmp uuid_00000000000c4b06
uuid_00000000000c4b04:
	movb $1, -2200(%rbp)
uuid_00000000000c4b06:
	mov -2296(%RBP),%RSP
	add $-2864, %RSP
uuid_00000000000c4b09:
	mov -2216(%RBP),%RSP
	add $-2864, %RSP
uuid_00000000000c4b0c:
	mov -2208(%RBP),%RSP
	add $-2864, %RSP
	mov -2200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c4b
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2944(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b2e
	jmp uuid_00000000000c4b30
uuid_00000000000c4b2e:
	push %RBP
	mov -2936(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3040(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b13
	jmp uuid_00000000000c4b15
uuid_00000000000c4b13:
	push %RBP
	jmp uuid_00000000000c4b10
	jmp uuid_00000000000c4b12
uuid_00000000000c4b10:
	push %RBP
	mov -2976(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4b0d
	jmp uuid_00000000000c4b0f
uuid_00000000000c4b0d:
	movb $1, -3048(%rbp)
uuid_00000000000c4b0f:
	mov -3072(%RBP),%RSP
	add $-3080, %RSP
uuid_00000000000c4b12:
	mov -3064(%RBP),%RSP
	add $-3080, %RSP
uuid_00000000000c4b15:
	mov -3056(%RBP),%RSP
	add $-3080, %RSP
	mov -3048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b2b
	jmp uuid_00000000000c4b2d
uuid_00000000000c4b2b:
	push %RBP
	mov -2928(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3160(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b25
	jmp uuid_00000000000c4b27
uuid_00000000000c4b25:
	push %RBP
	mov -3152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4b22
	jmp uuid_00000000000c4b24
uuid_00000000000c4b22:
	push %RBP
	mov -3144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3336(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b1c
	jmp uuid_00000000000c4b1e
uuid_00000000000c4b1c:
	push %RBP
	pushq -3280(%RBP)
	pushq -3288(%RBP)
	pushq -3296(%RBP)
	pushq -3304(%RBP)
	pushq -3312(%RBP)
	pushq -3320(%RBP)
	pushq -3328(%RBP)
	jmp uuid_00000000000c4b19
	jmp uuid_00000000000c4b1b
uuid_00000000000c4b19:
	push %RBP
	mov -3272(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3432(%rbp)
	pushq $uuid_00000000000c0f7e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4b16
	jmp uuid_00000000000c4b18
uuid_00000000000c4b16:
	movb $1, -3344(%rbp)
uuid_00000000000c4b18:
	mov -3424(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000c4b1b:
	mov -3360(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000c4b1e:
	mov -3352(%RBP),%RSP
	add $-3432, %RSP
	mov -3344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b1f
	jmp uuid_00000000000c4b21
uuid_00000000000c4b1f:
	movb $1, -3168(%rbp)
uuid_00000000000c4b21:
	mov -3264(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000c4b24:
	mov -3184(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000c4b27:
	mov -3176(%RBP),%RSP
	add $-3432, %RSP
	mov -3168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b28
	jmp uuid_00000000000c4b2a
uuid_00000000000c4b28:
	movb $1, -2952(%rbp)
uuid_00000000000c4b2a:
	mov -3088(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000c4b2d:
	mov -2968(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000c4b30:
	mov -2960(%RBP),%RSP
	add $-3432, %RSP
	mov -2952(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c48
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -3512(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b52
	jmp uuid_00000000000c4b54
uuid_00000000000c4b52:
	push %RBP
	mov -3504(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3608(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b37
	jmp uuid_00000000000c4b39
uuid_00000000000c4b37:
	push %RBP
	jmp uuid_00000000000c4b34
	jmp uuid_00000000000c4b36
uuid_00000000000c4b34:
	push %RBP
	mov -3544(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4b31
	jmp uuid_00000000000c4b33
uuid_00000000000c4b31:
	movb $1, -3616(%rbp)
uuid_00000000000c4b33:
	mov -3640(%RBP),%RSP
	add $-3648, %RSP
uuid_00000000000c4b36:
	mov -3632(%RBP),%RSP
	add $-3648, %RSP
uuid_00000000000c4b39:
	mov -3624(%RBP),%RSP
	add $-3648, %RSP
	mov -3616(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b4f
	jmp uuid_00000000000c4b51
uuid_00000000000c4b4f:
	push %RBP
	mov -3496(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3728(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b49
	jmp uuid_00000000000c4b4b
uuid_00000000000c4b49:
	push %RBP
	mov -3720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4b46
	jmp uuid_00000000000c4b48
uuid_00000000000c4b46:
	push %RBP
	mov -3712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3904(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b40
	jmp uuid_00000000000c4b42
uuid_00000000000c4b40:
	push %RBP
	pushq -3848(%RBP)
	pushq -3856(%RBP)
	pushq -3864(%RBP)
	pushq -3872(%RBP)
	pushq -3880(%RBP)
	pushq -3888(%RBP)
	pushq -3896(%RBP)
	jmp uuid_00000000000c4b3d
	jmp uuid_00000000000c4b3f
uuid_00000000000c4b3d:
	push %RBP
	mov -3840(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4000(%rbp)
	pushq $uuid_00000000000c0f7e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4b3a
	jmp uuid_00000000000c4b3c
uuid_00000000000c4b3a:
	movb $1, -3912(%rbp)
uuid_00000000000c4b3c:
	mov -3992(%RBP),%RSP
	add $-4000, %RSP
uuid_00000000000c4b3f:
	mov -3928(%RBP),%RSP
	add $-4000, %RSP
uuid_00000000000c4b42:
	mov -3920(%RBP),%RSP
	add $-4000, %RSP
	mov -3912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b43
	jmp uuid_00000000000c4b45
uuid_00000000000c4b43:
	movb $1, -3736(%rbp)
uuid_00000000000c4b45:
	mov -3832(%RBP),%RSP
	add $-4000, %RSP
uuid_00000000000c4b48:
	mov -3752(%RBP),%RSP
	add $-4000, %RSP
uuid_00000000000c4b4b:
	mov -3744(%RBP),%RSP
	add $-4000, %RSP
	mov -3736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b4c
	jmp uuid_00000000000c4b4e
uuid_00000000000c4b4c:
	movb $1, -3520(%rbp)
uuid_00000000000c4b4e:
	mov -3656(%RBP),%RSP
	add $-4000, %RSP
uuid_00000000000c4b51:
	mov -3536(%RBP),%RSP
	add $-4000, %RSP
uuid_00000000000c4b54:
	mov -3528(%RBP),%RSP
	add $-4000, %RSP
	mov -3520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c45
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -4080(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b6d
	jmp uuid_00000000000c4b6f
uuid_00000000000c4b6d:
	push %RBP
	mov -4072(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4176(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b5b
	jmp uuid_00000000000c4b5d
uuid_00000000000c4b5b:
	push %RBP
	jmp uuid_00000000000c4b58
	jmp uuid_00000000000c4b5a
uuid_00000000000c4b58:
	push %RBP
	mov -4112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4b55
	jmp uuid_00000000000c4b57
uuid_00000000000c4b55:
	movb $1, -4184(%rbp)
uuid_00000000000c4b57:
	mov -4208(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000c4b5a:
	mov -4200(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000c4b5d:
	mov -4192(%RBP),%RSP
	add $-4216, %RSP
	mov -4184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b6a
	jmp uuid_00000000000c4b6c
uuid_00000000000c4b6a:
	push %RBP
	mov -4064(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4296(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b64
	jmp uuid_00000000000c4b66
uuid_00000000000c4b64:
	push %RBP
	pushq -4240(%RBP)
	pushq -4248(%RBP)
	pushq -4256(%RBP)
	pushq -4264(%RBP)
	pushq -4272(%RBP)
	pushq -4280(%RBP)
	pushq -4288(%RBP)
	jmp uuid_00000000000c4b61
	jmp uuid_00000000000c4b63
uuid_00000000000c4b61:
	push %RBP
	mov -4232(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4392(%rbp)
	pushq $uuid_00000000000c128a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4b5e
	jmp uuid_00000000000c4b60
uuid_00000000000c4b5e:
	movb $1, -4304(%rbp)
uuid_00000000000c4b60:
	mov -4384(%RBP),%RSP
	add $-4392, %RSP
uuid_00000000000c4b63:
	mov -4320(%RBP),%RSP
	add $-4392, %RSP
uuid_00000000000c4b66:
	mov -4312(%RBP),%RSP
	add $-4392, %RSP
	mov -4304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b67
	jmp uuid_00000000000c4b69
uuid_00000000000c4b67:
	movb $1, -4088(%rbp)
uuid_00000000000c4b69:
	mov -4224(%RBP),%RSP
	add $-4392, %RSP
uuid_00000000000c4b6c:
	mov -4104(%RBP),%RSP
	add $-4392, %RSP
uuid_00000000000c4b6f:
	mov -4096(%RBP),%RSP
	add $-4392, %RSP
	mov -4088(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c42
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -4472(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b88
	jmp uuid_00000000000c4b8a
uuid_00000000000c4b88:
	push %RBP
	mov -4464(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4568(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b76
	jmp uuid_00000000000c4b78
uuid_00000000000c4b76:
	push %RBP
	jmp uuid_00000000000c4b73
	jmp uuid_00000000000c4b75
uuid_00000000000c4b73:
	push %RBP
	mov -4504(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4b70
	jmp uuid_00000000000c4b72
uuid_00000000000c4b70:
	movb $1, -4576(%rbp)
uuid_00000000000c4b72:
	mov -4600(%RBP),%RSP
	add $-4608, %RSP
uuid_00000000000c4b75:
	mov -4592(%RBP),%RSP
	add $-4608, %RSP
uuid_00000000000c4b78:
	mov -4584(%RBP),%RSP
	add $-4608, %RSP
	mov -4576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b85
	jmp uuid_00000000000c4b87
uuid_00000000000c4b85:
	push %RBP
	mov -4456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4688(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b7f
	jmp uuid_00000000000c4b81
uuid_00000000000c4b7f:
	push %RBP
	pushq -4632(%RBP)
	pushq -4640(%RBP)
	pushq -4648(%RBP)
	pushq -4656(%RBP)
	pushq -4664(%RBP)
	pushq -4672(%RBP)
	pushq -4680(%RBP)
	jmp uuid_00000000000c4b7c
	jmp uuid_00000000000c4b7e
uuid_00000000000c4b7c:
	push %RBP
	mov -4624(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4784(%rbp)
	pushq $uuid_00000000000c128a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4b79
	jmp uuid_00000000000c4b7b
uuid_00000000000c4b79:
	movb $1, -4696(%rbp)
uuid_00000000000c4b7b:
	mov -4776(%RBP),%RSP
	add $-4784, %RSP
uuid_00000000000c4b7e:
	mov -4712(%RBP),%RSP
	add $-4784, %RSP
uuid_00000000000c4b81:
	mov -4704(%RBP),%RSP
	add $-4784, %RSP
	mov -4696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b82
	jmp uuid_00000000000c4b84
uuid_00000000000c4b82:
	movb $1, -4480(%rbp)
uuid_00000000000c4b84:
	mov -4616(%RBP),%RSP
	add $-4784, %RSP
uuid_00000000000c4b87:
	mov -4496(%RBP),%RSP
	add $-4784, %RSP
uuid_00000000000c4b8a:
	mov -4488(%RBP),%RSP
	add $-4784, %RSP
	mov -4480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c3f
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -4864(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b91
	jmp uuid_00000000000c4b93
uuid_00000000000c4b91:
	push %RBP
	pushq -4808(%RBP)
	pushq -4816(%RBP)
	pushq -4824(%RBP)
	pushq -4832(%RBP)
	pushq -4840(%RBP)
	pushq -4848(%RBP)
	pushq -4856(%RBP)
	jmp uuid_00000000000c4b8e
	jmp uuid_00000000000c4b90
uuid_00000000000c4b8e:
	push %RBP
	mov -4800(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4b8b
	jmp uuid_00000000000c4b8d
uuid_00000000000c4b8b:
	movb $1, -4872(%rbp)
uuid_00000000000c4b8d:
	mov -4952(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000c4b90:
	mov -4888(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000c4b93:
	mov -4880(%RBP),%RSP
	add $-4960, %RSP
	mov -4872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c3c
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -5040(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4bb0
	jmp uuid_00000000000c4bb2
uuid_00000000000c4bb0:
	push %RBP
	pushq -4984(%RBP)
	pushq -4992(%RBP)
	pushq -5000(%RBP)
	pushq -5008(%RBP)
	pushq -5016(%RBP)
	pushq -5024(%RBP)
	pushq -5032(%RBP)
	jmp uuid_00000000000c4bad
	jmp uuid_00000000000c4baf
uuid_00000000000c4bad:
	push %RBP
	mov -4976(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4baa
	jmp uuid_00000000000c4bac
uuid_00000000000c4baa:
	movb $1, -5048(%rbp)
uuid_00000000000c4bac:
	mov -5128(%RBP),%RSP
	add $-5136, %RSP
uuid_00000000000c4baf:
	mov -5064(%RBP),%RSP
	add $-5136, %RSP
uuid_00000000000c4bb2:
	mov -5056(%RBP),%RSP
	add $-5136, %RSP
	mov -5048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c39
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -5216(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4bd8
	jmp uuid_00000000000c4bda
uuid_00000000000c4bd8:
	push %RBP
	mov -5208(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4bd5
	jmp uuid_00000000000c4bd7
uuid_00000000000c4bd5:
	push %RBP
	mov -5200(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5392(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4bcf
	jmp uuid_00000000000c4bd1
uuid_00000000000c4bcf:
	push %RBP
	pushq -5336(%RBP)
	pushq -5344(%RBP)
	pushq -5352(%RBP)
	pushq -5360(%RBP)
	pushq -5368(%RBP)
	pushq -5376(%RBP)
	pushq -5384(%RBP)
	jmp uuid_00000000000c4bcc
	jmp uuid_00000000000c4bce
uuid_00000000000c4bcc:
	push %RBP
	mov -5328(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4bc9
	jmp uuid_00000000000c4bcb
uuid_00000000000c4bc9:
	movb $1, -5400(%rbp)
uuid_00000000000c4bcb:
	mov -5480(%RBP),%RSP
	add $-5488, %RSP
uuid_00000000000c4bce:
	mov -5416(%RBP),%RSP
	add $-5488, %RSP
uuid_00000000000c4bd1:
	mov -5408(%RBP),%RSP
	add $-5488, %RSP
	mov -5400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4bd2
	jmp uuid_00000000000c4bd4
uuid_00000000000c4bd2:
	movb $1, -5224(%rbp)
uuid_00000000000c4bd4:
	mov -5320(%RBP),%RSP
	add $-5488, %RSP
uuid_00000000000c4bd7:
	mov -5240(%RBP),%RSP
	add $-5488, %RSP
uuid_00000000000c4bda:
	mov -5232(%RBP),%RSP
	add $-5488, %RSP
	mov -5224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c36
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -5568(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4bf6
	jmp uuid_00000000000c4bf8
uuid_00000000000c4bf6:
	push %RBP
	mov -5560(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4bf3
	jmp uuid_00000000000c4bf5
uuid_00000000000c4bf3:
	push %RBP
	mov -5552(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5744(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4bed
	jmp uuid_00000000000c4bef
uuid_00000000000c4bed:
	push %RBP
	mov -5736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4bea
	jmp uuid_00000000000c4bec
uuid_00000000000c4bea:
	push %RBP
	mov -5728(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5920(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4be4
	jmp uuid_00000000000c4be6
uuid_00000000000c4be4:
	push %RBP
	pushq -5864(%RBP)
	pushq -5872(%RBP)
	pushq -5880(%RBP)
	pushq -5888(%RBP)
	pushq -5896(%RBP)
	pushq -5904(%RBP)
	pushq -5912(%RBP)
	jmp uuid_00000000000c4be1
	jmp uuid_00000000000c4be3
uuid_00000000000c4be1:
	push %RBP
	mov -5856(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4bde
	jmp uuid_00000000000c4be0
uuid_00000000000c4bde:
	movb $1, -5928(%rbp)
uuid_00000000000c4be0:
	mov -6008(%RBP),%RSP
	add $-6016, %RSP
uuid_00000000000c4be3:
	mov -5944(%RBP),%RSP
	add $-6016, %RSP
uuid_00000000000c4be6:
	mov -5936(%RBP),%RSP
	add $-6016, %RSP
	mov -5928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4be7
	jmp uuid_00000000000c4be9
uuid_00000000000c4be7:
	movb $1, -5752(%rbp)
uuid_00000000000c4be9:
	mov -5848(%RBP),%RSP
	add $-6016, %RSP
uuid_00000000000c4bec:
	mov -5768(%RBP),%RSP
	add $-6016, %RSP
uuid_00000000000c4bef:
	mov -5760(%RBP),%RSP
	add $-6016, %RSP
	mov -5752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4bf0
	jmp uuid_00000000000c4bf2
uuid_00000000000c4bf0:
	movb $1, -5576(%rbp)
uuid_00000000000c4bf2:
	mov -5672(%RBP),%RSP
	add $-6016, %RSP
uuid_00000000000c4bf5:
	mov -5592(%RBP),%RSP
	add $-6016, %RSP
uuid_00000000000c4bf8:
	mov -5584(%RBP),%RSP
	add $-6016, %RSP
	mov -5576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c33
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -6096(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c02
	jmp uuid_00000000000c4c04
uuid_00000000000c4c02:
	push %RBP
	mov -6088(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4bff
	jmp uuid_00000000000c4c01
uuid_00000000000c4bff:
	push %RBP
	mov -6080(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4bfc
	jmp uuid_00000000000c4bfe
uuid_00000000000c4bfc:
	movb $1, -6104(%rbp)
uuid_00000000000c4bfe:
	mov -6200(%RBP),%RSP
	add $-6272, %RSP
uuid_00000000000c4c01:
	mov -6120(%RBP),%RSP
	add $-6272, %RSP
uuid_00000000000c4c04:
	mov -6112(%RBP),%RSP
	add $-6272, %RSP
	mov -6104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c30
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -6352(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c0b
	jmp uuid_00000000000c4c0d
uuid_00000000000c4c0b:
	push %RBP
	mov -6344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4c08
	jmp uuid_00000000000c4c0a
uuid_00000000000c4c08:
	push %RBP
	mov -6336(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4c05
	jmp uuid_00000000000c4c07
uuid_00000000000c4c05:
	movb $1, -6360(%rbp)
uuid_00000000000c4c07:
	mov -6456(%RBP),%RSP
	add $-6528, %RSP
uuid_00000000000c4c0a:
	mov -6376(%RBP),%RSP
	add $-6528, %RSP
uuid_00000000000c4c0d:
	mov -6368(%RBP),%RSP
	add $-6528, %RSP
	mov -6360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c2d
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -6608(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c17
	jmp uuid_00000000000c4c19
uuid_00000000000c4c17:
	push %RBP
	pushq -6584(%RBP)
	pushq -6592(%RBP)
	pushq -6600(%RBP)
	jmp uuid_00000000000c4c14
	jmp uuid_00000000000c4c16
uuid_00000000000c4c14:
	push %RBP
	mov -6576(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4c11
	jmp uuid_00000000000c4c13
uuid_00000000000c4c11:
	push %RBP
	mov -6568(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4c0e
	jmp uuid_00000000000c4c10
uuid_00000000000c4c0e:
	movb $1, -6616(%rbp)
uuid_00000000000c4c10:
	mov -6744(%RBP),%RSP
	add $-6816, %RSP
uuid_00000000000c4c13:
	mov -6664(%RBP),%RSP
	add $-6816, %RSP
uuid_00000000000c4c16:
	mov -6632(%RBP),%RSP
	add $-6816, %RSP
uuid_00000000000c4c19:
	mov -6624(%RBP),%RSP
	add $-6816, %RSP
	mov -6616(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c2a
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -6896(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c20
	jmp uuid_00000000000c4c22
uuid_00000000000c4c20:
	push %RBP
	mov -6888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4c1d
	jmp uuid_00000000000c4c1f
uuid_00000000000c4c1d:
	push %RBP
	pushq -6832(%RBP)
	pushq -6840(%RBP)
	pushq -6848(%RBP)
	pushq -6856(%RBP)
	pushq -6864(%RBP)
	pushq -6872(%RBP)
	pushq -6880(%RBP)
	jmp uuid_00000000000c4c1a
	jmp uuid_00000000000c4c1c
uuid_00000000000c4c1a:
	movb $1, -6904(%rbp)
uuid_00000000000c4c1c:
	mov -7000(%RBP),%RSP
	add $-7056, %RSP
uuid_00000000000c4c1f:
	mov -6920(%RBP),%RSP
	add $-7056, %RSP
uuid_00000000000c4c22:
	mov -6912(%RBP),%RSP
	add $-7056, %RSP
	mov -6904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c27
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	jmp uuid_00000000000c4c24
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c4c23
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4c26
uuid_00000000000c4c24:
	movq -7136(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -7128(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -7120(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -7112(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -7104(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -7096(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -7088(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -7080(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -7072(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000c4c26:
	mov -7064(%RBP),%RSP
	add $-7136, %RSP
	jmp uuid_00000000000c4c29
uuid_00000000000c4c27:
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7008(%rbp)
	pushq -7016(%rbp)
	pushq -7024(%rbp)
	pushq -7032(%rbp)
	pushq -7040(%rbp)
	pushq -7048(%rbp)
	pushq -7056(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6928(%rbp)
	pushq -6936(%rbp)
	pushq -6944(%rbp)
	pushq -6952(%rbp)
	pushq -6960(%rbp)
	pushq -6968(%rbp)
	pushq -6976(%rbp)
	pushq -6984(%rbp)
	pushq -6992(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c4c29:
	mov -6824(%RBP),%RSP
	add $-7056, %RSP
	jmp uuid_00000000000c4c2c
uuid_00000000000c4c2a:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6752(%rbp)
	pushq -6760(%rbp)
	pushq -6768(%rbp)
	pushq -6776(%rbp)
	pushq -6784(%rbp)
	pushq -6792(%rbp)
	pushq -6800(%rbp)
	pushq -6808(%rbp)
	pushq -6816(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6672(%rbp)
	pushq -6680(%rbp)
	pushq -6688(%rbp)
	pushq -6696(%rbp)
	pushq -6704(%rbp)
	pushq -6712(%rbp)
	pushq -6720(%rbp)
	pushq -6728(%rbp)
	pushq -6736(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -6640(%rbp)
	pushq -6648(%rbp)
	pushq -6656(%rbp)
	pushq $5
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c4c2c:
	mov -6536(%RBP),%RSP
	add $-6816, %RSP
	jmp uuid_00000000000c4c2f
uuid_00000000000c4c2d:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6464(%rbp)
	pushq -6472(%rbp)
	pushq -6480(%rbp)
	pushq -6488(%rbp)
	pushq -6496(%rbp)
	pushq -6504(%rbp)
	pushq -6512(%rbp)
	pushq -6520(%rbp)
	pushq -6528(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6384(%rbp)
	pushq -6392(%rbp)
	pushq -6400(%rbp)
	pushq -6408(%rbp)
	pushq -6416(%rbp)
	pushq -6424(%rbp)
	pushq -6432(%rbp)
	pushq -6440(%rbp)
	pushq -6448(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c4c2f:
	mov -6280(%RBP),%RSP
	add $-6528, %RSP
	jmp uuid_00000000000c4c32
uuid_00000000000c4c30:
#call function + : Arrow<Cons<AST,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6208(%rbp)
	pushq -6216(%rbp)
	pushq -6224(%rbp)
	pushq -6232(%rbp)
	pushq -6240(%rbp)
	pushq -6248(%rbp)
	pushq -6256(%rbp)
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6128(%rbp)
	pushq -6136(%rbp)
	pushq -6144(%rbp)
	pushq -6152(%rbp)
	pushq -6160(%rbp)
	pushq -6168(%rbp)
	pushq -6176(%rbp)
	pushq -6184(%rbp)
	pushq -6192(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowASTConsASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c4c32:
	mov -6024(%RBP),%RSP
	add $-6272, %RSP
	jmp uuid_00000000000c4c35
uuid_00000000000c4c33:
	push %RBP
#call function is-macro-head : Arrow<Cons<String,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6016(%rbp)
	pushq $2
	mov %RBX, %RBP
	call is_SB_macro_SB_head_CL_ArrowU64ConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4bf9
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6016(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5952(%rbp)
	pushq -5960(%rbp)
	pushq -5968(%rbp)
	pushq -5976(%rbp)
	pushq -5984(%rbp)
	pushq -5992(%rbp)
	pushq -6000(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5776(%rbp)
	pushq -5784(%rbp)
	pushq -5792(%rbp)
	pushq -5800(%rbp)
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -5840(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	jmp uuid_00000000000c4bfb
uuid_00000000000c4bf9:
#call function preprocess-apply-hard : Arrow<Cons<Cons<String,U64>,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6016(%rbp)
	pushq $2
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_hard_CL_ArrowASTConsASTConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	movq -6096(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -6088(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -6080(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -6072(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -6064(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -6056(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -6048(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -6040(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -6032(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000c4bfb:
	mov -6024(%RBP),%RSP
	add $-6096, %RSP
uuid_00000000000c4c35:
	mov -5496(%RBP),%RSP
	add $-6096, %RSP
	jmp uuid_00000000000c4c38
uuid_00000000000c4c36:
	push %RBP
#call function is-macro-head : Arrow<Cons<String,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5488(%rbp)
	pushq $1
	mov %RBX, %RBP
	call is_SB_macro_SB_head_CL_ArrowU64ConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4bdb
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5488(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5424(%rbp)
	pushq -5432(%rbp)
	pushq -5440(%rbp)
	pushq -5448(%rbp)
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	pushq -5264(%rbp)
	pushq -5272(%rbp)
	pushq -5280(%rbp)
	pushq -5288(%rbp)
	pushq -5296(%rbp)
	pushq -5304(%rbp)
	pushq -5312(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	jmp uuid_00000000000c4bdd
uuid_00000000000c4bdb:
#call function preprocess-apply-hard : Arrow<Cons<Cons<String,U64>,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5488(%rbp)
	pushq $1
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_hard_CL_ArrowASTConsASTConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	movq -5568(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -5560(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -5552(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -5544(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -5536(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -5528(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -5520(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -5512(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -5504(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000c4bdd:
	mov -5496(%RBP),%RSP
	add $-5568, %RSP
uuid_00000000000c4c38:
	mov -5144(%RBP),%RSP
	add $-5568, %RSP
	jmp uuid_00000000000c4c3b
uuid_00000000000c4c39:
	mov $parse_SB_suffixes_CL_SfxListSfxListCaseNumber1, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000c4bc6:
#call function non-zero : Arrow<SfxList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SfxList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4bc7
	jmp uuid_00000000000c4bc8
uuid_00000000000c4bc7:
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	push %RBP
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq $0
	push %RBP
	mov -5288(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4bbc
	jmp uuid_00000000000c4bbe
uuid_00000000000c4bbc:
	push %RBP
	pushq -5264(%RBP)
	pushq -5272(%RBP)
	pushq -5280(%RBP)
	jmp uuid_00000000000c4bb9
	jmp uuid_00000000000c4bbb
uuid_00000000000c4bb9:
	push %RBP
	mov -5256(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4bb6
	jmp uuid_00000000000c4bb8
uuid_00000000000c4bb6:
	push %RBP
	mov -5248(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4bb3
	jmp uuid_00000000000c4bb5
uuid_00000000000c4bb3:
	movb $1, -5296(%rbp)
uuid_00000000000c4bb5:
	mov -5360(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000c4bb8:
	mov -5344(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000c4bbb:
	mov -5312(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000c4bbe:
	mov -5304(%RBP),%RSP
	add $-5408, %RSP
	mov -5296(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4bc3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c4bc2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4bc5
uuid_00000000000c4bc3:
	push %RBP
#call function has-suffix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5136(%rbp)
	pushq -5352(%rbp)
	mov %RBX, %RBP
	call has_SB_suffix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4bbf
	movq -5408(%rbp), %r15
	movq %r15, -5184(%rbp)
	movq -5400(%rbp), %r15
	movq %r15, -5176(%rbp)
	movq -5392(%rbp), %r15
	movq %r15, -5168(%rbp)
	movq -5384(%rbp), %r15
	movq %r15, -5160(%rbp)
	movq -5376(%rbp), %r15
	movq %r15, -5152(%rbp)
	movq -5368(%rbp), %r15
	movq %r15, -5144(%rbp)
	jmp uuid_00000000000c4bc1
uuid_00000000000c4bbf:
#call function remove-suffix : Arrow<Cons<String,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5136(%rbp)
	pushq -5352(%rbp)
	mov %RBX, %RBP
	call remove_SB_suffix_CL_ArrowStringConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1176
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5424(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5424(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq -5320(%rbp)
	pushq -5328(%rbp)
	pushq -5336(%rbp)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -5184(%RBP)
	popq -5176(%RBP)
	popq -5168(%RBP)
	popq -5160(%RBP)
	popq -5152(%RBP)
	popq -5144(%RBP)
uuid_00000000000c4bc1:
	mov -5416(%RBP),%RSP
	add $-5424, %RSP
uuid_00000000000c4bc5:
	mov -5240(%RBP),%RSP
	add $-5424, %RSP
	add $48, %rsp
	add $48, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c4bc6
uuid_00000000000c4bc8:
uuid_00000000000c4c3b:
	mov -4968(%RBP),%RSP
	add $-5184, %RSP
	jmp uuid_00000000000c4c3e
uuid_00000000000c4c3c:
	mov $parse_SB_suffixes_CL_SfxListSfxListCaseNumber1, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000c4ba7:
#call function non-zero : Arrow<SfxList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4968(%rbp)
	pushq -4976(%rbp)
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SfxList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4ba8
	jmp uuid_00000000000c4ba9
uuid_00000000000c4ba8:
	pushq -4968(%rbp)
	pushq -4976(%rbp)
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	push %RBP
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq $0
	push %RBP
	mov -5112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b9d
	jmp uuid_00000000000c4b9f
uuid_00000000000c4b9d:
	push %RBP
	pushq -5088(%RBP)
	pushq -5096(%RBP)
	pushq -5104(%RBP)
	jmp uuid_00000000000c4b9a
	jmp uuid_00000000000c4b9c
uuid_00000000000c4b9a:
	push %RBP
	mov -5080(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4b97
	jmp uuid_00000000000c4b99
uuid_00000000000c4b97:
	push %RBP
	mov -5072(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4b94
	jmp uuid_00000000000c4b96
uuid_00000000000c4b94:
	movb $1, -5120(%rbp)
uuid_00000000000c4b96:
	mov -5184(%RBP),%RSP
	add $-5232, %RSP
uuid_00000000000c4b99:
	mov -5168(%RBP),%RSP
	add $-5232, %RSP
uuid_00000000000c4b9c:
	mov -5136(%RBP),%RSP
	add $-5232, %RSP
uuid_00000000000c4b9f:
	mov -5128(%RBP),%RSP
	add $-5232, %RSP
	mov -5120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ba4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c4ba3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4ba6
uuid_00000000000c4ba4:
	push %RBP
#call function has-suffix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4960(%rbp)
	pushq -5176(%rbp)
	mov %RBX, %RBP
	call has_SB_suffix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4ba0
	movq -5232(%rbp), %r15
	movq %r15, -5008(%rbp)
	movq -5224(%rbp), %r15
	movq %r15, -5000(%rbp)
	movq -5216(%rbp), %r15
	movq %r15, -4992(%rbp)
	movq -5208(%rbp), %r15
	movq %r15, -4984(%rbp)
	movq -5200(%rbp), %r15
	movq %r15, -4976(%rbp)
	movq -5192(%rbp), %r15
	movq %r15, -4968(%rbp)
	jmp uuid_00000000000c4ba2
uuid_00000000000c4ba0:
#call function remove-suffix : Arrow<Cons<String,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4960(%rbp)
	pushq -5176(%rbp)
	mov %RBX, %RBP
	call remove_SB_suffix_CL_ArrowStringConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1176
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4896(%rbp)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5248(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4896(%rbp)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -5248(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -5008(%RBP)
	popq -5000(%RBP)
	popq -4992(%RBP)
	popq -4984(%RBP)
	popq -4976(%RBP)
	popq -4968(%RBP)
uuid_00000000000c4ba2:
	mov -5240(%RBP),%RSP
	add $-5248, %RSP
uuid_00000000000c4ba6:
	mov -5064(%RBP),%RSP
	add $-5248, %RSP
	add $48, %rsp
	add $48, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c4ba7
uuid_00000000000c4ba9:
uuid_00000000000c4c3e:
	mov -4792(%RBP),%RSP
	add $-5008, %RSP
	jmp uuid_00000000000c4c41
uuid_00000000000c4c3f:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c128a
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4608(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c4c41:
	mov -4400(%RBP),%RSP
	add $-4784, %RSP
	jmp uuid_00000000000c4c44
uuid_00000000000c4c42:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c128a
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4216(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c4c44:
	mov -4008(%RBP),%RSP
	add $-4392, %RSP
	jmp uuid_00000000000c4c47
uuid_00000000000c4c45:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0f7e
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3936(%rbp)
	pushq -3944(%rbp)
	pushq -3952(%rbp)
	pushq -3960(%rbp)
	pushq -3968(%rbp)
	pushq -3976(%rbp)
	pushq -3984(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3760(%rbp)
	pushq -3768(%rbp)
	pushq -3776(%rbp)
	pushq -3784(%rbp)
	pushq -3792(%rbp)
	pushq -3800(%rbp)
	pushq -3808(%rbp)
	pushq -3816(%rbp)
	pushq -3824(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3648(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c4c47:
	mov -3440(%RBP),%RSP
	add $-4000, %RSP
	jmp uuid_00000000000c4c4a
uuid_00000000000c4c48:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0f7e
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3368(%rbp)
	pushq -3376(%rbp)
	pushq -3384(%rbp)
	pushq -3392(%rbp)
	pushq -3400(%rbp)
	pushq -3408(%rbp)
	pushq -3416(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3192(%rbp)
	pushq -3200(%rbp)
	pushq -3208(%rbp)
	pushq -3216(%rbp)
	pushq -3224(%rbp)
	pushq -3232(%rbp)
	pushq -3240(%rbp)
	pushq -3248(%rbp)
	pushq -3256(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3080(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c4c4a:
	mov -2872(%RBP),%RSP
	add $-3432, %RSP
	jmp uuid_00000000000c4c4d
uuid_00000000000c4c4b:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0f7e
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2800(%rbp)
	pushq -2808(%rbp)
	pushq -2816(%rbp)
	pushq -2824(%rbp)
	pushq -2832(%rbp)
	pushq -2840(%rbp)
	pushq -2848(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2624(%rbp)
	pushq -2632(%rbp)
	pushq -2640(%rbp)
	pushq -2648(%rbp)
	pushq -2656(%rbp)
	pushq -2664(%rbp)
	pushq -2672(%rbp)
	pushq -2680(%rbp)
	pushq -2688(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq -2592(%rbp)
	pushq -2600(%rbp)
	pushq -2608(%rbp)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c4c4d:
	mov -2120(%RBP),%RSP
	add $-2864, %RSP
	jmp uuid_00000000000c4c50
uuid_00000000000c4c4e:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1176
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1760(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c4c50:
	mov -1552(%RBP),%RSP
	add $-2112, %RSP
	jmp uuid_00000000000c4c53
uuid_00000000000c4c51:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1176
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1192(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c4c53:
	mov -984(%RBP),%RSP
	add $-1544, %RSP
	jmp uuid_00000000000c4c56
uuid_00000000000c4c54:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1176
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c4c56:
	mov -232(%RBP),%RSP
	add $-976, %RSP
	subq $72, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
preprocess_SB_is_SB_suffixed_CL_ArrowU64String:
	pushq $0
	mov $parse_SB_suffixes_CL_SfxListSfxListCaseNumber1, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000c4c6a:
#call function non-zero : Arrow<SfxList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SfxList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4c6b
	jmp uuid_00000000000c4c6c
uuid_00000000000c4c6b:
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c60
	jmp uuid_00000000000c4c62
uuid_00000000000c4c60:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	jmp uuid_00000000000c4c5d
	jmp uuid_00000000000c4c5f
uuid_00000000000c4c5d:
	push %RBP
	mov -144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4c5a
	jmp uuid_00000000000c4c5c
uuid_00000000000c4c5a:
	push %RBP
	mov -136(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4c57
	jmp uuid_00000000000c4c59
uuid_00000000000c4c57:
	movb $1, -184(%rbp)
uuid_00000000000c4c59:
	mov -248(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000c4c5c:
	mov -232(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000c4c5f:
	mov -200(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000c4c62:
	mov -192(%RBP),%RSP
	add $-296, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c67
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c4c66
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4c69
uuid_00000000000c4c67:
	push %RBP
#call function has-suffix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call has_SB_suffix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4c63
	jmp uuid_00000000000c4c65
uuid_00000000000c4c63:
	movq $1, -24(%rbp)
uuid_00000000000c4c65:
	mov -304(%RBP),%RSP
	add $-304, %RSP
	movq -296(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -288(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -264(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -256(%rbp), %r15
	movq %r15, -32(%rbp)
uuid_00000000000c4c69:
	mov -128(%RBP),%RSP
	add $-304, %RSP
	add $48, %rsp
	add $48, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c4c6a
uuid_00000000000c4c6c:
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
preprocess_CL_ArrowNilNil:
#call function index-typedefs : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call index_SB_typedefs_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	mov %rbp, %rsp
	sub $8, %rsp
	ret
substitute_SB_uuids_CL_ArrowASTConsASTContext:
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c85
	jmp uuid_00000000000c4c87
uuid_00000000000c4c85:
	push %RBP
	mov -392(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c73
	jmp uuid_00000000000c4c75
uuid_00000000000c4c73:
	push %RBP
	jmp uuid_00000000000c4c70
	jmp uuid_00000000000c4c72
uuid_00000000000c4c70:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4c6d
	jmp uuid_00000000000c4c6f
uuid_00000000000c4c6d:
	movb $1, -504(%rbp)
uuid_00000000000c4c6f:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c4c72:
	mov -520(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c4c75:
	mov -512(%RBP),%RSP
	add $-536, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c82
	jmp uuid_00000000000c4c84
uuid_00000000000c4c82:
	push %RBP
	mov -384(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c7c
	jmp uuid_00000000000c4c7e
uuid_00000000000c4c7c:
	push %RBP
	jmp uuid_00000000000c4c79
	jmp uuid_00000000000c4c7b
uuid_00000000000c4c79:
	push %RBP
	mov -552(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq $uuid_00000000000c4524
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4c76
	jmp uuid_00000000000c4c78
uuid_00000000000c4c76:
	movb $1, -624(%rbp)
uuid_00000000000c4c78:
	mov -648(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c4c7b:
	mov -640(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c4c7e:
	mov -632(%RBP),%RSP
	add $-656, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c7f
	jmp uuid_00000000000c4c81
uuid_00000000000c4c7f:
	movb $1, -408(%rbp)
uuid_00000000000c4c81:
	mov -544(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c4c84:
	mov -424(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c4c87:
	mov -416(%RBP),%RSP
	add $-656, %RSP
	mov -408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d08
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -736(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ca7
	jmp uuid_00000000000c4ca9
uuid_00000000000c4ca7:
	push %RBP
	mov -728(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4ca4
	jmp uuid_00000000000c4ca6
uuid_00000000000c4ca4:
	push %RBP
	mov -720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4ca1
	jmp uuid_00000000000c4ca3
uuid_00000000000c4ca1:
	movb $1, -744(%rbp)
uuid_00000000000c4ca3:
	mov -840(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c4ca6:
	mov -760(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c4ca9:
	mov -752(%RBP),%RSP
	add $-912, %RSP
	mov -744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d05
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -992(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4cb3
	jmp uuid_00000000000c4cb5
uuid_00000000000c4cb3:
	push %RBP
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	jmp uuid_00000000000c4cb0
	jmp uuid_00000000000c4cb2
uuid_00000000000c4cb0:
	push %RBP
	mov -960(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4cad
	jmp uuid_00000000000c4caf
uuid_00000000000c4cad:
	push %RBP
	mov -952(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4caa
	jmp uuid_00000000000c4cac
uuid_00000000000c4caa:
	movb $1, -1000(%rbp)
uuid_00000000000c4cac:
	mov -1128(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000c4caf:
	mov -1048(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000c4cb2:
	mov -1016(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000c4cb5:
	mov -1008(%RBP),%RSP
	add $-1200, %RSP
	mov -1000(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d02
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov -1280(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4cff
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov -1360(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4cfc
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1440(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4cb9
	jmp uuid_00000000000c4cbb
uuid_00000000000c4cb9:
	push %RBP
	jmp uuid_00000000000c4cb6
	jmp uuid_00000000000c4cb8
uuid_00000000000c4cb6:
	movb $1, -1448(%rbp)
uuid_00000000000c4cb8:
	mov -1464(%RBP),%RSP
	add $-1464, %RSP
uuid_00000000000c4cbb:
	mov -1456(%RBP),%RSP
	add $-1464, %RSP
	mov -1448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4cf9
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1544(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4cc2
	jmp uuid_00000000000c4cc4
uuid_00000000000c4cc2:
	push %RBP
	jmp uuid_00000000000c4cbf
	jmp uuid_00000000000c4cc1
uuid_00000000000c4cbf:
	push %RBP
	mov -1480(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4cbc
	jmp uuid_00000000000c4cbe
uuid_00000000000c4cbc:
	movb $1, -1552(%rbp)
uuid_00000000000c4cbe:
	mov -1576(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000c4cc1:
	mov -1568(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000c4cc4:
	mov -1560(%RBP),%RSP
	add $-1584, %RSP
	mov -1552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4cf6
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1664(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ccb
	jmp uuid_00000000000c4ccd
uuid_00000000000c4ccb:
	push %RBP
	jmp uuid_00000000000c4cc8
	jmp uuid_00000000000c4cca
uuid_00000000000c4cc8:
	push %RBP
	mov -1600(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4cc5
	jmp uuid_00000000000c4cc7
uuid_00000000000c4cc5:
	movb $1, -1672(%rbp)
uuid_00000000000c4cc7:
	mov -1696(%RBP),%RSP
	add $-1704, %RSP
uuid_00000000000c4cca:
	mov -1688(%RBP),%RSP
	add $-1704, %RSP
uuid_00000000000c4ccd:
	mov -1680(%RBP),%RSP
	add $-1704, %RSP
	mov -1672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4cf3
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1784(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4cd4
	jmp uuid_00000000000c4cd6
uuid_00000000000c4cd4:
	push %RBP
	mov -1776(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4cd1
	jmp uuid_00000000000c4cd3
uuid_00000000000c4cd1:
	push %RBP
	mov -1768(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4cce
	jmp uuid_00000000000c4cd0
uuid_00000000000c4cce:
	movb $1, -1792(%rbp)
uuid_00000000000c4cd0:
	mov -1888(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000c4cd3:
	mov -1808(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000c4cd6:
	mov -1800(%RBP),%RSP
	add $-1960, %RSP
	mov -1792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4cf0
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -2040(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4cdd
	jmp uuid_00000000000c4cdf
uuid_00000000000c4cdd:
	push %RBP
	mov -2032(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4cda
	jmp uuid_00000000000c4cdc
uuid_00000000000c4cda:
	push %RBP
	mov -2024(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4cd7
	jmp uuid_00000000000c4cd9
uuid_00000000000c4cd7:
	movb $1, -2048(%rbp)
uuid_00000000000c4cd9:
	mov -2144(%RBP),%RSP
	add $-2216, %RSP
uuid_00000000000c4cdc:
	mov -2064(%RBP),%RSP
	add $-2216, %RSP
uuid_00000000000c4cdf:
	mov -2056(%RBP),%RSP
	add $-2216, %RSP
	mov -2048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ced
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -2296(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ce6
	jmp uuid_00000000000c4ce8
uuid_00000000000c4ce6:
	push %RBP
	mov -2288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4ce3
	jmp uuid_00000000000c4ce5
uuid_00000000000c4ce3:
	push %RBP
	pushq -2232(%RBP)
	pushq -2240(%RBP)
	pushq -2248(%RBP)
	pushq -2256(%RBP)
	pushq -2264(%RBP)
	pushq -2272(%RBP)
	pushq -2280(%RBP)
	jmp uuid_00000000000c4ce0
	jmp uuid_00000000000c4ce2
uuid_00000000000c4ce0:
	movb $1, -2304(%rbp)
uuid_00000000000c4ce2:
	mov -2400(%RBP),%RSP
	add $-2456, %RSP
uuid_00000000000c4ce5:
	mov -2320(%RBP),%RSP
	add $-2456, %RSP
uuid_00000000000c4ce8:
	mov -2312(%RBP),%RSP
	add $-2456, %RSP
	mov -2304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4cea
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c4ce9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4cec
uuid_00000000000c4cea:
	pushq -2408(%rbp)
	pushq -2416(%rbp)
	pushq -2424(%rbp)
	pushq -2432(%rbp)
	pushq -2440(%rbp)
	pushq -2448(%rbp)
	pushq -2456(%rbp)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -2328(%rbp)
	pushq -2336(%rbp)
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c4cec:
	mov -2224(%RBP),%RSP
	add $-2456, %RSP
	jmp uuid_00000000000c4cef
uuid_00000000000c4ced:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c4cef:
	mov -1968(%RBP),%RSP
	add $-2216, %RSP
	jmp uuid_00000000000c4cf2
uuid_00000000000c4cf0:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c4cf2:
	mov -1712(%RBP),%RSP
	add $-1960, %RSP
	jmp uuid_00000000000c4cf5
uuid_00000000000c4cf3:
uuid_00000000000c4cf5:
	mov -1592(%RBP),%RSP
	add $-1704, %RSP
	jmp uuid_00000000000c4cf8
uuid_00000000000c4cf6:
uuid_00000000000c4cf8:
	mov -1472(%RBP),%RSP
	add $-1584, %RSP
	jmp uuid_00000000000c4cfb
uuid_00000000000c4cf9:
uuid_00000000000c4cfb:
	mov -1368(%RBP),%RSP
	add $-1464, %RSP
	jmp uuid_00000000000c4cfe
uuid_00000000000c4cfc:
uuid_00000000000c4cfe:
	mov -1288(%RBP),%RSP
	add $-1360, %RSP
	jmp uuid_00000000000c4d01
uuid_00000000000c4cff:
uuid_00000000000c4d01:
	mov -1208(%RBP),%RSP
	add $-1280, %RSP
	jmp uuid_00000000000c4d04
uuid_00000000000c4d02:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq $5
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c4d04:
	mov -920(%RBP),%RSP
	add $-1200, %RSP
	jmp uuid_00000000000c4d07
uuid_00000000000c4d05:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c4d07:
	mov -664(%RBP),%RSP
	add $-912, %RSP
	jmp uuid_00000000000c4d0a
uuid_00000000000c4d08:
uuid_00000000000c4c9e:
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4c9f
	jmp uuid_00000000000c4ca0
uuid_00000000000c4c9f:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq $0
	push %RBP
	mov -856(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c91
	jmp uuid_00000000000c4c93
uuid_00000000000c4c91:
	push %RBP
	pushq -784(%RBP)
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	jmp uuid_00000000000c4c8e
	jmp uuid_00000000000c4c90
uuid_00000000000c4c8e:
	push %RBP
	mov -776(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4c8b
	jmp uuid_00000000000c4c8d
uuid_00000000000c4c8b:
	push %RBP
	mov -768(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4c88
	jmp uuid_00000000000c4c8a
uuid_00000000000c4c88:
	movb $1, -864(%rbp)
uuid_00000000000c4c8a:
	mov -976(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c4c8d:
	mov -960(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c4c90:
	mov -880(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c4c93:
	mov -872(%RBP),%RSP
	add $-1072, %RSP
	mov -864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c9b
	push %RBP
	jmp uuid_00000000000c4c98
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c4c97
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4c9a
uuid_00000000000c4c98:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c4c9a:
	mov -1080(%RBP),%RSP
	add $-1080, %RSP
	jmp uuid_00000000000c4c9d
uuid_00000000000c4c9b:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	pushq -968(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4c94
	movq -1072(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c4c96
uuid_00000000000c4c94:
	movq -952(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -944(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -936(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -928(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -920(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -912(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -904(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -896(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -888(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c4c96:
	mov -1080(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000c4c9d:
	mov -760(%RBP),%RSP
	add $-1080, %RSP
	add $96, %rsp
	add $96, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $96, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c4c9e
uuid_00000000000c4ca0:
uuid_00000000000c4d0a:
	mov -328(%RBP),%RSP
	add $-656, %RSP
	subq $72, %rsp
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $176, %rsp
	ret
try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -592(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d11
	jmp uuid_00000000000c4d13
uuid_00000000000c4d11:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	mov -688(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d0e
	jmp uuid_00000000000c4d10
uuid_00000000000c4d0e:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	mov -768(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d0b
	jmp uuid_00000000000c4d0d
uuid_00000000000c4d0b:
	movb $1, -600(%rbp)
uuid_00000000000c4d0d:
	mov -696(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c4d10:
	mov -616(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c4d13:
	mov -608(%RBP),%RSP
	add $-768, %RSP
	mov -600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4fbf
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -928(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d62
	jmp uuid_00000000000c4d64
uuid_00000000000c4d62:
	push %RBP
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq $0
	push %RBP
	mov -1024(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d2c
	jmp uuid_00000000000c4d2e
uuid_00000000000c4d2c:
	push %RBP
	jmp uuid_00000000000c4d29
	jmp uuid_00000000000c4d2b
uuid_00000000000c4d29:
	push %RBP
	mov -1008(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1128(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d23
	jmp uuid_00000000000c4d25
uuid_00000000000c4d23:
	push %RBP
	jmp uuid_00000000000c4d20
	jmp uuid_00000000000c4d22
uuid_00000000000c4d20:
	push %RBP
	mov -1112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1232(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d1a
	jmp uuid_00000000000c4d1c
uuid_00000000000c4d1a:
	push %RBP
	jmp uuid_00000000000c4d17
	jmp uuid_00000000000c4d19
uuid_00000000000c4d17:
	push %RBP
	mov -1168(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4d14
	jmp uuid_00000000000c4d16
uuid_00000000000c4d14:
	movb $1, -1240(%rbp)
uuid_00000000000c4d16:
	mov -1264(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000c4d19:
	mov -1256(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000c4d1c:
	mov -1248(%RBP),%RSP
	add $-1272, %RSP
	mov -1240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d1d
	jmp uuid_00000000000c4d1f
uuid_00000000000c4d1d:
	movb $1, -1136(%rbp)
uuid_00000000000c4d1f:
	mov -1160(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000c4d22:
	mov -1152(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000c4d25:
	mov -1144(%RBP),%RSP
	add $-1272, %RSP
	mov -1136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d26
	jmp uuid_00000000000c4d28
uuid_00000000000c4d26:
	movb $1, -1032(%rbp)
uuid_00000000000c4d28:
	mov -1056(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000c4d2b:
	mov -1048(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000c4d2e:
	mov -1040(%RBP),%RSP
	add $-1272, %RSP
	mov -1032(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d5f
	jmp uuid_00000000000c4d61
uuid_00000000000c4d5f:
	push %RBP
	pushq -784(%RBP)
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq $0
	push %RBP
	mov -1352(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d59
	jmp uuid_00000000000c4d5b
uuid_00000000000c4d59:
	push %RBP
	mov -1344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1448(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d35
	jmp uuid_00000000000c4d37
uuid_00000000000c4d35:
	push %RBP
	jmp uuid_00000000000c4d32
	jmp uuid_00000000000c4d34
uuid_00000000000c4d32:
	push %RBP
	jmp uuid_00000000000c4d2f
	jmp uuid_00000000000c4d31
uuid_00000000000c4d2f:
	movb $1, -1456(%rbp)
uuid_00000000000c4d31:
	mov -1480(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c4d34:
	mov -1472(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c4d37:
	mov -1464(%RBP),%RSP
	add $-1480, %RSP
	mov -1456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d56
	jmp uuid_00000000000c4d58
uuid_00000000000c4d56:
	push %RBP
	mov -1336(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1560(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d50
	jmp uuid_00000000000c4d52
uuid_00000000000c4d50:
	push %RBP
	mov -1552(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1656(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d3e
	jmp uuid_00000000000c4d40
uuid_00000000000c4d3e:
	push %RBP
	jmp uuid_00000000000c4d3b
	jmp uuid_00000000000c4d3d
uuid_00000000000c4d3b:
	push %RBP
	jmp uuid_00000000000c4d38
	jmp uuid_00000000000c4d3a
uuid_00000000000c4d38:
	movb $1, -1664(%rbp)
uuid_00000000000c4d3a:
	mov -1688(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000c4d3d:
	mov -1680(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000c4d40:
	mov -1672(%RBP),%RSP
	add $-1688, %RSP
	mov -1664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d4d
	jmp uuid_00000000000c4d4f
uuid_00000000000c4d4d:
	push %RBP
	mov -1544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1768(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d47
	jmp uuid_00000000000c4d49
uuid_00000000000c4d47:
	push %RBP
	jmp uuid_00000000000c4d44
	jmp uuid_00000000000c4d46
uuid_00000000000c4d44:
	push %RBP
	jmp uuid_00000000000c4d41
	jmp uuid_00000000000c4d43
uuid_00000000000c4d41:
	movb $1, -1776(%rbp)
uuid_00000000000c4d43:
	mov -1800(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000c4d46:
	mov -1792(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000c4d49:
	mov -1784(%RBP),%RSP
	add $-1800, %RSP
	mov -1776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d4a
	jmp uuid_00000000000c4d4c
uuid_00000000000c4d4a:
	movb $1, -1568(%rbp)
uuid_00000000000c4d4c:
	mov -1696(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000c4d4f:
	mov -1584(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000c4d52:
	mov -1576(%RBP),%RSP
	add $-1800, %RSP
	mov -1568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d53
	jmp uuid_00000000000c4d55
uuid_00000000000c4d53:
	movb $1, -1360(%rbp)
uuid_00000000000c4d55:
	mov -1488(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000c4d58:
	mov -1376(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000c4d5b:
	mov -1368(%RBP),%RSP
	add $-1800, %RSP
	mov -1360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d5c
	jmp uuid_00000000000c4d5e
uuid_00000000000c4d5c:
	movb $1, -936(%rbp)
uuid_00000000000c4d5e:
	mov -1280(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000c4d61:
	mov -952(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000c4d64:
	mov -944(%RBP),%RSP
	add $-1800, %RSP
	mov -936(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4fbc
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -1960(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4db1
	jmp uuid_00000000000c4db3
uuid_00000000000c4db1:
	push %RBP
	pushq -1888(%RBP)
	pushq -1896(%RBP)
	pushq -1904(%RBP)
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq $0
	push %RBP
	mov -2056(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d8c
	jmp uuid_00000000000c4d8e
uuid_00000000000c4d8c:
	push %RBP
	mov -2048(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2152(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d7a
	jmp uuid_00000000000c4d7c
uuid_00000000000c4d7a:
	push %RBP
	mov -2144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2248(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d68
	jmp uuid_00000000000c4d6a
uuid_00000000000c4d68:
	push %RBP
	jmp uuid_00000000000c4d65
	jmp uuid_00000000000c4d67
uuid_00000000000c4d65:
	movb $1, -2256(%rbp)
uuid_00000000000c4d67:
	mov -2272(%RBP),%RSP
	add $-2272, %RSP
uuid_00000000000c4d6a:
	mov -2264(%RBP),%RSP
	add $-2272, %RSP
	mov -2256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d77
	jmp uuid_00000000000c4d79
uuid_00000000000c4d77:
	push %RBP
	mov -2136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2352(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d71
	jmp uuid_00000000000c4d73
uuid_00000000000c4d71:
	push %RBP
	jmp uuid_00000000000c4d6e
	jmp uuid_00000000000c4d70
uuid_00000000000c4d6e:
	push %RBP
	jmp uuid_00000000000c4d6b
	jmp uuid_00000000000c4d6d
uuid_00000000000c4d6b:
	movb $1, -2360(%rbp)
uuid_00000000000c4d6d:
	mov -2384(%RBP),%RSP
	add $-2384, %RSP
uuid_00000000000c4d70:
	mov -2376(%RBP),%RSP
	add $-2384, %RSP
uuid_00000000000c4d73:
	mov -2368(%RBP),%RSP
	add $-2384, %RSP
	mov -2360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d74
	jmp uuid_00000000000c4d76
uuid_00000000000c4d74:
	movb $1, -2160(%rbp)
uuid_00000000000c4d76:
	mov -2280(%RBP),%RSP
	add $-2384, %RSP
uuid_00000000000c4d79:
	mov -2176(%RBP),%RSP
	add $-2384, %RSP
uuid_00000000000c4d7c:
	mov -2168(%RBP),%RSP
	add $-2384, %RSP
	mov -2160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d89
	jmp uuid_00000000000c4d8b
uuid_00000000000c4d89:
	push %RBP
	mov -2040(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2464(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d83
	jmp uuid_00000000000c4d85
uuid_00000000000c4d83:
	push %RBP
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	jmp uuid_00000000000c4d80
	jmp uuid_00000000000c4d82
uuid_00000000000c4d80:
	push %RBP
	mov -2400(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2560(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4d7d
	jmp uuid_00000000000c4d7f
uuid_00000000000c4d7d:
	movb $1, -2472(%rbp)
uuid_00000000000c4d7f:
	mov -2552(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c4d82:
	mov -2488(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c4d85:
	mov -2480(%RBP),%RSP
	add $-2560, %RSP
	mov -2472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d86
	jmp uuid_00000000000c4d88
uuid_00000000000c4d86:
	movb $1, -2064(%rbp)
uuid_00000000000c4d88:
	mov -2392(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c4d8b:
	mov -2080(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c4d8e:
	mov -2072(%RBP),%RSP
	add $-2560, %RSP
	mov -2064(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4dae
	jmp uuid_00000000000c4db0
uuid_00000000000c4dae:
	push %RBP
	pushq -1816(%RBP)
	pushq -1824(%RBP)
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	pushq -1856(%RBP)
	pushq -1864(%RBP)
	pushq -1872(%RBP)
	pushq -1880(%RBP)
	pushq $0
	push %RBP
	mov -2640(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4da8
	jmp uuid_00000000000c4daa
uuid_00000000000c4da8:
	push %RBP
	mov -2632(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2736(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d95
	jmp uuid_00000000000c4d97
uuid_00000000000c4d95:
	push %RBP
	jmp uuid_00000000000c4d92
	jmp uuid_00000000000c4d94
uuid_00000000000c4d92:
	push %RBP
	mov -2672(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4d8f
	jmp uuid_00000000000c4d91
uuid_00000000000c4d8f:
	movb $1, -2744(%rbp)
uuid_00000000000c4d91:
	mov -2768(%RBP),%RSP
	add $-2776, %RSP
uuid_00000000000c4d94:
	mov -2760(%RBP),%RSP
	add $-2776, %RSP
uuid_00000000000c4d97:
	mov -2752(%RBP),%RSP
	add $-2776, %RSP
	mov -2744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4da5
	jmp uuid_00000000000c4da7
uuid_00000000000c4da5:
	push %RBP
	mov -2624(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2856(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d9f
	jmp uuid_00000000000c4da1
uuid_00000000000c4d9f:
	push %RBP
	jmp uuid_00000000000c4d9c
	jmp uuid_00000000000c4d9e
uuid_00000000000c4d9c:
	push %RBP
	mov -2792(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2896(%rbp)
	pushq $uuid_00000000000c4d98
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4d99
	jmp uuid_00000000000c4d9b
uuid_00000000000c4d99:
	movb $1, -2864(%rbp)
uuid_00000000000c4d9b:
	mov -2888(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000c4d9e:
	mov -2880(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000c4da1:
	mov -2872(%RBP),%RSP
	add $-2896, %RSP
	mov -2864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4da2
	jmp uuid_00000000000c4da4
uuid_00000000000c4da2:
	movb $1, -2648(%rbp)
uuid_00000000000c4da4:
	mov -2784(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000c4da7:
	mov -2664(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000c4daa:
	mov -2656(%RBP),%RSP
	add $-2896, %RSP
	mov -2648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4dab
	jmp uuid_00000000000c4dad
uuid_00000000000c4dab:
	movb $1, -1968(%rbp)
uuid_00000000000c4dad:
	mov -2568(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000c4db0:
	mov -1984(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000c4db3:
	mov -1976(%RBP),%RSP
	add $-2896, %RSP
	mov -1968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4fb9
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -3056(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4de7
	jmp uuid_00000000000c4de9
uuid_00000000000c4de7:
	push %RBP
	pushq -2984(%RBP)
	pushq -2992(%RBP)
	pushq -3000(%RBP)
	pushq -3008(%RBP)
	pushq -3016(%RBP)
	pushq -3024(%RBP)
	pushq -3032(%RBP)
	pushq -3040(%RBP)
	pushq -3048(%RBP)
	pushq $0
	push %RBP
	mov -3152(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4dc3
	jmp uuid_00000000000c4dc5
uuid_00000000000c4dc3:
	push %RBP
	jmp uuid_00000000000c4dc0
	jmp uuid_00000000000c4dc2
uuid_00000000000c4dc0:
	push %RBP
	mov -3136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3256(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4dba
	jmp uuid_00000000000c4dbc
uuid_00000000000c4dba:
	push %RBP
	jmp uuid_00000000000c4db7
	jmp uuid_00000000000c4db9
uuid_00000000000c4db7:
	push %RBP
	mov -3192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4db4
	jmp uuid_00000000000c4db6
uuid_00000000000c4db4:
	movb $1, -3264(%rbp)
uuid_00000000000c4db6:
	mov -3288(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000c4db9:
	mov -3280(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000c4dbc:
	mov -3272(%RBP),%RSP
	add $-3296, %RSP
	mov -3264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4dbd
	jmp uuid_00000000000c4dbf
uuid_00000000000c4dbd:
	movb $1, -3160(%rbp)
uuid_00000000000c4dbf:
	mov -3184(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000c4dc2:
	mov -3176(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000c4dc5:
	mov -3168(%RBP),%RSP
	add $-3296, %RSP
	mov -3160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4de4
	jmp uuid_00000000000c4de6
uuid_00000000000c4de4:
	push %RBP
	pushq -2912(%RBP)
	pushq -2920(%RBP)
	pushq -2928(%RBP)
	pushq -2936(%RBP)
	pushq -2944(%RBP)
	pushq -2952(%RBP)
	pushq -2960(%RBP)
	pushq -2968(%RBP)
	pushq -2976(%RBP)
	pushq $0
	push %RBP
	mov -3376(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4dde
	jmp uuid_00000000000c4de0
uuid_00000000000c4dde:
	push %RBP
	mov -3368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3472(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4dcc
	jmp uuid_00000000000c4dce
uuid_00000000000c4dcc:
	push %RBP
	jmp uuid_00000000000c4dc9
	jmp uuid_00000000000c4dcb
uuid_00000000000c4dc9:
	push %RBP
	jmp uuid_00000000000c4dc6
	jmp uuid_00000000000c4dc8
uuid_00000000000c4dc6:
	movb $1, -3480(%rbp)
uuid_00000000000c4dc8:
	mov -3504(%RBP),%RSP
	add $-3504, %RSP
uuid_00000000000c4dcb:
	mov -3496(%RBP),%RSP
	add $-3504, %RSP
uuid_00000000000c4dce:
	mov -3488(%RBP),%RSP
	add $-3504, %RSP
	mov -3480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ddb
	jmp uuid_00000000000c4ddd
uuid_00000000000c4ddb:
	push %RBP
	mov -3360(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3584(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4dd5
	jmp uuid_00000000000c4dd7
uuid_00000000000c4dd5:
	push %RBP
	jmp uuid_00000000000c4dd2
	jmp uuid_00000000000c4dd4
uuid_00000000000c4dd2:
	push %RBP
	jmp uuid_00000000000c4dcf
	jmp uuid_00000000000c4dd1
uuid_00000000000c4dcf:
	movb $1, -3592(%rbp)
uuid_00000000000c4dd1:
	mov -3616(%RBP),%RSP
	add $-3616, %RSP
uuid_00000000000c4dd4:
	mov -3608(%RBP),%RSP
	add $-3616, %RSP
uuid_00000000000c4dd7:
	mov -3600(%RBP),%RSP
	add $-3616, %RSP
	mov -3592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4dd8
	jmp uuid_00000000000c4dda
uuid_00000000000c4dd8:
	movb $1, -3384(%rbp)
uuid_00000000000c4dda:
	mov -3512(%RBP),%RSP
	add $-3616, %RSP
uuid_00000000000c4ddd:
	mov -3400(%RBP),%RSP
	add $-3616, %RSP
uuid_00000000000c4de0:
	mov -3392(%RBP),%RSP
	add $-3616, %RSP
	mov -3384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4de1
	jmp uuid_00000000000c4de3
uuid_00000000000c4de1:
	movb $1, -3064(%rbp)
uuid_00000000000c4de3:
	mov -3304(%RBP),%RSP
	add $-3616, %RSP
uuid_00000000000c4de6:
	mov -3080(%RBP),%RSP
	add $-3616, %RSP
uuid_00000000000c4de9:
	mov -3072(%RBP),%RSP
	add $-3616, %RSP
	mov -3064(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4fb6
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -3776(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e2a
	jmp uuid_00000000000c4e2c
uuid_00000000000c4e2a:
	push %RBP
	pushq -3704(%RBP)
	pushq -3712(%RBP)
	pushq -3720(%RBP)
	pushq -3728(%RBP)
	pushq -3736(%RBP)
	pushq -3744(%RBP)
	pushq -3752(%RBP)
	pushq -3760(%RBP)
	pushq -3768(%RBP)
	pushq $0
	push %RBP
	mov -3872(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e18
	jmp uuid_00000000000c4e1a
uuid_00000000000c4e18:
	push %RBP
	mov -3864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4e15
	jmp uuid_00000000000c4e17
uuid_00000000000c4e15:
	push %RBP
	mov -3856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4e12
	jmp uuid_00000000000c4e14
uuid_00000000000c4e12:
	movb $1, -3880(%rbp)
uuid_00000000000c4e14:
	mov -3976(%RBP),%RSP
	add $-4048, %RSP
uuid_00000000000c4e17:
	mov -3896(%RBP),%RSP
	add $-4048, %RSP
uuid_00000000000c4e1a:
	mov -3888(%RBP),%RSP
	add $-4048, %RSP
	mov -3880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e27
	jmp uuid_00000000000c4e29
uuid_00000000000c4e27:
	push %RBP
	pushq -3632(%RBP)
	pushq -3640(%RBP)
	pushq -3648(%RBP)
	pushq -3656(%RBP)
	pushq -3664(%RBP)
	pushq -3672(%RBP)
	pushq -3680(%RBP)
	pushq -3688(%RBP)
	pushq -3696(%RBP)
	pushq $0
	push %RBP
	mov -4128(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e21
	jmp uuid_00000000000c4e23
uuid_00000000000c4e21:
	push %RBP
	mov -4120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4e1e
	jmp uuid_00000000000c4e20
uuid_00000000000c4e1e:
	push %RBP
	mov -4112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4e1b
	jmp uuid_00000000000c4e1d
uuid_00000000000c4e1b:
	movb $1, -4136(%rbp)
uuid_00000000000c4e1d:
	mov -4232(%RBP),%RSP
	add $-4304, %RSP
uuid_00000000000c4e20:
	mov -4152(%RBP),%RSP
	add $-4304, %RSP
uuid_00000000000c4e23:
	mov -4144(%RBP),%RSP
	add $-4304, %RSP
	mov -4136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e24
	jmp uuid_00000000000c4e26
uuid_00000000000c4e24:
	movb $1, -3784(%rbp)
uuid_00000000000c4e26:
	mov -4056(%RBP),%RSP
	add $-4304, %RSP
uuid_00000000000c4e29:
	mov -3800(%RBP),%RSP
	add $-4304, %RSP
uuid_00000000000c4e2c:
	mov -3792(%RBP),%RSP
	add $-4304, %RSP
	mov -3784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4fb3
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -4464(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e51
	jmp uuid_00000000000c4e53
uuid_00000000000c4e51:
	push %RBP
	pushq -4392(%RBP)
	pushq -4400(%RBP)
	pushq -4408(%RBP)
	pushq -4416(%RBP)
	pushq -4424(%RBP)
	pushq -4432(%RBP)
	pushq -4440(%RBP)
	pushq -4448(%RBP)
	pushq -4456(%RBP)
	pushq $0
	push %RBP
	mov -4560(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e3c
	jmp uuid_00000000000c4e3e
uuid_00000000000c4e3c:
	push %RBP
	pushq -4536(%RBP)
	pushq -4544(%RBP)
	pushq -4552(%RBP)
	jmp uuid_00000000000c4e39
	jmp uuid_00000000000c4e3b
uuid_00000000000c4e39:
	push %RBP
	mov -4528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4e36
	jmp uuid_00000000000c4e38
uuid_00000000000c4e36:
	push %RBP
	mov -4520(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4e33
	jmp uuid_00000000000c4e35
uuid_00000000000c4e33:
	movb $1, -4568(%rbp)
uuid_00000000000c4e35:
	mov -4696(%RBP),%RSP
	add $-4768, %RSP
uuid_00000000000c4e38:
	mov -4616(%RBP),%RSP
	add $-4768, %RSP
uuid_00000000000c4e3b:
	mov -4584(%RBP),%RSP
	add $-4768, %RSP
uuid_00000000000c4e3e:
	mov -4576(%RBP),%RSP
	add $-4768, %RSP
	mov -4568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e4e
	jmp uuid_00000000000c4e50
uuid_00000000000c4e4e:
	push %RBP
	pushq -4320(%RBP)
	pushq -4328(%RBP)
	pushq -4336(%RBP)
	pushq -4344(%RBP)
	pushq -4352(%RBP)
	pushq -4360(%RBP)
	pushq -4368(%RBP)
	pushq -4376(%RBP)
	pushq -4384(%RBP)
	pushq $0
	push %RBP
	mov -4848(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e48
	jmp uuid_00000000000c4e4a
uuid_00000000000c4e48:
	push %RBP
	pushq -4824(%RBP)
	pushq -4832(%RBP)
	pushq -4840(%RBP)
	jmp uuid_00000000000c4e45
	jmp uuid_00000000000c4e47
uuid_00000000000c4e45:
	push %RBP
	mov -4816(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4e42
	jmp uuid_00000000000c4e44
uuid_00000000000c4e42:
	push %RBP
	mov -4808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4e3f
	jmp uuid_00000000000c4e41
uuid_00000000000c4e3f:
	movb $1, -4856(%rbp)
uuid_00000000000c4e41:
	mov -4984(%RBP),%RSP
	add $-5056, %RSP
uuid_00000000000c4e44:
	mov -4904(%RBP),%RSP
	add $-5056, %RSP
uuid_00000000000c4e47:
	mov -4872(%RBP),%RSP
	add $-5056, %RSP
uuid_00000000000c4e4a:
	mov -4864(%RBP),%RSP
	add $-5056, %RSP
	mov -4856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e4b
	jmp uuid_00000000000c4e4d
uuid_00000000000c4e4b:
	movb $1, -4472(%rbp)
uuid_00000000000c4e4d:
	mov -4776(%RBP),%RSP
	add $-5056, %RSP
uuid_00000000000c4e50:
	mov -4488(%RBP),%RSP
	add $-5056, %RSP
uuid_00000000000c4e53:
	mov -4480(%RBP),%RSP
	add $-5056, %RSP
	mov -4472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4fb0
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -5216(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e73
	jmp uuid_00000000000c4e75
uuid_00000000000c4e73:
	push %RBP
	pushq -5144(%RBP)
	pushq -5152(%RBP)
	pushq -5160(%RBP)
	pushq -5168(%RBP)
	pushq -5176(%RBP)
	pushq -5184(%RBP)
	pushq -5192(%RBP)
	pushq -5200(%RBP)
	pushq -5208(%RBP)
	pushq $0
	push %RBP
	mov -5312(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e60
	jmp uuid_00000000000c4e62
uuid_00000000000c4e60:
	push %RBP
	jmp uuid_00000000000c4e5d
	jmp uuid_00000000000c4e5f
uuid_00000000000c4e5d:
	push %RBP
	mov -5248(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5352(%rbp)
	pushq $uuid_00000000000c4983
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4e5a
	jmp uuid_00000000000c4e5c
uuid_00000000000c4e5a:
	movb $1, -5320(%rbp)
uuid_00000000000c4e5c:
	mov -5344(%RBP),%RSP
	add $-5352, %RSP
uuid_00000000000c4e5f:
	mov -5336(%RBP),%RSP
	add $-5352, %RSP
uuid_00000000000c4e62:
	mov -5328(%RBP),%RSP
	add $-5352, %RSP
	mov -5320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e70
	jmp uuid_00000000000c4e72
uuid_00000000000c4e70:
	push %RBP
	pushq -5072(%RBP)
	pushq -5080(%RBP)
	pushq -5088(%RBP)
	pushq -5096(%RBP)
	pushq -5104(%RBP)
	pushq -5112(%RBP)
	pushq -5120(%RBP)
	pushq -5128(%RBP)
	pushq -5136(%RBP)
	pushq $0
	push %RBP
	mov -5432(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e6a
	jmp uuid_00000000000c4e6c
uuid_00000000000c4e6a:
	push %RBP
	jmp uuid_00000000000c4e67
	jmp uuid_00000000000c4e69
uuid_00000000000c4e67:
	push %RBP
	mov -5368(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5472(%rbp)
	pushq $uuid_00000000000c4e63
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4e64
	jmp uuid_00000000000c4e66
uuid_00000000000c4e64:
	movb $1, -5440(%rbp)
uuid_00000000000c4e66:
	mov -5464(%RBP),%RSP
	add $-5472, %RSP
uuid_00000000000c4e69:
	mov -5456(%RBP),%RSP
	add $-5472, %RSP
uuid_00000000000c4e6c:
	mov -5448(%RBP),%RSP
	add $-5472, %RSP
	mov -5440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e6d
	jmp uuid_00000000000c4e6f
uuid_00000000000c4e6d:
	movb $1, -5224(%rbp)
uuid_00000000000c4e6f:
	mov -5360(%RBP),%RSP
	add $-5472, %RSP
uuid_00000000000c4e72:
	mov -5240(%RBP),%RSP
	add $-5472, %RSP
uuid_00000000000c4e75:
	mov -5232(%RBP),%RSP
	add $-5472, %RSP
	mov -5224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4fad
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -5632(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e8e
	jmp uuid_00000000000c4e90
uuid_00000000000c4e8e:
	push %RBP
	pushq -5560(%RBP)
	pushq -5568(%RBP)
	pushq -5576(%RBP)
	pushq -5584(%RBP)
	pushq -5592(%RBP)
	pushq -5600(%RBP)
	pushq -5608(%RBP)
	pushq -5616(%RBP)
	pushq -5624(%RBP)
	pushq $0
	push %RBP
	mov -5728(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e7c
	jmp uuid_00000000000c4e7e
uuid_00000000000c4e7c:
	push %RBP
	jmp uuid_00000000000c4e79
	jmp uuid_00000000000c4e7b
uuid_00000000000c4e79:
	push %RBP
	mov -5664(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4e76
	jmp uuid_00000000000c4e78
uuid_00000000000c4e76:
	movb $1, -5736(%rbp)
uuid_00000000000c4e78:
	mov -5760(%RBP),%RSP
	add $-5768, %RSP
uuid_00000000000c4e7b:
	mov -5752(%RBP),%RSP
	add $-5768, %RSP
uuid_00000000000c4e7e:
	mov -5744(%RBP),%RSP
	add $-5768, %RSP
	mov -5736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e8b
	jmp uuid_00000000000c4e8d
uuid_00000000000c4e8b:
	push %RBP
	pushq -5488(%RBP)
	pushq -5496(%RBP)
	pushq -5504(%RBP)
	pushq -5512(%RBP)
	pushq -5520(%RBP)
	pushq -5528(%RBP)
	pushq -5536(%RBP)
	pushq -5544(%RBP)
	pushq -5552(%RBP)
	pushq $0
	push %RBP
	mov -5848(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e85
	jmp uuid_00000000000c4e87
uuid_00000000000c4e85:
	push %RBP
	jmp uuid_00000000000c4e82
	jmp uuid_00000000000c4e84
uuid_00000000000c4e82:
	push %RBP
	mov -5784(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4e7f
	jmp uuid_00000000000c4e81
uuid_00000000000c4e7f:
	movb $1, -5856(%rbp)
uuid_00000000000c4e81:
	mov -5880(%RBP),%RSP
	add $-5888, %RSP
uuid_00000000000c4e84:
	mov -5872(%RBP),%RSP
	add $-5888, %RSP
uuid_00000000000c4e87:
	mov -5864(%RBP),%RSP
	add $-5888, %RSP
	mov -5856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e88
	jmp uuid_00000000000c4e8a
uuid_00000000000c4e88:
	movb $1, -5640(%rbp)
uuid_00000000000c4e8a:
	mov -5776(%RBP),%RSP
	add $-5888, %RSP
uuid_00000000000c4e8d:
	mov -5656(%RBP),%RSP
	add $-5888, %RSP
uuid_00000000000c4e90:
	mov -5648(%RBP),%RSP
	add $-5888, %RSP
	mov -5640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4faa
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -6048(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4eac
	jmp uuid_00000000000c4eae
uuid_00000000000c4eac:
	push %RBP
	pushq -5976(%RBP)
	pushq -5984(%RBP)
	pushq -5992(%RBP)
	pushq -6000(%RBP)
	pushq -6008(%RBP)
	pushq -6016(%RBP)
	pushq -6024(%RBP)
	pushq -6032(%RBP)
	pushq -6040(%RBP)
	pushq $0
	push %RBP
	mov -6144(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e9a
	jmp uuid_00000000000c4e9c
uuid_00000000000c4e9a:
	push %RBP
	jmp uuid_00000000000c4e97
	jmp uuid_00000000000c4e99
uuid_00000000000c4e97:
	push %RBP
	mov -6080(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4e94
	jmp uuid_00000000000c4e96
uuid_00000000000c4e94:
	movb $1, -6152(%rbp)
uuid_00000000000c4e96:
	mov -6176(%RBP),%RSP
	add $-6184, %RSP
uuid_00000000000c4e99:
	mov -6168(%RBP),%RSP
	add $-6184, %RSP
uuid_00000000000c4e9c:
	mov -6160(%RBP),%RSP
	add $-6184, %RSP
	mov -6152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ea9
	jmp uuid_00000000000c4eab
uuid_00000000000c4ea9:
	push %RBP
	pushq -5904(%RBP)
	pushq -5912(%RBP)
	pushq -5920(%RBP)
	pushq -5928(%RBP)
	pushq -5936(%RBP)
	pushq -5944(%RBP)
	pushq -5952(%RBP)
	pushq -5960(%RBP)
	pushq -5968(%RBP)
	pushq $0
	push %RBP
	mov -6264(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ea3
	jmp uuid_00000000000c4ea5
uuid_00000000000c4ea3:
	push %RBP
	jmp uuid_00000000000c4ea0
	jmp uuid_00000000000c4ea2
uuid_00000000000c4ea0:
	push %RBP
	mov -6200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4e9d
	jmp uuid_00000000000c4e9f
uuid_00000000000c4e9d:
	movb $1, -6272(%rbp)
uuid_00000000000c4e9f:
	mov -6296(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000c4ea2:
	mov -6288(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000c4ea5:
	mov -6280(%RBP),%RSP
	add $-6304, %RSP
	mov -6272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ea6
	jmp uuid_00000000000c4ea8
uuid_00000000000c4ea6:
	movb $1, -6056(%rbp)
uuid_00000000000c4ea8:
	mov -6192(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000c4eab:
	mov -6072(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000c4eae:
	mov -6064(%RBP),%RSP
	add $-6304, %RSP
	mov -6056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4fa7
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -6464(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4edc
	jmp uuid_00000000000c4ede
uuid_00000000000c4edc:
	push %RBP
	pushq -6392(%RBP)
	pushq -6400(%RBP)
	pushq -6408(%RBP)
	pushq -6416(%RBP)
	pushq -6424(%RBP)
	pushq -6432(%RBP)
	pushq -6440(%RBP)
	pushq -6448(%RBP)
	pushq -6456(%RBP)
	pushq $0
	push %RBP
	mov -6560(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4eb8
	jmp uuid_00000000000c4eba
uuid_00000000000c4eb8:
	push %RBP
	pushq -6504(%RBP)
	pushq -6512(%RBP)
	pushq -6520(%RBP)
	pushq -6528(%RBP)
	pushq -6536(%RBP)
	pushq -6544(%RBP)
	pushq -6552(%RBP)
	jmp uuid_00000000000c4eb5
	jmp uuid_00000000000c4eb7
uuid_00000000000c4eb5:
	push %RBP
	mov -6496(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4eb2
	jmp uuid_00000000000c4eb4
uuid_00000000000c4eb2:
	movb $1, -6568(%rbp)
uuid_00000000000c4eb4:
	mov -6648(%RBP),%RSP
	add $-6656, %RSP
uuid_00000000000c4eb7:
	mov -6584(%RBP),%RSP
	add $-6656, %RSP
uuid_00000000000c4eba:
	mov -6576(%RBP),%RSP
	add $-6656, %RSP
	mov -6568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ed9
	jmp uuid_00000000000c4edb
uuid_00000000000c4ed9:
	push %RBP
	pushq -6320(%RBP)
	pushq -6328(%RBP)
	pushq -6336(%RBP)
	pushq -6344(%RBP)
	pushq -6352(%RBP)
	pushq -6360(%RBP)
	pushq -6368(%RBP)
	pushq -6376(%RBP)
	pushq -6384(%RBP)
	pushq $0
	push %RBP
	mov -6736(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ed3
	jmp uuid_00000000000c4ed5
uuid_00000000000c4ed3:
	push %RBP
	mov -6728(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6832(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ec1
	jmp uuid_00000000000c4ec3
uuid_00000000000c4ec1:
	push %RBP
	jmp uuid_00000000000c4ebe
	jmp uuid_00000000000c4ec0
uuid_00000000000c4ebe:
	push %RBP
	mov -6768(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4ebb
	jmp uuid_00000000000c4ebd
uuid_00000000000c4ebb:
	movb $1, -6840(%rbp)
uuid_00000000000c4ebd:
	mov -6864(%RBP),%RSP
	add $-6872, %RSP
uuid_00000000000c4ec0:
	mov -6856(%RBP),%RSP
	add $-6872, %RSP
uuid_00000000000c4ec3:
	mov -6848(%RBP),%RSP
	add $-6872, %RSP
	mov -6840(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ed0
	jmp uuid_00000000000c4ed2
uuid_00000000000c4ed0:
	push %RBP
	mov -6720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6952(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4eca
	jmp uuid_00000000000c4ecc
uuid_00000000000c4eca:
	push %RBP
	jmp uuid_00000000000c4ec7
	jmp uuid_00000000000c4ec9
uuid_00000000000c4ec7:
	push %RBP
	mov -6888(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6992(%rbp)
	pushq $uuid_00000000000c4d98
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4ec4
	jmp uuid_00000000000c4ec6
uuid_00000000000c4ec4:
	movb $1, -6960(%rbp)
uuid_00000000000c4ec6:
	mov -6984(%RBP),%RSP
	add $-6992, %RSP
uuid_00000000000c4ec9:
	mov -6976(%RBP),%RSP
	add $-6992, %RSP
uuid_00000000000c4ecc:
	mov -6968(%RBP),%RSP
	add $-6992, %RSP
	mov -6960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ecd
	jmp uuid_00000000000c4ecf
uuid_00000000000c4ecd:
	movb $1, -6744(%rbp)
uuid_00000000000c4ecf:
	mov -6880(%RBP),%RSP
	add $-6992, %RSP
uuid_00000000000c4ed2:
	mov -6760(%RBP),%RSP
	add $-6992, %RSP
uuid_00000000000c4ed5:
	mov -6752(%RBP),%RSP
	add $-6992, %RSP
	mov -6744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ed6
	jmp uuid_00000000000c4ed8
uuid_00000000000c4ed6:
	movb $1, -6472(%rbp)
uuid_00000000000c4ed8:
	mov -6664(%RBP),%RSP
	add $-6992, %RSP
uuid_00000000000c4edb:
	mov -6488(%RBP),%RSP
	add $-6992, %RSP
uuid_00000000000c4ede:
	mov -6480(%RBP),%RSP
	add $-6992, %RSP
	mov -6472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4fa4
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -7152(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f0d
	jmp uuid_00000000000c4f0f
uuid_00000000000c4f0d:
	push %RBP
	pushq -7080(%RBP)
	pushq -7088(%RBP)
	pushq -7096(%RBP)
	pushq -7104(%RBP)
	pushq -7112(%RBP)
	pushq -7120(%RBP)
	pushq -7128(%RBP)
	pushq -7136(%RBP)
	pushq -7144(%RBP)
	pushq $0
	push %RBP
	mov -7248(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ee8
	jmp uuid_00000000000c4eea
uuid_00000000000c4ee8:
	push %RBP
	jmp uuid_00000000000c4ee5
	jmp uuid_00000000000c4ee7
uuid_00000000000c4ee5:
	push %RBP
	mov -7184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7288(%rbp)
	pushq $uuid_00000000000c4983
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4ee2
	jmp uuid_00000000000c4ee4
uuid_00000000000c4ee2:
	movb $1, -7256(%rbp)
uuid_00000000000c4ee4:
	mov -7280(%RBP),%RSP
	add $-7288, %RSP
uuid_00000000000c4ee7:
	mov -7272(%RBP),%RSP
	add $-7288, %RSP
uuid_00000000000c4eea:
	mov -7264(%RBP),%RSP
	add $-7288, %RSP
	mov -7256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f0a
	jmp uuid_00000000000c4f0c
uuid_00000000000c4f0a:
	push %RBP
	pushq -7008(%RBP)
	pushq -7016(%RBP)
	pushq -7024(%RBP)
	pushq -7032(%RBP)
	pushq -7040(%RBP)
	pushq -7048(%RBP)
	pushq -7056(%RBP)
	pushq -7064(%RBP)
	pushq -7072(%RBP)
	pushq $0
	push %RBP
	mov -7368(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f04
	jmp uuid_00000000000c4f06
uuid_00000000000c4f04:
	push %RBP
	mov -7360(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -7464(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ef1
	jmp uuid_00000000000c4ef3
uuid_00000000000c4ef1:
	push %RBP
	jmp uuid_00000000000c4eee
	jmp uuid_00000000000c4ef0
uuid_00000000000c4eee:
	push %RBP
	jmp uuid_00000000000c4eeb
	jmp uuid_00000000000c4eed
uuid_00000000000c4eeb:
	movb $1, -7472(%rbp)
uuid_00000000000c4eed:
	mov -7496(%RBP),%RSP
	add $-7496, %RSP
uuid_00000000000c4ef0:
	mov -7488(%RBP),%RSP
	add $-7496, %RSP
uuid_00000000000c4ef3:
	mov -7480(%RBP),%RSP
	add $-7496, %RSP
	mov -7472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f01
	jmp uuid_00000000000c4f03
uuid_00000000000c4f01:
	push %RBP
	mov -7352(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -7576(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4efb
	jmp uuid_00000000000c4efd
uuid_00000000000c4efb:
	push %RBP
	jmp uuid_00000000000c4ef8
	jmp uuid_00000000000c4efa
uuid_00000000000c4ef8:
	push %RBP
	mov -7512(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7616(%rbp)
	pushq $uuid_00000000000c4ef4
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4ef5
	jmp uuid_00000000000c4ef7
uuid_00000000000c4ef5:
	movb $1, -7584(%rbp)
uuid_00000000000c4ef7:
	mov -7608(%RBP),%RSP
	add $-7616, %RSP
uuid_00000000000c4efa:
	mov -7600(%RBP),%RSP
	add $-7616, %RSP
uuid_00000000000c4efd:
	mov -7592(%RBP),%RSP
	add $-7616, %RSP
	mov -7584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4efe
	jmp uuid_00000000000c4f00
uuid_00000000000c4efe:
	movb $1, -7376(%rbp)
uuid_00000000000c4f00:
	mov -7504(%RBP),%RSP
	add $-7616, %RSP
uuid_00000000000c4f03:
	mov -7392(%RBP),%RSP
	add $-7616, %RSP
uuid_00000000000c4f06:
	mov -7384(%RBP),%RSP
	add $-7616, %RSP
	mov -7376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f07
	jmp uuid_00000000000c4f09
uuid_00000000000c4f07:
	movb $1, -7160(%rbp)
uuid_00000000000c4f09:
	mov -7296(%RBP),%RSP
	add $-7616, %RSP
uuid_00000000000c4f0c:
	mov -7176(%RBP),%RSP
	add $-7616, %RSP
uuid_00000000000c4f0f:
	mov -7168(%RBP),%RSP
	add $-7616, %RSP
	mov -7160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4fa1
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -7776(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f3a
	jmp uuid_00000000000c4f3c
uuid_00000000000c4f3a:
	push %RBP
	pushq -7704(%RBP)
	pushq -7712(%RBP)
	pushq -7720(%RBP)
	pushq -7728(%RBP)
	pushq -7736(%RBP)
	pushq -7744(%RBP)
	pushq -7752(%RBP)
	pushq -7760(%RBP)
	pushq -7768(%RBP)
	pushq $0
	push %RBP
	mov -7872(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f16
	jmp uuid_00000000000c4f18
uuid_00000000000c4f16:
	push %RBP
	pushq -7816(%RBP)
	pushq -7824(%RBP)
	pushq -7832(%RBP)
	pushq -7840(%RBP)
	pushq -7848(%RBP)
	pushq -7856(%RBP)
	pushq -7864(%RBP)
	jmp uuid_00000000000c4f13
	jmp uuid_00000000000c4f15
uuid_00000000000c4f13:
	push %RBP
	mov -7808(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4f10
	jmp uuid_00000000000c4f12
uuid_00000000000c4f10:
	movb $1, -7880(%rbp)
uuid_00000000000c4f12:
	mov -7960(%RBP),%RSP
	add $-7968, %RSP
uuid_00000000000c4f15:
	mov -7896(%RBP),%RSP
	add $-7968, %RSP
uuid_00000000000c4f18:
	mov -7888(%RBP),%RSP
	add $-7968, %RSP
	mov -7880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f37
	jmp uuid_00000000000c4f39
uuid_00000000000c4f37:
	push %RBP
	pushq -7632(%RBP)
	pushq -7640(%RBP)
	pushq -7648(%RBP)
	pushq -7656(%RBP)
	pushq -7664(%RBP)
	pushq -7672(%RBP)
	pushq -7680(%RBP)
	pushq -7688(%RBP)
	pushq -7696(%RBP)
	pushq $0
	push %RBP
	mov -8048(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f31
	jmp uuid_00000000000c4f33
uuid_00000000000c4f31:
	push %RBP
	mov -8040(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8144(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f1f
	jmp uuid_00000000000c4f21
uuid_00000000000c4f1f:
	push %RBP
	jmp uuid_00000000000c4f1c
	jmp uuid_00000000000c4f1e
uuid_00000000000c4f1c:
	push %RBP
	mov -8080(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4f19
	jmp uuid_00000000000c4f1b
uuid_00000000000c4f19:
	movb $1, -8152(%rbp)
uuid_00000000000c4f1b:
	mov -8176(%RBP),%RSP
	add $-8184, %RSP
uuid_00000000000c4f1e:
	mov -8168(%RBP),%RSP
	add $-8184, %RSP
uuid_00000000000c4f21:
	mov -8160(%RBP),%RSP
	add $-8184, %RSP
	mov -8152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f2e
	jmp uuid_00000000000c4f30
uuid_00000000000c4f2e:
	push %RBP
	mov -8032(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8264(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f28
	jmp uuid_00000000000c4f2a
uuid_00000000000c4f28:
	push %RBP
	jmp uuid_00000000000c4f25
	jmp uuid_00000000000c4f27
uuid_00000000000c4f25:
	push %RBP
	mov -8200(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8304(%rbp)
	pushq $uuid_00000000000c4ef4
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4f22
	jmp uuid_00000000000c4f24
uuid_00000000000c4f22:
	movb $1, -8272(%rbp)
uuid_00000000000c4f24:
	mov -8296(%RBP),%RSP
	add $-8304, %RSP
uuid_00000000000c4f27:
	mov -8288(%RBP),%RSP
	add $-8304, %RSP
uuid_00000000000c4f2a:
	mov -8280(%RBP),%RSP
	add $-8304, %RSP
	mov -8272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f2b
	jmp uuid_00000000000c4f2d
uuid_00000000000c4f2b:
	movb $1, -8056(%rbp)
uuid_00000000000c4f2d:
	mov -8192(%RBP),%RSP
	add $-8304, %RSP
uuid_00000000000c4f30:
	mov -8072(%RBP),%RSP
	add $-8304, %RSP
uuid_00000000000c4f33:
	mov -8064(%RBP),%RSP
	add $-8304, %RSP
	mov -8056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f34
	jmp uuid_00000000000c4f36
uuid_00000000000c4f34:
	movb $1, -7784(%rbp)
uuid_00000000000c4f36:
	mov -7976(%RBP),%RSP
	add $-8304, %RSP
uuid_00000000000c4f39:
	mov -7800(%RBP),%RSP
	add $-8304, %RSP
uuid_00000000000c4f3c:
	mov -7792(%RBP),%RSP
	add $-8304, %RSP
	mov -7784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f9e
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -8464(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f7a
	jmp uuid_00000000000c4f7c
uuid_00000000000c4f7a:
	push %RBP
	pushq -8392(%RBP)
	pushq -8400(%RBP)
	pushq -8408(%RBP)
	pushq -8416(%RBP)
	pushq -8424(%RBP)
	pushq -8432(%RBP)
	pushq -8440(%RBP)
	pushq -8448(%RBP)
	pushq -8456(%RBP)
	pushq $0
	push %RBP
	mov -8560(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f43
	jmp uuid_00000000000c4f45
uuid_00000000000c4f43:
	push %RBP
	pushq -8504(%RBP)
	pushq -8512(%RBP)
	pushq -8520(%RBP)
	pushq -8528(%RBP)
	pushq -8536(%RBP)
	pushq -8544(%RBP)
	pushq -8552(%RBP)
	jmp uuid_00000000000c4f40
	jmp uuid_00000000000c4f42
uuid_00000000000c4f40:
	push %RBP
	mov -8496(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4f3d
	jmp uuid_00000000000c4f3f
uuid_00000000000c4f3d:
	movb $1, -8568(%rbp)
uuid_00000000000c4f3f:
	mov -8648(%RBP),%RSP
	add $-8656, %RSP
uuid_00000000000c4f42:
	mov -8584(%RBP),%RSP
	add $-8656, %RSP
uuid_00000000000c4f45:
	mov -8576(%RBP),%RSP
	add $-8656, %RSP
	mov -8568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f77
	jmp uuid_00000000000c4f79
uuid_00000000000c4f77:
	push %RBP
	pushq -8320(%RBP)
	pushq -8328(%RBP)
	pushq -8336(%RBP)
	pushq -8344(%RBP)
	pushq -8352(%RBP)
	pushq -8360(%RBP)
	pushq -8368(%RBP)
	pushq -8376(%RBP)
	pushq -8384(%RBP)
	pushq $0
	push %RBP
	mov -8736(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f71
	jmp uuid_00000000000c4f73
uuid_00000000000c4f71:
	push %RBP
	mov -8728(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8832(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f4c
	jmp uuid_00000000000c4f4e
uuid_00000000000c4f4c:
	push %RBP
	jmp uuid_00000000000c4f49
	jmp uuid_00000000000c4f4b
uuid_00000000000c4f49:
	push %RBP
	mov -8768(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4f46
	jmp uuid_00000000000c4f48
uuid_00000000000c4f46:
	movb $1, -8840(%rbp)
uuid_00000000000c4f48:
	mov -8864(%RBP),%RSP
	add $-8872, %RSP
uuid_00000000000c4f4b:
	mov -8856(%RBP),%RSP
	add $-8872, %RSP
uuid_00000000000c4f4e:
	mov -8848(%RBP),%RSP
	add $-8872, %RSP
	mov -8840(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f6e
	jmp uuid_00000000000c4f70
uuid_00000000000c4f6e:
	push %RBP
	mov -8720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8952(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f68
	jmp uuid_00000000000c4f6a
uuid_00000000000c4f68:
	push %RBP
	mov -8944(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -9048(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f55
	jmp uuid_00000000000c4f57
uuid_00000000000c4f55:
	push %RBP
	jmp uuid_00000000000c4f52
	jmp uuid_00000000000c4f54
uuid_00000000000c4f52:
	push %RBP
	mov -8984(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4f4f
	jmp uuid_00000000000c4f51
uuid_00000000000c4f4f:
	movb $1, -9056(%rbp)
uuid_00000000000c4f51:
	mov -9080(%RBP),%RSP
	add $-9088, %RSP
uuid_00000000000c4f54:
	mov -9072(%RBP),%RSP
	add $-9088, %RSP
uuid_00000000000c4f57:
	mov -9064(%RBP),%RSP
	add $-9088, %RSP
	mov -9056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f65
	jmp uuid_00000000000c4f67
uuid_00000000000c4f65:
	push %RBP
	mov -8936(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -9168(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f5f
	jmp uuid_00000000000c4f61
uuid_00000000000c4f5f:
	push %RBP
	jmp uuid_00000000000c4f5c
	jmp uuid_00000000000c4f5e
uuid_00000000000c4f5c:
	push %RBP
	mov -9104(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9208(%rbp)
	pushq $uuid_00000000000c4f58
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4f59
	jmp uuid_00000000000c4f5b
uuid_00000000000c4f59:
	movb $1, -9176(%rbp)
uuid_00000000000c4f5b:
	mov -9200(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000c4f5e:
	mov -9192(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000c4f61:
	mov -9184(%RBP),%RSP
	add $-9208, %RSP
	mov -9176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f62
	jmp uuid_00000000000c4f64
uuid_00000000000c4f62:
	movb $1, -8960(%rbp)
uuid_00000000000c4f64:
	mov -9096(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000c4f67:
	mov -8976(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000c4f6a:
	mov -8968(%RBP),%RSP
	add $-9208, %RSP
	mov -8960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f6b
	jmp uuid_00000000000c4f6d
uuid_00000000000c4f6b:
	movb $1, -8744(%rbp)
uuid_00000000000c4f6d:
	mov -8880(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000c4f70:
	mov -8760(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000c4f73:
	mov -8752(%RBP),%RSP
	add $-9208, %RSP
	mov -8744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f74
	jmp uuid_00000000000c4f76
uuid_00000000000c4f74:
	movb $1, -8472(%rbp)
uuid_00000000000c4f76:
	mov -8664(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000c4f79:
	mov -8488(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000c4f7c:
	mov -8480(%RBP),%RSP
	add $-9208, %RSP
	mov -8472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f9b
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -9368(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f91
	jmp uuid_00000000000c4f93
uuid_00000000000c4f91:
	push %RBP
	pushq -9296(%RBP)
	pushq -9304(%RBP)
	pushq -9312(%RBP)
	pushq -9320(%RBP)
	pushq -9328(%RBP)
	pushq -9336(%RBP)
	pushq -9344(%RBP)
	pushq -9352(%RBP)
	pushq -9360(%RBP)
	jmp uuid_00000000000c4f8e
	jmp uuid_00000000000c4f90
uuid_00000000000c4f8e:
	push %RBP
	pushq -9224(%RBP)
	pushq -9232(%RBP)
	pushq -9240(%RBP)
	pushq -9248(%RBP)
	pushq -9256(%RBP)
	pushq -9264(%RBP)
	pushq -9272(%RBP)
	pushq -9280(%RBP)
	pushq -9288(%RBP)
	pushq $0
	push %RBP
	mov -9544(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f88
	jmp uuid_00000000000c4f8a
uuid_00000000000c4f88:
	push %RBP
	jmp uuid_00000000000c4f85
	jmp uuid_00000000000c4f87
uuid_00000000000c4f85:
	push %RBP
	mov -9480(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4f82
	jmp uuid_00000000000c4f84
uuid_00000000000c4f82:
	movb $1, -9552(%rbp)
uuid_00000000000c4f84:
	mov -9576(%RBP),%RSP
	add $-9584, %RSP
uuid_00000000000c4f87:
	mov -9568(%RBP),%RSP
	add $-9584, %RSP
uuid_00000000000c4f8a:
	mov -9560(%RBP),%RSP
	add $-9584, %RSP
	mov -9552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f8b
	jmp uuid_00000000000c4f8d
uuid_00000000000c4f8b:
	movb $1, -9376(%rbp)
uuid_00000000000c4f8d:
	mov -9472(%RBP),%RSP
	add $-9584, %RSP
uuid_00000000000c4f90:
	mov -9392(%RBP),%RSP
	add $-9584, %RSP
uuid_00000000000c4f93:
	mov -9384(%RBP),%RSP
	add $-9584, %RSP
	mov -9376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f98
	push %RBP
	jmp uuid_00000000000c4f95
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c4f94
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4f97
uuid_00000000000c4f95:
uuid_00000000000c4f97:
	mov -9592(%RBP),%RSP
	add $-9592, %RSP
	jmp uuid_00000000000c4f9a
uuid_00000000000c4f98:
#call function close : Arrow<Context+CaseNumber<1>,Array<Context+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextCaseNumber1ContextCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -9584(%rbp)
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9400(%rbp)
	pushq -9408(%rbp)
	pushq -9416(%rbp)
	pushq -9424(%rbp)
	pushq -9432(%rbp)
	pushq -9440(%rbp)
	pushq -9448(%rbp)
	pushq -9456(%rbp)
	pushq -9464(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	pushq $0
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c4f9a:
	mov -9216(%RBP),%RSP
	add $-9584, %RSP
	jmp uuid_00000000000c4f9d
uuid_00000000000c4f9b:
	push %RBP
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8656(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $unknown_SB_index_SB_of_SB_tag_CL_U64, %R14
	mov 0(%R14), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f7f
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8656(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Context,Array<Context,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -9088(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1176
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8592(%rbp)
	pushq -8600(%rbp)
	pushq -8608(%rbp)
	pushq -8616(%rbp)
	pushq -8624(%rbp)
	pushq -8632(%rbp)
	pushq -8640(%rbp)
	pushq $uuid_00000000000c1176
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9224(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8592(%rbp)
	pushq -8600(%rbp)
	pushq -8608(%rbp)
	pushq -8616(%rbp)
	pushq -8624(%rbp)
	pushq -8632(%rbp)
	pushq -8640(%rbp)
	pushq -9224(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4f7d
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	pushq $0
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4f7e
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -8656(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c10b5
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Context,Array<Context,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8872(%rbp)
	pushq -9232(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8592(%rbp)
	pushq -8600(%rbp)
	pushq -8608(%rbp)
	pushq -8616(%rbp)
	pushq -8624(%rbp)
	pushq -8632(%rbp)
	pushq -8640(%rbp)
	pushq -9232(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	pushq $0
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	jmp uuid_00000000000c4f81
uuid_00000000000c4f7f:
uuid_00000000000c4f81:
	mov -9216(%RBP),%RSP
	add $-9216, %RSP
uuid_00000000000c4f9d:
	mov -8312(%RBP),%RSP
	add $-9216, %RSP
	jmp uuid_00000000000c4fa0
uuid_00000000000c4f9e:
#call function close : Arrow<Context+CaseNumber<1>,Array<Context+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextCaseNumber1ContextCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8184(%rbp)
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -7920(%RBP)
	pushq -7928(%RBP)
	pushq -7936(%RBP)
	pushq -7944(%RBP)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	pushq $0
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c4fa0:
	mov -7624(%RBP),%RSP
	add $-8304, %RSP
	jmp uuid_00000000000c4fa3
uuid_00000000000c4fa1:
uuid_00000000000c4fa3:
	mov -7000(%RBP),%RSP
	add $-7616, %RSP
	jmp uuid_00000000000c4fa6
uuid_00000000000c4fa4:
	push %RBP
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6656(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $unknown_SB_index_SB_of_SB_tag_CL_U64, %R14
	mov 0(%R14), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4edf
	jmp uuid_00000000000c4ee1
uuid_00000000000c4edf:
#call function close : Arrow<Context+CaseNumber<1>,Array<Context+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextCaseNumber1ContextCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -6872(%rbp)
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -6608(%RBP)
	pushq -6616(%RBP)
	pushq -6624(%RBP)
	pushq -6632(%RBP)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	pushq $0
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c4ee1:
	mov -7000(%RBP),%RSP
	add $-7000, %RSP
uuid_00000000000c4fa6:
	mov -6312(%RBP),%RSP
	add $-7000, %RSP
	jmp uuid_00000000000c4fa9
uuid_00000000000c4fa7:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6304(%rbp)
	pushq -6184(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4eaf
	jmp uuid_00000000000c4eb1
uuid_00000000000c4eaf:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c4eb1:
	mov -6312(%RBP),%RSP
	add $-6312, %RSP
uuid_00000000000c4fa9:
	mov -5896(%RBP),%RSP
	add $-6312, %RSP
	jmp uuid_00000000000c4fac
uuid_00000000000c4faa:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5888(%rbp)
	pushq -5768(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4e91
	jmp uuid_00000000000c4e93
uuid_00000000000c4e91:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c4e93:
	mov -5896(%RBP),%RSP
	add $-5896, %RSP
uuid_00000000000c4fac:
	mov -5480(%RBP),%RSP
	add $-5896, %RSP
	jmp uuid_00000000000c4faf
uuid_00000000000c4fad:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c4faf:
	mov -5064(%RBP),%RSP
	add $-5472, %RSP
	jmp uuid_00000000000c4fb2
uuid_00000000000c4fb0:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -4704(%rbp)
	pushq -4712(%rbp)
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq -5136(%rbp)
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4e57
	jmp uuid_00000000000c4e59
uuid_00000000000c4e57:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -4976(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	pushq -4672(%rbp)
	pushq -4680(%rbp)
	pushq -4688(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4e54
	jmp uuid_00000000000c4e56
uuid_00000000000c4e54:
#call function union : Arrow<Cons<Context,Context>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq -5136(%rbp)
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowContextConsContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c4e56:
	mov -5264(%RBP),%RSP
	add $-5264, %RSP
uuid_00000000000c4e59:
	mov -5160(%RBP),%RSP
	add $-5264, %RSP
uuid_00000000000c4fb2:
	mov -4312(%RBP),%RSP
	add $-5264, %RSP
	jmp uuid_00000000000c4fb5
uuid_00000000000c4fb3:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -4240(%rbp)
	pushq -4248(%rbp)
	pushq -4256(%rbp)
	pushq -4264(%rbp)
	pushq -4272(%rbp)
	pushq -4280(%rbp)
	pushq -4288(%rbp)
	pushq -4296(%rbp)
	pushq -4304(%rbp)
	pushq -3984(%rbp)
	pushq -3992(%rbp)
	pushq -4000(%rbp)
	pushq -4008(%rbp)
	pushq -4016(%rbp)
	pushq -4024(%rbp)
	pushq -4032(%rbp)
	pushq -4040(%rbp)
	pushq -4048(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4312(%rbp)
	pushq -4320(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4e30
	jmp uuid_00000000000c4e32
uuid_00000000000c4e30:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -4160(%rbp)
	pushq -4168(%rbp)
	pushq -4176(%rbp)
	pushq -4184(%rbp)
	pushq -4192(%rbp)
	pushq -4200(%rbp)
	pushq -4208(%rbp)
	pushq -4216(%rbp)
	pushq -4224(%rbp)
	pushq -3904(%rbp)
	pushq -3912(%rbp)
	pushq -3920(%rbp)
	pushq -3928(%rbp)
	pushq -3936(%rbp)
	pushq -3944(%rbp)
	pushq -3952(%rbp)
	pushq -3960(%rbp)
	pushq -3968(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4e2d
	jmp uuid_00000000000c4e2f
uuid_00000000000c4e2d:
#call function union : Arrow<Cons<Context,Context>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4312(%rbp)
	pushq -4320(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowContextConsContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c4e2f:
	mov -4512(%RBP),%RSP
	add $-4512, %RSP
uuid_00000000000c4e32:
	mov -4408(%RBP),%RSP
	add $-4512, %RSP
uuid_00000000000c4fb5:
	mov -3624(%RBP),%RSP
	add $-4512, %RSP
	jmp uuid_00000000000c4fb8
uuid_00000000000c4fb6:
	push %RBP
#call function preprocess-is-suffixed : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3296(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_is_SB_suffixed_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-lone-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3296(%rbp)
	mov %RBX, %RBP
	call is_SB_lone_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e0f
	jmp uuid_00000000000c4e11
uuid_00000000000c4e0f:
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	pushq -3632(%rbp)
	pushq -3640(%rbp)
	pushq -3648(%rbp)
	pushq -3656(%rbp)
	pushq -3664(%rbp)
	pushq -3672(%rbp)
	pushq -3680(%rbp)
	pushq -3688(%rbp)
	pushq -3696(%rbp)
	pushq -3704(%rbp)
	pushq -3712(%rbp)
	pushq -3720(%rbp)
	pushq -3728(%rbp)
	pushq -3736(%rbp)
	pushq -3744(%rbp)
	pushq -3752(%rbp)
	pushq -3760(%rbp)
	pushq -3768(%rbp)
	pushq -3776(%rbp)
	pushq $0
	push %RBP
	mov -3936(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e02
	jmp uuid_00000000000c4e04
uuid_00000000000c4e02:
	push %RBP
	pushq -3864(%RBP)
	pushq -3872(%RBP)
	pushq -3880(%RBP)
	pushq -3888(%RBP)
	pushq -3896(%RBP)
	pushq -3904(%RBP)
	pushq -3912(%RBP)
	pushq -3920(%RBP)
	pushq -3928(%RBP)
	pushq $0
	push %RBP
	mov -4032(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4df0
	jmp uuid_00000000000c4df2
uuid_00000000000c4df0:
	push %RBP
	mov -4024(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4ded
	jmp uuid_00000000000c4def
uuid_00000000000c4ded:
	push %RBP
	mov -4016(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4dea
	jmp uuid_00000000000c4dec
uuid_00000000000c4dea:
	movb $1, -4040(%rbp)
uuid_00000000000c4dec:
	mov -4136(%RBP),%RSP
	add $-4208, %RSP
uuid_00000000000c4def:
	mov -4056(%RBP),%RSP
	add $-4208, %RSP
uuid_00000000000c4df2:
	mov -4048(%RBP),%RSP
	add $-4208, %RSP
	mov -4040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4dff
	jmp uuid_00000000000c4e01
uuid_00000000000c4dff:
	push %RBP
	pushq -3792(%RBP)
	pushq -3800(%RBP)
	pushq -3808(%RBP)
	pushq -3816(%RBP)
	pushq -3824(%RBP)
	pushq -3832(%RBP)
	pushq -3840(%RBP)
	pushq -3848(%RBP)
	pushq -3856(%RBP)
	pushq $0
	push %RBP
	mov -4288(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4df9
	jmp uuid_00000000000c4dfb
uuid_00000000000c4df9:
	push %RBP
	mov -4280(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4df6
	jmp uuid_00000000000c4df8
uuid_00000000000c4df6:
	push %RBP
	mov -4272(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4df3
	jmp uuid_00000000000c4df5
uuid_00000000000c4df3:
	movb $1, -4296(%rbp)
uuid_00000000000c4df5:
	mov -4392(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000c4df8:
	mov -4312(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000c4dfb:
	mov -4304(%RBP),%RSP
	add $-4464, %RSP
	mov -4296(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4dfc
	jmp uuid_00000000000c4dfe
uuid_00000000000c4dfc:
	movb $1, -3944(%rbp)
uuid_00000000000c4dfe:
	mov -4216(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000c4e01:
	mov -3960(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000c4e04:
	mov -3952(%RBP),%RSP
	add $-4464, %RSP
	mov -3944(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e0c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c4e0b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4e0e
uuid_00000000000c4e0c:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -4400(%rbp)
	pushq -4408(%rbp)
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4144(%rbp)
	pushq -4152(%rbp)
	pushq -4160(%rbp)
	pushq -4168(%rbp)
	pushq -4176(%rbp)
	pushq -4184(%rbp)
	pushq -4192(%rbp)
	pushq -4200(%rbp)
	pushq -4208(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq -4536(%rbp)
	pushq -4544(%rbp)
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4e08
	jmp uuid_00000000000c4e0a
uuid_00000000000c4e08:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -4320(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	pushq -4384(%rbp)
	pushq -4064(%rbp)
	pushq -4072(%rbp)
	pushq -4080(%rbp)
	pushq -4088(%rbp)
	pushq -4096(%rbp)
	pushq -4104(%rbp)
	pushq -4112(%rbp)
	pushq -4120(%rbp)
	pushq -4128(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4576(%rbp)
	pushq -4584(%rbp)
	pushq -4592(%rbp)
	pushq -4600(%rbp)
	pushq -4608(%rbp)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4e05
	jmp uuid_00000000000c4e07
uuid_00000000000c4e05:
#call function union : Arrow<Cons<Context,Context>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq -4536(%rbp)
	pushq -4544(%rbp)
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	pushq -4576(%rbp)
	pushq -4584(%rbp)
	pushq -4592(%rbp)
	pushq -4600(%rbp)
	pushq -4608(%rbp)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowContextConsContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c4e07:
	mov -4672(%RBP),%RSP
	add $-4672, %RSP
uuid_00000000000c4e0a:
	mov -4568(%RBP),%RSP
	add $-4672, %RSP
uuid_00000000000c4e0e:
	mov -3784(%RBP),%RSP
	add $-4672, %RSP
uuid_00000000000c4e11:
	mov -3624(%RBP),%RSP
	add $-4672, %RSP
uuid_00000000000c4fb8:
	mov -2904(%RBP),%RSP
	add $-4672, %RSP
	jmp uuid_00000000000c4fbb
uuid_00000000000c4fb9:
#call function close : Arrow<Context+CaseNumber<1>,Array<Context+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextCaseNumber1ContextCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -2776(%rbp)
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	pushq $0
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c4fbb:
	mov -1808(%RBP),%RSP
	add $-2896, %RSP
	jmp uuid_00000000000c4fbe
uuid_00000000000c4fbc:
uuid_00000000000c4fbe:
	mov -776(%RBP),%RSP
	add $-1800, %RSP
	jmp uuid_00000000000c4fc1
uuid_00000000000c4fbf:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c4fc1:
	mov -440(%RBP),%RSP
	add $-768, %RSP
	subq $96, %rsp
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	addq $96, %rsp
	mov %rbp, %rsp
	sub $184, %rsp
	ret
destructure_SB_lhs_CL_ArrowFContextConsFragmentListConsSConsTypeFContext:
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	push %RBP
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $0
	push %RBP
	mov -480(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4fd4
	jmp uuid_00000000000c4fd6
uuid_00000000000c4fd4:
	push %RBP
	mov -472(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4fc5
	jmp uuid_00000000000c4fc7
uuid_00000000000c4fc5:
	push %RBP
	mov -520(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4fc2
	jmp uuid_00000000000c4fc4
uuid_00000000000c4fc2:
	movb $1, -536(%rbp)
uuid_00000000000c4fc4:
	mov -552(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c4fc7:
	mov -544(%RBP),%RSP
	add $-560, %RSP
	mov -536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4fd1
	jmp uuid_00000000000c4fd3
uuid_00000000000c4fd1:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -592(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4fcb
	jmp uuid_00000000000c4fcd
uuid_00000000000c4fcb:
	push %RBP
	mov -584(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -624(%rbp)
	pushq $uuid_00000000000c1842
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4fc8
	jmp uuid_00000000000c4fca
uuid_00000000000c4fc8:
	movb $1, -600(%rbp)
uuid_00000000000c4fca:
	mov -616(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000c4fcd:
	mov -608(%RBP),%RSP
	add $-624, %RSP
	mov -600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4fce
	jmp uuid_00000000000c4fd0
uuid_00000000000c4fce:
	movb $1, -488(%rbp)
uuid_00000000000c4fd0:
	mov -568(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000c4fd3:
	mov -504(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000c4fd6:
	mov -496(%RBP),%RSP
	add $-624, %RSP
	mov -488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5030
	push %RBP
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $0
	push %RBP
	mov -656(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5012
	jmp uuid_00000000000c5014
uuid_00000000000c5012:
	push %RBP
	mov -648(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -704(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5003
	jmp uuid_00000000000c5005
uuid_00000000000c5003:
	push %RBP
	mov -696(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ffa
	jmp uuid_00000000000c4ffc
uuid_00000000000c4ffa:
	push %RBP
	mov -744(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -800(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4feb
	jmp uuid_00000000000c4fed
uuid_00000000000c4feb:
	push %RBP
	mov -792(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4fe8
	jmp uuid_00000000000c4fea
uuid_00000000000c4fe8:
	movb $1, -808(%rbp)
uuid_00000000000c4fea:
	mov -824(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c4fed:
	mov -816(%RBP),%RSP
	add $-832, %RSP
	mov -808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ff7
	jmp uuid_00000000000c4ff9
uuid_00000000000c4ff7:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -864(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ff1
	jmp uuid_00000000000c4ff3
uuid_00000000000c4ff1:
	push %RBP
	mov -856(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -896(%rbp)
	pushq $uuid_00000000000c1842
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4fee
	jmp uuid_00000000000c4ff0
uuid_00000000000c4fee:
	movb $1, -872(%rbp)
uuid_00000000000c4ff0:
	mov -888(%RBP),%RSP
	add $-896, %RSP
uuid_00000000000c4ff3:
	mov -880(%RBP),%RSP
	add $-896, %RSP
	mov -872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ff4
	jmp uuid_00000000000c4ff6
uuid_00000000000c4ff4:
	movb $1, -760(%rbp)
uuid_00000000000c4ff6:
	mov -840(%RBP),%RSP
	add $-896, %RSP
uuid_00000000000c4ff9:
	mov -776(%RBP),%RSP
	add $-896, %RSP
uuid_00000000000c4ffc:
	mov -768(%RBP),%RSP
	add $-896, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5000
	jmp uuid_00000000000c5002
uuid_00000000000c5000:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4ffd
	jmp uuid_00000000000c4fff
uuid_00000000000c4ffd:
	movb $1, -712(%rbp)
uuid_00000000000c4fff:
	mov -904(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c5002:
	mov -728(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c5005:
	mov -720(%RBP),%RSP
	add $-928, %RSP
	mov -712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c500f
	jmp uuid_00000000000c5011
uuid_00000000000c500f:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -960(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5009
	jmp uuid_00000000000c500b
uuid_00000000000c5009:
	push %RBP
	mov -952(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -992(%rbp)
	pushq $uuid_00000000000c1898
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5006
	jmp uuid_00000000000c5008
uuid_00000000000c5006:
	movb $1, -968(%rbp)
uuid_00000000000c5008:
	mov -984(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c500b:
	mov -976(%RBP),%RSP
	add $-992, %RSP
	mov -968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c500c
	jmp uuid_00000000000c500e
uuid_00000000000c500c:
	movb $1, -664(%rbp)
uuid_00000000000c500e:
	mov -936(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c5011:
	mov -680(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c5014:
	mov -672(%RBP),%RSP
	add $-992, %RSP
	mov -664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c502d
	push %RBP
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	mov -1024(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c502a
	push %RBP
	jmp uuid_00000000000c5027
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c5026
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5029
uuid_00000000000c5027:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c5025
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<S,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c5029:
	mov -1032(%RBP),%RSP
	add $-1032, %RSP
	jmp uuid_00000000000c502c
uuid_00000000000c502a:
uuid_00000000000c502c:
	mov -1000(%RBP),%RSP
	add $-1024, %RSP
	jmp uuid_00000000000c502f
uuid_00000000000c502d:
#call function p1 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov %RBX, %RBP
	call p1_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	push %RBP
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq $0
	push %RBP
	mov -1360(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c501b
	jmp uuid_00000000000c501d
uuid_00000000000c501b:
	push %RBP
	pushq -1208(%RBP)
	pushq -1216(%RBP)
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	pushq -1256(%RBP)
	pushq -1264(%RBP)
	pushq -1272(%RBP)
	pushq -1280(%RBP)
	pushq -1288(%RBP)
	pushq -1296(%RBP)
	pushq -1304(%RBP)
	pushq -1312(%RBP)
	pushq -1320(%RBP)
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	jmp uuid_00000000000c5018
	jmp uuid_00000000000c501a
uuid_00000000000c5018:
	push %RBP
	mov -1200(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5015
	jmp uuid_00000000000c5017
uuid_00000000000c5015:
	movb $1, -1368(%rbp)
uuid_00000000000c5017:
	mov -1544(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000c501a:
	mov -1384(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000c501d:
	mov -1376(%RBP),%RSP
	add $-1712, %RSP
	mov -1368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5022
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c5021
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5024
uuid_00000000000c5022:
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c501e
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4fe0
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Fragment,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5020
uuid_00000000000c501e:
uuid_00000000000c5020:
	mov -1744(%RBP),%RSP
	add $-1744, %RSP
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -832(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	movq -1712(%rbp), %r15
	movq %r15, -416(%rbp)
	movq -1704(%rbp), %r15
	movq %r15, -408(%rbp)
	movq -1696(%rbp), %r15
	movq %r15, -400(%rbp)
	movq -1688(%rbp), %r15
	movq %r15, -392(%rbp)
	movq -1680(%rbp), %r15
	movq %r15, -384(%rbp)
	movq -1672(%rbp), %r15
	movq %r15, -376(%rbp)
	movq -1664(%rbp), %r15
	movq %r15, -368(%rbp)
	movq -1656(%rbp), %r15
	movq %r15, -360(%rbp)
	movq -1648(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -1640(%rbp), %r15
	movq %r15, -344(%rbp)
	movq -1632(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -1624(%rbp), %r15
	movq %r15, -328(%rbp)
	movq -1616(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -1608(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -1600(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1592(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1584(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1576(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -1568(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -1560(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -1552(%rbp), %r15
	movq %r15, -256(%rbp)
uuid_00000000000c5024:
	mov -1192(%RBP),%RSP
	add $-1864, %RSP
#call function destructure-lhs : Arrow<Cons<Cons<Cons<FContext,Type>,S>,FragmentList>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	mov %RBX, %RBP
	call destructure_SB_lhs_CL_ArrowFContextConsFragmentListConsSConsTypeFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c502f:
	mov -632(%RBP),%RSP
	add $-1864, %RSP
	jmp uuid_00000000000c5032
uuid_00000000000c5030:
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	push %RBP
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq $0
	push %RBP
	mov -992(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4fdd
	jmp uuid_00000000000c4fdf
uuid_00000000000c4fdd:
	push %RBP
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	pushq -944(%RBP)
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	jmp uuid_00000000000c4fda
	jmp uuid_00000000000c4fdc
uuid_00000000000c4fda:
	push %RBP
	jmp uuid_00000000000c4fd7
	jmp uuid_00000000000c4fd9
uuid_00000000000c4fd7:
	movb $1, -1000(%rbp)
uuid_00000000000c4fd9:
	mov -1176(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000c4fdc:
	mov -1016(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000c4fdf:
	mov -1008(%RBP),%RSP
	add $-1176, %RSP
	mov -1000(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4fe5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c4fe4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4fe7
uuid_00000000000c4fe5:
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4fe1
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4fe0
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Fragment,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4fe3
uuid_00000000000c4fe1:
uuid_00000000000c4fe3:
	mov -1208(%RBP),%RSP
	add $-1208, %RSP
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -560(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c4fe7:
	mov -824(%RBP),%RSP
	add $-1328, %RSP
uuid_00000000000c5032:
	mov -456(%RBP),%RSP
	add $-1328, %RSP
	subq $200, %rsp
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	popq -600(%rbp)
	popq -608(%rbp)
	popq -616(%rbp)
	popq -624(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $424, %rsp
	ret
fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment:
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -272(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -240(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c3169
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000c3169
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c41fb
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c41fb
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000c41fb
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c1356
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c1356
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000c1356
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c411f
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c411f
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000c411f
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c1935
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c1935
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000c1935
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragmentList:
uuid_00000000000c5040:
#call function non-zero : Arrow<FragmentList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FragmentList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5041
	jmp uuid_00000000000c5042
uuid_00000000000c5041:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	push %RBP
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5039
	jmp uuid_00000000000c503b
uuid_00000000000c5039:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	jmp uuid_00000000000c5036
	jmp uuid_00000000000c5038
uuid_00000000000c5036:
	push %RBP
	mov -512(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5033
	jmp uuid_00000000000c5035
uuid_00000000000c5033:
	movb $1, -680(%rbp)
uuid_00000000000c5035:
	mov -856(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000c5038:
	mov -696(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000c503b:
	mov -688(%RBP),%RSP
	add $-1024, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c503d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c503c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c503f
uuid_00000000000c503d:
#call function fragment::chain : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	movq -1024(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -976(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -968(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -960(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -952(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -944(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -936(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -928(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -920(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -912(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -904(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -896(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -888(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -880(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -872(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -864(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c503f:
	mov -504(%RBP),%RSP
	add $-1024, %RSP
	add $168, %rsp
	add $168, %rsp
	add $8, %rsp
	add $152, %rsp
	add $168, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c5040
uuid_00000000000c5042:
	subq $152, %rsp
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $328, %rsp
	ret
fragment_CL__CL_expression_CL_ArrowFragmentString:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $uuid_00000000000c3169
	pushq $0
	pushq -8(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	subq $152, %rsp
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
fragment_CL__CL_expression_CL_ArrowFragmentS:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $uuid_00000000000c3169
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	subq $152, %rsp
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
fragment_CL__CL_get_CL_ArrowSConsStringFragment:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq $0
	push %RBP
	mov -504(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5055
	jmp uuid_00000000000c5057
uuid_00000000000c5055:
	push %RBP
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	jmp uuid_00000000000c5052
	jmp uuid_00000000000c5054
uuid_00000000000c5052:
	push %RBP
	mov -472(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c504f
	jmp uuid_00000000000c5051
uuid_00000000000c504f:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	jmp uuid_00000000000c504c
	jmp uuid_00000000000c504e
uuid_00000000000c504c:
	push %RBP
	mov -440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5049
	jmp uuid_00000000000c504b
uuid_00000000000c5049:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5046
	jmp uuid_00000000000c5048
uuid_00000000000c5046:
	push %RBP
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	jmp uuid_00000000000c5043
	jmp uuid_00000000000c5045
uuid_00000000000c5043:
	movb $1, -512(%rbp)
uuid_00000000000c5045:
	mov -872(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c5048:
	mov -816(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c504b:
	mov -800(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c504e:
	mov -768(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c5051:
	mov -560(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c5054:
	mov -528(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c5057:
	mov -520(%RBP),%RSP
	add $-944, %RSP
	mov -512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c506f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c506e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5071
uuid_00000000000c506f:
uuid_00000000000c506b:
#call function non-zero : Arrow<FragmentKV,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c506c
	jmp uuid_00000000000c506d
uuid_00000000000c506c:
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	push %RBP
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq $0
	push %RBP
	mov -1048(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5061
	jmp uuid_00000000000c5063
uuid_00000000000c5061:
	push %RBP
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	jmp uuid_00000000000c505e
	jmp uuid_00000000000c5060
uuid_00000000000c505e:
	push %RBP
	mov -1016(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c505b
	jmp uuid_00000000000c505d
uuid_00000000000c505b:
	push %RBP
	mov -1008(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5058
	jmp uuid_00000000000c505a
uuid_00000000000c5058:
	movb $1, -1056(%rbp)
uuid_00000000000c505a:
	mov -1120(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c505d:
	mov -1104(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c5060:
	mov -1072(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c5063:
	mov -1064(%RBP),%RSP
	add $-1168, %RSP
	mov -1056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5068
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c5067
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c506a
uuid_00000000000c5068:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5064
	movq -1168(%rbp), %r15
	movq %r15, -864(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -856(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -848(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -840(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -832(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -824(%rbp)
	jmp uuid_00000000000c5066
uuid_00000000000c5064:
	movq -1096(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -176(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
uuid_00000000000c5066:
	mov -1176(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000c506a:
	mov -1000(%RBP),%RSP
	add $-1176, %RSP
	add $48, %rsp
	add $48, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c506b
uuid_00000000000c506d:
uuid_00000000000c5071:
	mov -352(%RBP),%RSP
	add $-944, %RSP
	subq $24, %rsp
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $168, %rsp
	ret
fragment_CL__CL_label_CL_ArrowFragmentString:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $uuid_00000000000c3169
	pushq $0
	pushq -8(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $uuid_00000000000c3102
	pushq $0
	pushq $uuid_00000000000c11f5
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c11f5
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	subq $152, %rsp
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
fragment_CL__CL_local_SB_variable_CL_ArrowFragmentConsTypeI64:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq $uuid_00000000000c3169
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq $uuid_00000000000c3102
	pushq $0
	pushq $uuid_00000000000c17da
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	subq $152, %rsp
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $40, %rsp
	ret
fragment_CL__CL_new_CL_ArrowFragmentNil:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
#call function close : Arrow<FragmentKV+CaseNumber<1>,Array<FragmentKV+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVCaseNumber1FragmentKVCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $0
	pushq $3
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment-context::new : Arrow<Nil,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_new_CL_ArrowFContextNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $1
	pushq $0
	subq $152, %rsp
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq $0
	push %RBP
	mov -824(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5084
	jmp uuid_00000000000c5086
uuid_00000000000c5084:
	push %RBP
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	jmp uuid_00000000000c5081
	jmp uuid_00000000000c5083
uuid_00000000000c5081:
	push %RBP
	mov -792(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c507e
	jmp uuid_00000000000c5080
uuid_00000000000c507e:
	push %RBP
	pushq -768(%RBP)
	pushq -776(%RBP)
	pushq -784(%RBP)
	jmp uuid_00000000000c507b
	jmp uuid_00000000000c507d
uuid_00000000000c507b:
	push %RBP
	mov -760(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5078
	jmp uuid_00000000000c507a
uuid_00000000000c5078:
	push %RBP
	mov -752(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5075
	jmp uuid_00000000000c5077
uuid_00000000000c5075:
	push %RBP
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	jmp uuid_00000000000c5072
	jmp uuid_00000000000c5074
uuid_00000000000c5072:
	movb $1, -832(%rbp)
uuid_00000000000c5074:
	mov -1192(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c5077:
	mov -1136(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c507a:
	mov -1120(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c507d:
	mov -1088(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c5080:
	mov -880(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c5083:
	mov -848(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c5086:
	mov -840(%RBP),%RSP
	add $-1264, %RSP
	mov -832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5088
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c5087
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c508a
uuid_00000000000c5088:
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1128(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq $0
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
uuid_00000000000c508a:
	mov -672(%RBP),%RSP
	add $-1264, %RSP
	subq $152, %rsp
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $360, %rsp
	ret
fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c509d
	jmp uuid_00000000000c509f
uuid_00000000000c509d:
	push %RBP
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	jmp uuid_00000000000c509a
	jmp uuid_00000000000c509c
uuid_00000000000c509a:
	push %RBP
	mov -600(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5097
	jmp uuid_00000000000c5099
uuid_00000000000c5097:
	push %RBP
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	jmp uuid_00000000000c5094
	jmp uuid_00000000000c5096
uuid_00000000000c5094:
	push %RBP
	mov -568(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5091
	jmp uuid_00000000000c5093
uuid_00000000000c5091:
	push %RBP
	mov -560(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c508e
	jmp uuid_00000000000c5090
uuid_00000000000c508e:
	push %RBP
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	jmp uuid_00000000000c508b
	jmp uuid_00000000000c508d
uuid_00000000000c508b:
	movb $1, -640(%rbp)
uuid_00000000000c508d:
	mov -1000(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c5090:
	mov -944(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c5093:
	mov -928(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c5096:
	mov -896(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c5099:
	mov -688(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c509c:
	mov -656(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c509f:
	mov -648(%RBP),%RSP
	add $-1072, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c50a1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c50a0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c50a3
uuid_00000000000c50a1:
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -160(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq $0
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
uuid_00000000000c50a3:
	mov -480(%RBP),%RSP
	add $-1072, %RSP
	subq $152, %rsp
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $168, %rsp
	ret
fragment_CL__CL_set_SB_term_CL_ArrowFragmentConsASTFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c50b6
	jmp uuid_00000000000c50b8
uuid_00000000000c50b6:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000c50b3
	jmp uuid_00000000000c50b5
uuid_00000000000c50b3:
	push %RBP
	mov -512(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c50b0
	jmp uuid_00000000000c50b2
uuid_00000000000c50b0:
	push %RBP
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	jmp uuid_00000000000c50ad
	jmp uuid_00000000000c50af
uuid_00000000000c50ad:
	push %RBP
	mov -480(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c50aa
	jmp uuid_00000000000c50ac
uuid_00000000000c50aa:
	push %RBP
	mov -472(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c50a7
	jmp uuid_00000000000c50a9
uuid_00000000000c50a7:
	push %RBP
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	jmp uuid_00000000000c50a4
	jmp uuid_00000000000c50a6
uuid_00000000000c50a4:
	movb $1, -552(%rbp)
uuid_00000000000c50a6:
	mov -912(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c50a9:
	mov -856(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c50ac:
	mov -840(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c50af:
	mov -808(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c50b2:
	mov -600(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c50b5:
	mov -568(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c50b8:
	mov -560(%RBP),%RSP
	add $-984, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c50ba
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c50b9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c50bc
uuid_00000000000c50ba:
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -848(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq $0
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c50bc:
	mov -392(%RBP),%RSP
	add $-984, %RSP
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $232, %rsp
	ret
fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c50cf
	jmp uuid_00000000000c50d1
uuid_00000000000c50cf:
	push %RBP
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	jmp uuid_00000000000c50cc
	jmp uuid_00000000000c50ce
uuid_00000000000c50cc:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c50c9
	jmp uuid_00000000000c50cb
uuid_00000000000c50c9:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000c50c6
	jmp uuid_00000000000c50c8
uuid_00000000000c50c6:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c50c3
	jmp uuid_00000000000c50c5
uuid_00000000000c50c3:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c50c0
	jmp uuid_00000000000c50c2
uuid_00000000000c50c0:
	push %RBP
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	jmp uuid_00000000000c50bd
	jmp uuid_00000000000c50bf
uuid_00000000000c50bd:
	movb $1, -504(%rbp)
uuid_00000000000c50bf:
	mov -864(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c50c2:
	mov -808(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c50c5:
	mov -792(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c50c8:
	mov -760(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c50cb:
	mov -552(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c50ce:
	mov -520(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c50d1:
	mov -512(%RBP),%RSP
	add $-936, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c50d3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c50d2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c50d5
uuid_00000000000c50d3:
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -800(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq $0
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c50d5:
	mov -344(%RBP),%RSP
	add $-936, %RSP
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $184, %rsp
	ret
fragment_CL__CL_set_SB_vararg_CL_ArrowFragmentConsListArray_QM_FragmentFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c50e8
	jmp uuid_00000000000c50ea
uuid_00000000000c50e8:
	push %RBP
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	jmp uuid_00000000000c50e5
	jmp uuid_00000000000c50e7
uuid_00000000000c50e5:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c50e2
	jmp uuid_00000000000c50e4
uuid_00000000000c50e2:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000c50df
	jmp uuid_00000000000c50e1
uuid_00000000000c50df:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c50dc
	jmp uuid_00000000000c50de
uuid_00000000000c50dc:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c50d9
	jmp uuid_00000000000c50db
uuid_00000000000c50d9:
	push %RBP
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	jmp uuid_00000000000c50d6
	jmp uuid_00000000000c50d8
uuid_00000000000c50d6:
	movb $1, -504(%rbp)
uuid_00000000000c50d8:
	mov -864(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c50db:
	mov -808(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c50de:
	mov -792(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c50e1:
	mov -760(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c50e4:
	mov -552(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c50e7:
	mov -520(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c50ea:
	mov -512(%RBP),%RSP
	add $-936, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c50ec
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c50eb
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c50ee
uuid_00000000000c50ec:
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -800(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c50ee:
	mov -344(%RBP),%RSP
	add $-936, %RSP
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $184, %rsp
	ret
fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq $0
	push %RBP
	mov -504(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5101
	jmp uuid_00000000000c5103
uuid_00000000000c5101:
	push %RBP
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	jmp uuid_00000000000c50fe
	jmp uuid_00000000000c5100
uuid_00000000000c50fe:
	push %RBP
	mov -472(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c50fb
	jmp uuid_00000000000c50fd
uuid_00000000000c50fb:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	jmp uuid_00000000000c50f8
	jmp uuid_00000000000c50fa
uuid_00000000000c50f8:
	push %RBP
	mov -440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c50f5
	jmp uuid_00000000000c50f7
uuid_00000000000c50f5:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c50f2
	jmp uuid_00000000000c50f4
uuid_00000000000c50f2:
	push %RBP
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	jmp uuid_00000000000c50ef
	jmp uuid_00000000000c50f1
uuid_00000000000c50ef:
	movb $1, -512(%rbp)
uuid_00000000000c50f1:
	mov -872(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c50f4:
	mov -816(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c50f7:
	mov -800(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c50fa:
	mov -768(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c50fd:
	mov -560(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c5100:
	mov -528(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c5103:
	mov -520(%RBP),%RSP
	add $-944, %RSP
	mov -512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5105
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c5104
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5107
uuid_00000000000c5105:
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -808(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq $0
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5107:
	mov -352(%RBP),%RSP
	add $-944, %RSP
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $192, %rsp
	ret
main:
	pushq $1
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000c5140:
	mov -32(%RBP), %RAX
	mov -8(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5141
	jmp uuid_00000000000c5142
uuid_00000000000c5141:
	mov -16(%RBP), %R15
	mov -32(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $uuid_00000000000c5108
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c513d
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq $uuid_00000000000c5109
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c513a
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $uuid_00000000000c510a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5137
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000c510b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5134
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $uuid_00000000000c510c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5131
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $uuid_00000000000c510d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c512e
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq $uuid_00000000000c510e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c512b
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq $uuid_00000000000c510f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5128
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000c5110
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5125
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq $uuid_00000000000c5111
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5122
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000c5112
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c511f
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq $uuid_00000000000c5113
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c511c
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq $uuid_00000000000c5114
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5119
	push %RBP
	pushq -64(%rbp)
	jmp uuid_00000000000c5116
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c5115
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5118
uuid_00000000000c5116:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -288(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c5118:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000c511b
uuid_00000000000c5119:
	mov -32(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -16(%RBP), %R15
	mov -32(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	movq %R15, %r15
	movq $config_SB_target_CL_String, %r14
	movq %r15, 0(%r14)
uuid_00000000000c511b:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000c511e
uuid_00000000000c511c:
	mov $config_SB_profile_SB_invocations_CL_U8, %r15
	movb $1, 0(%r15)
uuid_00000000000c511e:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c5121
uuid_00000000000c511f:
	mov $config_SB_preprocess_CL_U8, %r15
	movb $0, 0(%r15)
uuid_00000000000c5121:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c5124
uuid_00000000000c5122:
	mov $config_SB_preprocess_CL_U8, %r15
	movb $1, 0(%r15)
uuid_00000000000c5124:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000c5127
uuid_00000000000c5125:
	mov $config_SB_strict_CL_U8, %r15
	movb $0, 0(%r15)
uuid_00000000000c5127:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000c512a
uuid_00000000000c5128:
	mov $config_SB_strict_CL_U8, %r15
	movb $1, 0(%r15)
uuid_00000000000c512a:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000c512d
uuid_00000000000c512b:
	pushq $0
	movq $config_SB_mode_CL_CompileModeCompileModeCaseNumber0, %R15
	popq 0(%R15)
uuid_00000000000c512d:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000c5130
uuid_00000000000c512e:
	pushq $1
	movq $config_SB_mode_CL_CompileModeCompileModeCaseNumber0, %R15
	popq 0(%R15)
uuid_00000000000c5130:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000c5133
uuid_00000000000c5131:
	pushq $2
	movq $config_SB_mode_CL_CompileModeCompileModeCaseNumber0, %R15
	popq 0(%R15)
uuid_00000000000c5133:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c5136
uuid_00000000000c5134:
	pushq $3
	movq $config_SB_mode_CL_CompileModeCompileModeCaseNumber0, %R15
	popq 0(%R15)
uuid_00000000000c5136:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000c5139
uuid_00000000000c5137:
	pushq $4
	movq $config_SB_mode_CL_CompileModeCompileModeCaseNumber0, %R15
	popq 0(%R15)
uuid_00000000000c5139:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000c513c
uuid_00000000000c513a:
	pushq $1
	movq $config_SB_assemble_SB_mode_CL_AssembleModeAssembleModeCaseNumber1, %R15
	popq 0(%R15)
uuid_00000000000c513c:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000c513f
uuid_00000000000c513d:
	pushq $0
	movq $config_SB_assemble_SB_mode_CL_AssembleModeAssembleModeCaseNumber1, %R15
	popq 0(%R15)
uuid_00000000000c513f:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	mov -32(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000c5140
uuid_00000000000c5142:
	pushq $1
uuid_00000000000c516e:
	mov -64(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c516f
	jmp uuid_00000000000c5170
uuid_00000000000c516f:
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c516b
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -152(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5149
	jmp uuid_00000000000c514b
uuid_00000000000c5149:
	push %RBP
	mov -144(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5146
	jmp uuid_00000000000c5148
uuid_00000000000c5146:
	push %RBP
	mov -136(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5143
	jmp uuid_00000000000c5145
uuid_00000000000c5143:
	movb $1, -160(%rbp)
uuid_00000000000c5145:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c5148:
	mov -176(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c514b:
	mov -168(%RBP),%RSP
	add $-232, %RSP
	mov -160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5168
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5158
	jmp uuid_00000000000c515a
uuid_00000000000c5158:
	push %RBP
	mov -256(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c514f
	jmp uuid_00000000000c5151
uuid_00000000000c514f:
	push %RBP
	mov -304(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c514c
	jmp uuid_00000000000c514e
uuid_00000000000c514c:
	movb $1, -320(%rbp)
uuid_00000000000c514e:
	mov -336(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000c5151:
	mov -328(%RBP),%RSP
	add $-344, %RSP
	mov -320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5155
	jmp uuid_00000000000c5157
uuid_00000000000c5155:
	push %RBP
	mov -248(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5152
	jmp uuid_00000000000c5154
uuid_00000000000c5152:
	movb $1, -272(%rbp)
uuid_00000000000c5154:
	mov -352(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c5157:
	mov -288(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c515a:
	mov -280(%RBP),%RSP
	add $-376, %RSP
	mov -272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5165
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c515e
	jmp uuid_00000000000c5160
uuid_00000000000c515e:
	push %RBP
	mov -400(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c515b
	jmp uuid_00000000000c515d
uuid_00000000000c515b:
	movb $1, -416(%rbp)
uuid_00000000000c515d:
	mov -432(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c5160:
	mov -424(%RBP),%RSP
	add $-440, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5162
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c5161
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5164
uuid_00000000000c5162:
#call function tokenize : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -440(%rbp)
	mov %RBX, %RBP
	call tokenize_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movb $0, -64(%rbp)
uuid_00000000000c5164:
	mov -384(%RBP),%RSP
	add $-440, %RSP
	jmp uuid_00000000000c5167
uuid_00000000000c5165:
#call function tokenize : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -344(%rbp)
	mov %RBX, %RBP
	call tokenize_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -376(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000c5167:
	mov -240(%RBP),%RSP
	add $-376, %RSP
	jmp uuid_00000000000c516a
uuid_00000000000c5168:
	movq -232(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -224(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -216(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000c516a:
	mov -128(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000c516d
uuid_00000000000c516b:
	movb $0, -64(%rbp)
uuid_00000000000c516d:
	mov -96(%RBP),%RSP
	add $-120, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %RSP
	jmp uuid_00000000000c516e
uuid_00000000000c5170:
	mov $config_SB_mode_CL_CompileModeCompileModeCaseNumber0, %r15
	pushq 0(%r15)
	push %RBP
	pushq -72(%rbp)
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5182
	push %RBP
	pushq -72(%rbp)
	mov -104(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c517f
	push %RBP
	pushq -72(%rbp)
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c517c
	push %RBP
	pushq -72(%rbp)
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5179
	push %RBP
	pushq -72(%rbp)
	mov -152(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5176
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c5175
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5178
uuid_00000000000c5176:
#call function parse : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call parse_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function preprocess : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call preprocess_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function typecheck : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call typecheck_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function compile : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c5178:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000c517b
uuid_00000000000c5179:
#call function parse : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call parse_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function preprocess : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call preprocess_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function typecheck : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call typecheck_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c517b:
	mov -128(%RBP),%RSP
	add $-136, %RSP
	jmp uuid_00000000000c517e
uuid_00000000000c517c:
#call function parse : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call parse_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function preprocess : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call preprocess_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c517e:
	mov -112(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000c5181
uuid_00000000000c517f:
#call function parse : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call parse_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c5181:
	mov -96(%RBP),%RSP
	add $-104, %RSP
	jmp uuid_00000000000c5184
uuid_00000000000c5182:
#call function print : Arrow<List<Token>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call print_CL_ArrowNilListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c5184:
	mov -80(%RBP),%RSP
	add $-88, %RSP
	mov %rbp, %rsp
	sub $24, %rsp
	ret
print_CL_ArrowNilListToken:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d36
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000c5197:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5198
	jmp uuid_00000000000c5199
uuid_00000000000c5198:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c518d
	jmp uuid_00000000000c518f
uuid_00000000000c518d:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c518a
	jmp uuid_00000000000c518c
uuid_00000000000c518a:
	push %RBP
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	jmp uuid_00000000000c5187
	jmp uuid_00000000000c5189
uuid_00000000000c5187:
	movb $1, -248(%rbp)
uuid_00000000000c5189:
	mov -344(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000c518c:
	mov -264(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000c518f:
	mov -256(%RBP),%RSP
	add $-400, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5194
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c5193
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5196
uuid_00000000000c5194:
	push %RBP
	mov -88(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5190
	jmp uuid_00000000000c5192
uuid_00000000000c5190:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1074
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c5192:
	mov -408(%RBP),%RSP
	add $-408, %RSP
#call function print : Arrow<Token,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movb $1, -88(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -320(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -312(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -304(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -296(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -288(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c5196:
	mov -168(%RBP),%RSP
	add $-408, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c5197
uuid_00000000000c5199:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0d37
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
non_SB_zero_CL_ArrowU64ListToken:
	mov $1, %RAX
	push %RAX
	mov -72(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
close_CL_ArrowArray_QM_SS:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $24
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -24(%rbp), %r15
	movq %r15, 0(%r14)
	movq -16(%rbp), %r15
	movq %r15, 8(%r14)
	movq -8(%rbp), %r15
	movq %r15, 16(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
close_CL_ArrowArray_QM_FContextFContext:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $200
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -200(%rbp), %r15
	movq %r15, 0(%r14)
	movq -192(%rbp), %r15
	movq %r15, 8(%r14)
	movq -184(%rbp), %r15
	movq %r15, 16(%r14)
	movq -176(%rbp), %r15
	movq %r15, 24(%r14)
	movq -168(%rbp), %r15
	movq %r15, 32(%r14)
	movq -160(%rbp), %r15
	movq %r15, 40(%r14)
	movq -152(%rbp), %r15
	movq %r15, 48(%r14)
	movq -144(%rbp), %r15
	movq %r15, 56(%r14)
	movq -136(%rbp), %r15
	movq %r15, 64(%r14)
	movq -128(%rbp), %r15
	movq %r15, 72(%r14)
	movq -120(%rbp), %r15
	movq %r15, 80(%r14)
	movq -112(%rbp), %r15
	movq %r15, 88(%r14)
	movq -104(%rbp), %r15
	movq %r15, 96(%r14)
	movq -96(%rbp), %r15
	movq %r15, 104(%r14)
	movq -88(%rbp), %r15
	movq %r15, 112(%r14)
	movq -80(%rbp), %r15
	movq %r15, 120(%r14)
	movq -72(%rbp), %r15
	movq %r15, 128(%r14)
	movq -64(%rbp), %r15
	movq %r15, 136(%r14)
	movq -56(%rbp), %r15
	movq %r15, 144(%r14)
	movq -48(%rbp), %r15
	movq %r15, 152(%r14)
	movq -40(%rbp), %r15
	movq %r15, 160(%r14)
	movq -32(%rbp), %r15
	movq %r15, 168(%r14)
	movq -24(%rbp), %r15
	movq %r15, 176(%r14)
	movq -16(%rbp), %r15
	movq %r15, 184(%r14)
	movq -8(%rbp), %r15
	movq %r15, 192(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $208, %rsp
	ret
close_CL_ArrowArray_QM_FragmentKVFragmentKV:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $48
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -48(%rbp), %r15
	movq %r15, 0(%r14)
	movq -40(%rbp), %r15
	movq %r15, 8(%r14)
	movq -32(%rbp), %r15
	movq %r15, 16(%r14)
	movq -24(%rbp), %r15
	movq %r15, 24(%r14)
	movq -16(%rbp), %r15
	movq %r15, 32(%r14)
	movq -8(%rbp), %r15
	movq %r15, 40(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
close_CL_ArrowArray_QM_FragmentKVCaseNumber1FragmentKVCaseNumber1:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $48
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -48(%rbp), %r15
	movq %r15, 0(%r14)
	movq -40(%rbp), %r15
	movq %r15, 8(%r14)
	movq -32(%rbp), %r15
	movq %r15, 16(%r14)
	movq -24(%rbp), %r15
	movq %r15, 24(%r14)
	movq -16(%rbp), %r15
	movq %r15, 32(%r14)
	movq -8(%rbp), %r15
	movq %r15, 40(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
close_CL_ArrowArray_QM_ContextCaseNumber1ContextCaseNumber1:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $96
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -96(%rbp), %r15
	movq %r15, 0(%r14)
	movq -88(%rbp), %r15
	movq %r15, 8(%r14)
	movq -80(%rbp), %r15
	movq %r15, 16(%r14)
	movq -72(%rbp), %r15
	movq %r15, 24(%r14)
	movq -64(%rbp), %r15
	movq %r15, 32(%r14)
	movq -56(%rbp), %r15
	movq %r15, 40(%r14)
	movq -48(%rbp), %r15
	movq %r15, 48(%r14)
	movq -40(%rbp), %r15
	movq %r15, 56(%r14)
	movq -32(%rbp), %r15
	movq %r15, 64(%r14)
	movq -24(%rbp), %r15
	movq %r15, 72(%r14)
	movq -16(%rbp), %r15
	movq %r15, 80(%r14)
	movq -8(%rbp), %r15
	movq %r15, 88(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $104, %rsp
	ret
close_CL_ArrowArray_QM_ContextContext:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $96
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -96(%rbp), %r15
	movq %r15, 0(%r14)
	movq -88(%rbp), %r15
	movq %r15, 8(%r14)
	movq -80(%rbp), %r15
	movq %r15, 16(%r14)
	movq -72(%rbp), %r15
	movq %r15, 24(%r14)
	movq -64(%rbp), %r15
	movq %r15, 32(%r14)
	movq -56(%rbp), %r15
	movq %r15, 40(%r14)
	movq -48(%rbp), %r15
	movq %r15, 48(%r14)
	movq -40(%rbp), %r15
	movq %r15, 56(%r14)
	movq -32(%rbp), %r15
	movq %r15, 64(%r14)
	movq -24(%rbp), %r15
	movq %r15, 72(%r14)
	movq -16(%rbp), %r15
	movq %r15, 80(%r14)
	movq -8(%rbp), %r15
	movq %r15, 88(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $104, %rsp
	ret
close_CL_ArrowArray_QM_ASTAST:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $72
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -72(%rbp), %r15
	movq %r15, 0(%r14)
	movq -64(%rbp), %r15
	movq %r15, 8(%r14)
	movq -56(%rbp), %r15
	movq %r15, 16(%r14)
	movq -48(%rbp), %r15
	movq %r15, 24(%r14)
	movq -40(%rbp), %r15
	movq %r15, 32(%r14)
	movq -32(%rbp), %r15
	movq %r15, 40(%r14)
	movq -24(%rbp), %r15
	movq %r15, 48(%r14)
	movq -16(%rbp), %r15
	movq %r15, 56(%r14)
	movq -8(%rbp), %r15
	movq %r15, 64(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
non_SB_zero_CL_ArrowU64ListArray_QM_Fragment:
	mov $1, %RAX
	push %RAX
	mov -24(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
non_SB_zero_CL_ArrowU64ListFragment:
	mov $1, %RAX
	push %RAX
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
is_CL_ArrowU64ConsSized8Sized8:
	pushq $0
	pushq $1
uuid_00000000000c51a1:
	mov $8, %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c51a2
	jmp uuid_00000000000c51a3
uuid_00000000000c51a2:
	mov %RBP, %R15
	add $-8, %R15
	mov -32(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	mov %RBP, %R15
	add $-16, %R15
	mov -32(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	push %RBP
	mov -48(%RBP), %RAX
	mov -56(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c519e
	movq $0, -40(%rbp)
	jmp uuid_00000000000c51a0
uuid_00000000000c519e:
uuid_00000000000c51a0:
	mov -64(%RBP),%RSP
	add $-64, %RSP
	mov -32(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000c51a1
uuid_00000000000c51a3:
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
close_CL_ArrowArray_QM_SCaseNumber3SCaseNumber3:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $24
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -24(%rbp), %r15
	movq %r15, 0(%r14)
	movq -16(%rbp), %r15
	movq %r15, 8(%r14)
	movq -8(%rbp), %r15
	movq %r15, 16(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
close_CL_ArrowArray_QM_TypeType:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $24
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -24(%rbp), %r15
	movq %r15, 0(%r14)
	movq -16(%rbp), %r15
	movq %r15, 8(%r14)
	movq -8(%rbp), %r15
	movq %r15, 16(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
close_CL_ArrowArray_QM_StringStringListStringStringList:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $32
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -32(%rbp), %r15
	movq %r15, 0(%r14)
	movq -24(%rbp), %r15
	movq %r15, 8(%r14)
	movq -16(%rbp), %r15
	movq %r15, 16(%r14)
	movq -8(%rbp), %r15
	movq %r15, 24(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
reverse_CL_ArrowListTokenListToken:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000c51b5:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c51b6
	jmp uuid_00000000000c51b7
uuid_00000000000c51b6:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c51ae
	jmp uuid_00000000000c51b0
uuid_00000000000c51ae:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c51ab
	jmp uuid_00000000000c51ad
uuid_00000000000c51ab:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	pushq -280(%RBP)
	pushq -288(%RBP)
	jmp uuid_00000000000c51a8
	jmp uuid_00000000000c51aa
uuid_00000000000c51a8:
	movb $1, -312(%rbp)
uuid_00000000000c51aa:
	mov -408(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000c51ad:
	mov -328(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000c51b0:
	mov -320(%RBP),%RSP
	add $-464, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c51b2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c51b1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c51b4
uuid_00000000000c51b2:
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -400(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -392(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c51b4:
	mov -232(%RBP),%RSP
	add $-464, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c51b5
uuid_00000000000c51b7:
	subq $72, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
close_CL_ArrowArray_QM_ListTokenListTokenListTokenListToken:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $72
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -72(%rbp), %r15
	movq %r15, 0(%r14)
	movq -64(%rbp), %r15
	movq %r15, 8(%r14)
	movq -56(%rbp), %r15
	movq %r15, 16(%r14)
	movq -48(%rbp), %r15
	movq %r15, 24(%r14)
	movq -40(%rbp), %r15
	movq %r15, 32(%r14)
	movq -32(%rbp), %r15
	movq %r15, 40(%r14)
	movq -24(%rbp), %r15
	movq %r15, 48(%r14)
	movq -16(%rbp), %r15
	movq %r15, 56(%r14)
	movq -8(%rbp), %r15
	movq %r15, 64(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
cons_CL_ArrowListTokenConsListTokenToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	subq $72, %rsp
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
head_CL_ArrowTokenListToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c51c7
	push %RBP
	jmp uuid_00000000000c51c4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c51c3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c51c6
uuid_00000000000c51c4:
uuid_00000000000c51c6:
	mov -240(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c51c9
uuid_00000000000c51c7:
#call function fail : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c51c2
	mov %RBX, %RBP
	call fail_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c51c9:
	mov -160(%RBP),%RSP
	add $-232, %RSP
	pushq -8(%RBP)
	pushq -16(%RBP)
	pushq -24(%RBP)
	pushq -32(%RBP)
	pushq -40(%RBP)
	pushq -48(%RBP)
	pushq -56(%RBP)
	subq $56, %rsp
	pushq 56(%rsp)
	pushq 72(%rsp)
	pushq 88(%rsp)
	pushq 104(%rsp)
	pushq 120(%rsp)
	pushq 136(%rsp)
	pushq 152(%rsp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
close_CL_ArrowArray_QM_ListTypeListType:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $40
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -40(%rbp), %r15
	movq %r15, 0(%r14)
	movq -32(%rbp), %r15
	movq %r15, 8(%r14)
	movq -24(%rbp), %r15
	movq %r15, 16(%r14)
	movq -16(%rbp), %r15
	movq %r15, 24(%r14)
	movq -8(%rbp), %r15
	movq %r15, 32(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
cons_CL_ArrowListTypeConsListTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	subq $40, %rsp
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $72, %rsp
	ret
close_CL_ArrowArray_QM_ListTypeListTypeCaseNumber1ListTypeListTypeCaseNumber1:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $40
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -40(%rbp), %r15
	movq %r15, 0(%r14)
	movq -32(%rbp), %r15
	movq %r15, 8(%r14)
	movq -24(%rbp), %r15
	movq %r15, 16(%r14)
	movq -16(%rbp), %r15
	movq %r15, 24(%r14)
	movq -8(%rbp), %r15
	movq %r15, 32(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
close_CL_ArrowArray_QM_SfxListSfxList:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $48
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -48(%rbp), %r15
	movq %r15, 0(%r14)
	movq -40(%rbp), %r15
	movq %r15, 8(%r14)
	movq -32(%rbp), %r15
	movq %r15, 16(%r14)
	movq -24(%rbp), %r15
	movq %r15, 24(%r14)
	movq -16(%rbp), %r15
	movq %r15, 32(%r14)
	movq -8(%rbp), %r15
	movq %r15, 40(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
close_CL_ArrowArray_QM_MacroListMacroList:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $168
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -168(%rbp), %r15
	movq %r15, 0(%r14)
	movq -160(%rbp), %r15
	movq %r15, 8(%r14)
	movq -152(%rbp), %r15
	movq %r15, 16(%r14)
	movq -144(%rbp), %r15
	movq %r15, 24(%r14)
	movq -136(%rbp), %r15
	movq %r15, 32(%r14)
	movq -128(%rbp), %r15
	movq %r15, 40(%r14)
	movq -120(%rbp), %r15
	movq %r15, 48(%r14)
	movq -112(%rbp), %r15
	movq %r15, 56(%r14)
	movq -104(%rbp), %r15
	movq %r15, 64(%r14)
	movq -96(%rbp), %r15
	movq %r15, 72(%r14)
	movq -88(%rbp), %r15
	movq %r15, 80(%r14)
	movq -80(%rbp), %r15
	movq %r15, 88(%r14)
	movq -72(%rbp), %r15
	movq %r15, 96(%r14)
	movq -64(%rbp), %r15
	movq %r15, 104(%r14)
	movq -56(%rbp), %r15
	movq %r15, 112(%r14)
	movq -48(%rbp), %r15
	movq %r15, 120(%r14)
	movq -40(%rbp), %r15
	movq %r15, 128(%r14)
	movq -32(%rbp), %r15
	movq %r15, 136(%r14)
	movq -24(%rbp), %r15
	movq %r15, 144(%r14)
	movq -16(%rbp), %r15
	movq %r15, 152(%r14)
	movq -8(%rbp), %r15
	movq %r15, 160(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
close_CL_ArrowArray_QM_ASTCaseNumber9ASTCaseNumber9:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $72
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -72(%rbp), %r15
	movq %r15, 0(%r14)
	movq -64(%rbp), %r15
	movq %r15, 8(%r14)
	movq -56(%rbp), %r15
	movq %r15, 16(%r14)
	movq -48(%rbp), %r15
	movq %r15, 24(%r14)
	movq -40(%rbp), %r15
	movq %r15, 32(%r14)
	movq -32(%rbp), %r15
	movq %r15, 40(%r14)
	movq -24(%rbp), %r15
	movq %r15, 48(%r14)
	movq -16(%rbp), %r15
	movq %r15, 56(%r14)
	movq -8(%rbp), %r15
	movq %r15, 64(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
close_CL_ArrowArray_QM_FragmentListFragmentList:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $168
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -168(%rbp), %r15
	movq %r15, 0(%r14)
	movq -160(%rbp), %r15
	movq %r15, 8(%r14)
	movq -152(%rbp), %r15
	movq %r15, 16(%r14)
	movq -144(%rbp), %r15
	movq %r15, 24(%r14)
	movq -136(%rbp), %r15
	movq %r15, 32(%r14)
	movq -128(%rbp), %r15
	movq %r15, 40(%r14)
	movq -120(%rbp), %r15
	movq %r15, 48(%r14)
	movq -112(%rbp), %r15
	movq %r15, 56(%r14)
	movq -104(%rbp), %r15
	movq %r15, 64(%r14)
	movq -96(%rbp), %r15
	movq %r15, 72(%r14)
	movq -88(%rbp), %r15
	movq %r15, 80(%r14)
	movq -80(%rbp), %r15
	movq %r15, 88(%r14)
	movq -72(%rbp), %r15
	movq %r15, 96(%r14)
	movq -64(%rbp), %r15
	movq %r15, 104(%r14)
	movq -56(%rbp), %r15
	movq %r15, 112(%r14)
	movq -48(%rbp), %r15
	movq %r15, 120(%r14)
	movq -40(%rbp), %r15
	movq %r15, 128(%r14)
	movq -32(%rbp), %r15
	movq %r15, 136(%r14)
	movq -24(%rbp), %r15
	movq %r15, 144(%r14)
	movq -16(%rbp), %r15
	movq %r15, 152(%r14)
	movq -8(%rbp), %r15
	movq %r15, 160(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
max_CL_ArrowI64ConsI64I64:
	push %RBP
	mov -8(%RBP), %RAX
	mov -16(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c51d5
	jmp uuid_00000000000c51d7
uuid_00000000000c51d5:
	movq -16(%rbp), %r15
	movq %r15, -8(%rbp)
	mov -16(%rbp), %r15
	mov %r15, -8(%rbp)
uuid_00000000000c51d7:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -8(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
close_CL_ArrowArray_QM_ListTokenListToken:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $72
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -72(%rbp), %r15
	movq %r15, 0(%r14)
	movq -64(%rbp), %r15
	movq %r15, 8(%r14)
	movq -56(%rbp), %r15
	movq %r15, 16(%r14)
	movq -48(%rbp), %r15
	movq %r15, 24(%r14)
	movq -40(%rbp), %r15
	movq %r15, 32(%r14)
	movq -32(%rbp), %r15
	movq %r15, 40(%r14)
	movq -24(%rbp), %r15
	movq %r15, 48(%r14)
	movq -16(%rbp), %r15
	movq %r15, 56(%r14)
	movq -8(%rbp), %r15
	movq %r15, 64(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
cons_CL_ArrowListStringConsListStringString:
	pushq -8(%rbp)
#call function close : Arrow<List<String>,Array<List<String>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListStringListString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	subq $24, %rsp
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $40, %rsp
	ret
close_CL_ArrowArray_QM_ListStringListString:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $24
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -24(%rbp), %r15
	movq %r15, 0(%r14)
	movq -16(%rbp), %r15
	movq %r15, 8(%r14)
	movq -8(%rbp), %r15
	movq %r15, 16(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
non_SB_zero_CL_ArrowU64ListString:
	mov $1, %RAX
	push %RAX
	mov -24(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
cons_CL_ArrowListArray_QM_FragmentConsListArray_QM_FragmentArray_QM_Fragment:
	pushq -8(%rbp)
#call function close : Arrow<List<Array<Fragment,?>>,Array<List<Array<Fragment,?>>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListArray_QM_FragmentListArray_QM_Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	subq $24, %rsp
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $40, %rsp
	ret
close_CL_ArrowArray_QM_ListArray_QM_FragmentListArray_QM_Fragment:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $24
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -24(%rbp), %r15
	movq %r15, 0(%r14)
	movq -16(%rbp), %r15
	movq %r15, 8(%r14)
	movq -8(%rbp), %r15
	movq %r15, 16(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
close_CL_ArrowArray_QM_FragmentFragment:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $152
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -152(%rbp), %r15
	movq %r15, 0(%r14)
	movq -144(%rbp), %r15
	movq %r15, 8(%r14)
	movq -136(%rbp), %r15
	movq %r15, 16(%r14)
	movq -128(%rbp), %r15
	movq %r15, 24(%r14)
	movq -120(%rbp), %r15
	movq %r15, 32(%r14)
	movq -112(%rbp), %r15
	movq %r15, 40(%r14)
	movq -104(%rbp), %r15
	movq %r15, 48(%r14)
	movq -96(%rbp), %r15
	movq %r15, 56(%r14)
	movq -88(%rbp), %r15
	movq %r15, 64(%r14)
	movq -80(%rbp), %r15
	movq %r15, 72(%r14)
	movq -72(%rbp), %r15
	movq %r15, 80(%r14)
	movq -64(%rbp), %r15
	movq %r15, 88(%r14)
	movq -56(%rbp), %r15
	movq %r15, 96(%r14)
	movq -48(%rbp), %r15
	movq %r15, 104(%r14)
	movq -40(%rbp), %r15
	movq %r15, 112(%r14)
	movq -32(%rbp), %r15
	movq %r15, 120(%r14)
	movq -24(%rbp), %r15
	movq %r15, 128(%r14)
	movq -16(%rbp), %r15
	movq %r15, 136(%r14)
	movq -8(%rbp), %r15
	movq %r15, 144(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $160, %rsp
	ret
_DT_length_CL_ArrowU64ListFragment:
	pushq $0
uuid_00000000000c51f1:
#call function non-zero : Arrow<List<Fragment>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c51f2
	jmp uuid_00000000000c51f3
uuid_00000000000c51f2:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq $0
	push %RBP
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c51ea
	jmp uuid_00000000000c51ec
uuid_00000000000c51ea:
	push %RBP
	mov -520(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c51e7
	jmp uuid_00000000000c51e9
uuid_00000000000c51e7:
	push %RBP
	jmp uuid_00000000000c51e4
	jmp uuid_00000000000c51e6
uuid_00000000000c51e4:
	movb $1, -536(%rbp)
uuid_00000000000c51e6:
	mov -728(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c51e9:
	mov -552(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c51ec:
	mov -544(%RBP),%RSP
	add $-728, %RSP
	mov -536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c51ee
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c51ed
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c51f0
uuid_00000000000c51ee:
	movq -720(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -696(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -688(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -680(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -672(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -664(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -656(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -648(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -640(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -632(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -624(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -616(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -608(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -600(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -592(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -584(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -576(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -568(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -560(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c51f0:
	mov -360(%RBP),%RSP
	add $-728, %RSP
	mov -184(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -184(%rbp)
	add $168, %rsp
	add $168, %rsp
	add $8, %rsp
	add $168, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c51f1
uuid_00000000000c51f3:
	mov -184(%rbp), %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
cons_CL_ArrowListFragmentConsListFragmentFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
#call function close : Arrow<List<Fragment>,Array<List<Fragment>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListFragmentListFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	subq $168, %rsp
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	addq $168, %rsp
	mov %rbp, %rsp
	sub $328, %rsp
	ret
close_CL_ArrowArray_QM_ListFragmentListFragment:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $168
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -168(%rbp), %r15
	movq %r15, 0(%r14)
	movq -160(%rbp), %r15
	movq %r15, 8(%r14)
	movq -152(%rbp), %r15
	movq %r15, 16(%r14)
	movq -144(%rbp), %r15
	movq %r15, 24(%r14)
	movq -136(%rbp), %r15
	movq %r15, 32(%r14)
	movq -128(%rbp), %r15
	movq %r15, 40(%r14)
	movq -120(%rbp), %r15
	movq %r15, 48(%r14)
	movq -112(%rbp), %r15
	movq %r15, 56(%r14)
	movq -104(%rbp), %r15
	movq %r15, 64(%r14)
	movq -96(%rbp), %r15
	movq %r15, 72(%r14)
	movq -88(%rbp), %r15
	movq %r15, 80(%r14)
	movq -80(%rbp), %r15
	movq %r15, 88(%r14)
	movq -72(%rbp), %r15
	movq %r15, 96(%r14)
	movq -64(%rbp), %r15
	movq %r15, 104(%r14)
	movq -56(%rbp), %r15
	movq %r15, 112(%r14)
	movq -48(%rbp), %r15
	movq %r15, 120(%r14)
	movq -40(%rbp), %r15
	movq %r15, 128(%r14)
	movq -32(%rbp), %r15
	movq %r15, 136(%r14)
	movq -24(%rbp), %r15
	movq %r15, 144(%r14)
	movq -16(%rbp), %r15
	movq %r15, 152(%r14)
	movq -8(%rbp), %r15
	movq %r15, 160(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
is_CL_ArrowU64ConsSized24Sized24:
	pushq $0
	pushq $1
uuid_00000000000c51fc:
	mov $24, %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RAX, %R14
	mov -64(%RBP), %RAX
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c51fd
	jmp uuid_00000000000c51fe
uuid_00000000000c51fd:
	mov %RBP, %R15
	add $-24, %R15
	mov -64(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	mov %RBP, %R15
	add $-48, %R15
	mov -64(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	push %RBP
	mov -80(%RBP), %RAX
	mov -88(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c51f9
	movq $0, -72(%rbp)
	jmp uuid_00000000000c51fb
uuid_00000000000c51f9:
uuid_00000000000c51fb:
	mov -96(%RBP),%RSP
	add $-96, %RSP
	mov -64(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -64(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000c51fc
uuid_00000000000c51fe:
	mov -72(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
close_CL_ArrowArray_QM_TContextTContext:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $120
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -120(%rbp), %r15
	movq %r15, 0(%r14)
	movq -112(%rbp), %r15
	movq %r15, 8(%r14)
	movq -104(%rbp), %r15
	movq %r15, 16(%r14)
	movq -96(%rbp), %r15
	movq %r15, 24(%r14)
	movq -88(%rbp), %r15
	movq %r15, 32(%r14)
	movq -80(%rbp), %r15
	movq %r15, 40(%r14)
	movq -72(%rbp), %r15
	movq %r15, 48(%r14)
	movq -64(%rbp), %r15
	movq %r15, 56(%r14)
	movq -56(%rbp), %r15
	movq %r15, 64(%r14)
	movq -48(%rbp), %r15
	movq %r15, 72(%r14)
	movq -40(%rbp), %r15
	movq %r15, 80(%r14)
	movq -32(%rbp), %r15
	movq %r15, 88(%r14)
	movq -24(%rbp), %r15
	movq %r15, 96(%r14)
	movq -16(%rbp), %r15
	movq %r15, 104(%r14)
	movq -8(%rbp), %r15
	movq %r15, 112(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $128, %rsp
	ret
_DT_bind_CL_ArrowNilConsTypeConsStringArray_QM_BTreeEqTypeString:
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
#call function close : Arrow<BTreeEq<String,Type>,Array<BTreeEq<String,Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_BTreeEqTypeStringBTreeEqTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000c520a:
	mov -64(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c520b
	jmp uuid_00000000000c520c
uuid_00000000000c520b:
	mov -8(%rbp), %r15
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	push %RBP
	mov -80(%RBP), %RAX
	mov %RAX, %RAX
	mov -56(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5207
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5204
	mov -120(%RBP), %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c5206
uuid_00000000000c5204:
	mov -72(%rbp), %R8
	mov -8(%RBP), %R15
	mov %R8, 16(%R15)
	movb $0, -64(%rbp)
uuid_00000000000c5206:
	mov -152(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000c5209
uuid_00000000000c5207:
	push %RBP
	mov -128(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5201
	mov -128(%RBP), %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c5203
uuid_00000000000c5201:
	mov -72(%rbp), %R8
	mov -8(%RBP), %R15
	mov %R8, 8(%R15)
	movb $0, -64(%rbp)
uuid_00000000000c5203:
	mov -152(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000c5209:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	add $64, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c520a
uuid_00000000000c520c:
	mov %rbp, %rsp
	sub $48, %rsp
	ret
close_CL_ArrowArray_QM_BTreeEqTypeStringBTreeEqTypeString:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $64
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -64(%rbp), %r15
	movq %r15, 0(%r14)
	movq -56(%rbp), %r15
	movq %r15, 8(%r14)
	movq -48(%rbp), %r15
	movq %r15, 16(%r14)
	movq -40(%rbp), %r15
	movq %r15, 24(%r14)
	movq -32(%rbp), %r15
	movq %r15, 32(%r14)
	movq -24(%rbp), %r15
	movq %r15, 40(%r14)
	movq -16(%rbp), %r15
	movq %r15, 48(%r14)
	movq -8(%rbp), %r15
	movq %r15, 56(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $72, %rsp
	ret
non_SB_zero_CL_ArrowU64ListStackToSpecialize:
	mov $1, %RAX
	push %RAX
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $208, %rsp
	ret
max_CL_ArrowU64ConsU64U64:
	push %RBP
	mov -8(%RBP), %RAX
	mov -16(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5215
	jmp uuid_00000000000c5217
uuid_00000000000c5215:
	movq -16(%rbp), %r15
	movq %r15, -8(%rbp)
	mov -16(%rbp), %r15
	mov %r15, -8(%rbp)
uuid_00000000000c5217:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -8(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
cons_CL_ArrowListStackToSpecializeConsListStackToSpecializeStackToSpecialize:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
#call function close : Arrow<List<StackToSpecialize>,Array<List<StackToSpecialize>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListStackToSpecializeListStackToSpecialize
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	subq $200, %rsp
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $392, %rsp
	ret
close_CL_ArrowArray_QM_ListStackToSpecializeListStackToSpecialize:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $200
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -200(%rbp), %r15
	movq %r15, 0(%r14)
	movq -192(%rbp), %r15
	movq %r15, 8(%r14)
	movq -184(%rbp), %r15
	movq %r15, 16(%r14)
	movq -176(%rbp), %r15
	movq %r15, 24(%r14)
	movq -168(%rbp), %r15
	movq %r15, 32(%r14)
	movq -160(%rbp), %r15
	movq %r15, 40(%r14)
	movq -152(%rbp), %r15
	movq %r15, 48(%r14)
	movq -144(%rbp), %r15
	movq %r15, 56(%r14)
	movq -136(%rbp), %r15
	movq %r15, 64(%r14)
	movq -128(%rbp), %r15
	movq %r15, 72(%r14)
	movq -120(%rbp), %r15
	movq %r15, 80(%r14)
	movq -112(%rbp), %r15
	movq %r15, 88(%r14)
	movq -104(%rbp), %r15
	movq %r15, 96(%r14)
	movq -96(%rbp), %r15
	movq %r15, 104(%r14)
	movq -88(%rbp), %r15
	movq %r15, 112(%r14)
	movq -80(%rbp), %r15
	movq %r15, 120(%r14)
	movq -72(%rbp), %r15
	movq %r15, 128(%r14)
	movq -64(%rbp), %r15
	movq %r15, 136(%r14)
	movq -56(%rbp), %r15
	movq %r15, 144(%r14)
	movq -48(%rbp), %r15
	movq %r15, 152(%r14)
	movq -40(%rbp), %r15
	movq %r15, 160(%r14)
	movq -32(%rbp), %r15
	movq %r15, 168(%r14)
	movq -24(%rbp), %r15
	movq %r15, 176(%r14)
	movq -16(%rbp), %r15
	movq %r15, 184(%r14)
	movq -8(%rbp), %r15
	movq %r15, 192(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $208, %rsp
	ret
non_SB_zero_CL_ArrowU64ListType:
	mov $1, %RAX
	push %RAX
	mov -40(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
_AD__CL_ArrowListTypeConsListTypeListType:
#call function reverse : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call reverse_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5231:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5232
	jmp uuid_00000000000c5233
uuid_00000000000c5232:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c522a
	jmp uuid_00000000000c522c
uuid_00000000000c522a:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5227
	jmp uuid_00000000000c5229
uuid_00000000000c5227:
	push %RBP
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	jmp uuid_00000000000c5224
	jmp uuid_00000000000c5226
uuid_00000000000c5224:
	movb $1, -184(%rbp)
uuid_00000000000c5226:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c5229:
	mov -200(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c522c:
	mov -192(%RBP),%RSP
	add $-272, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c522e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c522d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5230
uuid_00000000000c522e:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	movq -240(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -232(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -224(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -216(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c5230:
	mov -136(%RBP),%RSP
	add $-272, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c5231
uuid_00000000000c5233:
	subq $40, %rsp
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $88, %rsp
	ret
reverse_CL_ArrowListTypeListType:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000c5244:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5245
	jmp uuid_00000000000c5246
uuid_00000000000c5245:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c523e
	jmp uuid_00000000000c5240
uuid_00000000000c523e:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c523b
	jmp uuid_00000000000c523d
uuid_00000000000c523b:
	push %RBP
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	jmp uuid_00000000000c5238
	jmp uuid_00000000000c523a
uuid_00000000000c5238:
	movb $1, -184(%rbp)
uuid_00000000000c523a:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c523d:
	mov -200(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c5240:
	mov -192(%RBP),%RSP
	add $-272, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5241
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c51b1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5243
uuid_00000000000c5241:
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	movq -240(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -232(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -224(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -216(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c5243:
	mov -136(%RBP),%RSP
	add $-272, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c5244
uuid_00000000000c5246:
	subq $40, %rsp
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
_DT_length_CL_ArrowU64ListType:
	pushq $0
uuid_00000000000c5255:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5256
	jmp uuid_00000000000c5257
uuid_00000000000c5256:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c524f
	jmp uuid_00000000000c5251
uuid_00000000000c524f:
	push %RBP
	mov -136(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c524c
	jmp uuid_00000000000c524e
uuid_00000000000c524c:
	push %RBP
	jmp uuid_00000000000c5249
	jmp uuid_00000000000c524b
uuid_00000000000c5249:
	movb $1, -152(%rbp)
uuid_00000000000c524b:
	mov -216(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000c524e:
	mov -168(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000c5251:
	mov -160(%RBP),%RSP
	add $-216, %RSP
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5252
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c51ed
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5254
uuid_00000000000c5252:
	movq -208(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -192(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c5254:
	mov -104(%RBP),%RSP
	add $-216, %RSP
	mov -56(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c5255
uuid_00000000000c5257:
	mov -56(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
_DT_lookup_CL_ArrowTypeConsTypeConsStringBTreeEqTypeString:
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
uuid_00000000000c5272:
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5273
	jmp uuid_00000000000c5274
uuid_00000000000c5273:
	mov -8(%RBP), %RAX
	push %RAX
	push %RBP
	mov -112(%RBP), %RAX
	mov -128(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5263
	jmp uuid_00000000000c5265
uuid_00000000000c5263:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	mov -16(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5260
	jmp uuid_00000000000c5262
uuid_00000000000c5260:
	pushq -24(%RBP)
	pushq -32(%RBP)
	pushq -40(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	movb $0, -120(%rbp)
uuid_00000000000c5262:
	mov -144(%RBP),%RSP
	add $-144, %RSP
uuid_00000000000c5265:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	push %RBP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c526f
	jmp uuid_00000000000c5271
uuid_00000000000c526f:
	push %RBP
	mov -128(%RBP), %RAX
	mov -112(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c526c
	push %RBP
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5269
	mov -48(%RBP), %RAX
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c526b
uuid_00000000000c5269:
	movb $0, -120(%rbp)
uuid_00000000000c526b:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000c526e
uuid_00000000000c526c:
	push %RBP
	mov -56(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5266
	mov -56(%RBP), %RAX
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c5268
uuid_00000000000c5266:
	movb $0, -120(%rbp)
uuid_00000000000c5268:
	mov -168(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c526e:
	mov -160(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c5271:
	mov -152(%RBP),%RSP
	add $-168, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c5272
uuid_00000000000c5274:
	subq $24, %rsp
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $104, %rsp
	ret
_DT_lookup_CL_ArrowU64ConsU64ConsStringHashtableEqU64String:
	mov -16(%RBP), %RAX
	push %RAX
	push %RBP
	mov -64(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c528d
	mov -24(%RBP), %RAX
	push %RAX
	pushq $0
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -64(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -80(%RBP), %R15
	mov -96(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	mov -104(%RBP), %RAX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5281
	jmp uuid_00000000000c5283
uuid_00000000000c5281:
	movq $1, -88(%rbp)
uuid_00000000000c5283:
	mov -136(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000c5287:
	mov -88(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<24>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized24
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5288
	jmp uuid_00000000000c5289
uuid_00000000000c5288:
	mov -96(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -64(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -96(%rbp)
	mov -80(%RBP), %R15
	mov -96(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	mov -104(%RBP), %RAX
	movq %RAX, -128(%rbp)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5284
	jmp uuid_00000000000c5286
uuid_00000000000c5284:
	movq $1, -88(%rbp)
uuid_00000000000c5286:
	mov -144(%RBP),%RSP
	add $-144, %RSP
	add $8, %RSP
	jmp uuid_00000000000c5287
uuid_00000000000c5289:
	push %RBP
	mov -88(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000c528a
	jmp uuid_00000000000c528c
uuid_00000000000c528a:
	mov -112(%RBP), %RAX
	push %RAX
	movq -152(%rbp), %r15
	movq %r15, -48(%rbp)
	mov -152(%rbp), %r15
	mov %r15, -48(%rbp)
uuid_00000000000c528c:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000c528f
uuid_00000000000c528d:
uuid_00000000000c528f:
	mov -72(%RBP),%RSP
	add $-72, %RSP
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
mem_SB_is_SB_nonzero_CL_ArrowU64Sized24:
	pushq $0
	pushq $0
uuid_00000000000c5293:
	mov -40(%RBP), %RAX
	mov $24, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5294
	jmp uuid_00000000000c5295
uuid_00000000000c5294:
	push %RBP
	mov %RBP, %R15
	add $-24, %R15
	mov -40(%RBP), %R14
	add %R14, %R15
	mov 0(%R15), %R15B
	mov %R15B, %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	setne %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5290
	jmp uuid_00000000000c5292
uuid_00000000000c5290:
	movq $1, -48(%rbp)
uuid_00000000000c5292:
	mov -56(%RBP),%RSP
	add $-56, %RSP
	mov -40(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
	add $8, %RSP
	jmp uuid_00000000000c5293
uuid_00000000000c5295:
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
_DT_lookup_CL_ArrowTupleTypeTypeConsTupleTypeTypeConsStringBTreeEqTupleTypeTypeString:
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -104(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
uuid_00000000000c52ba:
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c52bb
	jmp uuid_00000000000c52bc
uuid_00000000000c52bb:
	mov -8(%RBP), %RAX
	push %RAX
	push %RBP
	mov -176(%RBP), %RAX
	mov -192(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c52ab
	jmp uuid_00000000000c52ad
uuid_00000000000c52ab:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -104(%rbp)
	mov -16(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c52a8
	jmp uuid_00000000000c52aa
uuid_00000000000c52a8:
	pushq -24(%RBP)
	pushq -32(%RBP)
	pushq -40(%RBP)
	pushq -48(%RBP)
	pushq -56(%RBP)
	pushq -64(%RBP)
	pushq -72(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	movb $0, -184(%rbp)
uuid_00000000000c52aa:
	mov -208(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000c52ad:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	push %RBP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c52b7
	jmp uuid_00000000000c52b9
uuid_00000000000c52b7:
	push %RBP
	mov -192(%RBP), %RAX
	mov -176(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c52b4
	push %RBP
	mov -80(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c52b1
	mov -80(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c52b3
uuid_00000000000c52b1:
	movb $0, -184(%rbp)
uuid_00000000000c52b3:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000c52b6
uuid_00000000000c52b4:
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c52ae
	mov -88(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c52b0
uuid_00000000000c52ae:
	movb $0, -184(%rbp)
uuid_00000000000c52b0:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c52b6:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c52b9:
	mov -216(%RBP),%RSP
	add $-232, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c52ba
uuid_00000000000c52bc:
	subq $56, %rsp
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $168, %rsp
	ret
close_CL_ArrowArray_QM_TContextCaseNumber2TContextCaseNumber2:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $120
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -120(%rbp), %r15
	movq %r15, 0(%r14)
	movq -112(%rbp), %r15
	movq %r15, 8(%r14)
	movq -104(%rbp), %r15
	movq %r15, 16(%r14)
	movq -96(%rbp), %r15
	movq %r15, 24(%r14)
	movq -88(%rbp), %r15
	movq %r15, 32(%r14)
	movq -80(%rbp), %r15
	movq %r15, 40(%r14)
	movq -72(%rbp), %r15
	movq %r15, 48(%r14)
	movq -64(%rbp), %r15
	movq %r15, 56(%r14)
	movq -56(%rbp), %r15
	movq %r15, 64(%r14)
	movq -48(%rbp), %r15
	movq %r15, 72(%r14)
	movq -40(%rbp), %r15
	movq %r15, 80(%r14)
	movq -32(%rbp), %r15
	movq %r15, 88(%r14)
	movq -24(%rbp), %r15
	movq %r15, 96(%r14)
	movq -16(%rbp), %r15
	movq %r15, 104(%r14)
	movq -8(%rbp), %r15
	movq %r15, 112(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $128, %rsp
	ret
_DT_nth_CL_ArrowTypeConsTypeConsU64ListType:
uuid_00000000000c52d1:
	mov -48(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c52d2
	jmp uuid_00000000000c52d3
uuid_00000000000c52d2:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c52c7
	jmp uuid_00000000000c52c9
uuid_00000000000c52c7:
	push %RBP
	mov -160(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c52c4
	jmp uuid_00000000000c52c6
uuid_00000000000c52c4:
	push %RBP
	jmp uuid_00000000000c52c1
	jmp uuid_00000000000c52c3
uuid_00000000000c52c1:
	movb $1, -176(%rbp)
uuid_00000000000c52c3:
	mov -240(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c52c6:
	mov -192(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c52c9:
	mov -184(%RBP),%RSP
	add $-240, %RSP
	mov -176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c52ce
	push %RBP
	jmp uuid_00000000000c52cb
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c52ca
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c52cd
uuid_00000000000c52cb:
uuid_00000000000c52cd:
	mov -248(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c52d0
uuid_00000000000c52ce:
	movq -232(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -224(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -216(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c52d0:
	mov -128(%RBP),%RSP
	add $-240, %RSP
	mov -48(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -48(%rbp)
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c52d1
uuid_00000000000c52d3:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c52da
	jmp uuid_00000000000c52dc
uuid_00000000000c52da:
	push %RBP
	jmp uuid_00000000000c52d7
	jmp uuid_00000000000c52d9
uuid_00000000000c52d7:
	push %RBP
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	jmp uuid_00000000000c52d4
	jmp uuid_00000000000c52d6
uuid_00000000000c52d4:
	movb $1, -176(%rbp)
uuid_00000000000c52d6:
	mov -200(%RBP),%RSP
	add $-224, %RSP
uuid_00000000000c52d9:
	mov -192(%RBP),%RSP
	add $-224, %RSP
uuid_00000000000c52dc:
	mov -184(%RBP),%RSP
	add $-224, %RSP
	mov -176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c52e1
	push %RBP
	jmp uuid_00000000000c52de
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c52dd
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c52e0
uuid_00000000000c52de:
uuid_00000000000c52e0:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000c52e3
uuid_00000000000c52e1:
	movq -224(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -216(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -56(%rbp)
uuid_00000000000c52e3:
	mov -128(%RBP),%RSP
	add $-224, %RSP
	subq $24, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
_DT_bind_CL_ArrowNilConsTupleTypeTypeConsStringArray_QM_BTreeEqTupleTypeTypeString:
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
#call function close : Arrow<BTreeEq<String,Tuple<Type,Type>>,Array<BTreeEq<String,Tuple<Type,Type>>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_BTreeEqTupleTypeTypeStringBTreeEqTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000c52f6:
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c52f7
	jmp uuid_00000000000c52f8
uuid_00000000000c52f7:
	mov -8(%rbp), %r15
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov -88(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c52f3
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c52f0
	mov -184(%RBP), %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c52f2
uuid_00000000000c52f0:
	mov -104(%rbp), %R8
	mov -8(%RBP), %R15
	mov %R8, 16(%R15)
	movb $0, -96(%rbp)
uuid_00000000000c52f2:
	mov -216(%RBP),%RSP
	add $-216, %RSP
	jmp uuid_00000000000c52f5
uuid_00000000000c52f3:
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c52ed
	mov -192(%RBP), %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c52ef
uuid_00000000000c52ed:
	mov -104(%rbp), %R8
	mov -8(%RBP), %R15
	mov %R8, 8(%R15)
	movb $0, -96(%rbp)
uuid_00000000000c52ef:
	mov -216(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000c52f5:
	mov -208(%RBP),%RSP
	add $-216, %RSP
	add $96, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c52f6
uuid_00000000000c52f8:
	mov %rbp, %rsp
	sub $80, %rsp
	ret
close_CL_ArrowArray_QM_BTreeEqTupleTypeTypeStringBTreeEqTupleTypeTypeString:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $96
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -96(%rbp), %r15
	movq %r15, 0(%r14)
	movq -88(%rbp), %r15
	movq %r15, 8(%r14)
	movq -80(%rbp), %r15
	movq %r15, 16(%r14)
	movq -72(%rbp), %r15
	movq %r15, 24(%r14)
	movq -64(%rbp), %r15
	movq %r15, 32(%r14)
	movq -56(%rbp), %r15
	movq %r15, 40(%r14)
	movq -48(%rbp), %r15
	movq %r15, 48(%r14)
	movq -40(%rbp), %r15
	movq %r15, 56(%r14)
	movq -32(%rbp), %r15
	movq %r15, 64(%r14)
	movq -24(%rbp), %r15
	movq %r15, 72(%r14)
	movq -16(%rbp), %r15
	movq %r15, 80(%r14)
	movq -8(%rbp), %r15
	movq %r15, 88(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $104, %rsp
	ret
_DT_lookup_CL_ArrowTupleTypeTypeConsTupleTypeTypeConsStringHashtableEqTupleTypeTypeString:
	mov -16(%RBP), %RAX
	push %RAX
	push %RBP
	mov -112(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5324
	mov -24(%RBP), %RAX
	push %RAX
	pushq $0
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -112(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -128(%RBP), %R15
	mov -144(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	mov -152(%RBP), %RAX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5318
	jmp uuid_00000000000c531a
uuid_00000000000c5318:
	movq $1, -136(%rbp)
uuid_00000000000c531a:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c531e:
	mov -136(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<72>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c531f
	jmp uuid_00000000000c5320
uuid_00000000000c531f:
	mov -144(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -112(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -144(%rbp)
	mov -128(%RBP), %R15
	mov -144(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	mov -152(%RBP), %RAX
	movq %RAX, -224(%rbp)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c531b
	jmp uuid_00000000000c531d
uuid_00000000000c531b:
	movq $1, -136(%rbp)
uuid_00000000000c531d:
	mov -240(%RBP),%RSP
	add $-240, %RSP
	add $8, %RSP
	jmp uuid_00000000000c531e
uuid_00000000000c5320:
	push %RBP
	mov -136(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5321
	jmp uuid_00000000000c5323
uuid_00000000000c5321:
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	movq -296(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -288(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -264(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -256(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -248(%rbp), %r15
	movq %r15, -48(%rbp)
uuid_00000000000c5323:
	mov -240(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000c5326
uuid_00000000000c5324:
uuid_00000000000c5326:
	mov -120(%RBP),%RSP
	add $-120, %RSP
	subq $56, %rsp
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $104, %rsp
	ret
mem_SB_is_SB_nonzero_CL_ArrowU64Sized72:
	pushq $0
	pushq $0
uuid_00000000000c532a:
	mov -88(%RBP), %RAX
	mov $72, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c532b
	jmp uuid_00000000000c532c
uuid_00000000000c532b:
	push %RBP
	mov %RBP, %R15
	add $-72, %R15
	mov -88(%RBP), %R14
	add %R14, %R15
	mov 0(%R15), %R15B
	mov %R15B, %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	setne %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5327
	jmp uuid_00000000000c5329
uuid_00000000000c5327:
	movq $1, -96(%rbp)
uuid_00000000000c5329:
	mov -104(%RBP),%RSP
	add $-104, %RSP
	mov -88(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -88(%rbp)
	add $8, %RSP
	jmp uuid_00000000000c532a
uuid_00000000000c532c:
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
_DT_bind_CL_ArrowHashtableEqTupleTypeTypeStringConsTupleTypeTypeConsStringHashtableEqTupleTypeTypeString:
	mov -8(%RBP), %RAX
	push %RAX
	mov -16(%RBP), %RAX
	push %RAX
	mov -24(%RBP), %RAX
	push %RAX
	push %RBP
	mov -112(%RBP), %RAX
	mov $3, %R14
	mul %R14
	mov %RAX, %RAX
	mov -120(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5357
	jmp uuid_00000000000c5359
uuid_00000000000c5357:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1000
	mov -112(%RBP), %RAX
	mov $30, %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov $72, %RAX
	mov -144(%RBP), %R14
	mul %R14
	push %RAX
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function memset : Arrow<Cons<Cons<Array<?,?>,U8>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $0
	pushq -152(%rbp)
	mov %RBX, %RBP
	call memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000c5354:
	mov -168(%RBP), %RAX
	mov -120(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5355
	jmp uuid_00000000000c5356
uuid_00000000000c5355:
	mov -128(%RBP), %R15
	mov -168(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	push %RBP
#call function mem-is-nonzero : Arrow<Sized<72>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5351
	jmp uuid_00000000000c5353
uuid_00000000000c5351:
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c534a
	jmp uuid_00000000000c534c
uuid_00000000000c534a:
	push %RBP
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	jmp uuid_00000000000c5347
	jmp uuid_00000000000c5349
uuid_00000000000c5347:
	push %RBP
	mov -336(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5344
	jmp uuid_00000000000c5346
uuid_00000000000c5344:
	movb $1, -408(%rbp)
uuid_00000000000c5346:
	mov -488(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000c5349:
	mov -424(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000c534c:
	mov -416(%RBP),%RSP
	add $-496, %RSP
	mov -408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c534e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c534d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5350
uuid_00000000000c534e:
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<String,Tuple<Type,Type>>,?>,U64>,String>,Tuple<Type,Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -144(%rbp)
	pushq -496(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsTupleTypeTypeConsStringConsU64Array_QM_TupleTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000c5350:
	pop %RAX
	mov -328(%RBP),%RSP
	add $-496, %RSP
	push %RAX
uuid_00000000000c5353:
	pop %RAX
	mov -248(%RBP),%RSP
	add $-496, %RSP
	mov -168(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -168(%rbp)
	add $72, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c5354
uuid_00000000000c5356:
	movq -160(%rbp), %r15
	movq %r15, -128(%rbp)
	mov -160(%rbp), %r15
	mov %r15, -128(%rbp)
	movq -144(%rbp), %r15
	movq %r15, -120(%rbp)
	mov -144(%rbp), %r15
	mov %r15, -120(%rbp)
uuid_00000000000c5359:
	mov -136(%RBP),%RSP
	add $-168, %RSP
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<String,Tuple<Type,Type>>,?>,U64>,String>,Tuple<Type,Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsTupleTypeTypeConsStringConsU64Array_QM_TupleTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -176(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000c535a
	mov -112(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -112(%rbp)
	jmp uuid_00000000000c535c
uuid_00000000000c535a:
uuid_00000000000c535c:
	mov -184(%RBP),%RSP
	add $-184, %RSP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq $0
	subq $32, %rsp
	pushq 32(%rsp)
	pushq 48(%rsp)
	pushq 64(%rsp)
	pushq 80(%rsp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $104, %rsp
	ret
_DT_bind_SB_eq_CL_ArrowU64ConsTupleTypeTypeConsStringConsU64Array_QM_TupleTupleTypeTypeString:
	pushq $0
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -8(%RBP), %R15
	mov -104(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	mov -112(%RBP), %RAX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5366
	jmp uuid_00000000000c5368
uuid_00000000000c5366:
	movq $1, -96(%rbp)
uuid_00000000000c5368:
	mov -192(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000c536c:
	mov -96(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<72>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c536d
	jmp uuid_00000000000c536e
uuid_00000000000c536d:
	mov -104(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -104(%rbp)
	mov -8(%RBP), %R15
	mov -104(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	mov -112(%RBP), %RAX
	movq %RAX, -184(%rbp)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5369
	jmp uuid_00000000000c536b
uuid_00000000000c5369:
	movq $1, -96(%rbp)
uuid_00000000000c536b:
	mov -200(%RBP),%RSP
	add $-200, %RSP
	add $8, %RSP
	jmp uuid_00000000000c536c
uuid_00000000000c536e:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	mov -8(%RBP), %R15
	mov -104(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	mov -264(%RBP), %RAX
	mov %RAX, 0(%R15)
	mov -256(%RBP), %RAX
	mov %RAX, 8(%R15)
	mov -248(%RBP), %RAX
	mov %RAX, 16(%R15)
	mov -240(%RBP), %RAX
	mov %RAX, 24(%R15)
	mov -232(%RBP), %RAX
	mov %RAX, 32(%R15)
	mov -224(%RBP), %RAX
	mov %RAX, 40(%R15)
	mov -216(%RBP), %RAX
	mov %RAX, 48(%R15)
	mov -208(%RBP), %RAX
	mov %RAX, 56(%R15)
	mov -200(%RBP), %RAX
	mov %RAX, 64(%R15)
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
_DT_lookup_CL_ArrowTypeConsTypeConsStringHashtableEqTypeString:
	mov -16(%RBP), %RAX
	push %RAX
	push %RBP
	mov -80(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5387
	mov -24(%RBP), %RAX
	push %RAX
	pushq $0
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -80(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -96(%RBP), %R15
	mov -112(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	mov -120(%RBP), %RAX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c537b
	jmp uuid_00000000000c537d
uuid_00000000000c537b:
	movq $1, -104(%rbp)
uuid_00000000000c537d:
	mov -168(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c5381:
	mov -104(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<40>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized40
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5382
	jmp uuid_00000000000c5383
uuid_00000000000c5382:
	mov -112(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -80(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -112(%rbp)
	mov -96(%RBP), %R15
	mov -112(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	mov -120(%RBP), %RAX
	movq %RAX, -160(%rbp)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c537e
	jmp uuid_00000000000c5380
uuid_00000000000c537e:
	movq $1, -104(%rbp)
uuid_00000000000c5380:
	mov -176(%RBP),%RSP
	add $-176, %RSP
	add $8, %RSP
	jmp uuid_00000000000c5381
uuid_00000000000c5383:
	push %RBP
	mov -104(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5384
	jmp uuid_00000000000c5386
uuid_00000000000c5384:
	pushq -128(%RBP)
	pushq -136(%RBP)
	pushq -144(%RBP)
	movq -200(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -192(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -48(%rbp)
uuid_00000000000c5386:
	mov -176(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000c5389
uuid_00000000000c5387:
uuid_00000000000c5389:
	mov -88(%RBP),%RSP
	add $-88, %RSP
	subq $24, %rsp
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $72, %rsp
	ret
mem_SB_is_SB_nonzero_CL_ArrowU64Sized40:
	pushq $0
	pushq $0
uuid_00000000000c538d:
	mov -56(%RBP), %RAX
	mov $40, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c538e
	jmp uuid_00000000000c538f
uuid_00000000000c538e:
	push %RBP
	mov %RBP, %R15
	add $-40, %R15
	mov -56(%RBP), %R14
	add %R14, %R15
	mov 0(%R15), %R15B
	mov %R15B, %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	setne %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c538a
	jmp uuid_00000000000c538c
uuid_00000000000c538a:
	movq $1, -64(%rbp)
uuid_00000000000c538c:
	mov -72(%RBP),%RSP
	add $-72, %RSP
	mov -56(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
	add $8, %RSP
	jmp uuid_00000000000c538d
uuid_00000000000c538f:
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
_DT_bind_CL_ArrowHashtableEqU64StringConsU64ConsStringHashtableEqU64String:
	mov -8(%RBP), %RAX
	push %RAX
	mov -16(%RBP), %RAX
	push %RAX
	mov -24(%RBP), %RAX
	push %RAX
	push %RBP
	mov -64(%RBP), %RAX
	mov $3, %R14
	mul %R14
	mov %RAX, %RAX
	mov -72(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c53b0
	jmp uuid_00000000000c53b2
uuid_00000000000c53b0:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1000
	mov -64(%RBP), %RAX
	mov $30, %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov $24, %RAX
	mov -96(%RBP), %R14
	mul %R14
	push %RAX
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -104(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function memset : Arrow<Cons<Cons<Array<?,?>,U8>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $0
	pushq -104(%rbp)
	mov %RBX, %RBP
	call memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000c53ad:
	mov -120(%RBP), %RAX
	mov -72(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c53ae
	jmp uuid_00000000000c53af
uuid_00000000000c53ae:
	mov -80(%RBP), %R15
	mov -120(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	push %RBP
#call function mem-is-nonzero : Arrow<Sized<24>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized24
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c53aa
	jmp uuid_00000000000c53ac
uuid_00000000000c53aa:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c53a4
	jmp uuid_00000000000c53a6
uuid_00000000000c53a4:
	push %RBP
	mov -200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c53a1
	jmp uuid_00000000000c53a3
uuid_00000000000c53a1:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c539e
	jmp uuid_00000000000c53a0
uuid_00000000000c539e:
	movb $1, -216(%rbp)
uuid_00000000000c53a0:
	mov -248(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000c53a3:
	mov -232(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000c53a6:
	mov -224(%RBP),%RSP
	add $-256, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c53a7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c534d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c53a9
uuid_00000000000c53a7:
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<String,U64>,?>,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -96(%rbp)
	pushq -256(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsU64ConsStringConsU64Array_QM_TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000c53a9:
	pop %RAX
	mov -184(%RBP),%RSP
	add $-256, %RSP
	push %RAX
uuid_00000000000c53ac:
	pop %RAX
	mov -152(%RBP),%RSP
	add $-256, %RSP
	mov -120(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -120(%rbp)
	add $24, %rsp
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c53ad
uuid_00000000000c53af:
	movq -112(%rbp), %r15
	movq %r15, -80(%rbp)
	mov -112(%rbp), %r15
	mov %r15, -80(%rbp)
	movq -96(%rbp), %r15
	movq %r15, -72(%rbp)
	mov -96(%rbp), %r15
	mov %r15, -72(%rbp)
uuid_00000000000c53b2:
	mov -88(%RBP),%RSP
	add $-120, %RSP
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<String,U64>,?>,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsU64ConsStringConsU64Array_QM_TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -128(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000c53b3
	mov -64(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -64(%rbp)
	jmp uuid_00000000000c53b5
uuid_00000000000c53b3:
uuid_00000000000c53b5:
	mov -136(%RBP),%RSP
	add $-136, %RSP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	subq $32, %rsp
	pushq 32(%rsp)
	pushq 48(%rsp)
	pushq 64(%rsp)
	pushq 80(%rsp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
_DT_bind_SB_eq_CL_ArrowU64ConsU64ConsStringConsU64Array_QM_TupleU64String:
	pushq $0
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -8(%RBP), %R15
	mov -56(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	mov -64(%RBP), %RAX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c53b8
	jmp uuid_00000000000c53ba
uuid_00000000000c53b8:
	movq $1, -48(%rbp)
uuid_00000000000c53ba:
	mov -96(%RBP),%RSP
	add $-96, %RSP
uuid_00000000000c53be:
	mov -48(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<24>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized24
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c53bf
	jmp uuid_00000000000c53c0
uuid_00000000000c53bf:
	mov -56(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -56(%rbp)
	mov -8(%RBP), %R15
	mov -56(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	mov -64(%RBP), %RAX
	movq %RAX, -88(%rbp)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c53bb
	jmp uuid_00000000000c53bd
uuid_00000000000c53bb:
	movq $1, -48(%rbp)
uuid_00000000000c53bd:
	mov -104(%RBP),%RSP
	add $-104, %RSP
	add $8, %RSP
	jmp uuid_00000000000c53be
uuid_00000000000c53c0:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	mov -8(%RBP), %R15
	mov -56(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	mov -120(%RBP), %RAX
	mov %RAX, 0(%R15)
	mov -112(%RBP), %RAX
	mov %RAX, 8(%R15)
	mov -104(%RBP), %RAX
	mov %RAX, 16(%R15)
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
_DT_bind_CL_ArrowHashtableEqTypeStringConsTypeConsStringHashtableEqTypeString:
	mov -8(%RBP), %RAX
	push %RAX
	mov -16(%RBP), %RAX
	push %RAX
	mov -24(%RBP), %RAX
	push %RAX
	push %RBP
	mov -80(%RBP), %RAX
	mov $3, %R14
	mul %R14
	mov %RAX, %RAX
	mov -88(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c53e1
	jmp uuid_00000000000c53e3
uuid_00000000000c53e1:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1000
	mov -80(%RBP), %RAX
	mov $30, %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov $40, %RAX
	mov -112(%RBP), %R14
	mul %R14
	push %RAX
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function memset : Arrow<Cons<Cons<Array<?,?>,U8>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $0
	pushq -120(%rbp)
	mov %RBX, %RBP
	call memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000c53de:
	mov -136(%RBP), %RAX
	mov -88(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c53df
	jmp uuid_00000000000c53e0
uuid_00000000000c53df:
	mov -96(%RBP), %R15
	mov -136(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	push %RBP
#call function mem-is-nonzero : Arrow<Sized<40>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized40
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c53db
	jmp uuid_00000000000c53dd
uuid_00000000000c53db:
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c53d5
	jmp uuid_00000000000c53d7
uuid_00000000000c53d5:
	push %RBP
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	jmp uuid_00000000000c53d2
	jmp uuid_00000000000c53d4
uuid_00000000000c53d2:
	push %RBP
	mov -240(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c53cf
	jmp uuid_00000000000c53d1
uuid_00000000000c53cf:
	movb $1, -280(%rbp)
uuid_00000000000c53d1:
	mov -328(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c53d4:
	mov -296(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c53d7:
	mov -288(%RBP),%RSP
	add $-336, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c53d8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c534d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c53da
uuid_00000000000c53d8:
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<String,Type>,?>,U64>,String>,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -112(%rbp)
	pushq -336(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsTypeConsStringConsU64Array_QM_TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000c53da:
	pop %RAX
	mov -232(%RBP),%RSP
	add $-336, %RSP
	push %RAX
uuid_00000000000c53dd:
	pop %RAX
	mov -184(%RBP),%RSP
	add $-336, %RSP
	mov -136(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -136(%rbp)
	add $40, %rsp
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c53de
uuid_00000000000c53e0:
	movq -128(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -128(%rbp), %r15
	mov %r15, -96(%rbp)
	movq -112(%rbp), %r15
	movq %r15, -88(%rbp)
	mov -112(%rbp), %r15
	mov %r15, -88(%rbp)
uuid_00000000000c53e3:
	mov -104(%RBP),%RSP
	add $-136, %RSP
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<String,Type>,?>,U64>,String>,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsTypeConsStringConsU64Array_QM_TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -144(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000c53e4
	mov -80(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -80(%rbp)
	jmp uuid_00000000000c53e6
uuid_00000000000c53e4:
uuid_00000000000c53e6:
	mov -152(%RBP),%RSP
	add $-152, %RSP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	subq $32, %rsp
	pushq 32(%rsp)
	pushq 48(%rsp)
	pushq 64(%rsp)
	pushq 80(%rsp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $72, %rsp
	ret
_DT_bind_SB_eq_CL_ArrowU64ConsTypeConsStringConsU64Array_QM_TupleTypeString:
	pushq $0
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -8(%RBP), %R15
	mov -72(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	mov -80(%RBP), %RAX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c53e9
	jmp uuid_00000000000c53eb
uuid_00000000000c53e9:
	movq $1, -64(%rbp)
uuid_00000000000c53eb:
	mov -128(%RBP),%RSP
	add $-128, %RSP
uuid_00000000000c53ef:
	mov -64(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<40>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized40
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c53f0
	jmp uuid_00000000000c53f1
uuid_00000000000c53f0:
	mov -72(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -72(%rbp)
	mov -8(%RBP), %R15
	mov -72(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	mov -80(%RBP), %RAX
	movq %RAX, -120(%rbp)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c53ec
	jmp uuid_00000000000c53ee
uuid_00000000000c53ec:
	movq $1, -64(%rbp)
uuid_00000000000c53ee:
	mov -136(%RBP),%RSP
	add $-136, %RSP
	add $8, %RSP
	jmp uuid_00000000000c53ef
uuid_00000000000c53f1:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	mov -8(%RBP), %R15
	mov -72(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	mov -168(%RBP), %RAX
	mov %RAX, 0(%R15)
	mov -160(%RBP), %RAX
	mov %RAX, 8(%R15)
	mov -152(%RBP), %RAX
	mov %RAX, 16(%R15)
	mov -144(%RBP), %RAX
	mov %RAX, 24(%R15)
	mov -136(%RBP), %RAX
	mov %RAX, 32(%R15)
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
_DT_lookup_CL_ArrowU64ConsU64ConsStringBTreeEqU64String:
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
uuid_00000000000c540c:
	mov -88(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c540d
	jmp uuid_00000000000c540e
uuid_00000000000c540d:
	mov -8(%RBP), %RAX
	push %RAX
	push %RBP
	mov -80(%RBP), %RAX
	mov -96(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c53fd
	jmp uuid_00000000000c53ff
uuid_00000000000c53fd:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	mov -16(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c53fa
	jmp uuid_00000000000c53fc
uuid_00000000000c53fa:
	mov -24(%RBP), %RAX
	movq %RAX, -64(%rbp)
	movb $0, -88(%rbp)
uuid_00000000000c53fc:
	mov -112(%RBP),%RSP
	add $-112, %RSP
uuid_00000000000c53ff:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	push %RBP
	mov -88(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5409
	jmp uuid_00000000000c540b
uuid_00000000000c5409:
	push %RBP
	mov -96(%RBP), %RAX
	mov -80(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5406
	push %RBP
	mov -32(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5403
	mov -32(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c5405
uuid_00000000000c5403:
	movb $0, -88(%rbp)
uuid_00000000000c5405:
	mov -136(%RBP),%RSP
	add $-136, %RSP
	jmp uuid_00000000000c5408
uuid_00000000000c5406:
	push %RBP
	mov -40(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5400
	mov -40(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c5402
uuid_00000000000c5400:
	movb $0, -88(%rbp)
uuid_00000000000c5402:
	mov -136(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000c5408:
	mov -128(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000c540b:
	mov -120(%RBP),%RSP
	add $-136, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c540c
uuid_00000000000c540e:
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $72, %rsp
	ret
_DT_bind_CL_ArrowNilConsU64ConsStringArray_QM_BTreeEqU64String:
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
#call function close : Arrow<BTreeEq<String,U64>,Array<BTreeEq<String,U64>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_BTreeEqU64StringBTreeEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000c541a:
	mov -48(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c541b
	jmp uuid_00000000000c541c
uuid_00000000000c541b:
	mov -8(%rbp), %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	push %RBP
	mov -64(%RBP), %RAX
	mov %RAX, %RAX
	mov -40(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5417
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5414
	mov -88(%RBP), %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c5416
uuid_00000000000c5414:
	mov -56(%rbp), %R8
	mov -8(%RBP), %R15
	mov %R8, 16(%R15)
	movb $0, -48(%rbp)
uuid_00000000000c5416:
	mov -120(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000c5419
uuid_00000000000c5417:
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5411
	mov -96(%RBP), %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c5413
uuid_00000000000c5411:
	mov -56(%rbp), %R8
	mov -8(%RBP), %R15
	mov %R8, 8(%R15)
	movb $0, -48(%rbp)
uuid_00000000000c5413:
	mov -120(%RBP),%RSP
	add $-120, %RSP
uuid_00000000000c5419:
	mov -112(%RBP),%RSP
	add $-120, %RSP
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c541a
uuid_00000000000c541c:
	mov %rbp, %rsp
	sub $32, %rsp
	ret
close_CL_ArrowArray_QM_BTreeEqU64StringBTreeEqU64String:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $48
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -48(%rbp), %r15
	movq %r15, 0(%r14)
	movq -40(%rbp), %r15
	movq %r15, 8(%r14)
	movq -32(%rbp), %r15
	movq %r15, 16(%r14)
	movq -24(%rbp), %r15
	movq %r15, 24(%r14)
	movq -16(%rbp), %r15
	movq %r15, 32(%r14)
	movq -8(%rbp), %r15
	movq %r15, 40(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
_DT_lookup_CL_ArrowStringConsStringConsStringHashtableEqStringString:
	mov -16(%RBP), %RAX
	push %RAX
	push %RBP
	mov -64(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c543b
	mov -24(%RBP), %RAX
	push %RAX
	pushq $0
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -64(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -80(%RBP), %R15
	mov -96(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	mov -104(%RBP), %RAX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c542f
	jmp uuid_00000000000c5431
uuid_00000000000c542f:
	movq $1, -88(%rbp)
uuid_00000000000c5431:
	mov -136(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000c5435:
	mov -88(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<24>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized24
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5436
	jmp uuid_00000000000c5437
uuid_00000000000c5436:
	mov -96(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -64(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -96(%rbp)
	mov -80(%RBP), %R15
	mov -96(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	mov -104(%RBP), %RAX
	movq %RAX, -128(%rbp)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5432
	jmp uuid_00000000000c5434
uuid_00000000000c5432:
	movq $1, -88(%rbp)
uuid_00000000000c5434:
	mov -144(%RBP),%RSP
	add $-144, %RSP
	add $8, %RSP
	jmp uuid_00000000000c5435
uuid_00000000000c5437:
	push %RBP
	mov -88(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5438
	jmp uuid_00000000000c543a
uuid_00000000000c5438:
	mov -112(%RBP), %RAX
	push %RAX
	movq -152(%rbp), %r15
	movq %r15, -48(%rbp)
	mov -152(%rbp), %r15
	mov %r15, -48(%rbp)
uuid_00000000000c543a:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000c543d
uuid_00000000000c543b:
uuid_00000000000c543d:
	mov -72(%RBP),%RSP
	add $-72, %RSP
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
_DT_bind_CL_ArrowHashtableEqStringStringConsStringConsStringHashtableEqStringString:
	mov -8(%RBP), %RAX
	push %RAX
	mov -16(%RBP), %RAX
	push %RAX
	mov -24(%RBP), %RAX
	push %RAX
	push %RBP
	mov -64(%RBP), %RAX
	mov $3, %R14
	mul %R14
	mov %RAX, %RAX
	mov -72(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c545e
	jmp uuid_00000000000c5460
uuid_00000000000c545e:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1000
	mov -64(%RBP), %RAX
	mov $30, %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov $24, %RAX
	mov -96(%RBP), %R14
	mul %R14
	push %RAX
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -104(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function memset : Arrow<Cons<Cons<Array<?,?>,U8>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $0
	pushq -104(%rbp)
	mov %RBX, %RBP
	call memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000c545b:
	mov -120(%RBP), %RAX
	mov -72(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c545c
	jmp uuid_00000000000c545d
uuid_00000000000c545c:
	mov -80(%RBP), %R15
	mov -120(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	push %RBP
#call function mem-is-nonzero : Arrow<Sized<24>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized24
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5458
	jmp uuid_00000000000c545a
uuid_00000000000c5458:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5452
	jmp uuid_00000000000c5454
uuid_00000000000c5452:
	push %RBP
	mov -200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c544f
	jmp uuid_00000000000c5451
uuid_00000000000c544f:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c544c
	jmp uuid_00000000000c544e
uuid_00000000000c544c:
	movb $1, -216(%rbp)
uuid_00000000000c544e:
	mov -248(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000c5451:
	mov -232(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000c5454:
	mov -224(%RBP),%RSP
	add $-256, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5455
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c534d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5457
uuid_00000000000c5455:
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<String,String>,?>,U64>,String>,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -96(%rbp)
	pushq -256(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsStringConsStringConsU64Array_QM_TupleStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000c5457:
	pop %RAX
	mov -184(%RBP),%RSP
	add $-256, %RSP
	push %RAX
uuid_00000000000c545a:
	pop %RAX
	mov -152(%RBP),%RSP
	add $-256, %RSP
	mov -120(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -120(%rbp)
	add $24, %rsp
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c545b
uuid_00000000000c545d:
	movq -112(%rbp), %r15
	movq %r15, -80(%rbp)
	mov -112(%rbp), %r15
	mov %r15, -80(%rbp)
	movq -96(%rbp), %r15
	movq %r15, -72(%rbp)
	mov -96(%rbp), %r15
	mov %r15, -72(%rbp)
uuid_00000000000c5460:
	mov -88(%RBP),%RSP
	add $-120, %RSP
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<String,String>,?>,U64>,String>,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsStringConsStringConsU64Array_QM_TupleStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -128(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5461
	mov -64(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -64(%rbp)
	jmp uuid_00000000000c5463
uuid_00000000000c5461:
uuid_00000000000c5463:
	mov -136(%RBP),%RSP
	add $-136, %RSP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	subq $32, %rsp
	pushq 32(%rsp)
	pushq 48(%rsp)
	pushq 64(%rsp)
	pushq 80(%rsp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
_DT_bind_SB_eq_CL_ArrowU64ConsStringConsStringConsU64Array_QM_TupleStringString:
	pushq $0
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -8(%RBP), %R15
	mov -56(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	mov -64(%RBP), %RAX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5466
	jmp uuid_00000000000c5468
uuid_00000000000c5466:
	movq $1, -48(%rbp)
uuid_00000000000c5468:
	mov -96(%RBP),%RSP
	add $-96, %RSP
uuid_00000000000c546c:
	mov -48(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<24>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized24
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c546d
	jmp uuid_00000000000c546e
uuid_00000000000c546d:
	mov -56(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -56(%rbp)
	mov -8(%RBP), %R15
	mov -56(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	mov -64(%RBP), %RAX
	movq %RAX, -88(%rbp)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5469
	jmp uuid_00000000000c546b
uuid_00000000000c5469:
	movq $1, -48(%rbp)
uuid_00000000000c546b:
	mov -104(%RBP),%RSP
	add $-104, %RSP
	add $8, %RSP
	jmp uuid_00000000000c546c
uuid_00000000000c546e:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	mov -8(%RBP), %R15
	mov -56(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	mov -120(%RBP), %RAX
	mov %RAX, 0(%R15)
	mov -112(%RBP), %RAX
	mov %RAX, 8(%R15)
	mov -104(%RBP), %RAX
	mov %RAX, 16(%R15)
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
_DT_lookup_CL_ArrowU64ConsU64ConsTupleTypeStringBTreeEqU64TupleTypeString:
#call function deep-hash : Arrow<Tuple<String,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
uuid_00000000000c5495:
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5496
	jmp uuid_00000000000c5497
uuid_00000000000c5496:
	mov -8(%RBP), %RAX
	push %RAX
	push %RBP
	mov -144(%RBP), %RAX
	mov -160(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5486
	jmp uuid_00000000000c5488
uuid_00000000000c5486:
	push %RBP
#call function == : Arrow<Cons<Tuple<String,Type>,Tuple<String,Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -16(%RBP)
	pushq -24(%RBP)
	pushq -32(%RBP)
	pushq -40(%RBP)
	pushq -48(%RBP)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleTypeStringTupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5483
	jmp uuid_00000000000c5485
uuid_00000000000c5483:
	mov -56(%RBP), %RAX
	movq %RAX, -128(%rbp)
	movb $0, -152(%rbp)
uuid_00000000000c5485:
	mov -176(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c5488:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	push %RBP
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5492
	jmp uuid_00000000000c5494
uuid_00000000000c5492:
	push %RBP
	mov -160(%RBP), %RAX
	mov -144(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c548f
	push %RBP
	mov -64(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c548c
	mov -64(%RBP), %RAX
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c548e
uuid_00000000000c548c:
	movb $0, -152(%rbp)
uuid_00000000000c548e:
	mov -200(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000c5491
uuid_00000000000c548f:
	push %RBP
	mov -72(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5489
	mov -72(%RBP), %RAX
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c548b
uuid_00000000000c5489:
	movb $0, -152(%rbp)
uuid_00000000000c548b:
	mov -200(%RBP),%RSP
	add $-200, %RSP
uuid_00000000000c5491:
	mov -192(%RBP),%RSP
	add $-200, %RSP
uuid_00000000000c5494:
	mov -184(%RBP),%RSP
	add $-200, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c5495
uuid_00000000000c5497:
	mov -128(%rbp), %RAX
	mov %rbp, %rsp
	sub $136, %rsp
	ret
_EQ__EQ__CL_ArrowU64ConsTupleTypeStringTupleTypeString:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c54ba
	jmp uuid_00000000000c54bc
uuid_00000000000c54ba:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c54a8
	jmp uuid_00000000000c54aa
uuid_00000000000c54a8:
	push %RBP
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	jmp uuid_00000000000c54a5
	jmp uuid_00000000000c54a7
uuid_00000000000c54a5:
	push %RBP
	mov -312(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c54a2
	jmp uuid_00000000000c54a4
uuid_00000000000c54a2:
	movb $1, -352(%rbp)
uuid_00000000000c54a4:
	mov -400(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000c54a7:
	mov -368(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000c54aa:
	mov -360(%RBP),%RSP
	add $-408, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c54b7
	jmp uuid_00000000000c54b9
uuid_00000000000c54b7:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c54b1
	jmp uuid_00000000000c54b3
uuid_00000000000c54b1:
	push %RBP
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	jmp uuid_00000000000c54ae
	jmp uuid_00000000000c54b0
uuid_00000000000c54ae:
	push %RBP
	mov -424(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c54ab
	jmp uuid_00000000000c54ad
uuid_00000000000c54ab:
	movb $1, -464(%rbp)
uuid_00000000000c54ad:
	mov -512(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c54b0:
	mov -480(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c54b3:
	mov -472(%RBP),%RSP
	add $-520, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c54b4
	jmp uuid_00000000000c54b6
uuid_00000000000c54b4:
	movb $1, -288(%rbp)
uuid_00000000000c54b6:
	mov -416(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c54b9:
	mov -304(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c54bc:
	mov -296(%RBP),%RSP
	add $-520, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c54c4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c54c3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c54c6
uuid_00000000000c54c4:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -520(%rbp)
	pushq -408(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c54c0
	jmp uuid_00000000000c54c2
uuid_00000000000c54c0:
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c54bd
	jmp uuid_00000000000c54bf
uuid_00000000000c54bd:
	movq $1, -96(%rbp)
uuid_00000000000c54bf:
	mov -536(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c54c2:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c54c6:
	mov -192(%RBP),%RSP
	add $-536, %RSP
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
deep_SB_hash_CL_ArrowU64TupleTypeString:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c54d1
	jmp uuid_00000000000c54d3
uuid_00000000000c54d1:
	push %RBP
	pushq -120(%RBP)
	pushq -128(%RBP)
	pushq -136(%RBP)
	jmp uuid_00000000000c54ce
	jmp uuid_00000000000c54d0
uuid_00000000000c54ce:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c54cb
	jmp uuid_00000000000c54cd
uuid_00000000000c54cb:
	movb $1, -152(%rbp)
uuid_00000000000c54cd:
	mov -200(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000c54d0:
	mov -168(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000c54d3:
	mov -160(%RBP),%RSP
	add $-208, %RSP
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c54d5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c54d4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c54d7
uuid_00000000000c54d5:
#call function deep-hash : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
uuid_00000000000c54d7:
	mov -104(%RBP),%RSP
	add $-208, %RSP
	mov -56(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
_DT_bind_CL_ArrowNilConsU64ConsTupleTypeStringArray_QM_BTreeEqU64TupleTypeString:
#call function deep-hash : Arrow<Tuple<String,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
#call function close : Arrow<BTreeEq<Tuple<String,Type>,U64>,Array<BTreeEq<Tuple<String,Type>,U64>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_BTreeEqU64TupleTypeStringBTreeEqU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000c54ec:
	mov -80(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c54ed
	jmp uuid_00000000000c54ee
uuid_00000000000c54ed:
	mov -8(%rbp), %r15
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov -72(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c54e9
	push %RBP
	mov -152(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c54e6
	mov -152(%RBP), %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c54e8
uuid_00000000000c54e6:
	mov -88(%rbp), %R8
	mov -8(%RBP), %R15
	mov %R8, 16(%R15)
	movb $0, -80(%rbp)
uuid_00000000000c54e8:
	mov -184(%RBP),%RSP
	add $-184, %RSP
	jmp uuid_00000000000c54eb
uuid_00000000000c54e9:
	push %RBP
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c54e3
	mov -160(%RBP), %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c54e5
uuid_00000000000c54e3:
	mov -88(%rbp), %R8
	mov -8(%RBP), %R15
	mov %R8, 8(%R15)
	movb $0, -80(%rbp)
uuid_00000000000c54e5:
	mov -184(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000c54eb:
	mov -176(%RBP),%RSP
	add $-184, %RSP
	add $80, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c54ec
uuid_00000000000c54ee:
	mov %rbp, %rsp
	sub $64, %rsp
	ret
close_CL_ArrowArray_QM_BTreeEqU64TupleTypeStringBTreeEqU64TupleTypeString:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $80
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -80(%rbp), %r15
	movq %r15, 0(%r14)
	movq -72(%rbp), %r15
	movq %r15, 8(%r14)
	movq -64(%rbp), %r15
	movq %r15, 16(%r14)
	movq -56(%rbp), %r15
	movq %r15, 24(%r14)
	movq -48(%rbp), %r15
	movq %r15, 32(%r14)
	movq -40(%rbp), %r15
	movq %r15, 40(%r14)
	movq -32(%rbp), %r15
	movq %r15, 48(%r14)
	movq -24(%rbp), %r15
	movq %r15, 56(%r14)
	movq -16(%rbp), %r15
	movq %r15, 64(%r14)
	movq -8(%rbp), %r15
	movq %r15, 72(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
_DT_lookup_CL_ArrowU64ConsU64ConsTupleU64TupleU64StringBTreeEqU64TupleU64TupleU64String:
#call function deep-hash : Arrow<Tuple<Tuple<String,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64TupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
uuid_00000000000c552c:
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c552d
	jmp uuid_00000000000c552e
uuid_00000000000c552d:
	mov -8(%RBP), %RAX
	push %RAX
	push %RBP
	mov -144(%RBP), %RAX
	mov -160(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c551d
	jmp uuid_00000000000c551f
uuid_00000000000c551d:
	push %RBP
#call function == : Arrow<Cons<Tuple<Tuple<String,U64>,U64>,Tuple<Tuple<String,U64>,U64>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -16(%RBP)
	pushq -24(%RBP)
	pushq -32(%RBP)
	pushq -40(%RBP)
	pushq -48(%RBP)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleU64TupleU64StringTupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c551a
	jmp uuid_00000000000c551c
uuid_00000000000c551a:
	mov -56(%RBP), %RAX
	movq %RAX, -128(%rbp)
	movb $0, -152(%rbp)
uuid_00000000000c551c:
	mov -176(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c551f:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	push %RBP
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5529
	jmp uuid_00000000000c552b
uuid_00000000000c5529:
	push %RBP
	mov -160(%RBP), %RAX
	mov -144(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5526
	push %RBP
	mov -64(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5523
	mov -64(%RBP), %RAX
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c5525
uuid_00000000000c5523:
	movb $0, -152(%rbp)
uuid_00000000000c5525:
	mov -200(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000c5528
uuid_00000000000c5526:
	push %RBP
	mov -72(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5520
	mov -72(%RBP), %RAX
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c5522
uuid_00000000000c5520:
	movb $0, -152(%rbp)
uuid_00000000000c5522:
	mov -200(%RBP),%RSP
	add $-200, %RSP
uuid_00000000000c5528:
	mov -192(%RBP),%RSP
	add $-200, %RSP
uuid_00000000000c552b:
	mov -184(%RBP),%RSP
	add $-200, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c552c
uuid_00000000000c552e:
	mov -128(%rbp), %RAX
	mov %rbp, %rsp
	sub $136, %rsp
	ret
_EQ__EQ__CL_ArrowU64ConsTupleU64TupleU64StringTupleU64TupleU64String:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c555a
	jmp uuid_00000000000c555c
uuid_00000000000c555a:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5548
	jmp uuid_00000000000c554a
uuid_00000000000c5548:
	push %RBP
	mov -336(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5545
	jmp uuid_00000000000c5547
uuid_00000000000c5545:
	push %RBP
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	jmp uuid_00000000000c5542
	jmp uuid_00000000000c5544
uuid_00000000000c5542:
	movb $1, -352(%rbp)
uuid_00000000000c5544:
	mov -384(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000c5547:
	mov -368(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000c554a:
	mov -360(%RBP),%RSP
	add $-408, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5557
	jmp uuid_00000000000c5559
uuid_00000000000c5557:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5551
	jmp uuid_00000000000c5553
uuid_00000000000c5551:
	push %RBP
	mov -448(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c554e
	jmp uuid_00000000000c5550
uuid_00000000000c554e:
	push %RBP
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	jmp uuid_00000000000c554b
	jmp uuid_00000000000c554d
uuid_00000000000c554b:
	movb $1, -464(%rbp)
uuid_00000000000c554d:
	mov -496(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c5550:
	mov -480(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c5553:
	mov -472(%RBP),%RSP
	add $-520, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5554
	jmp uuid_00000000000c5556
uuid_00000000000c5554:
	movb $1, -288(%rbp)
uuid_00000000000c5556:
	mov -416(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c5559:
	mov -304(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c555c:
	mov -296(%RBP),%RSP
	add $-520, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5563
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c54c3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5565
uuid_00000000000c5563:
	push %RBP
#call function == : Arrow<Cons<Tuple<String,U64>,Tuple<String,U64>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleU64StringTupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5560
	jmp uuid_00000000000c5562
uuid_00000000000c5560:
	push %RBP
	mov -488(%RBP), %RAX
	mov -376(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c555d
	jmp uuid_00000000000c555f
uuid_00000000000c555d:
	movq $1, -96(%rbp)
uuid_00000000000c555f:
	mov -536(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c5562:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c5565:
	mov -192(%RBP),%RSP
	add $-536, %RSP
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
_EQ__EQ__CL_ArrowU64ConsTupleU64StringTupleU64String:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5588
	jmp uuid_00000000000c558a
uuid_00000000000c5588:
	push %RBP
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5576
	jmp uuid_00000000000c5578
uuid_00000000000c5576:
	push %RBP
	mov -224(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5573
	jmp uuid_00000000000c5575
uuid_00000000000c5573:
	push %RBP
	mov -216(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5570
	jmp uuid_00000000000c5572
uuid_00000000000c5570:
	movb $1, -240(%rbp)
uuid_00000000000c5572:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c5575:
	mov -256(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c5578:
	mov -248(%RBP),%RSP
	add $-280, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5585
	jmp uuid_00000000000c5587
uuid_00000000000c5585:
	push %RBP
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq $0
	push %RBP
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c557f
	jmp uuid_00000000000c5581
uuid_00000000000c557f:
	push %RBP
	mov -304(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c557c
	jmp uuid_00000000000c557e
uuid_00000000000c557c:
	push %RBP
	mov -296(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5579
	jmp uuid_00000000000c557b
uuid_00000000000c5579:
	movb $1, -320(%rbp)
uuid_00000000000c557b:
	mov -352(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000c557e:
	mov -336(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000c5581:
	mov -328(%RBP),%RSP
	add $-360, %RSP
	mov -320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5582
	jmp uuid_00000000000c5584
uuid_00000000000c5582:
	movb $1, -192(%rbp)
uuid_00000000000c5584:
	mov -288(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000c5587:
	mov -208(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000c558a:
	mov -200(%RBP),%RSP
	add $-360, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5591
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c54c3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5593
uuid_00000000000c5591:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c558e
	jmp uuid_00000000000c5590
uuid_00000000000c558e:
	push %RBP
	mov -344(%RBP), %RAX
	mov -264(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c558b
	jmp uuid_00000000000c558d
uuid_00000000000c558b:
	movq $1, -64(%rbp)
uuid_00000000000c558d:
	mov -376(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c5590:
	mov -368(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c5593:
	mov -128(%RBP),%RSP
	add $-376, %RSP
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
deep_SB_hash_CL_ArrowU64TupleU64TupleU64String:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c55a2
	jmp uuid_00000000000c55a4
uuid_00000000000c55a2:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c559f
	jmp uuid_00000000000c55a1
uuid_00000000000c559f:
	push %RBP
	pushq -112(%RBP)
	pushq -120(%RBP)
	pushq -128(%RBP)
	jmp uuid_00000000000c559c
	jmp uuid_00000000000c559e
uuid_00000000000c559c:
	movb $1, -152(%rbp)
uuid_00000000000c559e:
	mov -184(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000c55a1:
	mov -168(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000c55a4:
	mov -160(%RBP),%RSP
	add $-208, %RSP
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c55a5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c54d4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c55a7
uuid_00000000000c55a5:
#call function deep-hash : Arrow<U64,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function deep-hash : Arrow<Tuple<String,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
uuid_00000000000c55a7:
	mov -104(%RBP),%RSP
	add $-208, %RSP
	mov -56(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
deep_SB_hash_CL_ArrowU64TupleU64String:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c55b2
	jmp uuid_00000000000c55b4
uuid_00000000000c55b2:
	push %RBP
	mov -88(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c55af
	jmp uuid_00000000000c55b1
uuid_00000000000c55af:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c55ac
	jmp uuid_00000000000c55ae
uuid_00000000000c55ac:
	movb $1, -104(%rbp)
uuid_00000000000c55ae:
	mov -136(%RBP),%RSP
	add $-144, %RSP
uuid_00000000000c55b1:
	mov -120(%RBP),%RSP
	add $-144, %RSP
uuid_00000000000c55b4:
	mov -112(%RBP),%RSP
	add $-144, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c55b5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c54d4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c55b7
uuid_00000000000c55b5:
#call function deep-hash : Arrow<U64,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c55b7:
	mov -72(%RBP),%RSP
	add $-144, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
_DT_bind_CL_ArrowNilConsU64ConsTupleU64TupleU64StringArray_QM_BTreeEqU64TupleU64TupleU64String:
#call function deep-hash : Arrow<Tuple<Tuple<String,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64TupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
#call function close : Arrow<BTreeEq<Tuple<Tuple<String,U64>,U64>,U64>,Array<BTreeEq<Tuple<Tuple<String,U64>,U64>,U64>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_BTreeEqU64TupleU64TupleU64StringBTreeEqU64TupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000c55d5:
	mov -80(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c55d6
	jmp uuid_00000000000c55d7
uuid_00000000000c55d6:
	mov -8(%rbp), %r15
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov -72(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c55d2
	push %RBP
	mov -152(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c55cf
	mov -152(%RBP), %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c55d1
uuid_00000000000c55cf:
	mov -88(%rbp), %R8
	mov -8(%RBP), %R15
	mov %R8, 16(%R15)
	movb $0, -80(%rbp)
uuid_00000000000c55d1:
	mov -184(%RBP),%RSP
	add $-184, %RSP
	jmp uuid_00000000000c55d4
uuid_00000000000c55d2:
	push %RBP
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c55cc
	mov -160(%RBP), %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c55ce
uuid_00000000000c55cc:
	mov -88(%rbp), %R8
	mov -8(%RBP), %R15
	mov %R8, 8(%R15)
	movb $0, -80(%rbp)
uuid_00000000000c55ce:
	mov -184(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000c55d4:
	mov -176(%RBP),%RSP
	add $-184, %RSP
	add $80, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c55d5
uuid_00000000000c55d7:
	mov %rbp, %rsp
	sub $64, %rsp
	ret
close_CL_ArrowArray_QM_BTreeEqU64TupleU64TupleU64StringBTreeEqU64TupleU64TupleU64String:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $80
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -80(%rbp), %r15
	movq %r15, 0(%r14)
	movq -72(%rbp), %r15
	movq %r15, 8(%r14)
	movq -64(%rbp), %r15
	movq %r15, 16(%r14)
	movq -56(%rbp), %r15
	movq %r15, 24(%r14)
	movq -48(%rbp), %r15
	movq %r15, 32(%r14)
	movq -40(%rbp), %r15
	movq %r15, 40(%r14)
	movq -32(%rbp), %r15
	movq %r15, 48(%r14)
	movq -24(%rbp), %r15
	movq %r15, 56(%r14)
	movq -16(%rbp), %r15
	movq %r15, 64(%r14)
	movq -8(%rbp), %r15
	movq %r15, 72(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
non_SB_zero_CL_ArrowU64ListTupleTypeTupleStringString:
	mov $1, %RAX
	push %RAX
	mov -72(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
cons_CL_ArrowListTupleTypeTupleStringStringConsListTupleTypeTupleStringStringTupleTypeTupleStringString:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
#call function close : Arrow<List<Tuple<Tuple<String,String>,Type>>,Array<List<Tuple<Tuple<String,String>,Type>>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTupleTypeTupleStringStringListTupleTypeTupleStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	subq $72, %rsp
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
close_CL_ArrowArray_QM_ListTupleTypeTupleStringStringListTupleTypeTupleStringString:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $72
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -72(%rbp), %r15
	movq %r15, 0(%r14)
	movq -64(%rbp), %r15
	movq %r15, 8(%r14)
	movq -56(%rbp), %r15
	movq %r15, 16(%r14)
	movq -48(%rbp), %r15
	movq %r15, 24(%r14)
	movq -40(%rbp), %r15
	movq %r15, 32(%r14)
	movq -32(%rbp), %r15
	movq %r15, 40(%r14)
	movq -24(%rbp), %r15
	movq %r15, 48(%r14)
	movq -16(%rbp), %r15
	movq %r15, 56(%r14)
	movq -8(%rbp), %r15
	movq %r15, 64(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
_DT_bind_CL_ArrowHashtableIsTypeASTConsTypeConsASTHashtableIsTypeAST:
	mov -8(%RBP), %RAX
	push %RAX
	mov -16(%RBP), %RAX
	push %RAX
	mov -24(%RBP), %RAX
	push %RAX
	push %RBP
	mov -144(%RBP), %RAX
	mov $3, %R14
	mul %R14
	mov %RAX, %RAX
	mov -152(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5639
	jmp uuid_00000000000c563b
uuid_00000000000c5639:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1000
	mov -144(%RBP), %RAX
	mov $30, %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov $104, %RAX
	mov -176(%RBP), %R14
	mul %R14
	push %RAX
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function memset : Arrow<Cons<Cons<Array<?,?>,U8>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq $0
	pushq -184(%rbp)
	mov %RBX, %RBP
	call memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000c5636:
	mov -200(%RBP), %RAX
	mov -152(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5637
	jmp uuid_00000000000c5638
uuid_00000000000c5637:
	mov -160(%RBP), %R15
	mov -200(%RBP), %RAX
	mov $104,%R14
	mul %R14
	add %RAX, %R15
	pushq 96(%R15)
	pushq 88(%R15)
	pushq 80(%R15)
	pushq 72(%R15)
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	push %RBP
#call function mem-is-nonzero : Arrow<Sized<104>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized104
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5633
	jmp uuid_00000000000c5635
uuid_00000000000c5633:
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq $0
	push %RBP
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c562c
	jmp uuid_00000000000c562e
uuid_00000000000c562c:
	push %RBP
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	jmp uuid_00000000000c5629
	jmp uuid_00000000000c562b
uuid_00000000000c5629:
	push %RBP
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	jmp uuid_00000000000c5626
	jmp uuid_00000000000c5628
uuid_00000000000c5626:
	movb $1, -536(%rbp)
uuid_00000000000c5628:
	mov -584(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c562b:
	mov -552(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c562e:
	mov -544(%RBP),%RSP
	add $-656, %RSP
	mov -536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5630
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c562f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5632
uuid_00000000000c5630:
#call function .bind-is : Arrow<Cons<Cons<Cons<Array<Tuple<AST,Type>,?>,U64>,AST>,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -176(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_is_CL_ArrowU64ConsTypeConsASTConsU64Array_QM_TupleTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000c5632:
	pop %RAX
	mov -424(%RBP),%RSP
	add $-656, %RSP
	push %RAX
uuid_00000000000c5635:
	pop %RAX
	mov -312(%RBP),%RSP
	add $-656, %RSP
	mov -200(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -200(%rbp)
	add $104, %rsp
	add $104, %rsp
	add $104, %rsp
	add $8, %rsp
	add $24, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c5636
uuid_00000000000c5638:
	movq -192(%rbp), %r15
	movq %r15, -160(%rbp)
	mov -192(%rbp), %r15
	mov %r15, -160(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -152(%rbp)
	mov -176(%rbp), %r15
	mov %r15, -152(%rbp)
uuid_00000000000c563b:
	mov -168(%RBP),%RSP
	add $-200, %RSP
#call function .bind-is : Arrow<Cons<Cons<Cons<Array<Tuple<AST,Type>,?>,U64>,AST>,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_is_CL_ArrowU64ConsTypeConsASTConsU64Array_QM_TupleTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -208(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000c563c
	mov -144(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -144(%rbp)
	jmp uuid_00000000000c563e
uuid_00000000000c563c:
uuid_00000000000c563e:
	mov -216(%RBP),%RSP
	add $-216, %RSP
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	subq $32, %rsp
	pushq 32(%rsp)
	pushq 48(%rsp)
	pushq 64(%rsp)
	pushq 80(%rsp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
_DT_bind_SB_is_CL_ArrowU64ConsTypeConsASTConsU64Array_QM_TupleTypeAST:
	pushq $0
#call function hash : Arrow<Sized<72>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call hash_CL_ArrowU64Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -8(%RBP), %R15
	mov -136(%RBP), %RAX
	mov $104,%R14
	mul %R14
	add %RAX, %R15
	pushq 96(%R15)
	pushq 88(%R15)
	pushq 80(%R15)
	pushq 72(%R15)
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	push %RBP
#call function is : Arrow<Cons<Sized<72>,Sized<72>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized72Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5641
	jmp uuid_00000000000c5643
uuid_00000000000c5641:
	movq $1, -128(%rbp)
uuid_00000000000c5643:
	mov -320(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c5647:
	mov -128(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<104>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized104
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5648
	jmp uuid_00000000000c5649
uuid_00000000000c5648:
	mov -136(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -136(%rbp)
	mov -8(%RBP), %R15
	mov -136(%RBP), %RAX
	mov $104,%R14
	mul %R14
	add %RAX, %R15
	pushq 96(%R15)
	pushq 88(%R15)
	pushq 80(%R15)
	pushq 72(%R15)
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	push %RBP
#call function is : Arrow<Cons<Sized<72>,Sized<72>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized72Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5644
	jmp uuid_00000000000c5646
uuid_00000000000c5644:
	movq $1, -128(%rbp)
uuid_00000000000c5646:
	mov -328(%RBP),%RSP
	add $-328, %RSP
	add $8, %RSP
	jmp uuid_00000000000c5647
uuid_00000000000c5649:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	mov -8(%RBP), %R15
	mov -136(%RBP), %RAX
	mov $104,%R14
	mul %R14
	add %RAX, %R15
	mov -424(%RBP), %RAX
	mov %RAX, 0(%R15)
	mov -416(%RBP), %RAX
	mov %RAX, 8(%R15)
	mov -408(%RBP), %RAX
	mov %RAX, 16(%R15)
	mov -400(%RBP), %RAX
	mov %RAX, 24(%R15)
	mov -392(%RBP), %RAX
	mov %RAX, 32(%R15)
	mov -384(%RBP), %RAX
	mov %RAX, 40(%R15)
	mov -376(%RBP), %RAX
	mov %RAX, 48(%R15)
	mov -368(%RBP), %RAX
	mov %RAX, 56(%R15)
	mov -360(%RBP), %RAX
	mov %RAX, 64(%R15)
	mov -352(%RBP), %RAX
	mov %RAX, 72(%R15)
	mov -344(%RBP), %RAX
	mov %RAX, 80(%R15)
	mov -336(%RBP), %RAX
	mov %RAX, 88(%R15)
	mov -328(%RBP), %RAX
	mov %RAX, 96(%R15)
	mov -128(%rbp), %RAX
	mov %rbp, %rsp
	sub $120, %rsp
	ret
mem_SB_is_SB_nonzero_CL_ArrowU64Sized104:
	pushq $0
	pushq $0
uuid_00000000000c564d:
	mov -120(%RBP), %RAX
	mov $104, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c564e
	jmp uuid_00000000000c564f
uuid_00000000000c564e:
	push %RBP
	mov %RBP, %R15
	add $-104, %R15
	mov -120(%RBP), %R14
	add %R14, %R15
	mov 0(%R15), %R15B
	mov %R15B, %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	setne %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c564a
	jmp uuid_00000000000c564c
uuid_00000000000c564a:
	movq $1, -128(%rbp)
uuid_00000000000c564c:
	mov -136(%RBP),%RSP
	add $-136, %RSP
	mov -120(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -120(%rbp)
	add $8, %RSP
	jmp uuid_00000000000c564d
uuid_00000000000c564f:
	mov -128(%rbp), %RAX
	mov %rbp, %rsp
	sub $112, %rsp
	ret
is_CL_ArrowU64ConsSized72Sized72:
	pushq $0
	pushq $1
uuid_00000000000c5653:
	mov $72, %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RAX, %R14
	mov -160(%RBP), %RAX
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5654
	jmp uuid_00000000000c5655
uuid_00000000000c5654:
	mov %RBP, %R15
	add $-72, %R15
	mov -160(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	mov %RBP, %R15
	add $-144, %R15
	mov -160(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	push %RBP
	mov -176(%RBP), %RAX
	mov -184(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5650
	movq $0, -168(%rbp)
	jmp uuid_00000000000c5652
uuid_00000000000c5650:
uuid_00000000000c5652:
	mov -192(%RBP),%RSP
	add $-192, %RSP
	mov -160(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -160(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000c5653
uuid_00000000000c5655:
	mov -168(%rbp), %RAX
	mov %rbp, %rsp
	sub $152, %rsp
	ret
hash_CL_ArrowU64Sized72:
	pushq $0
	pushq $0
uuid_00000000000c5656:
	mov $72, %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RAX, %R14
	mov -88(%RBP), %RAX
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5657
	jmp uuid_00000000000c5658
uuid_00000000000c5657:
	mov %RBP, %R15
	add $-72, %R15
	mov -88(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	mov %R15, %R14
	mov -96(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -96(%rbp)
	mov -88(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -88(%rbp)
	mov -96(%RBP),%RAX
	shl $10,%RAX
	mov %RAX, %R14
	mov -96(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -96(%rbp)
	mov -96(%RBP),%RAX
	shr $6,%RAX
	mov %RAX, %R14
	mov -96(%RBP), %RAX
	xorq %R14,%RAX
	movq %RAX, -96(%rbp)
	jmp uuid_00000000000c5656
uuid_00000000000c5658:
	mov -96(%RBP),%RAX
	shl $3,%RAX
	mov %RAX, %R14
	mov -96(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -96(%rbp)
	mov -96(%RBP),%RAX
	shr $11,%RAX
	mov %RAX, %R14
	mov -96(%RBP), %RAX
	xorq %R14,%RAX
	movq %RAX, -96(%rbp)
	mov -96(%RBP),%RAX
	shl $15,%RAX
	mov %RAX, %R14
	mov -96(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -96(%rbp)
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
_DT_lookup_CL_ArrowTypeConsTypeConsASTHashtableIsTypeAST:
	mov -16(%RBP), %RAX
	push %RAX
	push %RBP
	mov -144(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5671
	mov -24(%RBP), %RAX
	push %RAX
	pushq $0
#call function hash : Arrow<Sized<72>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call hash_CL_ArrowU64Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -144(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -160(%RBP), %R15
	mov -176(%RBP), %RAX
	mov $104,%R14
	mul %R14
	add %RAX, %R15
	pushq 96(%R15)
	pushq 88(%R15)
	pushq 80(%R15)
	pushq 72(%R15)
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq -240(%RBP)
	pushq -248(%RBP)
	push %RBP
#call function is : Arrow<Cons<Sized<72>,Sized<72>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized72Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5665
	jmp uuid_00000000000c5667
uuid_00000000000c5665:
	movq $1, -168(%rbp)
uuid_00000000000c5667:
	mov -360(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000c566b:
	mov -168(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<104>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized104
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c566c
	jmp uuid_00000000000c566d
uuid_00000000000c566c:
	mov -176(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -144(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -176(%rbp)
	mov -160(%RBP), %R15
	mov -176(%RBP), %RAX
	mov $104,%R14
	mul %R14
	add %RAX, %R15
	pushq 96(%R15)
	pushq 88(%R15)
	pushq 80(%R15)
	pushq 72(%R15)
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq -240(%RBP)
	pushq -248(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	push %RBP
#call function is : Arrow<Cons<Sized<72>,Sized<72>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized72Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5668
	jmp uuid_00000000000c566a
uuid_00000000000c5668:
	movq $1, -168(%rbp)
uuid_00000000000c566a:
	mov -368(%RBP),%RSP
	add $-368, %RSP
	add $8, %RSP
	jmp uuid_00000000000c566b
uuid_00000000000c566d:
	push %RBP
	mov -168(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000c566e
	jmp uuid_00000000000c5670
uuid_00000000000c566e:
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	movq -392(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -112(%rbp)
uuid_00000000000c5670:
	mov -368(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000c5673
uuid_00000000000c5671:
uuid_00000000000c5673:
	mov -152(%RBP),%RSP
	add $-152, %RSP
	subq $24, %rsp
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
_EQ__EQ__CL_ArrowU64ConsListTypeListType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c567f
	jmp uuid_00000000000c5681
uuid_00000000000c567f:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c567c
	jmp uuid_00000000000c567e
uuid_00000000000c567c:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5679
	jmp uuid_00000000000c567b
uuid_00000000000c5679:
	movb $1, -288(%rbp)
uuid_00000000000c567b:
	mov -352(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000c567e:
	mov -304(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000c5681:
	mov -296(%RBP),%RSP
	add $-392, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c56aa
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c569a
	jmp uuid_00000000000c569c
uuid_00000000000c569a:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5688
	jmp uuid_00000000000c568a
uuid_00000000000c5688:
	push %RBP
	mov -544(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5685
	jmp uuid_00000000000c5687
uuid_00000000000c5685:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000c5682
	jmp uuid_00000000000c5684
uuid_00000000000c5682:
	movb $1, -560(%rbp)
uuid_00000000000c5684:
	mov -624(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000c5687:
	mov -576(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000c568a:
	mov -568(%RBP),%RSP
	add $-648, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5697
	jmp uuid_00000000000c5699
uuid_00000000000c5697:
	push %RBP
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5691
	jmp uuid_00000000000c5693
uuid_00000000000c5691:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c568e
	jmp uuid_00000000000c5690
uuid_00000000000c568e:
	push %RBP
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	jmp uuid_00000000000c568b
	jmp uuid_00000000000c568d
uuid_00000000000c568b:
	movb $1, -704(%rbp)
uuid_00000000000c568d:
	mov -768(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c5690:
	mov -720(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c5693:
	mov -712(%RBP),%RSP
	add $-792, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5694
	jmp uuid_00000000000c5696
uuid_00000000000c5694:
	movb $1, -496(%rbp)
uuid_00000000000c5696:
	mov -656(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c5699:
	mov -512(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c569c:
	mov -504(%RBP),%RSP
	add $-792, %RSP
	mov -496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c56a7
	push %RBP
	jmp uuid_00000000000c56a4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0cab
	pushq $uuid_00000000000c56a3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c56a6
uuid_00000000000c56a4:
uuid_00000000000c56a6:
	mov -800(%RBP),%RSP
	add $-800, %RSP
	jmp uuid_00000000000c56a9
uuid_00000000000c56a7:
	push %RBP
#call function == : Arrow<Cons<List<Type>,List<Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c56a0
	jmp uuid_00000000000c56a2
uuid_00000000000c56a0:
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c569d
	jmp uuid_00000000000c569f
uuid_00000000000c569d:
	movq $1, -96(%rbp)
uuid_00000000000c569f:
	mov -808(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c56a2:
	mov -800(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c56a9:
	mov -400(%RBP),%RSP
	add $-808, %RSP
	jmp uuid_00000000000c56ac
uuid_00000000000c56aa:
	movq $1, -96(%rbp)
uuid_00000000000c56ac:
	mov -192(%RBP),%RSP
	add $-392, %RSP
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
hash_CL_ArrowU64Sized8:
	pushq $0
	pushq $0
uuid_00000000000c56ad:
	mov $8, %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RAX, %R14
	mov -24(%RBP), %RAX
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c56ae
	jmp uuid_00000000000c56af
uuid_00000000000c56ae:
	mov %RBP, %R15
	add $-8, %R15
	mov -24(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	mov %R15, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -24(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
	mov -32(%RBP),%RAX
	shl $10,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%RBP),%RAX
	shr $6,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	xorq %R14,%RAX
	movq %RAX, -32(%rbp)
	jmp uuid_00000000000c56ad
uuid_00000000000c56af:
	mov -32(%RBP),%RAX
	shl $3,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%RBP),%RAX
	shr $11,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	xorq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%RBP),%RAX
	shl $15,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
.data
uuid_00000000000c0cab:
	.ascii "Pattern Match Failure"
	.zero 1
uuid_00000000000c0cac:
	.ascii "File: LIB/default-stdlib.lm Line: 83 Column: 5"
	.zero 1
uuid_00000000000c0d0d:
	.ascii "File: LIB/default-stdlib.lm Line: 99 Column: 5"
	.zero 1
uuid_00000000000c0d1d:
	.ascii "()"
	.zero 1
uuid_00000000000c0d2d:
	.ascii "("
	.zero 1
uuid_00000000000c0d2e:
	.ascii " "
	.zero 1
uuid_00000000000c0d2f:
	.ascii ")"
	.zero 1
uuid_00000000000c0d36:
	.ascii "["
	.zero 1
uuid_00000000000c0d37:
	.ascii "]"
	.zero 1
uuid_00000000000c0d38:
	.ascii "File: LIB/default-stdlib.lm Line: 121 Column: 5"
	.zero 1
uuid_00000000000c0d45:
	.ascii " at "
	.zero 1
uuid_00000000000c0d51:
	.ascii "Unable to open file: "
	.zero 1
uuid_00000000000c0d52:
	.ascii "\n"
	.zero 1
uuid_00000000000c0d56:
	.ascii "File Read Error ["
	.zero 1
uuid_00000000000c0d57:
	.ascii "]: "
	.zero 1
uuid_00000000000c0d70:
	.ascii "File: LIB/default-stdlib.lm Line: 356 Column: 5"
	.zero 1
uuid_00000000000c0d80:
	.ascii "0"
	.zero 1
uuid_00000000000c0d84:
	.ascii "-"
	.zero 1
uuid_00000000000c0d94:
	.ascii "File: LIB/default-stdlib.lm Line: 465 Column: 8"
	.zero 1
uuid_00000000000c0db9:
	.ascii "1"
	.zero 1
uuid_00000000000c0dba:
	.ascii "2"
	.zero 1
uuid_00000000000c0dbb:
	.ascii "3"
	.zero 1
uuid_00000000000c0dbc:
	.ascii "4"
	.zero 1
uuid_00000000000c0dbd:
	.ascii "5"
	.zero 1
uuid_00000000000c0dbe:
	.ascii "6"
	.zero 1
uuid_00000000000c0dbf:
	.ascii "7"
	.zero 1
uuid_00000000000c0dc0:
	.ascii "8"
	.zero 1
uuid_00000000000c0dc1:
	.ascii "9"
	.zero 1
uuid_00000000000c0dc2:
	.ascii "a"
	.zero 1
uuid_00000000000c0dc3:
	.ascii "b"
	.zero 1
uuid_00000000000c0dc4:
	.ascii "c"
	.zero 1
uuid_00000000000c0dc5:
	.ascii "d"
	.zero 1
uuid_00000000000c0dc6:
	.ascii "e"
	.zero 1
uuid_00000000000c0dc7:
	.ascii "f"
	.zero 1
uuid_00000000000c0dc8:
	.ascii "File: LIB/default-stdlib.lm Line: 498 Column: 8"
	.zero 1
uuid_00000000000c0dfc:
	.ascii ""
	.zero 1
malloc_SB_block_SB_head_CL_U64:
.zero 8
malloc_SB_block_SB_tail_CL_U64:
.zero 8
malloc_SB_first_SB_free_CL_U64:
.zero 8
malloc_SB_page_SB_tail_CL_U64:
.zero 8
malloc_SB_large_SB_size_CL_U64:
.zero 8
point_SB_of_SB_interest_CL_U64:
.zero 8
rc_SB_magic_SB_number_CL_U64:
.zero 8
assemble_SB_text_SB_section_CL_SSCaseNumber3:
.zero 24
assemble_SB_init_SB_section_CL_SSCaseNumber3:
.zero 24
assemble_SB_data_SB_section_CL_SSCaseNumber3:
.zero 24
assemble_SB_profile_SB_onexit_CL_SSCaseNumber3:
.zero 24
assemble_SB_final_CL_String:
.zero 8
assemble_SB_argv_SB_referenced_CL_U8:
.zero 8
main_SB_with_SB_argv_CL_U8:
.zero 8
main_SB_with_CL_U8:
.zero 8
config_SB_profile_SB_invocations_CL_U8:
.zero 8
config_SB_strict_CL_U8:
.zero 8
config_SB_preprocess_CL_U8:
.zero 8
config_SB_target_CL_String:
.zero 8
uuid_00000000000c0e51:
	.ascii "tmp.s"
	.zero 1
config_SB_assemble_SB_mode_CL_AssembleModeAssembleModeCaseNumber1:
.zero 8
config_SB_mode_CL_CompileModeCompileModeCaseNumber0:
.zero 8
preprocess_SB_macros_CL_MacroListMacroListCaseNumber1:
.zero 168
ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1:
.zero 72
ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10:
.zero 72
global_SB_type_SB_context_CL_TContextTContextCaseNumber2:
.zero 120
global_SB_ctx_CL_FContextFContextCaseNumber1:
.zero 200
parse_SB_suffixes_CL_SfxListSfxListCaseNumber1:
.zero 48
stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecializeCaseNumber1:
.zero 200
uuid_00000000000c0e56:
	.ascii "_EX_"
	.zero 1
uuid_00000000000c0e57:
	.ascii "_DL_"
	.zero 1
uuid_00000000000c0e58:
	.ascii "_MD_"
	.zero 1
uuid_00000000000c0e59:
	.ascii "_AM_"
	.zero 1
uuid_00000000000c0e5a:
	.ascii "_ML_"
	.zero 1
uuid_00000000000c0e5b:
	.ascii "_AD_"
	.zero 1
uuid_00000000000c0e5c:
	.ascii "_SB_"
	.zero 1
uuid_00000000000c0e5d:
	.ascii "_DT_"
	.zero 1
uuid_00000000000c0e5e:
	.ascii "_DV_"
	.zero 1
uuid_00000000000c0e5f:
	.ascii "_CL_"
	.zero 1
uuid_00000000000c0e60:
	.ascii "_SC_"
	.zero 1
uuid_00000000000c0e61:
	.ascii "_LT_"
	.zero 1
uuid_00000000000c0e62:
	.ascii "_EQ_"
	.zero 1
uuid_00000000000c0e63:
	.ascii "_GT_"
	.zero 1
uuid_00000000000c0e64:
	.ascii "_QM_"
	.zero 1
uuid_00000000000c0e65:
	.ascii "_AT_"
	.zero 1
uuid_00000000000c0e66:
	.ascii "_LB_"
	.zero 1
uuid_00000000000c0e67:
	.ascii "_RB_"
	.zero 1
uuid_00000000000c0e68:
	.ascii "_HT_"
	.zero 1
uuid_00000000000c0e69:
	.ascii "_US_"
	.zero 1
uuid_00000000000c0e6a:
	.ascii "_TK_"
	.zero 1
uuid_00000000000c0e6b:
	.ascii "_BR_"
	.zero 1
uuid_00000000000c0e6c:
	.ascii "_TL_"
	.zero 1
uuid_00000000000c0e6d:
	.ascii "File: SRC/mangle-identifier.lm Line: 10 Column: 8"
	.zero 1
uuid_00000000000c0eb9:
	.ascii "?"
	.zero 1
uuid_00000000000c0ed2:
	.ascii "File: SRC/mangle-identifier.lm Line: 55 Column: 32"
	.zero 1
uuid_00000000000c0ee2:
	.ascii "File: SRC/mangle-identifier.lm Line: 49 Column: 5"
	.zero 1
uuid_00000000000c0eef:
	.ascii "\\"
	.zero 1
uuid_00000000000c0ef0:
	.ascii "Illegal Character: "
	.zero 1
uuid_00000000000c0ef1:
	.ascii "Illegal Escape Sequence In String "
	.zero 1
uuid_00000000000c0ef2:
	.ascii "File: SRC/escape-string.lm Line: 12 Column: 11"
	.zero 1
uuid_00000000000c0f17:
	.ascii "\\\\\""
	.zero 1
uuid_00000000000c0f18:
	.ascii ";"
	.zero 1
uuid_00000000000c0f19:
	.ascii "\\\\\\\\"
	.zero 1
uuid_00000000000c0f1a:
	.ascii "'"
	.zero 1
uuid_00000000000c0f1b:
	.ascii "λ"
	.zero 1
uuid_00000000000c0f1c:
	.ascii "\\\\n"
	.zero 1
uuid_00000000000c0f1d:
	.ascii "#"
	.zero 1
uuid_00000000000c0f1e:
	.ascii "	"
	.zero 1
uuid_00000000000c0f1f:
	.ascii "File: SRC/escape-string.lm Line: 50 Column: 14"
	.zero 1
uuid_00000000000c0f41:
	.ascii "\\\\"
	.zero 1
uuid_00000000000c0f45:
	.ascii "\\n"
	.zero 1
uuid_00000000000c0f46:
	.ascii "File: SRC/escape-string.lm Line: 45 Column: 8"
	.zero 1
uuid_00000000000c0f65:
	.ascii "File: SRC/escape-string.lm Line: 85 Column: 5"
	.zero 1
uuid_00000000000c0f7e:
	.ascii "as"
	.zero 1
uuid_00000000000c0f91:
	.ascii "In Coercion\n"
	.zero 1
uuid_00000000000c0f92:
	.ascii ":\n"
	.zero 1
uuid_00000000000c0f93:
	.ascii "As: "
	.zero 1
uuid_00000000000c0f9d:
	.ascii "In Function Application\n"
	.zero 1
uuid_00000000000c0f9e:
	.ascii "Return:\n"
	.zero 1
uuid_00000000000c0f9f:
	.ascii "File: SRC/error-formatting.lm Line: 12 Column: 5"
	.zero 1
uuid_00000000000c0fa9:
	.ascii "."
	.zero 1
uuid_00000000000c0fb3:
	.ascii "File: SRC/is-variable.lm Line: 9 Column: 5"
	.zero 1
uuid_00000000000c1047:
	.ascii "@"
	.zero 1
uuid_00000000000c104b:
	.ascii "Used"
	.zero 1
uuid_00000000000c104c:
	.ascii "Unused"
	.zero 1
uuid_00000000000c104d:
	.ascii "Return"
	.zero 1
uuid_00000000000c104e:
	.ascii "Tail"
	.zero 1
uuid_00000000000c104f:
	.ascii "Call"
	.zero 1
uuid_00000000000c1050:
	.ascii "File: SRC/to-string.lm Line: 9 Column: 5"
	.zero 1
uuid_00000000000c1074:
	.ascii ","
	.zero 1
uuid_00000000000c1075:
	.ascii "File: SRC/to-string.lm Line: 27 Column: 5"
	.zero 1
uuid_00000000000c108e:
	.ascii "+"
	.zero 1
uuid_00000000000c10a1:
	.ascii "..."
	.zero 1
uuid_00000000000c10b4:
	.ascii "<"
	.zero 1
uuid_00000000000c10b5:
	.ascii ">"
	.zero 1
uuid_00000000000c10b6:
	.ascii "File: SRC/to-string.lm Line: 46 Column: 5"
	.zero 1
uuid_00000000000c1129:
	.ascii "File: SRC/is-equal.lm Line: 4 Column: 5"
	.zero 1
type_SB_index_CL_HashtableIsTypeAST:
.zero 32
uuid_00000000000c1139:
	.ascii "Nil"
	.zero 1
uuid_00000000000c1155:
	.ascii "GlobalVariable"
	.zero 1
uuid_00000000000c1156:
	.ascii "mov"
	.zero 1
uuid_00000000000c1157:
	.ascii "Cons"
	.zero 1
uuid_00000000000c1176:
	.ascii ":"
	.zero 1
uuid_00000000000c11a1:
	.ascii "File: SRC/infer-expr.lm Line: 28 Column: 11"
	.zero 1
uuid_00000000000c11d2:
	.ascii "File: SRC/infer-expr.lm Line: 57 Column: 14"
	.zero 1
uuid_00000000000c11e2:
	.ascii "gensym-label"
	.zero 1
uuid_00000000000c11f5:
	.ascii "Label"
	.zero 1
uuid_00000000000c11ff:
	.ascii "label"
	.zero 1
uuid_00000000000c1212:
	.ascii "if"
	.zero 1
uuid_00000000000c1264:
	.ascii "Reg8"
	.zero 1
uuid_00000000000c1268:
	.ascii "Reg16"
	.zero 1
uuid_00000000000c126c:
	.ascii "Reg32"
	.zero 1
uuid_00000000000c1270:
	.ascii "Reg64"
	.zero 1
uuid_00000000000c1274:
	.ascii "File: SRC/infer-expr.lm Line: 89 Column: 11"
	.zero 1
uuid_00000000000c128a:
	.ascii "sizeof"
	.zero 1
uuid_00000000000c129d:
	.ascii "U64"
	.zero 1
uuid_00000000000c12a7:
	.ascii "File: SRC/infer-expr.lm Line: 115 Column: 11"
	.zero 1
uuid_00000000000c12ab:
	.ascii "scope"
	.zero 1
uuid_00000000000c12be:
	.ascii "open"
	.zero 1
uuid_00000000000c12d1:
	.ascii "Array"
	.zero 1
uuid_00000000000c1308:
	.ascii "push-deref"
	.zero 1
uuid_00000000000c1309:
	.ascii "StackVariable"
	.zero 1
uuid_00000000000c130a:
	.ascii "File: SRC/infer-expr.lm Line: 127 Column: 11"
	.zero 1
uuid_00000000000c1332:
	.ascii "Variable Name Is Already Bound In Outer Scope"
	.zero 1
uuid_00000000000c1339:
	.ascii "Unable to infer type of expression"
	.zero 1
uuid_00000000000c1352:
	.ascii "File: SRC/infer-expr.lm Line: 151 Column: 11"
	.zero 1
uuid_00000000000c1356:
	.ascii "del"
	.zero 1
uuid_00000000000c1378:
	.ascii "File: SRC/infer-expr.lm Line: 169 Column: 11"
	.zero 1
uuid_00000000000c1382:
	.ascii "Rc"
	.zero 1
uuid_00000000000c1383:
	.ascii "inc"
	.zero 1
uuid_00000000000c1384:
	.ascii "Tuple"
	.zero 1
uuid_00000000000c1391:
	.ascii "Constructor"
	.zero 1
uuid_00000000000c1392:
	.ascii "CaseNumber"
	.zero 1
uuid_00000000000c1393:
	.ascii "Sized"
	.zero 1
uuid_00000000000c1394:
	.ascii "FieldsSized"
	.zero 1
uuid_00000000000c1395:
	.ascii "push"
	.zero 1
uuid_00000000000c1396:
	.ascii "File: SRC/infer-expr.lm Line: 213 Column: 14"
	.zero 1
uuid_00000000000c13cd:
	.ascii "File: SRC/infer-expr.lm Line: 231 Column: 14"
	.zero 1
uuid_00000000000c13d4:
	.ascii "Arrow"
	.zero 1
uuid_00000000000c13d5:
	.ascii "cdecl::return"
	.zero 1
uuid_00000000000c13fd:
	.ascii "Unknown Term In Type Inference\n"
	.zero 1
uuid_00000000000c13fe:
	.ascii "File: SRC/infer-expr.lm Line: 8 Column: 5"
	.zero 1
alias_SB_index_CL_ListTupleTypeTupleStringStringListTupleTypeTupleStringStringCaseNumber1:
.zero 72
uuid_00000000000c149b:
	.ascii "File: SRC/alias.lm Line: 11 Column: 8"
	.zero 1
uuid_00000000000c149f:
	.ascii "File: SRC/alias.lm Line: 10 Column: 5"
	.zero 1
uuid_00000000000c14d3:
	.ascii "File: SRC/alias.lm Line: 31 Column: 8"
	.zero 1
uuid_00000000000c14d7:
	.ascii "File: SRC/alias.lm Line: 30 Column: 5"
	.zero 1
class_SB_exists_SB_index_CL_HashtableEqU64String:
.zero 32
parameter_SB_is_SB_flat_SB_index_CL_BTreeEqU64TupleU64TupleU64StringBTreeEqU64TupleU64TupleU64StringCaseNumber0:
.zero 80
is_SB_special_SB_index_CL_BTreeEqU64TupleTypeStringBTreeEqU64TupleTypeStringCaseNumber0:
.zero 80
lone_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0:
.zero 48
tag_SB_is_SB_fragment_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0:
.zero 48
global_SB_symbol_SB_registry_CL_BTreeEqU64TupleTypeStringBTreeEqU64TupleTypeStringCaseNumber0:
.zero 80
uuid_00000000000c1526:
	.ascii "Duplicate Global Symbol "
	.zero 1
uuid_00000000000c1527:
	.ascii " : "
	.zero 1
class_SB_to_SB_only_SB_child_CL_HashtableEqStringString:
.zero 32
tag_SB_to_SB_index_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0:
.zero 48
unknown_SB_index_SB_of_SB_tag_CL_U64:
.zero 8
class_SB_to_SB_size_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0:
.zero 48
tag_SB_to_SB_class_SB_index_CL_HashtableEqTypeString:
.zero 32
uuid_00000000000c1558:
	.ascii "Unexpected Class In index-class-of-tag: "
	.zero 1
uuid_00000000000c1559:
	.ascii "File: SRC/class-of-tag.lm Line: 6 Column: 5"
	.zero 1
class_SB_to_SB_yes_SB_index_CL_HashtableEqU64String:
.zero 32
tag_SB_to_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString:
.zero 32
uuid_00000000000c1572:
	.ascii "Tag"
	.zero 1
uuid_00000000000c158e:
	.ascii "File: SRC/fields-of-tag.lm Line: 17 Column: 64"
	.zero 1
uuid_00000000000c1595:
	.ascii "Invalid Tag In fields-of-tag "
	.zero 1
uuid_00000000000c1596:
	.ascii "File: SRC/fields-of-tag.lm Line: 15 Column: 5"
	.zero 1
uuid_00000000000c159d:
	.ascii "Fields"
	.zero 1
type_SB_constructors_SB_index_CL_BTreeEqTypeStringBTreeEqTypeStringCaseNumber0:
.zero 64
type_SB_complex_SB_fields_SB_index_CL_BTreeEqTupleTypeTypeStringBTreeEqTupleTypeTypeStringCaseNumber0:
.zero 96
uuid_00000000000c15b5:
	.ascii "ERROR: set-type-fields\n"
	.zero 1
uuid_00000000000c15b6:
	.ascii "File: SRC/type-complex-fields.lm Line: 6 Column: 5"
	.zero 1
uuid_00000000000c15de:
	.ascii "File: SRC/get-vararg-inner.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c160c:
	.ascii "File: SRC/is-constructor.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c162e:
	.ascii "File: SRC/is-constructor.lm Line: 17 Column: 5"
	.zero 1
uuid_00000000000c164a:
	.ascii "File: SRC/is-constructor.lm Line: 28 Column: 5"
	.zero 1
uuid_00000000000c16b1:
	.ascii "Field"
	.zero 1
uuid_00000000000c16d0:
	.ascii "File: SRC/is-open.lm Line: 16 Column: 11"
	.zero 1
uuid_00000000000c16d7:
	.ascii "File: SRC/is-open.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c16ff:
	.ascii "File: SRC/is-vararg.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c172a:
	.ascii "File: SRC/is-parameterized.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c1758:
	.ascii "File: SRC/is-sized.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c1774:
	.ascii "Constant"
	.zero 1
uuid_00000000000c17ab:
	.ascii "File: SRC/has-representation.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c17c4:
	.ascii "File: SRC/guess-representation.lm Line: 5 Column: 8"
	.zero 1
uuid_00000000000c17da:
	.ascii "LocalVariable"
	.zero 1
uuid_00000000000c17f9:
	.ascii "File: SRC/deep-hash.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c1811:
	.ascii "File: SRC/deep-hash.lm Line: 26 Column: 5"
	.zero 1
uuid_00000000000c1818:
	.ascii " != "
	.zero 1
uuid_00000000000c1819:
	.ascii "Type Ascription Inequality"
	.zero 1
uuid_00000000000c1832:
	.ascii "File: SRC/typeof.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c1842:
	.ascii "Var"
	.zero 1
uuid_00000000000c184c:
	.ascii "Lit"
	.zero 1
uuid_00000000000c1898:
	.ascii "App"
	.zero 1
uuid_00000000000c18a5:
	.ascii "Abs"
	.zero 1
uuid_00000000000c18a6:
	.ascii "File: SRC/to-s.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c18d1:
	.ascii "File: SRC/p.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c18ea:
	.ascii "File: SRC/and.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c1903:
	.ascii "File: SRC/union.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c191c:
	.ascii "File: SRC/union.lm Line: 21 Column: 8"
	.zero 1
uuid_00000000000c1935:
	.ascii "program"
	.zero 1
uuid_00000000000c1936:
	.ascii "File: SRC/union.lm Line: 36 Column: 28"
	.zero 1
uuid_00000000000c1949:
	.ascii "File: SRC/tag-of.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c197f:
	.ascii "File: SRC/can-unify.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c199b:
	.ascii "Meta"
	.zero 1
uuid_00000000000c1b0d:
	.ascii "GT"
	.zero 1
uuid_00000000000c1b41:
	.ascii "File: SRC/can-unify.lm Line: 21 Column: 5"
	.zero 1
uuid_00000000000c1be4:
	.ascii "File: SRC/unify.lm Line: 37 Column: 11"
	.zero 1
uuid_00000000000c1c24:
	.ascii "File: SRC/unify.lm Line: 47 Column: 11"
	.zero 1
uuid_00000000000c1d84:
	.ascii "File: SRC/unify.lm Line: 12 Column: 5"
	.zero 1
uuid_00000000000c1ddb:
	.ascii "File: SRC/unify.lm Line: 130 Column: 5"
	.zero 1
uuid_00000000000c1e08:
	.ascii "File: SRC/fields-of-type.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c1ebd:
	.ascii "File: SRC/sizeof-type.lm Line: 25 Column: 11"
	.zero 1
uuid_00000000000c1ed0:
	.ascii "Unexpected Type sizeof-type "
	.zero 1
uuid_00000000000c1ed1:
	.ascii "File: SRC/sizeof-type.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c1f05:
	.ascii "File: SRC/has-infinite.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000c1f5d:
	.ascii "File: SRC/has-infinite.lm Line: 26 Column: 5"
	.zero 1
uuid_00000000000c1f7e:
	.ascii "File: SRC/has-forward.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c1fc7:
	.ascii "File: SRC/has-forward.lm Line: 19 Column: 5"
	.zero 1
uuid_00000000000c1fda:
	.ascii "AL"
	.zero 1
uuid_00000000000c1fdb:
	.ascii "BL"
	.zero 1
uuid_00000000000c1fdc:
	.ascii "CL"
	.zero 1
uuid_00000000000c1fdd:
	.ascii "DL"
	.zero 1
uuid_00000000000c1fde:
	.ascii "SIL"
	.zero 1
uuid_00000000000c1fdf:
	.ascii "DIL"
	.zero 1
uuid_00000000000c1fe0:
	.ascii "BPL"
	.zero 1
uuid_00000000000c1fe1:
	.ascii "SPL"
	.zero 1
uuid_00000000000c1fe2:
	.ascii "R8B"
	.zero 1
uuid_00000000000c1fe3:
	.ascii "R9B"
	.zero 1
uuid_00000000000c1fe4:
	.ascii "R10B"
	.zero 1
uuid_00000000000c1fe5:
	.ascii "R11B"
	.zero 1
uuid_00000000000c1fe6:
	.ascii "R12B"
	.zero 1
uuid_00000000000c1fe7:
	.ascii "R13B"
	.zero 1
uuid_00000000000c1fe8:
	.ascii "R14B"
	.zero 1
uuid_00000000000c1fe9:
	.ascii "R15B"
	.zero 1
uuid_00000000000c1fea:
	.ascii "File: SRC/is-reg8.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c2030:
	.ascii "File: SRC/is-reg8.lm Line: 29 Column: 5"
	.zero 1
uuid_00000000000c203a:
	.ascii "AX"
	.zero 1
uuid_00000000000c203b:
	.ascii "BX"
	.zero 1
uuid_00000000000c203c:
	.ascii "CX"
	.zero 1
uuid_00000000000c203d:
	.ascii "DX"
	.zero 1
uuid_00000000000c203e:
	.ascii "SI"
	.zero 1
uuid_00000000000c203f:
	.ascii "DI"
	.zero 1
uuid_00000000000c2040:
	.ascii "BP"
	.zero 1
uuid_00000000000c2041:
	.ascii "SP"
	.zero 1
uuid_00000000000c2042:
	.ascii "R8W"
	.zero 1
uuid_00000000000c2043:
	.ascii "R9W"
	.zero 1
uuid_00000000000c2044:
	.ascii "R10W"
	.zero 1
uuid_00000000000c2045:
	.ascii "R11W"
	.zero 1
uuid_00000000000c2046:
	.ascii "R12W"
	.zero 1
uuid_00000000000c2047:
	.ascii "R13W"
	.zero 1
uuid_00000000000c2048:
	.ascii "R14W"
	.zero 1
uuid_00000000000c2049:
	.ascii "R15W"
	.zero 1
uuid_00000000000c204a:
	.ascii "File: SRC/is-reg16.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c2090:
	.ascii "File: SRC/is-reg16.lm Line: 29 Column: 5"
	.zero 1
uuid_00000000000c209a:
	.ascii "EAX"
	.zero 1
uuid_00000000000c209b:
	.ascii "EBX"
	.zero 1
uuid_00000000000c209c:
	.ascii "ECX"
	.zero 1
uuid_00000000000c209d:
	.ascii "EDX"
	.zero 1
uuid_00000000000c209e:
	.ascii "ESI"
	.zero 1
uuid_00000000000c209f:
	.ascii "EDI"
	.zero 1
uuid_00000000000c20a0:
	.ascii "EBP"
	.zero 1
uuid_00000000000c20a1:
	.ascii "ESP"
	.zero 1
uuid_00000000000c20a2:
	.ascii "R8D"
	.zero 1
uuid_00000000000c20a3:
	.ascii "R9D"
	.zero 1
uuid_00000000000c20a4:
	.ascii "R10D"
	.zero 1
uuid_00000000000c20a5:
	.ascii "R11D"
	.zero 1
uuid_00000000000c20a6:
	.ascii "R12D"
	.zero 1
uuid_00000000000c20a7:
	.ascii "R13D"
	.zero 1
uuid_00000000000c20a8:
	.ascii "R14D"
	.zero 1
uuid_00000000000c20a9:
	.ascii "R15D"
	.zero 1
uuid_00000000000c20aa:
	.ascii "File: SRC/is-reg32.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c20f0:
	.ascii "File: SRC/is-reg32.lm Line: 29 Column: 5"
	.zero 1
uuid_00000000000c20fa:
	.ascii "RAX"
	.zero 1
uuid_00000000000c20fb:
	.ascii "RBX"
	.zero 1
uuid_00000000000c20fc:
	.ascii "RCX"
	.zero 1
uuid_00000000000c20fd:
	.ascii "RDX"
	.zero 1
uuid_00000000000c20fe:
	.ascii "RSI"
	.zero 1
uuid_00000000000c20ff:
	.ascii "RDI"
	.zero 1
uuid_00000000000c2100:
	.ascii "RBP"
	.zero 1
uuid_00000000000c2101:
	.ascii "RSP"
	.zero 1
uuid_00000000000c2102:
	.ascii "R8"
	.zero 1
uuid_00000000000c2103:
	.ascii "R9"
	.zero 1
uuid_00000000000c2104:
	.ascii "R10"
	.zero 1
uuid_00000000000c2105:
	.ascii "R11"
	.zero 1
uuid_00000000000c2106:
	.ascii "R12"
	.zero 1
uuid_00000000000c2107:
	.ascii "R13"
	.zero 1
uuid_00000000000c2108:
	.ascii "R14"
	.zero 1
uuid_00000000000c2109:
	.ascii "R15"
	.zero 1
uuid_00000000000c210a:
	.ascii "File: SRC/is-reg64.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c2150:
	.ascii "File: SRC/is-reg64.lm Line: 29 Column: 5"
	.zero 1
uuid_00000000000c2166:
	.ascii "File: SRC/with-tag.lm Line: 5 Column: 8"
	.zero 1
uuid_00000000000c218e:
	.ascii "File: SRC/with-size.lm Line: 8 Column: 5"
	.zero 1
uuid_00000000000c21a0:
	.ascii "File: SRC/with-size.lm Line: 19 Column: 5"
	.zero 1
uuid_00000000000c21e6:
	.ascii "File: SRC/with-size.lm Line: 30 Column: 5"
	.zero 1
uuid_00000000000c220b:
	.ascii "File: SRC/with-fields.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c2236:
	.ascii "File: SRC/without-tag.lm Line: 8 Column: 11"
	.zero 1
uuid_00000000000c2264:
	.ascii "File: SRC/without-tag.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c2282:
	.ascii "File: SRC/without-tag.lm Line: 27 Column: 5"
	.zero 1
uuid_00000000000c22aa:
	.ascii "File: SRC/without-constructor.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c22c2:
	.ascii "File: SRC/without-representation.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c22e4:
	.ascii "Literal"
	.zero 1
uuid_00000000000c233c:
	.ascii "File: SRC/without-representation.lm Line: 17 Column: 5"
	.zero 1
uuid_00000000000c236f:
	.ascii "File: SRC/without-size-unless-class.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c2397:
	.ascii "File: SRC/without-size-unless-class.lm Line: 17 Column: 5"
	.zero 1
uuid_00000000000c23d7:
	.ascii "File: SRC/without-size-unless-class.lm Line: 46 Column: 5"
	.zero 1
uuid_00000000000c23f5:
	.ascii "File: SRC/without-size.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c242f:
	.ascii "File: SRC/without-size.lm Line: 17 Column: 5"
	.zero 1
uuid_00000000000c245a:
	.ascii "File: SRC/with-only-tag.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c2482:
	.ascii "File: SRC/with-only-class.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c2497:
	.ascii "File: SRC/with-only-representation.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c2510:
	.ascii "File: SRC/with-only-representation.lm Line: 19 Column: 5"
	.zero 1
uuid_00000000000c2547:
	.ascii "File: SRC/normalize.lm Line: 12 Column: 5"
	.zero 1
uuid_00000000000c2581:
	.ascii "Malformed Type Definition"
	.zero 1
uuid_00000000000c2582:
	.ascii "File: SRC/type-of-s.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c25aa:
	.ascii "Mark Field "
	.zero 1
uuid_00000000000c25ab:
	.ascii "File: SRC/type-of-s-with-fields.lm Line: 8 Column: 11"
	.zero 1
uuid_00000000000c25cd:
	.ascii "File: SRC/type-of-s-with-fields.lm Line: 25 Column: 11"
	.zero 1
uuid_00000000000c25ef:
	.ascii "File: SRC/type-of-s-with-fields.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c2647:
	.ascii "Unknown LHS"
	.zero 1
uuid_00000000000c2648:
	.ascii "File: SRC/typeof-lhs.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c2678:
	.ascii "File: SRC/cons-head.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c269a:
	.ascii "File: SRC/cons-tail.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c26aa:
	.ascii "File: SRC/parameter-number.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c26c7:
	.ascii "File: SRC/parameter-number.lm Line: 16 Column: 5"
	.zero 1
uuid_00000000000c26d1:
	.ascii "Function Application Yielded No Matches\n"
	.zero 1
uuid_00000000000c26d2:
	.ascii "\nWith Argument : "
	.zero 1
uuid_00000000000c26d3:
	.ascii "Options: "
	.zero 1
uuid_00000000000c26d7:
	.ascii "Function Application Yielded An Irreducible Plurality Of Matches\n"
	.zero 1
uuid_00000000000c26d8:
	.ascii "With Argument "
	.zero 1
uuid_00000000000c26d9:
	.ascii "Matched "
	.zero 1
uuid_00000000000c26e3:
	.ascii "File: SRC/apply.lm Line: 30 Column: 11"
	.zero 1
uuid_00000000000c2711:
	.ascii "Application Did Not Close Before Specialization:\n"
	.zero 1
uuid_00000000000c2712:
	.ascii "Function "
	.zero 1
uuid_00000000000c2713:
	.ascii "Argument "
	.zero 1
uuid_00000000000c271a:
	.ascii "Function Not Simple Arrow: "
	.zero 1
uuid_00000000000c271b:
	.ascii "File: SRC/apply.lm Line: 42 Column: 8"
	.zero 1
uuid_00000000000c2722:
	.ascii "File: SRC/apply.lm Line: 41 Column: 5"
	.zero 1
uuid_00000000000c2750:
	.ascii "File: SRC/apply.lm Line: 81 Column: 33"
	.zero 1
uuid_00000000000c278a:
	.ascii "File: SRC/apply.lm Line: 72 Column: 5"
	.zero 1
uuid_00000000000c27d2:
	.ascii "File: SRC/apply-plural.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c27ec:
	.ascii "File: SRC/reduce-plural.lm Line: 5 Column: 41"
	.zero 1
uuid_00000000000c280e:
	.ascii "File: SRC/reduce-plural.lm Line: 19 Column: 11"
	.zero 1
uuid_00000000000c2818:
	.ascii "File: SRC/reduce-plural.lm Line: 15 Column: 27"
	.zero 1
uuid_00000000000c2837:
	.ascii "File: SRC/reduce-plural.lm Line: 37 Column: 11"
	.zero 1
uuid_00000000000c2841:
	.ascii "File: SRC/reduce-plural.lm Line: 33 Column: 27"
	.zero 1
uuid_00000000000c2879:
	.ascii "File: SRC/try-specialize.lm Line: 17 Column: 20"
	.zero 1
uuid_00000000000c2889:
	.ascii "File: SRC/try-specialize.lm Line: 5 Column: 35"
	.zero 1
uuid_00000000000c28c3:
	.ascii "File: SRC/unify-hint.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c28d8:
	.ascii "File: SRC/unify-hint.lm Line: 24 Column: 5"
	.zero 1
uuid_00000000000c28e2:
	.ascii "|"
	.zero 1
uuid_00000000000c2919:
	.ascii "File: SRC/infer-type-definition.lm Line: 18 Column: 14"
	.zero 1
uuid_00000000000c292c:
	.ascii "File: SRC/infer-type-definition.lm Line: 25 Column: 17"
	.zero 1
uuid_00000000000c2936:
	.ascii "File: SRC/infer-type-definition.lm Line: 7 Column: 5"
	.zero 1
uuid_00000000000c2948:
	.ascii "File: SRC/arity.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c2958:
	.ascii "File: SRC/arity.lm Line: 16 Column: 5"
	.zero 1
uuid_00000000000c297a:
	.ascii "File: SRC/cons-arity.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c29a2:
	.ascii "File: SRC/implicit-tail.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c29a9:
	.ascii "Unknown Referenced Variable"
	.zero 1
uuid_00000000000c29c8:
	.ascii "File: SRC/typeof-var-raw.lm Line: 4 Column: 28"
	.zero 1
types_SB_have_SB_changed_CL_U8:
.zero 8
uuid_00000000000c29db:
	.ascii "File: SRC/typecheck.lm Line: 7 Column: 25"
	.zero 1
uuid_00000000000c29eb:
	.ascii "File: SRC/typecheck.lm Line: 14 Column: 42"
	.zero 1
uuid_00000000000c2a12:
	.ascii "File: SRC/typecheck.lm Line: 22 Column: 43"
	.zero 1
uuid_00000000000c2a55:
	.ascii "File: SRC/substitute.lm Line: 4 Column: 27"
	.zero 1
uuid_00000000000c2a70:
	.ascii "File: SRC/substitute.lm Line: 27 Column: 5"
	.zero 1
uuid_00000000000c2a8f:
	.ascii "File: SRC/substitute.lm Line: 44 Column: 34"
	.zero 1
uuid_00000000000c2aab:
	.ascii "File: SRC/substitute.lm Line: 41 Column: 5"
	.zero 1
uuid_00000000000c2ac3:
	.ascii "File: SRC/substitute.lm Line: 73 Column: 5"
	.zero 1
uuid_00000000000c2b0c:
	.ascii "File: SRC/substitute.lm Line: 90 Column: 34"
	.zero 1
uuid_00000000000c2b2e:
	.ascii "File: SRC/substitute.lm Line: 87 Column: 5"
	.zero 1
uuid_00000000000c2bb3:
	.ascii "Unexpected Substitute LHS"
	.zero 1
uuid_00000000000c2bb4:
	.ascii "File: SRC/substitute.lm Line: 128 Column: 5"
	.zero 1
uuid_00000000000c2c03:
	.ascii "File: SRC/substitute.lm Line: 168 Column: 34"
	.zero 1
uuid_00000000000c2c49:
	.ascii "File: SRC/substitute.lm Line: 187 Column: 34"
	.zero 1
uuid_00000000000c2c9b:
	.ascii "Unexpected Substitution Term:"
	.zero 1
uuid_00000000000c2c9c:
	.ascii "File: SRC/substitute.lm Line: 159 Column: 5"
	.zero 1
uuid_00000000000c2cd9:
	.ascii "File: SRC/substitute.lm Line: 247 Column: 34"
	.zero 1
uuid_00000000000c2ce9:
	.ascii "File: SRC/substitute.lm Line: 243 Column: 5"
	.zero 1
uuid_00000000000c2d17:
	.ascii "File: SRC/specialize.lm Line: 14 Column: 20"
	.zero 1
uuid_00000000000c2d24:
	.ascii "File: SRC/specialize.lm Line: 7 Column: 38"
	.zero 1
uuid_00000000000c2d43:
	.ascii "File: SRC/mark-constructor-flat-parameters.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c2d74:
	.ascii "File: SRC/mark-constructor-flat-parameters.lm Line: 16 Column: 5"
	.zero 1
uuid_00000000000c2d9c:
	.ascii "Size Of Type Cannot Be Determined Due To Forward Reference: "
	.zero 1
uuid_00000000000c2da0:
	.ascii "Size Of Type Is Infinite: "
	.zero 1
uuid_00000000000c2da4:
	.ascii "File: SRC/infer-type-constructor.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c2dc9:
	.ascii "File: SRC/infer-global-context.lm Line: 9 Column: 11"
	.zero 1
uuid_00000000000c2e15:
	.ascii "Hooks Must Not Return Values."
	.zero 1
uuid_00000000000c2e58:
	.ascii "Global Bindings Must Be Ascripted"
	.zero 1
uuid_00000000000c2e59:
	.ascii "File: SRC/infer-global-context.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c2e72:
	.ascii "File: SRC/assert-well-typed.lm Line: 3 Column: 26"
	.zero 1
uuid_00000000000c2f3f:
	.ascii "set"
	.zero 1
uuid_00000000000c2fbb:
	.ascii "Unknown Term In Assert Well Typed "
	.zero 1
uuid_00000000000c2fbc:
	.ascii "File: SRC/assert-well-typed.lm Line: 10 Column: 5"
	.zero 1
uuid_00000000000c305c:
	.ascii "Invalid LHS"
	.zero 1
uuid_00000000000c305d:
	.ascii "File: SRC/infer-ctx.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c3075:
	.ascii "File: SRC/infer-tctx.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c3094:
	.ascii "File: SRC/infer-tctx.lm Line: 15 Column: 5"
	.zero 1
uuid_00000000000c30a1:
	.ascii "	mov $60, %rax\n"
	.zero 1
uuid_00000000000c30a2:
	.ascii "	mov $0, %rdi\n"
	.zero 1
uuid_00000000000c30a3:
	.ascii "	syscall\n"
	.zero 1
uuid_00000000000c30a4:
	.ascii ".data\n"
	.zero 1
uuid_00000000000c30a5:
	.ascii ".global _start\n"
	.zero 1
uuid_00000000000c30a6:
	.ascii ".text\n"
	.zero 1
uuid_00000000000c30a7:
	.ascii "_start:\n"
	.zero 1
uuid_00000000000c30a8:
	.ascii "	mov %rsp,%rbp\n"
	.zero 1
uuid_00000000000c30a9:
	.ascii "	mov %rbp,%rsp\n"
	.zero 1
uuid_00000000000c30ad:
	.ascii "	popq %r8\n"
	.zero 1
uuid_00000000000c30ae:
	.ascii "	movq %rsp, %r9\n"
	.zero 1
uuid_00000000000c30b2:
	.ascii "	push %rbp\n"
	.zero 1
uuid_00000000000c30b3:
	.ascii "	mov %rsp, %rbp\n"
	.zero 1
uuid_00000000000c30b4:
	.ascii "	pushq %r8\n"
	.zero 1
uuid_00000000000c30b5:
	.ascii "	pushq %r9\n"
	.zero 1
uuid_00000000000c30b9:
	.ascii "	call main\n"
	.zero 1
uuid_00000000000c30ba:
	.ascii "	mov %rbp, %rsp\n"
	.zero 1
uuid_00000000000c30bb:
	.ascii "	pop %rbp\n"
	.zero 1
uuid_00000000000c30bf:
	.ascii "File: SRC/compile.lm Line: 2 Column: 20"
	.zero 1
uuid_00000000000c3102:
	.ascii "fragment-type"
	.zero 1
uuid_00000000000c3103:
	.ascii "Function"
	.zero 1
uuid_00000000000c3104:
	.ascii "File: SRC/compile-blob.lm Line: 10 Column: 11"
	.zero 1
uuid_00000000000c3114:
	.ascii "File: SRC/compile-blob.lm Line: 4 Column: 39"
	.zero 1
uuid_00000000000c3169:
	.ascii "expression"
	.zero 1
uuid_00000000000c316a:
	.ascii "File: SRC/compile-blob.lm Line: 31 Column: 39"
	.zero 1
uuid_00000000000c3198:
	.ascii "main"
	.zero 1
uuid_00000000000c319c:
	.ascii "Global"
	.zero 1
uuid_00000000000c31c1:
	.ascii "File: SRC/compile-gnu.lm Line: 4 Column: 39"
	.zero 1
uuid_00000000000c31dd:
	.ascii "File: SRC/compile-program-ordered.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c320e:
	.ascii "File: SRC/compile-program-ordered.lm Line: 11 Column: 5"
	.zero 1
uuid_00000000000c3236:
	.ascii "File: SRC/fragment-context::lookup.lm Line: 11 Column: 27"
	.zero 1
uuid_00000000000c323d:
	.ascii "Context::lookup "
	.zero 1
uuid_00000000000c323e:
	.ascii "\nCandidates:\n"
	.zero 1
uuid_00000000000c3251:
	.ascii "File: SRC/fragment-context::lookup.lm Line: 43 Column: 30"
	.zero 1
uuid_00000000000c3258:
	.ascii "Context::lookup Could Not Find Symbol"
	.zero 1
uuid_00000000000c3298:
	.ascii "File: SRC/fragment-context::lookups.lm Line: 10 Column: 27"
	.zero 1
uuid_00000000000c329f:
	.ascii "Context::lookups "
	.zero 1
uuid_00000000000c32b5:
	.ascii "File: SRC/fragment-context::lookup-vararg.lm Line: 4 Column: 27"
	.zero 1
uuid_00000000000c330d:
	.ascii "File: SRC/with-location.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c3338:
	.ascii "File: SRC/with-location.lm Line: 57 Column: 5"
	.zero 1
uuid_00000000000c3384:
	.ascii "File: SRC/without-location.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c33af:
	.ascii "File: SRC/without-location.lm Line: 52 Column: 5"
	.zero 1
uuid_00000000000c33bf:
	.ascii "File: SRC/with-key.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c33c3:
	.ascii "Unknown"
	.zero 1
uuid_00000000000c3415:
	.ascii "File: SRC/location-of.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c343a:
	.ascii "File: SRC/unique.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c344a:
	.ascii "File: SRC/print-verbose.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c345d:
	.ascii "File: SRC/non-zero.lm Line: 4 Column: 5"
	.zero 1
already_SB_tokenized_CL_ListStringListStringCaseNumber1:
.zero 24
uuid_00000000000c3473:
	.ascii "File: SRC/tokenize.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000c3481:
	.ascii "File: SRC/tokenize.lm Line: 25 Column: 8"
	.zero 1
uuid_00000000000c34e6:
	.ascii "File: SRC/tokenize.lm Line: 35 Column: 8"
	.zero 1
uuid_00000000000c3510:
	.ascii "Hanging Parentheses In File: "
	.zero 1
uuid_00000000000c3511:
	.ascii " Count: "
	.zero 1
uuid_00000000000c3527:
	.ascii "File: SRC/is-nil.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c353a:
	.ascii "File: SRC/is-seq.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c3553:
	.ascii "File: SRC/is-arrow.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c356f:
	.ascii "File: SRC/is-array.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c3582:
	.ascii "Hook"
	.zero 1
uuid_00000000000c358c:
	.ascii "File: SRC/is-hook.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c359f:
	.ascii "Blob"
	.zero 1
uuid_00000000000c35a9:
	.ascii "File: SRC/is-blob.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c35c5:
	.ascii "File: SRC/is-stack-variable.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c35e1:
	.ascii "File: SRC/is-cons.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c35f4:
	.ascii "ImpureCtx"
	.zero 1
uuid_00000000000c35fe:
	.ascii "File: SRC/is-impure-ctx.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c3611:
	.ascii "String"
	.zero 1
uuid_00000000000c361b:
	.ascii "File: SRC/is-string.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c3637:
	.ascii "File: SRC/is-rc.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c364a:
	.ascii "OntoStack"
	.zero 1
uuid_00000000000c3666:
	.ascii "File: SRC/is-onto-stack.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c3679:
	.ascii "ImpureOffset"
	.zero 1
uuid_00000000000c3695:
	.ascii "File: SRC/is-impure-offset.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c36a8:
	.ascii "BranchConditional"
	.zero 1
uuid_00000000000c36b2:
	.ascii "File: SRC/is-branchconditional.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c36c5:
	.ascii "File: SRC/plus.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c36db:
	.ascii "File: SRC/print.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c36eb:
	.ascii " = "
	.zero 1
uuid_00000000000c36ec:
	.ascii ";\n"
	.zero 1
uuid_00000000000c36ed:
	.ascii "File: SRC/print.lm Line: 10 Column: 5"
	.zero 1
uuid_00000000000c3706:
	.ascii "File: SRC/print.lm Line: 25 Column: 5"
	.zero 1
uuid_00000000000c3710:
	.ascii "EOF"
	.zero 1
uuid_00000000000c3738:
	.ascii "type "
	.zero 1
uuid_00000000000c3742:
	.ascii " := "
	.zero 1
uuid_00000000000c3761:
	.ascii "File: SRC/print.lm Line: 40 Column: 5"
	.zero 1
uuid_00000000000c3783:
	.ascii "Fragment Context:\n"
	.zero 1
uuid_00000000000c3793:
	.ascii "File: SRC/print.lm Line: 84 Column: 27"
	.zero 1
uuid_00000000000c37af:
	.ascii "Fragment\n"
	.zero 1
uuid_00000000000c37b0:
	.ascii "	Offset = "
	.zero 1
uuid_00000000000c37bd:
	.ascii "File: SRC/print.lm Line: 99 Column: 33"
	.zero 1
uuid_00000000000c37c4:
	.ascii "File: SRC/print.lm Line: 94 Column: 5"
	.zero 1
uuid_00000000000c37d1:
	.ascii "File: SRC/print.lm Line: 111 Column: 5"
	.zero 1
uuid_00000000000c37e4:
	.ascii "In File "
	.zero 1
uuid_00000000000c37e5:
	.ascii " Line "
	.zero 1
uuid_00000000000c37e6:
	.ascii " Column "
	.zero 1
uuid_00000000000c37e7:
	.ascii "File: SRC/print.lm Line: 122 Column: 5"
	.zero 1
uuid_00000000000c3803:
	.ascii " +\n"
	.zero 1
uuid_00000000000c3804:
	.ascii " + "
	.zero 1
uuid_00000000000c3811:
	.ascii "File: SRC/print.lm Line: 135 Column: 29"
	.zero 1
uuid_00000000000c3835:
	.ascii "File: SRC/print.lm Line: 159 Column: 35"
	.zero 1
uuid_00000000000c3848:
	.ascii "File: SRC/reverse.lm Line: 4 Column: 26"
	.zero 1
uuid_00000000000c385e:
	.ascii "(Variable "
	.zero 1
uuid_00000000000c3868:
	.ascii "(Literal "
	.zero 1
uuid_00000000000c3878:
	.ascii "(Type ("
	.zero 1
uuid_00000000000c3879:
	.ascii "))"
	.zero 1
uuid_00000000000c3883:
	.ascii "(Global ("
	.zero 1
uuid_00000000000c388d:
	.ascii "(App ("
	.zero 1
uuid_00000000000c389a:
	.ascii "(Lambda ("
	.zero 1
uuid_00000000000c38ad:
	.ascii "File: SRC/serialize-ast.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c38e6:
	.ascii "File: SRC/serialize-ast.lm Line: 59 Column: 43"
	.zero 1
uuid_00000000000c38f0:
	.ascii "(Variable ?)"
	.zero 1
uuid_00000000000c3900:
	.ascii "(Literal And) "
	.zero 1
uuid_00000000000c3913:
	.ascii ") "
	.zero 1
uuid_00000000000c3914:
	.ascii "File: SRC/serialize-ast.lm Line: 72 Column: 37"
	.zero 1
uuid_00000000000c393c:
	.ascii "File: SRC/slot.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000c395b:
	.ascii "File: SRC/slot.lm Line: 30 Column: 14"
	.zero 1
uuid_00000000000c3971:
	.ascii "File: SRC/slot.lm Line: 26 Column: 5"
	.zero 1
uuid_SB_counter_CL_U64:
.zero 8
uuid_00000000000c397b:
	.ascii "uuid_"
	.zero 1
uuid_00000000000c398e:
	.ascii "File: SRC/var-name-if-var.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c39c6:
	.ascii "File: SRC/parse-lambda.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c39ea:
	.ascii "File: SRC/parse-lambda.lm Line: 16 Column: 38"
	.zero 1
uuid_00000000000c39f7:
	.ascii "File: SRC/parse-lambda.lm Line: 14 Column: 5"
	.zero 1
uuid_00000000000c3a19:
	.ascii "File: SRC/parse-lambda.lm Line: 33 Column: 14"
	.zero 1
uuid_00000000000c3a26:
	.ascii "Expected Dot For Lambda Body\n"
	.zero 1
uuid_00000000000c3a30:
	.ascii "File: SRC/parse-lambda.lm Line: 30 Column: 8"
	.zero 1
uuid_00000000000c3a7a:
	.ascii "File: SRC/parse-many-expressions.lm Line: 18 Column: 14"
	.zero 1
uuid_00000000000c3a7e:
	.ascii "File: SRC/parse-many-expressions.lm Line: 6 Column: 8"
	.zero 1
uuid_00000000000c3aad:
	.ascii "File: SRC/parse-one-expression.lm Line: 12 Column: 11"
	.zero 1
uuid_00000000000c3ac6:
	.ascii "Unexpected Closing Parentheses"
	.zero 1
uuid_00000000000c3ae5:
	.ascii "File: SRC/parse-one-expression.lm Line: 24 Column: 11"
	.zero 1
uuid_00000000000c3b13:
	.ascii "File: SRC/parse-one-expression.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000c3b3d:
	.ascii "macro"
	.zero 1
uuid_00000000000c3b6e:
	.ascii "File: SRC/parse-toplevel.lm Line: 18 Column: 26"
	.zero 1
uuid_00000000000c3b75:
	.ascii "File: SRC/parse-toplevel.lm Line: 14 Column: 20"
	.zero 1
uuid_00000000000c3b79:
	.ascii "File: SRC/parse-toplevel.lm Line: 11 Column: 14"
	.zero 1
uuid_00000000000c3b7d:
	.ascii "meta"
	.zero 1
uuid_00000000000c3b9c:
	.ascii "File: SRC/parse-toplevel.lm Line: 36 Column: 14"
	.zero 1
uuid_00000000000c3ba0:
	.ascii "type"
	.zero 1
uuid_00000000000c3bb6:
	.ascii "fragment"
	.zero 1
uuid_00000000000c3bde:
	.ascii "File: SRC/parse-toplevel.lm Line: 50 Column: 34"
	.zero 1
uuid_00000000000c3be2:
	.ascii "File: SRC/parse-toplevel.lm Line: 48 Column: 14"
	.zero 1
uuid_00000000000c3c0d:
	.ascii "File: SRC/parse-toplevel.lm Line: 70 Column: 34"
	.zero 1
uuid_00000000000c3c11:
	.ascii "File: SRC/parse-toplevel.lm Line: 68 Column: 14"
	.zero 1
uuid_00000000000c3c3f:
	.ascii "suffix"
	.zero 1
uuid_00000000000c3c55:
	.ascii "atom"
	.zero 1
uuid_00000000000c3c9d:
	.ascii "size"
	.zero 1
uuid_00000000000c3cc8:
	.ascii "import"
	.zero 1
uuid_00000000000c3cfc:
	.ascii "zero"
	.zero 1
uuid_00000000000c3d12:
	.ascii "non-zero"
	.zero 1
uuid_00000000000c3d13:
	.ascii "t"
	.zero 1
uuid_00000000000c3d14:
	.ascii "!="
	.zero 1
uuid_00000000000c3d15:
	.ascii ".0"
	.zero 1
uuid_00000000000c3d16:
	.ascii ":="
	.zero 1
uuid_00000000000c3d3e:
	.ascii "File: SRC/parse-toplevel.lm Line: 150 Column: 14"
	.zero 1
uuid_00000000000c3d4b:
	.ascii "File: SRC/parse-toplevel.lm Line: 162 Column: 14"
	.zero 1
uuid_00000000000c3d4f:
	.ascii "File: SRC/parse-toplevel.lm Line: 5 Column: 8"
	.zero 1
uuid_00000000000c3d76:
	.ascii "File: SRC/parse-type-comma-sep.lm Line: 7 Column: 8"
	.zero 1
uuid_00000000000c3da9:
	.ascii "File: SRC/parse-type-single.lm Line: 9 Column: 11"
	.zero 1
uuid_00000000000c3db3:
	.ascii "File: SRC/parse-type-single.lm Line: 59 Column: 11"
	.zero 1
uuid_00000000000c3dd5:
	.ascii "Unexpected Parameterized Type: "
	.zero 1
uuid_00000000000c3dd6:
	.ascii "File: SRC/parse-type-single.lm Line: 86 Column: 25"
	.zero 1
uuid_00000000000c3de0:
	.ascii "File: SRC/parse-type-single.lm Line: 68 Column: 14"
	.zero 1
uuid_00000000000c3e00:
	.ascii "File: SRC/parse-type.lm Line: 12 Column: 8"
	.zero 1
uuid_00000000000c3e19:
	.ascii "File: SRC/parse-type.lm Line: 22 Column: 14"
	.zero 1
uuid_00000000000c3e32:
	.ascii "File: SRC/parse-type.lm Line: 51 Column: 8"
	.zero 1
uuid_00000000000c3e80:
	.ascii "File: SRC/remove-parens.lm Line: 7 Column: 33"
	.zero 1
uuid_00000000000c3e8a:
	.ascii "File: SRC/remove-parens.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c3ecd:
	.ascii "File: SRC/take-one-expr.lm Line: 19 Column: 11"
	.zero 1
uuid_00000000000c3ed7:
	.ascii "File: SRC/take-one-expr.lm Line: 6 Column: 30"
	.zero 1
uuid_00000000000c3ee1:
	.ascii "src"
	.zero 1
cstring_SB_cache_CL_StringStringListStringStringListCaseNumber1:
.zero 32
uuid_00000000000c3ef1:
	.ascii "File: SRC/compile-declare-cstring.lm Line: 10 Column: 32"
	.zero 1
uuid_00000000000c3ef8:
	.ascii ":\n	.ascii \""
	.zero 1
uuid_00000000000c3ef9:
	.ascii "\"\n	.zero 1\n"
	.zero 1
uuid_00000000000c3f60:
	.ascii "File: SRC/compile-destructure-args.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c3f88:
	.ascii "True"
	.zero 1
uuid_00000000000c3f89:
	.ascii "False"
	.zero 1
uuid_00000000000c3f8a:
	.ascii "\\t"
	.zero 1
uuid_00000000000c3f8b:
	.ascii "10"
	.zero 1
uuid_00000000000c3f8c:
	.ascii "\\s"
	.zero 1
uuid_00000000000c3f8d:
	.ascii "32"
	.zero 1
uuid_00000000000c3f8e:
	.ascii "\\o"
	.zero 1
uuid_00000000000c3f8f:
	.ascii "35"
	.zero 1
uuid_00000000000c3f90:
	.ascii "\\`"
	.zero 1
uuid_00000000000c3f91:
	.ascii "39"
	.zero 1
uuid_00000000000c3f92:
	.ascii "\\["
	.zero 1
uuid_00000000000c3f93:
	.ascii "40"
	.zero 1
uuid_00000000000c3f94:
	.ascii "\\]"
	.zero 1
uuid_00000000000c3f95:
	.ascii "41"
	.zero 1
uuid_00000000000c3f96:
	.ascii "\\:"
	.zero 1
uuid_00000000000c3f97:
	.ascii "59"
	.zero 1
uuid_00000000000c3f98:
	.ascii "File: SRC/compile-expr-direct.lm Line: 36 Column: 20"
	.zero 1
uuid_00000000000c4074:
	.ascii "File: SRC/compile-expr-direct.lm Line: 82 Column: 14"
	.zero 1
uuid_00000000000c40db:
	.ascii "into-branch-conditional"
	.zero 1
uuid_00000000000c40dc:
	.ascii "rsp-offset"
	.zero 1
uuid_00000000000c40dd:
	.ascii "end-offset"
	.zero 1
uuid_00000000000c40de:
	.ascii "return-size"
	.zero 1
uuid_00000000000c40df:
	.ascii "ImplicitContext"
	.zero 1
uuid_00000000000c40e0:
	.ascii "ictx"
	.zero 1
uuid_00000000000c40e1:
	.ascii "primitive::if"
	.zero 1
uuid_00000000000c411b:
	.ascii "File: SRC/compile-expr-direct.lm Line: 167 Column: 11"
	.zero 1
uuid_00000000000c411f:
	.ascii "unframe"
	.zero 1
uuid_00000000000c4120:
	.ascii "	add $"
	.zero 1
uuid_00000000000c4121:
	.ascii ", %rsp\n"
	.zero 1
uuid_00000000000c4191:
	.ascii "File: SRC/compile-expr-direct.lm Line: 197 Column: 14"
	.zero 1
uuid_00000000000c41a4:
	.ascii "File: SRC/compile-expr-direct.lm Line: 6 Column: 5"
	.zero 1
uuid_00000000000c41cf:
	.ascii "File: SRC/compile-expr.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c41e2:
	.ascii "cdecl::args-size"
	.zero 1
uuid_00000000000c41e3:
	.ascii "File: SRC/compile-global.lm Line: 22 Column: 14"
	.zero 1
uuid_00000000000c41ed:
	.ascii "_COUNTER"
	.zero 1
uuid_00000000000c41ee:
	.ascii ":\n.zero 8\n"
	.zero 1
uuid_00000000000c41ef:
	.ascii "_LABEL:\n	.ascii	\"\\\\t"
	.zero 1
uuid_00000000000c41f0:
	.ascii "\\\\n\"\n	.zero 1\n"
	.zero 1
uuid_00000000000c41f1:
	.ascii "	mov $"
	.zero 1
uuid_00000000000c41f2:
	.ascii ", %RBX\n	mov 0(%RBX), %RAX\n"
	.zero 1
uuid_00000000000c41f3:
	.ascii "	inc %RAX\n	mov %RAX, 0(%RBX)\n"
	.zero 1
uuid_00000000000c41f4:
	.ascii "	push %RBP\n	mov %RSP, %RBP\n	push %RAX\n	call print_CL_ArrowNilU64\n	mov %RBP, %RSP\n	pop %RBP\n"
	.zero 1
uuid_00000000000c41f5:
	.ascii "	push %RBP\n	mov %RSP, %RBP\n	push $"
	.zero 1
uuid_00000000000c41f6:
	.ascii "_LABEL\n"
	.zero 1
uuid_00000000000c41f7:
	.ascii "	call print_CL_ArrowNilString\n	mov %RBP, %RSP\n	pop %RBP\n"
	.zero 1
uuid_00000000000c41fb:
	.ascii "frame"
	.zero 1
uuid_00000000000c41fc:
	.ascii "	sub $"
	.zero 1
uuid_00000000000c41fd:
	.ascii "	ret\n"
	.zero 1
uuid_00000000000c4222:
	.ascii ":\n.zero "
	.zero 1
uuid_00000000000c4223:
	.ascii "File: SRC/compile-global.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000c425a:
	.ascii "File: SRC/compile-push-rvalue.lm Line: 11 Column: 11"
	.zero 1
uuid_00000000000c4267:
	.ascii "File: SRC/compile-push-rvalue.lm Line: 8 Column: 5"
	.zero 1
uuid_00000000000c4274:
	.ascii "FunctionArguments"
	.zero 1
uuid_00000000000c4275:
	.ascii "function-id"
	.zero 1
uuid_00000000000c4276:
	.ascii "function-name"
	.zero 1
uuid_00000000000c4277:
	.ascii "function-type"
	.zero 1
uuid_00000000000c4278:
	.ascii "args-size"
	.zero 1
uuid_00000000000c4279:
	.ascii "used"
	.zero 1
uuid_00000000000c427a:
	.ascii "args"
	.zero 1
uuid_00000000000c427b:
	.ascii "primitive::call"
	.zero 1
uuid_00000000000c428e:
	.ascii "File: SRC/compile-stack-calls.lm Line: 7 Column: 5"
	.zero 1
uuid_00000000000c42b0:
	.ascii "File: SRC/translate-local-variables.lm Line: 11 Column: 17"
	.zero 1
uuid_00000000000c42b4:
	.ascii "File: SRC/translate-local-variables.lm Line: 8 Column: 11"
	.zero 1
uuid_00000000000c42bb:
	.ascii "File: SRC/translate-local-variables.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c42ce:
	.ascii "L"
	.zero 1
uuid_00000000000c42d2:
	.ascii "File: SRC/cc-blob.lm Line: 7 Column: 5"
	.zero 1
uuid_00000000000c42e2:
	.ascii "File: SRC/cc-blob.lm Line: 30 Column: 5"
	.zero 1
uuid_00000000000c4337:
	.ascii "File: SRC/cc-args.lm Line: 9 Column: 14"
	.zero 1
uuid_00000000000c4389:
	.ascii "Codegen Unexpected RHS"
	.zero 1
uuid_00000000000c438d:
	.ascii "File: SRC/cc-args.lm Line: 75 Column: 14"
	.zero 1
uuid_00000000000c43a0:
	.ascii "File: SRC/cc-args.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000c4419:
	.ascii "for-arg-i"
	.zero 1
uuid_00000000000c4459:
	.ascii "for-arg"
	.zero 1
uuid_00000000000c4490:
	.ascii "File: SRC/blob-render.lm Line: 37 Column: 11"
	.zero 1
uuid_00000000000c44c4:
	.ascii "for-atom"
	.zero 1
uuid_00000000000c44fb:
	.ascii "File: SRC/blob-render.lm Line: 53 Column: 34"
	.zero 1
uuid_00000000000c450e:
	.ascii "range"
	.zero 1
uuid_00000000000c4524:
	.ascii "uuid"
	.zero 1
uuid_00000000000c4537:
	.ascii "align"
	.zero 1
uuid_00000000000c4553:
	.ascii "=="
	.zero 1
uuid_00000000000c4590:
	.ascii "/"
	.zero 1
uuid_00000000000c45ac:
	.ascii "*"
	.zero 1
uuid_00000000000c45c8:
	.ascii "%"
	.zero 1
uuid_00000000000c463b:
	.ascii "File: SRC/blob-render.lm Line: 151 Column: 11"
	.zero 1
uuid_00000000000c4675:
	.ascii "File: SRC/blob-render.lm Line: 175 Column: 14"
	.zero 1
uuid_00000000000c467c:
	.ascii "Unknown Render Term "
	.zero 1
uuid_00000000000c467d:
	.ascii "File: SRC/blob-render.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000c4717:
	.ascii "File: SRC/blob-render.lm Line: 205 Column: 5"
	.zero 1
uuid_00000000000c4787:
	.ascii "File: SRC/extract-uuids.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c47c4:
	.ascii "File: SRC/index-typedefs.lm Line: 3 Column: 31"
	.zero 1
uuid_00000000000c483d:
	.ascii "Invalid Typedef"
	.zero 1
uuid_00000000000c483e:
	.ascii "File: SRC/index-typedefs.lm Line: 17 Column: 5"
	.zero 1
uuid_00000000000c48ba:
	.ascii "Unrecognized Macro Pattern\n"
	.zero 1
uuid_00000000000c48bb:
	.ascii "File: SRC/is-macro-head.lm Line: 5 Column: 30"
	.zero 1
uuid_00000000000c490d:
	.ascii "File: SRC/preprocess-apply-hard.lm Line: 11 Column: 11"
	.zero 1
uuid_00000000000c4917:
	.ascii "File: SRC/preprocess-apply-hard.lm Line: 25 Column: 14"
	.zero 1
uuid_00000000000c4921:
	.ascii "File: SRC/preprocess-apply-hard.lm Line: 6 Column: 30"
	.zero 1
uuid_00000000000c492b:
	.ascii "Invalid Macro Application\n"
	.zero 1
uuid_00000000000c4980:
	.ascii "_t"
	.zero 1
uuid_00000000000c4981:
	.ascii "Token"
	.zero 1
uuid_00000000000c4982:
	.ascii "Literal+Constant+String"
	.zero 1
uuid_00000000000c4983:
	.ascii "_"
	.zero 1
uuid_00000000000c49c3:
	.ascii "File: SRC/preprocess-apply-literals.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000c49e2:
	.ascii ":Location:"
	.zero 1
uuid_00000000000c49ec:
	.ascii "p"
	.zero 1
uuid_00000000000c49ff:
	.ascii "Location Unknown"
	.zero 1
uuid_00000000000c4a0c:
	.ascii "File: "
	.zero 1
uuid_00000000000c4a0d:
	.ascii " Line: "
	.zero 1
uuid_00000000000c4a0e:
	.ascii " Column: "
	.zero 1
uuid_00000000000c4a0f:
	.ascii "File: SRC/preprocess-apply-locations.lm Line: 8 Column: 11"
	.zero 1
uuid_00000000000c4a55:
	.ascii "File: SRC/preprocess-apply-locations.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c4ba3:
	.ascii "File: SRC/preprocess-apply.lm Line: 38 Column: 38"
	.zero 1
uuid_00000000000c4bc2:
	.ascii "File: SRC/preprocess-apply.lm Line: 56 Column: 38"
	.zero 1
uuid_00000000000c4c23:
	.ascii "File: SRC/preprocess-apply.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c4c66:
	.ascii "File: SRC/preprocess-is-suffixed.lm Line: 5 Column: 32"
	.zero 1
uuid_00000000000c4c97:
	.ascii "File: SRC/substitute-uuids.lm Line: 7 Column: 33"
	.zero 1
uuid_00000000000c4ce9:
	.ascii "File: SRC/substitute-uuids.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c4d98:
	.ascii ":Literal:"
	.zero 1
uuid_00000000000c4e0b:
	.ascii "File: SRC/try-destructure-macro.lm Line: 13 Column: 14"
	.zero 1
uuid_00000000000c4e63:
	.ascii ":Any:"
	.zero 1
uuid_00000000000c4ef4:
	.ascii ":Variable:"
	.zero 1
uuid_00000000000c4f58:
	.ascii ":Tag:"
	.zero 1
uuid_00000000000c4f7d:
	.ascii "Constant+Literal+U64"
	.zero 1
uuid_00000000000c4f7e:
	.ascii "Tag<"
	.zero 1
uuid_00000000000c4f94:
	.ascii "File: SRC/try-destructure-macro.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c4fe0:
	.ascii "Fragment Has No Type:\n"
	.zero 1
uuid_00000000000c4fe4:
	.ascii "File: SRC/destructure-lhs.lm Line: 7 Column: 11"
	.zero 1
uuid_00000000000c5021:
	.ascii "File: SRC/destructure-lhs.lm Line: 24 Column: 11"
	.zero 1
uuid_00000000000c5025:
	.ascii "Unexpected Destructure LHS: "
	.zero 1
uuid_00000000000c5026:
	.ascii "File: SRC/destructure-lhs.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c503c:
	.ascii "File: SRC/fragment::chain.lm Line: 27 Column: 36"
	.zero 1
uuid_00000000000c5067:
	.ascii "File: SRC/fragment::get.lm Line: 7 Column: 33"
	.zero 1
uuid_00000000000c506e:
	.ascii "File: SRC/fragment::get.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c5087:
	.ascii "File: SRC/fragment::set-context.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c50a0:
	.ascii "File: SRC/fragment::set-offset.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c50b9:
	.ascii "File: SRC/fragment::set-term.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c50d2:
	.ascii "File: SRC/fragment::set-type.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c50eb:
	.ascii "File: SRC/fragment::set-vararg.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c5104:
	.ascii "File: SRC/fragment::set.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c5108:
	.ascii "--blob"
	.zero 1
uuid_00000000000c5109:
	.ascii "--gnu"
	.zero 1
uuid_00000000000c510a:
	.ascii "--tokenize"
	.zero 1
uuid_00000000000c510b:
	.ascii "--parse"
	.zero 1
uuid_00000000000c510c:
	.ascii "--preprocess"
	.zero 1
uuid_00000000000c510d:
	.ascii "--typecheck"
	.zero 1
uuid_00000000000c510e:
	.ascii "--compile"
	.zero 1
uuid_00000000000c510f:
	.ascii "--strict"
	.zero 1
uuid_00000000000c5110:
	.ascii "--gradual"
	.zero 1
uuid_00000000000c5111:
	.ascii "--macro"
	.zero 1
uuid_00000000000c5112:
	.ascii "--nomacro"
	.zero 1
uuid_00000000000c5113:
	.ascii "--profile-invocations"
	.zero 1
uuid_00000000000c5114:
	.ascii "-o"
	.zero 1
uuid_00000000000c5115:
	.ascii "File: SRC/main.lm Line: 6 Column: 8"
	.zero 1
uuid_00000000000c5161:
	.ascii "File: SRC/main.lm Line: 35 Column: 37"
	.zero 1
uuid_00000000000c5175:
	.ascii "File: SRC/main.lm Line: 43 Column: 5"
	.zero 1
uuid_00000000000c5193:
	.ascii "File: LIB/default-list.lm Line: 57 Column: 25"
	.zero 1
uuid_00000000000c51b1:
	.ascii "File: LIB/default-list.lm Line: 44 Column: 25"
	.zero 1
uuid_00000000000c51c2:
	.ascii "List::head is fallible\n"
	.zero 1
uuid_00000000000c51c3:
	.ascii "File: LIB/default-list.lm Line: 10 Column: 5"
	.zero 1
uuid_00000000000c51ed:
	.ascii "File: LIB/default-list.lm Line: 33 Column: 8"
	.zero 1
uuid_00000000000c522d:
	.ascii "File: LIB/default-list.lm Line: 20 Column: 26"
	.zero 1
uuid_00000000000c52ca:
	.ascii "File: LIB/default-list.lm Line: 71 Column: 8"
	.zero 1
uuid_00000000000c52dd:
	.ascii "File: LIB/default-list.lm Line: 78 Column: 5"
	.zero 1
uuid_00000000000c534d:
	.ascii "File: LIB/hashtable.lm Line: 89 Column: 14"
	.zero 1
uuid_00000000000c54c3:
	.ascii "File: LIB/default-stdlib.lm Line: 29 Column: 5"
	.zero 1
uuid_00000000000c54d4:
	.ascii "File: LIB/default-stdlib.lm Line: 61 Column: 5"
	.zero 1
uuid_00000000000c562f:
	.ascii "File: LIB/hashtable.lm Line: 17 Column: 14"
	.zero 1
uuid_00000000000c56a3:
	.ascii "File: LIB/default-stdlib.lm Line: 44 Column: 5"
	.zero 1
